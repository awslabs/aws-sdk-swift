// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime
import SmithyReadWrite
import SmithyXML

extension CloudFormationClientTypes {
    public enum AccountFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case difference
        case intersection
        case `none`
        case union
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountFilterType] {
            return [
                .difference,
                .intersection,
                .none,
                .union,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .difference: return "DIFFERENCE"
            case .intersection: return "INTERSECTION"
            case .none: return "NONE"
            case .union: return "UNION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountFilterType(rawValue: rawValue) ?? AccountFilterType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.AccountGateResult: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.AccountGateResult, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.AccountGateResult()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Structure that contains the results of the account gate function which CloudFormation invokes, if present, before proceeding with a stack set operation in an account and Region. For each account and Region, CloudFormation lets you specify a Lambda function that encapsulates any requirements that must be met before CloudFormation can proceed with a stack set operation in that account and Region. CloudFormation invokes the function each time a stack set operation is requested for that account and Region; if the function returns FAILED, CloudFormation cancels the operation in that account and Region, and sets the stack set operation result status for that account and Region to FAILED. For more information, see [Configuring a target account gate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-account-gating.html).
    public struct AccountGateResult: Swift.Equatable {
        /// The status of the account gate function.
        ///
        /// * SUCCEEDED: The account gate function has determined that the account and Region passes any requirements for a stack set operation to occur. CloudFormation proceeds with the stack operation in that account and Region.
        ///
        /// * FAILED: The account gate function has determined that the account and Region doesn't meet the requirements for a stack set operation to occur. CloudFormation cancels the stack set operation in that account and Region, and sets the stack set operation result status for that account and Region to FAILED.
        ///
        /// * SKIPPED: CloudFormation has skipped calling the account gate function for this account and Region, for one of the following reasons:
        ///
        /// * An account gate function hasn't been specified for the account and Region. CloudFormation proceeds with the stack set operation in this account and Region.
        ///
        /// * The AWSCloudFormationStackSetExecutionRole of the stack set administration account lacks permissions to invoke the function. CloudFormation proceeds with the stack set operation in this account and Region.
        ///
        /// * Either no action is necessary, or no action is possible, on the stack. CloudFormation skips the stack set operation in this account and Region.
        public var status: CloudFormationClientTypes.AccountGateStatus?
        /// The reason for the account gate status assigned to this account and Region for the stack set operation.
        public var statusReason: Swift.String?

        public init(
            status: CloudFormationClientTypes.AccountGateStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum AccountGateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case skipped
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountGateStatus] {
            return [
                .failed,
                .skipped,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .skipped: return "SKIPPED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountGateStatus(rawValue: rawValue) ?? AccountGateStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.AccountLimit: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.AccountLimit, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.AccountLimit()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The AccountLimit data type. CloudFormation has the following limits per account:
    ///
    /// * Number of concurrent resources
    ///
    /// * Number of stacks
    ///
    /// * Number of stack outputs
    ///
    ///
    /// For more information about these account limits, and other CloudFormation limits, see [CloudFormation quotas](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html) in the CloudFormation User Guide.
    public struct AccountLimit: Swift.Equatable {
        /// The name of the account limit. Values: ConcurrentResourcesLimit | StackLimit | StackOutputsLimit
        public var name: Swift.String?
        /// The value that's associated with the account limit name.
        public var value: Swift.Int?

        public init(
            name: Swift.String? = nil,
            value: Swift.Int? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ActivateOrganizationsAccessInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("ActivateOrganizationsAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ActivateOrganizationsAccessInput {

    static func urlPathProvider(_ value: ActivateOrganizationsAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct ActivateOrganizationsAccessInput: Swift.Equatable {

    public init() { }
}

extension ActivateOrganizationsAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ActivateOrganizationsAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return ActivateOrganizationsAccessOutput()
        }
    }
}

public struct ActivateOrganizationsAccessOutput: Swift.Equatable {

    public init() { }
}

enum ActivateOrganizationsAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ActivateTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoUpdate = "AutoUpdate"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfig = "LoggingConfig"
        case majorVersion = "MajorVersion"
        case publicTypeArn = "PublicTypeArn"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
        case typeNameAlias = "TypeNameAlias"
        case versionBump = "VersionBump"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoUpdate = autoUpdate {
            try container.encode(autoUpdate, forKey: ClientRuntime.Key("AutoUpdate"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let majorVersion = majorVersion {
            try container.encode(majorVersion, forKey: ClientRuntime.Key("MajorVersion"))
        }
        if let publicTypeArn = publicTypeArn {
            try container.encode(publicTypeArn, forKey: ClientRuntime.Key("PublicTypeArn"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
        if let versionBump = versionBump {
            try container.encode(versionBump, forKey: ClientRuntime.Key("VersionBump"))
        }
        try container.encode("ActivateType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ActivateTypeInput {

    static func urlPathProvider(_ value: ActivateTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct ActivateTypeInput: Swift.Equatable {
    /// Whether to automatically update the extension in this account and Region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated. The default is true.
    public var autoUpdate: Swift.Bool?
    /// The name of the IAM execution role to use to activate the extension.
    public var executionRoleArn: Swift.String?
    /// Contains logging configuration information for an extension.
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available minor version of the major version selected. You can specify MajorVersion or VersionBump, but not both.
    public var majorVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the public extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publicTypeArn: Swift.String?
    /// The ID of the extension publisher. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publisherId: Swift.String?
    /// The extension type. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var typeName: Swift.String?
    /// An alias to assign to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console. An extension alias must be unique within a given account and Region. You can activate the same public resource multiple times in the same account and Region, using different type name aliases.
    public var typeNameAlias: Swift.String?
    /// Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdate.
    ///
    /// * MAJOR: CloudFormation updates the extension to the newest major version, if one is available.
    ///
    /// * MINOR: CloudFormation updates the extension to the newest minor version, if one is available.
    public var versionBump: CloudFormationClientTypes.VersionBump?

    public init(
        autoUpdate: Swift.Bool? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        majorVersion: Swift.Int? = nil,
        publicTypeArn: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil,
        typeNameAlias: Swift.String? = nil,
        versionBump: CloudFormationClientTypes.VersionBump? = nil
    )
    {
        self.autoUpdate = autoUpdate
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.majorVersion = majorVersion
        self.publicTypeArn = publicTypeArn
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
        self.typeNameAlias = typeNameAlias
        self.versionBump = versionBump
    }
}

extension ActivateTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ActivateTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ActivateTypeResult"]
            var value = ActivateTypeOutput()
            value.arn = try reader["Arn"].readIfPresent()
            return value
        }
    }
}

public struct ActivateTypeOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the activated extension, in this account and Region.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

enum ActivateTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension AlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = AlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The resource with the name requested already exists.
public struct AlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.AutoDeployment: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case retainStacksOnAccountRemoval = "RetainStacksOnAccountRemoval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let retainStacksOnAccountRemoval = retainStacksOnAccountRemoval {
            try container.encode(retainStacksOnAccountRemoval, forKey: ClientRuntime.Key("RetainStacksOnAccountRemoval"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.AutoDeployment, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.AutoDeployment()
            value.enabled = try reader["Enabled"].readIfPresent()
            value.retainStacksOnAccountRemoval = try reader["RetainStacksOnAccountRemoval"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).
    public struct AutoDeployment: Swift.Equatable {
        /// If set to true, StackSets automatically deploys additional stack instances to Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
        public var enabled: Swift.Bool?
        /// If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
        public var retainStacksOnAccountRemoval: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil,
            retainStacksOnAccountRemoval: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
            self.retainStacksOnAccountRemoval = retainStacksOnAccountRemoval
        }
    }

}

extension CloudFormationClientTypes.BatchDescribeTypeConfigurationsError: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case typeConfigurationIdentifier = "TypeConfigurationIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
        if let typeConfigurationIdentifier = typeConfigurationIdentifier {
            try container.encode(typeConfigurationIdentifier, forKey: ClientRuntime.Key("TypeConfigurationIdentifier"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.BatchDescribeTypeConfigurationsError, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.BatchDescribeTypeConfigurationsError()
            value.errorCode = try reader["ErrorCode"].readIfPresent()
            value.errorMessage = try reader["ErrorMessage"].readIfPresent()
            value.typeConfigurationIdentifier = try reader["TypeConfigurationIdentifier"].readIfPresent(readingClosure: CloudFormationClientTypes.TypeConfigurationIdentifier.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Detailed information concerning an error generated during the setting of configuration data for a CloudFormation extension.
    public struct BatchDescribeTypeConfigurationsError: Swift.Equatable {
        /// The error code.
        public var errorCode: Swift.String?
        /// The error message.
        public var errorMessage: Swift.String?
        /// Identifying information for the configuration of a CloudFormation extension.
        public var typeConfigurationIdentifier: CloudFormationClientTypes.TypeConfigurationIdentifier?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            typeConfigurationIdentifier: CloudFormationClientTypes.TypeConfigurationIdentifier? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.typeConfigurationIdentifier = typeConfigurationIdentifier
        }
    }

}

extension BatchDescribeTypeConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case typeConfigurationIdentifiers = "TypeConfigurationIdentifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let typeConfigurationIdentifiers = typeConfigurationIdentifiers {
            if !typeConfigurationIdentifiers.isEmpty {
                var typeConfigurationIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TypeConfigurationIdentifiers"))
                for (index0, typeconfigurationidentifier0) in typeConfigurationIdentifiers.enumerated() {
                    try typeConfigurationIdentifiersContainer.encode(typeconfigurationidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var typeConfigurationIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TypeConfigurationIdentifiers"))
                try typeConfigurationIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("BatchDescribeTypeConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension BatchDescribeTypeConfigurationsInput {

    static func urlPathProvider(_ value: BatchDescribeTypeConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

public struct BatchDescribeTypeConfigurationsInput: Swift.Equatable {
    /// The list of identifiers for the desired extension configurations.
    /// This member is required.
    public var typeConfigurationIdentifiers: [CloudFormationClientTypes.TypeConfigurationIdentifier]?

    public init(
        typeConfigurationIdentifiers: [CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
    )
    {
        self.typeConfigurationIdentifiers = typeConfigurationIdentifiers
    }
}

extension BatchDescribeTypeConfigurationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<BatchDescribeTypeConfigurationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["BatchDescribeTypeConfigurationsResult"]
            var value = BatchDescribeTypeConfigurationsOutput()
            value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.BatchDescribeTypeConfigurationsError.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.typeConfigurations = try reader["TypeConfigurations"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TypeConfigurationDetails.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.unprocessedTypeConfigurations = try reader["UnprocessedTypeConfigurations"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TypeConfigurationIdentifier.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct BatchDescribeTypeConfigurationsOutput: Swift.Equatable {
    /// A list of information concerning any errors generated during the setting of the specified configurations.
    public var errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]?
    /// A list of any of the specified extension configurations from the CloudFormation registry.
    public var typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]?
    /// A list of any of the specified extension configurations that CloudFormation could not process for any reason.
    public var unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]?

    public init(
        errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]? = nil,
        typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]? = nil,
        unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
    )
    {
        self.errors = errors
        self.typeConfigurations = typeConfigurations
        self.unprocessedTypeConfigurations = unprocessedTypeConfigurations
    }
}

enum BatchDescribeTypeConfigurationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeConfigurationNotFoundException": return try await TypeConfigurationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CFNRegistryException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CFNRegistryException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// An error occurred during a CloudFormation registry operation.
public struct CFNRegistryException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An message with details about the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CFNRegistryException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum CallAs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delegatedAdmin
        case `self`
        case sdkUnknown(Swift.String)

        public static var allCases: [CallAs] {
            return [
                .delegatedAdmin,
                .self,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delegatedAdmin: return "DELEGATED_ADMIN"
            case .self: return "SELF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CallAs(rawValue: rawValue) ?? CallAs.sdkUnknown(rawValue)
        }
    }
}

extension CancelUpdateStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("CancelUpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CancelUpdateStackInput {

    static func urlPathProvider(_ value: CancelUpdateStackInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [CancelUpdateStack] action.
public struct CancelUpdateStackInput: Swift.Equatable {
    /// A unique identifier for this CancelUpdateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to cancel an update on a stack with the same name. You might retry CancelUpdateStack requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// If you don't pass a parameter to StackName, the API returns a response that describes all resources in the account. The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request: { "Version": "2012-10-17", "Statement": [{ "Effect": "Deny", "Action": "cloudformation:DescribeStacks", "NotResource": "arn:aws:cloudformation:*:*:stack/*/*" }] } The name or the unique stack ID that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.stackName = stackName
    }
}

extension CancelUpdateStackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CancelUpdateStackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return CancelUpdateStackOutput()
        }
    }
}

public struct CancelUpdateStackOutput: Swift.Equatable {

    public init() { }
}

enum CancelUpdateStackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum Capability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capabilityAutoExpand
        case capabilityIam
        case capabilityNamedIam
        case sdkUnknown(Swift.String)

        public static var allCases: [Capability] {
            return [
                .capabilityAutoExpand,
                .capabilityIam,
                .capabilityNamedIam,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capabilityAutoExpand: return "CAPABILITY_AUTO_EXPAND"
            case .capabilityIam: return "CAPABILITY_IAM"
            case .capabilityNamedIam: return "CAPABILITY_NAMED_IAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Capability(rawValue: rawValue) ?? Capability.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Category: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activated
        case awsTypes
        case registered
        case thirdParty
        case sdkUnknown(Swift.String)

        public static var allCases: [Category] {
            return [
                .activated,
                .awsTypes,
                .registered,
                .thirdParty,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .awsTypes: return "AWS_TYPES"
            case .registered: return "REGISTERED"
            case .thirdParty: return "THIRD_PARTY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Category(rawValue: rawValue) ?? Category.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Change: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hookInvocationCount = "HookInvocationCount"
        case resourceChange = "ResourceChange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let hookInvocationCount = hookInvocationCount {
            try container.encode(hookInvocationCount, forKey: ClientRuntime.Key("HookInvocationCount"))
        }
        if let resourceChange = resourceChange {
            try container.encode(resourceChange, forKey: ClientRuntime.Key("ResourceChange"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Change, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Change()
            value.type = try reader["Type"].readIfPresent()
            value.hookInvocationCount = try reader["HookInvocationCount"].readIfPresent()
            value.resourceChange = try reader["ResourceChange"].readIfPresent(readingClosure: CloudFormationClientTypes.ResourceChange.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Change structure describes the changes CloudFormation will perform if you execute the change set.
    public struct Change: Swift.Equatable {
        /// Is either null, if no hooks invoke for the resource, or contains the number of hooks that will invoke for the resource.
        public var hookInvocationCount: Swift.Int?
        /// A ResourceChange structure that describes the resource and action that CloudFormation will perform.
        public var resourceChange: CloudFormationClientTypes.ResourceChange?
        /// The type of entity that CloudFormation changes. Currently, the only entity type is Resource.
        public var type: CloudFormationClientTypes.ChangeType?

        public init(
            hookInvocationCount: Swift.Int? = nil,
            resourceChange: CloudFormationClientTypes.ResourceChange? = nil,
            type: CloudFormationClientTypes.ChangeType? = nil
        )
        {
            self.hookInvocationCount = hookInvocationCount
            self.resourceChange = resourceChange
            self.type = type
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case `dynamic`
        case `import`
        case modify
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .add,
                .dynamic,
                .import,
                .modify,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "Add"
            case .dynamic: return "Dynamic"
            case .import: return "Import"
            case .modify: return "Modify"
            case .remove: return "Remove"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeAction(rawValue: rawValue) ?? ChangeAction.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ChangeSetHook: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureMode = "FailureMode"
        case invocationPoint = "InvocationPoint"
        case targetDetails = "TargetDetails"
        case typeConfigurationVersionId = "TypeConfigurationVersionId"
        case typeName = "TypeName"
        case typeVersionId = "TypeVersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureMode = failureMode {
            try container.encode(failureMode, forKey: ClientRuntime.Key("FailureMode"))
        }
        if let invocationPoint = invocationPoint {
            try container.encode(invocationPoint, forKey: ClientRuntime.Key("InvocationPoint"))
        }
        if let targetDetails = targetDetails {
            try container.encode(targetDetails, forKey: ClientRuntime.Key("TargetDetails"))
        }
        if let typeConfigurationVersionId = typeConfigurationVersionId {
            try container.encode(typeConfigurationVersionId, forKey: ClientRuntime.Key("TypeConfigurationVersionId"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let typeVersionId = typeVersionId {
            try container.encode(typeVersionId, forKey: ClientRuntime.Key("TypeVersionId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ChangeSetHook, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ChangeSetHook()
            value.invocationPoint = try reader["InvocationPoint"].readIfPresent()
            value.failureMode = try reader["FailureMode"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            value.typeVersionId = try reader["TypeVersionId"].readIfPresent()
            value.typeConfigurationVersionId = try reader["TypeConfigurationVersionId"].readIfPresent()
            value.targetDetails = try reader["TargetDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.ChangeSetHookTargetDetails.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Specifies the resource, the hook, and the hook version to be invoked.
    public struct ChangeSetHook: Swift.Equatable {
        /// Specify the hook failure mode for non-compliant resources in the followings ways.
        ///
        /// * FAIL Stops provisioning resources.
        ///
        /// * WARN Allows provisioning to continue with a warning message.
        public var failureMode: CloudFormationClientTypes.HookFailureMode?
        /// Specifies the points in provisioning logic where a hook is invoked.
        public var invocationPoint: CloudFormationClientTypes.HookInvocationPoint?
        /// Specifies details about the target that the hook will run against.
        public var targetDetails: CloudFormationClientTypes.ChangeSetHookTargetDetails?
        /// The version ID of the type configuration.
        public var typeConfigurationVersionId: Swift.String?
        /// The unique name for your hook. Specifies a three-part namespace for your hook, with a recommended pattern of Organization::Service::Hook. The following organization namespaces are reserved and can't be used in your hook type names:
        ///
        /// * Alexa
        ///
        /// * AMZN
        ///
        /// * Amazon
        ///
        /// * ASK
        ///
        /// * AWS
        ///
        /// * Custom
        ///
        /// * Dev
        public var typeName: Swift.String?
        /// The version ID of the type specified.
        public var typeVersionId: Swift.String?

        public init(
            failureMode: CloudFormationClientTypes.HookFailureMode? = nil,
            invocationPoint: CloudFormationClientTypes.HookInvocationPoint? = nil,
            targetDetails: CloudFormationClientTypes.ChangeSetHookTargetDetails? = nil,
            typeConfigurationVersionId: Swift.String? = nil,
            typeName: Swift.String? = nil,
            typeVersionId: Swift.String? = nil
        )
        {
            self.failureMode = failureMode
            self.invocationPoint = invocationPoint
            self.targetDetails = targetDetails
            self.typeConfigurationVersionId = typeConfigurationVersionId
            self.typeName = typeName
            self.typeVersionId = typeVersionId
        }
    }

}

extension CloudFormationClientTypes.ChangeSetHookResourceTargetDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceAction = "ResourceAction"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceAction = resourceAction {
            try container.encode(resourceAction, forKey: ClientRuntime.Key("ResourceAction"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ChangeSetHookResourceTargetDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ChangeSetHookResourceTargetDetails()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.resourceAction = try reader["ResourceAction"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Specifies RESOURCE type target details for activated hooks.
    public struct ChangeSetHookResourceTargetDetails: Swift.Equatable {
        /// The resource's logical ID, which is defined in the stack's template.
        public var logicalResourceId: Swift.String?
        /// Specifies the action of the resource.
        public var resourceAction: CloudFormationClientTypes.ChangeAction?
        /// The type of CloudFormation resource, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?

        public init(
            logicalResourceId: Swift.String? = nil,
            resourceAction: CloudFormationClientTypes.ChangeAction? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceAction = resourceAction
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.ChangeSetHookTargetDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTargetDetails = "ResourceTargetDetails"
        case targetType = "TargetType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceTargetDetails = resourceTargetDetails {
            try container.encode(resourceTargetDetails, forKey: ClientRuntime.Key("ResourceTargetDetails"))
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: ClientRuntime.Key("TargetType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ChangeSetHookTargetDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ChangeSetHookTargetDetails()
            value.targetType = try reader["TargetType"].readIfPresent()
            value.resourceTargetDetails = try reader["ResourceTargetDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.ChangeSetHookResourceTargetDetails.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Specifies target details for an activated hook.
    public struct ChangeSetHookTargetDetails: Swift.Equatable {
        /// Required if TargetType is RESOURCE.
        public var resourceTargetDetails: CloudFormationClientTypes.ChangeSetHookResourceTargetDetails?
        /// The name of the type.
        public var targetType: CloudFormationClientTypes.HookTargetType?

        public init(
            resourceTargetDetails: CloudFormationClientTypes.ChangeSetHookResourceTargetDetails? = nil,
            targetType: CloudFormationClientTypes.HookTargetType? = nil
        )
        {
            self.resourceTargetDetails = resourceTargetDetails
            self.targetType = targetType
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeSetHooksStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case planned
        case planning
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetHooksStatus] {
            return [
                .planned,
                .planning,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .planned: return "PLANNED"
            case .planning: return "PLANNING"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetHooksStatus(rawValue: rawValue) ?? ChangeSetHooksStatus.sdkUnknown(rawValue)
        }
    }
}

extension ChangeSetNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ChangeSetNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified change set name or ID doesn't exit. To view valid change sets for a stack, use the ListChangeSets operation.
public struct ChangeSetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ChangeSetNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createInProgress
        case createPending
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deletePending
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetStatus] {
            return [
                .createComplete,
                .createInProgress,
                .createPending,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deletePending,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetStatus(rawValue: rawValue) ?? ChangeSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ChangeSetSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case importExistingResources = "ImportExistingResources"
        case includeNestedStacks = "IncludeNestedStacks"
        case parentChangeSetId = "ParentChangeSetId"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionStatus = executionStatus {
            try container.encode(executionStatus, forKey: ClientRuntime.Key("ExecutionStatus"))
        }
        if let importExistingResources = importExistingResources {
            try container.encode(importExistingResources, forKey: ClientRuntime.Key("ImportExistingResources"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let parentChangeSetId = parentChangeSetId {
            try container.encode(parentChangeSetId, forKey: ClientRuntime.Key("ParentChangeSetId"))
        }
        if let rootChangeSetId = rootChangeSetId {
            try container.encode(rootChangeSetId, forKey: ClientRuntime.Key("RootChangeSetId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ChangeSetSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ChangeSetSummary()
            value.stackId = try reader["StackId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.changeSetId = try reader["ChangeSetId"].readIfPresent()
            value.changeSetName = try reader["ChangeSetName"].readIfPresent()
            value.executionStatus = try reader["ExecutionStatus"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.description = try reader["Description"].readIfPresent()
            value.includeNestedStacks = try reader["IncludeNestedStacks"].readIfPresent()
            value.parentChangeSetId = try reader["ParentChangeSetId"].readIfPresent()
            value.rootChangeSetId = try reader["RootChangeSetId"].readIfPresent()
            value.importExistingResources = try reader["ImportExistingResources"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The ChangeSetSummary structure describes a change set, its status, and the stack with which it's associated.
    public struct ChangeSetSummary: Swift.Equatable {
        /// The ID of the change set.
        public var changeSetId: Swift.String?
        /// The name of the change set.
        public var changeSetName: Swift.String?
        /// The start time when the change set was created, in UTC.
        public var creationTime: ClientRuntime.Date?
        /// Descriptive information about the change set.
        public var description: Swift.String?
        /// If the change set execution status is AVAILABLE, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
        public var executionStatus: CloudFormationClientTypes.ExecutionStatus?
        /// Indicates if the change set imports resources that already exist.
        public var importExistingResources: Swift.Bool?
        /// Specifies the current setting of IncludeNestedStacks for the change set.
        public var includeNestedStacks: Swift.Bool?
        /// The parent change set ID.
        public var parentChangeSetId: Swift.String?
        /// The root change set ID.
        public var rootChangeSetId: Swift.String?
        /// The ID of the stack with which the change set is associated.
        public var stackId: Swift.String?
        /// The name of the stack with which the change set is associated.
        public var stackName: Swift.String?
        /// The state of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
        public var status: CloudFormationClientTypes.ChangeSetStatus?
        /// A description of the change set's status. For example, if your change set is in the FAILED state, CloudFormation shows the error message.
        public var statusReason: Swift.String?

        public init(
            changeSetId: Swift.String? = nil,
            changeSetName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
            importExistingResources: Swift.Bool? = nil,
            includeNestedStacks: Swift.Bool? = nil,
            parentChangeSetId: Swift.String? = nil,
            rootChangeSetId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            status: CloudFormationClientTypes.ChangeSetStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.changeSetId = changeSetId
            self.changeSetName = changeSetName
            self.creationTime = creationTime
            self.description = description
            self.executionStatus = executionStatus
            self.importExistingResources = importExistingResources
            self.includeNestedStacks = includeNestedStacks
            self.parentChangeSetId = parentChangeSetId
            self.rootChangeSetId = rootChangeSetId
            self.stackId = stackId
            self.stackName = stackName
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeSetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case `import`
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetType] {
            return [
                .create,
                .import,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .import: return "IMPORT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetType(rawValue: rawValue) ?? ChangeSetType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case directmodification
        case parameterreference
        case resourceattribute
        case resourcereference
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSource] {
            return [
                .automatic,
                .directmodification,
                .parameterreference,
                .resourceattribute,
                .resourcereference,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "Automatic"
            case .directmodification: return "DirectModification"
            case .parameterreference: return "ParameterReference"
            case .resourceattribute: return "ResourceAttribute"
            case .resourcereference: return "ResourceReference"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSource(rawValue: rawValue) ?? ChangeSource.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resource: return "Resource"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeType(rawValue: rawValue) ?? ChangeType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ConcurrencyMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case softFailureTolerance
        case strictFailureTolerance
        case sdkUnknown(Swift.String)

        public static var allCases: [ConcurrencyMode] {
            return [
                .softFailureTolerance,
                .strictFailureTolerance,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .softFailureTolerance: return "SOFT_FAILURE_TOLERANCE"
            case .strictFailureTolerance: return "STRICT_FAILURE_TOLERANCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConcurrencyMode(rawValue: rawValue) ?? ConcurrencyMode.sdkUnknown(rawValue)
        }
    }
}

extension ConcurrentResourcesLimitExceededException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ConcurrentResourcesLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// No more than 5 generated templates can be in an InProgress or Pending status at one time. This error is also returned if a generated template that is in an InProgress or Pending status is attempted to be updated or deleted.
public struct ConcurrentResourcesLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentResourcesLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ContinueUpdateRollbackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case resourcesToSkip = "ResourcesToSkip"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let resourcesToSkip = resourcesToSkip {
            if !resourcesToSkip.isEmpty {
                var resourcesToSkipContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToSkip"))
                for (index0, resourcetoskip0) in resourcesToSkip.enumerated() {
                    try resourcesToSkipContainer.encode(resourcetoskip0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesToSkipContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToSkip"))
                try resourcesToSkipContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ContinueUpdateRollback", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ContinueUpdateRollbackInput {

    static func urlPathProvider(_ value: ContinueUpdateRollbackInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [ContinueUpdateRollback] action.
public struct ContinueUpdateRollbackInput: Swift.Equatable {
    /// A unique identifier for this ContinueUpdateRollback request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to continue the rollback to a stack with the same name. You might retry ContinueUpdateRollback requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the UPDATE_FAILED state because a rollback failed. You can't specify resources that are in the UPDATE_FAILED state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the [DescribeStackResources] action, and view the resource status reason. Specify this property to skip rolling back resources that CloudFormation can't successfully roll back. We recommend that you [ troubleshoot](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed) resources before skipping them. CloudFormation sets the status of the specified resources to UPDATE_COMPLETE and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don't, subsequent stack updates might fail, and the stack will become unrecoverable. Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources. To skip resources that are part of nested stacks, use the following format: NestedStackName.ResourceLogicalID. If you want to specify the logical ID of a stack resource (Type: AWS::CloudFormation::Stack) in the ResourcesToSkip list, then its corresponding embedded stack must be in one of the following states: DELETE_IN_PROGRESS, DELETE_COMPLETE, or DELETE_FAILED. Don't confuse a child stack's name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see [Using ResourcesToSkip to recover a nested stacks hierarchy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks).
    public var resourcesToSkip: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least permission. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The name or the unique ID of the stack that you want to continue rolling back. Don't specify the name of a nested stack (a stack that was created by using the AWS::CloudFormation::Stack resource). Instead, use this operation on the parent stack (the stack that contains the AWS::CloudFormation::Stack resource).
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        resourcesToSkip: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.resourcesToSkip = resourcesToSkip
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

extension ContinueUpdateRollbackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ContinueUpdateRollbackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return ContinueUpdateRollbackOutput()
        }
    }
}

/// The output for a [ContinueUpdateRollback] operation.
public struct ContinueUpdateRollbackOutput: Swift.Equatable {

    public init() { }
}

enum ContinueUpdateRollbackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateChangeSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetName = "ChangeSetName"
        case changeSetType = "ChangeSetType"
        case clientToken = "ClientToken"
        case description = "Description"
        case importExistingResources = "ImportExistingResources"
        case includeNestedStacks = "IncludeNestedStacks"
        case notificationARNs = "NotificationARNs"
        case onStackFailure = "OnStackFailure"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case resourcesToImport = "ResourcesToImport"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let changeSetType = changeSetType {
            try container.encode(changeSetType, forKey: ClientRuntime.Key("ChangeSetType"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let importExistingResources = importExistingResources {
            try container.encode(importExistingResources, forKey: ClientRuntime.Key("ImportExistingResources"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let onStackFailure = onStackFailure {
            try container.encode(onStackFailure, forKey: ClientRuntime.Key("OnStackFailure"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourcesToImport = resourcesToImport {
            if !resourcesToImport.isEmpty {
                var resourcesToImportContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToImport"))
                for (index0, resourcetoimport0) in resourcesToImport.enumerated() {
                    try resourcesToImportContainer.encode(resourcetoimport0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesToImportContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToImport"))
                try resourcesToImportContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("CreateChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateChangeSetInput {

    static func urlPathProvider(_ value: CreateChangeSetInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [CreateChangeSet] action.
public struct CreateChangeSetInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM resources in CloudFormation templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. This capacity doesn't apply to creating change sets, and specifying it when creating change sets has no effect. If you want to create a stack from a stack template that contains macros and nested stacks, you must create or update the stack directly from the template using the [CreateStack] or [UpdateStack] action, and specifying this capability. For more information about macros, see [Using CloudFormation macros to perform custom processing on templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    ///
    ///
    /// Only one of the Capabilities and ResourceType parameters can be specified.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The name of the change set. The name must be unique among all change sets that are associated with the specified stack. A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can't exceed 128 characters.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// The type of change set operation. To create a change set for a new stack, specify CREATE. To create a change set for an existing stack, specify UPDATE. To create a change set for an import operation, specify IMPORT. If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the [REVIEW_IN_PROGRESS](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995) state until you execute the change set. By default, CloudFormation specifies UPDATE. You can't use the UPDATE type to create a change set for a new stack or the CREATE type to create a change set for an existing stack.
    public var changeSetType: CloudFormationClientTypes.ChangeSetType?
    /// A unique identifier for this CreateChangeSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create another change set with the same name. You might retry CreateChangeSet requests to ensure that CloudFormation successfully received them.
    public var clientToken: Swift.String?
    /// A description to help you identify this change set.
    public var description: Swift.String?
    /// Indicates if the change set imports resources that already exist. This parameter can only import resources that have custom names in templates. For more information, see [name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) in the CloudFormation User Guide. To import resources that do not accept custom names, such as EC2 instances, use the resource import feature instead. For more information, see [Bringing existing resources into CloudFormation management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import.html) in the CloudFormation User Guide.
    public var importExistingResources: Swift.Bool?
    /// Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to False. To include nested sets in a change set, specify True.
    public var includeNestedStacks: Swift.Bool?
    /// The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list.
    public var notificationARNs: [Swift.String]?
    /// Determines what action will be taken if stack creation fails. If this parameter is specified, the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation must not be specified. This must be one of these values:
    ///
    /// * DELETE - Deletes the change set if the stack creation fails. This is only valid when the ChangeSetType parameter is set to CREATE. If the deletion of the stack fails, the status of the stack is DELETE_FAILED.
    ///
    /// * DO_NOTHING - if the stack creation fails, do nothing. This is equivalent to specifying true for the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation.
    ///
    /// * ROLLBACK - if the stack creation fails, roll back the stack. This is equivalent to specifying false for the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation.
    ///
    ///
    /// For nested stacks, when the OnStackFailure parameter is set to DELETE for the change set for the parent stack, any failure in a child stack will cause the parent stack creation to fail and all stacks to be deleted.
    public var onStackFailure: CloudFormationClientTypes.OnStackFailure?
    /// A list of Parameter structures that specify input parameters for the change set. For more information, see the [Parameter] data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with if you execute this change set, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource type that you're updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see [Controlling access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html) in the CloudFormation User Guide. Only one of the Capabilities and ResourceType parameters can be specified.
    public var resourceTypes: [Swift.String]?
    /// The resources to import into your stack.
    public var resourcesToImport: [CloudFormationClientTypes.ResourceToImport]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least permission. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack's information with the information that you submit, such as a modified template or different parameter input values.
    /// This member is required.
    public var stackName: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
    public var templateBody: Swift.String?
    /// The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified. Conditional: You must specify only TemplateBody or TemplateURL.
    public var templateURL: Swift.String?
    /// Whether to reuse the template that's associated with the stack to create the change set.
    public var usePreviousTemplate: Swift.Bool?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetName: Swift.String? = nil,
        changeSetType: CloudFormationClientTypes.ChangeSetType? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        importExistingResources: Swift.Bool? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        onStackFailure: CloudFormationClientTypes.OnStackFailure? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        resourcesToImport: [CloudFormationClientTypes.ResourceToImport]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetName = changeSetName
        self.changeSetType = changeSetType
        self.clientToken = clientToken
        self.description = description
        self.importExistingResources = importExistingResources
        self.includeNestedStacks = includeNestedStacks
        self.notificationARNs = notificationARNs
        self.onStackFailure = onStackFailure
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.resourcesToImport = resourcesToImport
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

extension CreateChangeSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateChangeSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateChangeSetResult"]
            var value = CreateChangeSetOutput()
            value.id = try reader["Id"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            return value
        }
    }
}

/// The output for the [CreateChangeSet] action.
public struct CreateChangeSetOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the change set.
    public var id: Swift.String?
    /// The unique ID of the stack.
    public var stackId: Swift.String?

    public init(
        id: Swift.String? = nil,
        stackId: Swift.String? = nil
    )
    {
        self.id = id
        self.stackId = stackId
    }
}

enum CreateChangeSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExistsException": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientCapabilitiesException": return try await InsufficientCapabilitiesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateGeneratedTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generatedTemplateName = "GeneratedTemplateName"
        case resources = "Resources"
        case stackName = "StackName"
        case templateConfiguration = "TemplateConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        if let resources = resources {
            if !resources.isEmpty {
                var resourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Resources"))
                for (index0, resourcedefinition0) in resources.enumerated() {
                    try resourcesContainer.encode(resourcedefinition0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Resources"))
                try resourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let templateConfiguration = templateConfiguration {
            try container.encode(templateConfiguration, forKey: ClientRuntime.Key("TemplateConfiguration"))
        }
        try container.encode("CreateGeneratedTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateGeneratedTemplateInput {

    static func urlPathProvider(_ value: CreateGeneratedTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateGeneratedTemplateInput: Swift.Equatable {
    /// The name assigned to the generated template.
    /// This member is required.
    public var generatedTemplateName: Swift.String?
    /// An optional list of resources to be included in the generated template. If no resources are specified,the template will be created without any resources. Resources can be added to the template using the UpdateGeneratedTemplate API action.
    public var resources: [CloudFormationClientTypes.ResourceDefinition]?
    /// An optional name or ARN of a stack to use as the base stack for the generated template.
    public var stackName: Swift.String?
    /// The configuration details of the generated template, including the DeletionPolicy and UpdateReplacePolicy.
    public var templateConfiguration: CloudFormationClientTypes.TemplateConfiguration?

    public init(
        generatedTemplateName: Swift.String? = nil,
        resources: [CloudFormationClientTypes.ResourceDefinition]? = nil,
        stackName: Swift.String? = nil,
        templateConfiguration: CloudFormationClientTypes.TemplateConfiguration? = nil
    )
    {
        self.generatedTemplateName = generatedTemplateName
        self.resources = resources
        self.stackName = stackName
        self.templateConfiguration = templateConfiguration
    }
}

extension CreateGeneratedTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateGeneratedTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateGeneratedTemplateResult"]
            var value = CreateGeneratedTemplateOutput()
            value.generatedTemplateId = try reader["GeneratedTemplateId"].readIfPresent()
            return value
        }
    }
}

public struct CreateGeneratedTemplateOutput: Swift.Equatable {
    /// The ID of the generated template.
    public var generatedTemplateId: Swift.String?

    public init(
        generatedTemplateId: Swift.String? = nil
    )
    {
        self.generatedTemplateId = generatedTemplateId
    }
}

enum CreateGeneratedTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExistsException": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConcurrentResourcesLimitExceeded": return try await ConcurrentResourcesLimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case enableTerminationProtection = "EnableTerminationProtection"
        case notificationARNs = "NotificationARNs"
        case onFailure = "OnFailure"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case retainExceptOnCreate = "RetainExceptOnCreate"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyURL = "StackPolicyURL"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let onFailure = onFailure {
            try container.encode(onFailure, forKey: ClientRuntime.Key("OnFailure"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let retainExceptOnCreate = retainExceptOnCreate {
            try container.encode(retainExceptOnCreate, forKey: ClientRuntime.Key("RetainExceptOnCreate"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
        try container.encode("CreateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackInput {

    static func urlPathProvider(_ value: CreateStackInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [CreateStack] action.
public struct CreateStackInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. If you want to create a stack from a stack template that contains macros and nested stacks, you must create the stack directly from the template using this capability. You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs. Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified. For more information, see [Using CloudFormation macros to perform custom processing on templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    ///
    ///
    /// Only one of the Capabilities and ResourceType parameters can be specified.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this CreateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create a stack with the same name. You might retry CreateStack requests to ensure that CloudFormation successfully received them. All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// Set to true to disable rollback of the stack if stack creation failed. You can specify either DisableRollback or OnFailure, but not both. Default: false
    public var disableRollback: Swift.Bool?
    /// Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see [Protecting a Stack From Being Deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html) in the CloudFormation User Guide. Termination protection is deactivated on stacks by default. For [nested stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html), termination protection is set on the root stack and can't be changed directly on the nested stack.
    public var enableTerminationProtection: Swift.Bool?
    /// The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI).
    public var notificationARNs: [Swift.String]?
    /// Determines what action will be taken if stack creation fails. This must be one of: DO_NOTHING, ROLLBACK, or DELETE. You can specify either OnFailure or DisableRollback, but not both. Default: ROLLBACK
    public var onFailure: CloudFormationClientTypes.OnFailure?
    /// A list of Parameter structures that specify input parameters for the stack. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with for this create stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. Use the following syntax to describe template resource types: AWS::* (for all Amazon Web Services resources), Custom::* (for all custom resources), Custom::logical_ID  (for a specific custom resource), AWS::service_name::* (for all resources of a particular Amazon Web Services service), and AWS::service_name::resource_logical_ID  (for a specific Amazon Web Services resource). If the list of resource types doesn't include a resource that you're creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see [Controlling Access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html). Only one of the Capabilities and ResourceType parameters can be specified.
    public var resourceTypes: [Swift.String]?
    /// When set to true, newly created resources are deleted when the operation rolls back. This includes newly created resources marked with a deletion policy of Retain. Default: false
    public var retainExceptOnCreate: Swift.Bool?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name that's associated with the stack. The name must be unique in the Region in which you are creating the stack. A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can't be longer than 128 characters.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing the stack policy body. For more information, go to [ Prevent Updates to Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyBody: Swift.String?
    /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyURL: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateURL: Swift.String?
    /// The amount of time that can pass before the stack status becomes CREATE_FAILED; if DisableRollback is not set or is set to false, the stack will be rolled back.
    public var timeoutInMinutes: Swift.Int?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        enableTerminationProtection: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        onFailure: CloudFormationClientTypes.OnFailure? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        retainExceptOnCreate: Swift.Bool? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        timeoutInMinutes: Swift.Int? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.enableTerminationProtection = enableTerminationProtection
        self.notificationARNs = notificationARNs
        self.onFailure = onFailure
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.retainExceptOnCreate = retainExceptOnCreate
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.timeoutInMinutes = timeoutInMinutes
    }
}

extension CreateStackInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameterOverrides = "ParameterOverrides"
        case regions = "Regions"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("CreateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackInstancesInput {

    static func urlPathProvider(_ value: CreateStackInstancesInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of stack set parameters whose values you want to override in the selected stack instances. Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:
    ///
    /// * To override the current value for a parameter, include the parameter and specify its value.
    ///
    /// * To leave an overridden parameter set to its present value, include the parameter and specify UsePreviousValue as true. (You can't specify both a value and set UsePreviousValue to true.)
    ///
    /// * To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don't include the parameter in the list.
    ///
    /// * To leave all parameters set to their present values, don't specify this property at all.
    ///
    ///
    /// During stack set updates, any parameter values overridden for a stack instance aren't updated, but retain their overridden value. You can only override the parameter values that are specified in the stack set; to add or delete a parameter itself, use [UpdateStackSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html) to update the stack set template.
    public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts.
    /// This member is required.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set that you want to create stack instances from.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

extension CreateStackInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateStackInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateStackInstancesResult"]
            var value = CreateStackInstancesOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct CreateStackInstancesOutput: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum CreateStackInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationIdAlreadyExistsException": return try await OperationIdAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StaleRequestException": return try await StaleRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateStackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateStackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateStackResult"]
            var value = CreateStackOutput()
            value.stackId = try reader["StackId"].readIfPresent()
            return value
        }
    }
}

/// The output for a [CreateStack] action.
public struct CreateStackOutput: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init(
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

enum CreateStackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExistsException": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientCapabilitiesException": return try await InsufficientCapabilitiesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreateStackSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case callAs = "CallAs"
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case stackId = "StackId"
        case stackSetName = "StackSetName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("CreateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension CreateStackSetInput {

    static func urlPathProvider(_ value: CreateStackSetInput) -> Swift.String? {
        return "/"
    }
}

public struct CreateStackSetInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Prerequisites: Granting Permissions for Stack Set Operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
    public var administrationRoleARN: Swift.String?
    /// Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
    public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * To create a stack set with service-managed permissions while signed in to the management account, specify SELF.
    ///
    /// * To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    ///
    ///
    /// Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html). Stack sets with service-managed permissions don't currently support the use of macros in templates. (This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this CreateStackSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to create another stack set with the same name. You might retry CreateStackSet requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically.
    public var clientRequestToken: Swift.String?
    /// A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
    public var description: Swift.String?
    /// The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation. Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.
    public var executionRoleName: Swift.String?
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public var managedExecution: CloudFormationClientTypes.ManagedExecution?
    /// The input parameters for the stack set template.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
    ///
    /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
    ///
    /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
    public var permissionModel: CloudFormationClientTypes.PermissionModels?
    /// The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack.
    public var stackId: Swift.String?
    /// The name to associate with the stack set. The name must be unique in the Region where you create your stack set. A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can't be longer than 128 characters.
    /// This member is required.
    public var stackSetName: Swift.String?
    /// The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified. If you specify tags as part of a CreateStackSet action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don't, the entire CreateStackSet action fails with an access denied error, and the stack set is not created.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateBody: Swift.String?
    /// The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.
    public var templateURL: Swift.String?

    public init(
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        stackId: Swift.String? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.executionRoleName = executionRoleName
        self.managedExecution = managedExecution
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.stackId = stackId
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension CreateStackSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<CreateStackSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["CreateStackSetResult"]
            var value = CreateStackSetOutput()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            return value
        }
    }
}

public struct CreateStackSetOutput: Swift.Equatable {
    /// The ID of the stack set that you're creating.
    public var stackSetId: Swift.String?

    public init(
        stackSetId: Swift.String? = nil
    )
    {
        self.stackSetId = stackSetId
    }
}

enum CreateStackSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CreatedButModifiedException": return try await CreatedButModifiedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "NameAlreadyExistsException": return try await NameAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CreatedButModifiedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = CreatedButModifiedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified resource exists, but has been changed.
public struct CreatedButModifiedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "CreatedButModifiedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension DeactivateOrganizationsAccessInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DeactivateOrganizationsAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeactivateOrganizationsAccessInput {

    static func urlPathProvider(_ value: DeactivateOrganizationsAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct DeactivateOrganizationsAccessInput: Swift.Equatable {

    public init() { }
}

extension DeactivateOrganizationsAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeactivateOrganizationsAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeactivateOrganizationsAccessOutput()
        }
    }
}

public struct DeactivateOrganizationsAccessOutput: Swift.Equatable {

    public init() { }
}

enum DeactivateOrganizationsAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeactivateTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("DeactivateType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeactivateTypeInput {

    static func urlPathProvider(_ value: DeactivateTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct DeactivateTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the extension, in this account and Region. Conditional: You must specify either Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The extension type. Conditional: You must specify either Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The type name of the extension, in this account and Region. If you specified a type name alias when enabling the extension, use the type name alias. Conditional: You must specify either Arn, or TypeName and Type.
    public var typeName: Swift.String?

    public init(
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
    }
}

extension DeactivateTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeactivateTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeactivateTypeOutput()
        }
    }
}

public struct DeactivateTypeOutput: Swift.Equatable {

    public init() { }
}

enum DeactivateTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteChangeSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteChangeSetInput {

    static func urlPathProvider(_ value: DeleteChangeSetInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [DeleteChangeSet] action.
public struct DeleteChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to delete.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that's associated with it.
    public var stackName: Swift.String?

    public init(
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
    }
}

extension DeleteChangeSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteChangeSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteChangeSetOutput()
        }
    }
}

/// The output for the [DeleteChangeSet] action.
public struct DeleteChangeSetOutput: Swift.Equatable {

    public init() { }
}

enum DeleteChangeSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidChangeSetStatus": return try await InvalidChangeSetStatusException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteGeneratedTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generatedTemplateName = "GeneratedTemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        try container.encode("DeleteGeneratedTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteGeneratedTemplateInput {

    static func urlPathProvider(_ value: DeleteGeneratedTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteGeneratedTemplateInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of a generated template.
    /// This member is required.
    public var generatedTemplateName: Swift.String?

    public init(
        generatedTemplateName: Swift.String? = nil
    )
    {
        self.generatedTemplateName = generatedTemplateName
    }
}

extension DeleteGeneratedTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteGeneratedTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteGeneratedTemplateOutput()
        }
    }
}

public struct DeleteGeneratedTemplateOutput: Swift.Equatable {

    public init() { }
}

enum DeleteGeneratedTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ConcurrentResourcesLimitExceeded": return try await ConcurrentResourcesLimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GeneratedTemplateNotFound": return try await GeneratedTemplateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case retainResources = "RetainResources"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let retainResources = retainResources {
            if !retainResources.isEmpty {
                var retainResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RetainResources"))
                for (index0, logicalresourceid0) in retainResources.enumerated() {
                    try retainResourcesContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var retainResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RetainResources"))
                try retainResourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackInput {

    static func urlPathProvider(_ value: DeleteStackInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [DeleteStack] action.
public struct DeleteStackInput: Swift.Equatable {
    /// A unique identifier for this DeleteStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to delete a stack with the same name. You might retry DeleteStack requests to ensure that CloudFormation successfully received them. All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// For stacks in the DELETE_FAILED state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn't delete the retained resources. Retaining resources is useful when you can't delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.
    public var retainResources: [Swift.String]?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role's credentials to make calls on your behalf. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
    public var roleARN: Swift.String?
    /// The name or the unique stack ID that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        retainResources: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.retainResources = retainResources
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

extension DeleteStackInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case regions = "Regions"
        case retainStacks = "RetainStacks"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackInstancesInput {

    static func urlPathProvider(_ value: DeleteStackInstancesInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts from which to delete stack instances. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. If you don't specify an operation ID, the SDK generates one automatically. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The Amazon Web Services Regions where you want to delete stack set instances.
    /// This member is required.
    public var regions: [Swift.String]?
    /// Removes the stack instances from the specified stack set, but doesn't delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. For more information, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    /// This member is required.
    public var retainStacks: Swift.Bool?
    /// The name or unique ID of the stack set that you want to delete stack instances for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        regions: [Swift.String]? = nil,
        retainStacks: Swift.Bool? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.regions = regions
        self.retainStacks = retainStacks
        self.stackSetName = stackSetName
    }
}

extension DeleteStackInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteStackInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DeleteStackInstancesResult"]
            var value = DeleteStackInstancesOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct DeleteStackInstancesOutput: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum DeleteStackInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationIdAlreadyExistsException": return try await OperationIdAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StaleRequestException": return try await StaleRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteStackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteStackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteStackOutput()
        }
    }
}

public struct DeleteStackOutput: Swift.Equatable {

    public init() { }
}

enum DeleteStackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DeleteStackSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeleteStackSetInput {

    static func urlPathProvider(_ value: DeleteStackSetInput) -> Swift.String? {
        return "/"
    }
}

public struct DeleteStackSetInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or unique ID of the stack set that you're deleting. You can obtain this value by running [ListStackSets].
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

extension DeleteStackSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeleteStackSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeleteStackSetOutput()
        }
    }
}

public struct DeleteStackSetOutput: Swift.Equatable {

    public init() { }
}

enum DeleteStackSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotEmptyException": return try await StackSetNotEmptyException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes.DeploymentTargets: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountFilterType = "AccountFilterType"
        case accounts = "Accounts"
        case accountsUrl = "AccountsUrl"
        case organizationalUnitIds = "OrganizationalUnitIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountFilterType = accountFilterType {
            try container.encode(accountFilterType, forKey: ClientRuntime.Key("AccountFilterType"))
        }
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let accountsUrl = accountsUrl {
            try container.encode(accountsUrl, forKey: ClientRuntime.Key("AccountsUrl"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.DeploymentTargets, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.DeploymentTargets()
            value.accounts = try reader["Accounts"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.accountsUrl = try reader["AccountsUrl"].readIfPresent()
            value.organizationalUnitIds = try reader["OrganizationalUnitIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.accountFilterType = try reader["AccountFilterType"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// [Service-managed permissions] The Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. For update operations, you can specify either Accounts or OrganizationalUnitIds. For create and delete operations, specify OrganizationalUnitIds.
    public struct DeploymentTargets: Swift.Equatable {
        /// Limit deployment targets to individual accounts or include additional accounts with provided OUs. The following is a list of possible values for the AccountFilterType operation.
        ///
        /// * INTERSECTION: StackSets deploys to the accounts specified in Accounts parameter.
        ///
        /// * DIFFERENCE: StackSets excludes the accounts specified in Accounts parameter. This enables user to avoid certain accounts within an OU such as suspended accounts.
        ///
        /// * UNION: StackSets includes additional accounts deployment targets. This is the default value if AccountFilterType is not provided. This enables user to update an entire OU and individual accounts from a different OU in one request, which used to be two separate requests.
        ///
        /// * NONE: Deploys to all the accounts in specified organizational units (OU).
        public var accountFilterType: CloudFormationClientTypes.AccountFilterType?
        /// The names of one or more Amazon Web Services accounts for which you want to deploy stack set updates.
        public var accounts: [Swift.String]?
        /// Returns the value of the AccountsUrl property.
        public var accountsUrl: Swift.String?
        /// The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
        public var organizationalUnitIds: [Swift.String]?

        public init(
            accountFilterType: CloudFormationClientTypes.AccountFilterType? = nil,
            accounts: [Swift.String]? = nil,
            accountsUrl: Swift.String? = nil,
            organizationalUnitIds: [Swift.String]? = nil
        )
        {
            self.accountFilterType = accountFilterType
            self.accounts = accounts
            self.accountsUrl = accountsUrl
            self.organizationalUnitIds = organizationalUnitIds
        }
    }

}

extension CloudFormationClientTypes {
    public enum DeprecatedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deprecated
        case live
        case sdkUnknown(Swift.String)

        public static var allCases: [DeprecatedStatus] {
            return [
                .deprecated,
                .live,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deprecated: return "DEPRECATED"
            case .live: return "LIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeprecatedStatus(rawValue: rawValue) ?? DeprecatedStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeregisterTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DeregisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DeregisterTypeInput {

    static func urlPathProvider(_ value: DeregisterTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct DeregisterTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension DeregisterTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DeregisterTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return DeregisterTypeOutput()
        }
    }
}

public struct DeregisterTypeOutput: Swift.Equatable {

    public init() { }
}

enum DeregisterTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeAccountLimitsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeAccountLimitsInput {

    static func urlPathProvider(_ value: DescribeAccountLimitsInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [DescribeAccountLimits] action.
public struct DescribeAccountLimitsInput: Swift.Equatable {
    /// A string that identifies the next page of limits that you want to retrieve.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension DescribeAccountLimitsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeAccountLimitsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeAccountLimitsResult"]
            var value = DescribeAccountLimitsOutput()
            value.accountLimits = try reader["AccountLimits"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.AccountLimit.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

/// The output for the [DescribeAccountLimits] action.
public struct DescribeAccountLimitsOutput: Swift.Equatable {
    /// An account limit structure that contain a list of CloudFormation account limits and their values.
    public var accountLimits: [CloudFormationClientTypes.AccountLimit]?
    /// If the output exceeds 1 MB in size, a string that identifies the next page of limits. If no additional page exists, this value is null.
    public var nextToken: Swift.String?

    public init(
        accountLimits: [CloudFormationClientTypes.AccountLimit]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountLimits = accountLimits
        self.nextToken = nextToken
    }
}

enum DescribeAccountLimitsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeChangeSetHooksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case logicalResourceId = "LogicalResourceId"
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeChangeSetHooks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeChangeSetHooksInput {

    static func urlPathProvider(_ value: DescribeChangeSetHooksInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeChangeSetHooksInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to describe.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// If specified, lists only the hooks related to the specified LogicalResourceId.
    public var logicalResourceId: Swift.String?
    /// A string, provided by the DescribeChangeSetHooks response output, that identifies the next page of information that you want to retrieve.
    public var nextToken: Swift.String?
    /// If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe.
    public var stackName: Swift.String?

    public init(
        changeSetName: Swift.String? = nil,
        logicalResourceId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.logicalResourceId = logicalResourceId
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeChangeSetHooksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeChangeSetHooksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeChangeSetHooksResult"]
            var value = DescribeChangeSetHooksOutput()
            value.changeSetId = try reader["ChangeSetId"].readIfPresent()
            value.changeSetName = try reader["ChangeSetName"].readIfPresent()
            value.hooks = try reader["Hooks"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ChangeSetHook.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct DescribeChangeSetHooksOutput: Swift.Equatable {
    /// The change set identifier (stack ID).
    public var changeSetId: Swift.String?
    /// The change set name.
    public var changeSetName: Swift.String?
    /// List of hook objects.
    public var hooks: [CloudFormationClientTypes.ChangeSetHook]?
    /// Pagination token, null or empty if no more results.
    public var nextToken: Swift.String?
    /// The stack identifier (stack ID).
    public var stackId: Swift.String?
    /// The stack name.
    public var stackName: Swift.String?
    /// Provides the status of the change set hook.
    public var status: CloudFormationClientTypes.ChangeSetHooksStatus?

    public init(
        changeSetId: Swift.String? = nil,
        changeSetName: Swift.String? = nil,
        hooks: [CloudFormationClientTypes.ChangeSetHook]? = nil,
        nextToken: Swift.String? = nil,
        stackId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ChangeSetHooksStatus? = nil
    )
    {
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.hooks = hooks
        self.nextToken = nextToken
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
    }
}

enum DescribeChangeSetHooksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ChangeSetNotFound": return try await ChangeSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeChangeSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeChangeSetInput {

    static func urlPathProvider(_ value: DescribeChangeSetInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [DescribeChangeSet] action.
public struct DescribeChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want to describe.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// A string (provided by the [DescribeChangeSet] response output) that identifies the next page of information that you want to retrieve.
    public var nextToken: Swift.String?
    /// If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe.
    public var stackName: Swift.String?

    public init(
        changeSetName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeChangeSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeChangeSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeChangeSetResult"]
            var value = DescribeChangeSetOutput()
            value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Capability.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.changeSetId = try reader["ChangeSetId"].readIfPresent()
            value.changeSetName = try reader["ChangeSetName"].readIfPresent()
            value.changes = try reader["Changes"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Change.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.description = try reader["Description"].readIfPresent()
            value.executionStatus = try reader["ExecutionStatus"].readIfPresent()
            value.importExistingResources = try reader["ImportExistingResources"].readIfPresent()
            value.includeNestedStacks = try reader["IncludeNestedStacks"].readIfPresent()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.notificationARNs = try reader["NotificationARNs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.onStackFailure = try reader["OnStackFailure"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Parameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.parentChangeSetId = try reader["ParentChangeSetId"].readIfPresent()
            value.rollbackConfiguration = try reader["RollbackConfiguration"].readIfPresent(readingClosure: CloudFormationClientTypes.RollbackConfiguration.readingClosure)
            value.rootChangeSetId = try reader["RootChangeSetId"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Tag.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for the [DescribeChangeSet] action.
public struct DescribeChangeSetOutput: Swift.Equatable {
    /// If you execute the change set, the list of capabilities that were explicitly acknowledged when the change set was created.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The Amazon Resource Name (ARN) of the change set.
    public var changeSetId: Swift.String?
    /// The name of the change set.
    public var changeSetName: Swift.String?
    /// A list of Change structures that describes the resources CloudFormation changes if you execute the change set.
    public var changes: [CloudFormationClientTypes.Change]?
    /// The start time when the change set was created, in UTC.
    public var creationTime: ClientRuntime.Date?
    /// Information about the change set.
    public var description: Swift.String?
    /// If the change set execution status is AVAILABLE, you can execute the change set. If you can't execute the change set, the status indicates why. For example, a change set might be in an UNAVAILABLE state because CloudFormation is still creating it or in an OBSOLETE state because the stack was already updated.
    public var executionStatus: CloudFormationClientTypes.ExecutionStatus?
    /// Indicates if the change set imports resources that already exist. This parameter can only import resources that have [custom names](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) in templates. To import resources that do not accept custom names, such as EC2 instances, use the [resource import](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import.html) feature instead.
    public var importExistingResources: Swift.Bool?
    /// Verifies if IncludeNestedStacks is set to True.
    public var includeNestedStacks: Swift.Bool?
    /// If the output exceeds 1 MB, a string that identifies the next page of changes. If there is no additional page, this value is null.
    public var nextToken: Swift.String?
    /// The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be associated with the stack if you execute the change set.
    public var notificationARNs: [Swift.String]?
    /// Determines what action will be taken if stack creation fails. When this parameter is specified, the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation must not be specified. This must be one of these values:
    ///
    /// * DELETE - Deletes the change set if the stack creation fails. This is only valid when the ChangeSetType parameter is set to CREATE. If the deletion of the stack fails, the status of the stack is DELETE_FAILED.
    ///
    /// * DO_NOTHING - if the stack creation fails, do nothing. This is equivalent to specifying true for the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation.
    ///
    /// * ROLLBACK - if the stack creation fails, roll back the stack. This is equivalent to specifying false for the DisableRollback parameter to the [ExecuteChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html) API operation.
    public var onStackFailure: CloudFormationClientTypes.OnStackFailure?
    /// A list of Parameter structures that describes the input parameters and their values used to create the change set. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Specifies the change set ID of the parent change set in the current nested change set hierarchy.
    public var parentChangeSetId: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// Specifies the change set ID of the root change set in the current nested change set hierarchy.
    public var rootChangeSetId: Swift.String?
    /// The Amazon Resource Name (ARN) of the stack that's associated with the change set.
    public var stackId: Swift.String?
    /// The name of the stack that's associated with the change set.
    public var stackName: Swift.String?
    /// The current status of the change set, such as CREATE_IN_PROGRESS, CREATE_COMPLETE, or FAILED.
    public var status: CloudFormationClientTypes.ChangeSetStatus?
    /// A description of the change set's status. For example, if your attempt to create a change set failed, CloudFormation shows the error message.
    public var statusReason: Swift.String?
    /// If you execute the change set, the tags that will be associated with the stack.
    public var tags: [CloudFormationClientTypes.Tag]?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetId: Swift.String? = nil,
        changeSetName: Swift.String? = nil,
        changes: [CloudFormationClientTypes.Change]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
        importExistingResources: Swift.Bool? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        notificationARNs: [Swift.String]? = nil,
        onStackFailure: CloudFormationClientTypes.OnStackFailure? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        parentChangeSetId: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        rootChangeSetId: Swift.String? = nil,
        stackId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ChangeSetStatus? = nil,
        statusReason: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.changes = changes
        self.creationTime = creationTime
        self.description = description
        self.executionStatus = executionStatus
        self.importExistingResources = importExistingResources
        self.includeNestedStacks = includeNestedStacks
        self.nextToken = nextToken
        self.notificationARNs = notificationARNs
        self.onStackFailure = onStackFailure
        self.parameters = parameters
        self.parentChangeSetId = parentChangeSetId
        self.rollbackConfiguration = rollbackConfiguration
        self.rootChangeSetId = rootChangeSetId
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
    }
}

enum DescribeChangeSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ChangeSetNotFound": return try await ChangeSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeGeneratedTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generatedTemplateName = "GeneratedTemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        try container.encode("DescribeGeneratedTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeGeneratedTemplateInput {

    static func urlPathProvider(_ value: DescribeGeneratedTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeGeneratedTemplateInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of a generated template.
    /// This member is required.
    public var generatedTemplateName: Swift.String?

    public init(
        generatedTemplateName: Swift.String? = nil
    )
    {
        self.generatedTemplateName = generatedTemplateName
    }
}

extension DescribeGeneratedTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeGeneratedTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeGeneratedTemplateResult"]
            var value = DescribeGeneratedTemplateOutput()
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.generatedTemplateId = try reader["GeneratedTemplateId"].readIfPresent()
            value.generatedTemplateName = try reader["GeneratedTemplateName"].readIfPresent()
            value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: .dateTime)
            value.progress = try reader["Progress"].readIfPresent(readingClosure: CloudFormationClientTypes.TemplateProgress.readingClosure)
            value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ResourceDetail.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.stackId = try reader["StackId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.templateConfiguration = try reader["TemplateConfiguration"].readIfPresent(readingClosure: CloudFormationClientTypes.TemplateConfiguration.readingClosure)
            value.totalWarnings = try reader["TotalWarnings"].readIfPresent()
            return value
        }
    }
}

public struct DescribeGeneratedTemplateOutput: Swift.Equatable {
    /// The time the generated template was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the generated template. The format is arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}. For example, arn:aws:cloudformation:us-east-1:123456789012:generatedtemplate/2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc .
    public var generatedTemplateId: Swift.String?
    /// The name of the generated template.
    public var generatedTemplateName: Swift.String?
    /// The time the generated template was last updated.
    public var lastUpdatedTime: ClientRuntime.Date?
    /// An object describing the progress of the template generation.
    public var progress: CloudFormationClientTypes.TemplateProgress?
    /// A list of objects describing the details of the resources in the template generation.
    public var resources: [CloudFormationClientTypes.ResourceDetail]?
    /// The stack ARN of the base stack if a base stack was provided when generating the template.
    public var stackId: Swift.String?
    /// The status of the template generation. Supported values are:
    ///
    /// * CreatePending - the creation of the template is pending.
    ///
    /// * CreateInProgress - the creation of the template is in progress.
    ///
    /// * DeletePending - the deletion of the template is pending.
    ///
    /// * DeleteInProgress - the deletion of the template is in progress.
    ///
    /// * UpdatePending - the update of the template is pending.
    ///
    /// * UpdateInProgress - the update of the template is in progress.
    ///
    /// * Failed - the template operation failed.
    ///
    /// * Complete - the template operation is complete.
    public var status: CloudFormationClientTypes.GeneratedTemplateStatus?
    /// The reason for the current template generation status. This will provide more details if a failure happened.
    public var statusReason: Swift.String?
    /// The configuration details of the generated template, including the DeletionPolicy and UpdateReplacePolicy.
    public var templateConfiguration: CloudFormationClientTypes.TemplateConfiguration?
    /// The number of warnings generated for this template. The warnings are found in the details of each of the resources in the template.
    public var totalWarnings: Swift.Int?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        generatedTemplateId: Swift.String? = nil,
        generatedTemplateName: Swift.String? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        progress: CloudFormationClientTypes.TemplateProgress? = nil,
        resources: [CloudFormationClientTypes.ResourceDetail]? = nil,
        stackId: Swift.String? = nil,
        status: CloudFormationClientTypes.GeneratedTemplateStatus? = nil,
        statusReason: Swift.String? = nil,
        templateConfiguration: CloudFormationClientTypes.TemplateConfiguration? = nil,
        totalWarnings: Swift.Int? = nil
    )
    {
        self.creationTime = creationTime
        self.generatedTemplateId = generatedTemplateId
        self.generatedTemplateName = generatedTemplateName
        self.lastUpdatedTime = lastUpdatedTime
        self.progress = progress
        self.resources = resources
        self.stackId = stackId
        self.status = status
        self.statusReason = statusReason
        self.templateConfiguration = templateConfiguration
        self.totalWarnings = totalWarnings
    }
}

enum DescribeGeneratedTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "GeneratedTemplateNotFound": return try await GeneratedTemplateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeOrganizationsAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        try container.encode("DescribeOrganizationsAccess", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeOrganizationsAccessInput {

    static func urlPathProvider(_ value: DescribeOrganizationsAccessInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeOrganizationsAccessInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil
    )
    {
        self.callAs = callAs
    }
}

extension DescribeOrganizationsAccessOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeOrganizationsAccessOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeOrganizationsAccessResult"]
            var value = DescribeOrganizationsAccessOutput()
            value.status = try reader["Status"].readIfPresent()
            return value
        }
    }
}

public struct DescribeOrganizationsAccessOutput: Swift.Equatable {
    /// Presents the status of the OrganizationAccess.
    public var status: CloudFormationClientTypes.OrganizationStatus?

    public init(
        status: CloudFormationClientTypes.OrganizationStatus? = nil
    )
    {
        self.status = status
    }
}

enum DescribeOrganizationsAccessOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribePublisherInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case publisherId = "PublisherId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        try container.encode("DescribePublisher", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribePublisherInput {

    static func urlPathProvider(_ value: DescribePublisherInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribePublisherInput: Swift.Equatable {
    /// The ID of the extension publisher. If you don't supply a PublisherId, and you have registered as an extension publisher, DescribePublisher returns information about your own publisher account.
    public var publisherId: Swift.String?

    public init(
        publisherId: Swift.String? = nil
    )
    {
        self.publisherId = publisherId
    }
}

extension DescribePublisherOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribePublisherOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribePublisherResult"]
            var value = DescribePublisherOutput()
            value.identityProvider = try reader["IdentityProvider"].readIfPresent()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            value.publisherProfile = try reader["PublisherProfile"].readIfPresent()
            value.publisherStatus = try reader["PublisherStatus"].readIfPresent()
            return value
        }
    }
}

public struct DescribePublisherOutput: Swift.Equatable {
    /// The type of account used as the identity provider when registering this publisher with CloudFormation.
    public var identityProvider: CloudFormationClientTypes.IdentityProvider?
    /// The ID of the extension publisher.
    public var publisherId: Swift.String?
    /// The URL to the publisher's profile with the identity provider.
    public var publisherProfile: Swift.String?
    /// Whether the publisher is verified. Currently, all registered publishers are verified.
    public var publisherStatus: CloudFormationClientTypes.PublisherStatus?

    public init(
        identityProvider: CloudFormationClientTypes.IdentityProvider? = nil,
        publisherId: Swift.String? = nil,
        publisherProfile: Swift.String? = nil,
        publisherStatus: CloudFormationClientTypes.PublisherStatus? = nil
    )
    {
        self.identityProvider = identityProvider
        self.publisherId = publisherId
        self.publisherProfile = publisherProfile
        self.publisherStatus = publisherStatus
    }
}

enum DescribePublisherOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeResourceScanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceScanId = "ResourceScanId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceScanId = resourceScanId {
            try container.encode(resourceScanId, forKey: ClientRuntime.Key("ResourceScanId"))
        }
        try container.encode("DescribeResourceScan", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeResourceScanInput {

    static func urlPathProvider(_ value: DescribeResourceScanInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeResourceScanInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource scan.
    /// This member is required.
    public var resourceScanId: Swift.String?

    public init(
        resourceScanId: Swift.String? = nil
    )
    {
        self.resourceScanId = resourceScanId
    }
}

extension DescribeResourceScanOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeResourceScanOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeResourceScanResult"]
            var value = DescribeResourceScanOutput()
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            value.percentageCompleted = try reader["PercentageCompleted"].readIfPresent()
            value.resourceScanId = try reader["ResourceScanId"].readIfPresent()
            value.resourceTypes = try reader["ResourceTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourcesRead = try reader["ResourcesRead"].readIfPresent()
            value.resourcesScanned = try reader["ResourcesScanned"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            return value
        }
    }
}

public struct DescribeResourceScanOutput: Swift.Equatable {
    /// The time that the resource scan was finished.
    public var endTime: ClientRuntime.Date?
    /// The percentage of the resource scan that has been completed.
    public var percentageCompleted: Swift.Double?
    /// The Amazon Resource Name (ARN) of the resource scan. The format is arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}. An example is arn:aws:cloudformation:us-east-1:123456789012:resourceScan/f5b490f7-7ed4-428a-aa06-31ff25db0772 .
    public var resourceScanId: Swift.String?
    /// The list of resource types for the specified scan. Resource types are only available for scans with a Status set to COMPLETE or FAILED .
    public var resourceTypes: [Swift.String]?
    /// The number of resources that were read. This is only available for scans with a Status set to COMPLETE, EXPIRED, or FAILED . This field may be 0 if the resource scan failed with a ResourceScanLimitExceededException.
    public var resourcesRead: Swift.Int?
    /// The number of resources that were listed. This is only available for scans with a Status set to COMPLETE, EXPIRED, or FAILED .
    public var resourcesScanned: Swift.Int?
    /// The time that the resource scan was started.
    public var startTime: ClientRuntime.Date?
    /// Status of the resource scan. INPROGRESS The resource scan is still in progress. COMPLETE The resource scan is complete. EXPIRED The resource scan has expired. FAILED The resource scan has failed.
    public var status: CloudFormationClientTypes.ResourceScanStatus?
    /// The reason for the resource scan status, providing more information if a failure happened.
    public var statusReason: Swift.String?

    public init(
        endTime: ClientRuntime.Date? = nil,
        percentageCompleted: Swift.Double? = nil,
        resourceScanId: Swift.String? = nil,
        resourceTypes: [Swift.String]? = nil,
        resourcesRead: Swift.Int? = nil,
        resourcesScanned: Swift.Int? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: CloudFormationClientTypes.ResourceScanStatus? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.endTime = endTime
        self.percentageCompleted = percentageCompleted
        self.resourceScanId = resourceScanId
        self.resourceTypes = resourceTypes
        self.resourcesRead = resourcesRead
        self.resourcesScanned = resourcesScanned
        self.startTime = startTime
        self.status = status
        self.statusReason = statusReason
    }
}

enum DescribeResourceScanOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceScanNotFound": return try await ResourceScanNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackDriftDetectionStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackDriftDetectionId = "StackDriftDetectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackDriftDetectionId = stackDriftDetectionId {
            try container.encode(stackDriftDetectionId, forKey: ClientRuntime.Key("StackDriftDetectionId"))
        }
        try container.encode("DescribeStackDriftDetectionStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackDriftDetectionStatusInput {

    static func urlPathProvider(_ value: DescribeStackDriftDetectionStatusInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStackDriftDetectionStatusInput: Swift.Equatable {
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?

    public init(
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

extension DescribeStackDriftDetectionStatusOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackDriftDetectionStatusOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackDriftDetectionStatusResult"]
            var value = DescribeStackDriftDetectionStatusOutput()
            value.detectionStatus = try reader["DetectionStatus"].readIfPresent()
            value.detectionStatusReason = try reader["DetectionStatusReason"].readIfPresent()
            value.driftedStackResourceCount = try reader["DriftedStackResourceCount"].readIfPresent()
            value.stackDriftDetectionId = try reader["StackDriftDetectionId"].readIfPresent()
            value.stackDriftStatus = try reader["StackDriftStatus"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

public struct DescribeStackDriftDetectionStatusOutput: Swift.Equatable {
    /// The status of the stack drift detection operation.
    ///
    /// * DETECTION_COMPLETE: The stack drift detection operation has successfully completed for all resources in the stack that support drift detection. (Resources that don't currently support stack detection remain unchecked.) If you specified logical resource IDs for CloudFormation to use as a filter for the stack drift detection operation, only the resources with those logical IDs are checked for drift.
    ///
    /// * DETECTION_FAILED: The stack drift detection operation has failed for at least one resource in the stack. Results will be available for resources on which CloudFormation successfully completed drift detection.
    ///
    /// * DETECTION_IN_PROGRESS: The stack drift detection operation is currently in progress.
    /// This member is required.
    public var detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus?
    /// The reason the stack drift detection operation has its current status.
    public var detectionStatusReason: Swift.String?
    /// Total number of stack resources that have drifted. This is NULL until the drift detection operation reaches a status of DETECTION_COMPLETE. This value will be 0 for stacks whose drift status is IN_SYNC.
    public var driftedStackResourceCount: Swift.Int?
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of reports CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?
    /// Status of the stack's actual configuration compared to its expected configuration.
    ///
    /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
    ///
    /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
    ///
    /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
    ///
    /// * UNKNOWN: This value is reserved for future use.
    public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?
    /// The ID of the stack.
    /// This member is required.
    public var stackId: Swift.String?
    /// Time at which the stack drift detection operation was initiated.
    /// This member is required.
    public var timestamp: ClientRuntime.Date?

    public init(
        detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus? = nil,
        detectionStatusReason: Swift.String? = nil,
        driftedStackResourceCount: Swift.Int? = nil,
        stackDriftDetectionId: Swift.String? = nil,
        stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
        stackId: Swift.String? = nil,
        timestamp: ClientRuntime.Date? = nil
    )
    {
        self.detectionStatus = detectionStatus
        self.detectionStatusReason = detectionStatusReason
        self.driftedStackResourceCount = driftedStackResourceCount
        self.stackDriftDetectionId = stackDriftDetectionId
        self.stackDriftStatus = stackDriftStatus
        self.stackId = stackId
        self.timestamp = timestamp
    }
}

enum DescribeStackDriftDetectionStatusOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackEventsInput {

    static func urlPathProvider(_ value: DescribeStackEventsInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackEvents] action.
public struct DescribeStackEventsInput: Swift.Equatable {
    /// A string that identifies the next page of events that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeStackEventsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackEventsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackEventsResult"]
            var value = DescribeStackEventsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stackEvents = try reader["StackEvents"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackEvent.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for a [DescribeStackEvents] action.
public struct DescribeStackEventsOutput: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of events. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackEvents structures.
    public var stackEvents: [CloudFormationClientTypes.StackEvent]?

    public init(
        nextToken: Swift.String? = nil,
        stackEvents: [CloudFormationClientTypes.StackEvent]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackEvents = stackEvents
    }
}

enum DescribeStackEventsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackInstanceInput {

    static func urlPathProvider(_ value: DescribeStackInstanceInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStackInstanceInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of an Amazon Web Services account that's associated with this stack instance.
    /// This member is required.
    public var stackInstanceAccount: Swift.String?
    /// The name of a Region that's associated with this stack instance.
    /// This member is required.
    public var stackInstanceRegion: Swift.String?
    /// The name or the unique stack ID of the stack set that you want to get stack instance information for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

extension DescribeStackInstanceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackInstanceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackInstanceResult"]
            var value = DescribeStackInstanceOutput()
            value.stackInstance = try reader["StackInstance"].readIfPresent(readingClosure: CloudFormationClientTypes.StackInstance.readingClosure)
            return value
        }
    }
}

public struct DescribeStackInstanceOutput: Swift.Equatable {
    /// The stack instance that matches the specified request parameters.
    public var stackInstance: CloudFormationClientTypes.StackInstance?

    public init(
        stackInstance: CloudFormationClientTypes.StackInstance? = nil
    )
    {
        self.stackInstance = stackInstance
    }
}

enum DescribeStackInstanceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "StackInstanceNotFoundException": return try await StackInstanceNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackResourceDriftsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackName = "StackName"
        case stackResourceDriftStatusFilters = "StackResourceDriftStatusFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackResourceDriftStatusFilters = stackResourceDriftStatusFilters {
            if !stackResourceDriftStatusFilters.isEmpty {
                var stackResourceDriftStatusFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackResourceDriftStatusFilters"))
                for (index0, stackresourcedriftstatus0) in stackResourceDriftStatusFilters.enumerated() {
                    try stackResourceDriftStatusFiltersContainer.encode(stackresourcedriftstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackResourceDriftStatusFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackResourceDriftStatusFilters"))
                try stackResourceDriftStatusFiltersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("DescribeStackResourceDrifts", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourceDriftsInput {

    static func urlPathProvider(_ value: DescribeStackResourceDriftsInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStackResourceDriftsInput: Swift.Equatable {
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of stack resource drift results.
    public var nextToken: Swift.String?
    /// The name of the stack for which you want drift information.
    /// This member is required.
    public var stackName: Swift.String?
    /// The resource drift status values to use as filters for the resource drift results returned.
    ///
    /// * DELETED: The resource differs from its expected template configuration in that the resource has been deleted.
    ///
    /// * MODIFIED: One or more resource properties differ from their expected template values.
    ///
    /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
    ///
    /// * NOT_CHECKED: CloudFormation doesn't currently return this value.
    public var stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil,
        stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackName = stackName
        self.stackResourceDriftStatusFilters = stackResourceDriftStatusFilters
    }
}

extension DescribeStackResourceDriftsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackResourceDriftsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackResourceDriftsResult"]
            var value = DescribeStackResourceDriftsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stackResourceDrifts = try reader["StackResourceDrifts"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackResourceDrift.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct DescribeStackResourceDriftsOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call DescribeStackResourceDrifts again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// Drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects drift. For a given stack, there will be one StackResourceDrift for each stack resource that has been checked for drift. Resources that haven't yet been checked for drift aren't included. Resources that do not currently support drift detection aren't checked, and so not included. For a list of resources that support drift detection, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html).
    /// This member is required.
    public var stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]?

    public init(
        nextToken: Swift.String? = nil,
        stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceDrifts = stackResourceDrifts
    }
}

enum DescribeStackResourceDriftsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourceInput {

    static func urlPathProvider(_ value: DescribeStackResourceInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackResource] action.
public struct DescribeStackResourceInput: Swift.Equatable {
    /// The logical name of the resource as specified in the template. Default: There is no default value.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

extension DescribeStackResourceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackResourceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackResourceResult"]
            var value = DescribeStackResourceOutput()
            value.stackResourceDetail = try reader["StackResourceDetail"].readIfPresent(readingClosure: CloudFormationClientTypes.StackResourceDetail.readingClosure)
            return value
        }
    }
}

/// The output for a [DescribeStackResource] action.
public struct DescribeStackResourceOutput: Swift.Equatable {
    /// A StackResourceDetail structure containing the description of the specified resource in the specified stack.
    public var stackResourceDetail: CloudFormationClientTypes.StackResourceDetail?

    public init(
        stackResourceDetail: CloudFormationClientTypes.StackResourceDetail? = nil
    )
    {
        self.stackResourceDetail = stackResourceDetail
    }
}

enum DescribeStackResourceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackResourcesInput {

    static func urlPathProvider(_ value: DescribeStackResourcesInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStackResources] action.
public struct DescribeStackResourcesInput: Swift.Equatable {
    /// The logical name of the resource as specified in the template. Default: There is no default value.
    public var logicalResourceId: Swift.String?
    /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation. For example, for an Amazon Elastic Compute Cloud (EC2) instance, PhysicalResourceId corresponds to the InstanceId. You can pass the EC2 InstanceId to DescribeStackResources to find which stack the instance belongs to and what other resources are part of the stack. Required: Conditional. If you don't specify PhysicalResourceId, you must specify StackName. Default: There is no default value.
    public var physicalResourceId: Swift.String?
    /// The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value. Required: Conditional. If you don't specify StackName, you must specify PhysicalResourceId.
    public var stackName: Swift.String?

    public init(
        logicalResourceId: Swift.String? = nil,
        physicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.stackName = stackName
    }
}

extension DescribeStackResourcesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackResourcesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackResourcesResult"]
            var value = DescribeStackResourcesOutput()
            value.stackResources = try reader["StackResources"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackResource.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for a [DescribeStackResources] action.
public struct DescribeStackResourcesOutput: Swift.Equatable {
    /// A list of StackResource structures.
    public var stackResources: [CloudFormationClientTypes.StackResource]?

    public init(
        stackResources: [CloudFormationClientTypes.StackResource]? = nil
    )
    {
        self.stackResources = stackResources
    }
}

enum DescribeStackResourcesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackSetInput {

    static func urlPathProvider(_ value: DescribeStackSetInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStackSetInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or unique ID of the stack set whose description you want.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

extension DescribeStackSetOperationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStackSetOperationInput {

    static func urlPathProvider(_ value: DescribeStackSetOperationInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeStackSetOperationInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The unique ID of the stack set operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or the unique stack ID of the stack set for the stack operation.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension DescribeStackSetOperationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackSetOperationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackSetOperationResult"]
            var value = DescribeStackSetOperationOutput()
            value.stackSetOperation = try reader["StackSetOperation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetOperation.readingClosure)
            return value
        }
    }
}

public struct DescribeStackSetOperationOutput: Swift.Equatable {
    /// The specified stack set operation.
    public var stackSetOperation: CloudFormationClientTypes.StackSetOperation?

    public init(
        stackSetOperation: CloudFormationClientTypes.StackSetOperation? = nil
    )
    {
        self.stackSetOperation = stackSetOperation
    }
}

enum DescribeStackSetOperationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStackSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStackSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStackSetResult"]
            var value = DescribeStackSetOutput()
            value.stackSet = try reader["StackSet"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSet.readingClosure)
            return value
        }
    }
}

public struct DescribeStackSetOutput: Swift.Equatable {
    /// The specified stack set.
    public var stackSet: CloudFormationClientTypes.StackSet?

    public init(
        stackSet: CloudFormationClientTypes.StackSet? = nil
    )
    {
        self.stackSet = stackSet
    }
}

enum DescribeStackSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeStacksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeStacksInput {

    static func urlPathProvider(_ value: DescribeStacksInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [DescribeStacks] action.
public struct DescribeStacksInput: Swift.Equatable {
    /// A string that identifies the next page of stacks that you want to retrieve.
    public var nextToken: Swift.String?
    /// If you don't pass a parameter to StackName, the API returns a response that describes all resources in the account, which can impact performance. This requires ListStacks and DescribeStacks permissions. Consider using the [ListStacks] API if you're not passing a parameter to StackName. The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request: { "Version": "2012-10-17", "Statement": [{ "Effect": "Deny", "Action": "cloudformation:DescribeStacks", "NotResource": "arn:aws:cloudformation:*:*:stack/*/*" }] } The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeStacksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeStacksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeStacksResult"]
            var value = DescribeStacksOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stacks = try reader["Stacks"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Stack.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for a [DescribeStacks] action.
public struct DescribeStacksOutput: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of stack structures.
    public var stacks: [CloudFormationClientTypes.Stack]?

    public init(
        nextToken: Swift.String? = nil,
        stacks: [CloudFormationClientTypes.Stack]? = nil
    )
    {
        self.nextToken = nextToken
        self.stacks = stacks
    }
}

enum DescribeStacksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DescribeType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTypeInput {

    static func urlPathProvider(_ value: DescribeTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The version number of a public third-party extension.
    public var publicVersionNumber: Swift.String?
    /// The publisher ID of the extension publisher. Extensions provided by Amazon Web Services are not assigned a publisher ID.
    public var publisherId: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. If you specify a VersionId, DescribeType returns information about that specific extension version. Otherwise, it returns information about the default extension version.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        publicVersionNumber: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.publicVersionNumber = publicVersionNumber
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension DescribeTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTypeResult"]
            var value = DescribeTypeOutput()
            value.arn = try reader["Arn"].readIfPresent()
            value.autoUpdate = try reader["AutoUpdate"].readIfPresent()
            value.configurationSchema = try reader["ConfigurationSchema"].readIfPresent()
            value.defaultVersionId = try reader["DefaultVersionId"].readIfPresent()
            value.deprecatedStatus = try reader["DeprecatedStatus"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.documentationUrl = try reader["DocumentationUrl"].readIfPresent()
            value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
            value.isActivated = try reader["IsActivated"].readIfPresent()
            value.isDefaultVersion = try reader["IsDefaultVersion"].readIfPresent()
            value.lastUpdated = try reader["LastUpdated"].readTimestampIfPresent(format: .dateTime)
            value.latestPublicVersion = try reader["LatestPublicVersion"].readIfPresent()
            value.loggingConfig = try reader["LoggingConfig"].readIfPresent(readingClosure: CloudFormationClientTypes.LoggingConfig.readingClosure)
            value.originalTypeArn = try reader["OriginalTypeArn"].readIfPresent()
            value.originalTypeName = try reader["OriginalTypeName"].readIfPresent()
            value.provisioningType = try reader["ProvisioningType"].readIfPresent()
            value.publicVersionNumber = try reader["PublicVersionNumber"].readIfPresent()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            value.requiredActivatedTypes = try reader["RequiredActivatedTypes"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.RequiredActivatedType.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.schema = try reader["Schema"].readIfPresent()
            value.sourceUrl = try reader["SourceUrl"].readIfPresent()
            value.timeCreated = try reader["TimeCreated"].readTimestampIfPresent(format: .dateTime)
            value.type = try reader["Type"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            value.typeTestsStatus = try reader["TypeTestsStatus"].readIfPresent()
            value.typeTestsStatusDescription = try reader["TypeTestsStatusDescription"].readIfPresent()
            value.visibility = try reader["Visibility"].readIfPresent()
            return value
        }
    }
}

public struct DescribeTypeOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension.
    public var arn: Swift.String?
    /// Whether CloudFormation automatically updates the extension in this account and Region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated. For more information, see [Activating public extensions for use in your account](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable) in the CloudFormation User Guide.
    public var autoUpdate: Swift.Bool?
    /// A JSON string that represent the current configuration data for the extension in this account and Region. To set the configuration data for an extension, use [SetTypeConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html). For more information, see [Configuring extensions at the account level](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration) in the CloudFormation User Guide.
    public var configurationSchema: Swift.String?
    /// The ID of the default version of the extension. The default version is used when the extension version isn't specified. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). To set the default version of an extension, use [SetTypeDefaultVersion].
    public var defaultVersionId: Swift.String?
    /// The deprecation status of the extension version. Valid values include:
    ///
    /// * LIVE: The extension is activated or registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.
    ///
    /// * DEPRECATED: The extension has been deactivated or deregistered and can no longer be used in CloudFormation operations.
    ///
    ///
    /// For public third-party extensions, CloudFormation returns null.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// The description of the extension.
    public var description: Swift.String?
    /// The URL of a page providing detailed documentation for this extension.
    public var documentationUrl: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. This applies only to private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). If the registered extension calls any Amazon Web Services APIs, you must create an [IAM execution role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. CloudFormation then assumes that execution role to provide your extension with the appropriate credentials.
    public var executionRoleArn: Swift.String?
    /// Whether the extension is activated in the account and Region. This only applies to public third-party extensions. For all other extensions, CloudFormation returns null.
    public var isActivated: Swift.Bool?
    /// Whether the specified extension version is set as the default version. This applies only to private extensions you have registered in your account, and extensions published by Amazon Web Services. For public third-party extensions, whether they are activated in your account, CloudFormation returns null.
    public var isDefaultVersion: Swift.Bool?
    /// When the specified extension version was registered. This applies only to:
    ///
    /// * Private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
    ///
    /// * Public extensions you have activated in your account with auto-update specified. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
    public var lastUpdated: ClientRuntime.Date?
    /// The latest version of a public extension that is available for use. This only applies if you specify a public extension, and you don't specify a version. For all other requests, CloudFormation returns null.
    public var latestPublicVersion: Swift.String?
    /// Contains logging configuration information for private extensions. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon Web Services and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// For public extensions that have been activated for this account and Region, the Amazon Resource Name (ARN) of the public extension.
    public var originalTypeArn: Swift.String?
    /// For public extensions that have been activated for this account and Region, the type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
    public var originalTypeName: Swift.String?
    /// For resource type extensions, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted. Valid values include:
    ///
    /// * FULLY_MUTABLE: The resource type includes an update handler to process updates to the type during stack update operations.
    ///
    /// * IMMUTABLE: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.
    ///
    /// * NON_PROVISIONABLE: The resource type doesn't include all the following handlers, and therefore can't actually be provisioned.
    ///
    /// * create
    ///
    /// * read
    ///
    /// * delete
    public var provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// The version number of a public third-party extension. This applies only if you specify a public extension you have activated in your account, or specify a public extension without specifying a version. For all other extensions, CloudFormation returns null.
    public var publicVersionNumber: Swift.String?
    /// The publisher ID of the extension publisher. This applies only to public third-party extensions. For private registered extensions, and extensions provided by Amazon Web Services, CloudFormation returns null.
    public var publisherId: Swift.String?
    /// For extensions that are modules, the public third-party extensions that must be activated in your account in order for the module itself to be activated.
    public var requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]?
    /// The schema that defines the extension. For more information about extension schemas, see [Resource Provider Schema](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html) in the CloudFormation CLI User Guide.
    public var schema: Swift.String?
    /// The URL of the source code for the extension.
    public var sourceUrl: Swift.String?
    /// When the specified private extension version was registered or activated in your account.
    public var timeCreated: ClientRuntime.Date?
    /// The kind of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. If the extension is a public third-party type you have activated with a type name alias, CloudFormation returns the type name alias. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
    public var typeName: Swift.String?
    /// The contract test status of the registered extension version. To return the extension test status of a specific extension version, you must specify VersionId. This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.
    ///
    /// * PASSED: The extension has passed all its contract tests. An extension must have a test status of PASSED before it can be published. For more information, see [Publishing extensions to make them available for public use](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html) in the CloudFormation Command Line Interface User Guide.
    ///
    /// * FAILED: The extension has failed one or more contract tests.
    ///
    /// * IN_PROGRESS: Contract tests are currently being performed on the extension.
    ///
    /// * NOT_TESTED: Contract tests haven't been performed on the extension.
    public var typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus?
    /// The description of the test status. To return the extension test status of a specific extension version, you must specify VersionId. This applies only to registered private extension versions. CloudFormation doesn't return this information for public extensions, whether they are activated in your account.
    public var typeTestsStatusDescription: Swift.String?
    /// The scope at which the extension is visible and usable in CloudFormation operations. Valid values include:
    ///
    /// * PRIVATE: The extension is only visible and usable within the account in which it is registered. CloudFormation marks any extensions you register as PRIVATE.
    ///
    /// * PUBLIC: The extension is publicly visible and usable within any Amazon Web Services account.
    public var visibility: CloudFormationClientTypes.Visibility?

    public init(
        arn: Swift.String? = nil,
        autoUpdate: Swift.Bool? = nil,
        configurationSchema: Swift.String? = nil,
        defaultVersionId: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        description: Swift.String? = nil,
        documentationUrl: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        isActivated: Swift.Bool? = nil,
        isDefaultVersion: Swift.Bool? = nil,
        lastUpdated: ClientRuntime.Date? = nil,
        latestPublicVersion: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        originalTypeArn: Swift.String? = nil,
        originalTypeName: Swift.String? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        publicVersionNumber: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]? = nil,
        schema: Swift.String? = nil,
        sourceUrl: Swift.String? = nil,
        timeCreated: ClientRuntime.Date? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus? = nil,
        typeTestsStatusDescription: Swift.String? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.arn = arn
        self.autoUpdate = autoUpdate
        self.configurationSchema = configurationSchema
        self.defaultVersionId = defaultVersionId
        self.deprecatedStatus = deprecatedStatus
        self.description = description
        self.documentationUrl = documentationUrl
        self.executionRoleArn = executionRoleArn
        self.isActivated = isActivated
        self.isDefaultVersion = isDefaultVersion
        self.lastUpdated = lastUpdated
        self.latestPublicVersion = latestPublicVersion
        self.loggingConfig = loggingConfig
        self.originalTypeArn = originalTypeArn
        self.originalTypeName = originalTypeName
        self.provisioningType = provisioningType
        self.publicVersionNumber = publicVersionNumber
        self.publisherId = publisherId
        self.requiredActivatedTypes = requiredActivatedTypes
        self.schema = schema
        self.sourceUrl = sourceUrl
        self.timeCreated = timeCreated
        self.type = type
        self.typeName = typeName
        self.typeTestsStatus = typeTestsStatus
        self.typeTestsStatusDescription = typeTestsStatusDescription
        self.visibility = visibility
    }
}

enum DescribeTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DescribeTypeRegistrationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationToken = "RegistrationToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let registrationToken = registrationToken {
            try container.encode(registrationToken, forKey: ClientRuntime.Key("RegistrationToken"))
        }
        try container.encode("DescribeTypeRegistration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DescribeTypeRegistrationInput {

    static func urlPathProvider(_ value: DescribeTypeRegistrationInput) -> Swift.String? {
        return "/"
    }
}

public struct DescribeTypeRegistrationInput: Swift.Equatable {
    /// The identifier for this registration request. This registration token is generated by CloudFormation when you initiate a registration request using [RegisterType].
    /// This member is required.
    public var registrationToken: Swift.String?

    public init(
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

extension DescribeTypeRegistrationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DescribeTypeRegistrationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DescribeTypeRegistrationResult"]
            var value = DescribeTypeRegistrationOutput()
            value.description = try reader["Description"].readIfPresent()
            value.progressStatus = try reader["ProgressStatus"].readIfPresent()
            value.typeArn = try reader["TypeArn"].readIfPresent()
            value.typeVersionArn = try reader["TypeVersionArn"].readIfPresent()
            return value
        }
    }
}

public struct DescribeTypeRegistrationOutput: Swift.Equatable {
    /// The description of the extension registration request.
    public var description: Swift.String?
    /// The current status of the extension registration request.
    public var progressStatus: CloudFormationClientTypes.RegistrationStatus?
    /// The Amazon Resource Name (ARN) of the extension being registered. For registration requests with a ProgressStatus of other than COMPLETE, this will be null.
    public var typeArn: Swift.String?
    /// The Amazon Resource Name (ARN) of this specific version of the extension being registered. For registration requests with a ProgressStatus of other than COMPLETE, this will be null.
    public var typeVersionArn: Swift.String?

    public init(
        description: Swift.String? = nil,
        progressStatus: CloudFormationClientTypes.RegistrationStatus? = nil,
        typeArn: Swift.String? = nil,
        typeVersionArn: Swift.String? = nil
    )
    {
        self.description = description
        self.progressStatus = progressStatus
        self.typeArn = typeArn
        self.typeVersionArn = typeVersionArn
    }
}

enum DescribeTypeRegistrationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DetectStackDriftInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            if !logicalResourceIds.isEmpty {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                    try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                try logicalResourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackDriftInput {

    static func urlPathProvider(_ value: DetectStackDriftInput) -> Swift.String? {
        return "/"
    }
}

public struct DetectStackDriftInput: Swift.Equatable {
    /// The logical names of any resources you want to use as filters.
    public var logicalResourceIds: [Swift.String]?
    /// The name of the stack for which you want to detect drift.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        logicalResourceIds: [Swift.String]? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceIds = logicalResourceIds
        self.stackName = stackName
    }
}

extension DetectStackDriftOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DetectStackDriftOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DetectStackDriftResult"]
            var value = DetectStackDriftOutput()
            value.stackDriftDetectionId = try reader["StackDriftDetectionId"].readIfPresent()
            return value
        }
    }
}

public struct DetectStackDriftOutput: Swift.Equatable {
    /// The ID of the drift detection results of this operation. CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.
    /// This member is required.
    public var stackDriftDetectionId: Swift.String?

    public init(
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

enum DetectStackDriftOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DetectStackResourceDriftInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackResourceDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackResourceDriftInput {

    static func urlPathProvider(_ value: DetectStackResourceDriftInput) -> Swift.String? {
        return "/"
    }
}

public struct DetectStackResourceDriftInput: Swift.Equatable {
    /// The logical name of the resource for which to return drift information.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The name of the stack to which the resource belongs.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

extension DetectStackResourceDriftOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DetectStackResourceDriftOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DetectStackResourceDriftResult"]
            var value = DetectStackResourceDriftOutput()
            value.stackResourceDrift = try reader["StackResourceDrift"].readIfPresent(readingClosure: CloudFormationClientTypes.StackResourceDrift.readingClosure)
            return value
        }
    }
}

public struct DetectStackResourceDriftOutput: Swift.Equatable {
    /// Information about whether the resource's actual configuration has drifted from its expected template configuration, including actual and expected property values and any differences detected.
    /// This member is required.
    public var stackResourceDrift: CloudFormationClientTypes.StackResourceDrift?

    public init(
        stackResourceDrift: CloudFormationClientTypes.StackResourceDrift? = nil
    )
    {
        self.stackResourceDrift = stackResourceDrift
    }
}

enum DetectStackResourceDriftOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension DetectStackSetDriftInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DetectStackSetDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension DetectStackSetDriftInput {

    static func urlPathProvider(_ value: DetectStackSetDriftInput) -> Swift.String? {
        return "/"
    }
}

public struct DetectStackSetDriftInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of the stack set operation.
    public var operationId: Swift.String?
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The name of the stack set on which to perform the drift detection operation.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.stackSetName = stackSetName
    }
}

extension DetectStackSetDriftOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<DetectStackSetDriftOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["DetectStackSetDriftResult"]
            var value = DetectStackSetDriftOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct DetectStackSetDriftOutput: Swift.Equatable {
    /// The ID of the drift detection stack set operation. You can use this operation ID with [DescribeStackSetOperation] to monitor the progress of the drift detection operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum DetectStackSetDriftOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum DifferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case notEqual
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [DifferenceType] {
            return [
                .add,
                .notEqual,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .notEqual: return "NOT_EQUAL"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DifferenceType(rawValue: rawValue) ?? DifferenceType.sdkUnknown(rawValue)
        }
    }
}

extension EstimateTemplateCostInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("EstimateTemplateCost", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension EstimateTemplateCostInput {

    static func urlPathProvider(_ value: EstimateTemplateCostInput) -> Swift.String? {
        return "/"
    }
}

/// The input for an [EstimateTemplateCost] action.
public struct EstimateTemplateCostInput: Swift.Equatable {
    /// A list of Parameter structures that specify input parameters.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) Conditional: You must pass TemplateBody or TemplateURL. If both are passed, only TemplateBody is used.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateURL: Swift.String?

    public init(
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension EstimateTemplateCostOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<EstimateTemplateCostOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["EstimateTemplateCostResult"]
            var value = EstimateTemplateCostOutput()
            value.url = try reader["Url"].readIfPresent()
            return value
        }
    }
}

/// The output for a [EstimateTemplateCost] action.
public struct EstimateTemplateCostOutput: Swift.Equatable {
    /// An Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
    public var url: Swift.String?

    public init(
        url: Swift.String? = nil
    )
    {
        self.url = url
    }
}

enum EstimateTemplateCostOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum EvaluationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "Dynamic"
            case .static: return "Static"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationType(rawValue: rawValue) ?? EvaluationType.sdkUnknown(rawValue)
        }
    }
}

extension ExecuteChangeSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case retainExceptOnCreate = "RetainExceptOnCreate"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let retainExceptOnCreate = retainExceptOnCreate {
            try container.encode(retainExceptOnCreate, forKey: ClientRuntime.Key("RetainExceptOnCreate"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ExecuteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ExecuteChangeSetInput {

    static func urlPathProvider(_ value: ExecuteChangeSetInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [ExecuteChangeSet] action.
public struct ExecuteChangeSetInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack.
    /// This member is required.
    public var changeSetName: Swift.String?
    /// A unique identifier for this ExecuteChangeSet request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to execute a change set to update a stack with the same name. You might retry ExecuteChangeSet requests to ensure that CloudFormation successfully received them.
    public var clientRequestToken: Swift.String?
    /// Preserves the state of previously provisioned resources when an operation fails. This parameter can't be specified when the OnStackFailure parameter to the [CreateChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html) API operation was specified.
    ///
    /// * True - if the stack creation fails, do nothing. This is equivalent to specifying DO_NOTHING for the OnStackFailure parameter to the [CreateChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html) API operation.
    ///
    /// * False - if the stack creation fails, roll back the stack. This is equivalent to specifying ROLLBACK for the OnStackFailure parameter to the [CreateChangeSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html) API operation.
    ///
    ///
    /// Default: True
    public var disableRollback: Swift.Bool?
    /// When set to true, newly created resources are deleted when the operation rolls back. This includes newly created resources marked with a deletion policy of Retain. Default: false
    public var retainExceptOnCreate: Swift.Bool?
    /// If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that's associated with the change set you want to execute.
    public var stackName: Swift.String?

    public init(
        changeSetName: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        retainExceptOnCreate: Swift.Bool? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.retainExceptOnCreate = retainExceptOnCreate
        self.stackName = stackName
    }
}

extension ExecuteChangeSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ExecuteChangeSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return ExecuteChangeSetOutput()
        }
    }
}

/// The output for the [ExecuteChangeSet] action.
public struct ExecuteChangeSetOutput: Swift.Equatable {

    public init() { }
}

enum ExecuteChangeSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ChangeSetNotFound": return try await ChangeSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InsufficientCapabilitiesException": return try await InsufficientCapabilitiesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "InvalidChangeSetStatus": return try await InvalidChangeSetStatusException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case executeComplete
        case executeFailed
        case executeInProgress
        case obsolete
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .available,
                .executeComplete,
                .executeFailed,
                .executeInProgress,
                .obsolete,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .executeComplete: return "EXECUTE_COMPLETE"
            case .executeFailed: return "EXECUTE_FAILED"
            case .executeInProgress: return "EXECUTE_IN_PROGRESS"
            case .obsolete: return "OBSOLETE"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Export: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportingStackId = "ExportingStackId"
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportingStackId = exportingStackId {
            try container.encode(exportingStackId, forKey: ClientRuntime.Key("ExportingStackId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Export, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Export()
            value.exportingStackId = try reader["ExportingStackId"].readIfPresent()
            value.name = try reader["Name"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Export structure describes the exported output values for a stack.
    public struct Export: Swift.Equatable {
        /// The stack that contains the exported output name and value.
        public var exportingStackId: Swift.String?
        /// The name of exported output value. Use this name and the Fn::ImportValue function to import the associated value into other stacks. The name is defined in the Export field in the associated stack's Outputs section.
        public var name: Swift.String?
        /// The value of the exported output, such as a resource physical ID. This value is defined in the Export field in the associated stack's Outputs section.
        public var value: Swift.String?

        public init(
            exportingStackId: Swift.String? = nil,
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.exportingStackId = exportingStackId
            self.name = name
            self.value = value
        }
    }

}

extension CloudFormationClientTypes {
    public enum GeneratedTemplateDeletionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedTemplateDeletionPolicy] {
            return [
                .delete,
                .retain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .retain: return "RETAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeneratedTemplateDeletionPolicy(rawValue: rawValue) ?? GeneratedTemplateDeletionPolicy.sdkUnknown(rawValue)
        }
    }
}

extension GeneratedTemplateNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = GeneratedTemplateNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The generated template was not found.
public struct GeneratedTemplateNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GeneratedTemplateNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum GeneratedTemplateResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedTemplateResourceStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeneratedTemplateResourceStatus(rawValue: rawValue) ?? GeneratedTemplateResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum GeneratedTemplateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case createInProgress
        case createPending
        case deleteInProgress
        case deletePending
        case failed
        case updateInProgress
        case updatePending
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedTemplateStatus] {
            return [
                .complete,
                .createInProgress,
                .createPending,
                .deleteInProgress,
                .deletePending,
                .failed,
                .updateInProgress,
                .updatePending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case .failed: return "FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updatePending: return "UPDATE_PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeneratedTemplateStatus(rawValue: rawValue) ?? GeneratedTemplateStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum GeneratedTemplateUpdateReplacePolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [GeneratedTemplateUpdateReplacePolicy] {
            return [
                .delete,
                .retain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .retain: return "RETAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeneratedTemplateUpdateReplacePolicy(rawValue: rawValue) ?? GeneratedTemplateUpdateReplacePolicy.sdkUnknown(rawValue)
        }
    }
}

extension GetGeneratedTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case format = "Format"
        case generatedTemplateName = "GeneratedTemplateName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let format = format {
            try container.encode(format, forKey: ClientRuntime.Key("Format"))
        }
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        try container.encode("GetGeneratedTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetGeneratedTemplateInput {

    static func urlPathProvider(_ value: GetGeneratedTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct GetGeneratedTemplateInput: Swift.Equatable {
    /// The language to use to retrieve for the generated template. Supported values are:
    ///
    /// * JSON
    ///
    /// * YAML
    public var format: CloudFormationClientTypes.TemplateFormat?
    /// The name or Amazon Resource Name (ARN) of the generated template. The format is arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}. For example, arn:aws:cloudformation:us-east-1:123456789012:generatedtemplate/2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc .
    /// This member is required.
    public var generatedTemplateName: Swift.String?

    public init(
        format: CloudFormationClientTypes.TemplateFormat? = nil,
        generatedTemplateName: Swift.String? = nil
    )
    {
        self.format = format
        self.generatedTemplateName = generatedTemplateName
    }
}

extension GetGeneratedTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetGeneratedTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetGeneratedTemplateResult"]
            var value = GetGeneratedTemplateOutput()
            value.status = try reader["Status"].readIfPresent()
            value.templateBody = try reader["TemplateBody"].readIfPresent()
            return value
        }
    }
}

public struct GetGeneratedTemplateOutput: Swift.Equatable {
    /// The status of the template generation. Supported values are:
    ///
    /// * CreatePending - the creation of the template is pending.
    ///
    /// * CreateInProgress - the creation of the template is in progress.
    ///
    /// * DeletePending - the deletion of the template is pending.
    ///
    /// * DeleteInProgress - the deletion of the template is in progress.
    ///
    /// * UpdatePending - the update of the template is pending.
    ///
    /// * UpdateInProgress - the update of the template is in progress.
    ///
    /// * Failed - the template operation failed.
    ///
    /// * Complete - the template operation is complete.
    public var status: CloudFormationClientTypes.GeneratedTemplateStatus?
    /// The template body of the generated template, in the language specified by the Language parameter.
    public var templateBody: Swift.String?

    public init(
        status: CloudFormationClientTypes.GeneratedTemplateStatus? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.status = status
        self.templateBody = templateBody
    }
}

enum GetGeneratedTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "GeneratedTemplateNotFound": return try await GeneratedTemplateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetStackPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("GetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetStackPolicyInput {

    static func urlPathProvider(_ value: GetStackPolicyInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [GetStackPolicy] action.
public struct GetStackPolicyInput: Swift.Equatable {
    /// The name or unique stack ID that's associated with the stack whose policy you want to get.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        stackName: Swift.String? = nil
    )
    {
        self.stackName = stackName
    }
}

extension GetStackPolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetStackPolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetStackPolicyResult"]
            var value = GetStackPolicyOutput()
            value.stackPolicyBody = try reader["StackPolicyBody"].readIfPresent()
            return value
        }
    }
}

/// The output for the [GetStackPolicy] action.
public struct GetStackPolicyOutput: Swift.Equatable {
    /// Structure containing the stack policy body. (For more information, go to [ Prevent Updates to Stack Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide.)
    public var stackPolicyBody: Swift.String?

    public init(
        stackPolicyBody: Swift.String? = nil
    )
    {
        self.stackPolicyBody = stackPolicyBody
    }
}

enum GetStackPolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetName = "ChangeSetName"
        case stackName = "StackName"
        case templateStage = "TemplateStage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let templateStage = templateStage {
            try container.encode(templateStage, forKey: ClientRuntime.Key("TemplateStage"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateInput {

    static func urlPathProvider(_ value: GetTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// The input for a [GetTemplate] action.
public struct GetTemplateInput: Swift.Equatable {
    /// The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the StackName.
    public var changeSetName: Swift.String?
    /// The name or the unique stack ID that's associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    public var stackName: Swift.String?
    /// For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify Original. To get the template after CloudFormation has processed all transforms, specify Processed. If the template doesn't include transforms, Original and Processed return the same template. By default, CloudFormation specifies Processed.
    public var templateStage: CloudFormationClientTypes.TemplateStage?

    public init(
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil,
        templateStage: CloudFormationClientTypes.TemplateStage? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
        self.templateStage = templateStage
    }
}

extension GetTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetTemplateResult"]
            var value = GetTemplateOutput()
            value.stagesAvailable = try reader["StagesAvailable"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TemplateStage.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.templateBody = try reader["TemplateBody"].readIfPresent()
            return value
        }
    }
}

/// The output for [GetTemplate] action.
public struct GetTemplateOutput: Swift.Equatable {
    /// The stage of the template that you can retrieve. For stacks, the Original and Processed templates are always available. For change sets, the Original template is always available. After CloudFormation finishes creating the change set, the Processed template becomes available.
    public var stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
    /// Structure containing the template body. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) CloudFormation returns the same template that was used when the stack was created.
    public var templateBody: Swift.String?

    public init(
        stagesAvailable: [CloudFormationClientTypes.TemplateStage]? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.stagesAvailable = stagesAvailable
        self.templateBody = templateBody
    }
}

enum GetTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ChangeSetNotFound": return try await ChangeSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension GetTemplateSummaryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case stackName = "StackName"
        case stackSetName = "StackSetName"
        case templateBody = "TemplateBody"
        case templateSummaryConfig = "TemplateSummaryConfig"
        case templateURL = "TemplateURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateSummaryConfig = templateSummaryConfig {
            try container.encode(templateSummaryConfig, forKey: ClientRuntime.Key("TemplateSummaryConfig"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("GetTemplateSummary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension GetTemplateSummaryInput {

    static func urlPathProvider(_ value: GetTemplateSummaryInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [GetTemplateSummary] action.
public struct GetTemplateSummaryInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The name or the stack ID that's associated with the stack, which aren't always interchangeable. For running stacks, you can specify either the stack's name or its unique stack ID. For deleted stack, you must specify the unique stack ID. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var stackName: Swift.String?
    /// The name or unique ID of the stack set from which the stack was created. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var stackSetName: Swift.String?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var templateBody: Swift.String?
    /// Specifies options for the GetTemplateSummary API action.
    public var templateSummaryConfig: CloudFormationClientTypes.TemplateSummaryConfig?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see [Template anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: StackName, StackSetName, TemplateBody, or TemplateURL.
    public var templateURL: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackName: Swift.String? = nil,
        stackSetName: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateSummaryConfig: CloudFormationClientTypes.TemplateSummaryConfig? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackName = stackName
        self.stackSetName = stackSetName
        self.templateBody = templateBody
        self.templateSummaryConfig = templateSummaryConfig
        self.templateURL = templateURL
    }
}

extension GetTemplateSummaryOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<GetTemplateSummaryOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["GetTemplateSummaryResult"]
            var value = GetTemplateSummaryOutput()
            value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Capability.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.capabilitiesReason = try reader["CapabilitiesReason"].readIfPresent()
            value.declaredTransforms = try reader["DeclaredTransforms"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.description = try reader["Description"].readIfPresent()
            value.metadata = try reader["Metadata"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ParameterDeclaration.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourceIdentifierSummaries = try reader["ResourceIdentifierSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ResourceIdentifierSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourceTypes = try reader["ResourceTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.version = try reader["Version"].readIfPresent()
            value.warnings = try reader["Warnings"].readIfPresent(readingClosure: CloudFormationClientTypes.Warnings.readingClosure)
            return value
        }
    }
}

/// The output for the [GetTemplateSummary] action.
public struct GetTemplateSummaryOutput: Swift.Equatable {
    /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the [CreateStack] or [UpdateStack] actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The list of resources that generated the values in the Capabilities response element.
    public var capabilitiesReason: Swift.String?
    /// A list of the transforms that are declared in the template.
    public var declaredTransforms: [Swift.String]?
    /// The value that's defined in the Description property of the template.
    public var description: Swift.String?
    /// The value that's defined for the Metadata property of the template.
    public var metadata: Swift.String?
    /// A list of parameter declarations that describe various properties for each parameter.
    public var parameters: [CloudFormationClientTypes.ParameterDeclaration]?
    /// A list of resource identifier summaries that describe the target resources of an import operation and the properties you can provide during the import to identify the target resources. For example, BucketName is a possible identifier property for an AWS::S3::Bucket resource.
    public var resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]?
    /// A list of all the template resource types that are defined in the template, such as AWS::EC2::Instance, AWS::Dynamo::Table, and Custom::MyCustomInstance.
    public var resourceTypes: [Swift.String]?
    /// The Amazon Web Services template format version, which identifies the capabilities of the template.
    public var version: Swift.String?
    /// An object containing any warnings returned.
    public var warnings: CloudFormationClientTypes.Warnings?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        metadata: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.ParameterDeclaration]? = nil,
        resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]? = nil,
        resourceTypes: [Swift.String]? = nil,
        version: Swift.String? = nil,
        warnings: CloudFormationClientTypes.Warnings? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.metadata = metadata
        self.parameters = parameters
        self.resourceIdentifierSummaries = resourceIdentifierSummaries
        self.resourceTypes = resourceTypes
        self.version = version
        self.warnings = warnings
    }
}

enum GetTemplateSummaryOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum HandlerErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case alreadyexists
        case generalserviceexception
        case handlerinternalfailure
        case internalfailure
        case invalidcredentials
        case invalidrequest
        case invalidtypeconfiguration
        case networkfailure
        case noncompliant
        case notfound
        case notupdatable
        case resourceconflict
        case serviceinternalerror
        case servicelimitexceeded
        case servicetimeout
        case throttling
        case unknown
        case unsupportedtarget
        case sdkUnknown(Swift.String)

        public static var allCases: [HandlerErrorCode] {
            return [
                .accessdenied,
                .alreadyexists,
                .generalserviceexception,
                .handlerinternalfailure,
                .internalfailure,
                .invalidcredentials,
                .invalidrequest,
                .invalidtypeconfiguration,
                .networkfailure,
                .noncompliant,
                .notfound,
                .notupdatable,
                .resourceconflict,
                .serviceinternalerror,
                .servicelimitexceeded,
                .servicetimeout,
                .throttling,
                .unknown,
                .unsupportedtarget,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .alreadyexists: return "AlreadyExists"
            case .generalserviceexception: return "GeneralServiceException"
            case .handlerinternalfailure: return "HandlerInternalFailure"
            case .internalfailure: return "InternalFailure"
            case .invalidcredentials: return "InvalidCredentials"
            case .invalidrequest: return "InvalidRequest"
            case .invalidtypeconfiguration: return "InvalidTypeConfiguration"
            case .networkfailure: return "NetworkFailure"
            case .noncompliant: return "NonCompliant"
            case .notfound: return "NotFound"
            case .notupdatable: return "NotUpdatable"
            case .resourceconflict: return "ResourceConflict"
            case .serviceinternalerror: return "ServiceInternalError"
            case .servicelimitexceeded: return "ServiceLimitExceeded"
            case .servicetimeout: return "NotStabilized"
            case .throttling: return "Throttling"
            case .unknown: return "Unknown"
            case .unsupportedtarget: return "UnsupportedTarget"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandlerErrorCode(rawValue: rawValue) ?? HandlerErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookFailureMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fail
        case warn
        case sdkUnknown(Swift.String)

        public static var allCases: [HookFailureMode] {
            return [
                .fail,
                .warn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fail: return "FAIL"
            case .warn: return "WARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookFailureMode(rawValue: rawValue) ?? HookFailureMode.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookInvocationPoint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preProvision
        case sdkUnknown(Swift.String)

        public static var allCases: [HookInvocationPoint] {
            return [
                .preProvision,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preProvision: return "PRE_PROVISION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookInvocationPoint(rawValue: rawValue) ?? HookInvocationPoint.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hookCompleteFailed
        case hookCompleteSucceeded
        case hookFailed
        case hookInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [HookStatus] {
            return [
                .hookCompleteFailed,
                .hookCompleteSucceeded,
                .hookFailed,
                .hookInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hookCompleteFailed: return "HOOK_COMPLETE_FAILED"
            case .hookCompleteSucceeded: return "HOOK_COMPLETE_SUCCEEDED"
            case .hookFailed: return "HOOK_FAILED"
            case .hookInProgress: return "HOOK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookStatus(rawValue: rawValue) ?? HookStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum HookTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [HookTargetType] {
            return [
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HookTargetType(rawValue: rawValue) ?? HookTargetType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum IdentityProvider: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsMarketplace
        case bitbucket
        case github
        case sdkUnknown(Swift.String)

        public static var allCases: [IdentityProvider] {
            return [
                .awsMarketplace,
                .bitbucket,
                .github,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsMarketplace: return "AWS_Marketplace"
            case .bitbucket: return "Bitbucket"
            case .github: return "GitHub"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IdentityProvider(rawValue: rawValue) ?? IdentityProvider.sdkUnknown(rawValue)
        }
    }
}

extension ImportStacksToStackSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case stackIds = "StackIds"
        case stackIdsUrl = "StackIdsUrl"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackIds = stackIds {
            if !stackIds.isEmpty {
                var stackIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackIds"))
                for (index0, stackid0) in stackIds.enumerated() {
                    try stackIdsContainer.encode(stackid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackIds"))
                try stackIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackIdsUrl = stackIdsUrl {
            try container.encode(stackIdsUrl, forKey: ClientRuntime.Key("StackIdsUrl"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ImportStacksToStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ImportStacksToStackSetInput {

    static func urlPathProvider(_ value: ImportStacksToStackSetInput) -> Swift.String? {
        return "/"
    }
}

public struct ImportStacksToStackSetInput: Swift.Equatable {
    /// By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * For service managed stack sets, specify DELEGATED_ADMIN.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// A unique, user defined, identifier for the stack set operation.
    public var operationId: Swift.String?
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// The list of OU ID's to which the stacks being imported has to be mapped as deployment target.
    public var organizationalUnitIds: [Swift.String]?
    /// The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time. Specify either StackIds or StackIdsUrl.
    public var stackIds: [Swift.String]?
    /// The Amazon S3 URL which contains list of stack ids to be inputted. Specify either StackIds or StackIdsUrl.
    public var stackIdsUrl: Swift.String?
    /// The name of the stack set. The name must be unique in the Region where you create your stack set.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        organizationalUnitIds: [Swift.String]? = nil,
        stackIds: [Swift.String]? = nil,
        stackIdsUrl: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.organizationalUnitIds = organizationalUnitIds
        self.stackIds = stackIds
        self.stackIdsUrl = stackIdsUrl
        self.stackSetName = stackSetName
    }
}

extension ImportStacksToStackSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ImportStacksToStackSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ImportStacksToStackSetResult"]
            var value = ImportStacksToStackSetOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct ImportStacksToStackSetOutput: Swift.Equatable {
    /// The unique identifier for the stack set operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum ImportStacksToStackSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationIdAlreadyExistsException": return try await OperationIdAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackNotFoundException": return try await StackNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StaleRequestException": return try await StaleRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension InsufficientCapabilitiesException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InsufficientCapabilitiesException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The template contains resources with capabilities that weren't specified in the Capabilities parameter.
public struct InsufficientCapabilitiesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InsufficientCapabilitiesException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidChangeSetStatusException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidChangeSetStatusException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified change set can't be used to update the stack. For example, the change set status might be CREATE_IN_PROGRESS, or the stack status might be UPDATE_IN_PROGRESS.
public struct InvalidChangeSetStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidChangeSetStatus" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidOperationException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified operation isn't valid.
public struct InvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOperationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension InvalidStateTransitionException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = InvalidStateTransitionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Error reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html). CloudFormation doesn't return this error to users.
public struct InvalidStateTransitionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStateTransition" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension LimitExceededException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The quota for the resource has already been reached. For information about resource and stack limitations, see [CloudFormation quotas](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html) in the CloudFormation User Guide.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ListChangeSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListChangeSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListChangeSetsInput {

    static func urlPathProvider(_ value: ListChangeSetsInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [ListChangeSets] action.
public struct ListChangeSetsInput: Swift.Equatable {
    /// A string (provided by the [ListChangeSets] response output) that identifies the next page of change sets that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension ListChangeSetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListChangeSetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListChangeSetsResult"]
            var value = ListChangeSetsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ChangeSetSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for the [ListChangeSets] action.
public struct ListChangeSetsOutput: Swift.Equatable {
    /// If the output exceeds 1 MB, a string that identifies the next page of change sets. If there is no additional page, this value is null.
    public var nextToken: Swift.String?
    /// A list of ChangeSetSummary structures that provides the ID and status of each change set for the specified stack.
    public var summaries: [CloudFormationClientTypes.ChangeSetSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.ChangeSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListChangeSetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListExportsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListExports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListExportsInput {

    static func urlPathProvider(_ value: ListExportsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListExportsInput: Swift.Equatable {
    /// A string (provided by the [ListExports] response output) that identifies the next page of exported output values that you asked to retrieve.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension ListExportsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListExportsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListExportsResult"]
            var value = ListExportsOutput()
            value.exports = try reader["Exports"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Export.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

public struct ListExportsOutput: Swift.Equatable {
    /// The output for the [ListExports] action.
    public var exports: [CloudFormationClientTypes.Export]?
    /// If the output exceeds 100 exported output values, a string that identifies the next page of exports. If there is no additional page, this value is null.
    public var nextToken: Swift.String?

    public init(
        exports: [CloudFormationClientTypes.Export]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exports = exports
        self.nextToken = nextToken
    }
}

enum ListExportsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListGeneratedTemplatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListGeneratedTemplates", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListGeneratedTemplatesInput {

    static func urlPathProvider(_ value: ListGeneratedTemplatesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListGeneratedTemplatesInput: Swift.Equatable {
    /// If the number of available results exceeds this maximum, the response includes a NextToken value that you can use for the NextToken parameter to get the next set of results. By default the ListGeneratedTemplates API action will return at most 50 results in each response. The maximum value is 100.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of resource scan results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListGeneratedTemplatesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListGeneratedTemplatesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListGeneratedTemplatesResult"]
            var value = ListGeneratedTemplatesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TemplateSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListGeneratedTemplatesOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListGeneratedTemplates again and use that value for the NextToken parameter. If the request returns all results, NextToken is set to an empty string.
    public var nextToken: Swift.String?
    /// A list of summaries of the generated templates.
    public var summaries: [CloudFormationClientTypes.TemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.TemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListGeneratedTemplatesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListImportsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportName = "ExportName"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListImports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListImportsInput {

    static func urlPathProvider(_ value: ListImportsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListImportsInput: Swift.Equatable {
    /// The name of the exported output value. CloudFormation returns the stack names that are importing this value.
    /// This member is required.
    public var exportName: Swift.String?
    /// A string (provided by the [ListImports] response output) that identifies the next page of stacks that are importing the specified exported output value.
    public var nextToken: Swift.String?

    public init(
        exportName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportName = exportName
        self.nextToken = nextToken
    }
}

extension ListImportsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListImportsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListImportsResult"]
            var value = ListImportsOutput()
            value.imports = try reader["Imports"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.nextToken = try reader["NextToken"].readIfPresent()
            return value
        }
    }
}

public struct ListImportsOutput: Swift.Equatable {
    /// A list of stack names that are importing the specified exported output value.
    public var imports: [Swift.String]?
    /// A string that identifies the next page of exports. If there is no additional page, this value is null.
    public var nextToken: Swift.String?

    public init(
        imports: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.imports = imports
        self.nextToken = nextToken
    }
}

enum ListImportsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListResourceScanRelatedResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceScanId = "ResourceScanId"
        case resources = "Resources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let resourceScanId = resourceScanId {
            try container.encode(resourceScanId, forKey: ClientRuntime.Key("ResourceScanId"))
        }
        if let resources = resources {
            if !resources.isEmpty {
                var resourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Resources"))
                for (index0, scannedresourceidentifier0) in resources.enumerated() {
                    try resourcesContainer.encode(scannedresourceidentifier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Resources"))
                try resourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ListResourceScanRelatedResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListResourceScanRelatedResourcesInput {

    static func urlPathProvider(_ value: ListResourceScanRelatedResourcesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListResourceScanRelatedResourcesInput: Swift.Equatable {
    /// If the number of available results exceeds this maximum, the response includes a NextToken value that you can use for the NextToken parameter to get the next set of results. By default the ListResourceScanRelatedResources API action will return up to 100 results in each response. The maximum value is 100.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of resource scan results.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource scan.
    /// This member is required.
    public var resourceScanId: Swift.String?
    /// The list of resources for which you want to get the related resources. Up to 100 resources can be provided.
    /// This member is required.
    public var resources: [CloudFormationClientTypes.ScannedResourceIdentifier]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceScanId: Swift.String? = nil,
        resources: [CloudFormationClientTypes.ScannedResourceIdentifier]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceScanId = resourceScanId
        self.resources = resources
    }
}

extension ListResourceScanRelatedResourcesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListResourceScanRelatedResourcesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListResourceScanRelatedResourcesResult"]
            var value = ListResourceScanRelatedResourcesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.relatedResources = try reader["RelatedResources"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ScannedResource.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListResourceScanRelatedResourcesOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListResourceScanRelatedResources again and use that value for the NextToken parameter. If the request returns all results, NextToken is set to an empty string.
    public var nextToken: Swift.String?
    /// List of up to MaxResults resources in the specified resource scan related to the specified resources.
    public var relatedResources: [CloudFormationClientTypes.ScannedResource]?

    public init(
        nextToken: Swift.String? = nil,
        relatedResources: [CloudFormationClientTypes.ScannedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.relatedResources = relatedResources
    }
}

enum ListResourceScanRelatedResourcesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceScanInProgress": return try await ResourceScanInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceScanNotFound": return try await ResourceScanNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListResourceScanResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceScanId = "ResourceScanId"
        case resourceTypePrefix = "ResourceTypePrefix"
        case tagKey = "TagKey"
        case tagValue = "TagValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let resourceIdentifier = resourceIdentifier {
            try container.encode(resourceIdentifier, forKey: ClientRuntime.Key("ResourceIdentifier"))
        }
        if let resourceScanId = resourceScanId {
            try container.encode(resourceScanId, forKey: ClientRuntime.Key("ResourceScanId"))
        }
        if let resourceTypePrefix = resourceTypePrefix {
            try container.encode(resourceTypePrefix, forKey: ClientRuntime.Key("ResourceTypePrefix"))
        }
        if let tagKey = tagKey {
            try container.encode(tagKey, forKey: ClientRuntime.Key("TagKey"))
        }
        if let tagValue = tagValue {
            try container.encode(tagValue, forKey: ClientRuntime.Key("TagValue"))
        }
        try container.encode("ListResourceScanResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListResourceScanResourcesInput {

    static func urlPathProvider(_ value: ListResourceScanResourcesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListResourceScanResourcesInput: Swift.Equatable {
    /// If the number of available results exceeds this maximum, the response includes a NextToken value that you can use for the NextToken parameter to get the next set of results. By default the ListResourceScanResources API action will return at most 100 results in each response. The maximum value is 100.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of resource scan results.
    public var nextToken: Swift.String?
    /// If specified, the returned resources will have the specified resource identifier (or one of them in the case where the resource has multiple identifiers).
    public var resourceIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource scan.
    /// This member is required.
    public var resourceScanId: Swift.String?
    /// If specified, the returned resources will be of any of the resource types with the specified prefix.
    public var resourceTypePrefix: Swift.String?
    /// If specified, the returned resources will have a matching tag key.
    public var tagKey: Swift.String?
    /// If specified, the returned resources will have a matching tag value.
    public var tagValue: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil,
        resourceScanId: Swift.String? = nil,
        resourceTypePrefix: Swift.String? = nil,
        tagKey: Swift.String? = nil,
        tagValue: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifier = resourceIdentifier
        self.resourceScanId = resourceScanId
        self.resourceTypePrefix = resourceTypePrefix
        self.tagKey = tagKey
        self.tagValue = tagValue
    }
}

extension ListResourceScanResourcesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListResourceScanResourcesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListResourceScanResourcesResult"]
            var value = ListResourceScanResourcesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.resources = try reader["Resources"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ScannedResource.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListResourceScanResourcesOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListResourceScanResources again and use that value for the NextToken parameter. If the request returns all results, NextToken is set to an empty string.
    public var nextToken: Swift.String?
    /// List of up to MaxResults resources in the specified resource scan that match all of the specified filters.
    public var resources: [CloudFormationClientTypes.ScannedResource]?

    public init(
        nextToken: Swift.String? = nil,
        resources: [CloudFormationClientTypes.ScannedResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.resources = resources
    }
}

enum ListResourceScanResourcesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceScanInProgress": return try await ResourceScanInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceScanNotFound": return try await ResourceScanNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListResourceScansInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListResourceScans", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListResourceScansInput {

    static func urlPathProvider(_ value: ListResourceScansInput) -> Swift.String? {
        return "/"
    }
}

public struct ListResourceScansInput: Swift.Equatable {
    /// If the number of available results exceeds this maximum, the response includes a NextToken value that you can use for the NextToken parameter to get the next set of results. The default value is 10. The maximum value is 100.
    public var maxResults: Swift.Int?
    /// A string that identifies the next page of resource scan results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListResourceScansOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListResourceScansOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListResourceScansResult"]
            var value = ListResourceScansOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.resourceScanSummaries = try reader["ResourceScanSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ResourceScanSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListResourceScansOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListResourceScans again and use that value for the NextToken parameter. If the request returns all results, NextToken is set to an empty string.
    public var nextToken: Swift.String?
    /// The list of scans returned.
    public var resourceScanSummaries: [CloudFormationClientTypes.ResourceScanSummary]?

    public init(
        nextToken: Swift.String? = nil,
        resourceScanSummaries: [CloudFormationClientTypes.ResourceScanSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceScanSummaries = resourceScanSummaries
    }
}

enum ListResourceScansOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackInstanceResourceDriftsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case operationId = "OperationId"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackInstanceResourceDriftStatuses = "StackInstanceResourceDriftStatuses"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackInstanceResourceDriftStatuses = stackInstanceResourceDriftStatuses {
            if !stackInstanceResourceDriftStatuses.isEmpty {
                var stackInstanceResourceDriftStatusesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackInstanceResourceDriftStatuses"))
                for (index0, stackresourcedriftstatus0) in stackInstanceResourceDriftStatuses.enumerated() {
                    try stackInstanceResourceDriftStatusesContainer.encode(stackresourcedriftstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackInstanceResourceDriftStatusesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackInstanceResourceDriftStatuses"))
                try stackInstanceResourceDriftStatusesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackInstanceResourceDrifts", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackInstanceResourceDriftsInput {

    static func urlPathProvider(_ value: ListStackInstanceResourceDriftsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListStackInstanceResourceDriftsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The unique ID of the drift operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name of the Amazon Web Services account that you want to list resource drifts for.
    /// This member is required.
    public var stackInstanceAccount: Swift.String?
    /// The name of the Region where you want to list resource drifts.
    /// This member is required.
    public var stackInstanceRegion: Swift.String?
    /// The resource drift status of the stack instance.
    ///
    /// * DELETED: The resource differs from its expected template configuration in that the resource has been deleted.
    ///
    /// * MODIFIED: One or more resource properties differ from their expected template values.
    ///
    /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
    ///
    /// * NOT_CHECKED: CloudFormation doesn't currently return this value.
    public var stackInstanceResourceDriftStatuses: [CloudFormationClientTypes.StackResourceDriftStatus]?
    /// The name or unique ID of the stack set that you want to list drifted resources for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operationId: Swift.String? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackInstanceResourceDriftStatuses: [CloudFormationClientTypes.StackResourceDriftStatus]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operationId = operationId
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackInstanceResourceDriftStatuses = stackInstanceResourceDriftStatuses
        self.stackSetName = stackSetName
    }
}

extension ListStackInstanceResourceDriftsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackInstanceResourceDriftsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackInstanceResourceDriftsResult"]
            var value = ListStackInstanceResourceDriftsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackInstanceResourceDriftsSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListStackInstanceResourceDriftsOutput: Swift.Equatable {
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// A list of StackInstanceResourceDriftSummary structures that contain information about the specified stack instances.
    public var summaries: [CloudFormationClientTypes.StackInstanceResourceDriftsSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackInstanceResourceDriftsSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListStackInstanceResourceDriftsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackInstanceNotFoundException": return try await StackInstanceNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, stackinstancefilter0) in filters.enumerated() {
                    try filtersContainer.encode(stackinstancefilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackInstancesInput {

    static func urlPathProvider(_ value: ListStackInstancesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListStackInstancesInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The filter to apply to stack instances
    public var filters: [CloudFormationClientTypes.StackInstanceFilter]?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous request didn't return all the remaining results, the response's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The name of the Amazon Web Services account that you want to list stack instances for.
    public var stackInstanceAccount: Swift.String?
    /// The name of the Region where you want to list stack instances.
    public var stackInstanceRegion: Swift.String?
    /// The name or unique ID of the stack set that you want to list stack instances for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        filters: [CloudFormationClientTypes.StackInstanceFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

extension ListStackInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackInstancesResult"]
            var value = ListStackInstancesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackInstanceSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListStackInstancesOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackInstanceSummary structures that contain information about the specified stack instances.
    public var summaries: [CloudFormationClientTypes.StackInstanceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListStackInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackResourcesInput {

    static func urlPathProvider(_ value: ListStackResourcesInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [ListStackResource] action.
public struct ListStackResourcesInput: Swift.Equatable {
    /// A string that identifies the next page of stack resources that you want to retrieve.
    public var nextToken: Swift.String?
    /// The name or the unique stack ID that is associated with the stack, which aren't always interchangeable:
    ///
    /// * Running stacks: You can specify either the stack's name or its unique stack ID.
    ///
    /// * Deleted stacks: You must specify the unique stack ID.
    ///
    ///
    /// Default: There is no default value.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension ListStackResourcesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackResourcesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackResourcesResult"]
            var value = ListStackResourcesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stackResourceSummaries = try reader["StackResourceSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackResourceSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for a [ListStackResources] action.
public struct ListStackResourcesOutput: Swift.Equatable {
    /// If the output exceeds 1 MB, a string that identifies the next page of stack resources. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackResourceSummary structures.
    public var stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceSummaries = stackResourceSummaries
    }
}

enum ListStackResourcesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackSetOperationResultsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let filters = filters {
            if !filters.isEmpty {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                for (index0, operationresultfilter0) in filters.enumerated() {
                    try filtersContainer.encode(operationresultfilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
                try filtersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperationResults", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetOperationResultsInput {

    static func urlPathProvider(_ value: ListStackSetOperationResultsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListStackSetOperationResultsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The filter to apply to operation results.
    public var filters: [CloudFormationClientTypes.OperationResultFilter]?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSetOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The ID of the stack set operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or unique ID of the stack set that you want to get operation results for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        filters: [CloudFormationClientTypes.OperationResultFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension ListStackSetOperationResultsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackSetOperationResultsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackSetOperationResultsResult"]
            var value = ListStackSetOperationResultsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackSetOperationResultSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListStackSetOperationResultsOutput: Swift.Equatable {
    /// If the request doesn't return all results, NextToken is set to a token. To retrieve the next set of results, call ListOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetOperationResultSummary structures that contain information about the specified operation results, for accounts and Amazon Web Services Regions that are included in the operation.
    public var summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListStackSetOperationResultsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackSetOperationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetOperationsInput {

    static func urlPathProvider(_ value: ListStackSetOperationsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListStackSetOperationsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSetOperations again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The name or unique ID of the stack set that you want to get operation summaries for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackSetName = stackSetName
    }
}

extension ListStackSetOperationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackSetOperationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackSetOperationsResult"]
            var value = ListStackSetOperationsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackSetOperationSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListStackSetOperationsOutput: Swift.Equatable {
    /// If the request doesn't return all results, NextToken is set to a token. To retrieve the next set of results, call ListOperationResults again and assign that token to the request object's NextToken parameter. If there are no remaining results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetOperationSummary structures that contain summary information about operations for the specified stack set.
    public var summaries: [CloudFormationClientTypes.StackSetOperationSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListStackSetOperationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStackSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ListStackSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStackSetsInput {

    static func urlPathProvider(_ value: ListStackSetsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListStackSetsInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call ListStackSets again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The status of the stack sets that you want to get summary information about.
    public var status: CloudFormationClientTypes.StackSetStatus?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudFormationClientTypes.StackSetStatus? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension ListStackSetsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStackSetsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStackSetsResult"]
            var value = ListStackSetsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.summaries = try reader["Summaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackSetSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListStackSetsOutput: Swift.Equatable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call ListStackInstances again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of StackSetSummary structures that contain information about the user's stack sets.
    public var summaries: [CloudFormationClientTypes.StackSetSummary]?

    public init(
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

enum ListStackSetsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListStacksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackStatusFilter = "StackStatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackStatusFilter = stackStatusFilter {
            if !stackStatusFilter.isEmpty {
                var stackStatusFilterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackStatusFilter"))
                for (index0, stackstatus0) in stackStatusFilter.enumerated() {
                    try stackStatusFilterContainer.encode(stackstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var stackStatusFilterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackStatusFilter"))
                try stackStatusFilterContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        try container.encode("ListStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListStacksInput {

    static func urlPathProvider(_ value: ListStacksInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [ListStacks] action.
public struct ListStacksInput: Swift.Equatable {
    /// A string that identifies the next page of stacks that you want to retrieve.
    public var nextToken: Swift.String?
    /// Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the StackStatus parameter of the [Stack] data type.
    public var stackStatusFilter: [CloudFormationClientTypes.StackStatus]?

    public init(
        nextToken: Swift.String? = nil,
        stackStatusFilter: [CloudFormationClientTypes.StackStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackStatusFilter = stackStatusFilter
    }
}

extension ListStacksOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListStacksOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListStacksResult"]
            var value = ListStacksOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.stackSummaries = try reader["StackSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.StackSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for [ListStacks] action.
public struct ListStacksOutput: Swift.Equatable {
    /// If the output exceeds 1 MB in size, a string that identifies the next page of stacks. If no additional page exists, this value is null.
    public var nextToken: Swift.String?
    /// A list of StackSummary structures containing information about the specified stacks.
    public var stackSummaries: [CloudFormationClientTypes.StackSummary]?

    public init(
        nextToken: Swift.String? = nil,
        stackSummaries: [CloudFormationClientTypes.StackSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackSummaries = stackSummaries
    }
}

enum ListStacksOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListTypeRegistrationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case registrationStatusFilter = "RegistrationStatusFilter"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let registrationStatusFilter = registrationStatusFilter {
            try container.encode(registrationStatusFilter, forKey: ClientRuntime.Key("RegistrationStatusFilter"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeRegistrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypeRegistrationsInput {

    static func urlPathProvider(_ value: ListTypeRegistrationsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListTypeRegistrationsInput: Swift.Equatable {
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The current status of the extension registration request. The default is IN_PROGRESS.
    public var registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeArn: Swift.String?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.registrationStatusFilter = registrationStatusFilter
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}

extension ListTypeRegistrationsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListTypeRegistrationsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListTypeRegistrationsResult"]
            var value = ListTypeRegistrationsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.registrationTokenList = try reader["RegistrationTokenList"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListTypeRegistrationsOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of extension registration tokens. Use [DescribeTypeRegistration] to return detailed information about a type registration request.
    public var registrationTokenList: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        registrationTokenList: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationTokenList = registrationTokenList
    }
}

enum ListTypeRegistrationsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListTypeVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case deprecatedStatus = "DeprecatedStatus"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case publisherId = "PublisherId"
        case type = "Type"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypeVersionsInput {

    static func urlPathProvider(_ value: ListTypeVersionsInput) -> Swift.String? {
        return "/"
    }
}

public struct ListTypeVersionsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The deprecation status of the extension versions that you want to get summary information about. Valid values include:
    ///
    /// * LIVE: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.
    ///
    /// * DEPRECATED: The extension version has been deregistered and can no longer be used in CloudFormation operations.
    ///
    ///
    /// The default is LIVE.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// The publisher ID of the extension publisher. Extensions published by Amazon aren't assigned a publisher ID.
    public var publisherId: Swift.String?
    /// The kind of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?

    public init(
        arn: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.deprecatedStatus = deprecatedStatus
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
    }
}

extension ListTypeVersionsOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListTypeVersionsOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListTypeVersionsResult"]
            var value = ListTypeVersionsOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.typeVersionSummaries = try reader["TypeVersionSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TypeVersionSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListTypeVersionsOutput: Swift.Equatable {
    /// If the request doesn't return all of the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of TypeVersionSummary structures that contain information about the specified extension's versions.
    public var typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeVersionSummaries = typeVersionSummaries
    }
}

enum ListTypeVersionsOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ListTypesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deprecatedStatus = "DeprecatedStatus"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case provisioningType = "ProvisioningType"
        case type = "Type"
        case visibility = "Visibility"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let filters = filters {
            try container.encode(filters, forKey: ClientRuntime.Key("Filters"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let provisioningType = provisioningType {
            try container.encode(provisioningType, forKey: ClientRuntime.Key("ProvisioningType"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let visibility = visibility {
            try container.encode(visibility, forKey: ClientRuntime.Key("Visibility"))
        }
        try container.encode("ListTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ListTypesInput {

    static func urlPathProvider(_ value: ListTypesInput) -> Swift.String? {
        return "/"
    }
}

public struct ListTypesInput: Swift.Equatable {
    /// The deprecation status of the extension that you want to get summary information about. Valid values include:
    ///
    /// * LIVE: The extension is registered for use in CloudFormation operations.
    ///
    /// * DEPRECATED: The extension has been deregistered and can no longer be used in CloudFormation operations.
    public var deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// Filter criteria to use in determining which extensions to return. Filters must be compatible with Visibility to return valid results. For example, specifying AWS_TYPES for Category and PRIVATE for Visibility returns an empty list of types, but specifying PUBLIC for Visibility returns the desired list.
    public var filters: CloudFormationClientTypes.TypeFilters?
    /// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    public var maxResults: Swift.Int?
    /// If the previous paginated request didn't return all the remaining results, the response object's NextToken parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public var nextToken: Swift.String?
    /// For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted. Valid values include:
    ///
    /// * FULLY_MUTABLE: The resource type includes an update handler to process updates to the type during stack update operations.
    ///
    /// * IMMUTABLE: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.
    ///
    /// * NON_PROVISIONABLE: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.
    ///
    ///
    /// The default is FULLY_MUTABLE.
    public var provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// The type of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The scope at which the extensions are visible and usable in CloudFormation operations. Valid values include:
    ///
    /// * PRIVATE: Extensions that are visible and usable within this account and Region. This includes:
    ///
    /// * Private extensions you have registered in this account and Region.
    ///
    /// * Public extensions that you have activated in this account and Region.
    ///
    ///
    ///
    ///
    /// * PUBLIC: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.
    ///
    ///
    /// The default is PRIVATE.
    public var visibility: CloudFormationClientTypes.Visibility?

    public init(
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        filters: CloudFormationClientTypes.TypeFilters? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.deprecatedStatus = deprecatedStatus
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.provisioningType = provisioningType
        self.type = type
        self.visibility = visibility
    }
}

extension ListTypesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ListTypesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ListTypesResult"]
            var value = ListTypesOutput()
            value.nextToken = try reader["NextToken"].readIfPresent()
            value.typeSummaries = try reader["TypeSummaries"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TypeSummary.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

public struct ListTypesOutput: Swift.Equatable {
    /// If the request doesn't return all the remaining results, NextToken is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter. If the request returns all results, NextToken is set to null.
    public var nextToken: Swift.String?
    /// A list of TypeSummary structures that contain information about the specified extensions.
    public var typeSummaries: [CloudFormationClientTypes.TypeSummary]?

    public init(
        nextToken: Swift.String? = nil,
        typeSummaries: [CloudFormationClientTypes.TypeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeSummaries = typeSummaries
    }
}

enum ListTypesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes.LoggingConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName = "LogGroupName"
        case logRoleArn = "LogRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logGroupName = logGroupName {
            try container.encode(logGroupName, forKey: ClientRuntime.Key("LogGroupName"))
        }
        if let logRoleArn = logRoleArn {
            try container.encode(logRoleArn, forKey: ClientRuntime.Key("LogRoleArn"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.LoggingConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.LoggingConfig()
            value.logRoleArn = try reader["LogRoleArn"].readIfPresent()
            value.logGroupName = try reader["LogGroupName"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains logging configuration information for an extension.
    public struct LoggingConfig: Swift.Equatable {
        /// The Amazon CloudWatch Logs group to which CloudFormation sends error logging information when invoking the extension's handlers.
        /// This member is required.
        public var logGroupName: Swift.String?
        /// The Amazon Resource Name (ARN) of the role that CloudFormation should assume when sending log entries to CloudWatch Logs.
        /// This member is required.
        public var logRoleArn: Swift.String?

        public init(
            logGroupName: Swift.String? = nil,
            logRoleArn: Swift.String? = nil
        )
        {
            self.logGroupName = logGroupName
            self.logRoleArn = logRoleArn
        }
    }

}

extension CloudFormationClientTypes.ManagedExecution: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let active = active {
            try container.encode(active, forKey: ClientRuntime.Key("Active"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ManagedExecution, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ManagedExecution()
            value.active = try reader["Active"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public struct ManagedExecution: Swift.Equatable {
        /// When true, StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order. If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting. You can't modify your stack set's execution configuration while there are running or queued operations for that stack set. When false (default), StackSets performs one operation at a time in request order.
        public var active: Swift.Bool?

        public init(
            active: Swift.Bool? = nil
        )
        {
            self.active = active
        }
    }

}

extension CloudFormationClientTypes.ModuleInfo: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalIdHierarchy = "LogicalIdHierarchy"
        case typeHierarchy = "TypeHierarchy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalIdHierarchy = logicalIdHierarchy {
            try container.encode(logicalIdHierarchy, forKey: ClientRuntime.Key("LogicalIdHierarchy"))
        }
        if let typeHierarchy = typeHierarchy {
            try container.encode(typeHierarchy, forKey: ClientRuntime.Key("TypeHierarchy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ModuleInfo, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ModuleInfo()
            value.typeHierarchy = try reader["TypeHierarchy"].readIfPresent()
            value.logicalIdHierarchy = try reader["LogicalIdHierarchy"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template. For more information about modules, see [Using modules to encapsulate and reuse resource configurations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/modules.html) in the CloudFormation User Guide.
    public struct ModuleInfo: Swift.Equatable {
        /// A concatenated list of the logical IDs of the module or modules containing the resource. Modules are listed starting with the inner-most nested module, and separated by /. In the following example, the resource was created from a module, moduleA, that's nested inside a parent module, moduleB. moduleA/moduleB For more information, see [Referencing resources in a module](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/modules.html#module-ref-resources) in the CloudFormation User Guide.
        public var logicalIdHierarchy: Swift.String?
        /// A concatenated list of the module type or types containing the resource. Module types are listed starting with the inner-most nested module, and separated by /. In the following example, the resource was created from a module of type AWS::First::Example::MODULE, that's nested inside a parent module of type AWS::Second::Example::MODULE. AWS::First::Example::MODULE/AWS::Second::Example::MODULE
        public var typeHierarchy: Swift.String?

        public init(
            logicalIdHierarchy: Swift.String? = nil,
            typeHierarchy: Swift.String? = nil
        )
        {
            self.logicalIdHierarchy = logicalIdHierarchy
            self.typeHierarchy = typeHierarchy
        }
    }

}

extension NameAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = NameAlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified name is already in use.
public struct NameAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NameAlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum OnFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case doNothing
        case rollback
        case sdkUnknown(Swift.String)

        public static var allCases: [OnFailure] {
            return [
                .delete,
                .doNothing,
                .rollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .doNothing: return "DO_NOTHING"
            case .rollback: return "ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnFailure(rawValue: rawValue) ?? OnFailure.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum OnStackFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case doNothing
        case rollback
        case sdkUnknown(Swift.String)

        public static var allCases: [OnStackFailure] {
            return [
                .delete,
                .doNothing,
                .rollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .doNothing: return "DO_NOTHING"
            case .rollback: return "ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnStackFailure(rawValue: rawValue) ?? OnStackFailure.sdkUnknown(rawValue)
        }
    }
}

extension OperationIdAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OperationIdAlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified operation ID already exists.
public struct OperationIdAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationIdAlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OperationInProgressException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OperationInProgressException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Another operation is currently in progress for this stack set. Only one operation can be performed for a stack set at a given time.
public struct OperationInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationInProgressException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension OperationNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OperationNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified ID refers to an operation that doesn't exist.
public struct OperationNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.OperationResultFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            try container.encode(values, forKey: ClientRuntime.Key("Values"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.OperationResultFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.OperationResultFilter()
            value.name = try reader["Name"].readIfPresent()
            value.values = try reader["Values"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The status that operation results are filtered by.
    public struct OperationResultFilter: Swift.Equatable {
        /// The type of filter to apply.
        public var name: CloudFormationClientTypes.OperationResultFilterName?
        /// The value to filter by.
        public var values: Swift.String?

        public init(
            name: CloudFormationClientTypes.OperationResultFilterName? = nil,
            values: Swift.String? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension CloudFormationClientTypes {
    public enum OperationResultFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case operationResultStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationResultFilterName] {
            return [
                .operationResultStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .operationResultStatus: return "OPERATION_RESULT_STATUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationResultFilterName(rawValue: rawValue) ?? OperationResultFilterName.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum OperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationStatus(rawValue: rawValue) ?? OperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension OperationStatusCheckFailedException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = OperationStatusCheckFailedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Error reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html). CloudFormation doesn't return this error to users.
public struct OperationStatusCheckFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConditionalCheckFailed" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum OrganizationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case disabledPermanently
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationStatus] {
            return [
                .disabled,
                .disabledPermanently,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .disabledPermanently: return "DISABLED_PERMANENTLY"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationStatus(rawValue: rawValue) ?? OrganizationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Output: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case exportName = "ExportName"
        case outputKey = "OutputKey"
        case outputValue = "OutputValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let outputKey = outputKey {
            try container.encode(outputKey, forKey: ClientRuntime.Key("OutputKey"))
        }
        if let outputValue = outputValue {
            try container.encode(outputValue, forKey: ClientRuntime.Key("OutputValue"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Output, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Output()
            value.outputKey = try reader["OutputKey"].readIfPresent()
            value.outputValue = try reader["OutputValue"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.exportName = try reader["ExportName"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Output data type.
    public struct Output: Swift.Equatable {
        /// User defined description associated with the output.
        public var description: Swift.String?
        /// The name of the export associated with the output.
        public var exportName: Swift.String?
        /// The key associated with the output.
        public var outputKey: Swift.String?
        /// The value associated with the output.
        public var outputValue: Swift.String?

        public init(
            description: Swift.String? = nil,
            exportName: Swift.String? = nil,
            outputKey: Swift.String? = nil,
            outputValue: Swift.String? = nil
        )
        {
            self.description = description
            self.exportName = exportName
            self.outputKey = outputKey
            self.outputValue = outputValue
        }
    }

}

extension CloudFormationClientTypes.Parameter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterKey = "ParameterKey"
        case parameterValue = "ParameterValue"
        case resolvedValue = "ResolvedValue"
        case usePreviousValue = "UsePreviousValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let resolvedValue = resolvedValue {
            try container.encode(resolvedValue, forKey: ClientRuntime.Key("ResolvedValue"))
        }
        if let usePreviousValue = usePreviousValue {
            try container.encode(usePreviousValue, forKey: ClientRuntime.Key("UsePreviousValue"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Parameter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Parameter()
            value.parameterKey = try reader["ParameterKey"].readIfPresent()
            value.parameterValue = try reader["ParameterValue"].readIfPresent()
            value.usePreviousValue = try reader["UsePreviousValue"].readIfPresent()
            value.resolvedValue = try reader["ResolvedValue"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Parameter data type.
    public struct Parameter: Swift.Equatable {
        /// The key associated with the parameter. If you don't specify a key and value for a particular parameter, CloudFormation uses the default value that's specified in your template.
        public var parameterKey: Swift.String?
        /// The input value associated with the parameter.
        public var parameterValue: Swift.String?
        /// Read-only. The value that corresponds to a SSM parameter key. This field is returned only for [ SSM](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-ssm-parameter-types) parameter types in the template.
        public var resolvedValue: Swift.String?
        /// During a stack update, use the existing parameter value that the stack is using for a given parameter key. If you specify true, do not specify a parameter value.
        public var usePreviousValue: Swift.Bool?

        public init(
            parameterKey: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            resolvedValue: Swift.String? = nil,
            usePreviousValue: Swift.Bool? = nil
        )
        {
            self.parameterKey = parameterKey
            self.parameterValue = parameterValue
            self.resolvedValue = resolvedValue
            self.usePreviousValue = usePreviousValue
        }
    }

}

extension CloudFormationClientTypes.ParameterConstraints: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            if !allowedValues.isEmpty {
                var allowedValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedValues"))
                for (index0, allowedvalue0) in allowedValues.enumerated() {
                    try allowedValuesContainer.encode(allowedvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var allowedValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedValues"))
                try allowedValuesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ParameterConstraints, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ParameterConstraints()
            value.allowedValues = try reader["AllowedValues"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A set of criteria that CloudFormation uses to validate parameter values. Although other constraints might be defined in the stack template, CloudFormation returns only the AllowedValues property.
    public struct ParameterConstraints: Swift.Equatable {
        /// A list of values that are permitted for a parameter.
        public var allowedValues: [Swift.String]?

        public init(
            allowedValues: [Swift.String]? = nil
        )
        {
            self.allowedValues = allowedValues
        }
    }

}

extension CloudFormationClientTypes.ParameterDeclaration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterConstraints = "ParameterConstraints"
        case parameterKey = "ParameterKey"
        case parameterType = "ParameterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterConstraints = parameterConstraints {
            try container.encode(parameterConstraints, forKey: ClientRuntime.Key("ParameterConstraints"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterType = parameterType {
            try container.encode(parameterType, forKey: ClientRuntime.Key("ParameterType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ParameterDeclaration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ParameterDeclaration()
            value.parameterKey = try reader["ParameterKey"].readIfPresent()
            value.defaultValue = try reader["DefaultValue"].readIfPresent()
            value.parameterType = try reader["ParameterType"].readIfPresent()
            value.noEcho = try reader["NoEcho"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.parameterConstraints = try reader["ParameterConstraints"].readIfPresent(readingClosure: CloudFormationClientTypes.ParameterConstraints.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The ParameterDeclaration data type.
    public struct ParameterDeclaration: Swift.Equatable {
        /// The default value of the parameter.
        public var defaultValue: Swift.String?
        /// The description that's associate with the parameter.
        public var description: Swift.String?
        /// Flag that indicates whether the parameter value is shown as plain text in logs and in the Amazon Web Services Management Console.
        public var noEcho: Swift.Bool?
        /// The criteria that CloudFormation uses to validate parameter values.
        public var parameterConstraints: CloudFormationClientTypes.ParameterConstraints?
        /// The name that's associated with the parameter.
        public var parameterKey: Swift.String?
        /// The type of parameter.
        public var parameterType: Swift.String?

        public init(
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterConstraints: CloudFormationClientTypes.ParameterConstraints? = nil,
            parameterKey: Swift.String? = nil,
            parameterType: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterConstraints = parameterConstraints
            self.parameterKey = parameterKey
            self.parameterType = parameterType
        }
    }

}

extension CloudFormationClientTypes {
    public enum PermissionModels: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case selfManaged
        case serviceManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionModels] {
            return [
                .selfManaged,
                .serviceManaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .selfManaged: return "SELF_MANAGED"
            case .serviceManaged: return "SERVICE_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PermissionModels(rawValue: rawValue) ?? PermissionModels.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Context information that enables CloudFormation to uniquely identify a resource. CloudFormation uses context key-value pairs in cases where a resource's logical and physical IDs aren't enough to uniquely identify that resource. Each context key-value pair specifies a resource that contains the targeted resource.
    public struct PhysicalResourceIdContextKeyValuePair: Swift.Equatable {
        /// The resource context key.
        /// This member is required.
        public var key: Swift.String?
        /// The resource context value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.PropertyDifference: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualValue = "ActualValue"
        case differenceType = "DifferenceType"
        case expectedValue = "ExpectedValue"
        case propertyPath = "PropertyPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualValue = actualValue {
            try container.encode(actualValue, forKey: ClientRuntime.Key("ActualValue"))
        }
        if let differenceType = differenceType {
            try container.encode(differenceType, forKey: ClientRuntime.Key("DifferenceType"))
        }
        if let expectedValue = expectedValue {
            try container.encode(expectedValue, forKey: ClientRuntime.Key("ExpectedValue"))
        }
        if let propertyPath = propertyPath {
            try container.encode(propertyPath, forKey: ClientRuntime.Key("PropertyPath"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.PropertyDifference, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.PropertyDifference()
            value.propertyPath = try reader["PropertyPath"].readIfPresent()
            value.expectedValue = try reader["ExpectedValue"].readIfPresent()
            value.actualValue = try reader["ActualValue"].readIfPresent()
            value.differenceType = try reader["DifferenceType"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Information about a resource property whose actual value differs from its expected value, as defined in the stack template and any values specified as template parameters. These will be present only for resources whose StackResourceDriftStatus is MODIFIED. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
    public struct PropertyDifference: Swift.Equatable {
        /// The actual property value of the resource property.
        /// This member is required.
        public var actualValue: Swift.String?
        /// The type of property difference.
        ///
        /// * ADD: A value has been added to a resource property that's an array or list data type.
        ///
        /// * REMOVE: The property has been removed from the current resource configuration.
        ///
        /// * NOT_EQUAL: The current property value differs from its expected value (as defined in the stack template and any values specified as template parameters).
        /// This member is required.
        public var differenceType: CloudFormationClientTypes.DifferenceType?
        /// The expected property value of the resource property, as defined in the stack template and any values specified as template parameters.
        /// This member is required.
        public var expectedValue: Swift.String?
        /// The fully-qualified path to the resource property.
        /// This member is required.
        public var propertyPath: Swift.String?

        public init(
            actualValue: Swift.String? = nil,
            differenceType: CloudFormationClientTypes.DifferenceType? = nil,
            expectedValue: Swift.String? = nil,
            propertyPath: Swift.String? = nil
        )
        {
            self.actualValue = actualValue
            self.differenceType = differenceType
            self.expectedValue = expectedValue
            self.propertyPath = propertyPath
        }
    }

}

extension CloudFormationClientTypes {
    public enum ProvisioningType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyMutable
        case immutable
        case nonProvisionable
        case sdkUnknown(Swift.String)

        public static var allCases: [ProvisioningType] {
            return [
                .fullyMutable,
                .immutable,
                .nonProvisionable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyMutable: return "FULLY_MUTABLE"
            case .immutable: return "IMMUTABLE"
            case .nonProvisionable: return "NON_PROVISIONABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProvisioningType(rawValue: rawValue) ?? ProvisioningType.sdkUnknown(rawValue)
        }
    }
}

extension PublishTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case publicVersionNumber = "PublicVersionNumber"
        case type = "Type"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("PublishType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension PublishTypeInput {

    static func urlPathProvider(_ value: PublishTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct PublishTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The version number to assign to this version of the extension. Use the following format, and adhere to semantic versioning when assigning a version number to your extension: MAJOR.MINOR.PATCH For more information, see [Semantic Versioning 2.0.0](https://semver.org/). If you don't specify a version number, CloudFormation increments the version number by one minor version release. You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be 1.0.0.
    public var publicVersionNumber: Swift.String?
    /// The type of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var typeName: Swift.String?

    public init(
        arn: Swift.String? = nil,
        publicVersionNumber: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.publicVersionNumber = publicVersionNumber
        self.type = type
        self.typeName = typeName
    }
}

extension PublishTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<PublishTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["PublishTypeResult"]
            var value = PublishTypeOutput()
            value.publicTypeArn = try reader["PublicTypeArn"].readIfPresent()
            return value
        }
    }
}

public struct PublishTypeOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) assigned to the public extension upon publication.
    public var publicTypeArn: Swift.String?

    public init(
        publicTypeArn: Swift.String? = nil
    )
    {
        self.publicTypeArn = publicTypeArn
    }
}

enum PublishTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum PublisherStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case unverified
        case verified
        case sdkUnknown(Swift.String)

        public static var allCases: [PublisherStatus] {
            return [
                .unverified,
                .verified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .unverified: return "UNVERIFIED"
            case .verified: return "VERIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PublisherStatus(rawValue: rawValue) ?? PublisherStatus.sdkUnknown(rawValue)
        }
    }
}

extension RecordHandlerProgressInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bearerToken = "BearerToken"
        case clientRequestToken = "ClientRequestToken"
        case currentOperationStatus = "CurrentOperationStatus"
        case errorCode = "ErrorCode"
        case operationStatus = "OperationStatus"
        case resourceModel = "ResourceModel"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bearerToken = bearerToken {
            try container.encode(bearerToken, forKey: ClientRuntime.Key("BearerToken"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let currentOperationStatus = currentOperationStatus {
            try container.encode(currentOperationStatus, forKey: ClientRuntime.Key("CurrentOperationStatus"))
        }
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let operationStatus = operationStatus {
            try container.encode(operationStatus, forKey: ClientRuntime.Key("OperationStatus"))
        }
        if let resourceModel = resourceModel {
            try container.encode(resourceModel, forKey: ClientRuntime.Key("ResourceModel"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        try container.encode("RecordHandlerProgress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RecordHandlerProgressInput {

    static func urlPathProvider(_ value: RecordHandlerProgressInput) -> Swift.String? {
        return "/"
    }
}

public struct RecordHandlerProgressInput: Swift.Equatable {
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    /// This member is required.
    public var bearerToken: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var clientRequestToken: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var currentOperationStatus: CloudFormationClientTypes.OperationStatus?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var errorCode: CloudFormationClientTypes.HandlerErrorCode?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    /// This member is required.
    public var operationStatus: CloudFormationClientTypes.OperationStatus?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var resourceModel: Swift.String?
    /// Reserved for use by the [CloudFormation CLI](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html).
    public var statusMessage: Swift.String?

    public init(
        bearerToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        currentOperationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        errorCode: CloudFormationClientTypes.HandlerErrorCode? = nil,
        operationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        resourceModel: Swift.String? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.bearerToken = bearerToken
        self.clientRequestToken = clientRequestToken
        self.currentOperationStatus = currentOperationStatus
        self.errorCode = errorCode
        self.operationStatus = operationStatus
        self.resourceModel = resourceModel
        self.statusMessage = statusMessage
    }
}

extension RecordHandlerProgressOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RecordHandlerProgressOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return RecordHandlerProgressOutput()
        }
    }
}

public struct RecordHandlerProgressOutput: Swift.Equatable {

    public init() { }
}

enum RecordHandlerProgressOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidStateTransition": return try await InvalidStateTransitionException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ConditionalCheckFailed": return try await OperationStatusCheckFailedException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum RegionConcurrencyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case parallel
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionConcurrencyType] {
            return [
                .parallel,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .parallel: return "PARALLEL"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionConcurrencyType(rawValue: rawValue) ?? RegionConcurrencyType.sdkUnknown(rawValue)
        }
    }
}

extension RegisterPublisherInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptTermsAndConditions = "AcceptTermsAndConditions"
        case connectionArn = "ConnectionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let acceptTermsAndConditions = acceptTermsAndConditions {
            try container.encode(acceptTermsAndConditions, forKey: ClientRuntime.Key("AcceptTermsAndConditions"))
        }
        if let connectionArn = connectionArn {
            try container.encode(connectionArn, forKey: ClientRuntime.Key("ConnectionArn"))
        }
        try container.encode("RegisterPublisher", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterPublisherInput {

    static func urlPathProvider(_ value: RegisterPublisherInput) -> Swift.String? {
        return "/"
    }
}

public struct RegisterPublisherInput: Swift.Equatable {
    /// Whether you accept the [Terms and Conditions](https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf) for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry. The default is false.
    public var acceptTermsAndConditions: Swift.Bool?
    /// If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account. For more information, see [Registering your account to publish CloudFormation extensions](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs) in the CloudFormation CLI User Guide.
    public var connectionArn: Swift.String?

    public init(
        acceptTermsAndConditions: Swift.Bool? = nil,
        connectionArn: Swift.String? = nil
    )
    {
        self.acceptTermsAndConditions = acceptTermsAndConditions
        self.connectionArn = connectionArn
    }
}

extension RegisterPublisherOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RegisterPublisherOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RegisterPublisherResult"]
            var value = RegisterPublisherOutput()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            return value
        }
    }
}

public struct RegisterPublisherOutput: Swift.Equatable {
    /// The ID assigned this account by CloudFormation for publishing extensions.
    public var publisherId: Swift.String?

    public init(
        publisherId: Swift.String? = nil
    )
    {
        self.publisherId = publisherId
    }
}

enum RegisterPublisherOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension RegisterTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfig = "LoggingConfig"
        case schemaHandlerPackage = "SchemaHandlerPackage"
        case type = "Type"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let schemaHandlerPackage = schemaHandlerPackage {
            try container.encode(schemaHandlerPackage, forKey: ClientRuntime.Key("SchemaHandlerPackage"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("RegisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RegisterTypeInput {

    static func urlPathProvider(_ value: RegisterTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct RegisterTypeInput: Swift.Equatable {
    /// A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension. For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principal (resources.cloudformation.amazonaws.com). For more information about adding trust relationships, see [Modifying a role trust policy](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-managingrole-editing-console.html#roles-managingrole_edit-trust-policy) in the Identity and Access Management User Guide. If your extension calls Amazon Web Services APIs in any of its handlers, you must create an [IAM execution role](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.
    public var executionRoleArn: Swift.String?
    /// Specifies logging configuration information for an extension.
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. For information about generating a schema handler package for the extension you want to register, see [submit](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html) in the CloudFormation CLI User Guide. The user registering the extension must be able to access the package in the S3 bucket. That's, the user needs to have [GetObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html) permissions for the schema handler package. For more information, see [Actions, Resources, and Condition Keys for Amazon S3](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html) in the Identity and Access Management User Guide.
    /// This member is required.
    public var schemaHandlerPackage: Swift.String?
    /// The kind of extension.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension being registered. We suggest that extension names adhere to the following patterns:
    ///
    /// * For resource types, company_or_organization::service::type.
    ///
    /// * For modules, company_or_organization::service::type::MODULE.
    ///
    /// * For hooks, MyCompany::Testing::MyTestHook.
    ///
    ///
    /// The following organization namespaces are reserved and can't be used in your extension names:
    ///
    /// * Alexa
    ///
    /// * AMZN
    ///
    /// * Amazon
    ///
    /// * AWS
    ///
    /// * Custom
    ///
    /// * Dev
    /// This member is required.
    public var typeName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        schemaHandlerPackage: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.schemaHandlerPackage = schemaHandlerPackage
        self.type = type
        self.typeName = typeName
    }
}

extension RegisterTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RegisterTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RegisterTypeResult"]
            var value = RegisterTypeOutput()
            value.registrationToken = try reader["RegistrationToken"].readIfPresent()
            return value
        }
    }
}

public struct RegisterTypeOutput: Swift.Equatable {
    /// The identifier for this registration request. Use this registration token when calling [DescribeTypeRegistration], which returns information about the status and IDs of the extension registration.
    public var registrationToken: Swift.String?

    public init(
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

enum RegisterTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum RegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum RegistryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hook
        case module
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistryType] {
            return [
                .hook,
                .module,
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hook: return "HOOK"
            case .module: return "MODULE"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistryType(rawValue: rawValue) ?? RegistryType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Replacement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conditional
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [Replacement] {
            return [
                .conditional,
                .false,
                .true,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conditional: return "Conditional"
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Replacement(rawValue: rawValue) ?? Replacement.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.RequiredActivatedType: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originalTypeName = "OriginalTypeName"
        case publisherId = "PublisherId"
        case supportedMajorVersions = "SupportedMajorVersions"
        case typeNameAlias = "TypeNameAlias"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalTypeName = originalTypeName {
            try container.encode(originalTypeName, forKey: ClientRuntime.Key("OriginalTypeName"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let supportedMajorVersions = supportedMajorVersions {
            if !supportedMajorVersions.isEmpty {
                var supportedMajorVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedMajorVersions"))
                for (index0, supportedmajorversion0) in supportedMajorVersions.enumerated() {
                    try supportedMajorVersionsContainer.encode(supportedmajorversion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var supportedMajorVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedMajorVersions"))
                try supportedMajorVersionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.RequiredActivatedType, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.RequiredActivatedType()
            value.typeNameAlias = try reader["TypeNameAlias"].readIfPresent()
            value.originalTypeName = try reader["OriginalTypeName"].readIfPresent()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            value.supportedMajorVersions = try reader["SupportedMajorVersions"].readListIfPresent(memberReadingClosure: Swift.Int.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// For extensions that are modules, a public third-party extension that must be activated in your account in order for the module itself to be activated. For more information, see [Activating public modules for use in your account](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/modules.html#module-enabling) in the CloudFormation User Guide.
    public struct RequiredActivatedType: Swift.Equatable {
        /// The type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
        public var originalTypeName: Swift.String?
        /// The publisher ID of the extension publisher.
        public var publisherId: Swift.String?
        /// A list of the major versions of the extension type that the macro supports.
        public var supportedMajorVersions: [Swift.Int]?
        /// An alias assigned to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.
        public var typeNameAlias: Swift.String?

        public init(
            originalTypeName: Swift.String? = nil,
            publisherId: Swift.String? = nil,
            supportedMajorVersions: [Swift.Int]? = nil,
            typeNameAlias: Swift.String? = nil
        )
        {
            self.originalTypeName = originalTypeName
            self.publisherId = publisherId
            self.supportedMajorVersions = supportedMajorVersions
            self.typeNameAlias = typeNameAlias
        }
    }

}

extension CloudFormationClientTypes {
    public enum RequiresRecreation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case conditionally
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [RequiresRecreation] {
            return [
                .always,
                .conditionally,
                .never,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "Always"
            case .conditionally: return "Conditionally"
            case .never: return "Never"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequiresRecreation(rawValue: rawValue) ?? RequiresRecreation.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationpolicy
        case deletionpolicy
        case metadata
        case properties
        case tags
        case updatepolicy
        case updatereplacepolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceAttribute] {
            return [
                .creationpolicy,
                .deletionpolicy,
                .metadata,
                .properties,
                .tags,
                .updatepolicy,
                .updatereplacepolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationpolicy: return "CreationPolicy"
            case .deletionpolicy: return "DeletionPolicy"
            case .metadata: return "Metadata"
            case .properties: return "Properties"
            case .tags: return "Tags"
            case .updatepolicy: return "UpdatePolicy"
            case .updatereplacepolicy: return "UpdateReplacePolicy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceAttribute(rawValue: rawValue) ?? ResourceAttribute.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceChange: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case changeSetId = "ChangeSetId"
        case details = "Details"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case replacement = "Replacement"
        case resourceType = "ResourceType"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let details = details {
            if !details.isEmpty {
                var detailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Details"))
                for (index0, resourcechangedetail0) in details.enumerated() {
                    try detailsContainer.encode(resourcechangedetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var detailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Details"))
                try detailsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let replacement = replacement {
            try container.encode(replacement, forKey: ClientRuntime.Key("Replacement"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let scope = scope {
            if !scope.isEmpty {
                var scopeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Scope"))
                for (index0, resourceattribute0) in scope.enumerated() {
                    try scopeContainer.encode(resourceattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var scopeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Scope"))
                try scopeContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceChange, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceChange()
            value.action = try reader["Action"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.replacement = try reader["Replacement"].readIfPresent()
            value.scope = try reader["Scope"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ResourceAttribute.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.details = try reader["Details"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.ResourceChangeDetail.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.changeSetId = try reader["ChangeSetId"].readIfPresent()
            value.moduleInfo = try reader["ModuleInfo"].readIfPresent(readingClosure: CloudFormationClientTypes.ModuleInfo.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The ResourceChange structure describes the resource and the action that CloudFormation will perform on it if you execute this change set.
    public struct ResourceChange: Swift.Equatable {
        /// The action that CloudFormation takes on the resource, such as Add (adds a new resource), Modify (changes a resource), Remove (deletes a resource), Import (imports a resource), or Dynamic (exact action for the resource can't be determined).
        public var action: CloudFormationClientTypes.ChangeAction?
        /// The change set ID of the nested change set.
        public var changeSetId: Swift.String?
        /// For the Modify action, a list of ResourceChangeDetail structures that describes the changes that CloudFormation will make to the resource.
        public var details: [CloudFormationClientTypes.ResourceChangeDetail]?
        /// The resource's logical ID, which is defined in the stack's template.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The resource's physical ID (resource name). Resources that you are adding don't have physical IDs because they haven't been created.
        public var physicalResourceId: Swift.String?
        /// For the Modify action, indicates whether CloudFormation will replace the resource by creating a new one and deleting the old one. This value depends on the value of the RequiresRecreation property in the ResourceTargetDefinition structure. For example, if the RequiresRecreation field is Always and the Evaluation field is Static, Replacement is True. If the RequiresRecreation field is Always and the Evaluation field is Dynamic, Replacement is Conditionally. If you have multiple changes with different RequiresRecreation values, the Replacement value depends on the change with the most impact. A RequiresRecreation value of Always has the most impact, followed by Conditionally, and then Never.
        public var replacement: CloudFormationClientTypes.Replacement?
        /// The type of CloudFormation resource, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?
        /// For the Modify action, indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var scope: [CloudFormationClientTypes.ResourceAttribute]?

        public init(
            action: CloudFormationClientTypes.ChangeAction? = nil,
            changeSetId: Swift.String? = nil,
            details: [CloudFormationClientTypes.ResourceChangeDetail]? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            replacement: CloudFormationClientTypes.Replacement? = nil,
            resourceType: Swift.String? = nil,
            scope: [CloudFormationClientTypes.ResourceAttribute]? = nil
        )
        {
            self.action = action
            self.changeSetId = changeSetId
            self.details = details
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.replacement = replacement
            self.resourceType = resourceType
            self.scope = scope
        }
    }

}

extension CloudFormationClientTypes.ResourceChangeDetail: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case causingEntity = "CausingEntity"
        case changeSource = "ChangeSource"
        case evaluation = "Evaluation"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let causingEntity = causingEntity {
            try container.encode(causingEntity, forKey: ClientRuntime.Key("CausingEntity"))
        }
        if let changeSource = changeSource {
            try container.encode(changeSource, forKey: ClientRuntime.Key("ChangeSource"))
        }
        if let evaluation = evaluation {
            try container.encode(evaluation, forKey: ClientRuntime.Key("Evaluation"))
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceChangeDetail, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceChangeDetail()
            value.target = try reader["Target"].readIfPresent(readingClosure: CloudFormationClientTypes.ResourceTargetDefinition.readingClosure)
            value.evaluation = try reader["Evaluation"].readIfPresent()
            value.changeSource = try reader["ChangeSource"].readIfPresent()
            value.causingEntity = try reader["CausingEntity"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// For a resource with Modify as the action, the ResourceChange structure describes the changes CloudFormation will make to that resource.
    public struct ResourceChangeDetail: Swift.Equatable {
        /// The identity of the entity that triggered this change. This entity is a member of the group that's specified by the ChangeSource field. For example, if you modified the value of the KeyPairName parameter, the CausingEntity is the name of the parameter (KeyPairName). If the ChangeSource value is DirectModification, no value is given for CausingEntity.
        public var causingEntity: Swift.String?
        /// The group to which the CausingEntity value belongs. There are five entity groups:
        ///
        /// * ResourceReference entities are Ref intrinsic functions that refer to resources in the template, such as { "Ref" : "MyEC2InstanceResource" }.
        ///
        /// * ParameterReference entities are Ref intrinsic functions that get template parameter values, such as { "Ref" : "MyPasswordParameter" }.
        ///
        /// * ResourceAttribute entities are Fn::GetAtt intrinsic functions that get resource attribute values, such as { "Fn::GetAtt" : [ "MyEC2InstanceResource", "PublicDnsName" ] }.
        ///
        /// * DirectModification entities are changes that are made directly to the template.
        ///
        /// * Automatic entities are AWS::CloudFormation::Stack resource types, which are also known as nested stacks. If you made no changes to the AWS::CloudFormation::Stack resource, CloudFormation sets the ChangeSource to Automatic because the nested stack's template might have changed. Changes to a nested stack's template aren't visible to CloudFormation until you run an update on the parent stack.
        public var changeSource: CloudFormationClientTypes.ChangeSource?
        /// Indicates whether CloudFormation can determine the target value, and whether the target value will change before you execute a change set. For Static evaluations, CloudFormation can determine that the target value will change, and its value. For example, if you directly modify the InstanceType property of an EC2 instance, CloudFormation knows that this property value will change, and its value, so this is a Static evaluation. For Dynamic evaluations, can't determine the target value because it depends on the result of an intrinsic function, such as a Ref or Fn::GetAtt intrinsic function, when the stack is updated. For example, if your template includes a reference to a resource that's conditionally recreated, the value of the reference (the physical ID of the resource) might change, depending on if the resource is recreated. If the resource is recreated, it will have a new physical ID, so all references to that resource will also be updated.
        public var evaluation: CloudFormationClientTypes.EvaluationType?
        /// A ResourceTargetDefinition structure that describes the field that CloudFormation will change and whether the resource will be recreated.
        public var target: CloudFormationClientTypes.ResourceTargetDefinition?

        public init(
            causingEntity: Swift.String? = nil,
            changeSource: CloudFormationClientTypes.ChangeSource? = nil,
            evaluation: CloudFormationClientTypes.EvaluationType? = nil,
            target: CloudFormationClientTypes.ResourceTargetDefinition? = nil
        )
        {
            self.causingEntity = causingEntity
            self.changeSource = changeSource
            self.evaluation = evaluation
            self.target = target
        }
    }

}

extension CloudFormationClientTypes.ResourceDefinition: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceDefinition, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceDefinition()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A resource included in a generated template. This data type is used with the CreateGeneratedTemplate and UpdateGeneratedTemplate API actions.
    public struct ResourceDefinition: Swift.Equatable {
        /// The logical resource id for this resource in the generated template.
        public var logicalResourceId: Swift.String?
        /// A list of up to 256 key-value pairs that identifies the scanned resource. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the primaryIdentifier list in the resource schema.) The value is the value of that primary identifier. For example, for a AWS::DynamoDB::Table resource, the primary identifiers is TableName so the key-value pair could be "TableName": "MyDDBTable". For more information, see [primaryIdentifier](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier) in the CloudFormation Command Line Interface User guide for extension development.
        /// This member is required.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// The type of the resource, such as AWS::DynamoDB::Table. For the list of supported resources, see [IaC generator supported resource types](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/generate-IaC-supported-resources.html) in the CloudFormation User Guide
        /// This member is required.
        public var resourceType: Swift.String?

        public init(
            logicalResourceId: Swift.String? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.ResourceDetail: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case warnings = "Warnings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let warnings = warnings {
            if !warnings.isEmpty {
                var warningsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Warnings"))
                for (index0, warningdetail0) in warnings.enumerated() {
                    try warningsContainer.encode(warningdetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var warningsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Warnings"))
                try warningsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceDetail, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceDetail()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.resourceStatus = try reader["ResourceStatus"].readIfPresent()
            value.resourceStatusReason = try reader["ResourceStatusReason"].readIfPresent()
            value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.WarningDetail.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Details about a resource in a generated template
    public struct ResourceDetail: Swift.Equatable {
        /// The logical id for this resource in the final generated template.
        public var logicalResourceId: Swift.String?
        /// A list of up to 256 key-value pairs that identifies the resource in the generated template. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the primaryIdentifier list in the resource schema.) The value is the value of that primary identifier. For example, for a AWS::DynamoDB::Table resource, the primary identifiers is TableName so the key-value pair could be "TableName": "MyDDBTable". For more information, see [primaryIdentifier](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier) in the CloudFormation Command Line Interface User guide for extension development.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// Status of the processing of a resource in a generated template. InProgress The resource processing is still in progress. Complete The resource processing is complete. Pending The resource processing is pending. Failed The resource processing has failed.
        public var resourceStatus: CloudFormationClientTypes.GeneratedTemplateResourceStatus?
        /// The reason for the resource detail, providing more information if a failure happened.
        public var resourceStatusReason: Swift.String?
        /// The type of the resource, such as AWS::DynamoDB::Table. For the list of supported resources, see [IaC generator supported resource types](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/generate-IaC-supported-resources.html) In the CloudFormation User Guide
        public var resourceType: Swift.String?
        /// The warnings generated for this resource.
        public var warnings: [CloudFormationClientTypes.WarningDetail]?

        public init(
            logicalResourceId: Swift.String? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceStatus: CloudFormationClientTypes.GeneratedTemplateResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            warnings: [CloudFormationClientTypes.WarningDetail]? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceIdentifier = resourceIdentifier
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.warnings = warnings
        }
    }

}

extension CloudFormationClientTypes.ResourceIdentifierSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case resourceIdentifiers = "ResourceIdentifiers"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            if !logicalResourceIds.isEmpty {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                    try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
                try logicalResourceIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceIdentifiers = resourceIdentifiers {
            if !resourceIdentifiers.isEmpty {
                var resourceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifiers"))
                for (index0, resourceidentifierpropertykey0) in resourceIdentifiers.enumerated() {
                    try resourceIdentifiersContainer.encode(resourceidentifierpropertykey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifiers"))
                try resourceIdentifiersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceIdentifierSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceIdentifierSummary()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.logicalResourceIds = try reader["LogicalResourceIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourceIdentifiers = try reader["ResourceIdentifiers"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Describes the target resources of a specific type in your import template (for example, all AWS::S3::Bucket resources) and the properties you can provide during the import to identify resources of that type.
    public struct ResourceIdentifierSummary: Swift.Equatable {
        /// The logical IDs of the target resources of the specified ResourceType, as defined in the import template.
        public var logicalResourceIds: [Swift.String]?
        /// The resource properties you can provide during the import to identify your target resources. For example, BucketName is a possible identifier property for AWS::S3::Bucket resources.
        public var resourceIdentifiers: [Swift.String]?
        /// The template resource type of the target resources, such as AWS::S3::Bucket.
        public var resourceType: Swift.String?

        public init(
            logicalResourceIds: [Swift.String]? = nil,
            resourceIdentifiers: [Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceIds = logicalResourceIds
            self.resourceIdentifiers = resourceIdentifiers
            self.resourceType = resourceType
        }
    }

}

extension ResourceScanInProgressException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceScanInProgressException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A resource scan is currently in progress. Only one can be run at a time for an account in a Region.
public struct ResourceScanInProgressException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceScanInProgress" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceScanLimitExceededException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceScanLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The limit on resource scans has been exceeded. Reasons include:
///
/// * Exceeded the daily quota for resource scans.
///
/// * A resource scan recently failed. You must wait 10 minutes before starting a new resource scan.
///
/// * The last resource scan failed after exceeding 100,000 resources. When this happens, you must wait 24 hours before starting a new resource scan.
public struct ResourceScanLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceScanLimitExceeded" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ResourceScanNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = ResourceScanNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The resource scan was not found.
public struct ResourceScanNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceScanNotFound" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes {
    public enum ResourceScanStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case expired
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceScanStatus] {
            return [
                .complete,
                .expired,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceScanStatus(rawValue: rawValue) ?? ResourceScanStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceScanSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case percentageCompleted = "PercentageCompleted"
        case resourceScanId = "ResourceScanId"
        case startTime = "StartTime"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let endTime = endTime {
            try container.encodeTimestamp(endTime, format: .dateTime, forKey: ClientRuntime.Key("EndTime"))
        }
        if let percentageCompleted = percentageCompleted {
            try container.encode(percentageCompleted, forKey: ClientRuntime.Key("PercentageCompleted"))
        }
        if let resourceScanId = resourceScanId {
            try container.encode(resourceScanId, forKey: ClientRuntime.Key("ResourceScanId"))
        }
        if let startTime = startTime {
            try container.encodeTimestamp(startTime, format: .dateTime, forKey: ClientRuntime.Key("StartTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceScanSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceScanSummary()
            value.resourceScanId = try reader["ResourceScanId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.startTime = try reader["StartTime"].readTimestampIfPresent(format: .dateTime)
            value.endTime = try reader["EndTime"].readTimestampIfPresent(format: .dateTime)
            value.percentageCompleted = try reader["PercentageCompleted"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A summary of the resource scan. This is returned by the ListResourceScan API action.
    public struct ResourceScanSummary: Swift.Equatable {
        /// The time that the resource scan was finished.
        public var endTime: ClientRuntime.Date?
        /// The percentage of the resource scan that has been completed.
        public var percentageCompleted: Swift.Double?
        /// The Amazon Resource Name (ARN) of the resource scan.
        public var resourceScanId: Swift.String?
        /// The time that the resource scan was started.
        public var startTime: ClientRuntime.Date?
        /// Status of the resource scan. INPROGRESS The resource scan is still in progress. COMPLETE The resource scan is complete. EXPIRED The resource scan has expired. FAILED The resource scan has failed.
        public var status: CloudFormationClientTypes.ResourceScanStatus?
        /// The reason for the resource scan status, providing more information if a failure happened.
        public var statusReason: Swift.String?

        public init(
            endTime: ClientRuntime.Date? = nil,
            percentageCompleted: Swift.Double? = nil,
            resourceScanId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: CloudFormationClientTypes.ResourceScanStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.percentageCompleted = percentageCompleted
            self.resourceScanId = resourceScanId
            self.startTime = startTime
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum ResourceSignalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceSignalStatus] {
            return [
                .failure,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "FAILURE"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceSignalStatus(rawValue: rawValue) ?? ResourceSignalStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deleteSkipped
        case importComplete
        case importFailed
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case rollbackComplete
        case rollbackFailed
        case rollbackInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case updateRollbackComplete
        case updateRollbackFailed
        case updateRollbackInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deleteSkipped,
                .importComplete,
                .importFailed,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .rollbackComplete,
                .rollbackFailed,
                .rollbackInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress,
                .updateRollbackComplete,
                .updateRollbackFailed,
                .updateRollbackInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSkipped: return "DELETE_SKIPPED"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importFailed: return "IMPORT_FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateRollbackComplete: return "UPDATE_ROLLBACK_COMPLETE"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updateRollbackInProgress: return "UPDATE_ROLLBACK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceStatus(rawValue: rawValue) ?? ResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceTargetDefinition: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case name = "Name"
        case requiresRecreation = "RequiresRecreation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let requiresRecreation = requiresRecreation {
            try container.encode(requiresRecreation, forKey: ClientRuntime.Key("RequiresRecreation"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceTargetDefinition, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceTargetDefinition()
            value.attribute = try reader["Attribute"].readIfPresent()
            value.name = try reader["Name"].readIfPresent()
            value.requiresRecreation = try reader["RequiresRecreation"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The field that CloudFormation will change, such as the name of a resource's property, and whether the resource will be recreated.
    public struct ResourceTargetDefinition: Swift.Equatable {
        /// Indicates which resource attribute is triggering this update, such as a change in the resource attribute's Metadata, Properties, or Tags.
        public var attribute: CloudFormationClientTypes.ResourceAttribute?
        /// If the Attribute value is Properties, the name of the property. For all other attributes, the value is null.
        public var name: Swift.String?
        /// If the Attribute value is Properties, indicates whether a change to this property causes the resource to be recreated. The value can be Never, Always, or Conditionally. To determine the conditions for a Conditionally recreation, see the update behavior for that [property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        public var requiresRecreation: CloudFormationClientTypes.RequiresRecreation?

        public init(
            attribute: CloudFormationClientTypes.ResourceAttribute? = nil,
            name: Swift.String? = nil,
            requiresRecreation: CloudFormationClientTypes.RequiresRecreation? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.requiresRecreation = requiresRecreation
        }
    }

}

extension CloudFormationClientTypes.ResourceToImport: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ResourceToImport, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ResourceToImport()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Describes the target resource of an import operation.
    public struct ResourceToImport: Swift.Equatable {
        /// The logical ID of the target resource as specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// A key-value pair that identifies the target resource. The key is an identifier property (for example, BucketName for AWS::S3::Bucket resources) and the value is the actual property value (for example, MyS3Bucket).
        /// This member is required.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// The type of resource to import into your stack, such as AWS::S3::Bucket. For a list of supported resource types, see [Resources that support import operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?

        public init(
            logicalResourceId: Swift.String? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.RollbackConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringTimeInMinutes = "MonitoringTimeInMinutes"
        case rollbackTriggers = "RollbackTriggers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let monitoringTimeInMinutes = monitoringTimeInMinutes {
            try container.encode(monitoringTimeInMinutes, forKey: ClientRuntime.Key("MonitoringTimeInMinutes"))
        }
        if let rollbackTriggers = rollbackTriggers {
            if !rollbackTriggers.isEmpty {
                var rollbackTriggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RollbackTriggers"))
                for (index0, rollbacktrigger0) in rollbackTriggers.enumerated() {
                    try rollbackTriggersContainer.encode(rollbacktrigger0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var rollbackTriggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RollbackTriggers"))
                try rollbackTriggersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.RollbackConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.RollbackConfiguration()
            value.rollbackTriggers = try reader["RollbackTriggers"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.RollbackTrigger.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.monitoringTimeInMinutes = try reader["MonitoringTimeInMinutes"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Structure containing the rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. Rollback triggers enable you to have CloudFormation monitor the state of your application during stack creation and updating, and to roll back that operation if the application breaches the threshold of any of the alarms you've specified. For more information, see [Monitor and Roll Back Stack Operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-rollback-triggers.html).
    public struct RollbackConfiguration: Swift.Equatable {
        /// The amount of time, in minutes, during which CloudFormation should monitor all the rollback triggers after the stack creation or update operation deploys all necessary resources. The default is 0 minutes. If you specify a monitoring period but don't specify any rollback triggers, CloudFormation still waits the specified period of time before cleaning up old resources after update operations. You can use this monitoring period to perform any manual stack validation desired, and manually cancel the stack creation or update (using [CancelUpdateStack](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html), for example) as necessary. If you specify 0 for this parameter, CloudFormation still monitors the specified rollback triggers during stack creation and update operations. Then, for update operations, it begins disposing of old resources immediately once the operation completes.
        public var monitoringTimeInMinutes: Swift.Int?
        /// The triggers to monitor during stack creation or update actions. By default, CloudFormation saves the rollback triggers specified for a stack and applies them to any subsequent update operations for the stack, unless you specify otherwise. If you do specify rollback triggers for this parameter, those triggers replace any list of triggers previously specified for the stack. This means:
        ///
        /// * To use the rollback triggers previously specified for this stack, if any, don't specify this parameter.
        ///
        /// * To specify new or updated rollback triggers, you must specify all the triggers that you want used for this stack, even triggers you've specified before (for example, when creating the stack or during a previous stack update). Any triggers that you don't include in the updated list of triggers are no longer applied to the stack.
        ///
        /// * To remove all currently specified triggers, specify an empty list for this parameter.
        ///
        ///
        /// If a specified trigger is missing, the entire stack operation fails and is rolled back.
        public var rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]?

        public init(
            monitoringTimeInMinutes: Swift.Int? = nil,
            rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]? = nil
        )
        {
            self.monitoringTimeInMinutes = monitoringTimeInMinutes
            self.rollbackTriggers = rollbackTriggers
        }
    }

}

extension RollbackStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case retainExceptOnCreate = "RetainExceptOnCreate"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let retainExceptOnCreate = retainExceptOnCreate {
            try container.encode(retainExceptOnCreate, forKey: ClientRuntime.Key("RetainExceptOnCreate"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("RollbackStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension RollbackStackInput {

    static func urlPathProvider(_ value: RollbackStackInput) -> Swift.String? {
        return "/"
    }
}

public struct RollbackStackInput: Swift.Equatable {
    /// A unique identifier for this RollbackStack request.
    public var clientRequestToken: Swift.String?
    /// When set to true, newly created resources are deleted when the operation rolls back. This includes newly created resources marked with a deletion policy of Retain. Default: false
    public var retainExceptOnCreate: Swift.Bool?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack.
    public var roleARN: Swift.String?
    /// The name that's associated with the stack.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        retainExceptOnCreate: Swift.Bool? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.retainExceptOnCreate = retainExceptOnCreate
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

extension RollbackStackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<RollbackStackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["RollbackStackResult"]
            var value = RollbackStackOutput()
            value.stackId = try reader["StackId"].readIfPresent()
            return value
        }
    }
}

public struct RollbackStackOutput: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init(
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

enum RollbackStackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes.RollbackTrigger: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.RollbackTrigger, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.RollbackTrigger()
            value.arn = try reader["Arn"].readIfPresent()
            value.type = try reader["Type"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A rollback trigger CloudFormation monitors during creation and updating of stacks. If any of the alarms you specify goes to ALARM state during the stack operation or within the specified monitoring period afterwards, CloudFormation rolls back the entire stack operation.
    public struct RollbackTrigger: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the rollback trigger. If a specified trigger is missing, the entire stack operation fails and is rolled back.
        /// This member is required.
        public var arn: Swift.String?
        /// The resource type of the rollback trigger. Specify either [AWS::CloudWatch::Alarm](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html) or [AWS::CloudWatch::CompositeAlarm](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html) resource types.
        /// This member is required.
        public var type: Swift.String?

        public init(
            arn: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.type = type
        }
    }

}

extension CloudFormationClientTypes.ScannedResource: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedByStack = "ManagedByStack"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let managedByStack = managedByStack {
            try container.encode(managedByStack, forKey: ClientRuntime.Key("ManagedByStack"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let jazzresourceidentifierpropertykeyKey0 = element0.key
                let jazzresourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(jazzresourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(jazzresourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ScannedResource, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ScannedResource()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            value.managedByStack = try reader["ManagedByStack"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A scanned resource returned by ListResourceScanResources or ListResourceScanRelatedResources.
    public struct ScannedResource: Swift.Equatable {
        /// If true, the resource is managed by a CloudFormation stack.
        public var managedByStack: Swift.Bool?
        /// A list of up to 256 key-value pairs that identifies for the scanned resource. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the primaryIdentifier list in the resource schema.) The value is the value of that primary identifier. For example, for a AWS::DynamoDB::Table resource, the primary identifiers is TableName so the key-value pair could be "TableName": "MyDDBTable". For more information, see [primaryIdentifier](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier) in the CloudFormation Command Line Interface User guide for extension development.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// The type of the resource, such as AWS::DynamoDB::Table. For the list of supported resources, see [IaC generator supported resource types](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/generate-IaC-supported-resources.html) In the CloudFormation User Guide
        public var resourceType: Swift.String?

        public init(
            managedByStack: Swift.Bool? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.managedByStack = managedByStack
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.ScannedResourceIdentifier: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let jazzresourceidentifierpropertykeyKey0 = element0.key
                let jazzresourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(jazzresourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(jazzresourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.ScannedResourceIdentifier, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.ScannedResourceIdentifier()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.resourceIdentifier = try reader["ResourceIdentifier"].readMapIfPresent(valueReadingClosure: Swift.String.readingClosure, keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Identifies a scanned resource. This is used with the ListResourceScanRelatedResources API action.
    public struct ScannedResourceIdentifier: Swift.Equatable {
        /// A list of up to 256 key-value pairs that identifies the scanned resource. The key is the name of one of the primary identifiers for the resource. (Primary identifiers are specified in the primaryIdentifier list in the resource schema.) The value is the value of that primary identifier. For example, for a AWS::DynamoDB::Table resource, the primary identifiers is TableName so the key-value pair could be "TableName": "MyDDBTable". For more information, see [primaryIdentifier](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html#schema-properties-primaryidentifier) in the CloudFormation Command Line Interface User guide for extension development.
        /// This member is required.
        public var resourceIdentifier: [Swift.String:Swift.String]?
        /// The type of the resource, such as AWS::DynamoDB::Table. For the list of supported resources, see [IaC generator supported resource types](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/generate-IaC-supported-resources.html) In the CloudFormation User Guide
        /// This member is required.
        public var resourceType: Swift.String?

        public init(
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension SetStackPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyURL = "StackPolicyURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        try container.encode("SetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetStackPolicyInput {

    static func urlPathProvider(_ value: SetStackPolicyInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [SetStackPolicy] action.
public struct SetStackPolicyInput: Swift.Equatable {
    /// The name or unique stack ID that you want to associate a policy with.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing the stack policy body. For more information, go to [ Prevent updates to stack resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the CloudFormation User Guide. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyBody: Swift.String?
    /// Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both.
    public var stackPolicyURL: Swift.String?

    public init(
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil
    )
    {
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
    }
}

extension SetStackPolicyOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetStackPolicyOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetStackPolicyOutput()
        }
    }
}

public struct SetStackPolicyOutput: Swift.Equatable {

    public init() { }
}

enum SetStackPolicyOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetTypeConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case configurationAlias = "ConfigurationAlias"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let configurationAlias = configurationAlias {
            try container.encode(configurationAlias, forKey: ClientRuntime.Key("ConfigurationAlias"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("SetTypeConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetTypeConfigurationInput {

    static func urlPathProvider(_ value: SetTypeConfigurationInput) -> Swift.String? {
        return "/"
    }
}

public struct SetTypeConfigurationInput: Swift.Equatable {
    /// The configuration data for the extension, in this account and Region. The configuration data must be formatted as JSON, and validate against the schema returned in the ConfigurationSchema response element of [DescribeType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html). For more information, see [Defining account-level configuration data for an extension](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration) in the CloudFormation CLI User Guide.
    /// This member is required.
    public var configuration: Swift.String?
    /// An alias by which to refer to this extension configuration data. Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.
    public var configurationAlias: Swift.String?
    /// The type of extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The Amazon Resource Name (ARN) for the extension, in this account and Region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and Region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and Region. Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.
    public var typeArn: Swift.String?
    /// The name of the extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var typeName: Swift.String?

    public init(
        configuration: Swift.String? = nil,
        configurationAlias: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.configurationAlias = configurationAlias
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}

extension SetTypeConfigurationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetTypeConfigurationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["SetTypeConfigurationResult"]
            var value = SetTypeConfigurationOutput()
            value.configurationArn = try reader["ConfigurationArn"].readIfPresent()
            return value
        }
    }
}

public struct SetTypeConfigurationOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the configuration data, in this account and Region. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var configurationArn: Swift.String?

    public init(
        configurationArn: Swift.String? = nil
    )
    {
        self.configurationArn = configurationArn
    }
}

enum SetTypeConfigurationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SetTypeDefaultVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("SetTypeDefaultVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SetTypeDefaultVersionInput {

    static func urlPathProvider(_ value: SetTypeDefaultVersionInput) -> Swift.String? {
        return "/"
    }
}

public struct SetTypeDefaultVersionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension for which you want version summary information. Conditional: You must specify either TypeName and Type, or Arn.
    public var arn: Swift.String?
    /// The kind of extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var type: CloudFormationClientTypes.RegistryType?
    /// The name of the extension. Conditional: You must specify either TypeName and Type, or Arn.
    public var typeName: Swift.String?
    /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension SetTypeDefaultVersionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SetTypeDefaultVersionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SetTypeDefaultVersionOutput()
        }
    }
}

public struct SetTypeDefaultVersionOutput: Swift.Equatable {

    public init() { }
}

enum SetTypeDefaultVersionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension SignalResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case stackName = "StackName"
        case status = "Status"
        case uniqueId = "UniqueId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uniqueId = uniqueId {
            try container.encode(uniqueId, forKey: ClientRuntime.Key("UniqueId"))
        }
        try container.encode("SignalResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension SignalResourceInput {

    static func urlPathProvider(_ value: SignalResourceInput) -> Swift.String? {
        return "/"
    }
}

/// The input for the [SignalResource] action.
public struct SignalResourceInput: Swift.Equatable {
    /// The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template.
    /// This member is required.
    public var logicalResourceId: Swift.String?
    /// The stack name or unique stack ID that includes the resource that you want to signal.
    /// This member is required.
    public var stackName: Swift.String?
    /// The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update.
    /// This member is required.
    public var status: CloudFormationClientTypes.ResourceSignalStatus?
    /// A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID.
    /// This member is required.
    public var uniqueId: Swift.String?

    public init(
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ResourceSignalStatus? = nil,
        uniqueId: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
        self.status = status
        self.uniqueId = uniqueId
    }
}

extension SignalResourceOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<SignalResourceOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return SignalResourceOutput()
        }
    }
}

public struct SignalResourceOutput: Swift.Equatable {

    public init() { }
}

enum SignalResourceOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes.Stack: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case description = "Description"
        case disableRollback = "DisableRollback"
        case driftInformation = "DriftInformation"
        case enableTerminationProtection = "EnableTerminationProtection"
        case lastUpdatedTime = "LastUpdatedTime"
        case notificationARNs = "NotificationARNs"
        case outputs = "Outputs"
        case parameters = "Parameters"
        case parentId = "ParentId"
        case retainExceptOnCreate = "RetainExceptOnCreate"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case tags = "Tags"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encodeTimestamp(deletionTime, format: .dateTime, forKey: ClientRuntime.Key("DeletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encodeTimestamp(lastUpdatedTime, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let outputs = outputs {
            if !outputs.isEmpty {
                var outputsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Outputs"))
                for (index0, output0) in outputs.enumerated() {
                    try outputsContainer.encode(output0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var outputsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Outputs"))
                try outputsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let retainExceptOnCreate = retainExceptOnCreate {
            try container.encode(retainExceptOnCreate, forKey: ClientRuntime.Key("RetainExceptOnCreate"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Stack, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Stack()
            value.stackId = try reader["StackId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.changeSetId = try reader["ChangeSetId"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Parameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.deletionTime = try reader["DeletionTime"].readTimestampIfPresent(format: .dateTime)
            value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: .dateTime)
            value.rollbackConfiguration = try reader["RollbackConfiguration"].readIfPresent(readingClosure: CloudFormationClientTypes.RollbackConfiguration.readingClosure)
            value.stackStatus = try reader["StackStatus"].readIfPresent()
            value.stackStatusReason = try reader["StackStatusReason"].readIfPresent()
            value.disableRollback = try reader["DisableRollback"].readIfPresent()
            value.notificationARNs = try reader["NotificationARNs"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.timeoutInMinutes = try reader["TimeoutInMinutes"].readIfPresent()
            value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Capability.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.outputs = try reader["Outputs"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Output.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.roleARN = try reader["RoleARN"].readIfPresent()
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Tag.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.enableTerminationProtection = try reader["EnableTerminationProtection"].readIfPresent()
            value.parentId = try reader["ParentId"].readIfPresent()
            value.rootId = try reader["RootId"].readIfPresent()
            value.driftInformation = try reader["DriftInformation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackDriftInformation.readingClosure)
            value.retainExceptOnCreate = try reader["RetainExceptOnCreate"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Stack data type.
    public struct Stack: Swift.Equatable {
        /// The capabilities allowed in the stack.
        public var capabilities: [CloudFormationClientTypes.Capability]?
        /// The unique ID of the change set.
        public var changeSetId: Swift.String?
        /// The time at which the stack was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the stack was deleted.
        public var deletionTime: ClientRuntime.Date?
        /// A user-defined description associated with the stack.
        public var description: Swift.String?
        /// Boolean to enable or disable rollback on stack creation failures:
        ///
        /// * true: disable rollback.
        ///
        /// * false: enable rollback.
        public var disableRollback: Swift.Bool?
        /// Information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackDriftInformation?
        /// Whether termination protection is enabled for the stack. For [nested stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html), termination protection is set on the root stack and can't be changed directly on the nested stack. For more information, see [Protecting a Stack From Being Deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html) in the CloudFormation User Guide.
        public var enableTerminationProtection: Swift.Bool?
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// Amazon SNS topic Amazon Resource Names (ARNs) to which stack related events are published.
        public var notificationARNs: [Swift.String]?
        /// A list of output structures.
        public var outputs: [CloudFormationClientTypes.Output]?
        /// A list of Parameter structures.
        public var parameters: [CloudFormationClientTypes.Parameter]?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the direct parent of this stack. For the first level of nested stacks, the root stack is also the parent stack. For more information, see [Working with Nested Stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var parentId: Swift.String?
        /// When set to true, newly created resources are deleted when the operation rolls back. This includes newly created resources marked with a deletion policy of Retain. Default: false
        public var retainExceptOnCreate: Swift.Bool?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that's associated with the stack. During a stack operation, CloudFormation uses this role's credentials to make calls on your behalf.
        public var roleARN: Swift.String?
        /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
        public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the top-level stack to which the nested stack ultimately belongs. For more information, see [Working with Nested Stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var rootId: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// Current status of the stack.
        /// This member is required.
        public var stackStatus: CloudFormationClientTypes.StackStatus?
        /// Success/failure message associated with the stack status.
        public var stackStatusReason: Swift.String?
        /// A list of Tags that specify information about the stack.
        public var tags: [CloudFormationClientTypes.Tag]?
        /// The amount of time within which stack creation should complete.
        public var timeoutInMinutes: Swift.Int?

        public init(
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            changeSetId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            disableRollback: Swift.Bool? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformation? = nil,
            enableTerminationProtection: Swift.Bool? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            notificationARNs: [Swift.String]? = nil,
            outputs: [CloudFormationClientTypes.Output]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            parentId: Swift.String? = nil,
            retainExceptOnCreate: Swift.Bool? = nil,
            roleARN: Swift.String? = nil,
            rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.capabilities = capabilities
            self.changeSetId = changeSetId
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.disableRollback = disableRollback
            self.driftInformation = driftInformation
            self.enableTerminationProtection = enableTerminationProtection
            self.lastUpdatedTime = lastUpdatedTime
            self.notificationARNs = notificationARNs
            self.outputs = outputs
            self.parameters = parameters
            self.parentId = parentId
            self.retainExceptOnCreate = retainExceptOnCreate
            self.roleARN = roleARN
            self.rollbackConfiguration = rollbackConfiguration
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detectionComplete
        case detectionFailed
        case detectionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftDetectionStatus] {
            return [
                .detectionComplete,
                .detectionFailed,
                .detectionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detectionComplete: return "DETECTION_COMPLETE"
            case .detectionFailed: return "DETECTION_FAILED"
            case .detectionInProgress: return "DETECTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftDetectionStatus(rawValue: rawValue) ?? StackDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackDriftInformation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackDriftInformation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackDriftInformation()
            value.stackDriftStatus = try reader["StackDriftStatus"].readIfPresent()
            value.lastCheckTimestamp = try reader["LastCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted.
    public struct StackDriftInformation: Swift.Equatable {
        /// Most recent time when a drift detection operation was initiated on the stack, or any of its individual resources that support drift detection.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the stack's actual configuration compared to its expected template configuration.
        ///
        /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
        ///
        /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        /// This member is required.
        public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init(
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackDriftInformationSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackDriftInformationSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackDriftInformationSummary()
            value.stackDriftStatus = try reader["StackDriftStatus"].readIfPresent()
            value.lastCheckTimestamp = try reader["LastCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted.
    public struct StackDriftInformationSummary: Swift.Equatable {
        /// Most recent time when a drift detection operation was initiated on the stack, or any of its individual resources that support drift detection.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the stack's actual configuration compared to its expected template configuration.
        ///
        /// * DRIFTED: The stack differs from its expected template configuration. A stack is considered to have drifted if one or more of its resources have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack differs from its expected template configuration.
        ///
        /// * IN_SYNC: The stack's actual configuration matches its expected template configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        /// This member is required.
        public var stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init(
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftStatus(rawValue: rawValue) ?? StackDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackEvent: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case eventId = "EventId"
        case hookFailureMode = "HookFailureMode"
        case hookInvocationPoint = "HookInvocationPoint"
        case hookStatus = "HookStatus"
        case hookStatusReason = "HookStatusReason"
        case hookType = "HookType"
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case resourceProperties = "ResourceProperties"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let hookFailureMode = hookFailureMode {
            try container.encode(hookFailureMode, forKey: ClientRuntime.Key("HookFailureMode"))
        }
        if let hookInvocationPoint = hookInvocationPoint {
            try container.encode(hookInvocationPoint, forKey: ClientRuntime.Key("HookInvocationPoint"))
        }
        if let hookStatus = hookStatus {
            try container.encode(hookStatus, forKey: ClientRuntime.Key("HookStatus"))
        }
        if let hookStatusReason = hookStatusReason {
            try container.encode(hookStatusReason, forKey: ClientRuntime.Key("HookStatusReason"))
        }
        if let hookType = hookType {
            try container.encode(hookType, forKey: ClientRuntime.Key("HookType"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceProperties = resourceProperties {
            try container.encode(resourceProperties, forKey: ClientRuntime.Key("ResourceProperties"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("Timestamp"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackEvent, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackEvent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.eventId = try reader["EventId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            value.resourceStatus = try reader["ResourceStatus"].readIfPresent()
            value.resourceStatusReason = try reader["ResourceStatusReason"].readIfPresent()
            value.resourceProperties = try reader["ResourceProperties"].readIfPresent()
            value.clientRequestToken = try reader["ClientRequestToken"].readIfPresent()
            value.hookType = try reader["HookType"].readIfPresent()
            value.hookStatus = try reader["HookStatus"].readIfPresent()
            value.hookStatusReason = try reader["HookStatusReason"].readIfPresent()
            value.hookInvocationPoint = try reader["HookInvocationPoint"].readIfPresent()
            value.hookFailureMode = try reader["HookFailureMode"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The StackEvent data type.
    public struct StackEvent: Swift.Equatable {
        /// The token passed to the operation that generated this event. All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
        public var clientRequestToken: Swift.String?
        /// The unique ID of this event.
        /// This member is required.
        public var eventId: Swift.String?
        /// Specify the hook failure mode for non-compliant resources in the followings ways.
        ///
        /// * FAIL Stops provisioning resources.
        ///
        /// * WARN Allows provisioning to continue with a warning message.
        public var hookFailureMode: CloudFormationClientTypes.HookFailureMode?
        /// Invocation points are points in provisioning logic where hooks are initiated.
        public var hookInvocationPoint: CloudFormationClientTypes.HookInvocationPoint?
        /// Provides the status of the change set hook.
        public var hookStatus: CloudFormationClientTypes.HookStatus?
        /// Provides the reason for the hook status.
        public var hookStatusReason: Swift.String?
        /// The name of the hook.
        public var hookType: Swift.String?
        /// The logical name of the resource specified in the template.
        public var logicalResourceId: Swift.String?
        /// The name or unique identifier associated with the physical instance of the resource.
        public var physicalResourceId: Swift.String?
        /// BLOB of the properties used to create the resource.
        public var resourceProperties: Swift.String?
        /// Current status of the resource.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. (For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.)
        public var resourceType: Swift.String?
        /// The unique ID name of the instance of the stack.
        /// This member is required.
        public var stackId: Swift.String?
        /// The name associated with a stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// Time the status was updated.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init(
            clientRequestToken: Swift.String? = nil,
            eventId: Swift.String? = nil,
            hookFailureMode: CloudFormationClientTypes.HookFailureMode? = nil,
            hookInvocationPoint: CloudFormationClientTypes.HookInvocationPoint? = nil,
            hookStatus: CloudFormationClientTypes.HookStatus? = nil,
            hookStatusReason: Swift.String? = nil,
            hookType: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceProperties: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.clientRequestToken = clientRequestToken
            self.eventId = eventId
            self.hookFailureMode = hookFailureMode
            self.hookInvocationPoint = hookInvocationPoint
            self.hookStatus = hookStatus
            self.hookStatusReason = hookStatusReason
            self.hookType = hookType
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceProperties = resourceProperties
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackInstance: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case lastOperationId = "LastOperationId"
        case organizationalUnitId = "OrganizationalUnitId"
        case parameterOverrides = "ParameterOverrides"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastDriftCheckTimestamp"))
        }
        if let lastOperationId = lastOperationId {
            try container.encode(lastOperationId, forKey: ClientRuntime.Key("LastOperationId"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackInstance, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackInstance()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            value.region = try reader["Region"].readIfPresent()
            value.account = try reader["Account"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.parameterOverrides = try reader["ParameterOverrides"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Parameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.status = try reader["Status"].readIfPresent()
            value.stackInstanceStatus = try reader["StackInstanceStatus"].readIfPresent(readingClosure: CloudFormationClientTypes.StackInstanceComprehensiveStatus.readingClosure)
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.organizationalUnitId = try reader["OrganizationalUnitId"].readIfPresent()
            value.driftStatus = try reader["DriftStatus"].readIfPresent()
            value.lastDriftCheckTimestamp = try reader["LastDriftCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.lastOperationId = try reader["LastOperationId"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// An CloudFormation stack, in a specific account and Region, that's part of a stack set operation. A stack instance is a reference to an attempted or actual stack in a given account within a given Region. A stack instance can exist without a stack—for example, if the stack couldn't be created for some reason. A stack instance is associated with only one stack set. Each stack instance contains the ID of its associated stack set, in addition to the ID of the actual stack and the stack status.
    public struct StackInstance: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account that the stack instance is associated with.
        public var account: Swift.String?
        /// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs.
        ///
        /// * DRIFTED: The stack differs from the expected template and parameter configuration of the stack set to which it belongs. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack instance differs from its expected stack set configuration.
        ///
        /// * IN_SYNC: The stack instance's actual configuration matches its expected stack set configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack instance. This value will be NULL for any stack instance on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The last unique ID of a StackSet operation performed on a stack instance.
        public var lastOperationId: Swift.String?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// A list of parameters from the stack set template whose values have been overridden in this stack instance.
        public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
        /// The name of the Amazon Web Services Region that the stack instance is associated with.
        public var region: Swift.String?
        /// The ID of the stack instance.
        public var stackId: Swift.String?
        /// The detailed status of the stack instance.
        public var stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// The name or unique ID of the stack set that the stack instance is associated with.
        public var stackSetId: Swift.String?
        /// The status of the stack instance, in terms of its synchronization with its associated stack set.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * OUTDATED: The stack isn't currently up to date with the stack set because:
        ///
        /// * The associated stack failed during a CreateStackSet or UpdateStackSet operation.
        ///
        /// * The stack was part of a CreateStackSet or UpdateStackSet operation that failed or was stopped before the stack was created or updated.
        ///
        ///
        ///
        ///
        /// * CURRENT: The stack is currently up to date with the stack set.
        public var status: CloudFormationClientTypes.StackInstanceStatus?
        /// The explanation for the specific status code that's assigned to this stack instance.
        public var statusReason: Swift.String?

        public init(
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            lastOperationId: Swift.String? = nil,
            organizationalUnitId: Swift.String? = nil,
            parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.lastOperationId = lastOperationId
            self.organizationalUnitId = organizationalUnitId
            self.parameterOverrides = parameterOverrides
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes.StackInstanceComprehensiveStatus: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailedStatus = "DetailedStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let detailedStatus = detailedStatus {
            try container.encode(detailedStatus, forKey: ClientRuntime.Key("DetailedStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackInstanceComprehensiveStatus, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackInstanceComprehensiveStatus()
            value.detailedStatus = try reader["DetailedStatus"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The detailed status of the stack instance.
    public struct StackInstanceComprehensiveStatus: Swift.Equatable {
        /// * CANCELLED: The operation in the specified account and Region has been canceled. This is either because a user has stopped the stack set operation, or because the failure tolerance of the stack set operation has been exceeded.
        ///
        /// * FAILED: The operation in the specified account and Region failed. If the stack set operation fails in enough accounts within a Region, the failure tolerance for the stack set operation as a whole might be exceeded.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * PENDING: The operation in the specified account and Region has yet to start.
        ///
        /// * RUNNING: The operation in the specified account and Region is currently in progress.
        ///
        /// * SKIPPED_SUSPENDED_ACCOUNT: The operation in the specified account and Region has been skipped because the account was suspended at the time of the operation.
        ///
        /// * SUCCEEDED: The operation in the specified account and Region completed successfully.
        public var detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus?

        public init(
            detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus? = nil
        )
        {
            self.detailedStatus = detailedStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceDetailedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inoperable
        case pending
        case running
        case skippedSuspendedAccount
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceDetailedStatus] {
            return [
                .cancelled,
                .failed,
                .inoperable,
                .pending,
                .running,
                .skippedSuspendedAccount,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .inoperable: return "INOPERABLE"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .skippedSuspendedAccount: return "SKIPPED_SUSPENDED_ACCOUNT"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceDetailedStatus(rawValue: rawValue) ?? StackInstanceDetailedStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceFilter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            try container.encode(values, forKey: ClientRuntime.Key("Values"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackInstanceFilter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackInstanceFilter()
            value.name = try reader["Name"].readIfPresent()
            value.values = try reader["Values"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The filter to apply to stack instances
    public struct StackInstanceFilter: Swift.Equatable {
        /// The type of filter to apply.
        public var name: CloudFormationClientTypes.StackInstanceFilterName?
        /// The status to filter by.
        public var values: Swift.String?

        public init(
            name: CloudFormationClientTypes.StackInstanceFilterName? = nil,
            values: Swift.String? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detailedStatus
        case driftStatus
        case lastOperationId
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceFilterName] {
            return [
                .detailedStatus,
                .driftStatus,
                .lastOperationId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detailedStatus: return "DETAILED_STATUS"
            case .driftStatus: return "DRIFT_STATUS"
            case .lastOperationId: return "LAST_OPERATION_ID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceFilterName(rawValue: rawValue) ?? StackInstanceFilterName.sdkUnknown(rawValue)
        }
    }
}

extension StackInstanceNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StackInstanceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified stack instance doesn't exist.
public struct StackInstanceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StackInstanceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.StackInstanceResourceDriftsSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case physicalResourceIdContext = "PhysicalResourceIdContext"
        case propertyDifferences = "PropertyDifferences"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let physicalResourceIdContext = physicalResourceIdContext {
            if !physicalResourceIdContext.isEmpty {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                for (index0, physicalresourceidcontextkeyvaluepair0) in physicalResourceIdContext.enumerated() {
                    try physicalResourceIdContextContainer.encode(physicalresourceidcontextkeyvaluepair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                try physicalResourceIdContextContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let propertyDifferences = propertyDifferences {
            if !propertyDifferences.isEmpty {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                for (index0, propertydifference0) in propertyDifferences.enumerated() {
                    try propertyDifferencesContainer.encode(propertydifference0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                try propertyDifferencesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("Timestamp"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackInstanceResourceDriftsSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackInstanceResourceDriftsSummary()
            value.stackId = try reader["StackId"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.physicalResourceIdContext = try reader["PhysicalResourceIdContext"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.propertyDifferences = try reader["PropertyDifferences"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.PropertyDifference.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.stackResourceDriftStatus = try reader["StackResourceDriftStatus"].readIfPresent()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structure containing summary information about resource drifts for a stack instance.
    public struct StackInstanceResourceDriftsSummary: Swift.Equatable {
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Context information that enables CloudFormation to uniquely identify a resource. CloudFormation uses context key-value pairs in cases where a resource's logical and physical IDs aren't enough to uniquely identify that resource. Each context key-value pair specifies a unique resource that contains the targeted resource.
        public var physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]?
        /// Status of the actual configuration of the resource compared to its expected configuration. These will be present only for resources whose StackInstanceResourceDriftStatus is MODIFIED.
        public var propertyDifferences: [CloudFormationClientTypes.PropertyDifference]?
        /// Type of resource. For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The ID of the stack instance.
        /// This member is required.
        public var stackId: Swift.String?
        /// The drift status of the resource in a stack instance.
        ///
        /// * DELETED: The resource differs from its expected template configuration in that the resource has been deleted.
        ///
        /// * MODIFIED: One or more resource properties differ from their expected template values.
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
        ///
        /// * NOT_CHECKED: CloudFormation doesn't currently return this value.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?
        /// Time at which the stack instance drift detection operation was initiated.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init(
            logicalResourceId: Swift.String? = nil,
            physicalResourceId: Swift.String? = nil,
            physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil,
            propertyDifferences: [CloudFormationClientTypes.PropertyDifference]? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.physicalResourceIdContext = physicalResourceIdContext
            self.propertyDifferences = propertyDifferences
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackResourceDriftStatus = stackResourceDriftStatus
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case inoperable
        case outdated
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceStatus] {
            return [
                .current,
                .inoperable,
                .outdated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .inoperable: return "INOPERABLE"
            case .outdated: return "OUTDATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceStatus(rawValue: rawValue) ?? StackInstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case lastOperationId = "LastOperationId"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastDriftCheckTimestamp"))
        }
        if let lastOperationId = lastOperationId {
            try container.encode(lastOperationId, forKey: ClientRuntime.Key("LastOperationId"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackInstanceSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackInstanceSummary()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            value.region = try reader["Region"].readIfPresent()
            value.account = try reader["Account"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.stackInstanceStatus = try reader["StackInstanceStatus"].readIfPresent(readingClosure: CloudFormationClientTypes.StackInstanceComprehensiveStatus.readingClosure)
            value.organizationalUnitId = try reader["OrganizationalUnitId"].readIfPresent()
            value.driftStatus = try reader["DriftStatus"].readIfPresent()
            value.lastDriftCheckTimestamp = try reader["LastDriftCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.lastOperationId = try reader["LastOperationId"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains summary information about a stack instance.
    public struct StackInstanceSummary: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account that the stack instance is associated with.
        public var account: Swift.String?
        /// Status of the stack instance's actual configuration compared to the expected template and parameter configuration of the stack set to which it belongs.
        ///
        /// * DRIFTED: The stack differs from the expected template and parameter configuration of the stack set to which it belongs. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the stack instance differs from its expected stack set configuration.
        ///
        /// * IN_SYNC: The stack instance's actual configuration matches its expected stack set configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack instance. This value will be NULL for any stack instance on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The last unique ID of a StackSet operation performed on a stack instance.
        public var lastOperationId: Swift.String?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// The name of the Amazon Web Services Region that the stack instance is associated with.
        public var region: Swift.String?
        /// The ID of the stack instance.
        public var stackId: Swift.String?
        /// The detailed status of the stack instance.
        public var stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// The name or unique ID of the stack set that the stack instance is associated with.
        public var stackSetId: Swift.String?
        /// The status of the stack instance, in terms of its synchronization with its associated stack set.
        ///
        /// * INOPERABLE: A DeleteStackInstances operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further UpdateStackSet operations. You might need to perform a DeleteStackInstances operation, with RetainStacks set to true, to delete the stack instance, and then delete the stack manually.
        ///
        /// * OUTDATED: The stack isn't currently up to date with the stack set because:
        ///
        /// * The associated stack failed during a CreateStackSet or UpdateStackSet operation.
        ///
        /// * The stack was part of a CreateStackSet or UpdateStackSet operation that failed or was stopped before the stack was created or updated.
        ///
        ///
        ///
        ///
        /// * CURRENT: The stack is currently up to date with the stack set.
        public var status: CloudFormationClientTypes.StackInstanceStatus?
        /// The explanation for the specific status code assigned to this stack instance.
        public var statusReason: Swift.String?

        public init(
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            lastOperationId: Swift.String? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.lastOperationId = lastOperationId
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension StackNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StackNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified stack ARN doesn't exist or stack doesn't exist corresponding to the ARN in input.
public struct StackNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StackNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.StackResource: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("Timestamp"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResource, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResource()
            value.stackName = try reader["StackName"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            value.resourceStatus = try reader["ResourceStatus"].readIfPresent()
            value.resourceStatusReason = try reader["ResourceStatusReason"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.driftInformation = try reader["DriftInformation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackResourceDriftInformation.readingClosure)
            value.moduleInfo = try reader["ModuleInfo"].readIfPresent(readingClosure: CloudFormationClientTypes.ModuleInfo.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The StackResource data type.
    public struct StackResource: Swift.Equatable {
        /// User defined description associated with the resource.
        public var description: Swift.String?
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        public var stackName: Swift.String?
        /// Time the status was updated.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init(
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDetail: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case metadata = "Metadata"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encodeTimestamp(lastUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let metadata = metadata {
            try container.encode(metadata, forKey: ClientRuntime.Key("Metadata"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResourceDetail, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResourceDetail()
            value.stackName = try reader["StackName"].readIfPresent()
            value.stackId = try reader["StackId"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.resourceStatus = try reader["ResourceStatus"].readIfPresent()
            value.resourceStatusReason = try reader["ResourceStatusReason"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.metadata = try reader["Metadata"].readIfPresent()
            value.driftInformation = try reader["DriftInformation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackResourceDriftInformation.readingClosure)
            value.moduleInfo = try reader["ModuleInfo"].readIfPresent(readingClosure: CloudFormationClientTypes.ModuleInfo.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains detailed information about the specified stack resource.
    public struct StackResourceDetail: Swift.Equatable {
        /// User defined description associated with the resource.
        public var description: Swift.String?
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// Time the status was updated.
        /// This member is required.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// The content of the Metadata attribute declared for the resource. For more information, see [Metadata Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html) in the CloudFormation User Guide.
        public var metadata: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.
        /// This member is required.
        public var resourceType: Swift.String?
        /// Unique identifier of the stack.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        public var stackName: Swift.String?

        public init(
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            metadata: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.metadata = metadata
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
        }
    }

}

extension CloudFormationClientTypes.StackResourceDrift: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualProperties = "ActualProperties"
        case expectedProperties = "ExpectedProperties"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case physicalResourceIdContext = "PhysicalResourceIdContext"
        case propertyDifferences = "PropertyDifferences"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualProperties = actualProperties {
            try container.encode(actualProperties, forKey: ClientRuntime.Key("ActualProperties"))
        }
        if let expectedProperties = expectedProperties {
            try container.encode(expectedProperties, forKey: ClientRuntime.Key("ExpectedProperties"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let physicalResourceIdContext = physicalResourceIdContext {
            if !physicalResourceIdContext.isEmpty {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                for (index0, physicalresourceidcontextkeyvaluepair0) in physicalResourceIdContext.enumerated() {
                    try physicalResourceIdContextContainer.encode(physicalresourceidcontextkeyvaluepair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
                try physicalResourceIdContextContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let propertyDifferences = propertyDifferences {
            if !propertyDifferences.isEmpty {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                for (index0, propertydifference0) in propertyDifferences.enumerated() {
                    try propertyDifferencesContainer.encode(propertydifference0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
                try propertyDifferencesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
        if let timestamp = timestamp {
            try container.encodeTimestamp(timestamp, format: .dateTime, forKey: ClientRuntime.Key("Timestamp"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResourceDrift, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResourceDrift()
            value.stackId = try reader["StackId"].readIfPresent()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.physicalResourceIdContext = try reader["PhysicalResourceIdContext"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.expectedProperties = try reader["ExpectedProperties"].readIfPresent()
            value.actualProperties = try reader["ActualProperties"].readIfPresent()
            value.propertyDifferences = try reader["PropertyDifferences"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.PropertyDifference.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.stackResourceDriftStatus = try reader["StackResourceDriftStatus"].readIfPresent()
            value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: .dateTime)
            value.moduleInfo = try reader["ModuleInfo"].readIfPresent(readingClosure: CloudFormationClientTypes.ModuleInfo.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains the drift information for a resource that has been checked for drift. This includes actual and expected property values for resources in which CloudFormation has detected drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html). Resources that don't currently support drift detection can't be checked. For a list of resources that support drift detection, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html). Use [DetectStackResourceDrift] to detect drift on individual resources, or [DetectStackDrift] to detect drift on all resources in a given stack that support drift detection.
    public struct StackResourceDrift: Swift.Equatable {
        /// A JSON structure containing the actual property values of the stack resource. For resources whose StackResourceDriftStatus is DELETED, this structure will not be present.
        public var actualProperties: Swift.String?
        /// A JSON structure containing the expected property values of the stack resource, as defined in the stack template and any values specified as template parameters. For resources whose StackResourceDriftStatus is DELETED, this structure will not be present.
        public var expectedProperties: Swift.String?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.
        public var physicalResourceId: Swift.String?
        /// Context information that enables CloudFormation to uniquely identify a resource. CloudFormation uses context key-value pairs in cases where a resource's logical and physical IDs aren't enough to uniquely identify that resource. Each context key-value pair specifies a unique resource that contains the targeted resource.
        public var physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]?
        /// A collection of the resource properties whose actual values differ from their expected values. These will be present only for resources whose StackResourceDriftStatus is MODIFIED.
        public var propertyDifferences: [CloudFormationClientTypes.PropertyDifference]?
        /// The type of the resource.
        /// This member is required.
        public var resourceType: Swift.String?
        /// The ID of the stack.
        /// This member is required.
        public var stackId: Swift.String?
        /// Status of the resource's actual configuration compared to its expected configuration.
        ///
        /// * DELETED: The resource differs from its expected template configuration because the resource has been deleted.
        ///
        /// * MODIFIED: One or more resource properties differ from their expected values (as defined in the stack template and any values specified as template parameters).
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected template configuration.
        ///
        /// * NOT_CHECKED: CloudFormation does not currently return this value.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?
        /// Time at which CloudFormation performed drift detection on the stack resource.
        /// This member is required.
        public var timestamp: ClientRuntime.Date?

        public init(
            actualProperties: Swift.String? = nil,
            expectedProperties: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil,
            propertyDifferences: [CloudFormationClientTypes.PropertyDifference]? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.actualProperties = actualProperties
            self.expectedProperties = expectedProperties
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.physicalResourceIdContext = physicalResourceIdContext
            self.propertyDifferences = propertyDifferences
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackResourceDriftStatus = stackResourceDriftStatus
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResourceDriftInformation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResourceDriftInformation()
            value.stackResourceDriftStatus = try reader["StackResourceDriftStatus"].readIfPresent()
            value.lastCheckTimestamp = try reader["LastCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains information about whether the resource's actual configuration differs, or has drifted, from its expected configuration.
    public struct StackResourceDriftInformation: Swift.Equatable {
        /// When CloudFormation last checked if the resource had drifted from its expected configuration.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the resource's actual configuration compared to its expected configuration
        ///
        /// * DELETED: The resource differs from its expected configuration in that it has been deleted.
        ///
        /// * MODIFIED: The resource differs from its expected configuration.
        ///
        /// * NOT_CHECKED: CloudFormation has not checked if the resource differs from its expected configuration. Any resources that do not currently support drift detection have a status of NOT_CHECKED. For more information, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html).
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected configuration.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init(
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformationSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encodeTimestamp(lastCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResourceDriftInformationSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResourceDriftInformationSummary()
            value.stackResourceDriftStatus = try reader["StackResourceDriftStatus"].readIfPresent()
            value.lastCheckTimestamp = try reader["LastCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Summarizes information about whether the resource's actual configuration differs, or has drifted, from its expected configuration.
    public struct StackResourceDriftInformationSummary: Swift.Equatable {
        /// When CloudFormation last checked if the resource had drifted from its expected configuration.
        public var lastCheckTimestamp: ClientRuntime.Date?
        /// Status of the resource's actual configuration compared to its expected configuration.
        ///
        /// * DELETED: The resource differs from its expected configuration in that it has been deleted.
        ///
        /// * MODIFIED: The resource differs from its expected configuration.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked if the resource differs from its expected configuration. Any resources that don't currently support drift detection have a status of NOT_CHECKED. For more information, see [Resources that Support Drift Detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html). If you performed an [ContinueUpdateRollback] operation on a stack, any resources included in ResourcesToSkip will also have a status of NOT_CHECKED. For more information about skipping resources during rollback operations, see [Continue Rolling Back an Update](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html) in the CloudFormation User Guide.
        ///
        /// * IN_SYNC: The resource's actual configuration matches its expected configuration.
        /// This member is required.
        public var stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init(
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackResourceDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case inSync
        case modified
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackResourceDriftStatus] {
            return [
                .deleted,
                .inSync,
                .modified,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .inSync: return "IN_SYNC"
            case .modified: return "MODIFIED"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackResourceDriftStatus(rawValue: rawValue) ?? StackResourceDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackResourceSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encodeTimestamp(lastUpdatedTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackResourceSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackResourceSummary()
            value.logicalResourceId = try reader["LogicalResourceId"].readIfPresent()
            value.physicalResourceId = try reader["PhysicalResourceId"].readIfPresent()
            value.resourceType = try reader["ResourceType"].readIfPresent()
            value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.resourceStatus = try reader["ResourceStatus"].readIfPresent()
            value.resourceStatusReason = try reader["ResourceStatusReason"].readIfPresent()
            value.driftInformation = try reader["DriftInformation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackResourceDriftInformationSummary.readingClosure)
            value.moduleInfo = try reader["ModuleInfo"].readIfPresent(readingClosure: CloudFormationClientTypes.ModuleInfo.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains high-level information about the specified stack resource.
    public struct StackResourceSummary: Swift.Equatable {
        /// Information about whether the resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary?
        /// Time the status was updated.
        /// This member is required.
        public var lastUpdatedTimestamp: ClientRuntime.Date?
        /// The logical name of the resource specified in the template.
        /// This member is required.
        public var logicalResourceId: Swift.String?
        /// Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.
        public var moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// The name or unique identifier that corresponds to a physical instance ID of the resource.
        public var physicalResourceId: Swift.String?
        /// Current status of the resource.
        /// This member is required.
        public var resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// Success/failure message associated with the resource.
        public var resourceStatusReason: Swift.String?
        /// Type of resource. (For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.)
        /// This member is required.
        public var resourceType: Swift.String?

        public init(
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.StackSet: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case capabilities = "Capabilities"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case regions = "Regions"
        case stackSetARN = "StackSetARN"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
        case tags = "Tags"
        case templateBody = "TemplateBody"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            if !organizationalUnitIds.isEmpty {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                    try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
                try organizationalUnitIdsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetARN = stackSetARN {
            try container.encode(stackSetARN, forKey: ClientRuntime.Key("StackSetARN"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSet, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSet()
            value.stackSetName = try reader["StackSetName"].readIfPresent()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.templateBody = try reader["TemplateBody"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Parameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Capability.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Tag.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.stackSetARN = try reader["StackSetARN"].readIfPresent()
            value.administrationRoleARN = try reader["AdministrationRoleARN"].readIfPresent()
            value.executionRoleName = try reader["ExecutionRoleName"].readIfPresent()
            value.stackSetDriftDetectionDetails = try reader["StackSetDriftDetectionDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetDriftDetectionDetails.readingClosure)
            value.autoDeployment = try reader["AutoDeployment"].readIfPresent(readingClosure: CloudFormationClientTypes.AutoDeployment.readingClosure)
            value.permissionModel = try reader["PermissionModel"].readIfPresent()
            value.organizationalUnitIds = try reader["OrganizationalUnitIds"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.managedExecution = try reader["ManagedExecution"].readIfPresent(readingClosure: CloudFormationClientTypes.ManagedExecution.readingClosure)
            value.regions = try reader["Regions"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A structure that contains information about a stack set. A stack set enables you to provision stacks into Amazon Web Services accounts and across Regions by using a single CloudFormation template. In the stack set, you specify the template to use, in addition to any parameters and capabilities that the template requires.
    public struct StackSet: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the IAM role used to create or update the stack set. Use customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Prerequisites: Granting Permissions for Stack Set Operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
        public var administrationRoleARN: Swift.String?
        /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).
        public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// The capabilities that are allowed in the stack set. Some stack set templates might include resources that can affect permissions in your Amazon Web Services account—for example, by creating new Identity and Access Management (IAM) users. For more information, see [Acknowledging IAM Resources in CloudFormation Templates.](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities)
        public var capabilities: [CloudFormationClientTypes.Capability]?
        /// A description of the stack set that you specify when the stack set is created or updated.
        public var description: Swift.String?
        /// The name of the IAM execution role used to create or update the stack set. Use customized execution roles to control which stack resources users and groups can include in their stack sets.
        public var executionRoleName: Swift.String?
        /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
        public var managedExecution: CloudFormationClientTypes.ManagedExecution?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitIds: [Swift.String]?
        /// A list of input parameters for a stack set.
        public var parameters: [CloudFormationClientTypes.Parameter]?
        /// Describes how the IAM roles required for stack set operations are created.
        ///
        /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
        ///
        /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
        public var permissionModel: CloudFormationClientTypes.PermissionModels?
        /// Returns a list of all Amazon Web Services Regions the given StackSet has stack instances deployed in. The Amazon Web Services Regions list output is in no particular order.
        public var regions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the stack set.
        public var stackSetARN: Swift.String?
        /// Detailed information about the drift status of the stack set. For stack sets, contains information about the last completed drift operation performed on the stack set. Information about drift operations currently in progress isn't included.
        public var stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The name that's associated with the stack set.
        public var stackSetName: Swift.String?
        /// The status of the stack set.
        public var status: CloudFormationClientTypes.StackSetStatus?
        /// A list of tags that specify information about the stack set. A maximum number of 50 tags can be specified.
        public var tags: [CloudFormationClientTypes.Tag]?
        /// The structure that contains the body of the template that was used to create or update the stack set.
        public var templateBody: Swift.String?

        public init(
            administrationRoleARN: Swift.String? = nil,
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            description: Swift.String? = nil,
            executionRoleName: Swift.String? = nil,
            managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
            organizationalUnitIds: [Swift.String]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            regions: [Swift.String]? = nil,
            stackSetARN: Swift.String? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            templateBody: Swift.String? = nil
        )
        {
            self.administrationRoleARN = administrationRoleARN
            self.autoDeployment = autoDeployment
            self.capabilities = capabilities
            self.description = description
            self.executionRoleName = executionRoleName
            self.managedExecution = managedExecution
            self.organizationalUnitIds = organizationalUnitIds
            self.parameters = parameters
            self.permissionModel = permissionModel
            self.regions = regions
            self.stackSetARN = stackSetARN
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
            self.tags = tags
            self.templateBody = templateBody
        }
    }

}

extension CloudFormationClientTypes.StackSetDriftDetectionDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftDetectionStatus = "DriftDetectionStatus"
        case driftStatus = "DriftStatus"
        case driftedStackInstancesCount = "DriftedStackInstancesCount"
        case failedStackInstancesCount = "FailedStackInstancesCount"
        case inProgressStackInstancesCount = "InProgressStackInstancesCount"
        case inSyncStackInstancesCount = "InSyncStackInstancesCount"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case totalStackInstancesCount = "TotalStackInstancesCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftDetectionStatus = driftDetectionStatus {
            try container.encode(driftDetectionStatus, forKey: ClientRuntime.Key("DriftDetectionStatus"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let driftedStackInstancesCount = driftedStackInstancesCount {
            try container.encode(driftedStackInstancesCount, forKey: ClientRuntime.Key("DriftedStackInstancesCount"))
        }
        if let failedStackInstancesCount = failedStackInstancesCount {
            try container.encode(failedStackInstancesCount, forKey: ClientRuntime.Key("FailedStackInstancesCount"))
        }
        if let inProgressStackInstancesCount = inProgressStackInstancesCount {
            try container.encode(inProgressStackInstancesCount, forKey: ClientRuntime.Key("InProgressStackInstancesCount"))
        }
        if let inSyncStackInstancesCount = inSyncStackInstancesCount {
            try container.encode(inSyncStackInstancesCount, forKey: ClientRuntime.Key("InSyncStackInstancesCount"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastDriftCheckTimestamp"))
        }
        if let totalStackInstancesCount = totalStackInstancesCount {
            try container.encode(totalStackInstancesCount, forKey: ClientRuntime.Key("TotalStackInstancesCount"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetDriftDetectionDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetDriftDetectionDetails()
            value.driftStatus = try reader["DriftStatus"].readIfPresent()
            value.driftDetectionStatus = try reader["DriftDetectionStatus"].readIfPresent()
            value.lastDriftCheckTimestamp = try reader["LastDriftCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.totalStackInstancesCount = try reader["TotalStackInstancesCount"].readIfPresent()
            value.driftedStackInstancesCount = try reader["DriftedStackInstancesCount"].readIfPresent()
            value.inSyncStackInstancesCount = try reader["InSyncStackInstancesCount"].readIfPresent()
            value.inProgressStackInstancesCount = try reader["InProgressStackInstancesCount"].readIfPresent()
            value.failedStackInstancesCount = try reader["FailedStackInstancesCount"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Detailed information about the drift status of the stack set. For stack sets, contains information about the last completed drift operation performed on the stack set. Information about drift operations in-progress isn't included. For stack set operations, includes information about drift operations currently being performed on the stack set. For more information, see [Detecting unmanaged changes in stack sets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html) in the CloudFormation User Guide.
    public struct StackSetDriftDetectionDetails: Swift.Equatable {
        /// The status of the stack set drift detection operation.
        ///
        /// * COMPLETED: The drift detection operation completed without failing on any stack instances.
        ///
        /// * FAILED: The drift detection operation exceeded the specified failure tolerance.
        ///
        /// * PARTIAL_SUCCESS: The drift detection operation completed without exceeding the failure tolerance for the operation.
        ///
        /// * IN_PROGRESS: The drift detection operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the drift detection operation.
        public var driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus?
        /// Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.
        ///
        /// * DRIFTED: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked the stack set for drift.
        ///
        /// * IN_SYNC: All of the stack instances belonging to the stack set stack match from the expected template and parameter configuration.
        public var driftStatus: CloudFormationClientTypes.StackSetDriftStatus?
        /// The number of stack instances that have drifted from the expected template and parameter configuration of the stack set. A stack instance is considered to have drifted if one or more of the resources in the associated stack don't match their expected configuration.
        public var driftedStackInstancesCount: Swift.Int?
        /// The number of stack instances for which the drift detection operation failed.
        public var failedStackInstancesCount: Swift.Int?
        /// The number of stack instances that are currently being checked for drift.
        public var inProgressStackInstancesCount: Swift.Int?
        /// The number of stack instances which match the expected template and parameter configuration of the stack set.
        public var inSyncStackInstancesCount: Swift.Int?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be NULL for any stack set on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// The total number of stack instances belonging to this stack set. The total number of stack instances is equal to the total of:
        ///
        /// * Stack instances that match the stack set configuration.
        ///
        /// * Stack instances that have drifted from the stack set configuration.
        ///
        /// * Stack instances where the drift detection operation has failed.
        ///
        /// * Stack instances currently being checked for drift.
        public var totalStackInstancesCount: Swift.Int?

        public init(
            driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus? = nil,
            driftStatus: CloudFormationClientTypes.StackSetDriftStatus? = nil,
            driftedStackInstancesCount: Swift.Int? = nil,
            failedStackInstancesCount: Swift.Int? = nil,
            inProgressStackInstancesCount: Swift.Int? = nil,
            inSyncStackInstancesCount: Swift.Int? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            totalStackInstancesCount: Swift.Int? = nil
        )
        {
            self.driftDetectionStatus = driftDetectionStatus
            self.driftStatus = driftStatus
            self.driftedStackInstancesCount = driftedStackInstancesCount
            self.failedStackInstancesCount = failedStackInstancesCount
            self.inProgressStackInstancesCount = inProgressStackInstancesCount
            self.inSyncStackInstancesCount = inSyncStackInstancesCount
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.totalStackInstancesCount = totalStackInstancesCount
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case partialSuccess
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftDetectionStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .partialSuccess,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .partialSuccess: return "PARTIAL_SUCCESS"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftDetectionStatus(rawValue: rawValue) ?? StackSetDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum StackSetDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftStatus(rawValue: rawValue) ?? StackSetDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension StackSetNotEmptyException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StackSetNotEmptyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// You can't yet delete this stack set, because it still contains one or more stack instances. Delete all stack instances from the stack set before deleting the stack set.
public struct StackSetNotEmptyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StackSetNotEmptyException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension StackSetNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StackSetNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified stack set doesn't exist.
public struct StackSetNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StackSetNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.StackSetOperation: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case administrationRoleARN = "AdministrationRoleARN"
        case creationTimestamp = "CreationTimestamp"
        case deploymentTargets = "DeploymentTargets"
        case endTimestamp = "EndTimestamp"
        case executionRoleName = "ExecutionRoleName"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case retainStacks = "RetainStacks"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encodeTimestamp(creationTimestamp, format: .dateTime, forKey: ClientRuntime.Key("CreationTimestamp"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let endTimestamp = endTimestamp {
            try container.encodeTimestamp(endTimestamp, format: .dateTime, forKey: ClientRuntime.Key("EndTimestamp"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusDetails = statusDetails {
            try container.encode(statusDetails, forKey: ClientRuntime.Key("StatusDetails"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetOperation, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetOperation()
            value.operationId = try reader["OperationId"].readIfPresent()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            value.action = try reader["Action"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.operationPreferences = try reader["OperationPreferences"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetOperationPreferences.readingClosure)
            value.retainStacks = try reader["RetainStacks"].readIfPresent()
            value.administrationRoleARN = try reader["AdministrationRoleARN"].readIfPresent()
            value.executionRoleName = try reader["ExecutionRoleName"].readIfPresent()
            value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.endTimestamp = try reader["EndTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.deploymentTargets = try reader["DeploymentTargets"].readIfPresent(readingClosure: CloudFormationClientTypes.DeploymentTargets.readingClosure)
            value.stackSetDriftDetectionDetails = try reader["StackSetDriftDetectionDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetDriftDetectionDetails.readingClosure)
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.statusDetails = try reader["StatusDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetOperationStatusDetails.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains information about a stack set operation.
    public struct StackSetOperation: Swift.Equatable {
        /// The type of stack set operation: CREATE, UPDATE, or DELETE. Create and delete operations affect only the specified stack set instances that are associated with the specified stack set. Update operations affect both the stack set itself, in addition to all associated stack set instances.
        public var action: CloudFormationClientTypes.StackSetOperationAction?
        /// The Amazon Resource Name (ARN) of the IAM role used to perform this stack set operation. Use customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Define Permissions for Multiple Administrators](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide.
        public var administrationRoleARN: Swift.String?
        /// The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.
        public var creationTimestamp: ClientRuntime.Date?
        /// [Service-managed permissions] The Organizations accounts affected by the stack operation.
        public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
        /// The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.
        public var endTimestamp: ClientRuntime.Date?
        /// The name of the IAM execution role used to create or update the stack set. Use customized execution roles to control which stack resources users and groups can include in their stack sets.
        public var executionRoleName: Swift.String?
        /// The unique ID of a stack set operation.
        public var operationId: Swift.String?
        /// The preferences for how CloudFormation performs this stack set operation.
        public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
        /// For stack set operations of action type DELETE, specifies whether to remove the stack instances from the specified stack set, but doesn't delete the stacks. You can't re-associate a retained stack, or add an existing, saved stack to a new stack set.
        public var retainStacks: Swift.Bool?
        /// Detailed information about the drift status of the stack set. This includes information about drift operations currently being performed on the stack set. This information will only be present for stack set operations whose Action type is DETECT_DRIFT. For more information, see [Detecting Unmanaged Changes in Stack Sets](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html) in the CloudFormation User Guide.
        public var stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The status of the operation.
        ///
        /// * FAILED: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to FAILED. This in turn sets the status of the operation as a whole to FAILED, and CloudFormation cancels the operation in any remaining Regions.
        ///
        /// * QUEUED: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the [stack set operation status codes](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes) in the CloudFormation User Guide.
        ///
        /// * RUNNING: The operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the operation.
        ///
        /// * STOPPING: The operation is in the process of stopping, at user request.
        ///
        /// * SUCCEEDED: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.
        public var status: CloudFormationClientTypes.StackSetOperationStatus?
        /// Detailed information about the StackSet operation.
        public var statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails?
        /// The status of the operation in details.
        public var statusReason: Swift.String?

        public init(
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            administrationRoleARN: Swift.String? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            executionRoleName: Swift.String? = nil,
            operationId: Swift.String? = nil,
            operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
            retainStacks: Swift.Bool? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil,
            statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.administrationRoleARN = administrationRoleARN
            self.creationTimestamp = creationTimestamp
            self.deploymentTargets = deploymentTargets
            self.endTimestamp = endTimestamp
            self.executionRoleName = executionRoleName
            self.operationId = operationId
            self.operationPreferences = operationPreferences
            self.retainStacks = retainStacks
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.status = status
            self.statusDetails = statusDetails
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case delete
        case detectDrift
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationAction] {
            return [
                .create,
                .delete,
                .detectDrift,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .delete: return "DELETE"
            case .detectDrift: return "DETECT_DRIFT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationAction(rawValue: rawValue) ?? StackSetOperationAction.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationPreferences: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case concurrencyMode = "ConcurrencyMode"
        case failureToleranceCount = "FailureToleranceCount"
        case failureTolerancePercentage = "FailureTolerancePercentage"
        case maxConcurrentCount = "MaxConcurrentCount"
        case maxConcurrentPercentage = "MaxConcurrentPercentage"
        case regionConcurrencyType = "RegionConcurrencyType"
        case regionOrder = "RegionOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let concurrencyMode = concurrencyMode {
            try container.encode(concurrencyMode, forKey: ClientRuntime.Key("ConcurrencyMode"))
        }
        if let failureToleranceCount = failureToleranceCount {
            try container.encode(failureToleranceCount, forKey: ClientRuntime.Key("FailureToleranceCount"))
        }
        if let failureTolerancePercentage = failureTolerancePercentage {
            try container.encode(failureTolerancePercentage, forKey: ClientRuntime.Key("FailureTolerancePercentage"))
        }
        if let maxConcurrentCount = maxConcurrentCount {
            try container.encode(maxConcurrentCount, forKey: ClientRuntime.Key("MaxConcurrentCount"))
        }
        if let maxConcurrentPercentage = maxConcurrentPercentage {
            try container.encode(maxConcurrentPercentage, forKey: ClientRuntime.Key("MaxConcurrentPercentage"))
        }
        if let regionConcurrencyType = regionConcurrencyType {
            try container.encode(regionConcurrencyType, forKey: ClientRuntime.Key("RegionConcurrencyType"))
        }
        if let regionOrder = regionOrder {
            if !regionOrder.isEmpty {
                var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
                for (index0, region0) in regionOrder.enumerated() {
                    try regionOrderContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
                try regionOrderContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetOperationPreferences, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetOperationPreferences()
            value.regionConcurrencyType = try reader["RegionConcurrencyType"].readIfPresent()
            value.regionOrder = try reader["RegionOrder"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.failureToleranceCount = try reader["FailureToleranceCount"].readIfPresent()
            value.failureTolerancePercentage = try reader["FailureTolerancePercentage"].readIfPresent()
            value.maxConcurrentCount = try reader["MaxConcurrentCount"].readIfPresent()
            value.maxConcurrentPercentage = try reader["MaxConcurrentPercentage"].readIfPresent()
            value.concurrencyMode = try reader["ConcurrencyMode"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
    public struct StackSetOperationPreferences: Swift.Equatable {
        /// Specifies how the concurrency level behaves during the operation execution.
        ///
        /// * STRICT_FAILURE_TOLERANCE: This option dynamically lowers the concurrency level to ensure the number of failed accounts never exceeds the value of FailureToleranceCount +1. The initial actual concurrency is set to the lower of either the value of the MaxConcurrentCount, or the value of MaxConcurrentCount +1. The actual concurrency is then reduced proportionally by the number of failures. This is the default behavior. If failure tolerance or Maximum concurrent accounts are set to percentages, the behavior is similar.
        ///
        /// * SOFT_FAILURE_TOLERANCE: This option decouples FailureToleranceCount from the actual concurrency. This allows stack set operations to run at the concurrency level set by the MaxConcurrentCount value, or MaxConcurrentPercentage, regardless of the number of failures.
        public var concurrencyMode: CloudFormationClientTypes.ConcurrencyMode?
        /// The number of accounts, per Region, for which this operation can fail before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions. Conditional: You must specify either FailureToleranceCount or FailureTolerancePercentage (but not both). By default, 0 is specified.
        public var failureToleranceCount: Swift.Int?
        /// The percentage of accounts, per Region, for which this stack operation can fail before CloudFormation stops the operation in that Region. If the operation is stopped in a Region, CloudFormation doesn't attempt the operation in any subsequent Regions. When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. Conditional: You must specify either FailureToleranceCount or FailureTolerancePercentage, but not both. By default, 0 is specified.
        public var failureTolerancePercentage: Swift.Int?
        /// The maximum number of accounts in which to perform this operation at one time. This can depend on the value of FailureToleranceCount depending on your ConcurrencyMode. MaxConcurrentCount is at most one more than the FailureToleranceCount if you're using STRICT_FAILURE_TOLERANCE. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Conditional: You must specify either MaxConcurrentCount or MaxConcurrentPercentage, but not both. By default, 1 is specified.
        public var maxConcurrentCount: Swift.Int?
        /// The maximum percentage of accounts in which to perform this operation at one time. When calculating the number of accounts based on the specified percentage, CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead. Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling. Conditional: You must specify either MaxConcurrentCount or MaxConcurrentPercentage, but not both. By default, 1 is specified.
        public var maxConcurrentPercentage: Swift.Int?
        /// The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
        public var regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType?
        /// The order of the Regions where you want to perform the stack operation. RegionOrder isn't followed if AutoDeployment is enabled.
        public var regionOrder: [Swift.String]?

        public init(
            concurrencyMode: CloudFormationClientTypes.ConcurrencyMode? = nil,
            failureToleranceCount: Swift.Int? = nil,
            failureTolerancePercentage: Swift.Int? = nil,
            maxConcurrentCount: Swift.Int? = nil,
            maxConcurrentPercentage: Swift.Int? = nil,
            regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType? = nil,
            regionOrder: [Swift.String]? = nil
        )
        {
            self.concurrencyMode = concurrencyMode
            self.failureToleranceCount = failureToleranceCount
            self.failureTolerancePercentage = failureTolerancePercentage
            self.maxConcurrentCount = maxConcurrentCount
            self.maxConcurrentPercentage = maxConcurrentPercentage
            self.regionConcurrencyType = regionConcurrencyType
            self.regionOrder = regionOrder
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationResultStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case pending
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationResultStatus] {
            return [
                .cancelled,
                .failed,
                .pending,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationResultStatus(rawValue: rawValue) ?? StackSetOperationResultStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationResultSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case accountGateResult = "AccountGateResult"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let accountGateResult = accountGateResult {
            try container.encode(accountGateResult, forKey: ClientRuntime.Key("AccountGateResult"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetOperationResultSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetOperationResultSummary()
            value.account = try reader["Account"].readIfPresent()
            value.region = try reader["Region"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.accountGateResult = try reader["AccountGateResult"].readIfPresent(readingClosure: CloudFormationClientTypes.AccountGateResult.readingClosure)
            value.organizationalUnitId = try reader["OrganizationalUnitId"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structure that contains information about a specified operation's results for a given account in a given Region.
    public struct StackSetOperationResultSummary: Swift.Equatable {
        /// [Self-managed permissions] The name of the Amazon Web Services account for this operation result.
        public var account: Swift.String?
        /// The results of the account gate function CloudFormation invokes, if present, before proceeding with stack set operations in an account.
        public var accountGateResult: CloudFormationClientTypes.AccountGateResult?
        /// [Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for [DeploymentTargets](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html).
        public var organizationalUnitId: Swift.String?
        /// The name of the Amazon Web Services Region for this operation result.
        public var region: Swift.String?
        /// The result status of the stack set operation for the given account in the given Region.
        ///
        /// * CANCELLED: The operation in the specified account and Region has been canceled. This is either because a user has stopped the stack set operation, or because the failure tolerance of the stack set operation has been exceeded.
        ///
        /// * FAILED: The operation in the specified account and Region failed. If the stack set operation fails in enough accounts within a Region, the failure tolerance for the stack set operation as a whole might be exceeded.
        ///
        /// * RUNNING: The operation in the specified account and Region is currently in progress.
        ///
        /// * PENDING: The operation in the specified account and Region has yet to start.
        ///
        /// * SUCCEEDED: The operation in the specified account and Region completed successfully.
        public var status: CloudFormationClientTypes.StackSetOperationResultStatus?
        /// The reason for the assigned result status.
        public var statusReason: Swift.String?

        public init(
            account: Swift.String? = nil,
            accountGateResult: CloudFormationClientTypes.AccountGateResult? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationResultStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.accountGateResult = accountGateResult
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case queued
        case running
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationStatus] {
            return [
                .failed,
                .queued,
                .running,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .queued: return "QUEUED"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationStatus(rawValue: rawValue) ?? StackSetOperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationStatusDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedStackInstancesCount = "FailedStackInstancesCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failedStackInstancesCount = failedStackInstancesCount {
            try container.encode(failedStackInstancesCount, forKey: ClientRuntime.Key("FailedStackInstancesCount"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetOperationStatusDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetOperationStatusDetails()
            value.failedStackInstancesCount = try reader["FailedStackInstancesCount"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Detailed information about the StackSet operation.
    public struct StackSetOperationStatusDetails: Swift.Equatable {
        /// The number of stack instances for which the StackSet operation failed.
        public var failedStackInstancesCount: Swift.Int?

        public init(
            failedStackInstancesCount: Swift.Int? = nil
        )
        {
            self.failedStackInstancesCount = failedStackInstancesCount
        }
    }

}

extension CloudFormationClientTypes.StackSetOperationSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case creationTimestamp = "CreationTimestamp"
        case endTimestamp = "EndTimestamp"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encodeTimestamp(creationTimestamp, format: .dateTime, forKey: ClientRuntime.Key("CreationTimestamp"))
        }
        if let endTimestamp = endTimestamp {
            try container.encodeTimestamp(endTimestamp, format: .dateTime, forKey: ClientRuntime.Key("EndTimestamp"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusDetails = statusDetails {
            try container.encode(statusDetails, forKey: ClientRuntime.Key("StatusDetails"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetOperationSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetOperationSummary()
            value.operationId = try reader["OperationId"].readIfPresent()
            value.action = try reader["Action"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.endTimestamp = try reader["EndTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.statusDetails = try reader["StatusDetails"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetOperationStatusDetails.readingClosure)
            value.operationPreferences = try reader["OperationPreferences"].readIfPresent(readingClosure: CloudFormationClientTypes.StackSetOperationPreferences.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structures that contain summary information about the specified operation.
    public struct StackSetOperationSummary: Swift.Equatable {
        /// The type of operation: CREATE, UPDATE, or DELETE. Create and delete operations affect only the specified stack instances that are associated with the specified stack set. Update operations affect both the stack set itself and all associated stack set instances.
        public var action: CloudFormationClientTypes.StackSetOperationAction?
        /// The time at which the operation was initiated. Note that the creation times for the stack set operation might differ from the creation time of the individual stacks themselves. This is because CloudFormation needs to perform preparatory work for the operation, such as dispatching the work to the requested Regions, before actually creating the first stacks.
        public var creationTimestamp: ClientRuntime.Date?
        /// The time at which the stack set operation ended, across all accounts and Regions specified. Note that this doesn't necessarily mean that the stack set operation was successful, or even attempted, in each account or Region.
        public var endTimestamp: ClientRuntime.Date?
        /// The unique ID of the stack set operation.
        public var operationId: Swift.String?
        /// The user-specified preferences for how CloudFormation performs a stack set operation. For more information about maximum concurrent accounts and failure tolerance, see [Stack set operation options](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options).
        public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
        /// The overall status of the operation.
        ///
        /// * FAILED: The operation exceeded the specified failure tolerance. The failure tolerance value that you've set for an operation is applied for each Region during stack create and update operations. If the number of failed stacks within a Region exceeds the failure tolerance, the status of the operation in the Region is set to FAILED. This in turn sets the status of the operation as a whole to FAILED, and CloudFormation cancels the operation in any remaining Regions.
        ///
        /// * QUEUED: [Service-managed permissions] For automatic deployments that require a sequence of operations, the operation is queued to be performed. For more information, see the [stack set operation status codes](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes) in the CloudFormation User Guide.
        ///
        /// * RUNNING: The operation is currently being performed.
        ///
        /// * STOPPED: The user has canceled the operation.
        ///
        /// * STOPPING: The operation is in the process of stopping, at user request.
        ///
        /// * SUCCEEDED: The operation completed creating or updating all the specified stacks without exceeding the failure tolerance for the operation.
        public var status: CloudFormationClientTypes.StackSetOperationStatus?
        /// Detailed information about the stack set operation.
        public var statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails?
        /// The status of the operation in details.
        public var statusReason: Swift.String?

        public init(
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            operationId: Swift.String? = nil,
            operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil,
            statusDetails: CloudFormationClientTypes.StackSetOperationStatusDetails? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.action = action
            self.creationTimestamp = creationTimestamp
            self.endTimestamp = endTimestamp
            self.operationId = operationId
            self.operationPreferences = operationPreferences
            self.status = status
            self.statusDetails = statusDetails
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetStatus] {
            return [
                .active,
                .deleted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetStatus(rawValue: rawValue) ?? StackSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoDeployment = "AutoDeployment"
        case description = "Description"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case managedExecution = "ManagedExecution"
        case permissionModel = "PermissionModel"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encodeTimestamp(lastDriftCheckTimestamp, format: .dateTime, forKey: ClientRuntime.Key("LastDriftCheckTimestamp"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSetSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSetSummary()
            value.stackSetName = try reader["StackSetName"].readIfPresent()
            value.stackSetId = try reader["StackSetId"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.autoDeployment = try reader["AutoDeployment"].readIfPresent(readingClosure: CloudFormationClientTypes.AutoDeployment.readingClosure)
            value.permissionModel = try reader["PermissionModel"].readIfPresent()
            value.driftStatus = try reader["DriftStatus"].readIfPresent()
            value.lastDriftCheckTimestamp = try reader["LastDriftCheckTimestamp"].readTimestampIfPresent(format: .dateTime)
            value.managedExecution = try reader["ManagedExecution"].readIfPresent(readingClosure: CloudFormationClientTypes.ManagedExecution.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The structures that contain summary information about the specified stack set.
    public struct StackSetSummary: Swift.Equatable {
        /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organizational unit (OU).
        public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// A description of the stack set that you specify when the stack set is created or updated.
        public var description: Swift.String?
        /// Status of the stack set's actual configuration compared to its expected template and parameter configuration. A stack set is considered to have drifted if one or more of its stack instances have drifted from their expected template and parameter configuration.
        ///
        /// * DRIFTED: One or more of the stack instances belonging to the stack set stack differs from the expected template and parameter configuration. A stack instance is considered to have drifted if one or more of the resources in the associated stack have drifted.
        ///
        /// * NOT_CHECKED: CloudFormation hasn't checked the stack set for drift.
        ///
        /// * IN_SYNC: All the stack instances belonging to the stack set stack match from the expected template and parameter configuration.
        ///
        /// * UNKNOWN: This value is reserved for future use.
        public var driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// Most recent time when CloudFormation performed a drift detection operation on the stack set. This value will be NULL for any stack set on which drift detection hasn't yet been performed.
        public var lastDriftCheckTimestamp: ClientRuntime.Date?
        /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
        public var managedExecution: CloudFormationClientTypes.ManagedExecution?
        /// Describes how the IAM roles required for stack set operations are created.
        ///
        /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
        ///
        /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
        public var permissionModel: CloudFormationClientTypes.PermissionModels?
        /// The ID of the stack set.
        public var stackSetId: Swift.String?
        /// The name of the stack set.
        public var stackSetName: Swift.String?
        /// The status of the stack set.
        public var status: CloudFormationClientTypes.StackSetStatus?

        public init(
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            description: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil
        )
        {
            self.autoDeployment = autoDeployment
            self.description = description
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.managedExecution = managedExecution
            self.permissionModel = permissionModel
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case importComplete
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case reviewInProgress
        case rollbackComplete
        case rollbackFailed
        case rollbackInProgress
        case updateComplete
        case updateCompleteCleanupInProgress
        case updateFailed
        case updateInProgress
        case updateRollbackComplete
        case updateRollbackCompleteCleanupInProgress
        case updateRollbackFailed
        case updateRollbackInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .importComplete,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .reviewInProgress,
                .rollbackComplete,
                .rollbackFailed,
                .rollbackInProgress,
                .updateComplete,
                .updateCompleteCleanupInProgress,
                .updateFailed,
                .updateInProgress,
                .updateRollbackComplete,
                .updateRollbackCompleteCleanupInProgress,
                .updateRollbackFailed,
                .updateRollbackInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .reviewInProgress: return "REVIEW_IN_PROGRESS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateCompleteCleanupInProgress: return "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateRollbackComplete: return "UPDATE_ROLLBACK_COMPLETE"
            case .updateRollbackCompleteCleanupInProgress: return "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updateRollbackInProgress: return "UPDATE_ROLLBACK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackStatus(rawValue: rawValue) ?? StackStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case driftInformation = "DriftInformation"
        case lastUpdatedTime = "LastUpdatedTime"
        case parentId = "ParentId"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case templateDescription = "TemplateDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encodeTimestamp(deletionTime, format: .dateTime, forKey: ClientRuntime.Key("DeletionTime"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encodeTimestamp(lastUpdatedTime, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let templateDescription = templateDescription {
            try container.encode(templateDescription, forKey: ClientRuntime.Key("TemplateDescription"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.StackSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.StackSummary()
            value.stackId = try reader["StackId"].readIfPresent()
            value.stackName = try reader["StackName"].readIfPresent()
            value.templateDescription = try reader["TemplateDescription"].readIfPresent()
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: .dateTime)
            value.deletionTime = try reader["DeletionTime"].readTimestampIfPresent(format: .dateTime)
            value.stackStatus = try reader["StackStatus"].readIfPresent()
            value.stackStatusReason = try reader["StackStatusReason"].readIfPresent()
            value.parentId = try reader["ParentId"].readIfPresent()
            value.rootId = try reader["RootId"].readIfPresent()
            value.driftInformation = try reader["DriftInformation"].readIfPresent(readingClosure: CloudFormationClientTypes.StackDriftInformationSummary.readingClosure)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The StackSummary Data Type
    public struct StackSummary: Swift.Equatable {
        /// The time the stack was created.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the stack was deleted.
        public var deletionTime: ClientRuntime.Date?
        /// Summarizes information about whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For more information, see [Detecting Unregulated Configuration Changes to Stacks and Resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html).
        public var driftInformation: CloudFormationClientTypes.StackDriftInformationSummary?
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the direct parent of this stack. For the first level of nested stacks, the root stack is also the parent stack. For more information, see [Working with Nested Stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var parentId: Swift.String?
        /// For nested stacks--stacks created as resources for another stack--the stack ID of the top-level stack to which the nested stack ultimately belongs. For more information, see [Working with Nested Stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the CloudFormation User Guide.
        public var rootId: Swift.String?
        /// Unique stack identifier.
        public var stackId: Swift.String?
        /// The name associated with the stack.
        /// This member is required.
        public var stackName: Swift.String?
        /// The current status of the stack.
        /// This member is required.
        public var stackStatus: CloudFormationClientTypes.StackStatus?
        /// Success/Failure message associated with the stack status.
        public var stackStatusReason: Swift.String?
        /// The template description of the template used to create the stack.
        public var templateDescription: Swift.String?

        public init(
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformationSummary? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            parentId: Swift.String? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.driftInformation = driftInformation
            self.lastUpdatedTime = lastUpdatedTime
            self.parentId = parentId
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.templateDescription = templateDescription
        }
    }

}

extension StaleRequestException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = StaleRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// Another operation has been performed on this stack set since the specified operation was performed.
public struct StaleRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StaleRequestException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension StartResourceScanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        try container.encode("StartResourceScan", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension StartResourceScanInput {

    static func urlPathProvider(_ value: StartResourceScanInput) -> Swift.String? {
        return "/"
    }
}

public struct StartResourceScanInput: Swift.Equatable {
    /// A unique identifier for this StartResourceScan request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to start a new resource scan.
    public var clientRequestToken: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
    }
}

extension StartResourceScanOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StartResourceScanOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["StartResourceScanResult"]
            var value = StartResourceScanOutput()
            value.resourceScanId = try reader["ResourceScanId"].readIfPresent()
            return value
        }
    }
}

public struct StartResourceScanOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource scan. The format is arn:${Partition}:cloudformation:${Region}:${Account}:resourceScan/${Id}. An example is arn:aws:cloudformation:us-east-1:123456789012:resourceScan/f5b490f7-7ed4-428a-aa06-31ff25db0772 .
    public var resourceScanId: Swift.String?

    public init(
        resourceScanId: Swift.String? = nil
    )
    {
        self.resourceScanId = resourceScanId
    }
}

enum StartResourceScanOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "ResourceScanInProgress": return try await ResourceScanInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "ResourceScanLimitExceeded": return try await ResourceScanLimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension StopStackSetOperationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("StopStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension StopStackSetOperationInput {

    static func urlPathProvider(_ value: StopStackSetOperationInput) -> Swift.String? {
        return "/"
    }
}

public struct StopStackSetOperationInput: Swift.Equatable {
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// The ID of the stack operation.
    /// This member is required.
    public var operationId: Swift.String?
    /// The name or unique ID of the stack set that you want to stop the operation for.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension StopStackSetOperationOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<StopStackSetOperationOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            return StopStackSetOperationOutput()
        }
    }
}

public struct StopStackSetOperationOutput: Swift.Equatable {

    public init() { }
}

enum StopStackSetOperationOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationNotFoundException": return try await OperationNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes.Tag: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Tag, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Tag()
            value.key = try reader["Key"].readIfPresent()
            value.value = try reader["Value"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The Tag type enables you to specify a key-value pair that can be used to store information about an CloudFormation stack.
    public struct Tag: Swift.Equatable {
        /// Required. A string used to identify this tag. You can specify a maximum of 128 characters for a tag key. Tags owned by Amazon Web Services (Amazon Web Services) have the reserved prefix: aws:.
        /// This member is required.
        public var key: Swift.String?
        /// Required. A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.TemplateConfiguration: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionPolicy = "DeletionPolicy"
        case updateReplacePolicy = "UpdateReplacePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deletionPolicy = deletionPolicy {
            try container.encode(deletionPolicy, forKey: ClientRuntime.Key("DeletionPolicy"))
        }
        if let updateReplacePolicy = updateReplacePolicy {
            try container.encode(updateReplacePolicy, forKey: ClientRuntime.Key("UpdateReplacePolicy"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TemplateConfiguration, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TemplateConfiguration()
            value.deletionPolicy = try reader["DeletionPolicy"].readIfPresent()
            value.updateReplacePolicy = try reader["UpdateReplacePolicy"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The configuration details of a generated template.
    public struct TemplateConfiguration: Swift.Equatable {
        /// The DeletionPolicy assigned to resources in the generated template. Supported values are:
        ///
        /// * DELETE - delete all resources when the stack is deleted.
        ///
        /// * RETAIN - retain all resources when the stack is deleted.
        ///
        ///
        /// For more information, see [DeletionPolicy] attribute(https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html) in the CloudFormation User Guide.
        public var deletionPolicy: CloudFormationClientTypes.GeneratedTemplateDeletionPolicy?
        /// The UpdateReplacePolicy assigned to resources in the generated template. Supported values are:
        ///
        /// * DELETE - delete all resources when the resource is replaced during an update operation.
        ///
        /// * RETAIN - retain all resources when the resource is replaced during an update operation.
        ///
        ///
        /// For more information, see [UpdateReplacePolicy] attribute(https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) in the CloudFormation User Guide.
        public var updateReplacePolicy: CloudFormationClientTypes.GeneratedTemplateUpdateReplacePolicy?

        public init(
            deletionPolicy: CloudFormationClientTypes.GeneratedTemplateDeletionPolicy? = nil,
            updateReplacePolicy: CloudFormationClientTypes.GeneratedTemplateUpdateReplacePolicy? = nil
        )
        {
            self.deletionPolicy = deletionPolicy
            self.updateReplacePolicy = updateReplacePolicy
        }
    }

}

extension CloudFormationClientTypes {
    public enum TemplateFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case yaml
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateFormat] {
            return [
                .json,
                .yaml,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .yaml: return "YAML"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateFormat(rawValue: rawValue) ?? TemplateFormat.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.TemplateParameter: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterKey = "ParameterKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TemplateParameter, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TemplateParameter()
            value.parameterKey = try reader["ParameterKey"].readIfPresent()
            value.defaultValue = try reader["DefaultValue"].readIfPresent()
            value.noEcho = try reader["NoEcho"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The TemplateParameter data type.
    public struct TemplateParameter: Swift.Equatable {
        /// The default value associated with the parameter.
        public var defaultValue: Swift.String?
        /// User defined description associated with the parameter.
        public var description: Swift.String?
        /// Flag indicating whether the parameter should be displayed as plain text in logs and UIs.
        public var noEcho: Swift.Bool?
        /// The name associated with the parameter.
        public var parameterKey: Swift.String?

        public init(
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterKey: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterKey = parameterKey
        }
    }

}

extension CloudFormationClientTypes.TemplateProgress: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcesFailed = "ResourcesFailed"
        case resourcesPending = "ResourcesPending"
        case resourcesProcessing = "ResourcesProcessing"
        case resourcesSucceeded = "ResourcesSucceeded"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourcesFailed = resourcesFailed {
            try container.encode(resourcesFailed, forKey: ClientRuntime.Key("ResourcesFailed"))
        }
        if let resourcesPending = resourcesPending {
            try container.encode(resourcesPending, forKey: ClientRuntime.Key("ResourcesPending"))
        }
        if let resourcesProcessing = resourcesProcessing {
            try container.encode(resourcesProcessing, forKey: ClientRuntime.Key("ResourcesProcessing"))
        }
        if let resourcesSucceeded = resourcesSucceeded {
            try container.encode(resourcesSucceeded, forKey: ClientRuntime.Key("ResourcesSucceeded"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TemplateProgress, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TemplateProgress()
            value.resourcesSucceeded = try reader["ResourcesSucceeded"].readIfPresent()
            value.resourcesFailed = try reader["ResourcesFailed"].readIfPresent()
            value.resourcesProcessing = try reader["ResourcesProcessing"].readIfPresent()
            value.resourcesPending = try reader["ResourcesPending"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A summary of the progress of the template generation.
    public struct TemplateProgress: Swift.Equatable {
        /// The number of resources that failed the template generation.
        public var resourcesFailed: Swift.Int?
        /// The number of resources that are still pending the template generation.
        public var resourcesPending: Swift.Int?
        /// The number of resources that are in-process for the template generation.
        public var resourcesProcessing: Swift.Int?
        /// The number of resources that succeeded the template generation.
        public var resourcesSucceeded: Swift.Int?

        public init(
            resourcesFailed: Swift.Int? = nil,
            resourcesPending: Swift.Int? = nil,
            resourcesProcessing: Swift.Int? = nil,
            resourcesSucceeded: Swift.Int? = nil
        )
        {
            self.resourcesFailed = resourcesFailed
            self.resourcesPending = resourcesPending
            self.resourcesProcessing = resourcesProcessing
            self.resourcesSucceeded = resourcesSucceeded
        }
    }

}

extension CloudFormationClientTypes {
    public enum TemplateStage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case original
        case processed
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStage] {
            return [
                .original,
                .processed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .original: return "Original"
            case .processed: return "Processed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateStage(rawValue: rawValue) ?? TemplateStage.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.TemplateSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case generatedTemplateId = "GeneratedTemplateId"
        case generatedTemplateName = "GeneratedTemplateName"
        case lastUpdatedTime = "LastUpdatedTime"
        case numberOfResources = "NumberOfResources"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encodeTimestamp(creationTime, format: .dateTime, forKey: ClientRuntime.Key("CreationTime"))
        }
        if let generatedTemplateId = generatedTemplateId {
            try container.encode(generatedTemplateId, forKey: ClientRuntime.Key("GeneratedTemplateId"))
        }
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encodeTimestamp(lastUpdatedTime, format: .dateTime, forKey: ClientRuntime.Key("LastUpdatedTime"))
        }
        if let numberOfResources = numberOfResources {
            try container.encode(numberOfResources, forKey: ClientRuntime.Key("NumberOfResources"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TemplateSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TemplateSummary()
            value.generatedTemplateId = try reader["GeneratedTemplateId"].readIfPresent()
            value.generatedTemplateName = try reader["GeneratedTemplateName"].readIfPresent()
            value.status = try reader["Status"].readIfPresent()
            value.statusReason = try reader["StatusReason"].readIfPresent()
            value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: .dateTime)
            value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: .dateTime)
            value.numberOfResources = try reader["NumberOfResources"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The summary of a generated template.
    public struct TemplateSummary: Swift.Equatable {
        /// The time the generated template was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the generated template. The format is arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}. For example, arn:aws:cloudformation:us-east-1:123456789012:generatedtemplate/2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc .
        public var generatedTemplateId: Swift.String?
        /// The name of the generated template.
        public var generatedTemplateName: Swift.String?
        /// The time the generated template was last updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// The number of resources in the generated template. This is a total of resources in pending, in-progress, completed, and failed states.
        public var numberOfResources: Swift.Int?
        /// The status of the template generation. Supported values are:
        ///
        /// * CreatePending - the creation of the template is pending.
        ///
        /// * CreateInProgress - the creation of the template is in progress.
        ///
        /// * DeletePending - the deletion of the template is pending.
        ///
        /// * DeleteInProgress - the deletion of the template is in progress.
        ///
        /// * UpdatePending - the update of the template is pending.
        ///
        /// * UpdateInProgress - the update of the template is in progress.
        ///
        /// * Failed - the template operation failed.
        ///
        /// * Complete - the template operation is complete.
        public var status: CloudFormationClientTypes.GeneratedTemplateStatus?
        /// The reason for the current template generation status. This will provide more details if a failure happened.
        public var statusReason: Swift.String?

        public init(
            creationTime: ClientRuntime.Date? = nil,
            generatedTemplateId: Swift.String? = nil,
            generatedTemplateName: Swift.String? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            numberOfResources: Swift.Int? = nil,
            status: CloudFormationClientTypes.GeneratedTemplateStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.generatedTemplateId = generatedTemplateId
            self.generatedTemplateName = generatedTemplateName
            self.lastUpdatedTime = lastUpdatedTime
            self.numberOfResources = numberOfResources
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes.TemplateSummaryConfig: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case treatUnrecognizedResourceTypesAsWarnings = "TreatUnrecognizedResourceTypesAsWarnings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let treatUnrecognizedResourceTypesAsWarnings = treatUnrecognizedResourceTypesAsWarnings {
            try container.encode(treatUnrecognizedResourceTypesAsWarnings, forKey: ClientRuntime.Key("TreatUnrecognizedResourceTypesAsWarnings"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TemplateSummaryConfig, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TemplateSummaryConfig()
            value.treatUnrecognizedResourceTypesAsWarnings = try reader["TreatUnrecognizedResourceTypesAsWarnings"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Options for the GetTemplateSummary API action.
    public struct TemplateSummaryConfig: Swift.Equatable {
        /// If set to True, any unrecognized resource types generate warnings and not an error. Any unrecognized resource types are returned in the Warnings output parameter.
        public var treatUnrecognizedResourceTypesAsWarnings: Swift.Bool?

        public init(
            treatUnrecognizedResourceTypesAsWarnings: Swift.Bool? = nil
        )
        {
            self.treatUnrecognizedResourceTypesAsWarnings = treatUnrecognizedResourceTypesAsWarnings
        }
    }

}

extension TestTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case logDeliveryBucket = "LogDeliveryBucket"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let logDeliveryBucket = logDeliveryBucket {
            try container.encode(logDeliveryBucket, forKey: ClientRuntime.Key("LogDeliveryBucket"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("TestType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension TestTypeInput {

    static func urlPathProvider(_ value: TestTypeInput) -> Swift.String? {
        return "/"
    }
}

public struct TestTypeInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension. Conditional: You must specify Arn, or TypeName and Type.
    public var arn: Swift.String?
    /// The S3 bucket to which CloudFormation delivers the contract test execution logs. CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of PASSED or FAILED. The user calling TestType must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:
    ///
    /// * GetObject
    ///
    /// * PutObject
    ///
    ///
    /// For more information, see [Actions, Resources, and Condition Keys for Amazon S3](https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html) in the Amazon Web Services Identity and Access Management User Guide.
    public var logDeliveryBucket: Swift.String?
    /// The type of the extension to test. Conditional: You must specify Arn, or TypeName and Type.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension to test. Conditional: You must specify Arn, or TypeName and Type.
    public var typeName: Swift.String?
    /// The version of the extension to test. You can specify the version id with either Arn, or with TypeName and Type. If you don't specify a version, CloudFormation uses the default version of the extension in this account and Region for testing.
    public var versionId: Swift.String?

    public init(
        arn: Swift.String? = nil,
        logDeliveryBucket: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.logDeliveryBucket = logDeliveryBucket
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension TestTypeOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<TestTypeOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["TestTypeResult"]
            var value = TestTypeOutput()
            value.typeVersionArn = try reader["TypeVersionArn"].readIfPresent()
            return value
        }
    }
}

public struct TestTypeOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the extension.
    public var typeVersionArn: Swift.String?

    public init(
        typeVersionArn: Swift.String? = nil
    )
    {
        self.typeVersionArn = typeVersionArn
    }
}

enum TestTypeOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "CFNRegistryException": return try await CFNRegistryException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TypeNotFoundException": return try await TypeNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum ThirdPartyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hook
        case module
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ThirdPartyType] {
            return [
                .hook,
                .module,
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hook: return "HOOK"
            case .module: return "MODULE"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThirdPartyType(rawValue: rawValue) ?? ThirdPartyType.sdkUnknown(rawValue)
        }
    }
}

extension TokenAlreadyExistsException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TokenAlreadyExistsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// A client request token already exists.
public struct TokenAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TokenAlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.TypeConfigurationDetails: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case arn = "Arn"
        case configuration = "Configuration"
        case isDefaultConfiguration = "IsDefaultConfiguration"
        case lastUpdated = "LastUpdated"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alias = alias {
            try container.encode(alias, forKey: ClientRuntime.Key("Alias"))
        }
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let isDefaultConfiguration = isDefaultConfiguration {
            try container.encode(isDefaultConfiguration, forKey: ClientRuntime.Key("IsDefaultConfiguration"))
        }
        if let lastUpdated = lastUpdated {
            try container.encodeTimestamp(lastUpdated, format: .dateTime, forKey: ClientRuntime.Key("LastUpdated"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TypeConfigurationDetails, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TypeConfigurationDetails()
            value.arn = try reader["Arn"].readIfPresent()
            value.alias = try reader["Alias"].readIfPresent()
            value.configuration = try reader["Configuration"].readIfPresent()
            value.lastUpdated = try reader["LastUpdated"].readTimestampIfPresent(format: .dateTime)
            value.typeArn = try reader["TypeArn"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            value.isDefaultConfiguration = try reader["IsDefaultConfiguration"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Detailed information concerning the specification of a CloudFormation extension in a given account and Region. For more information, see [Configuring extensions at the account level](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration) in the CloudFormation User Guide.
    public struct TypeConfigurationDetails: Swift.Equatable {
        /// The alias specified for this configuration, if one was specified when the configuration was set.
        public var alias: Swift.String?
        /// The Amazon Resource Name (ARN) for the configuration data, in this account and Region.
        public var arn: Swift.String?
        /// A JSON string specifying the configuration data for the extension, in this account and Region. If a configuration hasn't been set for a specified extension, CloudFormation returns {}.
        public var configuration: Swift.String?
        /// Whether this configuration data is the default configuration for the extension.
        public var isDefaultConfiguration: Swift.Bool?
        /// When the configuration data was last updated for this extension. If a configuration hasn't been set for a specified extension, CloudFormation returns null.
        public var lastUpdated: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the extension, in this account and Region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and Region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and Region.
        public var typeArn: Swift.String?
        /// The name of the extension.
        public var typeName: Swift.String?

        public init(
            alias: Swift.String? = nil,
            arn: Swift.String? = nil,
            configuration: Swift.String? = nil,
            isDefaultConfiguration: Swift.Bool? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            typeArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.alias = alias
            self.arn = arn
            self.configuration = configuration
            self.isDefaultConfiguration = isDefaultConfiguration
            self.lastUpdated = lastUpdated
            self.typeArn = typeArn
            self.typeName = typeName
        }
    }

}

extension CloudFormationClientTypes.TypeConfigurationIdentifier: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case typeArn = "TypeArn"
        case typeConfigurationAlias = "TypeConfigurationAlias"
        case typeConfigurationArn = "TypeConfigurationArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeConfigurationAlias = typeConfigurationAlias {
            try container.encode(typeConfigurationAlias, forKey: ClientRuntime.Key("TypeConfigurationAlias"))
        }
        if let typeConfigurationArn = typeConfigurationArn {
            try container.encode(typeConfigurationArn, forKey: ClientRuntime.Key("TypeConfigurationArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TypeConfigurationIdentifier, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TypeConfigurationIdentifier()
            value.typeArn = try reader["TypeArn"].readIfPresent()
            value.typeConfigurationAlias = try reader["TypeConfigurationAlias"].readIfPresent()
            value.typeConfigurationArn = try reader["TypeConfigurationArn"].readIfPresent()
            value.type = try reader["Type"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Identifying information for the configuration of a CloudFormation extension.
    public struct TypeConfigurationIdentifier: Swift.Equatable {
        /// The type of extension.
        public var type: CloudFormationClientTypes.ThirdPartyType?
        /// The Amazon Resource Name (ARN) for the extension, in this account and Region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and Region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and Region.
        public var typeArn: Swift.String?
        /// The alias specified for this configuration, if one was specified when the configuration was set.
        public var typeConfigurationAlias: Swift.String?
        /// The Amazon Resource Name (ARN) for the configuration, in this account and Region.
        public var typeConfigurationArn: Swift.String?
        /// The name of the extension type to which this configuration applies.
        public var typeName: Swift.String?

        public init(
            type: CloudFormationClientTypes.ThirdPartyType? = nil,
            typeArn: Swift.String? = nil,
            typeConfigurationAlias: Swift.String? = nil,
            typeConfigurationArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.type = type
            self.typeArn = typeArn
            self.typeConfigurationAlias = typeConfigurationAlias
            self.typeConfigurationArn = typeConfigurationArn
            self.typeName = typeName
        }
    }

}

extension TypeConfigurationNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TypeConfigurationNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified extension configuration can't be found.
public struct TypeConfigurationNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An message with details about the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TypeConfigurationNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.TypeFilters: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category = "Category"
        case publisherId = "PublisherId"
        case typeNamePrefix = "TypeNamePrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let category = category {
            try container.encode(category, forKey: ClientRuntime.Key("Category"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let typeNamePrefix = typeNamePrefix {
            try container.encode(typeNamePrefix, forKey: ClientRuntime.Key("TypeNamePrefix"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TypeFilters, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TypeFilters()
            value.category = try reader["Category"].readIfPresent()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            value.typeNamePrefix = try reader["TypeNamePrefix"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Filter criteria to use in determining which extensions to return.
    public struct TypeFilters: Swift.Equatable {
        /// The category of extensions to return.
        ///
        /// * REGISTERED: Private extensions that have been registered for this account and Region.
        ///
        /// * ACTIVATED: Public extensions that have been activated for this account and Region.
        ///
        /// * THIRD_PARTY: Extensions available for use from publishers other than Amazon. This includes:
        ///
        /// * Private extensions registered in the account.
        ///
        /// * Public extensions from publishers other than Amazon, whether activated or not.
        ///
        ///
        ///
        ///
        /// * AWS_TYPES: Extensions available for use from Amazon.
        public var category: CloudFormationClientTypes.Category?
        /// The id of the publisher of the extension. Extensions published by Amazon aren't assigned a publisher ID. Use the AWS_TYPES category to specify a list of types published by Amazon.
        public var publisherId: Swift.String?
        /// A prefix to use as a filter for results.
        public var typeNamePrefix: Swift.String?

        public init(
            category: CloudFormationClientTypes.Category? = nil,
            publisherId: Swift.String? = nil,
            typeNamePrefix: Swift.String? = nil
        )
        {
            self.category = category
            self.publisherId = publisherId
            self.typeNamePrefix = typeNamePrefix
        }
    }

}

extension TypeNotFoundException {

    static func responseErrorBinding(httpResponse: ClientRuntime.HttpResponse, reader: SmithyXML.Reader, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws -> Swift.Error {
        var value = TypeNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = httpResponse
        value.requestID = requestID
        value.message = message
        return value
    }
}

/// The specified extension doesn't exist in the CloudFormation registry.
public struct TypeNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// An message with details about the error that occurred.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TypeNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudFormationClientTypes.TypeSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isActivated = "IsActivated"
        case lastUpdated = "LastUpdated"
        case latestPublicVersion = "LatestPublicVersion"
        case originalTypeName = "OriginalTypeName"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case publisherIdentity = "PublisherIdentity"
        case publisherName = "PublisherName"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: ClientRuntime.Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isActivated = isActivated {
            try container.encode(isActivated, forKey: ClientRuntime.Key("IsActivated"))
        }
        if let lastUpdated = lastUpdated {
            try container.encodeTimestamp(lastUpdated, format: .dateTime, forKey: ClientRuntime.Key("LastUpdated"))
        }
        if let latestPublicVersion = latestPublicVersion {
            try container.encode(latestPublicVersion, forKey: ClientRuntime.Key("LatestPublicVersion"))
        }
        if let originalTypeName = originalTypeName {
            try container.encode(originalTypeName, forKey: ClientRuntime.Key("OriginalTypeName"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let publisherIdentity = publisherIdentity {
            try container.encode(publisherIdentity, forKey: ClientRuntime.Key("PublisherIdentity"))
        }
        if let publisherName = publisherName {
            try container.encode(publisherName, forKey: ClientRuntime.Key("PublisherName"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TypeSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TypeSummary()
            value.type = try reader["Type"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            value.defaultVersionId = try reader["DefaultVersionId"].readIfPresent()
            value.typeArn = try reader["TypeArn"].readIfPresent()
            value.lastUpdated = try reader["LastUpdated"].readTimestampIfPresent(format: .dateTime)
            value.description = try reader["Description"].readIfPresent()
            value.publisherId = try reader["PublisherId"].readIfPresent()
            value.originalTypeName = try reader["OriginalTypeName"].readIfPresent()
            value.publicVersionNumber = try reader["PublicVersionNumber"].readIfPresent()
            value.latestPublicVersion = try reader["LatestPublicVersion"].readIfPresent()
            value.publisherIdentity = try reader["PublisherIdentity"].readIfPresent()
            value.publisherName = try reader["PublisherName"].readIfPresent()
            value.isActivated = try reader["IsActivated"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains summary information about the specified CloudFormation extension.
    public struct TypeSummary: Swift.Equatable {
        /// The ID of the default version of the extension. The default version is used when the extension version isn't specified. This applies only to private extensions you have registered in your account. For public extensions, both those provided by Amazon and published by third parties, CloudFormation returns null. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html). To set the default version of an extension, use [SetTypeDefaultVersion].
        public var defaultVersionId: Swift.String?
        /// The description of the extension.
        public var description: Swift.String?
        /// Whether the extension is activated for this account and Region. This applies only to third-party public extensions. Extensions published by Amazon are activated by default.
        public var isActivated: Swift.Bool?
        /// When the specified extension version was registered. This applies only to:
        ///
        /// * Private extensions you have registered in your account. For more information, see [RegisterType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html).
        ///
        /// * Public extensions you have activated in your account with auto-update specified. For more information, see [ActivateType](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html).
        ///
        ///
        /// For all other extension types, CloudFormation returns null.
        public var lastUpdated: ClientRuntime.Date?
        /// For public extensions that have been activated for this account and Region, the latest version of the public extension that is available. For any extensions other than activated third-arty extensions, CloudFormation returns null. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and Region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var latestPublicVersion: Swift.String?
        /// For public extensions that have been activated for this account and Region, the type name of the public extension. If you specified a TypeNameAlias when enabling the extension in this account and Region, CloudFormation treats that alias as the extension's type name within the account and Region, not the type name of the public extension. For more information, see [Specifying aliases to refer to extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-alias) in the CloudFormation User Guide.
        public var originalTypeName: Swift.String?
        /// For public extensions that have been activated for this account and Region, the version of the public extension to be used for CloudFormation operations in this account and Region. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and Region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var publicVersionNumber: Swift.String?
        /// The ID of the extension publisher, if the extension is published by a third party. Extensions published by Amazon don't return a publisher ID.
        public var publisherId: Swift.String?
        /// The service used to verify the publisher identity. For more information, see [Registering your account to publish CloudFormation extensions](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html) in the CFN-CLI User Guide for Extension Development.
        public var publisherIdentity: CloudFormationClientTypes.IdentityProvider?
        /// The publisher name, as defined in the public profile for that publisher in the service used to verify the publisher identity.
        public var publisherName: Swift.String?
        /// The kind of extension.
        public var type: CloudFormationClientTypes.RegistryType?
        /// The Amazon Resource Name (ARN) of the extension.
        public var typeArn: Swift.String?
        /// The name of the extension. If you specified a TypeNameAlias when you [activate this extension](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in your account and Region, CloudFormation considers that alias as the type name.
        public var typeName: Swift.String?

        public init(
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            isActivated: Swift.Bool? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            latestPublicVersion: Swift.String? = nil,
            originalTypeName: Swift.String? = nil,
            publicVersionNumber: Swift.String? = nil,
            publisherId: Swift.String? = nil,
            publisherIdentity: CloudFormationClientTypes.IdentityProvider? = nil,
            publisherName: Swift.String? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.isActivated = isActivated
            self.lastUpdated = lastUpdated
            self.latestPublicVersion = latestPublicVersion
            self.originalTypeName = originalTypeName
            self.publicVersionNumber = publicVersionNumber
            self.publisherId = publisherId
            self.publisherIdentity = publisherIdentity
            self.publisherName = publisherName
            self.type = type
            self.typeArn = typeArn
            self.typeName = typeName
        }
    }

}

extension CloudFormationClientTypes {
    public enum TypeTestsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case notTested
        case passed
        case sdkUnknown(Swift.String)

        public static var allCases: [TypeTestsStatus] {
            return [
                .failed,
                .inProgress,
                .notTested,
                .passed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notTested: return "NOT_TESTED"
            case .passed: return "PASSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TypeTestsStatus(rawValue: rawValue) ?? TypeTestsStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.TypeVersionSummary: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case description = "Description"
        case isDefaultVersion = "IsDefaultVersion"
        case publicVersionNumber = "PublicVersionNumber"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isDefaultVersion = isDefaultVersion {
            try container.encode(isDefaultVersion, forKey: ClientRuntime.Key("IsDefaultVersion"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let timeCreated = timeCreated {
            try container.encodeTimestamp(timeCreated, format: .dateTime, forKey: ClientRuntime.Key("TimeCreated"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.TypeVersionSummary, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.TypeVersionSummary()
            value.type = try reader["Type"].readIfPresent()
            value.typeName = try reader["TypeName"].readIfPresent()
            value.versionId = try reader["VersionId"].readIfPresent()
            value.isDefaultVersion = try reader["IsDefaultVersion"].readIfPresent()
            value.arn = try reader["Arn"].readIfPresent()
            value.timeCreated = try reader["TimeCreated"].readTimestampIfPresent(format: .dateTime)
            value.description = try reader["Description"].readIfPresent()
            value.publicVersionNumber = try reader["PublicVersionNumber"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains summary information about a specific version of a CloudFormation extension.
    public struct TypeVersionSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the extension version.
        public var arn: Swift.String?
        /// The description of the extension version.
        public var description: Swift.String?
        /// Whether the specified extension version is set as the default version. This applies only to private extensions you have registered in your account, and extensions published by Amazon. For public third-party extensions, CloudFormation returns null.
        public var isDefaultVersion: Swift.Bool?
        /// For public extensions that have been activated for this account and Region, the version of the public extension to be used for CloudFormation operations in this account and Region. For any extensions other than activated third-arty extensions, CloudFormation returns null. How you specified AutoUpdate when enabling the extension affects whether CloudFormation automatically updates the extension in this account and Region when a new version is released. For more information, see [Setting CloudFormation to automatically use new versions of extensions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html#registry-public-enable-auto) in the CloudFormation User Guide.
        public var publicVersionNumber: Swift.String?
        /// When the version was registered.
        public var timeCreated: ClientRuntime.Date?
        /// The kind of extension.
        public var type: CloudFormationClientTypes.RegistryType?
        /// The name of the extension.
        public var typeName: Swift.String?
        /// The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it's registered.
        public var versionId: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            isDefaultVersion: Swift.Bool? = nil,
            publicVersionNumber: Swift.String? = nil,
            timeCreated: ClientRuntime.Date? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.isDefaultVersion = isDefaultVersion
            self.publicVersionNumber = publicVersionNumber
            self.timeCreated = timeCreated
            self.type = type
            self.typeName = typeName
            self.versionId = versionId
        }
    }

}

extension UpdateGeneratedTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addResources = "AddResources"
        case generatedTemplateName = "GeneratedTemplateName"
        case newGeneratedTemplateName = "NewGeneratedTemplateName"
        case refreshAllResources = "RefreshAllResources"
        case removeResources = "RemoveResources"
        case templateConfiguration = "TemplateConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addResources = addResources {
            if !addResources.isEmpty {
                var addResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddResources"))
                for (index0, resourcedefinition0) in addResources.enumerated() {
                    try addResourcesContainer.encode(resourcedefinition0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var addResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddResources"))
                try addResourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let generatedTemplateName = generatedTemplateName {
            try container.encode(generatedTemplateName, forKey: ClientRuntime.Key("GeneratedTemplateName"))
        }
        if let newGeneratedTemplateName = newGeneratedTemplateName {
            try container.encode(newGeneratedTemplateName, forKey: ClientRuntime.Key("NewGeneratedTemplateName"))
        }
        if let refreshAllResources = refreshAllResources {
            try container.encode(refreshAllResources, forKey: ClientRuntime.Key("RefreshAllResources"))
        }
        if let removeResources = removeResources {
            if !removeResources.isEmpty {
                var removeResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveResources"))
                for (index0, logicalresourceid0) in removeResources.enumerated() {
                    try removeResourcesContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var removeResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveResources"))
                try removeResourcesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateConfiguration = templateConfiguration {
            try container.encode(templateConfiguration, forKey: ClientRuntime.Key("TemplateConfiguration"))
        }
        try container.encode("UpdateGeneratedTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateGeneratedTemplateInput {

    static func urlPathProvider(_ value: UpdateGeneratedTemplateInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateGeneratedTemplateInput: Swift.Equatable {
    /// An optional list of resources to be added to the generated template.
    public var addResources: [CloudFormationClientTypes.ResourceDefinition]?
    /// The name or Amazon Resource Name (ARN) of a generated template.
    /// This member is required.
    public var generatedTemplateName: Swift.String?
    /// An optional new name to assign to the generated template.
    public var newGeneratedTemplateName: Swift.String?
    /// If true, update the resource properties in the generated template with their current live state. This feature is useful when the resource properties in your generated a template does not reflect the live state of the resource properties. This happens when a user update the resource properties after generating a template.
    public var refreshAllResources: Swift.Bool?
    /// A list of logical ids for resources to remove from the generated template.
    public var removeResources: [Swift.String]?
    /// The configuration details of the generated template, including the DeletionPolicy and UpdateReplacePolicy.
    public var templateConfiguration: CloudFormationClientTypes.TemplateConfiguration?

    public init(
        addResources: [CloudFormationClientTypes.ResourceDefinition]? = nil,
        generatedTemplateName: Swift.String? = nil,
        newGeneratedTemplateName: Swift.String? = nil,
        refreshAllResources: Swift.Bool? = nil,
        removeResources: [Swift.String]? = nil,
        templateConfiguration: CloudFormationClientTypes.TemplateConfiguration? = nil
    )
    {
        self.addResources = addResources
        self.generatedTemplateName = generatedTemplateName
        self.newGeneratedTemplateName = newGeneratedTemplateName
        self.refreshAllResources = refreshAllResources
        self.removeResources = removeResources
        self.templateConfiguration = templateConfiguration
    }
}

extension UpdateGeneratedTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateGeneratedTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdateGeneratedTemplateResult"]
            var value = UpdateGeneratedTemplateOutput()
            value.generatedTemplateId = try reader["GeneratedTemplateId"].readIfPresent()
            return value
        }
    }
}

public struct UpdateGeneratedTemplateOutput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the generated template. The format is arn:${Partition}:cloudformation:${Region}:${Account}:generatedtemplate/${Id}. For example, arn:aws:cloudformation:us-east-1:123456789012:generatedtemplate/2e8465c1-9a80-43ea-a3a3-4f2d692fe6dc .
    public var generatedTemplateId: Swift.String?

    public init(
        generatedTemplateId: Swift.String? = nil
    )
    {
        self.generatedTemplateId = generatedTemplateId
    }
}

enum UpdateGeneratedTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "AlreadyExistsException": return try await AlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "GeneratedTemplateNotFound": return try await GeneratedTemplateNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "LimitExceededException": return try await LimitExceededException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case retainExceptOnCreate = "RetainExceptOnCreate"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyDuringUpdateBody = "StackPolicyDuringUpdateBody"
        case stackPolicyDuringUpdateURL = "StackPolicyDuringUpdateURL"
        case stackPolicyURL = "StackPolicyURL"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let notificationARNs = notificationARNs {
            if !notificationARNs.isEmpty {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                for (index0, notificationarn0) in notificationARNs.enumerated() {
                    try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
                try notificationARNsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceTypes = resourceTypes {
            if !resourceTypes.isEmpty {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                for (index0, resourcetype0) in resourceTypes.enumerated() {
                    try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
                try resourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let retainExceptOnCreate = retainExceptOnCreate {
            try container.encode(retainExceptOnCreate, forKey: ClientRuntime.Key("RetainExceptOnCreate"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody {
            try container.encode(stackPolicyDuringUpdateBody, forKey: ClientRuntime.Key("StackPolicyDuringUpdateBody"))
        }
        if let stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL {
            try container.encode(stackPolicyDuringUpdateURL, forKey: ClientRuntime.Key("StackPolicyDuringUpdateURL"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackInput {

    static func urlPathProvider(_ value: UpdateStackInput) -> Swift.String? {
        return "/"
    }
}

/// The input for an [UpdateStack] action.
public struct UpdateStackInput: Swift.Equatable {
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation. If you want to update a stack from a stack template that contains macros and nested stacks, you must update the stack directly from the template using this capability. You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs. Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html).
    ///
    ///
    /// Only one of the Capabilities and ResourceType parameters can be specified.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// A unique identifier for this UpdateStack request. Specify this token if you plan to retry requests so that CloudFormation knows that you're not attempting to update a stack with the same name. You might retry UpdateStack requests to ensure that CloudFormation successfully received them. All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a CreateStack operation with the token token1, then all the StackEvents generated by that operation will have ClientRequestToken set as token1. In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format Console-StackOperation-ID, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    public var clientRequestToken: Swift.String?
    /// Preserve the state of previously provisioned resources when an operation fails. Default: False
    public var disableRollback: Swift.Bool?
    /// Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics.
    public var notificationARNs: [Swift.String]?
    /// A list of Parameter structures that specify input parameters for the stack. For more information, see the [Parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html) data type.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// The template resource types that you have permissions to work with for this update stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance. If the list of resource types doesn't include a resource that you're updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see [Controlling Access with Identity and Access Management](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html). Only one of the Capabilities and ResourceType parameters can be specified.
    public var resourceTypes: [Swift.String]?
    /// When set to true, newly created resources are deleted when the operation rolls back. This includes newly created resources marked with a deletion policy of Retain. Default: false
    public var retainExceptOnCreate: Swift.Bool?
    /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege. If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.
    public var roleARN: Swift.String?
    /// The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards.
    public var rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// The name or unique stack ID of the stack to update.
    /// This member is required.
    public var stackName: Swift.String?
    /// Structure containing a new stack policy body. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don't specify a stack policy, the current policy that is associated with the stack is unchanged.
    public var stackPolicyBody: Swift.String?
    /// Structure containing the temporary overriding stack policy body. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don't specify a stack policy, the current policy that is associated with the stack will be used.
    public var stackPolicyDuringUpdateBody: Swift.String?
    /// Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyDuringUpdateBody or the StackPolicyDuringUpdateURL parameter, but not both. If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don't specify a stack policy, the current policy that is associated with the stack will be used.
    public var stackPolicyDuringUpdateURL: Swift.String?
    /// Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the StackPolicyBody or the StackPolicyURL parameter, but not both. You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don't specify a stack policy, the current policy that is associated with the stack is unchanged.
    public var stackPolicyURL: Swift.String?
    /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags. If you don't specify this parameter, CloudFormation doesn't modify the stack's tags. If you specify an empty value, CloudFormation removes all associated tags.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide.) Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template that's located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var templateURL: Swift.String?
    /// Reuse the existing template that is associated with the stack that you are updating. Conditional: You must specify only one of the following parameters: TemplateBody, TemplateURL, or set the UsePreviousTemplate to true.
    public var usePreviousTemplate: Swift.Bool?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        retainExceptOnCreate: Swift.Bool? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyDuringUpdateBody: Swift.String? = nil,
        stackPolicyDuringUpdateURL: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.retainExceptOnCreate = retainExceptOnCreate
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody
        self.stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

extension UpdateStackInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameterOverrides = "ParameterOverrides"
        case regions = "Regions"
        case stackSetName = "StackSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            if !parameterOverrides.isEmpty {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                for (index0, parameter0) in parameterOverrides.enumerated() {
                    try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
                try parameterOverridesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("UpdateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackInstancesInput {

    static func urlPathProvider(_ value: UpdateStackInstancesInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateStackInstancesInput: Swift.Equatable {
    /// [Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. You can specify Accounts or DeploymentTargets, but not both.
    public var accounts: [Swift.String]?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// [Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won't use the overridden values. You can specify Accounts or DeploymentTargets, but not both.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// The unique identifier for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, the SDK generates one automatically.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of input parameters whose values you want to update for the specified stack instances. Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:
    ///
    /// * To override the current value for a parameter, include the parameter and specify its value.
    ///
    /// * To leave an overridden parameter set to its present value, include the parameter and specify UsePreviousValue as true. (You can't specify both a value and set UsePreviousValue to true.)
    ///
    /// * To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don't include the parameter in the list.
    ///
    /// * To leave all parameters set to their present values, don't specify this property at all.
    ///
    ///
    /// During stack set updates, any parameter values overridden for a stack instance aren't updated, but retain their overridden value. You can only override the parameter values that are specified in the stack set; to add or delete a parameter itself, use UpdateStackSet to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use [UpdateStackSet](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html) to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using UpdateStackInstances.
    public var parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.
    /// This member is required.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set associated with the stack instances.
    /// This member is required.
    public var stackSetName: Swift.String?

    public init(
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

extension UpdateStackInstancesOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateStackInstancesOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdateStackInstancesResult"]
            var value = UpdateStackInstancesOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct UpdateStackInstancesOutput: Swift.Equatable {
    /// The unique identifier for this stack set operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum UpdateStackInstancesOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationIdAlreadyExistsException": return try await OperationIdAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackInstanceNotFoundException": return try await StackInstanceNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StaleRequestException": return try await StaleRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateStackOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateStackOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdateStackResult"]
            var value = UpdateStackOutput()
            value.stackId = try reader["StackId"].readIfPresent()
            return value
        }
    }
}

/// The output for an [UpdateStack] action.
public struct UpdateStackOutput: Swift.Equatable {
    /// Unique identifier of the stack.
    public var stackId: Swift.String?

    public init(
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

enum UpdateStackOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InsufficientCapabilitiesException": return try await InsufficientCapabilitiesException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "TokenAlreadyExistsException": return try await TokenAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateStackSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case callAs = "CallAs"
        case capabilities = "Capabilities"
        case deploymentTargets = "DeploymentTargets"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case regions = "Regions"
        case stackSetName = "StackSetName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            if !accounts.isEmpty {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                for (index0, account0) in accounts.enumerated() {
                    try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
                try accountsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            if !capabilities.isEmpty {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                for (index0, capability0) in capabilities.enumerated() {
                    try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
                try capabilitiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameters = parameters {
            if !parameters.isEmpty {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                for (index0, parameter0) in parameters.enumerated() {
                    try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
                try parametersContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let regions = regions {
            if !regions.isEmpty {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                for (index0, region0) in regions.enumerated() {
                    try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
                try regionsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                for (index0, tag0) in tags.enumerated() {
                    try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
                try tagsContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateStackSetInput {

    static func urlPathProvider(_ value: UpdateStackSetInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateStackSetInput: Swift.Equatable {
    /// [Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances. To update all the stack instances associated with this stack set, don't specify the Accounts or Regions properties. If the stack set update includes changes to the template (that is, if the TemplateBody or TemplateURL properties are specified), or the Parameters property, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.
    public var accounts: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the IAM role to use to update this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see [Granting Permissions for Stack Set Operations](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html) in the CloudFormation User Guide. If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.
    public var administrationRoleARN: Swift.String?
    /// [Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU). If you specify AutoDeployment, don't specify DeploymentTargets or Regions.
    public var autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// [Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. By default, SELF is specified. Use SELF for stack sets with self-managed permissions.
    ///
    /// * If you are signed in to the management account, specify SELF.
    ///
    /// * If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN. Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see [Register a delegated administrator](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html) in the CloudFormation User Guide.
    public var callAs: CloudFormationClientTypes.CallAs?
    /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.
    ///
    /// * CAPABILITY_IAM and CAPABILITY_NAMED_IAM Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities. The following IAM resources require you to specify either the CAPABILITY_IAM or CAPABILITY_NAMED_IAM capability.
    ///
    /// * If you have IAM resources, you can specify either capability.
    ///
    /// * If you have IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM.
    ///
    /// * If you don't specify either of these capabilities, CloudFormation returns an InsufficientCapabilities error.
    ///
    ///
    /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
    ///
    /// * [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html)
    ///
    /// * [ AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
    ///
    /// * [ AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
    ///
    /// * [ AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html)
    ///
    /// * [ AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
    ///
    /// * [ AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
    ///
    /// * [ AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html)
    ///
    ///
    /// For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    ///
    /// * CAPABILITY_AUTO_EXPAND Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see [Using CloudFormation Macros to Perform Custom Processing on Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html). Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// [Service-managed permissions] The Organizations accounts in which to update associated stack instances. To update all the stack instances associated with this stack set, do not specify DeploymentTargets or Regions. If the stack set update includes changes to the template (that is, if TemplateBody or TemplateURL is specified), or the Parameters, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn't include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.
    public var deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// A brief description of updates that you are making.
    public var description: Swift.String?
    /// The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation. Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets. If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.
    public var executionRoleName: Swift.String?
    /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
    public var managedExecution: CloudFormationClientTypes.ManagedExecution?
    /// The unique ID for this stack set operation. The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them. If you don't specify an operation ID, CloudFormation generates one automatically. Repeating this stack set operation with a new operation ID retries all stack instances whose status is OUTDATED.
    public var operationId: Swift.String?
    /// Preferences for how CloudFormation performs this stack set operation.
    public var operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// A list of input parameters for the stack set template.
    public var parameters: [CloudFormationClientTypes.Parameter]?
    /// Describes how the IAM roles required for stack set operations are created. You cannot modify PermissionModel if there are stack instances associated with your stack set.
    ///
    /// * With self-managed permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see [Grant Self-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html).
    ///
    /// * With service-managed permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see [Grant Service-Managed Stack Set Permissions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html).
    public var permissionModel: CloudFormationClientTypes.PermissionModels?
    /// The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances. To update all the stack instances associated with this stack set, do not specify the Accounts or Regions properties. If the stack set update includes changes to the template (that is, if the TemplateBody or TemplateURL properties are specified), or the Parameters property, CloudFormation marks all stack instances with a status of OUTDATED prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.
    public var regions: [Swift.String]?
    /// The name or unique ID of the stack set that you want to update.
    /// This member is required.
    public var stackSetName: Swift.String?
    /// The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags. If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:
    ///
    /// * If you don't specify this parameter, CloudFormation doesn't modify the stack's tags.
    ///
    /// * If you specify any tags using this parameter, you must specify all the tags that you want associated with this stack set, even tags you've specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don't include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.
    ///
    /// * If you specify an empty value, CloudFormation removes all currently associated tags.
    ///
    ///
    /// If you specify new tags as part of an UpdateStackSet action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don't have the necessary permission(s), the entire UpdateStackSet action fails with an access denied error, and the stack set is not updated.
    public var tags: [CloudFormationClientTypes.Tag]?
    /// The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var templateBody: Swift.String?
    /// The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var templateURL: Swift.String?
    /// Use the existing template that's associated with the stack set that you're updating. Conditional: You must specify only one of the following parameters: TemplateBody or TemplateURL—or set UsePreviousTemplate to true.
    public var usePreviousTemplate: Swift.Bool?

    public init(
        accounts: [Swift.String]? = nil,
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        managedExecution: CloudFormationClientTypes.ManagedExecution? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.accounts = accounts
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.deploymentTargets = deploymentTargets
        self.description = description
        self.executionRoleName = executionRoleName
        self.managedExecution = managedExecution
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.regions = regions
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

extension UpdateStackSetOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateStackSetOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdateStackSetResult"]
            var value = UpdateStackSetOutput()
            value.operationId = try reader["OperationId"].readIfPresent()
            return value
        }
    }
}

public struct UpdateStackSetOutput: Swift.Equatable {
    /// The unique ID for this stack set operation.
    public var operationId: Swift.String?

    public init(
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

enum UpdateStackSetOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                case "InvalidOperationException": return try await InvalidOperationException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationIdAlreadyExistsException": return try await OperationIdAlreadyExistsException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "OperationInProgressException": return try await OperationInProgressException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackInstanceNotFoundException": return try await StackInstanceNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StackSetNotFoundException": return try await StackSetNotFoundException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                case "StaleRequestException": return try await StaleRequestException.responseErrorBinding(httpResponse: httpResponse, reader: reader, message: message, requestID: requestID)
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension UpdateTerminationProtectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableTerminationProtection = "EnableTerminationProtection"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("UpdateTerminationProtection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension UpdateTerminationProtectionInput {

    static func urlPathProvider(_ value: UpdateTerminationProtectionInput) -> Swift.String? {
        return "/"
    }
}

public struct UpdateTerminationProtectionInput: Swift.Equatable {
    /// Whether to enable termination protection on the specified stack.
    /// This member is required.
    public var enableTerminationProtection: Swift.Bool?
    /// The name or unique ID of the stack for which you want to set termination protection.
    /// This member is required.
    public var stackName: Swift.String?

    public init(
        enableTerminationProtection: Swift.Bool? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.enableTerminationProtection = enableTerminationProtection
        self.stackName = stackName
    }
}

extension UpdateTerminationProtectionOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<UpdateTerminationProtectionOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["UpdateTerminationProtectionResult"]
            var value = UpdateTerminationProtectionOutput()
            value.stackId = try reader["StackId"].readIfPresent()
            return value
        }
    }
}

public struct UpdateTerminationProtectionOutput: Swift.Equatable {
    /// The unique ID of the stack.
    public var stackId: Swift.String?

    public init(
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

enum UpdateTerminationProtectionOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension ValidateTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("ValidateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

extension ValidateTemplateInput {

    static func urlPathProvider(_ value: ValidateTemplateInput) -> Swift.String? {
        return "/"
    }
}

/// The input for [ValidateTemplate] action.
public struct ValidateTemplateInput: Swift.Equatable {
    /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateBody: Swift.String?
    /// Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to [Template Anatomy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html) in the CloudFormation User Guide. Conditional: You must pass TemplateURL or TemplateBody. If both are passed, only TemplateBody is used.
    public var templateURL: Swift.String?

    public init(
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension ValidateTemplateOutput {

    static var httpBinding: ClientRuntime.HTTPResponseOutputBinding<ValidateTemplateOutput, SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["ValidateTemplateResult"]
            var value = ValidateTemplateOutput()
            value.capabilities = try reader["Capabilities"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.Capability.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.capabilitiesReason = try reader["CapabilitiesReason"].readIfPresent()
            value.declaredTransforms = try reader["DeclaredTransforms"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            value.description = try reader["Description"].readIfPresent()
            value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.TemplateParameter.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

/// The output for [ValidateTemplate] action.
public struct ValidateTemplateOutput: Swift.Equatable {
    /// The capabilities found within the template. If your template contains IAM resources, you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when you use the [CreateStack] or [UpdateStack] actions with your template; otherwise, those actions return an InsufficientCapabilities error. For more information, see [Acknowledging IAM Resources in CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    public var capabilities: [CloudFormationClientTypes.Capability]?
    /// The list of resources that generated the values in the Capabilities response element.
    public var capabilitiesReason: Swift.String?
    /// A list of the transforms that are declared in the template.
    public var declaredTransforms: [Swift.String]?
    /// The description found within the template.
    public var description: Swift.String?
    /// A list of TemplateParameter structures.
    public var parameters: [CloudFormationClientTypes.TemplateParameter]?

    public init(
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.TemplateParameter]? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.parameters = parameters
    }
}

enum ValidateTemplateOutputError {

    static var httpBinding: ClientRuntime.HTTPResponseErrorBinding<SmithyXML.Reader> {
        { httpResponse, responseDocumentClosure in
            let responseReader = try await responseDocumentClosure(httpResponse)
            let reader = responseReader["Error"]
            let requestID: String? = try responseReader["RequestId"].readIfPresent()
            let code: String? = try reader["Code"].readIfPresent()
            let message: String? = try reader["Message"].readIfPresent()
            switch code {
                default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: message, requestID: requestID, typeName: code)
            }
        }
    }
}

extension CloudFormationClientTypes {
    public enum VersionBump: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case major
        case minor
        case sdkUnknown(Swift.String)

        public static var allCases: [VersionBump] {
            return [
                .major,
                .minor,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .major: return "MAJOR"
            case .minor: return "MINOR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VersionBump(rawValue: rawValue) ?? VersionBump.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Visibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [Visibility] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Visibility(rawValue: rawValue) ?? Visibility.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.WarningDetail: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case properties = "Properties"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let properties = properties {
            if !properties.isEmpty {
                var propertiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Properties"))
                for (index0, warningproperty0) in properties.enumerated() {
                    try propertiesContainer.encode(warningproperty0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var propertiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Properties"))
                try propertiesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.WarningDetail, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.WarningDetail()
            value.type = try reader["Type"].readIfPresent()
            value.properties = try reader["Properties"].readListIfPresent(memberReadingClosure: CloudFormationClientTypes.WarningProperty.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// The warnings generated for a specific resource for this generated template.
    public struct WarningDetail: Swift.Equatable {
        /// The properties of the resource that are impacted by this warning.
        public var properties: [CloudFormationClientTypes.WarningProperty]?
        /// The type of this warning. For more information, see [IaC generator and write-only properties](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/generate-IaC-write-only-properties.html) in the CloudFormation User Guide.
        ///
        /// * MUTUALLY_EXCLUSIVE_PROPERTIES - The resource requires mutually-exclusive write-only properties. The IaC generator selects one set of mutually exclusive properties and converts the included properties into parameters. The parameter names have a suffix OneOf and the parameter descriptions indicate that the corresponding property can be replaced with other exclusive properties.
        ///
        /// * UNSUPPORTED_PROPERTIES - Unsupported properties are present in the resource. One example of unsupported properties would be a required write-only property that is an array, because a parameter cannot be an array. Another example is an optional write-only property.
        ///
        /// * MUTUALLY_EXCLUSIVE_TYPES - One or more required write-only properties are found in the resource, and the type of that property can be any of several types.
        ///
        ///
        /// Currently the resource and property reference documentation does not indicate if a property uses a type of oneOf or anyOf. You need to look at the resource provider schema.
        public var type: CloudFormationClientTypes.WarningType?

        public init(
            properties: [CloudFormationClientTypes.WarningProperty]? = nil,
            type: CloudFormationClientTypes.WarningType? = nil
        )
        {
            self.properties = properties
            self.type = type
        }
    }

}

extension CloudFormationClientTypes.WarningProperty: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case propertyPath = "PropertyPath"
        case `required` = "Required"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let propertyPath = propertyPath {
            try container.encode(propertyPath, forKey: ClientRuntime.Key("PropertyPath"))
        }
        if let `required` = `required` {
            try container.encode(`required`, forKey: ClientRuntime.Key("Required"))
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.WarningProperty, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.WarningProperty()
            value.propertyPath = try reader["PropertyPath"].readIfPresent()
            value.`required` = try reader["Required"].readIfPresent()
            value.description = try reader["Description"].readIfPresent()
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// A specific property that is impacted by a warning.
    public struct WarningProperty: Swift.Equatable {
        /// The description of the property from the resource provider schema.
        public var description: Swift.String?
        /// The path of the property. For example, if this is for the S3Bucket member of the Code property, the property path would be Code/S3Bucket.
        public var propertyPath: Swift.String?
        /// If true, the specified property is required.
        public var `required`: Swift.Bool?

        public init(
            description: Swift.String? = nil,
            propertyPath: Swift.String? = nil,
            `required`: Swift.Bool? = nil
        )
        {
            self.description = description
            self.propertyPath = propertyPath
            self.`required` = `required`
        }
    }

}

extension CloudFormationClientTypes {
    public enum WarningType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mutuallyExclusiveProperties
        case mutuallyExclusiveTypes
        case unsupportedProperties
        case sdkUnknown(Swift.String)

        public static var allCases: [WarningType] {
            return [
                .mutuallyExclusiveProperties,
                .mutuallyExclusiveTypes,
                .unsupportedProperties,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mutuallyExclusiveProperties: return "MUTUALLY_EXCLUSIVE_PROPERTIES"
            case .mutuallyExclusiveTypes: return "MUTUALLY_EXCLUSIVE_TYPES"
            case .unsupportedProperties: return "UNSUPPORTED_PROPERTIES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarningType(rawValue: rawValue) ?? WarningType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Warnings: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unrecognizedResourceTypes = "UnrecognizedResourceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let unrecognizedResourceTypes = unrecognizedResourceTypes {
            if !unrecognizedResourceTypes.isEmpty {
                var unrecognizedResourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UnrecognizedResourceTypes"))
                for (index0, resourcetype0) in unrecognizedResourceTypes.enumerated() {
                    try unrecognizedResourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
                }
            }
            else {
                var unrecognizedResourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UnrecognizedResourceTypes"))
                try unrecognizedResourceTypesContainer.encode("", forKey: ClientRuntime.Key(""))
            }
        }
    }

    static var readingClosure: SmithyReadWrite.ReadingClosure<CloudFormationClientTypes.Warnings, SmithyXML.Reader> {
        return { reader in
            guard reader.content != nil else { return nil }
            var value = CloudFormationClientTypes.Warnings()
            value.unrecognizedResourceTypes = try reader["UnrecognizedResourceTypes"].readListIfPresent(memberReadingClosure: Swift.String.readingClosure, memberNodeInfo: "member", isFlattened: false)
            return value
        }
    }
}

extension CloudFormationClientTypes {
    /// Contains any warnings returned by the GetTemplateSummary API action.
    public struct Warnings: Swift.Equatable {
        /// A list of all of the unrecognized resource types. This is only returned if the TemplateSummaryConfig parameter has the TreatUnrecognizedResourceTypesAsWarning configuration set to True.
        public var unrecognizedResourceTypes: [Swift.String]?

        public init(
            unrecognizedResourceTypes: [Swift.String]? = nil
        )
        {
            self.unrecognizedResourceTypes = unrecognizedResourceTypes
        }
    }

}
