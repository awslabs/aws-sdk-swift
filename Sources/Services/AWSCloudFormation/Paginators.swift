// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClient {
    /// Paginate over `[DescribeAccountLimitsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeAccountLimitsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeAccountLimitsOutputResponse`
    public func describeAccountLimitsPaginated(input: DescribeAccountLimitsInput) -> ClientRuntime.PaginatorSequence<DescribeAccountLimitsInput, DescribeAccountLimitsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeAccountLimitsInput, DescribeAccountLimitsOutputResponse>(input: input, inputKey: \DescribeAccountLimitsInput.nextToken, outputKey: \DescribeAccountLimitsOutputResponse.nextToken, paginationFunction: self.describeAccountLimits(input:))
    }
}

extension DescribeAccountLimitsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeAccountLimitsInput {
        return DescribeAccountLimitsInput(
            nextToken: token
        )}
}

extension PaginatorSequence where Input == DescribeAccountLimitsInput, Output == DescribeAccountLimitsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeAccountLimitsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.AccountLimit]`
    /// - Returns: `[CloudFormationClientTypes.AccountLimit]`
    public func accountLimits() async throws -> [CloudFormationClientTypes.AccountLimit] {
        return try await self.asyncCompactMap { item in item.accountLimits }
    }
}
extension CloudFormationClient {
    /// Paginate over `[DescribeStackEventsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStackEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStackEventsOutputResponse`
    public func describeStackEventsPaginated(input: DescribeStackEventsInput) -> ClientRuntime.PaginatorSequence<DescribeStackEventsInput, DescribeStackEventsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStackEventsInput, DescribeStackEventsOutputResponse>(input: input, inputKey: \DescribeStackEventsInput.nextToken, outputKey: \DescribeStackEventsOutputResponse.nextToken, paginationFunction: self.describeStackEvents(input:))
    }
}

extension DescribeStackEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStackEventsInput {
        return DescribeStackEventsInput(
            nextToken: token,
            stackName: self.stackName
        )}
}

extension PaginatorSequence where Input == DescribeStackEventsInput, Output == DescribeStackEventsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStackEventsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackEvent]`
    /// - Returns: `[CloudFormationClientTypes.StackEvent]`
    public func stackEvents() async throws -> [CloudFormationClientTypes.StackEvent] {
        return try await self.asyncCompactMap { item in item.stackEvents }
    }
}
extension CloudFormationClient {
    /// Paginate over `[DescribeStackResourceDriftsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStackResourceDriftsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStackResourceDriftsOutputResponse`
    public func describeStackResourceDriftsPaginated(input: DescribeStackResourceDriftsInput) -> ClientRuntime.PaginatorSequence<DescribeStackResourceDriftsInput, DescribeStackResourceDriftsOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStackResourceDriftsInput, DescribeStackResourceDriftsOutputResponse>(input: input, inputKey: \DescribeStackResourceDriftsInput.nextToken, outputKey: \DescribeStackResourceDriftsOutputResponse.nextToken, paginationFunction: self.describeStackResourceDrifts(input:))
    }
}

extension DescribeStackResourceDriftsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStackResourceDriftsInput {
        return DescribeStackResourceDriftsInput(
            maxResults: self.maxResults,
            nextToken: token,
            stackName: self.stackName,
            stackResourceDriftStatusFilters: self.stackResourceDriftStatusFilters
        )}
}
extension CloudFormationClient {
    /// Paginate over `[DescribeStacksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[DescribeStacksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `DescribeStacksOutputResponse`
    public func describeStacksPaginated(input: DescribeStacksInput) -> ClientRuntime.PaginatorSequence<DescribeStacksInput, DescribeStacksOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeStacksInput, DescribeStacksOutputResponse>(input: input, inputKey: \DescribeStacksInput.nextToken, outputKey: \DescribeStacksOutputResponse.nextToken, paginationFunction: self.describeStacks(input:))
    }
}

extension DescribeStacksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeStacksInput {
        return DescribeStacksInput(
            nextToken: token,
            stackName: self.stackName
        )}
}

extension PaginatorSequence where Input == DescribeStacksInput, Output == DescribeStacksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `describeStacksPaginated`
    /// to access the nested member `[CloudFormationClientTypes.Stack]`
    /// - Returns: `[CloudFormationClientTypes.Stack]`
    public func stacks() async throws -> [CloudFormationClientTypes.Stack] {
        return try await self.asyncCompactMap { item in item.stacks }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListChangeSetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListChangeSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListChangeSetsOutputResponse`
    public func listChangeSetsPaginated(input: ListChangeSetsInput) -> ClientRuntime.PaginatorSequence<ListChangeSetsInput, ListChangeSetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChangeSetsInput, ListChangeSetsOutputResponse>(input: input, inputKey: \ListChangeSetsInput.nextToken, outputKey: \ListChangeSetsOutputResponse.nextToken, paginationFunction: self.listChangeSets(input:))
    }
}

extension ListChangeSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChangeSetsInput {
        return ListChangeSetsInput(
            nextToken: token,
            stackName: self.stackName
        )}
}

extension PaginatorSequence where Input == ListChangeSetsInput, Output == ListChangeSetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listChangeSetsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.ChangeSetSummary]`
    /// - Returns: `[CloudFormationClientTypes.ChangeSetSummary]`
    public func summaries() async throws -> [CloudFormationClientTypes.ChangeSetSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListExportsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListExportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListExportsOutputResponse`
    public func listExportsPaginated(input: ListExportsInput) -> ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExportsInput, ListExportsOutputResponse>(input: input, inputKey: \ListExportsInput.nextToken, outputKey: \ListExportsOutputResponse.nextToken, paginationFunction: self.listExports(input:))
    }
}

extension ListExportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExportsInput {
        return ListExportsInput(
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListExportsInput, Output == ListExportsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listExportsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.Export]`
    /// - Returns: `[CloudFormationClientTypes.Export]`
    public func exports() async throws -> [CloudFormationClientTypes.Export] {
        return try await self.asyncCompactMap { item in item.exports }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListImportsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImportsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImportsOutputResponse`
    public func listImportsPaginated(input: ListImportsInput) -> ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImportsInput, ListImportsOutputResponse>(input: input, inputKey: \ListImportsInput.nextToken, outputKey: \ListImportsOutputResponse.nextToken, paginationFunction: self.listImports(input:))
    }
}

extension ListImportsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImportsInput {
        return ListImportsInput(
            exportName: self.exportName,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImportsInput, Output == ListImportsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImportsPaginated`
    /// to access the nested member `[Swift.String]`
    /// - Returns: `[Swift.String]`
    public func imports() async throws -> [Swift.String] {
        return try await self.asyncCompactMap { item in item.imports }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStackInstancesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStackInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStackInstancesOutputResponse`
    public func listStackInstancesPaginated(input: ListStackInstancesInput) -> ClientRuntime.PaginatorSequence<ListStackInstancesInput, ListStackInstancesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStackInstancesInput, ListStackInstancesOutputResponse>(input: input, inputKey: \ListStackInstancesInput.nextToken, outputKey: \ListStackInstancesOutputResponse.nextToken, paginationFunction: self.listStackInstances(input:))
    }
}

extension ListStackInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStackInstancesInput {
        return ListStackInstancesInput(
            callAs: self.callAs,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            stackInstanceAccount: self.stackInstanceAccount,
            stackInstanceRegion: self.stackInstanceRegion,
            stackSetName: self.stackSetName
        )}
}

extension PaginatorSequence where Input == ListStackInstancesInput, Output == ListStackInstancesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStackInstancesPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackInstanceSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackInstanceSummary]`
    public func summaries() async throws -> [CloudFormationClientTypes.StackInstanceSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStackResourcesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStackResourcesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStackResourcesOutputResponse`
    public func listStackResourcesPaginated(input: ListStackResourcesInput) -> ClientRuntime.PaginatorSequence<ListStackResourcesInput, ListStackResourcesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStackResourcesInput, ListStackResourcesOutputResponse>(input: input, inputKey: \ListStackResourcesInput.nextToken, outputKey: \ListStackResourcesOutputResponse.nextToken, paginationFunction: self.listStackResources(input:))
    }
}

extension ListStackResourcesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStackResourcesInput {
        return ListStackResourcesInput(
            nextToken: token,
            stackName: self.stackName
        )}
}

extension PaginatorSequence where Input == ListStackResourcesInput, Output == ListStackResourcesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStackResourcesPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackResourceSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackResourceSummary]`
    public func stackResourceSummaries() async throws -> [CloudFormationClientTypes.StackResourceSummary] {
        return try await self.asyncCompactMap { item in item.stackResourceSummaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStacksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStacksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStacksOutputResponse`
    public func listStacksPaginated(input: ListStacksInput) -> ClientRuntime.PaginatorSequence<ListStacksInput, ListStacksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStacksInput, ListStacksOutputResponse>(input: input, inputKey: \ListStacksInput.nextToken, outputKey: \ListStacksOutputResponse.nextToken, paginationFunction: self.listStacks(input:))
    }
}

extension ListStacksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStacksInput {
        return ListStacksInput(
            nextToken: token,
            stackStatusFilter: self.stackStatusFilter
        )}
}

extension PaginatorSequence where Input == ListStacksInput, Output == ListStacksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStacksPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackSummary]`
    public func stackSummaries() async throws -> [CloudFormationClientTypes.StackSummary] {
        return try await self.asyncCompactMap { item in item.stackSummaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStackSetOperationResultsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStackSetOperationResultsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStackSetOperationResultsOutputResponse`
    public func listStackSetOperationResultsPaginated(input: ListStackSetOperationResultsInput) -> ClientRuntime.PaginatorSequence<ListStackSetOperationResultsInput, ListStackSetOperationResultsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStackSetOperationResultsInput, ListStackSetOperationResultsOutputResponse>(input: input, inputKey: \ListStackSetOperationResultsInput.nextToken, outputKey: \ListStackSetOperationResultsOutputResponse.nextToken, paginationFunction: self.listStackSetOperationResults(input:))
    }
}

extension ListStackSetOperationResultsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStackSetOperationResultsInput {
        return ListStackSetOperationResultsInput(
            callAs: self.callAs,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            operationId: self.operationId,
            stackSetName: self.stackSetName
        )}
}

extension PaginatorSequence where Input == ListStackSetOperationResultsInput, Output == ListStackSetOperationResultsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStackSetOperationResultsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackSetOperationResultSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackSetOperationResultSummary]`
    public func summaries() async throws -> [CloudFormationClientTypes.StackSetOperationResultSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStackSetOperationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStackSetOperationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStackSetOperationsOutputResponse`
    public func listStackSetOperationsPaginated(input: ListStackSetOperationsInput) -> ClientRuntime.PaginatorSequence<ListStackSetOperationsInput, ListStackSetOperationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStackSetOperationsInput, ListStackSetOperationsOutputResponse>(input: input, inputKey: \ListStackSetOperationsInput.nextToken, outputKey: \ListStackSetOperationsOutputResponse.nextToken, paginationFunction: self.listStackSetOperations(input:))
    }
}

extension ListStackSetOperationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStackSetOperationsInput {
        return ListStackSetOperationsInput(
            callAs: self.callAs,
            maxResults: self.maxResults,
            nextToken: token,
            stackSetName: self.stackSetName
        )}
}

extension PaginatorSequence where Input == ListStackSetOperationsInput, Output == ListStackSetOperationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStackSetOperationsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackSetOperationSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackSetOperationSummary]`
    public func summaries() async throws -> [CloudFormationClientTypes.StackSetOperationSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListStackSetsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListStackSetsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListStackSetsOutputResponse`
    public func listStackSetsPaginated(input: ListStackSetsInput) -> ClientRuntime.PaginatorSequence<ListStackSetsInput, ListStackSetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStackSetsInput, ListStackSetsOutputResponse>(input: input, inputKey: \ListStackSetsInput.nextToken, outputKey: \ListStackSetsOutputResponse.nextToken, paginationFunction: self.listStackSets(input:))
    }
}

extension ListStackSetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStackSetsInput {
        return ListStackSetsInput(
            callAs: self.callAs,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )}
}

extension PaginatorSequence where Input == ListStackSetsInput, Output == ListStackSetsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listStackSetsPaginated`
    /// to access the nested member `[CloudFormationClientTypes.StackSetSummary]`
    /// - Returns: `[CloudFormationClientTypes.StackSetSummary]`
    public func summaries() async throws -> [CloudFormationClientTypes.StackSetSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListTypeRegistrationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTypeRegistrationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTypeRegistrationsOutputResponse`
    public func listTypeRegistrationsPaginated(input: ListTypeRegistrationsInput) -> ClientRuntime.PaginatorSequence<ListTypeRegistrationsInput, ListTypeRegistrationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTypeRegistrationsInput, ListTypeRegistrationsOutputResponse>(input: input, inputKey: \ListTypeRegistrationsInput.nextToken, outputKey: \ListTypeRegistrationsOutputResponse.nextToken, paginationFunction: self.listTypeRegistrations(input:))
    }
}

extension ListTypeRegistrationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTypeRegistrationsInput {
        return ListTypeRegistrationsInput(
            maxResults: self.maxResults,
            nextToken: token,
            registrationStatusFilter: self.registrationStatusFilter,
            type: self.type,
            typeArn: self.typeArn,
            typeName: self.typeName
        )}
}
extension CloudFormationClient {
    /// Paginate over `[ListTypesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTypesOutputResponse`
    public func listTypesPaginated(input: ListTypesInput) -> ClientRuntime.PaginatorSequence<ListTypesInput, ListTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTypesInput, ListTypesOutputResponse>(input: input, inputKey: \ListTypesInput.nextToken, outputKey: \ListTypesOutputResponse.nextToken, paginationFunction: self.listTypes(input:))
    }
}

extension ListTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTypesInput {
        return ListTypesInput(
            deprecatedStatus: self.deprecatedStatus,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            provisioningType: self.provisioningType,
            type: self.type,
            visibility: self.visibility
        )}
}

extension PaginatorSequence where Input == ListTypesInput, Output == ListTypesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTypesPaginated`
    /// to access the nested member `[CloudFormationClientTypes.TypeSummary]`
    /// - Returns: `[CloudFormationClientTypes.TypeSummary]`
    public func typeSummaries() async throws -> [CloudFormationClientTypes.TypeSummary] {
        return try await self.asyncCompactMap { item in item.typeSummaries }
    }
}
extension CloudFormationClient {
    /// Paginate over `[ListTypeVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTypeVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTypeVersionsOutputResponse`
    public func listTypeVersionsPaginated(input: ListTypeVersionsInput) -> ClientRuntime.PaginatorSequence<ListTypeVersionsInput, ListTypeVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTypeVersionsInput, ListTypeVersionsOutputResponse>(input: input, inputKey: \ListTypeVersionsInput.nextToken, outputKey: \ListTypeVersionsOutputResponse.nextToken, paginationFunction: self.listTypeVersions(input:))
    }
}

extension ListTypeVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTypeVersionsInput {
        return ListTypeVersionsInput(
            arn: self.arn,
            deprecatedStatus: self.deprecatedStatus,
            maxResults: self.maxResults,
            nextToken: token,
            publisherId: self.publisherId,
            type: self.type,
            typeName: self.typeName
        )}
}
