//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import class AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain
import protocol ClientRuntime.ClientConfiguration
import protocol ClientRuntime.Plugin
import protocol SmithyHTTPAuthAPI.AuthSchemeResolver
@_spi(AWSCredentialIdentityResolver) import protocol SmithyIdentity.AWSCredentialIdentityResolver
import protocol SmithyIdentity.BearerTokenIdentityResolver
import struct AWSSDKHTTPAuth.SigV4AuthScheme
@_spi(ClientConfigDefaultIdentityResolver) import struct AWSSDKIdentity.DefaultBearerTokenIdentityResolverChain
import struct SmithyHTTPAuth.BearerTokenAuthScheme
import typealias SmithyHTTPAuthAPI.AuthSchemes

public class BedrockRuntimeClientEndpointPlugin: Plugin {
    private var endpointResolver: EndpointResolver

    public init(endpointResolver: EndpointResolver) {
        self.endpointResolver = endpointResolver
    }

    public convenience init() throws {
        self.init(endpointResolver: try DefaultEndpointResolver())
    }

    public func configureClient(clientConfiguration: ClientRuntime.ClientConfiguration) throws {
        if let config = clientConfiguration as? BedrockRuntimeClient.BedrockRuntimeClientConfiguration {
            config.endpointResolver = self.endpointResolver
        }
    }
}

public class DefaultAWSAuthSchemePlugin: ClientRuntime.Plugin {

    public init() {}

    public func configureClient(clientConfiguration: ClientRuntime.ClientConfiguration) throws {
        if let config = clientConfiguration as? BedrockRuntimeClient.BedrockRuntimeClientConfiguration {
            config.authSchemeResolver = DefaultBedrockRuntimeAuthSchemeResolver()
            config.authSchemes = [SmithyHTTPAuth.BearerTokenAuthScheme(), AWSSDKHTTPAuth.SigV4AuthScheme()]
            config.awsCredentialIdentityResolver = AWSSDKIdentity.DefaultAWSCredentialIdentityResolverChain()
            config.bearerTokenIdentityResolver = AWSSDKIdentity.DefaultBearerTokenIdentityResolverChain()
        }
    }
}

public class BedrockRuntimeClientAuthSchemePlugin: ClientRuntime.Plugin {
    private var authSchemes: SmithyHTTPAuthAPI.AuthSchemes?
    private var authSchemePreference: [String]
    private var authSchemeResolver: SmithyHTTPAuthAPI.AuthSchemeResolver?
    private var awsCredentialIdentityResolver: (any SmithyIdentity.AWSCredentialIdentityResolver)?
    private var bearerTokenIdentityResolver: (any SmithyIdentity.BearerTokenIdentityResolver)?

    public init(authSchemes: SmithyHTTPAuthAPI.AuthSchemes? = nil, authSchemePreference: [String]? = nil, authSchemeResolver: BedrockRuntimeAuthSchemeResolver? = nil, awsCredentialIdentityResolver: (any SmithyIdentity.AWSCredentialIdentityResolver)? = nil, bearerTokenIdentityResolver: (any SmithyIdentity.BearerTokenIdentityResolver)? = nil) {
        self.authSchemeResolver = authSchemeResolver
        self.authSchemes = authSchemes
        self.authSchemePreference = authSchemePreference ?? []
        self.awsCredentialIdentityResolver = awsCredentialIdentityResolver
        self.bearerTokenIdentityResolver = bearerTokenIdentityResolver
    }

    public func configureClient(clientConfiguration: ClientRuntime.ClientConfiguration) throws {
        if let config = clientConfiguration as? BedrockRuntimeClient.BedrockRuntimeClientConfiguration {
            if (self.authSchemes != nil) {
                config.authSchemes = self.authSchemes
            }
            config.authSchemePreference = self.authSchemePreference
            if (self.authSchemeResolver != nil) {
                config.authSchemeResolver = self.authSchemeResolver!
            }
            if (self.awsCredentialIdentityResolver != nil) {
                config.awsCredentialIdentityResolver = self.awsCredentialIdentityResolver!
            }
            if (self.bearerTokenIdentityResolver != nil) {
                config.bearerTokenIdentityResolver = self.bearerTokenIdentityResolver!
            }
        }
    }
}
