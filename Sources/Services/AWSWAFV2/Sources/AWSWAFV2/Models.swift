//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

extension WAFV2ClientTypes {

    public enum ActionValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case block
        case captcha
        case challenge
        case count
        case excludedAsCount
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionValue] {
            return [
                .allow,
                .block,
                .captcha,
                .challenge,
                .count,
                .excludedAsCount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .block: return "BLOCK"
            case .captcha: return "CAPTCHA"
            case .challenge: return "CHALLENGE"
            case .count: return "COUNT"
            case .excludedAsCount: return "EXCLUDED_AS_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A single action condition for a [Condition] in a logging filter.
    public struct ActionCondition {
        /// The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value EXCLUDED_AS_COUNT matches on excluded rules and also on rules that have a rule action override of Count.
        /// This member is required.
        public var action: WAFV2ClientTypes.ActionValue?

        public init(
            action: WAFV2ClientTypes.ActionValue? = nil
        )
        {
            self.action = action
        }
    }

}

extension WAFV2ClientTypes {
    /// The name of a field in the request payload that contains part or all of your customer's primary physical address. This data type is used in the RequestInspectionACFP data type.
    public struct AddressField {
        /// The name of a single primary address field. How you specify the address fields depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }, the address field idenfiers are /form/primaryaddressline1, /form/primaryaddressline2, and /form/primaryaddressline3.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named primaryaddressline1, primaryaddressline2, and primaryaddressline3, the address fields identifiers are primaryaddressline1, primaryaddressline2, and primaryaddressline3.
        /// This member is required.
        public var identifier: Swift.String?

        public init(
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect all of the elements that WAF has parsed and extracted from the web request component that you've identified in your [FieldToMatch] specifications. This is used in the [FieldToMatch] specification for some web request component types. JSON specification: "All": {}
    public struct All {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// A custom header for custom request and response handling. This is used in [CustomResponse] and [CustomRequestHandling].
    public struct CustomHTTPHeader {
        /// The name of the custom header. For custom request header insertion, when WAF inserts the header into the request, it prefixes this name x-amzn-waf-, to avoid confusion with the headers that are already in the request. For example, for the header name sample, WAF inserts the header x-amzn-waf-sample.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the custom header.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFV2ClientTypes {
    /// Custom request handling behavior that inserts custom headers into a web request. You can add custom request handling for WAF to use when the rule action doesn't block the request. For example, CaptchaAction for requests with valid t okens, and AllowAction. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
    public struct CustomRequestHandling {
        /// The HTTP headers to insert into the request. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
        /// This member is required.
        public var insertHeaders: [WAFV2ClientTypes.CustomHTTPHeader]?

        public init(
            insertHeaders: [WAFV2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.insertHeaders = insertHeaders
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should allow the request and optionally defines additional custom handling for the request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct AllowAction {
        /// Defines custom handling for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init(
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect all query arguments of the web request. This is used in the [FieldToMatch] specification for some web request component types. JSON specification: "AllQueryArguments": {}
    public struct AllQueryArguments {

        public init() { }
    }

}

extension WAFV2ClientTypes {

    public enum OversizeHandling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `continue`
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [OversizeHandling] {
            return [
                .continue,
                .match,
                .noMatch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Inspect the body of the web request. The body immediately follows the request headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification.
    public struct Body {
        /// What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to WAF for inspection.
        ///
        /// * For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        ///
        /// * For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL AssociationConfig, for additional processing fees.
        ///
        ///
        /// The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the available body contents normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// You can combine the MATCH or NO_MATCH settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: CONTINUE
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init(
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either All, IncludedCookies, or ExcludedCookies. Example JSON: "MatchPattern": { "IncludedCookies": [ "session-id-time", "session-id" ] }
    public struct CookieMatchPattern {
        /// Inspect all cookies.
        public var all: WAFV2ClientTypes.All?
        /// Inspect only the cookies whose keys don't match any of the strings specified here.
        public var excludedCookies: [Swift.String]?
        /// Inspect only the cookies that have a key that matches one of the strings specified here.
        public var includedCookies: [Swift.String]?

        public init(
            all: WAFV2ClientTypes.All? = nil,
            excludedCookies: [Swift.String]? = nil,
            includedCookies: [Swift.String]? = nil
        )
        {
            self.all = all
            self.excludedCookies = excludedCookies
            self.includedCookies = includedCookies
        }
    }

}

extension WAFV2ClientTypes {

    public enum MapMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [MapMatchScope] {
            return [
                .all,
                .key,
                .value
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Inspect the cookies in the web request. You can specify the parts of the cookies to inspect and you can narrow the set of cookies to inspect by including or excluding specific keys. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "Cookies": { "MatchPattern": { "All": {} }, "MatchScope": "KEY", "OversizeHandling": "MATCH" }
    public struct Cookies {
        /// The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either All, IncludedCookies, or ExcludedCookies. Example JSON: "MatchPattern": { "IncludedCookies": [ "session-id-time", "session-id" ] }
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.CookieMatchPattern?
        /// The parts of the cookies to inspect with the rule inspection criteria. If you specify ALL, WAF inspects both keys and values. All does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical AND statement to combine two match rules, one that inspects the keys and another that inspects the values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.MapMatchScope?
        /// What WAF should do if the cookies of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the available cookies normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init(
            matchPattern: WAFV2ClientTypes.CookieMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.MapMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect a string containing the list of the request's header names, ordered as they appear in the web request that WAF receives for inspection. WAF generates the string and then uses that as the field to match component in its inspection. WAF separates the header names in the string using colons and no added spaces, for example host:user-agent:accept:authorization:referer.
    public struct HeaderOrder {
        /// What WAF should do if the headers of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the available headers normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init(
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either All, IncludedHeaders, or ExcludedHeaders. Example JSON: "MatchPattern": { "ExcludedHeaders": [ "KeyToExclude1", "KeyToExclude2" ] }
    public struct HeaderMatchPattern {
        /// Inspect all headers.
        public var all: WAFV2ClientTypes.All?
        /// Inspect only the headers whose keys don't match any of the strings specified here.
        public var excludedHeaders: [Swift.String]?
        /// Inspect only the headers that have a key that matches one of the strings specified here.
        public var includedHeaders: [Swift.String]?

        public init(
            all: WAFV2ClientTypes.All? = nil,
            excludedHeaders: [Swift.String]? = nil,
            includedHeaders: [Swift.String]? = nil
        )
        {
            self.all = all
            self.excludedHeaders = excludedHeaders
            self.includedHeaders = includedHeaders
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect all headers in the web request. You can specify the parts of the headers to inspect and you can narrow the set of headers to inspect by including or excluding specific keys. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. If you want to inspect just the value of a single header, use the SingleHeaderFieldToMatch setting instead. Example JSON: "Headers": { "MatchPattern": { "All": {} }, "MatchScope": "KEY", "OversizeHandling": "MATCH" }
    public struct Headers {
        /// The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either All, IncludedHeaders, or ExcludedHeaders. Example JSON: "MatchPattern": { "ExcludedHeaders": [ "KeyToExclude1", "KeyToExclude2" ] }
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.HeaderMatchPattern?
        /// The parts of the headers to match with the rule inspection criteria. If you specify ALL, WAF inspects both keys and values. All does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical AND statement to combine two match rules, one that inspects the keys and another that inspects the values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.MapMatchScope?
        /// What WAF should do if the headers of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the available headers normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init(
            matchPattern: WAFV2ClientTypes.HeaderMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.MapMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {

    public enum FallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [FallbackBehavior] {
            return [
                .match,
                .noMatch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Available for use with Amazon CloudFront distributions and Application Load Balancers. Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information. You can use this choice only with a string match ByteMatchStatement with the PositionalConstraint set to EXACTLY. You can obtain the JA3 fingerprint for client requests from the web ACL logs. If WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the WAF Developer Guide. Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.
    public struct JA3Fingerprint {
        /// The match status to assign to the web request if the request doesn't have a JA3 fingerprint. You can specify the following fallback behaviors:
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var fallbackBehavior: WAFV2ClientTypes.FallbackBehavior?

        public init(
            fallbackBehavior: WAFV2ClientTypes.FallbackBehavior? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
        }
    }

}

extension WAFV2ClientTypes {

    public enum BodyParsingFallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case evaluateAsString
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [BodyParsingFallbackBehavior] {
            return [
                .evaluateAsString,
                .match,
                .noMatch
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .evaluateAsString: return "EVALUATE_AS_STRING"
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. This is used with the [FieldToMatch] option JsonBody.
    public struct JsonMatchPattern {
        /// Match all of the elements. See also MatchScope in [JsonBody]. You must specify either this setting or the IncludedPaths setting, but not both.
        public var all: WAFV2ClientTypes.All?
        /// Match only the specified include paths. See also MatchScope in [JsonBody]. Provide the include paths using JSON Pointer syntax. For example, "IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]. For information about this syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). You must specify either this setting or the All setting, but not both. Don't use this option to include all paths. Instead, use the All setting.
        public var includedPaths: [Swift.String]?

        public init(
            all: WAFV2ClientTypes.All? = nil,
            includedPaths: [Swift.String]? = nil
        )
        {
            self.all = all
            self.includedPaths = includedPaths
        }
    }

}

extension WAFV2ClientTypes {

    public enum JsonMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [JsonMatchScope] {
            return [
                .all,
                .key,
                .value
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Inspect the body of the web request as JSON. The body immediately follows the request headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON that result from the matches that you indicate. Example JSON: "JsonBody": { "MatchPattern": { "All": {} }, "MatchScope": "ALL" } For additional information about this request component option, see [JSON body](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-fields-list.html#waf-rule-statement-request-component-json-body) in the WAF Developer Guide.
    public struct JsonBody {
        /// What WAF should do if it fails to completely parse the JSON body. The options are the following:
        ///
        /// * EVALUATE_AS_STRING - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. WAF parsing doesn't fully validate the input JSON string, so parsing can succeed even for invalid JSON. When parsing succeeds, WAF doesn't apply the fallback behavior. For more information, see [JSON body](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-fields-list.html#waf-rule-statement-request-component-json-body) in the WAF Developer Guide.
        public var invalidFallbackBehavior: WAFV2ClientTypes.BodyParsingFallbackBehavior?
        /// The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria.
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.JsonMatchPattern?
        /// The parts of the JSON to match against using the MatchPattern. If you specify ALL, WAF matches against keys and values. All does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical AND statement to combine two match rules, one that inspects the keys and another that inspects the values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.JsonMatchScope?
        /// What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to WAF for inspection.
        ///
        /// * For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        ///
        /// * For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL AssociationConfig, for additional processing fees.
        ///
        ///
        /// The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the available body contents normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// You can combine the MATCH or NO_MATCH settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. Default: CONTINUE
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init(
            invalidFallbackBehavior: WAFV2ClientTypes.BodyParsingFallbackBehavior? = nil,
            matchPattern: WAFV2ClientTypes.JsonMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.JsonMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.invalidFallbackBehavior = invalidFallbackBehavior
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect the HTTP method of the web request. The method indicates the type of operation that the request is asking the origin to perform. This is used in the [FieldToMatch] specification for some web request component types. JSON specification: "Method": {}
    public struct Method {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Inspect the query string of the web request. This is the part of a URL that appears after a ? character, if any. This is used in the [FieldToMatch] specification for some web request component types. JSON specification: "QueryString": {}
    public struct QueryString {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Inspect one of the headers in the web request, identified by name, for example, User-Agent or Referer. The name isn't case sensitive. You can filter and inspect all headers with the FieldToMatch setting Headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "SingleHeader": { "Name": "haystack" }
    public struct SingleHeader {
        /// The name of the query header to inspect.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect one query argument in the web request, identified by name, for example UserName or SalesRegion. The name isn't case sensitive. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "SingleQueryArgument": { "Name": "myArgument" }
    public struct SingleQueryArgument {
        /// The name of the query argument to inspect.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    /// Inspect the path component of the URI of the web request. This is the part of the web request that identifies a resource. For example, /images/daily-ad.jpg. This is used in the [FieldToMatch] specification for some web request component types. JSON specification: "UriPath": {}
    public struct UriPath {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a web request component to be used in a rule match statement or in a logging configuration.
    ///
    /// * In a rule statement, this is the part of the web request that you want WAF to inspect. Include the single FieldToMatch type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in FieldToMatch for each rule statement that requires it. To inspect more than one component of the web request, create a separate rule statement for each component. Example JSON for a QueryString field to match:  "FieldToMatch": { "QueryString": {} } Example JSON for a Method field to match specification:  "FieldToMatch": { "Method": { "Name": "DELETE" } }
    ///
    /// * In a logging configuration, this is used in the RedactedFields property to specify a field to redact from the logging records. For this use case, note the following:
    ///
    /// * Even though all FieldToMatch settings are available, the only valid settings for field redaction are UriPath, QueryString, SingleHeader, and Method.
    ///
    /// * In this documentation, the descriptions of the individual fields talk about specifying the web request component to inspect, but for field redaction, you are specifying the component type to redact from the logs.
    ///
    /// * If you have request sampling enabled, the redacted fields configuration for logging has no impact on sampling. The only way to exclude fields from request sampling is by disabling sampling in the web ACL visibility configuration.
    public struct FieldToMatch {
        /// Inspect all query arguments.
        public var allQueryArguments: WAFV2ClientTypes.AllQueryArguments?
        /// Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to WAF for inspection.
        ///
        /// * For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        ///
        /// * For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL AssociationConfig, for additional processing fees.
        ///
        ///
        /// For information about how to handle oversized request bodies, see the Body object configuration.
        public var body: WAFV2ClientTypes.Body?
        /// Inspect the request cookies. You must configure scope and pattern matching filters in the Cookies object, to define the set of cookies and the parts of the cookies that WAF inspects. Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the Cookies object. WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
        public var cookies: WAFV2ClientTypes.Cookies?
        /// Inspect a string containing the list of the request's header names, ordered as they appear in the web request that WAF receives for inspection. WAF generates the string and then uses that as the field to match component in its inspection. WAF separates the header names in the string using colons and no added spaces, for example host:user-agent:accept:authorization:referer.
        public var headerOrder: WAFV2ClientTypes.HeaderOrder?
        /// Inspect the request headers. You must configure scope and pattern matching filters in the Headers object, to define the set of headers to and the parts of the headers that WAF inspects. Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the Headers object. WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
        public var headers: WAFV2ClientTypes.Headers?
        /// Available for use with Amazon CloudFront distributions and Application Load Balancers. Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information. You can use this choice only with a string match ByteMatchStatement with the PositionalConstraint set to EXACTLY. You can obtain the JA3 fingerprint for client requests from the web ACL logs. If WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the WAF Developer Guide. Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.
        public var ja3Fingerprint: WAFV2ClientTypes.JA3Fingerprint?
        /// Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to WAF for inspection.
        ///
        /// * For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        ///
        /// * For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL AssociationConfig, for additional processing fees.
        ///
        ///
        /// For information about how to handle oversized request bodies, see the JsonBody object configuration.
        public var jsonBody: WAFV2ClientTypes.JsonBody?
        /// Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
        public var method: WAFV2ClientTypes.Method?
        /// Inspect the query string. This is the part of a URL that appears after a ? character, if any.
        public var queryString: WAFV2ClientTypes.QueryString?
        /// Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive. Example JSON: "SingleHeader": { "Name": "haystack" } Alternately, you can filter and inspect all headers with the HeadersFieldToMatch setting.
        public var singleHeader: WAFV2ClientTypes.SingleHeader?
        /// Inspect a single query argument. Provide the name of the query argument to inspect, such as UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive. Example JSON: "SingleQueryArgument": { "Name": "myArgument" }
        public var singleQueryArgument: WAFV2ClientTypes.SingleQueryArgument?
        /// Inspect the request URI path. This is the part of the web request that identifies a resource, for example, /images/daily-ad.jpg.
        public var uriPath: WAFV2ClientTypes.UriPath?

        public init(
            allQueryArguments: WAFV2ClientTypes.AllQueryArguments? = nil,
            body: WAFV2ClientTypes.Body? = nil,
            cookies: WAFV2ClientTypes.Cookies? = nil,
            headerOrder: WAFV2ClientTypes.HeaderOrder? = nil,
            headers: WAFV2ClientTypes.Headers? = nil,
            ja3Fingerprint: WAFV2ClientTypes.JA3Fingerprint? = nil,
            jsonBody: WAFV2ClientTypes.JsonBody? = nil,
            method: WAFV2ClientTypes.Method? = nil,
            queryString: WAFV2ClientTypes.QueryString? = nil,
            singleHeader: WAFV2ClientTypes.SingleHeader? = nil,
            singleQueryArgument: WAFV2ClientTypes.SingleQueryArgument? = nil,
            uriPath: WAFV2ClientTypes.UriPath? = nil
        )
        {
            self.allQueryArguments = allQueryArguments
            self.body = body
            self.cookies = cookies
            self.headerOrder = headerOrder
            self.headers = headers
            self.ja3Fingerprint = ja3Fingerprint
            self.jsonBody = jsonBody
            self.method = method
            self.queryString = queryString
            self.singleHeader = singleHeader
            self.singleQueryArgument = singleQueryArgument
            self.uriPath = uriPath
        }
    }

}

extension WAFV2ClientTypes {

    public enum PositionalConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case containsWord
        case endsWith
        case exactly
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [PositionalConstraint] {
            return [
                .contains,
                .containsWord,
                .endsWith,
                .exactly,
                .startsWith
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .containsWord: return "CONTAINS_WORD"
            case .endsWith: return "ENDS_WITH"
            case .exactly: return "EXACTLY"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {

    public enum TextTransformationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case base64Decode
        case base64DecodeExt
        case cmdLine
        case compressWhiteSpace
        case cssDecode
        case escapeSeqDecode
        case hexDecode
        case htmlEntityDecode
        case jsDecode
        case lowercase
        case md5
        case `none`
        case normalizePath
        case normalizePathWin
        case removeNulls
        case replaceComments
        case replaceNulls
        case sqlHexDecode
        case urlDecode
        case urlDecodeUni
        case utf8ToUnicode
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTransformationType] {
            return [
                .base64Decode,
                .base64DecodeExt,
                .cmdLine,
                .compressWhiteSpace,
                .cssDecode,
                .escapeSeqDecode,
                .hexDecode,
                .htmlEntityDecode,
                .jsDecode,
                .lowercase,
                .md5,
                .none,
                .normalizePath,
                .normalizePathWin,
                .removeNulls,
                .replaceComments,
                .replaceNulls,
                .sqlHexDecode,
                .urlDecode,
                .urlDecodeUni,
                .utf8ToUnicode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .base64Decode: return "BASE64_DECODE"
            case .base64DecodeExt: return "BASE64_DECODE_EXT"
            case .cmdLine: return "CMD_LINE"
            case .compressWhiteSpace: return "COMPRESS_WHITE_SPACE"
            case .cssDecode: return "CSS_DECODE"
            case .escapeSeqDecode: return "ESCAPE_SEQ_DECODE"
            case .hexDecode: return "HEX_DECODE"
            case .htmlEntityDecode: return "HTML_ENTITY_DECODE"
            case .jsDecode: return "JS_DECODE"
            case .lowercase: return "LOWERCASE"
            case .md5: return "MD5"
            case .none: return "NONE"
            case .normalizePath: return "NORMALIZE_PATH"
            case .normalizePathWin: return "NORMALIZE_PATH_WIN"
            case .removeNulls: return "REMOVE_NULLS"
            case .replaceComments: return "REPLACE_COMMENTS"
            case .replaceNulls: return "REPLACE_NULLS"
            case .sqlHexDecode: return "SQL_HEX_DECODE"
            case .urlDecode: return "URL_DECODE"
            case .urlDecodeUni: return "URL_DECODE_UNI"
            case .utf8ToUnicode: return "UTF8_TO_UNICODE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
    public struct TextTransformation {
        /// Sets the relative processing order for multiple transformations. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// For detailed descriptions of each of the transformation types, see [Text transformations](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-transformation.html) in the WAF Developer Guide.
        /// This member is required.
        public var type: WAFV2ClientTypes.TextTransformationType?

        public init(
            priority: Swift.Int = 0,
            type: WAFV2ClientTypes.TextTransformationType? = nil
        )
        {
            self.priority = priority
            self.type = type
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.
    public struct ByteMatchStatement {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The area within the portion of the web request that you want WAF to search for SearchString. Valid values include the following: CONTAINS The specified part of the web request must include the value of SearchString, but the location doesn't matter. CONTAINS_WORD The specified part of the web request must include the value of SearchString, and SearchString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, SearchString must be a word, which means that both of the following are true:
        ///
        /// * SearchString is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ;BadBot.
        ///
        /// * SearchString is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, BadBot; and -BadBot;.
        ///
        ///
        /// EXACTLY The value of the specified part of the web request must exactly match the value of SearchString. STARTS_WITH The value of SearchString must appear at the beginning of the specified part of the web request. ENDS_WITH The value of SearchString must appear at the end of the specified part of the web request.
        /// This member is required.
        public var positionalConstraint: WAFV2ClientTypes.PositionalConstraint?
        /// A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in [FieldToMatch]. The maximum length of the value is 200 bytes. Valid values depend on the component that you specify for inspection in FieldToMatch:
        ///
        /// * Method: The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.
        ///
        /// * UriPath: The value that you want WAF to search for in the URI path, for example, /images/daily-ad.jpg.
        ///
        /// * JA3Fingerprint: Available for use with Amazon CloudFront distributions and Application Load Balancers. Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. You can use this choice only with a string match ByteMatchStatement with the PositionalConstraint set to EXACTLY. You can obtain the JA3 fingerprint for client requests from the web ACL logs. If WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the WAF Developer Guide.
        ///
        /// * HeaderOrder: The list of header names to match for. WAF creates a string that contains the ordered list of header names, from the headers in the web request, and then matches against that string.
        ///
        ///
        /// If SearchString includes alphabetic characters A-Z and a-z, note that the value is case sensitive. If you're using the WAF API Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 200 bytes. For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of SearchString. If you're using the CLI or one of the Amazon Web Services SDKs The value that you want WAF to search for. The SDK automatically base64 encodes the value.
        /// This member is required.
        public var searchString: Foundation.Data?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            positionalConstraint: WAFV2ClientTypes.PositionalConstraint? = nil,
            searchString: Foundation.Data? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.searchString = searchString
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {

    public enum CountryCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case ax
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case bq
        case br
        case bs
        case bt
        case bv
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gf
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gp
        case gq
        case gr
        case gs
        case gt
        case gu
        case gw
        case gy
        case hk
        case hm
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mq
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case nf
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case ps
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case ss
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tf
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case um
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case xk
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [CountryCode] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .ax,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .bq,
                .br,
                .bs,
                .bt,
                .bv,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gf,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gp,
                .gq,
                .gr,
                .gs,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hm,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mq,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .nf,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .ps,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .ss,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tf,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .um,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .xk,
                .ye,
                .yt,
                .za,
                .zm,
                .zw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .ax: return "AX"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .bq: return "BQ"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bv: return "BV"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gf: return "GF"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gp: return "GP"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gs: return "GS"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hm: return "HM"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mq: return "MQ"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .nf: return "NF"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .ps: return "PS"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .ss: return "SS"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tf: return "TF"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .um: return "UM"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .xk: return "XK"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This configuration is used for [GeoMatchStatement] and [RateBasedStatement]. For [IPSetReferenceStatement], use [IPSetForwardedIPConfig] instead. WAF only evaluates the first IP address found in the specified HTTP header.
    public struct ForwardedIPConfig {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors:
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var fallbackBehavior: WAFV2ClientTypes.FallbackBehavior?
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        /// This member is required.
        public var headerName: Swift.String?

        public init(
            fallbackBehavior: WAFV2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
    ///
    /// * To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the CountryCodes array.
    ///
    /// * Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
    ///
    ///
    /// WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ForwardedIPConfig. If you use the web request origin, the label formats are awswaf:clientip:geo:region:- and awswaf:clientip:geo:country:. If you use a forwarded IP address, the label formats are awswaf:forwardedip:geo:region:- and awswaf:forwardedip:geo:country:. For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public struct GeoMatchStatement {
        /// An array of two-character country codes that you want to match against, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the ISO 3166 international standard. When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that's unlikely to be a source of traffic to your site.
        public var countryCodes: [WAFV2ClientTypes.CountryCode]?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        public var forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig?

        public init(
            countryCodes: [WAFV2ClientTypes.CountryCode]? = nil,
            forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig? = nil
        )
        {
            self.countryCodes = countryCodes
            self.forwardedIPConfig = forwardedIPConfig
        }
    }

}

extension WAFV2ClientTypes {

    public enum ForwardedIPPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case any
        case first
        case last
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardedIPPosition] {
            return [
                .any,
                .first,
                .last
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .first: return "FIRST"
            case .last: return "LAST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This configuration is used only for [IPSetReferenceStatement]. For [GeoMatchStatement] and [RateBasedStatement], use [ForwardedIPConfig] instead.
    public struct IPSetForwardedIPConfig {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors:
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var fallbackBehavior: WAFV2ClientTypes.FallbackBehavior?
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        /// This member is required.
        public var headerName: Swift.String?
        /// The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be 10.1.1.1, 127.0.0.0, 10.10.10.10 where the first IP address identifies the original client and the rest identify proxies that the request went through. The options for this setting are the following:
        ///
        /// * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.
        ///
        /// * LAST - Inspect the last IP address in the list of IP addresses in the header.
        ///
        /// * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10.
        /// This member is required.
        public var position: WAFV2ClientTypes.ForwardedIPPosition?

        public init(
            fallbackBehavior: WAFV2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil,
            position: WAFV2ClientTypes.ForwardedIPPosition? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
            self.position = position
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an [IPSet] that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see [CreateIPSet]. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
    public struct IPSetReferenceStatement {
        /// The Amazon Resource Name (ARN) of the [IPSet] that this statement references.
        /// This member is required.
        public var arn: Swift.String?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        public var ipSetForwardedIPConfig: WAFV2ClientTypes.IPSetForwardedIPConfig?

        public init(
            arn: Swift.String? = nil,
            ipSetForwardedIPConfig: WAFV2ClientTypes.IPSetForwardedIPConfig? = nil
        )
        {
            self.arn = arn
            self.ipSetForwardedIPConfig = ipSetForwardedIPConfig
        }
    }

}

extension WAFV2ClientTypes {

    public enum LabelMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case label
        case namespace
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelMatchScope] {
            return [
                .label,
                .namespace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .label: return "LABEL"
            case .namespace: return "NAMESPACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement.
    public struct LabelMatchStatement {
        /// The string to match against. The setting you provide for this depends on the match statement's Scope setting:
        ///
        /// * If the Scope indicates LABEL, then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.
        ///
        /// * If the Scope indicates NAMESPACE, then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.
        ///
        ///
        /// Labels are case sensitive and components of a label must be separated by colon, for example NS1:NS2:name.
        /// This member is required.
        public var key: Swift.String?
        /// Specify whether you want to match using the label name or just the namespace.
        /// This member is required.
        public var scope: WAFV2ClientTypes.LabelMatchScope?

        public init(
            key: Swift.String? = nil,
            scope: WAFV2ClientTypes.LabelMatchScope? = nil
        )
        {
            self.key = key
            self.scope = scope
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a single rule in a rule group whose action you want to override to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
    public struct ExcludedRule {
        /// The name of the rule whose action you want to override to Count.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    /// The name of the field in the request payload that contains your customer's email. This data type is used in the RequestInspectionACFP data type.
    public struct EmailField {
        /// The name of the email field. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "email": "THE_EMAIL" } }, the email field specification is /form/email.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named email1, the email field specification is email1.
        /// This member is required.
        public var identifier: Swift.String?

        public init(
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {
    /// The name of the field in the request payload that contains your customer's password. This data type is used in the RequestInspection and RequestInspectionACFP data types.
    public struct PasswordField {
        /// The name of the password field. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "password": "THE_PASSWORD" } }, the password field specification is /form/password.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named password1, the password field specification is password1.
        /// This member is required.
        public var identifier: Swift.String?

        public init(
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {

    public enum PayloadType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case formEncoded
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [PayloadType] {
            return [
                .formEncoded,
                .json
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .formEncoded: return "FORM_ENCODED"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The name of a field in the request payload that contains part or all of your customer's primary phone number. This data type is used in the RequestInspectionACFP data type.
    public struct PhoneNumberField {
        /// The name of a single primary phone number field. How you specify the phone number fields depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }, the phone number field identifiers are /form/primaryphoneline1, /form/primaryphoneline2, and /form/primaryphoneline3.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named primaryphoneline1, primaryphoneline2, and primaryphoneline3, the phone number field identifiers are primaryphoneline1, primaryphoneline2, and primaryphoneline3.
        /// This member is required.
        public var identifier: Swift.String?

        public init(
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {
    /// The name of the field in the request payload that contains your customer's username. This data type is used in the RequestInspection and RequestInspectionACFP data types.
    public struct UsernameField {
        /// The name of the username field. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "username": "THE_USERNAME" } }, the username field specification is /form/username.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named username1, the username field specification is username1
        /// This member is required.
        public var identifier: Swift.String?

        public init(
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {
    /// The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. This is part of the AWSManagedRulesACFPRuleSet configuration in ManagedRuleGroupConfig. In these settings, you specify how your application accepts account creation attempts by providing the request payload type and the names of the fields within the request body where the username, password, email, and primary address and phone number fields are provided.
    public struct RequestInspectionACFP {
        /// The names of the fields in the request payload that contain your customer's primary physical address. Order the address fields in the array exactly as they are ordered in the request payload. How you specify the address fields depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }, the address field idenfiers are /form/primaryaddressline1, /form/primaryaddressline2, and /form/primaryaddressline3.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named primaryaddressline1, primaryaddressline2, and primaryaddressline3, the address fields identifiers are primaryaddressline1, primaryaddressline2, and primaryaddressline3.
        public var addressFields: [WAFV2ClientTypes.AddressField]?
        /// The name of the field in the request payload that contains your customer's email. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "email": "THE_EMAIL" } }, the email field specification is /form/email.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named email1, the email field specification is email1.
        public var emailField: WAFV2ClientTypes.EmailField?
        /// The name of the field in the request payload that contains your customer's password. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "password": "THE_PASSWORD" } }, the password field specification is /form/password.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named password1, the password field specification is password1.
        public var passwordField: WAFV2ClientTypes.PasswordField?
        /// The payload type for your account creation endpoint, either JSON or form encoded.
        /// This member is required.
        public var payloadType: WAFV2ClientTypes.PayloadType?
        /// The names of the fields in the request payload that contain your customer's primary phone number. Order the phone number fields in the array exactly as they are ordered in the request payload. How you specify the phone number fields depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }, the phone number field identifiers are /form/primaryphoneline1, /form/primaryphoneline2, and /form/primaryphoneline3.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named primaryphoneline1, primaryphoneline2, and primaryphoneline3, the phone number field identifiers are primaryphoneline1, primaryphoneline2, and primaryphoneline3.
        public var phoneNumberFields: [WAFV2ClientTypes.PhoneNumberField]?
        /// The name of the field in the request payload that contains your customer's username. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "username": "THE_USERNAME" } }, the username field specification is /form/username.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named username1, the username field specification is username1
        public var usernameField: WAFV2ClientTypes.UsernameField?

        public init(
            addressFields: [WAFV2ClientTypes.AddressField]? = nil,
            emailField: WAFV2ClientTypes.EmailField? = nil,
            passwordField: WAFV2ClientTypes.PasswordField? = nil,
            payloadType: WAFV2ClientTypes.PayloadType? = nil,
            phoneNumberFields: [WAFV2ClientTypes.PhoneNumberField]? = nil,
            usernameField: WAFV2ClientTypes.UsernameField? = nil
        )
        {
            self.addressFields = addressFields
            self.emailField = emailField
            self.passwordField = passwordField
            self.payloadType = payloadType
            self.phoneNumberFields = phoneNumberFields
            self.usernameField = usernameField
        }
    }

}

extension WAFV2ClientTypes {
    /// Configures inspection of the response body. WAF can inspect the first 65,536 bytes (64 KB) of the response body. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet and AWSManagedRulesACFPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionBodyContains {
        /// Strings in the body of the response that indicate a failed login or account creation attempt. To be counted as a failure, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON example: "FailureStrings": [ "Request failed" ]
        /// This member is required.
        public var failureStrings: [Swift.String]?
        /// Strings in the body of the response that indicate a successful login or account creation attempt. To be counted as a success, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON examples: "SuccessStrings": [ "Login successful" ] and "SuccessStrings": [ "Account creation successful", "Welcome to our site!" ]
        /// This member is required.
        public var successStrings: [Swift.String]?

        public init(
            failureStrings: [Swift.String]? = nil,
            successStrings: [Swift.String]? = nil
        )
        {
            self.failureStrings = failureStrings
            self.successStrings = successStrings
        }
    }

}

extension WAFV2ClientTypes {
    /// Configures inspection of the response header. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet and AWSManagedRulesACFPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionHeader {
        /// Values in the response header with the specified name that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON examples: "FailureValues": [ "LoginFailed", "Failed login" ] and "FailureValues": [ "AccountCreationFailed" ]
        /// This member is required.
        public var failureValues: [Swift.String]?
        /// The name of the header to match against. The name must be an exact match, including case. JSON example: "Name": [ "RequestResult" ]
        /// This member is required.
        public var name: Swift.String?
        /// Values in the response header with the specified name that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON examples: "SuccessValues": [ "LoginPassed", "Successful login" ] and "SuccessValues": [ "AccountCreated", "Successful account creation" ]
        /// This member is required.
        public var successValues: [Swift.String]?

        public init(
            failureValues: [Swift.String]? = nil,
            name: Swift.String? = nil,
            successValues: [Swift.String]? = nil
        )
        {
            self.failureValues = failureValues
            self.name = name
            self.successValues = successValues
        }
    }

}

extension WAFV2ClientTypes {
    /// Configures inspection of the response JSON. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet and AWSManagedRulesACFPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionJson {
        /// Values for the specified identifier in the response JSON that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "FailureValues": [ "False", "Failed" ]
        /// This member is required.
        public var failureValues: [Swift.String]?
        /// The identifier for the value to match against in the JSON. The identifier must be an exact match, including case. JSON examples: "Identifier": [ "/login/success" ] and "Identifier": [ "/sign-up/success" ]
        /// This member is required.
        public var identifier: Swift.String?
        /// Values for the specified identifier in the response JSON that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "SuccessValues": [ "True", "Succeeded" ]
        /// This member is required.
        public var successValues: [Swift.String]?

        public init(
            failureValues: [Swift.String]? = nil,
            identifier: Swift.String? = nil,
            successValues: [Swift.String]? = nil
        )
        {
            self.failureValues = failureValues
            self.identifier = identifier
            self.successValues = successValues
        }
    }

}

extension WAFV2ClientTypes {
    /// Configures inspection of the response status code. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet and AWSManagedRulesACFPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionStatusCode {
        /// Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: "FailureCodes": [ 400, 404 ]
        /// This member is required.
        public var failureCodes: [Swift.Int]?
        /// Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: "SuccessCodes": [ 200, 201 ]
        /// This member is required.
        public var successCodes: [Swift.Int]?

        public init(
            failureCodes: [Swift.Int]? = nil,
            successCodes: [Swift.Int]? = nil
        )
        {
            self.failureCodes = failureCodes
            self.successCodes = successCodes
        }
    }

}

extension WAFV2ClientTypes {
    /// The criteria for inspecting responses to login requests and account creation requests, used by the ATP and ACFP rule groups to track login and account creation success and failure rates. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. The rule groups evaluates the responses that your protected resources send back to client login and account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses with too much suspicious activity in a short amount of time. This is part of the AWSManagedRulesATPRuleSet and AWSManagedRulesACFPRuleSet configurations in ManagedRuleGroupConfig. Enable response inspection by configuring exactly one component of the response to inspect, for example, Header or StatusCode. You can't configure more than one component for inspection. If you don't configure any of the response inspection options, response inspection is disabled.
    public struct ResponseInspection {
        /// Configures inspection of the response body for success and failure indicators. WAF can inspect the first 65,536 bytes (64 KB) of the response body.
        public var bodyContains: WAFV2ClientTypes.ResponseInspectionBodyContains?
        /// Configures inspection of the response header for success and failure indicators.
        public var header: WAFV2ClientTypes.ResponseInspectionHeader?
        /// Configures inspection of the response JSON for success and failure indicators. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON.
        public var json: WAFV2ClientTypes.ResponseInspectionJson?
        /// Configures inspection of the response status code for success and failure indicators.
        public var statusCode: WAFV2ClientTypes.ResponseInspectionStatusCode?

        public init(
            bodyContains: WAFV2ClientTypes.ResponseInspectionBodyContains? = nil,
            header: WAFV2ClientTypes.ResponseInspectionHeader? = nil,
            json: WAFV2ClientTypes.ResponseInspectionJson? = nil,
            statusCode: WAFV2ClientTypes.ResponseInspectionStatusCode? = nil
        )
        {
            self.bodyContains = bodyContains
            self.header = header
            self.json = json
            self.statusCode = statusCode
        }
    }

}

extension WAFV2ClientTypes {
    /// Details for your use of the account creation fraud prevention managed rule group, AWSManagedRulesACFPRuleSet. This configuration is used in ManagedRuleGroupConfig.
    public struct AWSManagedRulesACFPRuleSet {
        /// The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept POST requests. For example, for the URL https://example.com/web/newaccount, you would provide the path /web/newaccount. Account creation page paths that start with the path that you provide are considered a match. For example /web/newaccount matches the account creation paths /web/newaccount, /web/newaccount/, /web/newaccountPage, and /web/newaccount/thisPage, but doesn't match the path /home/web/newaccount or /website/newaccount.
        /// This member is required.
        public var creationPath: Swift.String?
        /// Allow the use of regular expressions in the registration page path and the account creation path.
        public var enableRegexInPath: Swift.Bool
        /// The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. This page must accept GET text/html requests. For example, for the URL https://example.com/web/registration, you would provide the path /web/registration. Registration page paths that start with the path that you provide are considered a match. For example /web/registration matches the registration paths /web/registration, /web/registration/, /web/registrationPage, and /web/registration/thisPage, but doesn't match the path /home/web/registration or /website/registration.
        /// This member is required.
        public var registrationPagePath: Swift.String?
        /// The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts.
        /// This member is required.
        public var requestInspection: WAFV2ClientTypes.RequestInspectionACFP?
        /// The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time.
        public var responseInspection: WAFV2ClientTypes.ResponseInspection?

        public init(
            creationPath: Swift.String? = nil,
            enableRegexInPath: Swift.Bool = false,
            registrationPagePath: Swift.String? = nil,
            requestInspection: WAFV2ClientTypes.RequestInspectionACFP? = nil,
            responseInspection: WAFV2ClientTypes.ResponseInspection? = nil
        )
        {
            self.creationPath = creationPath
            self.enableRegexInPath = enableRegexInPath
            self.registrationPagePath = registrationPagePath
            self.requestInspection = requestInspection
            self.responseInspection = responseInspection
        }
    }

}

extension WAFV2ClientTypes {
    /// The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. This is part of the AWSManagedRulesATPRuleSet configuration in ManagedRuleGroupConfig. In these settings, you specify how your application accepts login attempts by providing the request payload type and the names of the fields within the request body where the username and password are provided.
    public struct RequestInspection {
        /// The name of the field in the request payload that contains your customer's password. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "password": "THE_PASSWORD" } }, the password field specification is /form/password.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named password1, the password field specification is password1.
        /// This member is required.
        public var passwordField: WAFV2ClientTypes.PasswordField?
        /// The payload type for your login endpoint, either JSON or form encoded.
        /// This member is required.
        public var payloadType: WAFV2ClientTypes.PayloadType?
        /// The name of the field in the request payload that contains your customer's username. How you specify this depends on the request inspection payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "form": { "username": "THE_USERNAME" } }, the username field specification is /form/username.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with the input element named username1, the username field specification is username1
        /// This member is required.
        public var usernameField: WAFV2ClientTypes.UsernameField?

        public init(
            passwordField: WAFV2ClientTypes.PasswordField? = nil,
            payloadType: WAFV2ClientTypes.PayloadType? = nil,
            usernameField: WAFV2ClientTypes.UsernameField? = nil
        )
        {
            self.passwordField = passwordField
            self.payloadType = payloadType
            self.usernameField = usernameField
        }
    }

}

extension WAFV2ClientTypes {
    /// Details for your use of the account takeover prevention managed rule group, AWSManagedRulesATPRuleSet. This configuration is used in ManagedRuleGroupConfig.
    public struct AWSManagedRulesATPRuleSet {
        /// Allow the use of regular expressions in the login page path.
        public var enableRegexInPath: Swift.Bool
        /// The path of the login endpoint for your application. For example, for the URL https://example.com/web/login, you would provide the path /web/login. Login paths that start with the path that you provide are considered a match. For example /web/login matches the login paths /web/login, /web/login/, /web/loginPage, and /web/login/thisPage, but doesn't match the login path /home/web/login or /website/login. The rule group inspects only HTTP POST requests to your specified login endpoint.
        /// This member is required.
        public var loginPath: Swift.String?
        /// The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage.
        public var requestInspection: WAFV2ClientTypes.RequestInspection?
        /// The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts for each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many failed login attempts in a short amount of time.
        public var responseInspection: WAFV2ClientTypes.ResponseInspection?

        public init(
            enableRegexInPath: Swift.Bool = false,
            loginPath: Swift.String? = nil,
            requestInspection: WAFV2ClientTypes.RequestInspection? = nil,
            responseInspection: WAFV2ClientTypes.ResponseInspection? = nil
        )
        {
            self.enableRegexInPath = enableRegexInPath
            self.loginPath = loginPath
            self.requestInspection = requestInspection
            self.responseInspection = responseInspection
        }
    }

}

extension WAFV2ClientTypes {

    public enum InspectionLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case common
        case targeted
        case sdkUnknown(Swift.String)

        public static var allCases: [InspectionLevel] {
            return [
                .common,
                .targeted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .common: return "COMMON"
            case .targeted: return "TARGETED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Details for your use of the Bot Control managed rule group, AWSManagedRulesBotControlRuleSet. This configuration is used in ManagedRuleGroupConfig.
    public struct AWSManagedRulesBotControlRuleSet {
        /// Applies only to the targeted inspection level. Determines whether to use machine learning (ML) to analyze your web traffic for bot-related activity. Machine learning is required for the Bot Control rules TGT_ML_CoordinatedActivityLow and TGT_ML_CoordinatedActivityMedium, which inspect for anomalous behavior that might indicate distributed, coordinated bot activity. For more information about this choice, see the listing for these rules in the table at [Bot Control rules listing](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html#aws-managed-rule-groups-bot-rules) in the WAF Developer Guide. Default: TRUE
        public var enableMachineLearning: Swift.Bool?
        /// The inspection level to use for the Bot Control rule group. The common level is the least expensive. The targeted level includes all common level rules and adds rules with more advanced inspection criteria. For details, see [WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html) in the WAF Developer Guide.
        /// This member is required.
        public var inspectionLevel: WAFV2ClientTypes.InspectionLevel?

        public init(
            enableMachineLearning: Swift.Bool? = true,
            inspectionLevel: WAFV2ClientTypes.InspectionLevel? = nil
        )
        {
            self.enableMachineLearning = enableMachineLearning
            self.inspectionLevel = inspectionLevel
        }
    }

}

extension WAFV2ClientTypes {
    /// Additional information that's used by a managed rule group. Many managed rule groups don't require this. The rule groups used for intelligent threat mitigation require additional configuration:
    ///
    /// * Use the AWSManagedRulesACFPRuleSet configuration object to configure the account creation fraud prevention managed rule group. The configuration includes the registration and sign-up pages of your application and the locations in the account creation request payload of data, such as the user email and phone number fields.
    ///
    /// * Use the AWSManagedRulesATPRuleSet configuration object to configure the account takeover prevention managed rule group. The configuration includes the sign-in page of your application and the locations in the login request payload of data such as the username and password.
    ///
    /// * Use the AWSManagedRulesBotControlRuleSet configuration object to configure the protection level that you want the Bot Control rule group to use.
    ///
    ///
    /// For example specifications, see the examples section of [CreateWebACL].
    public struct ManagedRuleGroupConfig {
        /// Additional configuration for using the account creation fraud prevention (ACFP) managed rule group, AWSManagedRulesACFPRuleSet. Use this to provide account creation request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to account creation requests. For information about using the ACFP managed rule group, see [WAF Fraud Control account creation fraud prevention (ACFP) rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-acfp.html) and [WAF Fraud Control account creation fraud prevention (ACFP)](https://docs.aws.amazon.com/waf/latest/developerguide/waf-acfp.html) in the WAF Developer Guide.
        public var awsManagedRulesACFPRuleSet: WAFV2ClientTypes.AWSManagedRulesACFPRuleSet?
        /// Additional configuration for using the account takeover prevention (ATP) managed rule group, AWSManagedRulesATPRuleSet. Use this to provide login request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to login requests. This configuration replaces the individual configuration fields in ManagedRuleGroupConfig and provides additional feature configuration. For information about using the ATP managed rule group, see [WAF Fraud Control account takeover prevention (ATP) rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-atp.html) and [WAF Fraud Control account takeover prevention (ATP)](https://docs.aws.amazon.com/waf/latest/developerguide/waf-atp.html) in the WAF Developer Guide.
        public var awsManagedRulesATPRuleSet: WAFV2ClientTypes.AWSManagedRulesATPRuleSet?
        /// Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see [WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html) and [WAF Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html) in the WAF Developer Guide.
        public var awsManagedRulesBotControlRuleSet: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet?
        /// Instead of this setting, provide your configuration under AWSManagedRulesATPRuleSet.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet LoginPath")
        public var loginPath: Swift.String?
        /// Instead of this setting, provide your configuration under the request inspection configuration for AWSManagedRulesATPRuleSet or AWSManagedRulesACFPRuleSet.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PasswordField")
        public var passwordField: WAFV2ClientTypes.PasswordField?
        /// Instead of this setting, provide your configuration under the request inspection configuration for AWSManagedRulesATPRuleSet or AWSManagedRulesACFPRuleSet.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PayloadType")
        public var payloadType: WAFV2ClientTypes.PayloadType?
        /// Instead of this setting, provide your configuration under the request inspection configuration for AWSManagedRulesATPRuleSet or AWSManagedRulesACFPRuleSet.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection UsernameField")
        public var usernameField: WAFV2ClientTypes.UsernameField?

        public init(
            awsManagedRulesACFPRuleSet: WAFV2ClientTypes.AWSManagedRulesACFPRuleSet? = nil,
            awsManagedRulesATPRuleSet: WAFV2ClientTypes.AWSManagedRulesATPRuleSet? = nil,
            awsManagedRulesBotControlRuleSet: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet? = nil,
            loginPath: Swift.String? = nil,
            passwordField: WAFV2ClientTypes.PasswordField? = nil,
            payloadType: WAFV2ClientTypes.PayloadType? = nil,
            usernameField: WAFV2ClientTypes.UsernameField? = nil
        )
        {
            self.awsManagedRulesACFPRuleSet = awsManagedRulesACFPRuleSet
            self.awsManagedRulesATPRuleSet = awsManagedRulesATPRuleSet
            self.awsManagedRulesBotControlRuleSet = awsManagedRulesBotControlRuleSet
            self.loginPath = loginPath
            self.passwordField = passwordField
            self.payloadType = payloadType
            self.usernameField = usernameField
        }
    }

}

extension WAFV2ClientTypes {
    /// A custom response to send to the client. You can define a custom response for rule actions and default web ACL actions that are set to [BlockAction]. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
    public struct CustomResponse {
        /// References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the CustomResponseBodies setting for the [WebACL] or [RuleGroup] where you want to use it. Then, in the rule action or web ACL default action BlockAction setting, you reference the response body using this key.
        public var customResponseBodyKey: Swift.String?
        /// The HTTP status code to return to the client. For a list of status codes that you can use in your custom responses, see [Supported status codes for custom response](https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html) in the WAF Developer Guide.
        /// This member is required.
        public var responseCode: Swift.Int?
        /// The HTTP headers to use in the response. You can specify any header name except for content-type. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
        public var responseHeaders: [WAFV2ClientTypes.CustomHTTPHeader]?

        public init(
            customResponseBodyKey: Swift.String? = nil,
            responseCode: Swift.Int? = nil,
            responseHeaders: [WAFV2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.customResponseBodyKey = customResponseBodyKey
            self.responseCode = responseCode
            self.responseHeaders = responseHeaders
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should block the request and optionally defines additional custom handling for the response to the web request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct BlockAction {
        /// Defines a custom response for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
        public var customResponse: WAFV2ClientTypes.CustomResponse?

        public init(
            customResponse: WAFV2ClientTypes.CustomResponse? = nil
        )
        {
            self.customResponse = customResponse
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should run a CAPTCHA check against the request:
    ///
    /// * If the request includes a valid, unexpired CAPTCHA token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a CountAction.
    ///
    /// * If the request doesn't include a valid, unexpired token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. WAF generates a response that it sends back to the client, which includes the following:
    ///
    /// * The header x-amzn-waf-action with a value of captcha.
    ///
    /// * The HTTP status code 405 Method Not Allowed.
    ///
    /// * If the request contains an Accept header with a value of text/html, the response includes a CAPTCHA JavaScript page interstitial.
    ///
    ///
    ///
    ///
    ///
    /// You can configure the expiration time in the CaptchaConfigImmunityTimeProperty setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.
    public struct CaptchaAction {
        /// Defines custom handling for the web request, used when the CAPTCHA inspection determines that the request's token is valid and unexpired. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init(
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should run a Challenge check against the request to verify that the request is coming from a legitimate client session:
    ///
    /// * If the request includes a valid, unexpired challenge token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a CountAction.
    ///
    /// * If the request doesn't include a valid, unexpired challenge token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. WAF then generates a challenge response that it sends back to the client, which includes the following:
    ///
    /// * The header x-amzn-waf-action with a value of challenge.
    ///
    /// * The HTTP status code 202 Request Accepted.
    ///
    /// * If the request contains an Accept header with a value of text/html, the response includes a JavaScript page interstitial with a challenge script.
    ///
    ///
    /// Challenges run silent browser interrogations in the background, and don't generally affect the end user experience. A challenge enforces token acquisition using an interstitial JavaScript challenge that inspects the client session for legitimate behavior. The challenge blocks bots or at least increases the cost of operating sophisticated bots. After the client session successfully responds to the challenge, it receives a new token from WAF, which the challenge script uses to resubmit the original request.
    ///
    ///
    /// You can configure the expiration time in the ChallengeConfigImmunityTimeProperty setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.
    public struct ChallengeAction {
        /// Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init(
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should count the request. Optionally defines additional custom handling for the request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct CountAction {
        /// Defines custom handling for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide.
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init(
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes {
    /// The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting.
    public struct RuleAction {
        /// Instructs WAF to allow the web request.
        public var allow: WAFV2ClientTypes.AllowAction?
        /// Instructs WAF to block the web request.
        public var block: WAFV2ClientTypes.BlockAction?
        /// Instructs WAF to run a CAPTCHA check against the web request.
        public var captcha: WAFV2ClientTypes.CaptchaAction?
        /// Instructs WAF to run a Challenge check against the web request.
        public var challenge: WAFV2ClientTypes.ChallengeAction?
        /// Instructs WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.
        public var count: WAFV2ClientTypes.CountAction?

        public init(
            allow: WAFV2ClientTypes.AllowAction? = nil,
            block: WAFV2ClientTypes.BlockAction? = nil,
            captcha: WAFV2ClientTypes.CaptchaAction? = nil,
            challenge: WAFV2ClientTypes.ChallengeAction? = nil,
            count: WAFV2ClientTypes.CountAction? = nil
        )
        {
            self.allow = allow
            self.block = block
            self.captcha = captcha
            self.challenge = challenge
            self.count = count
        }
    }

}

extension WAFV2ClientTypes {
    /// Action setting to use in the place of a rule action that is configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
    public struct RuleActionOverride {
        /// The override action to use, in place of the configured action of the rule in the rule group.
        /// This member is required.
        public var actionToUse: WAFV2ClientTypes.RuleAction?
        /// The name of the rule to override.
        /// This member is required.
        public var name: Swift.String?

        public init(
            actionToUse: WAFV2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionToUse = actionToUse
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {

    public enum RateBasedStatementAggregateKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case constant
        case customKeys
        case forwardedIp
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [RateBasedStatementAggregateKeyType] {
            return [
                .constant,
                .customKeys,
                .forwardedIp,
                .ip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .constant: return "CONSTANT"
            case .customKeys: return "CUSTOM_KEYS"
            case .forwardedIp: return "FORWARDED_IP"
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Specifies a cookie as an aggregate key for a rate-based rule. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance.
    public struct RateLimitCookie {
        /// The name of the cookie to use.
        /// This member is required.
        public var name: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            name: Swift.String? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.name = name
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule. Each distinct forwarded IP address contributes to the aggregation instance. This setting is used only in the RateBasedStatementCustomKey specification of a rate-based rule statement. When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying FORWARDED_IP in your rate-based statement's AggregateKeyType. This data type supports using the forwarded IP address in the web request aggregation for a rate-based rule, in RateBasedStatementCustomKey. The JSON specification for using the forwarded IP address doesn't explicitly use this data type. JSON specification: "ForwardedIP": {} When you use this specification, you must also configure the forwarded IP address in the rate-based statement's ForwardedIPConfig.
    public struct RateLimitForwardedIP {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a header as an aggregate key for a rate-based rule. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance.
    public struct RateLimitHeader {
        /// The name of the header to use.
        /// This member is required.
        public var name: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            name: Swift.String? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.name = name
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies the request's HTTP method as an aggregate key for a rate-based rule. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance. JSON specification: "RateLimitHTTPMethod": {}
    public struct RateLimitHTTPMethod {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Specifies the IP address in the web request as an aggregate key for a rate-based rule. Each distinct IP address contributes to the aggregation instance. This setting is used only in the RateBasedStatementCustomKey specification of a rate-based rule statement. To use this in the custom key settings, you must specify at least one other key to use, along with the IP address. To aggregate on only the IP address, in your rate-based statement's AggregateKeyType, specify IP. JSON specification: "RateLimitIP": {}
    public struct RateLimitIP {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a label namespace to use as an aggregate key for a rate-based rule. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance. This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL. For information about label namespaces and names, see [Label syntax and naming requirements](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html) in the WAF Developer Guide.
    public struct RateLimitLabelNamespace {
        /// The namespace to use for aggregation.
        /// This member is required.
        public var namespace: Swift.String?

        public init(
            namespace: Swift.String? = nil
        )
        {
            self.namespace = namespace
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a query argument in the request as an aggregate key for a rate-based rule. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance.
    public struct RateLimitQueryArgument {
        /// The name of the query argument to use.
        /// This member is required.
        public var name: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            name: Swift.String? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.name = name
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies the request's query string as an aggregate key for a rate-based rule. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance.
    public struct RateLimitQueryString {
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies the request's URI path as an aggregate key for a rate-based rule. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance.
    public struct RateLimitUriPath {
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies a single custom aggregate key for a rate-base rule. Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling.
    public struct RateBasedStatementCustomKey {
        /// Use the value of a cookie in the request as an aggregate key. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance.
        public var cookie: WAFV2ClientTypes.RateLimitCookie?
        /// Use the first IP address in an HTTP header as an aggregate key. Each distinct forwarded IP address contributes to the aggregation instance. When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying FORWARDED_IP in your rate-based statement's AggregateKeyType. With this option, you must specify the header to use in the rate-based rule's ForwardedIPConfig property.
        public var forwardedIP: WAFV2ClientTypes.RateLimitForwardedIP?
        /// Use the value of a header in the request as an aggregate key. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance.
        public var header: WAFV2ClientTypes.RateLimitHeader?
        /// Use the request's HTTP method as an aggregate key. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance.
        public var httpMethod: WAFV2ClientTypes.RateLimitHTTPMethod?
        /// Use the request's originating IP address as an aggregate key. Each distinct IP address contributes to the aggregation instance. When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the IP address by specifying IP in your rate-based statement's AggregateKeyType.
        public var ip: WAFV2ClientTypes.RateLimitIP?
        /// Use the specified label namespace as an aggregate key. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance. This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL. For information about label namespaces and names, see [Label syntax and naming requirements](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html) in the WAF Developer Guide.
        public var labelNamespace: WAFV2ClientTypes.RateLimitLabelNamespace?
        /// Use the specified query argument as an aggregate key. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance.
        public var queryArgument: WAFV2ClientTypes.RateLimitQueryArgument?
        /// Use the request's query string as an aggregate key. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance.
        public var queryString: WAFV2ClientTypes.RateLimitQueryString?
        /// Use the request's URI path as an aggregate key. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance.
        public var uriPath: WAFV2ClientTypes.RateLimitUriPath?

        public init(
            cookie: WAFV2ClientTypes.RateLimitCookie? = nil,
            forwardedIP: WAFV2ClientTypes.RateLimitForwardedIP? = nil,
            header: WAFV2ClientTypes.RateLimitHeader? = nil,
            httpMethod: WAFV2ClientTypes.RateLimitHTTPMethod? = nil,
            ip: WAFV2ClientTypes.RateLimitIP? = nil,
            labelNamespace: WAFV2ClientTypes.RateLimitLabelNamespace? = nil,
            queryArgument: WAFV2ClientTypes.RateLimitQueryArgument? = nil,
            queryString: WAFV2ClientTypes.RateLimitQueryString? = nil,
            uriPath: WAFV2ClientTypes.RateLimitUriPath? = nil
        )
        {
            self.cookie = cookie
            self.forwardedIP = forwardedIP
            self.header = header
            self.httpMethod = httpMethod
            self.ip = ip
            self.labelNamespace = labelNamespace
            self.queryArgument = queryArgument
            self.queryString = queryString
            self.uriPath = uriPath
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement used to search web request components for a match against a single regular expression.
    public struct RegexMatchStatement {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The string representing the regular expression.
        /// This member is required.
        public var regexString: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            regexString: Swift.String? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.regexString = regexString
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement used to search web request components for matches with regular expressions. To use this, create a [RegexPatternSet] that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see [CreateRegexPatternSet]. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
    public struct RegexPatternSetReferenceStatement {
        /// The Amazon Resource Name (ARN) of the [RegexPatternSet] that this statement references.
        /// This member is required.
        public var arn: Swift.String?
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            arn: Swift.String? = nil,
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.arn = arn
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement used to run the rules that are defined in a [RuleGroup]. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. You cannot use a rule group reference statement inside another rule group. You can only reference a rule group as a top-level statement within a rule that you define in a web ACL.
    public struct RuleGroupReferenceStatement {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// Rules in the referenced rule group whose actions are set to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
        public var excludedRules: [WAFV2ClientTypes.ExcludedRule]?
        /// Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
        public var ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]?

        public init(
            arn: Swift.String? = nil,
            excludedRules: [WAFV2ClientTypes.ExcludedRule]? = nil,
            ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]? = nil
        )
        {
            self.arn = arn
            self.excludedRules = excludedRules
            self.ruleActionOverrides = ruleActionOverrides
        }
    }

}

extension WAFV2ClientTypes {

    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eq
        case ge
        case gt
        case le
        case lt
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .eq,
                .ge,
                .gt,
                .le,
                .lt,
                .ne
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure WAF to inspect the request body, WAF inspects only the number of bytes in the body up to the limit for the web ACL and protected resource type. If you know that the request body for your web requests should never exceed the inspection limit, you can use a size constraint statement to block requests that have a larger request body size. For more information about the inspection limits, see Body and JsonBody settings for the FieldToMatch data type. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
    public struct SizeConstraintStatement {
        /// The operator to use to compare the request part to the size setting.
        /// This member is required.
        public var comparisonOperator: WAFV2ClientTypes.ComparisonOperator?
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The size, in byte, to compare to the request part, after any transformations.
        /// This member is required.
        public var size: Swift.Int
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            comparisonOperator: WAFV2ClientTypes.ComparisonOperator? = nil,
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {

    public enum SensitivityLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case high
        case low
        case sdkUnknown(Swift.String)

        public static var allCases: [SensitivityLevel] {
            return [
                .high,
                .low
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
    public struct SqliMatchStatement {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The sensitivity that you want WAF to use to inspect for SQL injection attacks. HIGH detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see [Testing and tuning](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html) in the WAF Developer Guide. LOW is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives. Default: LOW
        public var sensitivityLevel: WAFV2ClientTypes.SensitivityLevel?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            sensitivityLevel: WAFV2ClientTypes.SensitivityLevel? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.sensitivityLevel = sensitivityLevel
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
    public struct XssMatchStatement {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the FieldToMatch request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init(
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes {
    /// Information for a single API key. API keys are required for the integration of the CAPTCHA API in your JavaScript client applications. The API lets you customize the placement and characteristics of the CAPTCHA puzzle for your end users. For more information about the CAPTCHA JavaScript integration, see [WAF client application integration](https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html) in the WAF Developer Guide.
    public struct APIKeySummary {
        /// The generated, encrypted API key. You can copy this for use in your JavaScript CAPTCHA integration.
        public var apiKey: Swift.String?
        /// The date and time that the key was created.
        public var creationTimestamp: Foundation.Date?
        /// The token domains that are defined in this API key.
        public var tokenDomains: [Swift.String]?
        /// Internal value used by WAF to manage the key.
        public var version: Swift.Int

        public init(
            apiKey: Swift.String? = nil,
            creationTimestamp: Foundation.Date? = nil,
            tokenDomains: [Swift.String]? = nil,
            version: Swift.Int = 0
        )
        {
            self.apiKey = apiKey
            self.creationTimestamp = creationTimestamp
            self.tokenDomains = tokenDomains
            self.version = version
        }
    }

}

extension WAFV2ClientTypes {

    public enum AssociatedResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiGateway
        case appRunnerService
        case cloudfront
        case cognitoUserPool
        case verifiedAccessInstance
        case sdkUnknown(Swift.String)

        public static var allCases: [AssociatedResourceType] {
            return [
                .apiGateway,
                .appRunnerService,
                .cloudfront,
                .cognitoUserPool,
                .verifiedAccessInstance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .appRunnerService: return "APP_RUNNER_SERVICE"
            case .cloudfront: return "CLOUDFRONT"
            case .cognitoUserPool: return "COGNITO_USER_POOL"
            case .verifiedAccessInstance: return "VERIFIED_ACCESS_INSTANCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Your request is valid, but WAF couldn’t perform the operation because of a system problem. Retry your request.
public struct WAFInternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation isn't valid.
public struct WAFInvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFV2ClientTypes {

    public enum ParameterExceptionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acpRuleSetResponseInspection
        case andStatement
        case associableResource
        case associatedResourceType
        case atpRuleSetResponseInspection
        case bodyParsingFallbackBehavior
        case byteMatchStatement
        case challengeConfig
        case changePropagationStatus
        case cookieMatchPattern
        case customKeys
        case customRequestHandling
        case customResponse
        case customResponseBody
        case defaultAction
        case entityLimit
        case excludedRule
        case expireTimestamp
        case fallbackBehavior
        case fieldToMatch
        case filterCondition
        case firewallManagerStatement
        case forwardedIpConfig
        case geoMatchStatement
        case headerMatchPattern
        case headerName
        case ipAddress
        case ipAddressVersion
        case ipSet
        case ipSetForwardedIpConfig
        case ipSetReferenceStatement
        case jsonMatchPattern
        case jsonMatchScope
        case labelMatchStatement
        case loggingFilter
        case logDestination
        case managedRuleGroupConfig
        case managedRuleSet
        case managedRuleSetStatement
        case mapMatchScope
        case metricName
        case notStatement
        case orStatement
        case overrideAction
        case oversizeHandling
        case payloadType
        case position
        case rateBasedStatement
        case regexPatternReferenceStatement
        case regexPatternSet
        case resourceArn
        case resourceType
        case responseContentType
        case rule
        case ruleAction
        case ruleGroup
        case ruleGroupReferenceStatement
        case scopeDown
        case scopeValue
        case singleHeader
        case singleQueryArgument
        case sizeConstraintStatement
        case sqliMatchStatement
        case statement
        case tags
        case tagKeys
        case textTransformation
        case tokenDomain
        case webAcl
        case xssMatchStatement
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionField] {
            return [
                .acpRuleSetResponseInspection,
                .andStatement,
                .associableResource,
                .associatedResourceType,
                .atpRuleSetResponseInspection,
                .bodyParsingFallbackBehavior,
                .byteMatchStatement,
                .challengeConfig,
                .changePropagationStatus,
                .cookieMatchPattern,
                .customKeys,
                .customRequestHandling,
                .customResponse,
                .customResponseBody,
                .defaultAction,
                .entityLimit,
                .excludedRule,
                .expireTimestamp,
                .fallbackBehavior,
                .fieldToMatch,
                .filterCondition,
                .firewallManagerStatement,
                .forwardedIpConfig,
                .geoMatchStatement,
                .headerMatchPattern,
                .headerName,
                .ipAddress,
                .ipAddressVersion,
                .ipSet,
                .ipSetForwardedIpConfig,
                .ipSetReferenceStatement,
                .jsonMatchPattern,
                .jsonMatchScope,
                .labelMatchStatement,
                .loggingFilter,
                .logDestination,
                .managedRuleGroupConfig,
                .managedRuleSet,
                .managedRuleSetStatement,
                .mapMatchScope,
                .metricName,
                .notStatement,
                .orStatement,
                .overrideAction,
                .oversizeHandling,
                .payloadType,
                .position,
                .rateBasedStatement,
                .regexPatternReferenceStatement,
                .regexPatternSet,
                .resourceArn,
                .resourceType,
                .responseContentType,
                .rule,
                .ruleAction,
                .ruleGroup,
                .ruleGroupReferenceStatement,
                .scopeDown,
                .scopeValue,
                .singleHeader,
                .singleQueryArgument,
                .sizeConstraintStatement,
                .sqliMatchStatement,
                .statement,
                .tags,
                .tagKeys,
                .textTransformation,
                .tokenDomain,
                .webAcl,
                .xssMatchStatement
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acpRuleSetResponseInspection: return "ACP_RULE_SET_RESPONSE_INSPECTION"
            case .andStatement: return "AND_STATEMENT"
            case .associableResource: return "ASSOCIABLE_RESOURCE"
            case .associatedResourceType: return "ASSOCIATED_RESOURCE_TYPE"
            case .atpRuleSetResponseInspection: return "ATP_RULE_SET_RESPONSE_INSPECTION"
            case .bodyParsingFallbackBehavior: return "BODY_PARSING_FALLBACK_BEHAVIOR"
            case .byteMatchStatement: return "BYTE_MATCH_STATEMENT"
            case .challengeConfig: return "CHALLENGE_CONFIG"
            case .changePropagationStatus: return "CHANGE_PROPAGATION_STATUS"
            case .cookieMatchPattern: return "COOKIE_MATCH_PATTERN"
            case .customKeys: return "CUSTOM_KEYS"
            case .customRequestHandling: return "CUSTOM_REQUEST_HANDLING"
            case .customResponse: return "CUSTOM_RESPONSE"
            case .customResponseBody: return "CUSTOM_RESPONSE_BODY"
            case .defaultAction: return "DEFAULT_ACTION"
            case .entityLimit: return "ENTITY_LIMIT"
            case .excludedRule: return "EXCLUDED_RULE"
            case .expireTimestamp: return "EXPIRE_TIMESTAMP"
            case .fallbackBehavior: return "FALLBACK_BEHAVIOR"
            case .fieldToMatch: return "FIELD_TO_MATCH"
            case .filterCondition: return "FILTER_CONDITION"
            case .firewallManagerStatement: return "FIREWALL_MANAGER_STATEMENT"
            case .forwardedIpConfig: return "FORWARDED_IP_CONFIG"
            case .geoMatchStatement: return "GEO_MATCH_STATEMENT"
            case .headerMatchPattern: return "HEADER_MATCH_PATTERN"
            case .headerName: return "HEADER_NAME"
            case .ipAddress: return "IP_ADDRESS"
            case .ipAddressVersion: return "IP_ADDRESS_VERSION"
            case .ipSet: return "IP_SET"
            case .ipSetForwardedIpConfig: return "IP_SET_FORWARDED_IP_CONFIG"
            case .ipSetReferenceStatement: return "IP_SET_REFERENCE_STATEMENT"
            case .jsonMatchPattern: return "JSON_MATCH_PATTERN"
            case .jsonMatchScope: return "JSON_MATCH_SCOPE"
            case .labelMatchStatement: return "LABEL_MATCH_STATEMENT"
            case .loggingFilter: return "LOGGING_FILTER"
            case .logDestination: return "LOG_DESTINATION"
            case .managedRuleGroupConfig: return "MANAGED_RULE_GROUP_CONFIG"
            case .managedRuleSet: return "MANAGED_RULE_SET"
            case .managedRuleSetStatement: return "MANAGED_RULE_SET_STATEMENT"
            case .mapMatchScope: return "MAP_MATCH_SCOPE"
            case .metricName: return "METRIC_NAME"
            case .notStatement: return "NOT_STATEMENT"
            case .orStatement: return "OR_STATEMENT"
            case .overrideAction: return "OVERRIDE_ACTION"
            case .oversizeHandling: return "OVERSIZE_HANDLING"
            case .payloadType: return "PAYLOAD_TYPE"
            case .position: return "POSITION"
            case .rateBasedStatement: return "RATE_BASED_STATEMENT"
            case .regexPatternReferenceStatement: return "REGEX_PATTERN_REFERENCE_STATEMENT"
            case .regexPatternSet: return "REGEX_PATTERN_SET"
            case .resourceArn: return "RESOURCE_ARN"
            case .resourceType: return "RESOURCE_TYPE"
            case .responseContentType: return "RESPONSE_CONTENT_TYPE"
            case .rule: return "RULE"
            case .ruleAction: return "RULE_ACTION"
            case .ruleGroup: return "RULE_GROUP"
            case .ruleGroupReferenceStatement: return "RULE_GROUP_REFERENCE_STATEMENT"
            case .scopeDown: return "SCOPE_DOWN"
            case .scopeValue: return "SCOPE_VALUE"
            case .singleHeader: return "SINGLE_HEADER"
            case .singleQueryArgument: return "SINGLE_QUERY_ARGUMENT"
            case .sizeConstraintStatement: return "SIZE_CONSTRAINT_STATEMENT"
            case .sqliMatchStatement: return "SQLI_MATCH_STATEMENT"
            case .statement: return "STATEMENT"
            case .tags: return "TAGS"
            case .tagKeys: return "TAG_KEYS"
            case .textTransformation: return "TEXT_TRANSFORMATION"
            case .tokenDomain: return "TOKEN_DOMAIN"
            case .webAcl: return "WEB_ACL"
            case .xssMatchStatement: return "XSS_MATCH_STATEMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The operation failed because WAF didn't recognize a parameter in the request. For example:
///
/// * You specified a parameter name or value that isn't valid.
///
/// * Your nested statement isn't valid. You might have tried to nest a statement that can’t be nested.
///
/// * You tried to update a WebACL with a DefaultAction that isn't among the types available at [DefaultAction].
///
/// * Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL can't be associated.
public struct WAFInvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The settings where the invalid parameter was found.
        public internal(set) var field: WAFV2ClientTypes.ParameterExceptionField? = nil
        public internal(set) var message: Swift.String? = nil
        /// The invalid parameter that resulted in the exception.
        public internal(set) var parameter: Swift.String? = nil
        /// Additional information about the exception.
        public internal(set) var reason: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        field: WAFV2ClientTypes.ParameterExceptionField? = nil,
        message: Swift.String? = nil,
        parameter: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.properties.field = field
        self.properties.message = message
        self.properties.parameter = parameter
        self.properties.reason = reason
    }
}

/// WAF couldn’t perform the operation because your resource doesn't exist. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate.
public struct WAFNonexistentItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFNonexistentItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF couldn’t retrieve a resource that you specified for this operation. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate. Verify the resources that you are specifying in your request parameters and then retry the operation.
public struct WAFUnavailableEntityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFUnavailableEntityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateWebACLInput {
    /// The Amazon Resource Name (ARN) of the resource to associate with the web ACL. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:partition:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:partition:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:partition:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:partition:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:partition:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    ///
    /// * For an Amazon Web Services Verified Access instance: arn:partition:ec2:region:account-id:verified-access-instance/instance-id
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.
    /// This member is required.
    public var webACLArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.webACLArn = webACLArn
    }
}

public struct AssociateWebACLOutput {

    public init() { }
}

extension WAFV2ClientTypes {

    public enum SizeInspectionLimit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kb16
        case kb32
        case kb48
        case kb64
        case sdkUnknown(Swift.String)

        public static var allCases: [SizeInspectionLimit] {
            return [
                .kb16,
                .kb32,
                .kb48,
                .kb64
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kb16: return "KB_16"
            case .kb32: return "KB_32"
            case .kb48: return "KB_48"
            case .kb64: return "KB_64"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// Customizes the maximum size of the request body that your protected CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access resources forward to WAF for inspection. The default size is 16 KB (16,384 bytes). You can change the setting for any of the available resource types. You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). Example JSON:  { "API_GATEWAY": "KB_48", "APP_RUNNER_SERVICE": "KB_32" } For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes). This is used in the AssociationConfig of the web ACL.
    public struct RequestBodyAssociatedResourceTypeConfig {
        /// Specifies the maximum size of the web request body component that an associated CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resource should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. Default: 16 KB (16,384 bytes)
        /// This member is required.
        public var defaultSizeInspectionLimit: WAFV2ClientTypes.SizeInspectionLimit?

        public init(
            defaultSizeInspectionLimit: WAFV2ClientTypes.SizeInspectionLimit? = nil
        )
        {
            self.defaultSizeInspectionLimit = defaultSizeInspectionLimit
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies custom configurations for the associations between the web ACL and protected resources. Use this to customize the maximum size of the request body that your protected resources forward to WAF for inspection. You can customize this setting for CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resources. The default setting is 16 KB (16,384 bytes). You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
    public struct AssociationConfig {
        /// Customizes the maximum size of the request body that your protected CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access resources forward to WAF for inspection. The default size is 16 KB (16,384 bytes). You can change the setting for any of the available resource types. You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). Example JSON:  { "API_GATEWAY": "KB_48", "APP_RUNNER_SERVICE": "KB_32" } For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        public var requestBody: [Swift.String: WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig]?

        public init(
            requestBody: [Swift.String: WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig]? = nil
        )
        {
            self.requestBody = requestBody
        }
    }

}

/// The operation failed because the specified version for the managed rule group has expired. You can retrieve the available versions for the managed rule group by calling [ListAvailableManagedRuleGroupVersions].
public struct WAFExpiredManagedRuleGroupVersionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFExpiredManagedRuleGroupVersionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF couldn’t perform the operation because the resource that you requested isn’t valid. Check the resource, and try again.
public struct WAFInvalidResourceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidResourceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF couldn’t perform the operation because you exceeded your resource limit. For example, the maximum number of WebACL objects that you can create for an Amazon Web Services account. For more information, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
public struct WAFLimitsExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Source type for the exception.
        public internal(set) var sourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFLimitsExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        sourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.sourceType = sourceType
    }
}

/// You tried to use a managed rule group that's available by subscription, but you aren't subscribed to it yet.
public struct WAFSubscriptionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFSubscriptionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFV2ClientTypes {
    /// Used for CAPTCHA and challenge token settings. Determines how long a CAPTCHA or challenge timestamp remains valid after WAF updates it for a successful CAPTCHA or challenge response.
    public struct ImmunityTimeProperty {
        /// The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by WAF. The default setting is 300. For the Challenge action, the minimum setting is 300.
        /// This member is required.
        public var immunityTime: Swift.Int?

        public init(
            immunityTime: Swift.Int? = nil
        )
        {
            self.immunityTime = immunityTime
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies how WAF should handle CAPTCHA evaluations. This is available at the web ACL level and in each rule.
    public struct CaptchaConfig {
        /// Determines how long a CAPTCHA timestamp in the token remains valid after the client successfully solves a CAPTCHA puzzle.
        public var immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty?

        public init(
            immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty? = nil
        )
        {
            self.immunityTimeProperty = immunityTimeProperty
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies how WAF should handle Challenge evaluations. This is available at the web ACL level and in each rule.
    public struct ChallengeConfig {
        /// Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.
        public var immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty?

        public init(
            immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty? = nil
        )
        {
            self.immunityTimeProperty = immunityTimeProperty
        }
    }

}

extension WAFV2ClientTypes {
    /// Specifies that WAF should do nothing. This is used for the OverrideAction setting on a [Rule] when the rule uses a rule group reference statement. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction]. JSON specification: "None": {}
    public struct NoneAction {

        public init() { }
    }

}

extension WAFV2ClientTypes {
    /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
    public struct OverrideAction {
        /// Override the rule group evaluation result to count only. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        public var count: WAFV2ClientTypes.CountAction?
        /// Don't override the rule group evaluation result. This is the most common setting.
        public var `none`: WAFV2ClientTypes.NoneAction?

        public init(
            count: WAFV2ClientTypes.CountAction? = nil,
            `none`: WAFV2ClientTypes.NoneAction? = nil
        )
        {
            self.count = count
            self.`none` = `none`
        }
    }

}

extension WAFV2ClientTypes {
    /// A single label container. This is used as an element of a label array in multiple contexts, for example, in RuleLabels inside a [Rule] and in Labels inside a [SampledHTTPRequest].
    public struct Label {
        /// The label string.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    public struct VisibilityConfig {
        /// Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see [WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics) in the WAF Developer Guide. For web ACLs, the metrics are for web requests that have the web ACL default action applied. WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information, see [The web ACL default action](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html) in the WAF Developer Guide.
        /// This member is required.
        public var cloudWatchMetricsEnabled: Swift.Bool
        /// A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for WAF, for example All and Default_Action.
        /// This member is required.
        public var metricName: Swift.String?
        /// Indicates whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. Request sampling doesn't provide a field redaction option, and any field redaction that you specify in your logging configuration doesn't affect sampling. The only way to exclude fields from request sampling is by disabling sampling in the web ACL visibility configuration.
        /// This member is required.
        public var sampledRequestsEnabled: Swift.Bool

        public init(
            cloudWatchMetricsEnabled: Swift.Bool = false,
            metricName: Swift.String? = nil,
            sampledRequestsEnabled: Swift.Bool = false
        )
        {
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
            self.metricName = metricName
            self.sampledRequestsEnabled = sampledRequestsEnabled
        }
    }

}

extension WAFV2ClientTypes {

    public enum Scope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudfront
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .cloudfront,
                .regional
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudfront: return "CLOUDFRONT"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CheckCapacityOutput {
    /// The capacity required by the rules and scope.
    public var capacity: Swift.Int

    public init(
        capacity: Swift.Int = 0
    )
    {
        self.capacity = capacity
    }
}

public struct CreateAPIKeyInput {
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The client application domains that you want to use this API key for. Example JSON: "TokenDomains": ["abc.com", "store.abc.com"] Public suffixes aren't allowed. For example, you can't use gov.au or co.uk as token domains.
    /// This member is required.
    public var tokenDomains: [Swift.String]?

    public init(
        scope: WAFV2ClientTypes.Scope? = nil,
        tokenDomains: [Swift.String]? = nil
    )
    {
        self.scope = scope
        self.tokenDomains = tokenDomains
    }
}

public struct CreateAPIKeyOutput {
    /// The generated, encrypted API key. You can copy this for use in your JavaScript CAPTCHA integration.
    public var apiKey: Swift.String?

    public init(
        apiKey: Swift.String? = nil
    )
    {
        self.apiKey = apiKey
    }
}

/// WAF couldn’t perform the operation because the resource that you tried to save is a duplicate of an existing one.
public struct WAFDuplicateItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFDuplicateItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF couldn’t save your changes because you tried to update or delete a resource that has changed since you last retrieved it. Get the resource again, make any changes you need to make to the new copy, and retry your operation.
public struct WAFOptimisticLockException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFOptimisticLockException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error occurred during the tagging operation. Retry your request.
public struct WAFTagOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFTagOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF couldn’t perform your tagging operation because of an internal error. Retry your request.
public struct WAFTagOperationInternalErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFTagOperationInternalErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFV2ClientTypes {

    public enum IPAddressVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPAddressVersion] {
            return [
                .ipv4,
                .ipv6
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource. You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console.
    public struct Tag {
        /// Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        /// This member is required.
        public var key: Swift.String?
        /// Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct CreateIPSetInput {
    /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses that you want WAF to inspect for in incoming requests. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
    ///
    /// * For requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
    ///
    /// * For requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
    ///
    /// * For requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
    ///
    /// * For requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
    ///
    ///
    /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
    ///
    /// * Empty array: "Addresses": []
    ///
    /// * Array with one address: "Addresses": ["192.0.2.44/32"]
    ///
    /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
    ///
    /// * INVALID specification: "Addresses": [""] INVALID
    /// This member is required.
    public var addresses: [Swift.String]?
    /// A description of the IP set that helps with identification.
    public var description: Swift.String?
    /// The version of the IP addresses, either IPV4 or IPV6.
    /// This member is required.
    public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init(
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.ipAddressVersion = ipAddressVersion
        self.name = name
        self.scope = scope
        self.tags = tags
    }
}

extension WAFV2ClientTypes {
    /// High-level information about an [IPSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an IPSet, and the ARN, that you provide to the [IPSetReferenceStatement] to use the address set in a [Rule].
    public struct IPSetSummary {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the IP set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

public struct CreateIPSetOutput {
    /// High-level information about an [IPSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an IPSet, and the ARN, that you provide to the [IPSetReferenceStatement] to use the address set in a [Rule].
    public var summary: WAFV2ClientTypes.IPSetSummary?

    public init(
        summary: WAFV2ClientTypes.IPSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

extension WAFV2ClientTypes {
    /// A single regular expression. This is used in a [RegexPatternSet].
    public struct Regex {
        /// The string representing the regular expression.
        public var regexString: Swift.String?

        public init(
            regexString: Swift.String? = nil
        )
        {
            self.regexString = regexString
        }
    }

}

public struct CreateRegexPatternSetInput {
    /// A description of the set that helps with identification.
    public var description: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Array of regular expression strings.
    /// This member is required.
    public var regularExpressionList: [WAFV2ClientTypes.Regex]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [WAFV2ClientTypes.Regex]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
        self.tags = tags
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a [RegexPatternSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RegexPatternSet, and the ARN, that you provide to the [RegexPatternSetReferenceStatement] to use the pattern set in a [Rule].
    public struct RegexPatternSetSummary {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

public struct CreateRegexPatternSetOutput {
    /// High-level information about a [RegexPatternSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RegexPatternSet, and the ARN, that you provide to the [RegexPatternSetReferenceStatement] to use the pattern set in a [Rule].
    public var summary: WAFV2ClientTypes.RegexPatternSetSummary?

    public init(
        summary: WAFV2ClientTypes.RegexPatternSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

extension WAFV2ClientTypes {

    public enum ResponseContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case applicationJson
        case textHtml
        case textPlain
        case sdkUnknown(Swift.String)

        public static var allCases: [ResponseContentType] {
            return [
                .applicationJson,
                .textHtml,
                .textPlain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .applicationJson: return "APPLICATION_JSON"
            case .textHtml: return "TEXT_HTML"
            case .textPlain: return "TEXT_PLAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The response body to use in a custom response to a web request. This is referenced by key from [CustomResponse]CustomResponseBodyKey.
    public struct CustomResponseBody {
        /// The payload of the custom response. You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ContentType setting. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
        /// This member is required.
        public var content: Swift.String?
        /// The type of content in the payload that you are defining in the Content string.
        /// This member is required.
        public var contentType: WAFV2ClientTypes.ResponseContentType?

        public init(
            content: Swift.String? = nil,
            contentType: WAFV2ClientTypes.ResponseContentType? = nil
        )
        {
            self.content = content
            self.contentType = contentType
        }
    }

}

extension WAFV2ClientTypes {
    /// High-level information about a [RuleGroup], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public struct RuleGroupSummary {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the rule group that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

public struct CreateRuleGroupOutput {
    /// High-level information about a [RuleGroup], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public var summary: WAFV2ClientTypes.RuleGroupSummary?

    public init(
        summary: WAFV2ClientTypes.RuleGroupSummary? = nil
    )
    {
        self.summary = summary
    }
}

/// The operation failed because you are inspecting the web request body, headers, or cookies without specifying how to handle oversize components. Rules that inspect the body must either provide an OversizeHandling configuration or they must be preceded by a SizeConstraintStatement that blocks the body content from being too large. Rules that inspect the headers or cookies must provide an OversizeHandling configuration. Provide the handling configuration and retry your operation. Alternately, you can suppress this warning by adding the following tag to the resource that you provide to this operation: Tag (key:WAF:OversizeFieldsHandlingConstraintOptOut, value:true).
public struct WAFConfigurationWarningException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFConfigurationWarningException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension WAFV2ClientTypes {
    /// In a [WebACL], this is the action that you want WAF to perform when a web request doesn't match any of the rules in the WebACL. The default action must be a terminating action.
    public struct DefaultAction {
        /// Specifies that WAF should allow requests by default.
        public var allow: WAFV2ClientTypes.AllowAction?
        /// Specifies that WAF should block requests by default.
        public var block: WAFV2ClientTypes.BlockAction?

        public init(
            allow: WAFV2ClientTypes.AllowAction? = nil,
            block: WAFV2ClientTypes.BlockAction? = nil
        )
        {
            self.allow = allow
            self.block = block
        }
    }

}

extension WAFV2ClientTypes {
    /// High-level information about a [WebACL], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a WebACL, and the ARN, that you provide to operations like [AssociateWebACL].
    public struct WebACLSummary {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the web ACL that helps with identification.
        public var description: Swift.String?
        /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

public struct CreateWebACLOutput {
    /// High-level information about a [WebACL], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a WebACL, and the ARN, that you provide to operations like [AssociateWebACL].
    public var summary: WAFV2ClientTypes.WebACLSummary?

    public init(
        summary: WAFV2ClientTypes.WebACLSummary? = nil
    )
    {
        self.summary = summary
    }
}

public struct DeleteAPIKeyInput {
    /// The encrypted API key that you want to delete.
    /// This member is required.
    public var apiKey: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        apiKey: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.apiKey = apiKey
        self.scope = scope
    }
}

public struct DeleteAPIKeyOutput {

    public init() { }
}

public struct DeleteFirewallManagerRuleGroupsInput {
    /// The Amazon Resource Name (ARN) of the web ACL.
    /// This member is required.
    public var webACLArn: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var webACLLockToken: Swift.String?

    public init(
        webACLArn: Swift.String? = nil,
        webACLLockToken: Swift.String? = nil
    )
    {
        self.webACLArn = webACLArn
        self.webACLLockToken = webACLLockToken
    }
}

public struct DeleteFirewallManagerRuleGroupsOutput {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextWebACLLockToken: Swift.String?

    public init(
        nextWebACLLockToken: Swift.String? = nil
    )
    {
        self.nextWebACLLockToken = nextWebACLLockToken
    }
}

/// WAF couldn’t perform the operation because your resource is being used by another resource or it’s associated with another resource.
public struct WAFAssociatedItemException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFAssociatedItemException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteIPSetInput {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

public struct DeleteIPSetOutput {

    public init() { }
}

extension WAFV2ClientTypes {

    public enum LogScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customer
        case securityLake
        case sdkUnknown(Swift.String)

        public static var allCases: [LogScope] {
            return [
                .customer,
                .securityLake
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customer: return "CUSTOMER"
            case .securityLake: return "SECURITY_LAKE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {

    public enum LogType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case wafLogs
        case sdkUnknown(Swift.String)

        public static var allCases: [LogType] {
            return [
                .wafLogs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .wafLogs: return "WAF_LOGS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteLoggingConfigurationInput {
    /// The owner of the logging configuration, which must be set to CUSTOMER for the configurations that you manage. The log scope SECURITY_LAKE indicates a configuration that is managed through Amazon Security Lake. You can use Security Lake to collect log and event data from various sources for normalization, analysis, and management. For information, see [Collecting data from Amazon Web Services services](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html) in the Amazon Security Lake user guide. Default: CUSTOMER
    public var logScope: WAFV2ClientTypes.LogScope?
    /// Used to distinguish between various logging options. Currently, there is one option. Default: WAF_LOGS
    public var logType: WAFV2ClientTypes.LogType?
    /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        logScope: WAFV2ClientTypes.LogScope? = nil,
        logType: WAFV2ClientTypes.LogType? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.logScope = logScope
        self.logType = logType
        self.resourceArn = resourceArn
    }
}

public struct DeleteLoggingConfigurationOutput {

    public init() { }
}

public struct DeletePermissionPolicyInput {
    /// The Amazon Resource Name (ARN) of the rule group from which you want to delete the policy. You must be the owner of the rule group to perform this operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DeletePermissionPolicyOutput {

    public init() { }
}

public struct DeleteRegexPatternSetInput {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

public struct DeleteRegexPatternSetOutput {

    public init() { }
}

public struct DeleteRuleGroupInput {
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

public struct DeleteRuleGroupOutput {

    public init() { }
}

public struct DeleteWebACLInput {
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

public struct DeleteWebACLOutput {

    public init() { }
}

public struct DescribeAllManagedProductsInput {
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// The properties of a managed product, such as an Amazon Web Services Managed Rules rule group or an Amazon Web Services Marketplace managed rule group.
    public struct ManagedProductDescriptor {
        /// Indicates whether the rule group provides an advanced set of protections, such as the the Amazon Web Services Managed Rules rule groups that are used for WAF intelligent threat mitigation.
        public var isAdvancedManagedRuleSet: Swift.Bool
        /// Indicates whether the rule group is versioned.
        public var isVersioningSupported: Swift.Bool
        /// The name of the managed rule group. For example, AWSManagedRulesAnonymousIpList or AWSManagedRulesATPRuleSet.
        public var managedRuleSetName: Swift.String?
        /// A short description of the managed rule group.
        public var productDescription: Swift.String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var productId: Swift.String?
        /// For Amazon Web Services Marketplace managed rule groups only, the link to the rule group product page.
        public var productLink: Swift.String?
        /// The display name for the managed rule group. For example, Anonymous IP list or Account takeover prevention.
        public var productTitle: Swift.String?
        /// The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to provide notification of changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the [Amazon Simple Notification Service Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
        public var snsTopicArn: Swift.String?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
        public var vendorName: Swift.String?

        public init(
            isAdvancedManagedRuleSet: Swift.Bool = false,
            isVersioningSupported: Swift.Bool = false,
            managedRuleSetName: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            productId: Swift.String? = nil,
            productLink: Swift.String? = nil,
            productTitle: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            vendorName: Swift.String? = nil
        )
        {
            self.isAdvancedManagedRuleSet = isAdvancedManagedRuleSet
            self.isVersioningSupported = isVersioningSupported
            self.managedRuleSetName = managedRuleSetName
            self.productDescription = productDescription
            self.productId = productId
            self.productLink = productLink
            self.productTitle = productTitle
            self.snsTopicArn = snsTopicArn
            self.vendorName = vendorName
        }
    }

}

public struct DescribeAllManagedProductsOutput {
    /// High-level information for the Amazon Web Services Managed Rules rule groups and Amazon Web Services Marketplace managed rule groups.
    public var managedProducts: [WAFV2ClientTypes.ManagedProductDescriptor]?

    public init(
        managedProducts: [WAFV2ClientTypes.ManagedProductDescriptor]? = nil
    )
    {
        self.managedProducts = managedProducts
    }
}

public struct DescribeManagedProductsByVendorInput {
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
    /// This member is required.
    public var vendorName: Swift.String?

    public init(
        scope: WAFV2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil
    )
    {
        self.scope = scope
        self.vendorName = vendorName
    }
}

public struct DescribeManagedProductsByVendorOutput {
    /// High-level information for the managed rule groups owned by the specified vendor.
    public var managedProducts: [WAFV2ClientTypes.ManagedProductDescriptor]?

    public init(
        managedProducts: [WAFV2ClientTypes.ManagedProductDescriptor]? = nil
    )
    {
        self.managedProducts = managedProducts
    }
}

public struct DescribeManagedRuleGroupInput {
    /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
    /// This member is required.
    public var vendorName: Swift.String?
    /// The version of the rule group. You can only use a version that is not scheduled for expiration. If you don't provide this, WAF uses the vendor's default version.
    public var versionName: Swift.String?

    public init(
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.name = name
        self.scope = scope
        self.vendorName = vendorName
        self.versionName = versionName
    }
}

extension WAFV2ClientTypes {
    /// List of labels used by one or more of the rules of a [RuleGroup]. This summary object is used for the following rule group lists:
    ///
    /// * AvailableLabels - Labels that rules add to matching requests. These labels are defined in the RuleLabels for a [Rule].
    ///
    /// * ConsumedLabels - Labels that rules match against. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
    public struct LabelSummary {
        /// An individual label specification.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    /// High-level information about a [Rule], returned by operations like [DescribeManagedRuleGroup]. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public struct RuleSummary {
        /// The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting.
        public var action: WAFV2ClientTypes.RuleAction?
        /// The name of the rule.
        public var name: Swift.String?

        public init(
            action: WAFV2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil
        )
        {
            self.action = action
            self.name = name
        }
    }

}

public struct DescribeManagedRuleGroupOutput {
    /// The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the RuleLabels for a [Rule].
    public var availableLabels: [WAFV2ClientTypes.LabelSummary]?
    /// The web ACL capacity units (WCUs) required for this rule group. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see [WAF web ACL capacity units (WCU)](https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html) in the WAF Developer Guide.
    public var capacity: Swift.Int?
    /// The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
    public var consumedLabels: [WAFV2ClientTypes.LabelSummary]?
    /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
    ///
    /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
    ///
    /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
    public var labelNamespace: Swift.String?
    ///
    public var rules: [WAFV2ClientTypes.RuleSummary]?
    /// The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to provide notification of changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the [Amazon Simple Notification Service Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
    public var snsTopicArn: Swift.String?
    /// The managed rule group's version.
    public var versionName: Swift.String?

    public init(
        availableLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
        capacity: Swift.Int? = nil,
        consumedLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
        labelNamespace: Swift.String? = nil,
        rules: [WAFV2ClientTypes.RuleSummary]? = nil,
        snsTopicArn: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.availableLabels = availableLabels
        self.capacity = capacity
        self.consumedLabels = consumedLabels
        self.labelNamespace = labelNamespace
        self.rules = rules
        self.snsTopicArn = snsTopicArn
        self.versionName = versionName
    }
}

public struct DisassociateWebACLInput {
    /// The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:partition:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:partition:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:partition:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:partition:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:partition:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    ///
    /// * For an Amazon Web Services Verified Access instance: arn:partition:ec2:region:account-id:verified-access-instance/instance-id
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DisassociateWebACLOutput {

    public init() { }
}

extension WAFV2ClientTypes {

    public enum Platform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case android
        case ios
        case sdkUnknown(Swift.String)

        public static var allCases: [Platform] {
            return [
                .android,
                .ios
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .ios: return "IOS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GenerateMobileSdkReleaseUrlInput {
    /// The device platform.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?
    /// The release version. For the latest available version, specify LATEST.
    /// This member is required.
    public var releaseVersion: Swift.String?

    public init(
        platform: WAFV2ClientTypes.Platform? = nil,
        releaseVersion: Swift.String? = nil
    )
    {
        self.platform = platform
        self.releaseVersion = releaseVersion
    }
}

public struct GenerateMobileSdkReleaseUrlOutput {
    /// The presigned download URL for the specified SDK release.
    public var url: Swift.String?

    public init(
        url: Swift.String? = nil
    )
    {
        self.url = url
    }
}

public struct GetDecryptedAPIKeyInput {
    /// The encrypted API key.
    /// This member is required.
    public var apiKey: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        apiKey: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.apiKey = apiKey
        self.scope = scope
    }
}

public struct GetDecryptedAPIKeyOutput {
    /// The date and time that the key was created.
    public var creationTimestamp: Foundation.Date?
    /// The token domains that are defined in this API key.
    public var tokenDomains: [Swift.String]?

    public init(
        creationTimestamp: Foundation.Date? = nil,
        tokenDomains: [Swift.String]? = nil
    )
    {
        self.creationTimestamp = creationTimestamp
        self.tokenDomains = tokenDomains
    }
}

public struct GetIPSetInput {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// Contains zero or more IP addresses or blocks of IP addresses specified in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. For information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). WAF assigns an ARN to each IPSet that you create. To use an IP set in a rule, you provide the ARN to the [Rule] statement [IPSetReferenceStatement].
    public struct IPSet {
        /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses that you want WAF to inspect for in incoming requests. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
        ///
        /// * For requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * For requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        /// * For requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * For requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
        ///
        /// * Empty array: "Addresses": []
        ///
        /// * Array with one address: "Addresses": ["192.0.2.44/32"]
        ///
        /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
        ///
        /// * INVALID specification: "Addresses": [""] INVALID
        /// This member is required.
        public var addresses: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the IP set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        /// This member is required.
        public var id: Swift.String?
        /// The version of the IP addresses, either IPV4 or IPV6.
        /// This member is required.
        public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init(
            addresses: [Swift.String]? = nil,
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil,
            name: Swift.String? = nil
        )
        {
            self.addresses = addresses
            self.arn = arn
            self.description = description
            self.id = id
            self.ipAddressVersion = ipAddressVersion
            self.name = name
        }
    }

}

public struct GetIPSetOutput {
    ///
    public var ipSet: WAFV2ClientTypes.IPSet?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?

    public init(
        ipSet: WAFV2ClientTypes.IPSet? = nil,
        lockToken: Swift.String? = nil
    )
    {
        self.ipSet = ipSet
        self.lockToken = lockToken
    }
}

public struct GetLoggingConfigurationInput {
    /// The owner of the logging configuration, which must be set to CUSTOMER for the configurations that you manage. The log scope SECURITY_LAKE indicates a configuration that is managed through Amazon Security Lake. You can use Security Lake to collect log and event data from various sources for normalization, analysis, and management. For information, see [Collecting data from Amazon Web Services services](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html) in the Amazon Security Lake user guide. Default: CUSTOMER
    public var logScope: WAFV2ClientTypes.LogScope?
    /// Used to distinguish between various logging options. Currently, there is one option. Default: WAF_LOGS
    public var logType: WAFV2ClientTypes.LogType?
    /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        logScope: WAFV2ClientTypes.LogScope? = nil,
        logType: WAFV2ClientTypes.LogType? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.logScope = logScope
        self.logType = logType
        self.resourceArn = resourceArn
    }
}

extension WAFV2ClientTypes {

    public enum FilterBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case drop
        case keep
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterBehavior] {
            return [
                .drop,
                .keep
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .keep: return "KEEP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A single label name condition for a [Condition] in a logging filter.
    public struct LabelNameCondition {
        /// The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.
        /// This member is required.
        public var labelName: Swift.String?

        public init(
            labelName: Swift.String? = nil
        )
        {
            self.labelName = labelName
        }
    }

}

extension WAFV2ClientTypes {
    /// A single match condition for a [Filter].
    public struct Condition {
        /// A single action condition. This is the action setting that a log record must contain in order to meet the condition.
        public var actionCondition: WAFV2ClientTypes.ActionCondition?
        /// A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.
        public var labelNameCondition: WAFV2ClientTypes.LabelNameCondition?

        public init(
            actionCondition: WAFV2ClientTypes.ActionCondition? = nil,
            labelNameCondition: WAFV2ClientTypes.LabelNameCondition? = nil
        )
        {
            self.actionCondition = actionCondition
            self.labelNameCondition = labelNameCondition
        }
    }

}

extension WAFV2ClientTypes {

    public enum FilterRequirement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case meetsAll
        case meetsAny
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRequirement] {
            return [
                .meetsAll,
                .meetsAny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .meetsAll: return "MEETS_ALL"
            case .meetsAny: return "MEETS_ANY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// A single logging filter, used in [LoggingFilter].
    public struct Filter {
        /// How to handle logs that satisfy the filter's conditions and requirement.
        /// This member is required.
        public var behavior: WAFV2ClientTypes.FilterBehavior?
        /// Match conditions for the filter.
        /// This member is required.
        public var conditions: [WAFV2ClientTypes.Condition]?
        /// Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        /// This member is required.
        public var requirement: WAFV2ClientTypes.FilterRequirement?

        public init(
            behavior: WAFV2ClientTypes.FilterBehavior? = nil,
            conditions: [WAFV2ClientTypes.Condition]? = nil,
            requirement: WAFV2ClientTypes.FilterRequirement? = nil
        )
        {
            self.behavior = behavior
            self.conditions = conditions
            self.requirement = requirement
        }
    }

}

extension WAFV2ClientTypes {
    /// Filtering that specifies which web requests are kept in the logs and which are dropped, defined for a web ACL's [LoggingConfiguration]. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
    public struct LoggingFilter {
        /// Default handling for logs that don't match any of the specified filtering conditions.
        /// This member is required.
        public var defaultBehavior: WAFV2ClientTypes.FilterBehavior?
        /// The filters that you want to apply to the logs.
        /// This member is required.
        public var filters: [WAFV2ClientTypes.Filter]?

        public init(
            defaultBehavior: WAFV2ClientTypes.FilterBehavior? = nil,
            filters: [WAFV2ClientTypes.Filter]? = nil
        )
        {
            self.defaultBehavior = defaultBehavior
            self.filters = filters
        }
    }

}

extension WAFV2ClientTypes {
    /// Defines an association between logging destinations and a web ACL resource, for logging from WAF. As part of the association, you can specify parts of the standard logging fields to keep out of the logs and you can specify filters so that you log only a subset of the logging records. You can define one logging destination per web ACL. You can access information about the traffic that WAF inspects using the following steps:
    ///
    /// * Create your logging destination. You can use an Amazon CloudWatch Logs log group, an Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose. The name that you give the destination must start with aws-waf-logs-. Depending on the type of destination, you might need to configure additional settings or permissions. For configuration requirements and pricing information for each destination type, see [Logging web ACL traffic](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
    ///
    /// * Associate your logging destination to your web ACL using a PutLoggingConfiguration request.
    ///
    ///
    /// When you successfully enable logging using a PutLoggingConfiguration request, WAF creates an additional role or policy that is required to write logs to the logging destination. For an Amazon CloudWatch Logs log group, WAF creates a resource policy on the log group. For an Amazon S3 bucket, WAF creates a bucket policy. For an Amazon Kinesis Data Firehose, WAF creates a service-linked role. For additional information about web ACL logging, see [Logging web ACL traffic information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
    public struct LoggingConfiguration {
        /// The logging destination configuration that you want to associate with the web ACL. You can associate one logging destination to a web ACL.
        /// This member is required.
        public var logDestinationConfigs: [Swift.String]?
        /// The owner of the logging configuration, which must be set to CUSTOMER for the configurations that you manage. The log scope SECURITY_LAKE indicates a configuration that is managed through Amazon Security Lake. You can use Security Lake to collect log and event data from various sources for normalization, analysis, and management. For information, see [Collecting data from Amazon Web Services services](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html) in the Amazon Security Lake user guide. Default: CUSTOMER
        public var logScope: WAFV2ClientTypes.LogScope?
        /// Used to distinguish between various logging options. Currently, there is one option. Default: WAF_LOGS
        public var logType: WAFV2ClientTypes.LogType?
        /// Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
        public var loggingFilter: WAFV2ClientTypes.LoggingFilter?
        /// Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration.
        public var managedByFirewallManager: Swift.Bool
        /// The parts of the request that you want to keep out of the logs. For example, if you redact the SingleHeader field, the HEADER field in the logs will be REDACTED for all rules that use the SingleHeaderFieldToMatch setting. Redaction applies only to the component that's specified in the rule's FieldToMatch setting, so the SingleHeader redaction doesn't apply to rules that use the HeadersFieldToMatch. You can specify only the following fields for redaction: UriPath, QueryString, SingleHeader, and Method. This setting has no impact on request sampling. With request sampling, the only way to exclude fields is by disabling sampling in the web ACL visibility configuration.
        public var redactedFields: [WAFV2ClientTypes.FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init(
            logDestinationConfigs: [Swift.String]? = nil,
            logScope: WAFV2ClientTypes.LogScope? = nil,
            logType: WAFV2ClientTypes.LogType? = nil,
            loggingFilter: WAFV2ClientTypes.LoggingFilter? = nil,
            managedByFirewallManager: Swift.Bool = false,
            redactedFields: [WAFV2ClientTypes.FieldToMatch]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
            self.logScope = logScope
            self.logType = logType
            self.loggingFilter = loggingFilter
            self.managedByFirewallManager = managedByFirewallManager
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }
    }

}

public struct GetLoggingConfigurationOutput {
    /// The [LoggingConfiguration] for the specified web ACL.
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct GetManagedRuleSetInput {
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// Information for a single version of a managed rule set. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSetVersion {
        /// The Amazon Resource Name (ARN) of the vendor rule group that's used to define the published version of your managed rule group.
        public var associatedRuleGroupArn: Swift.String?
        /// The web ACL capacity units (WCUs) required for this rule group. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see [WAF web ACL capacity units (WCU)](https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html) in the WAF Developer Guide.
        public var capacity: Swift.Int?
        /// The time that this version is set to expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var expiryTimestamp: Foundation.Date?
        /// The amount of time you expect this version of your managed rule group to last, in days.
        public var forecastedLifetime: Swift.Int?
        /// The last time that you updated this version. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var lastUpdateTimestamp: Foundation.Date?
        /// The time that you first published this version. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var publishTimestamp: Foundation.Date?

        public init(
            associatedRuleGroupArn: Swift.String? = nil,
            capacity: Swift.Int? = nil,
            expiryTimestamp: Foundation.Date? = nil,
            forecastedLifetime: Swift.Int? = nil,
            lastUpdateTimestamp: Foundation.Date? = nil,
            publishTimestamp: Foundation.Date? = nil
        )
        {
            self.associatedRuleGroupArn = associatedRuleGroupArn
            self.capacity = capacity
            self.expiryTimestamp = expiryTimestamp
            self.forecastedLifetime = forecastedLifetime
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.publishTimestamp = publishTimestamp
        }
    }

}

extension WAFV2ClientTypes {
    /// A set of rules that is managed by Amazon Web Services and Amazon Web Services Marketplace sellers to provide versioned managed rule groups for customers of WAF. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSet {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
        /// This member is required.
        public var name: Swift.String?
        /// The versions of this managed rule set that are available for use by customers.
        public var publishedVersions: [Swift.String: WAFV2ClientTypes.ManagedRuleSetVersion]?
        /// The version that you would like your customers to use.
        public var recommendedVersion: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            name: Swift.String? = nil,
            publishedVersions: [Swift.String: WAFV2ClientTypes.ManagedRuleSetVersion]? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.name = name
            self.publishedVersions = publishedVersions
            self.recommendedVersion = recommendedVersion
        }
    }

}

public struct GetManagedRuleSetOutput {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    /// The managed rule set that you requested.
    public var managedRuleSet: WAFV2ClientTypes.ManagedRuleSet?

    public init(
        lockToken: Swift.String? = nil,
        managedRuleSet: WAFV2ClientTypes.ManagedRuleSet? = nil
    )
    {
        self.lockToken = lockToken
        self.managedRuleSet = managedRuleSet
    }
}

public struct GetMobileSdkReleaseInput {
    /// The device platform.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?
    /// The release version. For the latest available version, specify LATEST.
    /// This member is required.
    public var releaseVersion: Swift.String?

    public init(
        platform: WAFV2ClientTypes.Platform? = nil,
        releaseVersion: Swift.String? = nil
    )
    {
        self.platform = platform
        self.releaseVersion = releaseVersion
    }
}

extension WAFV2ClientTypes {
    /// Information for a release of the mobile SDK, including release notes and tags. The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage WAF tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see [WAF client application integration](https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html) in the WAF Developer Guide.
    public struct MobileSdkRelease {
        /// Notes describing the release.
        public var releaseNotes: Swift.String?
        /// The release version.
        public var releaseVersion: Swift.String?
        /// Tags that are associated with the release.
        public var tags: [WAFV2ClientTypes.Tag]?
        /// The timestamp of the release.
        public var timestamp: Foundation.Date?

        public init(
            releaseNotes: Swift.String? = nil,
            releaseVersion: Swift.String? = nil,
            tags: [WAFV2ClientTypes.Tag]? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.releaseNotes = releaseNotes
            self.releaseVersion = releaseVersion
            self.tags = tags
            self.timestamp = timestamp
        }
    }

}

public struct GetMobileSdkReleaseOutput {
    /// Information for a specified SDK release, including release notes and tags.
    public var mobileSdkRelease: WAFV2ClientTypes.MobileSdkRelease?

    public init(
        mobileSdkRelease: WAFV2ClientTypes.MobileSdkRelease? = nil
    )
    {
        self.mobileSdkRelease = mobileSdkRelease
    }
}

public struct GetPermissionPolicyInput {
    /// The Amazon Resource Name (ARN) of the rule group for which you want to get the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct GetPermissionPolicyOutput {
    /// The IAM policy that is attached to the specified rule group.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

/// The rule that you've named doesn't aggregate solely on the IP address or solely on the forwarded IP address. This call is only available for rate-based rules with an AggregateKeyType setting of IP or FORWARDED_IP.
public struct WAFUnsupportedAggregateKeyTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFUnsupportedAggregateKeyTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct GetRateBasedStatementManagedKeysInput {
    /// The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group.
    public var ruleGroupRuleName: Swift.String?
    /// The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter RuleGroupRuleName.
    /// This member is required.
    public var ruleName: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var webACLId: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var webACLName: Swift.String?

    public init(
        ruleGroupRuleName: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        webACLId: Swift.String? = nil,
        webACLName: Swift.String? = nil
    )
    {
        self.ruleGroupRuleName = ruleGroupRuleName
        self.ruleName = ruleName
        self.scope = scope
        self.webACLId = webACLId
        self.webACLName = webACLName
    }
}

extension WAFV2ClientTypes {
    /// The set of IP addresses that are currently blocked for a [RateBasedStatement]. This is only available for rate-based rules that aggregate on just the IP address, with the AggregateKeyType set to IP or FORWARDED_IP. A rate-based rule applies its rule action to requests from IP addresses that are in the rule's managed keys list and that match the rule's scope-down statement. When a rule has no scope-down statement, it applies the action to all requests from the IP addresses that are in the list. The rule applies its rule action to rate limit the matching requests. The action is usually Block but it can be any valid rule action except for Allow. The maximum number of IP addresses that can be rate limited by a single rate-based rule instance is 10,000. If more than 10,000 addresses exceed the rate limit, WAF limits those with the highest rates.
    public struct RateBasedStatementManagedKeysIPSet {
        /// The IP addresses that are currently blocked.
        public var addresses: [Swift.String]?
        /// The version of the IP addresses, either IPV4 or IPV6.
        public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?

        public init(
            addresses: [Swift.String]? = nil,
            ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil
        )
        {
            self.addresses = addresses
            self.ipAddressVersion = ipAddressVersion
        }
    }

}

public struct GetRateBasedStatementManagedKeysOutput {
    /// The keys that are of Internet Protocol version 4 (IPv4).
    public var managedKeysIPV4: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?
    /// The keys that are of Internet Protocol version 6 (IPv6).
    public var managedKeysIPV6: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?

    public init(
        managedKeysIPV4: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil,
        managedKeysIPV6: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil
    )
    {
        self.managedKeysIPV4 = managedKeysIPV4
        self.managedKeysIPV6 = managedKeysIPV6
    }
}

public struct GetRegexPatternSetInput {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// Contains one or more regular expressions. WAF assigns an ARN to each RegexPatternSet that you create. To use a set in a rule, you provide the ARN to the [Rule] statement [RegexPatternSetReferenceStatement].
    public struct RegexPatternSet {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// The name of the set. You cannot change the name after you create the set.
        public var name: Swift.String?
        /// The regular expression patterns in the set.
        public var regularExpressionList: [WAFV2ClientTypes.Regex]?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            regularExpressionList: [WAFV2ClientTypes.Regex]? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
            self.regularExpressionList = regularExpressionList
        }
    }

}

public struct GetRegexPatternSetOutput {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    ///
    public var regexPatternSet: WAFV2ClientTypes.RegexPatternSet?

    public init(
        lockToken: Swift.String? = nil,
        regexPatternSet: WAFV2ClientTypes.RegexPatternSet? = nil
    )
    {
        self.lockToken = lockToken
        self.regexPatternSet = regexPatternSet
    }
}

public struct GetRuleGroupInput {
    /// The Amazon Resource Name (ARN) of the entity.
    public var arn: Swift.String?
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    public var id: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.name = name
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// In a [GetSampledRequests] request, the StartTime and EndTime objects specify the time range for which you want WAF to return a sample of web requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours. In a [GetSampledRequests] response, the StartTime and EndTime objects specify the time range for which WAF actually returned a sample of web requests. WAF gets the specified number of requests from among the first 5,000 requests that your Amazon Web Services resource receives during the specified time period. If your resource receives more than 5,000 requests during that period, WAF stops sampling after the 5,000th request. In that case, EndTime is the time that WAF received the 5,000th request.
    public struct TimeWindow {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var endTime: Foundation.Date?
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

public struct GetSampledRequestsInput {
    /// The number of requests that you want WAF to return from among the first 5,000 requests that your Amazon Web Services resource received during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests returns information about all of them.
    /// This member is required.
    public var maxItems: Swift.Int?
    /// The metric name assigned to the Rule or RuleGroup dimension for which you want a sample of requests.
    /// This member is required.
    public var ruleMetricName: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours. If you specify a start time that's earlier than three hours ago, WAF sets it to three hours ago.
    /// This member is required.
    public var timeWindow: WAFV2ClientTypes.TimeWindow?
    /// The Amazon resource name (ARN) of the WebACL for which you want a sample of requests.
    /// This member is required.
    public var webAclArn: Swift.String?

    public init(
        maxItems: Swift.Int? = nil,
        ruleMetricName: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        timeWindow: WAFV2ClientTypes.TimeWindow? = nil,
        webAclArn: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.ruleMetricName = ruleMetricName
        self.scope = scope
        self.timeWindow = timeWindow
        self.webAclArn = webAclArn
    }
}

extension WAFV2ClientTypes {

    public enum FailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tokenDomainMismatch
        case tokenExpired
        case tokenInvalid
        case tokenMissing
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureReason] {
            return [
                .tokenDomainMismatch,
                .tokenExpired,
                .tokenInvalid,
                .tokenMissing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tokenDomainMismatch: return "TOKEN_DOMAIN_MISMATCH"
            case .tokenExpired: return "TOKEN_EXPIRED"
            case .tokenInvalid: return "TOKEN_INVALID"
            case .tokenMissing: return "TOKEN_MISSING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension WAFV2ClientTypes {
    /// The result from the inspection of the web request for a valid CAPTCHA token.
    public struct CaptchaResponse {
        /// The reason for failure, populated when the evaluation of the token fails.
        public var failureReason: WAFV2ClientTypes.FailureReason?
        /// The HTTP response code indicating the status of the CAPTCHA token in the web request. If the token is missing, invalid, or expired, this code is 405 Method Not Allowed.
        public var responseCode: Swift.Int?
        /// The time that the CAPTCHA was last solved for the supplied token.
        public var solveTimestamp: Swift.Int?

        public init(
            failureReason: WAFV2ClientTypes.FailureReason? = nil,
            responseCode: Swift.Int? = nil,
            solveTimestamp: Swift.Int? = nil
        )
        {
            self.failureReason = failureReason
            self.responseCode = responseCode
            self.solveTimestamp = solveTimestamp
        }
    }

}

extension WAFV2ClientTypes {
    /// The result from the inspection of the web request for a valid challenge token.
    public struct ChallengeResponse {
        /// The reason for failure, populated when the evaluation of the token fails.
        public var failureReason: WAFV2ClientTypes.FailureReason?
        /// The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is 202 Request Accepted.
        public var responseCode: Swift.Int?
        /// The time that the challenge was last solved for the supplied token.
        public var solveTimestamp: Swift.Int?

        public init(
            failureReason: WAFV2ClientTypes.FailureReason? = nil,
            responseCode: Swift.Int? = nil,
            solveTimestamp: Swift.Int? = nil
        )
        {
            self.failureReason = failureReason
            self.responseCode = responseCode
            self.solveTimestamp = solveTimestamp
        }
    }

}

extension WAFV2ClientTypes {
    /// Part of the response from [GetSampledRequests]. This is a complex type that appears as Headers in the response syntax. HTTPHeader contains the names and values of all of the headers that appear in one of the web requests.
    public struct HTTPHeader {
        /// The name of the HTTP header.
        public var name: Swift.String?
        /// The value of the HTTP header.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFV2ClientTypes {
    /// Part of the response from [GetSampledRequests]. This is a complex type that appears as Request in the response syntax. HTTPRequest contains information about one of the web requests.
    public struct HTTPRequest {
        /// The IP address that the request originated from. If the web ACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:
        ///
        /// * c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request
        ///
        /// * x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public var clientIP: Swift.String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        public var country: Swift.String?
        /// A complex type that contains the name and value for each header in the sampled web request.
        public var headers: [WAFV2ClientTypes.HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public var httpVersion: Swift.String?
        /// The HTTP method specified in the sampled web request.
        public var method: Swift.String?
        /// The URI path of the request, which identifies the resource, for example, /images/daily-ad.jpg.
        public var uri: Swift.String?

        public init(
            clientIP: Swift.String? = nil,
            country: Swift.String? = nil,
            headers: [WAFV2ClientTypes.HTTPHeader]? = nil,
            httpVersion: Swift.String? = nil,
            method: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.httpVersion = httpVersion
            self.method = method
            self.uri = uri
        }
    }

}

extension WAFV2ClientTypes {
    /// Represents a single sampled web request. The response from [GetSampledRequests] includes a SampledHTTPRequests complex type that appears as SampledRequests in the response syntax. SampledHTTPRequests contains an array of SampledHTTPRequest objects.
    public struct SampledHTTPRequest {
        /// The action that WAF applied to the request.
        public var action: Swift.String?
        /// The CAPTCHA response for the request.
        public var captchaResponse: WAFV2ClientTypes.CaptchaResponse?
        /// The Challenge response for the request.
        public var challengeResponse: WAFV2ClientTypes.ChallengeResponse?
        /// Labels applied to the web request by matching rules. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. For example, awswaf:111122223333:myRuleGroup:testRules:testNS1:testNS2:labelNameA or awswaf:managed:aws:managed-rule-set:header:encoding:utf8.
        public var labels: [WAFV2ClientTypes.Label]?
        /// Used only for rule group rules that have a rule action override in place in the web ACL. This is the action that the rule group rule is configured for, and not the action that was applied to the request. The action that WAF applied is the Action value.
        public var overriddenAction: Swift.String?
        /// A complex type that contains detailed information about the request.
        /// This member is required.
        public var request: WAFV2ClientTypes.HTTPRequest?
        /// Custom request headers inserted by WAF into the request, according to the custom request configuration for the matching rule action.
        public var requestHeadersInserted: [WAFV2ClientTypes.HTTPHeader]?
        /// The response code that was sent for the request.
        public var responseCodeSent: Swift.Int?
        /// The name of the Rule that the request matched. For managed rule groups, the format for this name is ##. For your own rule groups, the format for this name is #. If the rule is not in a rule group, this field is absent.
        public var ruleNameWithinRuleGroup: Swift.String?
        /// The time at which WAF received the request from your Amazon Web Services resource, in Unix time format (in seconds).
        public var timestamp: Foundation.Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response. For example, a result that has a weight of 2 represents roughly twice as many web requests as a result that has a weight of 1.
        /// This member is required.
        public var weight: Swift.Int

        public init(
            action: Swift.String? = nil,
            captchaResponse: WAFV2ClientTypes.CaptchaResponse? = nil,
            challengeResponse: WAFV2ClientTypes.ChallengeResponse? = nil,
            labels: [WAFV2ClientTypes.Label]? = nil,
            overriddenAction: Swift.String? = nil,
            request: WAFV2ClientTypes.HTTPRequest? = nil,
            requestHeadersInserted: [WAFV2ClientTypes.HTTPHeader]? = nil,
            responseCodeSent: Swift.Int? = nil,
            ruleNameWithinRuleGroup: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            weight: Swift.Int = 0
        )
        {
            self.action = action
            self.captchaResponse = captchaResponse
            self.challengeResponse = challengeResponse
            self.labels = labels
            self.overriddenAction = overriddenAction
            self.request = request
            self.requestHeadersInserted = requestHeadersInserted
            self.responseCodeSent = responseCodeSent
            self.ruleNameWithinRuleGroup = ruleNameWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }
    }

}

public struct GetSampledRequestsOutput {
    /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests. If PopulationSize is less than MaxItems, the sample includes every request that your Amazon Web Services resource received during the specified time range.
    public var populationSize: Swift.Int
    /// A complex type that contains detailed information about each of the requests in the sample.
    public var sampledRequests: [WAFV2ClientTypes.SampledHTTPRequest]?
    /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However, if your Amazon Web Services resource received more than 5,000 requests during the time range that you specified in the request, GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
    public var timeWindow: WAFV2ClientTypes.TimeWindow?

    public init(
        populationSize: Swift.Int = 0,
        sampledRequests: [WAFV2ClientTypes.SampledHTTPRequest]? = nil,
        timeWindow: WAFV2ClientTypes.TimeWindow? = nil
    )
    {
        self.populationSize = populationSize
        self.sampledRequests = sampledRequests
        self.timeWindow = timeWindow
    }
}

public struct GetWebACLInput {
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

public struct GetWebACLForResourceInput {
    /// The Amazon Resource Name (ARN) of the resource whose web ACL you want to retrieve. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:partition:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:partition:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:partition:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:partition:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:partition:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    ///
    /// * For an Amazon Web Services Verified Access instance: arn:partition:ec2:region:account-id:verified-access-instance/instance-id
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListAPIKeysInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListAPIKeysOutput {
    /// The array of key summaries. If you specified a Limit in your request, this might not be the full list.
    public var apiKeySummaries: [WAFV2ClientTypes.APIKeySummary]?
    /// The CAPTCHA application integration URL, for use in your JavaScript implementation.
    public var applicationIntegrationURL: Swift.String?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init(
        apiKeySummaries: [WAFV2ClientTypes.APIKeySummary]? = nil,
        applicationIntegrationURL: Swift.String? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.apiKeySummaries = apiKeySummaries
        self.applicationIntegrationURL = applicationIntegrationURL
        self.nextMarker = nextMarker
    }
}

public struct ListAvailableManagedRuleGroupsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a managed rule group, returned by [ListAvailableManagedRuleGroups]. This provides information like the name and vendor name, that you provide when you add a [ManagedRuleGroupStatement] to a web ACL. Managed rule groups include Amazon Web Services Managed Rules rule groups and Amazon Web Services Marketplace managed rule groups. To use any Amazon Web Services Marketplace managed rule group, first subscribe to the rule group through Amazon Web Services Marketplace.
    public struct ManagedRuleGroupSummary {
        /// The description of the managed rule group, provided by Amazon Web Services Managed Rules or the Amazon Web Services Marketplace seller who manages it.
        public var description: Swift.String?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        public var name: Swift.String?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
        public var vendorName: Swift.String?
        /// Indicates whether the managed rule group is versioned. If it is, you can retrieve the versions list by calling [ListAvailableManagedRuleGroupVersions].
        public var versioningSupported: Swift.Bool

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            vendorName: Swift.String? = nil,
            versioningSupported: Swift.Bool = false
        )
        {
            self.description = description
            self.name = name
            self.vendorName = vendorName
            self.versioningSupported = versioningSupported
        }
    }

}

public struct ListAvailableManagedRuleGroupsOutput {
    /// Array of managed rule groups that you can use. If you specified a Limit in your request, this might not be the full list.
    public var managedRuleGroups: [WAFV2ClientTypes.ManagedRuleGroupSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init(
        managedRuleGroups: [WAFV2ClientTypes.ManagedRuleGroupSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedRuleGroups = managedRuleGroups
        self.nextMarker = nextMarker
    }
}

public struct ListAvailableManagedRuleGroupVersionsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
    /// This member is required.
    public var name: Swift.String?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
    /// This member is required.
    public var vendorName: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextMarker = nextMarker
        self.scope = scope
        self.vendorName = vendorName
    }
}

extension WAFV2ClientTypes {
    /// Describes a single version of a managed rule group.
    public struct ManagedRuleGroupVersion {
        /// The date and time that the managed rule group owner updated the rule group version information.
        public var lastUpdateTimestamp: Foundation.Date?
        /// The version name.
        public var name: Swift.String?

        public init(
            lastUpdateTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.name = name
        }
    }

}

public struct ListAvailableManagedRuleGroupVersionsOutput {
    /// The name of the version that's currently set as the default.
    public var currentDefaultVersion: Swift.String?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The versions that are currently available for the specified managed rule group. If you specified a Limit in your request, this might not be the full list.
    public var versions: [WAFV2ClientTypes.ManagedRuleGroupVersion]?

    public init(
        currentDefaultVersion: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        versions: [WAFV2ClientTypes.ManagedRuleGroupVersion]? = nil
    )
    {
        self.currentDefaultVersion = currentDefaultVersion
        self.nextMarker = nextMarker
        self.versions = versions
    }
}

public struct ListIPSetsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListIPSetsOutput {
    /// Array of IPSets. If you specified a Limit in your request, this might not be the full list.
    public var ipSets: [WAFV2ClientTypes.IPSetSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init(
        ipSets: [WAFV2ClientTypes.IPSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.ipSets = ipSets
        self.nextMarker = nextMarker
    }
}

public struct ListLoggingConfigurationsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// The owner of the logging configuration, which must be set to CUSTOMER for the configurations that you manage. The log scope SECURITY_LAKE indicates a configuration that is managed through Amazon Security Lake. You can use Security Lake to collect log and event data from various sources for normalization, analysis, and management. For information, see [Collecting data from Amazon Web Services services](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html) in the Amazon Security Lake user guide. Default: CUSTOMER
    public var logScope: WAFV2ClientTypes.LogScope?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        logScope: WAFV2ClientTypes.LogScope? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.logScope = logScope
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListLoggingConfigurationsOutput {
    /// Array of logging configurations. If you specified a Limit in your request, this might not be the full list.
    public var loggingConfigurations: [WAFV2ClientTypes.LoggingConfiguration]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init(
        loggingConfigurations: [WAFV2ClientTypes.LoggingConfiguration]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loggingConfigurations = loggingConfigurations
        self.nextMarker = nextMarker
    }
}

public struct ListManagedRuleSetsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

extension WAFV2ClientTypes {
    /// High-level information for a managed rule set. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSetSummary {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
        public var id: Swift.String?
        /// The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.lockToken = lockToken
            self.name = name
        }
    }

}

public struct ListManagedRuleSetsOutput {
    /// Your managed rule sets. If you specified a Limit in your request, this might not be the full list.
    public var managedRuleSets: [WAFV2ClientTypes.ManagedRuleSetSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init(
        managedRuleSets: [WAFV2ClientTypes.ManagedRuleSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedRuleSets = managedRuleSets
        self.nextMarker = nextMarker
    }
}

public struct ListMobileSdkReleasesInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The device platform to retrieve the list for.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        platform: WAFV2ClientTypes.Platform? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.platform = platform
    }
}

extension WAFV2ClientTypes {
    /// High level information for an SDK release.
    public struct ReleaseSummary {
        /// The release version.
        public var releaseVersion: Swift.String?
        /// The timestamp of the release.
        public var timestamp: Foundation.Date?

        public init(
            releaseVersion: Swift.String? = nil,
            timestamp: Foundation.Date? = nil
        )
        {
            self.releaseVersion = releaseVersion
            self.timestamp = timestamp
        }
    }

}

public struct ListMobileSdkReleasesOutput {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The high level information for the available SDK releases. If you specified a Limit in your request, this might not be the full list.
    public var releaseSummaries: [WAFV2ClientTypes.ReleaseSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        releaseSummaries: [WAFV2ClientTypes.ReleaseSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.releaseSummaries = releaseSummaries
    }
}

public struct ListRegexPatternSetsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListRegexPatternSetsOutput {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Array of regex pattern sets. If you specified a Limit in your request, this might not be the full list.
    public var regexPatternSets: [WAFV2ClientTypes.RegexPatternSetSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        regexPatternSets: [WAFV2ClientTypes.RegexPatternSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexPatternSets = regexPatternSets
    }
}

extension WAFV2ClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apiGateway
        case applicationLoadBalancer
        case appsync
        case appRunnerService
        case cognitioUserPool
        case verifiedAccessInstance
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .apiGateway,
                .applicationLoadBalancer,
                .appsync,
                .appRunnerService,
                .cognitioUserPool,
                .verifiedAccessInstance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .applicationLoadBalancer: return "APPLICATION_LOAD_BALANCER"
            case .appsync: return "APPSYNC"
            case .appRunnerService: return "APP_RUNNER_SERVICE"
            case .cognitioUserPool: return "COGNITO_USER_POOL"
            case .verifiedAccessInstance: return "VERIFIED_ACCESS_INSTANCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListResourcesForWebACLInput {
    /// Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. If you don't provide a resource type, the call uses the resource type APPLICATION_LOAD_BALANCER. Default: APPLICATION_LOAD_BALANCER
    public var resourceType: WAFV2ClientTypes.ResourceType?
    /// The Amazon Resource Name (ARN) of the web ACL.
    /// This member is required.
    public var webACLArn: Swift.String?

    public init(
        resourceType: WAFV2ClientTypes.ResourceType? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceType = resourceType
        self.webACLArn = webACLArn
    }
}

public struct ListResourcesForWebACLOutput {
    /// The array of Amazon Resource Names (ARNs) of the associated resources.
    public var resourceArns: [Swift.String]?

    public init(
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

public struct ListRuleGroupsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListRuleGroupsOutput {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Array of rule groups. If you specified a Limit in your request, this might not be the full list.
    public var ruleGroups: [WAFV2ClientTypes.RuleGroupSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFV2ClientTypes.RuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

public struct ListTagsForResourceInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.resourceARN = resourceARN
    }
}

extension WAFV2ClientTypes {
    /// The collection of tagging definitions for an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource. You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console.
    public struct TagInfoForResource {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceARN: Swift.String?
        /// The array of [Tag] objects defined for the resource.
        public var tagList: [WAFV2ClientTypes.Tag]?

        public init(
            resourceARN: Swift.String? = nil,
            tagList: [WAFV2ClientTypes.Tag]? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }
    }

}

public struct ListTagsForResourceOutput {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The collection of tagging definitions for the resource. If you specified a Limit in your request, this might not be the full list.
    public var tagInfoForResource: WAFV2ClientTypes.TagInfoForResource?

    public init(
        nextMarker: Swift.String? = nil,
        tagInfoForResource: WAFV2ClientTypes.TagInfoForResource? = nil
    )
    {
        self.nextMarker = nextMarker
        self.tagInfoForResource = tagInfoForResource
    }
}

public struct ListWebACLsInput {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

public struct ListWebACLsOutput {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Array of web ACLs. If you specified a Limit in your request, this might not be the full list.
    public var webACLs: [WAFV2ClientTypes.WebACLSummary]?

    public init(
        nextMarker: Swift.String? = nil,
        webACLs: [WAFV2ClientTypes.WebACLSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.webACLs = webACLs
    }
}

/// The operation failed because you don't have the permissions that your logging configuration requires. For information, see [Logging web ACL traffic information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
public struct WAFLogDestinationPermissionIssueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFLogDestinationPermissionIssueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// WAF is not able to access the service linked role. This can be caused by a previous PutLoggingConfiguration request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous DeleteServiceLinkedRole request, which can lock the role for 15 minutes or more. If you recently made a call to DeleteServiceLinkedRole, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.
public struct WAFServiceLinkedRoleErrorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFServiceLinkedRoleErrorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutLoggingConfigurationInput {
    ///
    /// This member is required.
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

public struct PutLoggingConfigurationOutput {
    ///
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init(
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

extension WAFV2ClientTypes {
    /// A version of the named managed rule group, that the rule group's vendor publishes for use by customers. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct VersionToPublish {
        /// The Amazon Resource Name (ARN) of the vendor's rule group that's used in the published managed rule group version.
        public var associatedRuleGroupArn: Swift.String?
        /// The amount of time the vendor expects this version of the managed rule group to last, in days.
        public var forecastedLifetime: Swift.Int?

        public init(
            associatedRuleGroupArn: Swift.String? = nil,
            forecastedLifetime: Swift.Int? = nil
        )
        {
            self.associatedRuleGroupArn = associatedRuleGroupArn
            self.forecastedLifetime = forecastedLifetime
        }
    }

}

public struct PutManagedRuleSetVersionsInput {
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the named managed rule group that you'd like your customers to choose, from among your version offerings.
    public var recommendedVersion: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The versions of the named managed rule group that you want to offer to your customers.
    public var versionsToPublish: [Swift.String: WAFV2ClientTypes.VersionToPublish]?

    public init(
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        recommendedVersion: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        versionsToPublish: [Swift.String: WAFV2ClientTypes.VersionToPublish]? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.recommendedVersion = recommendedVersion
        self.scope = scope
        self.versionsToPublish = versionsToPublish
    }
}

public struct PutManagedRuleSetVersionsOutput {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextLockToken: Swift.String?

    public init(
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

/// The operation failed because the specified policy isn't in the proper format. The policy specifications must conform to the following:
///
/// * The policy must be composed using IAM Policy version 2012-10-17.
///
/// * The policy must include specifications for Effect, Action, and Principal.
///
/// * Effect must specify Allow.
///
/// * Action must specify wafv2:CreateWebACL, wafv2:UpdateWebACL, and wafv2:PutFirewallManagerRuleGroups and may optionally specify wafv2:GetRuleGroup. WAF rejects any extra actions or wildcard actions in the policy.
///
/// * The policy must not include a Resource parameter.
///
///
/// For more information, see [IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html).
public struct WAFInvalidPermissionPolicyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "WAFInvalidPermissionPolicyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutPermissionPolicyInput {
    /// The policy to attach to the specified rule group. The policy specifications must conform to the following:
    ///
    /// * The policy must be composed using IAM Policy version 2012-10-17.
    ///
    /// * The policy must include specifications for Effect, Action, and Principal.
    ///
    /// * Effect must specify Allow.
    ///
    /// * Action must specify wafv2:CreateWebACL, wafv2:UpdateWebACL, and wafv2:PutFirewallManagerRuleGroups and may optionally specify wafv2:GetRuleGroup. WAF rejects any extra actions or wildcard actions in the policy.
    ///
    /// * The policy must not include a Resource parameter.
    ///
    ///
    /// For more information, see [IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the [RuleGroup] to which you want to attach the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

public struct PutPermissionPolicyOutput {

    public init() { }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// An array of key:value pairs to associate with the resource.
    /// This member is required.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// An array of keys identifying the tags to disassociate from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateIPSetInput {
    /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses that you want WAF to inspect for in incoming requests. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
    ///
    /// * For requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
    ///
    /// * For requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
    ///
    /// * For requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
    ///
    /// * For requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
    ///
    ///
    /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
    ///
    /// * Empty array: "Addresses": []
    ///
    /// * Array with one address: "Addresses": ["192.0.2.44/32"]
    ///
    /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
    ///
    /// * INVALID specification: "Addresses": [""] INVALID
    /// This member is required.
    public var addresses: [Swift.String]?
    /// A description of the IP set that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

public struct UpdateIPSetOutput {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init(
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

public struct UpdateManagedRuleSetVersionExpiryDateInput {
    /// The time that you want the version to expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
    /// This member is required.
    public var expiryTimestamp: Foundation.Date?
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The version that you want to remove from your list of offerings for the named managed rule group.
    /// This member is required.
    public var versionToExpire: Swift.String?

    public init(
        expiryTimestamp: Foundation.Date? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        versionToExpire: Swift.String? = nil
    )
    {
        self.expiryTimestamp = expiryTimestamp
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
        self.versionToExpire = versionToExpire
    }
}

public struct UpdateManagedRuleSetVersionExpiryDateOutput {
    /// The version that is set to expire.
    public var expiringVersion: Swift.String?
    /// The time that the version will expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
    public var expiryTimestamp: Foundation.Date?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextLockToken: Swift.String?

    public init(
        expiringVersion: Swift.String? = nil,
        expiryTimestamp: Foundation.Date? = nil,
        nextLockToken: Swift.String? = nil
    )
    {
        self.expiringVersion = expiringVersion
        self.expiryTimestamp = expiryTimestamp
        self.nextLockToken = nextLockToken
    }
}

public struct UpdateRegexPatternSetInput {
    /// A description of the set that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    ///
    /// This member is required.
    public var regularExpressionList: [WAFV2ClientTypes.Regex]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [WAFV2ClientTypes.Regex]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
    }
}

public struct UpdateRegexPatternSetOutput {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init(
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

public struct UpdateRuleGroupOutput {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init(
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

public struct UpdateWebACLOutput {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init(
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

extension WAFV2ClientTypes {
    /// The processing guidance for a [Rule], used by WAF to determine whether a web request matches the rule. For example specifications, see the examples section of [CreateWebACL].
    public struct Statement {
        /// A logical rule statement used to combine other rule statements with AND logic. You provide more than one [Statement] within the AndStatement.
        public var andStatement: WAFV2ClientTypes.AndStatement?
        /// A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.
        public var byteMatchStatement: WAFV2ClientTypes.ByteMatchStatement?
        /// A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
        ///
        /// * To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the CountryCodes array.
        ///
        /// * Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
        ///
        ///
        /// WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ForwardedIPConfig. If you use the web request origin, the label formats are awswaf:clientip:geo:region:- and awswaf:clientip:geo:country:. If you use a forwarded IP address, the label formats are awswaf:forwardedip:geo:region:- and awswaf:forwardedip:geo:country:. For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var geoMatchStatement: WAFV2ClientTypes.GeoMatchStatement?
        /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an [IPSet] that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see [CreateIPSet]. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
        public var ipSetReferenceStatement: WAFV2ClientTypes.IPSetReferenceStatement?
        /// A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement.
        public var labelMatchStatement: WAFV2ClientTypes.LabelMatchStatement?
        /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. You cannot use a managed rule group inside another rule group. You can only reference a managed rule group as a top-level statement within a rule that you define in a web ACL. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet, the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet, or the WAF Fraud Control account creation fraud prevention (ACFP) managed rule group AWSManagedRulesACFPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
        public var managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement?
        /// A logical rule statement used to negate the results of another rule statement. You provide one [Statement] within the NotStatement.
        public var notStatement: WAFV2ClientTypes.NotStatement?
        /// A logical rule statement used to combine other rule statements with OR logic. You provide more than one [Statement] within the OrStatement.
        public var orStatement: WAFV2ClientTypes.OrStatement?
        /// A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance. If you change any of these settings in a rule that's currently in use, the change resets the rule's rate limiting counts. This can pause the rule's rate limiting activities for up to a minute. You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie. Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition. For example, assume the rule evaluates web requests with the following IP address and HTTP method values:
        ///
        /// * IP address 10.1.1.1, HTTP method POST
        ///
        /// * IP address 10.1.1.1, HTTP method GET
        ///
        /// * IP address 127.0.0.0, HTTP method POST
        ///
        /// * IP address 10.1.1.1, HTTP method GET
        ///
        ///
        /// The rule would create different aggregation instances according to your aggregation criteria, for example:
        ///
        /// * If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following:
        ///
        /// * IP address 10.1.1.1: count 3
        ///
        /// * IP address 127.0.0.0: count 1
        ///
        ///
        ///
        ///
        /// * If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following:
        ///
        /// * HTTP method POST: count 2
        ///
        /// * HTTP method GET: count 2
        ///
        ///
        ///
        ///
        /// * If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following:
        ///
        /// * IP address 10.1.1.1, HTTP method POST: count 1
        ///
        /// * IP address 10.1.1.1, HTTP method GET: count 2
        ///
        /// * IP address 127.0.0.0, HTTP method POST: count 1
        ///
        ///
        ///
        ///
        ///
        /// For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which WAF counts and rate-limits individually. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule. You cannot nest a RateBasedStatement inside another statement, for example inside a NotStatement or OrStatement. You can define a RateBasedStatement inside a web ACL and inside a rule group. For additional information about the options, see [Rate limiting web requests using rate-based rules](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html) in the WAF Developer Guide. If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that WAF is currently rate limiting for a rule through the API call GetRateBasedStatementManagedKeys. This option is not available for other aggregation configurations. WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF.
        public var rateBasedStatement: WAFV2ClientTypes.RateBasedStatement?
        /// A rule statement used to search web request components for a match against a single regular expression.
        public var regexMatchStatement: WAFV2ClientTypes.RegexMatchStatement?
        /// A rule statement used to search web request components for matches with regular expressions. To use this, create a [RegexPatternSet] that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see [CreateRegexPatternSet]. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
        public var regexPatternSetReferenceStatement: WAFV2ClientTypes.RegexPatternSetReferenceStatement?
        /// A rule statement used to run the rules that are defined in a [RuleGroup]. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. You cannot use a rule group reference statement inside another rule group. You can only reference a rule group as a top-level statement within a rule that you define in a web ACL.
        public var ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement?
        /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure WAF to inspect the request body, WAF inspects only the number of bytes in the body up to the limit for the web ACL and protected resource type. If you know that the request body for your web requests should never exceed the inspection limit, you can use a size constraint statement to block requests that have a larger request body size. For more information about the inspection limits, see Body and JsonBody settings for the FieldToMatch data type. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
        public var sizeConstraintStatement: WAFV2ClientTypes.SizeConstraintStatement?
        /// A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
        public var sqliMatchStatement: WAFV2ClientTypes.SqliMatchStatement?
        /// A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
        public var xssMatchStatement: WAFV2ClientTypes.XssMatchStatement?

        public init(
            andStatement: WAFV2ClientTypes.AndStatement? = nil,
            byteMatchStatement: WAFV2ClientTypes.ByteMatchStatement? = nil,
            geoMatchStatement: WAFV2ClientTypes.GeoMatchStatement? = nil,
            ipSetReferenceStatement: WAFV2ClientTypes.IPSetReferenceStatement? = nil,
            labelMatchStatement: WAFV2ClientTypes.LabelMatchStatement? = nil,
            managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement? = nil,
            notStatement: WAFV2ClientTypes.NotStatement? = nil,
            orStatement: WAFV2ClientTypes.OrStatement? = nil,
            rateBasedStatement: WAFV2ClientTypes.RateBasedStatement? = nil,
            regexMatchStatement: WAFV2ClientTypes.RegexMatchStatement? = nil,
            regexPatternSetReferenceStatement: WAFV2ClientTypes.RegexPatternSetReferenceStatement? = nil,
            ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement? = nil,
            sizeConstraintStatement: WAFV2ClientTypes.SizeConstraintStatement? = nil,
            sqliMatchStatement: WAFV2ClientTypes.SqliMatchStatement? = nil,
            xssMatchStatement: WAFV2ClientTypes.XssMatchStatement? = nil
        )
        {
            self.andStatement = andStatement
            self.byteMatchStatement = byteMatchStatement
            self.geoMatchStatement = geoMatchStatement
            self.ipSetReferenceStatement = ipSetReferenceStatement
            self.labelMatchStatement = labelMatchStatement
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.notStatement = notStatement
            self.orStatement = orStatement
            self.rateBasedStatement = rateBasedStatement
            self.regexMatchStatement = regexMatchStatement
            self.regexPatternSetReferenceStatement = regexPatternSetReferenceStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
            self.sizeConstraintStatement = sizeConstraintStatement
            self.sqliMatchStatement = sqliMatchStatement
            self.xssMatchStatement = xssMatchStatement
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. You cannot use a managed rule group inside another rule group. You can only reference a managed rule group as a top-level statement within a rule that you define in a web ACL. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet, the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet, or the WAF Fraud Control account creation fraud prevention (ACFP) managed rule group AWSManagedRulesACFPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
    public struct ManagedRuleGroupStatement {
        /// Rules in the referenced rule group whose actions are set to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
        public var excludedRules: [WAFV2ClientTypes.ExcludedRule]?
        /// Additional information that's used by a managed rule group. Many managed rule groups don't require this. The rule groups used for intelligent threat mitigation require additional configuration:
        ///
        /// * Use the AWSManagedRulesACFPRuleSet configuration object to configure the account creation fraud prevention managed rule group. The configuration includes the registration and sign-up pages of your application and the locations in the account creation request payload of data, such as the user email and phone number fields.
        ///
        /// * Use the AWSManagedRulesATPRuleSet configuration object to configure the account takeover prevention managed rule group. The configuration includes the sign-in page of your application and the locations in the login request payload of data such as the username and password.
        ///
        /// * Use the AWSManagedRulesBotControlRuleSet configuration object to configure the protection level that you want the Bot Control rule group to use.
        public var managedRuleGroupConfigs: [WAFV2ClientTypes.ManagedRuleGroupConfig]?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        /// This member is required.
        public var name: Swift.String?
        /// Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
        public var ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]?
        /// An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable [Statement] in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
        @Indirect public var scopeDownStatement: WAFV2ClientTypes.Statement?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
        /// This member is required.
        public var vendorName: Swift.String?
        /// The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don't specify this, WAF uses the vendor's default version, and then keeps the version at the vendor's default when the vendor updates the managed rule group settings.
        public var version: Swift.String?

        public init(
            excludedRules: [WAFV2ClientTypes.ExcludedRule]? = nil,
            managedRuleGroupConfigs: [WAFV2ClientTypes.ManagedRuleGroupConfig]? = nil,
            name: Swift.String? = nil,
            ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]? = nil,
            scopeDownStatement: WAFV2ClientTypes.Statement? = nil,
            vendorName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.excludedRules = excludedRules
            self.managedRuleGroupConfigs = managedRuleGroupConfigs
            self.name = name
            self.ruleActionOverrides = ruleActionOverrides
            self.scopeDownStatement = scopeDownStatement
            self.vendorName = vendorName
            self.version = version
        }
    }

}

extension WAFV2ClientTypes {
    /// A logical rule statement used to negate the results of another rule statement. You provide one [Statement] within the NotStatement.
    public struct NotStatement {
        /// The statement to negate. You can use any statement that can be nested.
        /// This member is required.
        @Indirect public var statement: WAFV2ClientTypes.Statement?

        public init(
            statement: WAFV2ClientTypes.Statement? = nil
        )
        {
            self.statement = statement
        }
    }

}

extension WAFV2ClientTypes {
    /// A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance. If you change any of these settings in a rule that's currently in use, the change resets the rule's rate limiting counts. This can pause the rule's rate limiting activities for up to a minute. You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie. Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition. For example, assume the rule evaluates web requests with the following IP address and HTTP method values:
    ///
    /// * IP address 10.1.1.1, HTTP method POST
    ///
    /// * IP address 10.1.1.1, HTTP method GET
    ///
    /// * IP address 127.0.0.0, HTTP method POST
    ///
    /// * IP address 10.1.1.1, HTTP method GET
    ///
    ///
    /// The rule would create different aggregation instances according to your aggregation criteria, for example:
    ///
    /// * If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following:
    ///
    /// * IP address 10.1.1.1: count 3
    ///
    /// * IP address 127.0.0.0: count 1
    ///
    ///
    ///
    ///
    /// * If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following:
    ///
    /// * HTTP method POST: count 2
    ///
    /// * HTTP method GET: count 2
    ///
    ///
    ///
    ///
    /// * If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following:
    ///
    /// * IP address 10.1.1.1, HTTP method POST: count 1
    ///
    /// * IP address 10.1.1.1, HTTP method GET: count 2
    ///
    /// * IP address 127.0.0.0, HTTP method POST: count 1
    ///
    ///
    ///
    ///
    ///
    /// For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which WAF counts and rate-limits individually. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule. You cannot nest a RateBasedStatement inside another statement, for example inside a NotStatement or OrStatement. You can define a RateBasedStatement inside a web ACL and inside a rule group. For additional information about the options, see [Rate limiting web requests using rate-based rules](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html) in the WAF Developer Guide. If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that WAF is currently rate limiting for a rule through the API call GetRateBasedStatementManagedKeys. This option is not available for other aggregation configurations. WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF.
    public struct RateBasedStatement {
        /// Setting that indicates how to aggregate the request counts. Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling.
        ///
        /// * CONSTANT - Count and limit the requests that match the rate-based rule's scope-down statement. With this option, the counted requests aren't further aggregated. The scope-down statement is the only specification used. When the count of all requests that satisfy the scope-down statement goes over the limit, WAF applies the rule action to all requests that satisfy the scope-down statement. With this option, you must configure the ScopeDownStatement property.
        ///
        /// * CUSTOM_KEYS - Aggregate the request counts using one or more web request components as the aggregate keys. With this option, you must specify the aggregate keys in the CustomKeys property. To aggregate on only the IP address or only the forwarded IP address, don't use custom keys. Instead, set the aggregate key type to IP or FORWARDED_IP.
        ///
        /// * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. With this option, you must specify the header to use in the ForwardedIPConfig property. To aggregate on a combination of the forwarded IP address with other aggregate keys, use CUSTOM_KEYS.
        ///
        /// * IP - Aggregate the request counts on the IP address from the web request origin. To aggregate on a combination of the IP address with other aggregate keys, use CUSTOM_KEYS.
        /// This member is required.
        public var aggregateKeyType: WAFV2ClientTypes.RateBasedStatementAggregateKeyType?
        /// Specifies the aggregate keys to use in a rate-base rule.
        public var customKeys: [WAFV2ClientTypes.RateBasedStatementCustomKey]?
        /// The amount of time, in seconds, that WAF should include in its request counts, looking back from the current time. For example, for a setting of 120, when WAF checks the rate, it counts the requests for the 2 minutes immediately preceding the current time. Valid settings are 60, 120, 300, and 600. This setting doesn't determine how often WAF checks the rate, but how far back it looks each time it checks. WAF checks the rate about every 10 seconds. Default: 300 (5 minutes)
        public var evaluationWindowSec: Swift.Int
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This is required if you specify a forwarded IP in the rule's aggregate key settings.
        public var forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig?
        /// The limit on requests per 5-minute period for a single aggregation instance for the rate-based rule. If the rate-based statement includes a ScopeDownStatement, this limit is applied only to the requests that match the statement. Examples:
        ///
        /// * If you aggregate on just the IP address, this is the limit on requests from any single IP address.
        ///
        /// * If you aggregate on the HTTP method and the query argument name "city", then this is the limit on requests for any single method, city pair.
        /// This member is required.
        public var limit: Swift.Int?
        /// An optional nested statement that narrows the scope of the web requests that are evaluated and managed by the rate-based statement. When you use a scope-down statement, the rate-based rule only tracks and rate limits requests that match the scope-down statement. You can use any nestable [Statement] in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
        @Indirect public var scopeDownStatement: WAFV2ClientTypes.Statement?

        public init(
            aggregateKeyType: WAFV2ClientTypes.RateBasedStatementAggregateKeyType? = nil,
            customKeys: [WAFV2ClientTypes.RateBasedStatementCustomKey]? = nil,
            evaluationWindowSec: Swift.Int = 0,
            forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig? = nil,
            limit: Swift.Int? = nil,
            scopeDownStatement: WAFV2ClientTypes.Statement? = nil
        )
        {
            self.aggregateKeyType = aggregateKeyType
            self.customKeys = customKeys
            self.evaluationWindowSec = evaluationWindowSec
            self.forwardedIPConfig = forwardedIPConfig
            self.limit = limit
            self.scopeDownStatement = scopeDownStatement
        }
    }

}

extension WAFV2ClientTypes {
    /// A single rule, which you can use in a [WebACL] or [RuleGroup] to identify web requests that you want to manage in some way. Each rule includes one top-level [Statement] that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public struct Rule {
        /// The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include RuleGroupReferenceStatement and ManagedRuleGroupStatement. You must specify either this Action setting or the rule OverrideAction setting, but not both:
        ///
        /// * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.
        ///
        /// * If the rule statement references a rule group, use the override action setting and not this action setting.
        public var action: WAFV2ClientTypes.RuleAction?
        /// Specifies how WAF should handle CAPTCHA evaluations. If you don't specify this, WAF uses the CAPTCHA configuration that's defined for the web ACL.
        public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
        /// Specifies how WAF should handle Challenge evaluations. If you don't specify this, WAF uses the challenge configuration that's defined for the web ACL.
        public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
        /// The name of the rule. If you change the name of a Rule after you create it and you want the rule's metric name to reflect the change, update the metric name in the rule's VisibilityConfig settings. WAF doesn't automatically update the metric name when you update the rule name.
        /// This member is required.
        public var name: Swift.String?
        /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        public var overrideAction: WAFV2ClientTypes.OverrideAction?
        /// If you define more than one Rule in a WebACL, WAF evaluates each request against the Rules in order based on the value of Priority. WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. Rules that run after this rule in the web ACL can match against these labels using a LabelMatchStatement. For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:
        ///
        /// * Separate each component of the label with a colon.
        ///
        /// * Each namespace or name can have up to 128 characters.
        ///
        /// * You can specify up to 5 namespaces in a label.
        ///
        /// * Don't use the following reserved words in your label specification: aws, waf, managed, rulegroup, webacl, regexpatternset, or ipset.
        ///
        ///
        /// For example, myLabelName or nameSpace1:nameSpace2:myLabelName.
        public var ruleLabels: [WAFV2ClientTypes.Label]?
        /// The WAF processing statement for the rule, for example [ByteMatchStatement] or [SizeConstraintStatement].
        /// This member is required.
        public var statement: WAFV2ClientTypes.Statement?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection. If you change the name of a Rule after you create it and you want the rule's metric name to reflect the change, update the metric name as well. WAF doesn't automatically update the metric name.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init(
            action: WAFV2ClientTypes.RuleAction? = nil,
            captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
            challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
            name: Swift.String? = nil,
            overrideAction: WAFV2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            ruleLabels: [WAFV2ClientTypes.Label]? = nil,
            statement: WAFV2ClientTypes.Statement? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.action = action
            self.captchaConfig = captchaConfig
            self.challengeConfig = challengeConfig
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleLabels = ruleLabels
            self.statement = statement
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes {
    /// A logical rule statement used to combine other rule statements with AND logic. You provide more than one [Statement] within the AndStatement.
    public struct AndStatement {
        /// The statements to combine with AND logic. You can use any statements that can be nested.
        /// This member is required.
        public var statements: [WAFV2ClientTypes.Statement]?

        public init(
            statements: [WAFV2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

extension WAFV2ClientTypes {
    /// A logical rule statement used to combine other rule statements with OR logic. You provide more than one [Statement] within the OrStatement.
    public struct OrStatement {
        /// The statements to combine with OR logic. You can use any statements that can be nested.
        /// This member is required.
        public var statements: [WAFV2ClientTypes.Statement]?

        public init(
            statements: [WAFV2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

extension WAFV2ClientTypes {
    /// The processing guidance for an Firewall Manager rule. This is like a regular rule [Statement], but it can only contain a single rule group reference.
    public struct FirewallManagerStatement {
        /// A statement used by Firewall Manager to run the rules that are defined in a managed rule group. This is managed by Firewall Manager for an Firewall Manager WAF policy.
        public var managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement?
        /// A statement used by Firewall Manager to run the rules that are defined in a rule group. This is managed by Firewall Manager for an Firewall Manager WAF policy.
        public var ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement?

        public init(
            managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement? = nil,
            ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement? = nil
        )
        {
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule group that's defined for an Firewall Manager WAF policy.
    public struct FirewallManagerRuleGroup {
        /// The processing guidance for an Firewall Manager rule. This is like a regular rule [Statement], but it can only contain a rule group reference.
        /// This member is required.
        public var firewallManagerStatement: WAFV2ClientTypes.FirewallManagerStatement?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        /// This member is required.
        public var overrideAction: WAFV2ClientTypes.OverrideAction?
        /// If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init(
            firewallManagerStatement: WAFV2ClientTypes.FirewallManagerStatement? = nil,
            name: Swift.String? = nil,
            overrideAction: WAFV2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.firewallManagerStatement = firewallManagerStatement
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes {
    /// A rule group defines a collection of rules to inspect and control web requests that you can use in a [WebACL]. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements.
    public struct RuleGroup {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the RuleLabels for a [Rule].
        public var availableLabels: [WAFV2ClientTypes.LabelSummary]?
        /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using [CheckCapacity]. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see [WAF web ACL capacity units (WCU)](https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html) in the WAF Developer Guide.
        /// This member is required.
        public var capacity: Swift.Int?
        /// The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
        public var consumedLabels: [WAFV2ClientTypes.LabelSummary]?
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
        public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
        /// A description of the rule group that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for your rule groups is the following: awswaf::rulegroup::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
        public var rules: [WAFV2ClientTypes.Rule]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init(
            arn: Swift.String? = nil,
            availableLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
            capacity: Swift.Int? = nil,
            consumedLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
            customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [WAFV2ClientTypes.Rule]? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.arn = arn
            self.availableLabels = availableLabels
            self.capacity = capacity
            self.consumedLabels = consumedLabels
            self.customResponseBodies = customResponseBodies
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.name = name
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }
    }

}

public struct CheckCapacityInput {
    /// An array of [Rule] that you're configuring to use in a rule group or web ACL.
    /// This member is required.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init(
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.rules = rules
        self.scope = scope
    }
}

public struct CreateRuleGroupInput {
    /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using [CheckCapacity]. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see [WAF web ACL capacity units (WCU)](https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html) in the WAF Developer Guide.
    /// This member is required.
    public var capacity: Swift.Int?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
    public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
    /// A description of the rule group that helps with identification.
    public var description: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init(
        capacity: Swift.Int? = nil,
        customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.capacity = capacity
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.visibilityConfig = visibilityConfig
    }
}

public struct CreateWebACLInput {
    /// Specifies custom configurations for the associations between the web ACL and protected resources. Use this to customize the maximum size of the request body that your protected resources forward to WAF for inspection. You can customize this setting for CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resources. The default setting is 16 KB (16,384 bytes). You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
    public var associationConfig: WAFV2ClientTypes.AssociationConfig?
    /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
    public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
    public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
    public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
    /// The action to perform if none of the Rules contained in the WebACL match.
    /// This member is required.
    public var defaultAction: WAFV2ClientTypes.DefaultAction?
    /// A description of the web ACL that helps with identification.
    public var description: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?
    /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains. Example JSON: "TokenDomains": { "mywebsite.com", "myotherwebsite.com" } Public suffixes aren't allowed. For example, you can't use gov.au or co.uk as token domains.
    public var tokenDomains: [Swift.String]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init(
        associationConfig: WAFV2ClientTypes.AssociationConfig? = nil,
        captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
        challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
        customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil,
        tokenDomains: [Swift.String]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.associationConfig = associationConfig
        self.captchaConfig = captchaConfig
        self.challengeConfig = challengeConfig
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.tokenDomains = tokenDomains
        self.visibilityConfig = visibilityConfig
    }
}

public struct UpdateRuleGroupInput {
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
    public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
    /// A description of the rule group that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init(
        customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}

public struct UpdateWebACLInput {
    /// Specifies custom configurations for the associations between the web ACL and protected resources. Use this to customize the maximum size of the request body that your protected resources forward to WAF for inspection. You can customize this setting for CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resources. The default setting is 16 KB (16,384 bytes). You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
    public var associationConfig: WAFV2ClientTypes.AssociationConfig?
    /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
    public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
    public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
    public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
    /// The action to perform if none of the Rules contained in the WebACL match.
    /// This member is required.
    public var defaultAction: WAFV2ClientTypes.DefaultAction?
    /// A description of the web ACL that helps with identification.
    public var description: Swift.String?
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains. Example JSON: "TokenDomains": { "mywebsite.com", "myotherwebsite.com" } Public suffixes aren't allowed. For example, you can't use gov.au or co.uk as token domains.
    public var tokenDomains: [Swift.String]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init(
        associationConfig: WAFV2ClientTypes.AssociationConfig? = nil,
        captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
        challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
        customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tokenDomains: [Swift.String]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.associationConfig = associationConfig
        self.captchaConfig = captchaConfig
        self.challengeConfig = challengeConfig
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tokenDomains = tokenDomains
        self.visibilityConfig = visibilityConfig
    }
}

public struct GetRuleGroupOutput {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    ///
    public var ruleGroup: WAFV2ClientTypes.RuleGroup?

    public init(
        lockToken: Swift.String? = nil,
        ruleGroup: WAFV2ClientTypes.RuleGroup? = nil
    )
    {
        self.lockToken = lockToken
        self.ruleGroup = ruleGroup
    }
}

extension WAFV2ClientTypes {
    /// A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has a statement that defines what to look for in web requests and an action that WAF applies to requests that match the statement. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types [Rule], [RuleGroup], and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance.
    public struct WebACL {
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.
        /// This member is required.
        public var arn: Swift.String?
        /// Specifies custom configurations for the associations between the web ACL and protected resources. Use this to customize the maximum size of the request body that your protected resources forward to WAF for inspection. You can customize this setting for CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resources. The default setting is 16 KB (16,384 bytes). You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/). For Application Load Balancer and AppSync, the limit is fixed at 8 KB (8,192 bytes).
        public var associationConfig: WAFV2ClientTypes.AssociationConfig?
        /// The web ACL capacity units (WCUs) currently being used by this web ACL. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see [WAF web ACL capacity units (WCU)](https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html) in the WAF Developer Guide.
        public var capacity: Swift.Int
        /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
        public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
        /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
        public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the WAF Developer Guide. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
        public var customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]?
        /// The action to perform if none of the Rules contained in the WebACL match.
        /// This member is required.
        public var defaultAction: WAFV2ClientTypes.DefaultAction?
        /// A description of the web ACL that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the WebACL. This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a WebACL.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a web ACL is the following: awswaf::webacl::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// Indicates whether this web ACL is managed by Firewall Manager. If true, then only Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL.
        public var managedByFirewallManager: Swift.Bool
        /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The last set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized before these. In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public var postProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]?
        /// The first set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized after these. In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public var preProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]?
        /// The [Rule] statements used to identify the web requests that you want to manage. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
        public var rules: [WAFV2ClientTypes.Rule]?
        /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        public var tokenDomains: [Swift.String]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init(
            arn: Swift.String? = nil,
            associationConfig: WAFV2ClientTypes.AssociationConfig? = nil,
            capacity: Swift.Int = 0,
            captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
            challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
            customResponseBodies: [Swift.String: WAFV2ClientTypes.CustomResponseBody]? = nil,
            defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            managedByFirewallManager: Swift.Bool = false,
            name: Swift.String? = nil,
            postProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil,
            preProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil,
            rules: [WAFV2ClientTypes.Rule]? = nil,
            tokenDomains: [Swift.String]? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.arn = arn
            self.associationConfig = associationConfig
            self.capacity = capacity
            self.captchaConfig = captchaConfig
            self.challengeConfig = challengeConfig
            self.customResponseBodies = customResponseBodies
            self.defaultAction = defaultAction
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.managedByFirewallManager = managedByFirewallManager
            self.name = name
            self.postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups
            self.preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups
            self.rules = rules
            self.tokenDomains = tokenDomains
            self.visibilityConfig = visibilityConfig
        }
    }

}

public struct GetWebACLForResourceOutput {
    /// The web ACL that is associated with the resource. If there is no associated resource, WAF returns a null web ACL.
    public var webACL: WAFV2ClientTypes.WebACL?

    public init(
        webACL: WAFV2ClientTypes.WebACL? = nil
    )
    {
        self.webACL = webACL
    }
}

public struct GetWebACLOutput {
    /// The URL to use in SDK integrations with Amazon Web Services managed rule groups. For example, you can use the integration SDKs with the account takeover prevention managed rule group AWSManagedRulesATPRuleSet and the account creation fraud prevention managed rule group AWSManagedRulesACFPRuleSet. This is only populated if you are using a rule group in your web ACL that integrates with your applications in this way. For more information, see [WAF client application integration](https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html) in the WAF Developer Guide.
    public var applicationIntegrationURL: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    /// The web ACL specification. You can modify the settings in this web ACL and use it to update this web ACL or create a new one.
    public var webACL: WAFV2ClientTypes.WebACL?

    public init(
        applicationIntegrationURL: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        webACL: WAFV2ClientTypes.WebACL? = nil
    )
    {
        self.applicationIntegrationURL = applicationIntegrationURL
        self.lockToken = lockToken
        self.webACL = webACL
    }
}

extension AssociateWebACLInput {

    static func urlPathProvider(_ value: AssociateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension CheckCapacityInput {

    static func urlPathProvider(_ value: CheckCapacityInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAPIKeyInput {

    static func urlPathProvider(_ value: CreateAPIKeyInput) -> Swift.String? {
        return "/"
    }
}

extension CreateIPSetInput {

    static func urlPathProvider(_ value: CreateIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRegexPatternSetInput {

    static func urlPathProvider(_ value: CreateRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRuleGroupInput {

    static func urlPathProvider(_ value: CreateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWebACLInput {

    static func urlPathProvider(_ value: CreateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAPIKeyInput {

    static func urlPathProvider(_ value: DeleteAPIKeyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFirewallManagerRuleGroupsInput {

    static func urlPathProvider(_ value: DeleteFirewallManagerRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteIPSetInput {

    static func urlPathProvider(_ value: DeleteIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLoggingConfigurationInput {

    static func urlPathProvider(_ value: DeleteLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePermissionPolicyInput {

    static func urlPathProvider(_ value: DeletePermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRegexPatternSetInput {

    static func urlPathProvider(_ value: DeleteRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRuleGroupInput {

    static func urlPathProvider(_ value: DeleteRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWebACLInput {

    static func urlPathProvider(_ value: DeleteWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAllManagedProductsInput {

    static func urlPathProvider(_ value: DescribeAllManagedProductsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeManagedProductsByVendorInput {

    static func urlPathProvider(_ value: DescribeManagedProductsByVendorInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeManagedRuleGroupInput {

    static func urlPathProvider(_ value: DescribeManagedRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateWebACLInput {

    static func urlPathProvider(_ value: DisassociateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension GenerateMobileSdkReleaseUrlInput {

    static func urlPathProvider(_ value: GenerateMobileSdkReleaseUrlInput) -> Swift.String? {
        return "/"
    }
}

extension GetDecryptedAPIKeyInput {

    static func urlPathProvider(_ value: GetDecryptedAPIKeyInput) -> Swift.String? {
        return "/"
    }
}

extension GetIPSetInput {

    static func urlPathProvider(_ value: GetIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetLoggingConfigurationInput {

    static func urlPathProvider(_ value: GetLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetManagedRuleSetInput {

    static func urlPathProvider(_ value: GetManagedRuleSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetMobileSdkReleaseInput {

    static func urlPathProvider(_ value: GetMobileSdkReleaseInput) -> Swift.String? {
        return "/"
    }
}

extension GetPermissionPolicyInput {

    static func urlPathProvider(_ value: GetPermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetRateBasedStatementManagedKeysInput {

    static func urlPathProvider(_ value: GetRateBasedStatementManagedKeysInput) -> Swift.String? {
        return "/"
    }
}

extension GetRegexPatternSetInput {

    static func urlPathProvider(_ value: GetRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension GetRuleGroupInput {

    static func urlPathProvider(_ value: GetRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension GetSampledRequestsInput {

    static func urlPathProvider(_ value: GetSampledRequestsInput) -> Swift.String? {
        return "/"
    }
}

extension GetWebACLInput {

    static func urlPathProvider(_ value: GetWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension GetWebACLForResourceInput {

    static func urlPathProvider(_ value: GetWebACLForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListAPIKeysInput {

    static func urlPathProvider(_ value: ListAPIKeysInput) -> Swift.String? {
        return "/"
    }
}

extension ListAvailableManagedRuleGroupsInput {

    static func urlPathProvider(_ value: ListAvailableManagedRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAvailableManagedRuleGroupVersionsInput {

    static func urlPathProvider(_ value: ListAvailableManagedRuleGroupVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListIPSetsInput {

    static func urlPathProvider(_ value: ListIPSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLoggingConfigurationsInput {

    static func urlPathProvider(_ value: ListLoggingConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListManagedRuleSetsInput {

    static func urlPathProvider(_ value: ListManagedRuleSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMobileSdkReleasesInput {

    static func urlPathProvider(_ value: ListMobileSdkReleasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListRegexPatternSetsInput {

    static func urlPathProvider(_ value: ListRegexPatternSetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourcesForWebACLInput {

    static func urlPathProvider(_ value: ListResourcesForWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleGroupsInput {

    static func urlPathProvider(_ value: ListRuleGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListWebACLsInput {

    static func urlPathProvider(_ value: ListWebACLsInput) -> Swift.String? {
        return "/"
    }
}

extension PutLoggingConfigurationInput {

    static func urlPathProvider(_ value: PutLoggingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutManagedRuleSetVersionsInput {

    static func urlPathProvider(_ value: PutManagedRuleSetVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension PutPermissionPolicyInput {

    static func urlPathProvider(_ value: PutPermissionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateIPSetInput {

    static func urlPathProvider(_ value: UpdateIPSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateManagedRuleSetVersionExpiryDateInput {

    static func urlPathProvider(_ value: UpdateManagedRuleSetVersionExpiryDateInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRegexPatternSetInput {

    static func urlPathProvider(_ value: UpdateRegexPatternSetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRuleGroupInput {

    static func urlPathProvider(_ value: UpdateRuleGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateWebACLInput {

    static func urlPathProvider(_ value: UpdateWebACLInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateWebACLInput {

    static func write(value: AssociateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["WebACLArn"].write(value.webACLArn)
    }
}

extension CheckCapacityInput {

    static func write(value: CheckCapacityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Rules"].writeList(value.rules, memberWritingClosure: WAFV2ClientTypes.Rule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
    }
}

extension CreateAPIKeyInput {

    static func write(value: CreateAPIKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Scope"].write(value.scope)
        try writer["TokenDomains"].writeList(value.tokenDomains, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateIPSetInput {

    static func write(value: CreateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Addresses"].writeList(value.addresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["IPAddressVersion"].write(value.ipAddressVersion)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFV2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRegexPatternSetInput {

    static func write(value: CreateRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["RegularExpressionList"].writeList(value.regularExpressionList, memberWritingClosure: WAFV2ClientTypes.Regex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFV2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateRuleGroupInput {

    static func write(value: CreateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Capacity"].write(value.capacity)
        try writer["CustomResponseBodies"].writeMap(value.customResponseBodies, valueWritingClosure: WAFV2ClientTypes.CustomResponseBody.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Rules"].writeList(value.rules, memberWritingClosure: WAFV2ClientTypes.Rule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFV2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VisibilityConfig"].write(value.visibilityConfig, with: WAFV2ClientTypes.VisibilityConfig.write(value:to:))
    }
}

extension CreateWebACLInput {

    static func write(value: CreateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationConfig"].write(value.associationConfig, with: WAFV2ClientTypes.AssociationConfig.write(value:to:))
        try writer["CaptchaConfig"].write(value.captchaConfig, with: WAFV2ClientTypes.CaptchaConfig.write(value:to:))
        try writer["ChallengeConfig"].write(value.challengeConfig, with: WAFV2ClientTypes.ChallengeConfig.write(value:to:))
        try writer["CustomResponseBodies"].writeMap(value.customResponseBodies, valueWritingClosure: WAFV2ClientTypes.CustomResponseBody.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["DefaultAction"].write(value.defaultAction, with: WAFV2ClientTypes.DefaultAction.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["Rules"].writeList(value.rules, memberWritingClosure: WAFV2ClientTypes.Rule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFV2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TokenDomains"].writeList(value.tokenDomains, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VisibilityConfig"].write(value.visibilityConfig, with: WAFV2ClientTypes.VisibilityConfig.write(value:to:))
    }
}

extension DeleteAPIKeyInput {

    static func write(value: DeleteAPIKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["APIKey"].write(value.apiKey)
        try writer["Scope"].write(value.scope)
    }
}

extension DeleteFirewallManagerRuleGroupsInput {

    static func write(value: DeleteFirewallManagerRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WebACLArn"].write(value.webACLArn)
        try writer["WebACLLockToken"].write(value.webACLLockToken)
    }
}

extension DeleteIPSetInput {

    static func write(value: DeleteIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension DeleteLoggingConfigurationInput {

    static func write(value: DeleteLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogScope"].write(value.logScope)
        try writer["LogType"].write(value.logType)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeletePermissionPolicyInput {

    static func write(value: DeletePermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DeleteRegexPatternSetInput {

    static func write(value: DeleteRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension DeleteRuleGroupInput {

    static func write(value: DeleteRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension DeleteWebACLInput {

    static func write(value: DeleteWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension DescribeAllManagedProductsInput {

    static func write(value: DescribeAllManagedProductsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Scope"].write(value.scope)
    }
}

extension DescribeManagedProductsByVendorInput {

    static func write(value: DescribeManagedProductsByVendorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Scope"].write(value.scope)
        try writer["VendorName"].write(value.vendorName)
    }
}

extension DescribeManagedRuleGroupInput {

    static func write(value: DescribeManagedRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
        try writer["VendorName"].write(value.vendorName)
        try writer["VersionName"].write(value.versionName)
    }
}

extension DisassociateWebACLInput {

    static func write(value: DisassociateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GenerateMobileSdkReleaseUrlInput {

    static func write(value: GenerateMobileSdkReleaseUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Platform"].write(value.platform)
        try writer["ReleaseVersion"].write(value.releaseVersion)
    }
}

extension GetDecryptedAPIKeyInput {

    static func write(value: GetDecryptedAPIKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["APIKey"].write(value.apiKey)
        try writer["Scope"].write(value.scope)
    }
}

extension GetIPSetInput {

    static func write(value: GetIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension GetLoggingConfigurationInput {

    static func write(value: GetLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogScope"].write(value.logScope)
        try writer["LogType"].write(value.logType)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetManagedRuleSetInput {

    static func write(value: GetManagedRuleSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension GetMobileSdkReleaseInput {

    static func write(value: GetMobileSdkReleaseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Platform"].write(value.platform)
        try writer["ReleaseVersion"].write(value.releaseVersion)
    }
}

extension GetPermissionPolicyInput {

    static func write(value: GetPermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension GetRateBasedStatementManagedKeysInput {

    static func write(value: GetRateBasedStatementManagedKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleGroupRuleName"].write(value.ruleGroupRuleName)
        try writer["RuleName"].write(value.ruleName)
        try writer["Scope"].write(value.scope)
        try writer["WebACLId"].write(value.webACLId)
        try writer["WebACLName"].write(value.webACLName)
    }
}

extension GetRegexPatternSetInput {

    static func write(value: GetRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension GetRuleGroupInput {

    static func write(value: GetRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension GetSampledRequestsInput {

    static func write(value: GetSampledRequestsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxItems"].write(value.maxItems)
        try writer["RuleMetricName"].write(value.ruleMetricName)
        try writer["Scope"].write(value.scope)
        try writer["TimeWindow"].write(value.timeWindow, with: WAFV2ClientTypes.TimeWindow.write(value:to:))
        try writer["WebAclArn"].write(value.webAclArn)
    }
}

extension GetWebACLInput {

    static func write(value: GetWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension GetWebACLForResourceInput {

    static func write(value: GetWebACLForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListAPIKeysInput {

    static func write(value: ListAPIKeysInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListAvailableManagedRuleGroupsInput {

    static func write(value: ListAvailableManagedRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListAvailableManagedRuleGroupVersionsInput {

    static func write(value: ListAvailableManagedRuleGroupVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Name"].write(value.name)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
        try writer["VendorName"].write(value.vendorName)
    }
}

extension ListIPSetsInput {

    static func write(value: ListIPSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListLoggingConfigurationsInput {

    static func write(value: ListLoggingConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["LogScope"].write(value.logScope)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListManagedRuleSetsInput {

    static func write(value: ListManagedRuleSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListMobileSdkReleasesInput {

    static func write(value: ListMobileSdkReleasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Platform"].write(value.platform)
    }
}

extension ListRegexPatternSetsInput {

    static func write(value: ListRegexPatternSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListResourcesForWebACLInput {

    static func write(value: ListResourcesForWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceType"].write(value.resourceType)
        try writer["WebACLArn"].write(value.webACLArn)
    }
}

extension ListRuleGroupsInput {

    static func write(value: ListRuleGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension ListWebACLsInput {

    static func write(value: ListWebACLsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextMarker"].write(value.nextMarker)
        try writer["Scope"].write(value.scope)
    }
}

extension PutLoggingConfigurationInput {

    static func write(value: PutLoggingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LoggingConfiguration"].write(value.loggingConfiguration, with: WAFV2ClientTypes.LoggingConfiguration.write(value:to:))
    }
}

extension PutManagedRuleSetVersionsInput {

    static func write(value: PutManagedRuleSetVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["RecommendedVersion"].write(value.recommendedVersion)
        try writer["Scope"].write(value.scope)
        try writer["VersionsToPublish"].writeMap(value.versionsToPublish, valueWritingClosure: WAFV2ClientTypes.VersionToPublish.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutPermissionPolicyInput {

    static func write(value: PutPermissionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: WAFV2ClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateIPSetInput {

    static func write(value: UpdateIPSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Addresses"].writeList(value.addresses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
    }
}

extension UpdateManagedRuleSetVersionExpiryDateInput {

    static func write(value: UpdateManagedRuleSetVersionExpiryDateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpiryTimestamp"].writeTimestamp(value.expiryTimestamp, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Scope"].write(value.scope)
        try writer["VersionToExpire"].write(value.versionToExpire)
    }
}

extension UpdateRegexPatternSetInput {

    static func write(value: UpdateRegexPatternSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["RegularExpressionList"].writeList(value.regularExpressionList, memberWritingClosure: WAFV2ClientTypes.Regex.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
    }
}

extension UpdateRuleGroupInput {

    static func write(value: UpdateRuleGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomResponseBodies"].writeMap(value.customResponseBodies, valueWritingClosure: WAFV2ClientTypes.CustomResponseBody.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Rules"].writeList(value.rules, memberWritingClosure: WAFV2ClientTypes.Rule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
        try writer["VisibilityConfig"].write(value.visibilityConfig, with: WAFV2ClientTypes.VisibilityConfig.write(value:to:))
    }
}

extension UpdateWebACLInput {

    static func write(value: UpdateWebACLInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationConfig"].write(value.associationConfig, with: WAFV2ClientTypes.AssociationConfig.write(value:to:))
        try writer["CaptchaConfig"].write(value.captchaConfig, with: WAFV2ClientTypes.CaptchaConfig.write(value:to:))
        try writer["ChallengeConfig"].write(value.challengeConfig, with: WAFV2ClientTypes.ChallengeConfig.write(value:to:))
        try writer["CustomResponseBodies"].writeMap(value.customResponseBodies, valueWritingClosure: WAFV2ClientTypes.CustomResponseBody.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["DefaultAction"].write(value.defaultAction, with: WAFV2ClientTypes.DefaultAction.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["Id"].write(value.id)
        try writer["LockToken"].write(value.lockToken)
        try writer["Name"].write(value.name)
        try writer["Rules"].writeList(value.rules, memberWritingClosure: WAFV2ClientTypes.Rule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Scope"].write(value.scope)
        try writer["TokenDomains"].writeList(value.tokenDomains, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VisibilityConfig"].write(value.visibilityConfig, with: WAFV2ClientTypes.VisibilityConfig.write(value:to:))
    }
}

extension AssociateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateWebACLOutput {
        return AssociateWebACLOutput()
    }
}

extension CheckCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CheckCapacityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CheckCapacityOutput()
        value.capacity = try reader["Capacity"].readIfPresent() ?? 0
        return value
    }
}

extension CreateAPIKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAPIKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAPIKeyOutput()
        value.apiKey = try reader["APIKey"].readIfPresent()
        return value
    }
}

extension CreateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateIPSetOutput()
        value.summary = try reader["Summary"].readIfPresent(with: WAFV2ClientTypes.IPSetSummary.read(from:))
        return value
    }
}

extension CreateRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRegexPatternSetOutput()
        value.summary = try reader["Summary"].readIfPresent(with: WAFV2ClientTypes.RegexPatternSetSummary.read(from:))
        return value
    }
}

extension CreateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRuleGroupOutput()
        value.summary = try reader["Summary"].readIfPresent(with: WAFV2ClientTypes.RuleGroupSummary.read(from:))
        return value
    }
}

extension CreateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWebACLOutput()
        value.summary = try reader["Summary"].readIfPresent(with: WAFV2ClientTypes.WebACLSummary.read(from:))
        return value
    }
}

extension DeleteAPIKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAPIKeyOutput {
        return DeleteAPIKeyOutput()
    }
}

extension DeleteFirewallManagerRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFirewallManagerRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFirewallManagerRuleGroupsOutput()
        value.nextWebACLLockToken = try reader["NextWebACLLockToken"].readIfPresent()
        return value
    }
}

extension DeleteIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteIPSetOutput {
        return DeleteIPSetOutput()
    }
}

extension DeleteLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLoggingConfigurationOutput {
        return DeleteLoggingConfigurationOutput()
    }
}

extension DeletePermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePermissionPolicyOutput {
        return DeletePermissionPolicyOutput()
    }
}

extension DeleteRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRegexPatternSetOutput {
        return DeleteRegexPatternSetOutput()
    }
}

extension DeleteRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRuleGroupOutput {
        return DeleteRuleGroupOutput()
    }
}

extension DeleteWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWebACLOutput {
        return DeleteWebACLOutput()
    }
}

extension DescribeAllManagedProductsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAllManagedProductsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAllManagedProductsOutput()
        value.managedProducts = try reader["ManagedProducts"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedProductDescriptor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeManagedProductsByVendorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeManagedProductsByVendorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeManagedProductsByVendorOutput()
        value.managedProducts = try reader["ManagedProducts"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedProductDescriptor.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeManagedRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeManagedRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeManagedRuleGroupOutput()
        value.availableLabels = try reader["AvailableLabels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.LabelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.capacity = try reader["Capacity"].readIfPresent()
        value.consumedLabels = try reader["ConsumedLabels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.LabelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RuleSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
        value.versionName = try reader["VersionName"].readIfPresent()
        return value
    }
}

extension DisassociateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateWebACLOutput {
        return DisassociateWebACLOutput()
    }
}

extension GenerateMobileSdkReleaseUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GenerateMobileSdkReleaseUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GenerateMobileSdkReleaseUrlOutput()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension GetDecryptedAPIKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDecryptedAPIKeyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDecryptedAPIKeyOutput()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tokenDomains = try reader["TokenDomains"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetIPSetOutput()
        value.ipSet = try reader["IPSet"].readIfPresent(with: WAFV2ClientTypes.IPSet.read(from:))
        value.lockToken = try reader["LockToken"].readIfPresent()
        return value
    }
}

extension GetLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: WAFV2ClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension GetManagedRuleSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetManagedRuleSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetManagedRuleSetOutput()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.managedRuleSet = try reader["ManagedRuleSet"].readIfPresent(with: WAFV2ClientTypes.ManagedRuleSet.read(from:))
        return value
    }
}

extension GetMobileSdkReleaseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMobileSdkReleaseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMobileSdkReleaseOutput()
        value.mobileSdkRelease = try reader["MobileSdkRelease"].readIfPresent(with: WAFV2ClientTypes.MobileSdkRelease.read(from:))
        return value
    }
}

extension GetPermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPermissionPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPermissionPolicyOutput()
        value.policy = try reader["Policy"].readIfPresent()
        return value
    }
}

extension GetRateBasedStatementManagedKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRateBasedStatementManagedKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRateBasedStatementManagedKeysOutput()
        value.managedKeysIPV4 = try reader["ManagedKeysIPV4"].readIfPresent(with: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet.read(from:))
        value.managedKeysIPV6 = try reader["ManagedKeysIPV6"].readIfPresent(with: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet.read(from:))
        return value
    }
}

extension GetRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRegexPatternSetOutput()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.regexPatternSet = try reader["RegexPatternSet"].readIfPresent(with: WAFV2ClientTypes.RegexPatternSet.read(from:))
        return value
    }
}

extension GetRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetRuleGroupOutput()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.ruleGroup = try reader["RuleGroup"].readIfPresent(with: WAFV2ClientTypes.RuleGroup.read(from:))
        return value
    }
}

extension GetSampledRequestsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSampledRequestsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSampledRequestsOutput()
        value.populationSize = try reader["PopulationSize"].readIfPresent() ?? 0
        value.sampledRequests = try reader["SampledRequests"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.SampledHTTPRequest.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.timeWindow = try reader["TimeWindow"].readIfPresent(with: WAFV2ClientTypes.TimeWindow.read(from:))
        return value
    }
}

extension GetWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWebACLOutput()
        value.applicationIntegrationURL = try reader["ApplicationIntegrationURL"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.webACL = try reader["WebACL"].readIfPresent(with: WAFV2ClientTypes.WebACL.read(from:))
        return value
    }
}

extension GetWebACLForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWebACLForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWebACLForResourceOutput()
        value.webACL = try reader["WebACL"].readIfPresent(with: WAFV2ClientTypes.WebACL.read(from:))
        return value
    }
}

extension ListAPIKeysOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAPIKeysOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAPIKeysOutput()
        value.apiKeySummaries = try reader["APIKeySummaries"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.APIKeySummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.applicationIntegrationURL = try reader["ApplicationIntegrationURL"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListAvailableManagedRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAvailableManagedRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAvailableManagedRuleGroupsOutput()
        value.managedRuleGroups = try reader["ManagedRuleGroups"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedRuleGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListAvailableManagedRuleGroupVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAvailableManagedRuleGroupVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAvailableManagedRuleGroupVersionsOutput()
        value.currentDefaultVersion = try reader["CurrentDefaultVersion"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.versions = try reader["Versions"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedRuleGroupVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListIPSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListIPSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListIPSetsOutput()
        value.ipSets = try reader["IPSets"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.IPSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListLoggingConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLoggingConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLoggingConfigurationsOutput()
        value.loggingConfigurations = try reader["LoggingConfigurations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.LoggingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListManagedRuleSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListManagedRuleSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListManagedRuleSetsOutput()
        value.managedRuleSets = try reader["ManagedRuleSets"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedRuleSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        return value
    }
}

extension ListMobileSdkReleasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMobileSdkReleasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMobileSdkReleasesOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.releaseSummaries = try reader["ReleaseSummaries"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ReleaseSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRegexPatternSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRegexPatternSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRegexPatternSetsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.regexPatternSets = try reader["RegexPatternSets"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RegexPatternSetSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourcesForWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourcesForWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourcesForWebACLOutput()
        value.resourceArns = try reader["ResourceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRuleGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleGroupsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.ruleGroups = try reader["RuleGroups"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RuleGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.tagInfoForResource = try reader["TagInfoForResource"].readIfPresent(with: WAFV2ClientTypes.TagInfoForResource.read(from:))
        return value
    }
}

extension ListWebACLsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWebACLsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWebACLsOutput()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.webACLs = try reader["WebACLs"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.WebACLSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutLoggingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLoggingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutLoggingConfigurationOutput()
        value.loggingConfiguration = try reader["LoggingConfiguration"].readIfPresent(with: WAFV2ClientTypes.LoggingConfiguration.read(from:))
        return value
    }
}

extension PutManagedRuleSetVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutManagedRuleSetVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutManagedRuleSetVersionsOutput()
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

extension PutPermissionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPermissionPolicyOutput {
        return PutPermissionPolicyOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateIPSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateIPSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateIPSetOutput()
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

extension UpdateManagedRuleSetVersionExpiryDateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateManagedRuleSetVersionExpiryDateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateManagedRuleSetVersionExpiryDateOutput()
        value.expiringVersion = try reader["ExpiringVersion"].readIfPresent()
        value.expiryTimestamp = try reader["ExpiryTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

extension UpdateRegexPatternSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRegexPatternSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRegexPatternSetOutput()
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

extension UpdateRuleGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRuleGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRuleGroupOutput()
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

extension UpdateWebACLOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWebACLOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWebACLOutput()
        value.nextLockToken = try reader["NextLockToken"].readIfPresent()
        return value
    }
}

enum AssociateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CheckCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFExpiredManagedRuleGroupVersionException": return try WAFExpiredManagedRuleGroupVersionException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAPIKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFConfigurationWarningException": return try WAFConfigurationWarningException.makeError(baseError: baseError)
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFExpiredManagedRuleGroupVersionException": return try WAFExpiredManagedRuleGroupVersionException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAPIKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFirewallManagerRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFAssociatedItemException": return try WAFAssociatedItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFAssociatedItemException": return try WAFAssociatedItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFAssociatedItemException": return try WAFAssociatedItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFAssociatedItemException": return try WAFAssociatedItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAllManagedProductsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeManagedProductsByVendorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeManagedRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFExpiredManagedRuleGroupVersionException": return try WAFExpiredManagedRuleGroupVersionException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GenerateMobileSdkReleaseUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDecryptedAPIKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetManagedRuleSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMobileSdkReleaseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRateBasedStatementManagedKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFUnsupportedAggregateKeyTypeException": return try WAFUnsupportedAggregateKeyTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSampledRequestsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWebACLForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAPIKeysOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAvailableManagedRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAvailableManagedRuleGroupVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListIPSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLoggingConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListManagedRuleSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMobileSdkReleasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRegexPatternSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourcesForWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWebACLsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLoggingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFLogDestinationPermissionIssueException": return try WAFLogDestinationPermissionIssueException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFServiceLinkedRoleErrorException": return try WAFServiceLinkedRoleErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutManagedRuleSetVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPermissionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidPermissionPolicyException": return try WAFInvalidPermissionPolicyException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFTagOperationException": return try WAFTagOperationException.makeError(baseError: baseError)
            case "WAFTagOperationInternalErrorException": return try WAFTagOperationInternalErrorException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateIPSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateManagedRuleSetVersionExpiryDateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRegexPatternSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRuleGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFConfigurationWarningException": return try WAFConfigurationWarningException.makeError(baseError: baseError)
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWebACLOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "WAFConfigurationWarningException": return try WAFConfigurationWarningException.makeError(baseError: baseError)
            case "WAFDuplicateItemException": return try WAFDuplicateItemException.makeError(baseError: baseError)
            case "WAFExpiredManagedRuleGroupVersionException": return try WAFExpiredManagedRuleGroupVersionException.makeError(baseError: baseError)
            case "WAFInternalErrorException": return try WAFInternalErrorException.makeError(baseError: baseError)
            case "WAFInvalidOperationException": return try WAFInvalidOperationException.makeError(baseError: baseError)
            case "WAFInvalidParameterException": return try WAFInvalidParameterException.makeError(baseError: baseError)
            case "WAFInvalidResourceException": return try WAFInvalidResourceException.makeError(baseError: baseError)
            case "WAFLimitsExceededException": return try WAFLimitsExceededException.makeError(baseError: baseError)
            case "WAFNonexistentItemException": return try WAFNonexistentItemException.makeError(baseError: baseError)
            case "WAFOptimisticLockException": return try WAFOptimisticLockException.makeError(baseError: baseError)
            case "WAFSubscriptionNotFoundException": return try WAFSubscriptionNotFoundException.makeError(baseError: baseError)
            case "WAFUnavailableEntityException": return try WAFUnavailableEntityException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension WAFInvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidParameterException()
        value.properties.field = try reader["Field"].readIfPresent()
        value.properties.parameter = try reader["Parameter"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFNonexistentItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFNonexistentItemException {
        let reader = baseError.errorBodyReader
        var value = WAFNonexistentItemException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInternalErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFInternalErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFUnavailableEntityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFUnavailableEntityException {
        let reader = baseError.errorBodyReader
        var value = WAFUnavailableEntityException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidOperationException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFExpiredManagedRuleGroupVersionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFExpiredManagedRuleGroupVersionException {
        let reader = baseError.errorBodyReader
        var value = WAFExpiredManagedRuleGroupVersionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidResourceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidResourceException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidResourceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFSubscriptionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFSubscriptionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = WAFSubscriptionNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFLimitsExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFLimitsExceededException {
        let reader = baseError.errorBodyReader
        var value = WAFLimitsExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.sourceType = try reader["SourceType"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFOptimisticLockException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFOptimisticLockException {
        let reader = baseError.errorBodyReader
        var value = WAFOptimisticLockException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFDuplicateItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFDuplicateItemException {
        let reader = baseError.errorBodyReader
        var value = WAFDuplicateItemException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFTagOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFTagOperationException {
        let reader = baseError.errorBodyReader
        var value = WAFTagOperationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFTagOperationInternalErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFTagOperationInternalErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFTagOperationInternalErrorException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFConfigurationWarningException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFConfigurationWarningException {
        let reader = baseError.errorBodyReader
        var value = WAFConfigurationWarningException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFAssociatedItemException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFAssociatedItemException {
        let reader = baseError.errorBodyReader
        var value = WAFAssociatedItemException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFUnsupportedAggregateKeyTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFUnsupportedAggregateKeyTypeException {
        let reader = baseError.errorBodyReader
        var value = WAFUnsupportedAggregateKeyTypeException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFLogDestinationPermissionIssueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFLogDestinationPermissionIssueException {
        let reader = baseError.errorBodyReader
        var value = WAFLogDestinationPermissionIssueException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFServiceLinkedRoleErrorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFServiceLinkedRoleErrorException {
        let reader = baseError.errorBodyReader
        var value = WAFServiceLinkedRoleErrorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFInvalidPermissionPolicyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WAFInvalidPermissionPolicyException {
        let reader = baseError.errorBodyReader
        var value = WAFInvalidPermissionPolicyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WAFV2ClientTypes.IPSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.IPSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.IPSetSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.RegexPatternSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RegexPatternSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RegexPatternSetSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.RuleGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleGroupSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.WebACLSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.WebACLSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.WebACLSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ManagedProductDescriptor {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedProductDescriptor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedProductDescriptor()
        value.vendorName = try reader["VendorName"].readIfPresent()
        value.managedRuleSetName = try reader["ManagedRuleSetName"].readIfPresent()
        value.productId = try reader["ProductId"].readIfPresent()
        value.productLink = try reader["ProductLink"].readIfPresent()
        value.productTitle = try reader["ProductTitle"].readIfPresent()
        value.productDescription = try reader["ProductDescription"].readIfPresent()
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
        value.isVersioningSupported = try reader["IsVersioningSupported"].readIfPresent() ?? false
        value.isAdvancedManagedRuleSet = try reader["IsAdvancedManagedRuleSet"].readIfPresent() ?? false
        return value
    }
}

extension WAFV2ClientTypes.RuleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleSummary()
        value.name = try reader["Name"].readIfPresent()
        value.action = try reader["Action"].readIfPresent(with: WAFV2ClientTypes.RuleAction.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.RuleAction {

    static func write(value: WAFV2ClientTypes.RuleAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Allow"].write(value.allow, with: WAFV2ClientTypes.AllowAction.write(value:to:))
        try writer["Block"].write(value.block, with: WAFV2ClientTypes.BlockAction.write(value:to:))
        try writer["Captcha"].write(value.captcha, with: WAFV2ClientTypes.CaptchaAction.write(value:to:))
        try writer["Challenge"].write(value.challenge, with: WAFV2ClientTypes.ChallengeAction.write(value:to:))
        try writer["Count"].write(value.count, with: WAFV2ClientTypes.CountAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleAction()
        value.block = try reader["Block"].readIfPresent(with: WAFV2ClientTypes.BlockAction.read(from:))
        value.allow = try reader["Allow"].readIfPresent(with: WAFV2ClientTypes.AllowAction.read(from:))
        value.count = try reader["Count"].readIfPresent(with: WAFV2ClientTypes.CountAction.read(from:))
        value.captcha = try reader["Captcha"].readIfPresent(with: WAFV2ClientTypes.CaptchaAction.read(from:))
        value.challenge = try reader["Challenge"].readIfPresent(with: WAFV2ClientTypes.ChallengeAction.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.ChallengeAction {

    static func write(value: WAFV2ClientTypes.ChallengeAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRequestHandling"].write(value.customRequestHandling, with: WAFV2ClientTypes.CustomRequestHandling.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ChallengeAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ChallengeAction()
        value.customRequestHandling = try reader["CustomRequestHandling"].readIfPresent(with: WAFV2ClientTypes.CustomRequestHandling.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.CustomRequestHandling {

    static func write(value: WAFV2ClientTypes.CustomRequestHandling?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InsertHeaders"].writeList(value.insertHeaders, memberWritingClosure: WAFV2ClientTypes.CustomHTTPHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CustomRequestHandling {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CustomRequestHandling()
        value.insertHeaders = try reader["InsertHeaders"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.CustomHTTPHeader.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.CustomHTTPHeader {

    static func write(value: WAFV2ClientTypes.CustomHTTPHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CustomHTTPHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CustomHTTPHeader()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.CaptchaAction {

    static func write(value: WAFV2ClientTypes.CaptchaAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRequestHandling"].write(value.customRequestHandling, with: WAFV2ClientTypes.CustomRequestHandling.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CaptchaAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CaptchaAction()
        value.customRequestHandling = try reader["CustomRequestHandling"].readIfPresent(with: WAFV2ClientTypes.CustomRequestHandling.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.CountAction {

    static func write(value: WAFV2ClientTypes.CountAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRequestHandling"].write(value.customRequestHandling, with: WAFV2ClientTypes.CustomRequestHandling.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CountAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CountAction()
        value.customRequestHandling = try reader["CustomRequestHandling"].readIfPresent(with: WAFV2ClientTypes.CustomRequestHandling.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.AllowAction {

    static func write(value: WAFV2ClientTypes.AllowAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomRequestHandling"].write(value.customRequestHandling, with: WAFV2ClientTypes.CustomRequestHandling.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AllowAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AllowAction()
        value.customRequestHandling = try reader["CustomRequestHandling"].readIfPresent(with: WAFV2ClientTypes.CustomRequestHandling.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.BlockAction {

    static func write(value: WAFV2ClientTypes.BlockAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomResponse"].write(value.customResponse, with: WAFV2ClientTypes.CustomResponse.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.BlockAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.BlockAction()
        value.customResponse = try reader["CustomResponse"].readIfPresent(with: WAFV2ClientTypes.CustomResponse.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.CustomResponse {

    static func write(value: WAFV2ClientTypes.CustomResponse?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomResponseBodyKey"].write(value.customResponseBodyKey)
        try writer["ResponseCode"].write(value.responseCode)
        try writer["ResponseHeaders"].writeList(value.responseHeaders, memberWritingClosure: WAFV2ClientTypes.CustomHTTPHeader.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CustomResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CustomResponse()
        value.responseCode = try reader["ResponseCode"].readIfPresent() ?? 0
        value.customResponseBodyKey = try reader["CustomResponseBodyKey"].readIfPresent()
        value.responseHeaders = try reader["ResponseHeaders"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.CustomHTTPHeader.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.LabelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.LabelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.LabelSummary()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.IPSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.IPSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.IPSet()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.ipAddressVersion = try reader["IPAddressVersion"].readIfPresent() ?? .sdkUnknown("")
        value.addresses = try reader["Addresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.LoggingConfiguration {

    static func write(value: WAFV2ClientTypes.LoggingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LogDestinationConfigs"].writeList(value.logDestinationConfigs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LogScope"].write(value.logScope)
        try writer["LogType"].write(value.logType)
        try writer["LoggingFilter"].write(value.loggingFilter, with: WAFV2ClientTypes.LoggingFilter.write(value:to:))
        try writer["ManagedByFirewallManager"].write(value.managedByFirewallManager)
        try writer["RedactedFields"].writeList(value.redactedFields, memberWritingClosure: WAFV2ClientTypes.FieldToMatch.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ResourceArn"].write(value.resourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.LoggingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.LoggingConfiguration()
        value.resourceArn = try reader["ResourceArn"].readIfPresent() ?? ""
        value.logDestinationConfigs = try reader["LogDestinationConfigs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.redactedFields = try reader["RedactedFields"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.FieldToMatch.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedByFirewallManager = try reader["ManagedByFirewallManager"].readIfPresent() ?? false
        value.loggingFilter = try reader["LoggingFilter"].readIfPresent(with: WAFV2ClientTypes.LoggingFilter.read(from:))
        value.logType = try reader["LogType"].readIfPresent()
        value.logScope = try reader["LogScope"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.LoggingFilter {

    static func write(value: WAFV2ClientTypes.LoggingFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultBehavior"].write(value.defaultBehavior)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: WAFV2ClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.LoggingFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.LoggingFilter()
        value.filters = try reader["Filters"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Filter.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.defaultBehavior = try reader["DefaultBehavior"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.Filter {

    static func write(value: WAFV2ClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Behavior"].write(value.behavior)
        try writer["Conditions"].writeList(value.conditions, memberWritingClosure: WAFV2ClientTypes.Condition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Requirement"].write(value.requirement)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Filter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Filter()
        value.behavior = try reader["Behavior"].readIfPresent() ?? .sdkUnknown("")
        value.requirement = try reader["Requirement"].readIfPresent() ?? .sdkUnknown("")
        value.conditions = try reader["Conditions"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Condition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.Condition {

    static func write(value: WAFV2ClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionCondition"].write(value.actionCondition, with: WAFV2ClientTypes.ActionCondition.write(value:to:))
        try writer["LabelNameCondition"].write(value.labelNameCondition, with: WAFV2ClientTypes.LabelNameCondition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Condition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Condition()
        value.actionCondition = try reader["ActionCondition"].readIfPresent(with: WAFV2ClientTypes.ActionCondition.read(from:))
        value.labelNameCondition = try reader["LabelNameCondition"].readIfPresent(with: WAFV2ClientTypes.LabelNameCondition.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.LabelNameCondition {

    static func write(value: WAFV2ClientTypes.LabelNameCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelName"].write(value.labelName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.LabelNameCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.LabelNameCondition()
        value.labelName = try reader["LabelName"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.ActionCondition {

    static func write(value: WAFV2ClientTypes.ActionCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ActionCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ActionCondition()
        value.action = try reader["Action"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.FieldToMatch {

    static func write(value: WAFV2ClientTypes.FieldToMatch?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllQueryArguments"].write(value.allQueryArguments, with: WAFV2ClientTypes.AllQueryArguments.write(value:to:))
        try writer["Body"].write(value.body, with: WAFV2ClientTypes.Body.write(value:to:))
        try writer["Cookies"].write(value.cookies, with: WAFV2ClientTypes.Cookies.write(value:to:))
        try writer["HeaderOrder"].write(value.headerOrder, with: WAFV2ClientTypes.HeaderOrder.write(value:to:))
        try writer["Headers"].write(value.headers, with: WAFV2ClientTypes.Headers.write(value:to:))
        try writer["JA3Fingerprint"].write(value.ja3Fingerprint, with: WAFV2ClientTypes.JA3Fingerprint.write(value:to:))
        try writer["JsonBody"].write(value.jsonBody, with: WAFV2ClientTypes.JsonBody.write(value:to:))
        try writer["Method"].write(value.method, with: WAFV2ClientTypes.Method.write(value:to:))
        try writer["QueryString"].write(value.queryString, with: WAFV2ClientTypes.QueryString.write(value:to:))
        try writer["SingleHeader"].write(value.singleHeader, with: WAFV2ClientTypes.SingleHeader.write(value:to:))
        try writer["SingleQueryArgument"].write(value.singleQueryArgument, with: WAFV2ClientTypes.SingleQueryArgument.write(value:to:))
        try writer["UriPath"].write(value.uriPath, with: WAFV2ClientTypes.UriPath.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.FieldToMatch {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.FieldToMatch()
        value.singleHeader = try reader["SingleHeader"].readIfPresent(with: WAFV2ClientTypes.SingleHeader.read(from:))
        value.singleQueryArgument = try reader["SingleQueryArgument"].readIfPresent(with: WAFV2ClientTypes.SingleQueryArgument.read(from:))
        value.allQueryArguments = try reader["AllQueryArguments"].readIfPresent(with: WAFV2ClientTypes.AllQueryArguments.read(from:))
        value.uriPath = try reader["UriPath"].readIfPresent(with: WAFV2ClientTypes.UriPath.read(from:))
        value.queryString = try reader["QueryString"].readIfPresent(with: WAFV2ClientTypes.QueryString.read(from:))
        value.body = try reader["Body"].readIfPresent(with: WAFV2ClientTypes.Body.read(from:))
        value.method = try reader["Method"].readIfPresent(with: WAFV2ClientTypes.Method.read(from:))
        value.jsonBody = try reader["JsonBody"].readIfPresent(with: WAFV2ClientTypes.JsonBody.read(from:))
        value.headers = try reader["Headers"].readIfPresent(with: WAFV2ClientTypes.Headers.read(from:))
        value.cookies = try reader["Cookies"].readIfPresent(with: WAFV2ClientTypes.Cookies.read(from:))
        value.headerOrder = try reader["HeaderOrder"].readIfPresent(with: WAFV2ClientTypes.HeaderOrder.read(from:))
        value.ja3Fingerprint = try reader["JA3Fingerprint"].readIfPresent(with: WAFV2ClientTypes.JA3Fingerprint.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.JA3Fingerprint {

    static func write(value: WAFV2ClientTypes.JA3Fingerprint?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FallbackBehavior"].write(value.fallbackBehavior)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.JA3Fingerprint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.JA3Fingerprint()
        value.fallbackBehavior = try reader["FallbackBehavior"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.HeaderOrder {

    static func write(value: WAFV2ClientTypes.HeaderOrder?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OversizeHandling"].write(value.oversizeHandling)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.HeaderOrder {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.HeaderOrder()
        value.oversizeHandling = try reader["OversizeHandling"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.Cookies {

    static func write(value: WAFV2ClientTypes.Cookies?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MatchPattern"].write(value.matchPattern, with: WAFV2ClientTypes.CookieMatchPattern.write(value:to:))
        try writer["MatchScope"].write(value.matchScope)
        try writer["OversizeHandling"].write(value.oversizeHandling)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Cookies {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Cookies()
        value.matchPattern = try reader["MatchPattern"].readIfPresent(with: WAFV2ClientTypes.CookieMatchPattern.read(from:))
        value.matchScope = try reader["MatchScope"].readIfPresent() ?? .sdkUnknown("")
        value.oversizeHandling = try reader["OversizeHandling"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.CookieMatchPattern {

    static func write(value: WAFV2ClientTypes.CookieMatchPattern?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["All"].write(value.all, with: WAFV2ClientTypes.All.write(value:to:))
        try writer["ExcludedCookies"].writeList(value.excludedCookies, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludedCookies"].writeList(value.includedCookies, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CookieMatchPattern {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CookieMatchPattern()
        value.all = try reader["All"].readIfPresent(with: WAFV2ClientTypes.All.read(from:))
        value.includedCookies = try reader["IncludedCookies"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludedCookies = try reader["ExcludedCookies"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.All {

    static func write(value: WAFV2ClientTypes.All?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.All {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.All()
    }
}

extension WAFV2ClientTypes.Headers {

    static func write(value: WAFV2ClientTypes.Headers?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MatchPattern"].write(value.matchPattern, with: WAFV2ClientTypes.HeaderMatchPattern.write(value:to:))
        try writer["MatchScope"].write(value.matchScope)
        try writer["OversizeHandling"].write(value.oversizeHandling)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Headers {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Headers()
        value.matchPattern = try reader["MatchPattern"].readIfPresent(with: WAFV2ClientTypes.HeaderMatchPattern.read(from:))
        value.matchScope = try reader["MatchScope"].readIfPresent() ?? .sdkUnknown("")
        value.oversizeHandling = try reader["OversizeHandling"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.HeaderMatchPattern {

    static func write(value: WAFV2ClientTypes.HeaderMatchPattern?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["All"].write(value.all, with: WAFV2ClientTypes.All.write(value:to:))
        try writer["ExcludedHeaders"].writeList(value.excludedHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IncludedHeaders"].writeList(value.includedHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.HeaderMatchPattern {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.HeaderMatchPattern()
        value.all = try reader["All"].readIfPresent(with: WAFV2ClientTypes.All.read(from:))
        value.includedHeaders = try reader["IncludedHeaders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludedHeaders = try reader["ExcludedHeaders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.JsonBody {

    static func write(value: WAFV2ClientTypes.JsonBody?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InvalidFallbackBehavior"].write(value.invalidFallbackBehavior)
        try writer["MatchPattern"].write(value.matchPattern, with: WAFV2ClientTypes.JsonMatchPattern.write(value:to:))
        try writer["MatchScope"].write(value.matchScope)
        try writer["OversizeHandling"].write(value.oversizeHandling)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.JsonBody {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.JsonBody()
        value.matchPattern = try reader["MatchPattern"].readIfPresent(with: WAFV2ClientTypes.JsonMatchPattern.read(from:))
        value.matchScope = try reader["MatchScope"].readIfPresent() ?? .sdkUnknown("")
        value.invalidFallbackBehavior = try reader["InvalidFallbackBehavior"].readIfPresent()
        value.oversizeHandling = try reader["OversizeHandling"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.JsonMatchPattern {

    static func write(value: WAFV2ClientTypes.JsonMatchPattern?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["All"].write(value.all, with: WAFV2ClientTypes.All.write(value:to:))
        try writer["IncludedPaths"].writeList(value.includedPaths, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.JsonMatchPattern {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.JsonMatchPattern()
        value.all = try reader["All"].readIfPresent(with: WAFV2ClientTypes.All.read(from:))
        value.includedPaths = try reader["IncludedPaths"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.Method {

    static func write(value: WAFV2ClientTypes.Method?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Method {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.Method()
    }
}

extension WAFV2ClientTypes.Body {

    static func write(value: WAFV2ClientTypes.Body?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OversizeHandling"].write(value.oversizeHandling)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Body {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Body()
        value.oversizeHandling = try reader["OversizeHandling"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.QueryString {

    static func write(value: WAFV2ClientTypes.QueryString?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.QueryString {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.QueryString()
    }
}

extension WAFV2ClientTypes.UriPath {

    static func write(value: WAFV2ClientTypes.UriPath?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.UriPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.UriPath()
    }
}

extension WAFV2ClientTypes.AllQueryArguments {

    static func write(value: WAFV2ClientTypes.AllQueryArguments?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AllQueryArguments {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.AllQueryArguments()
    }
}

extension WAFV2ClientTypes.SingleQueryArgument {

    static func write(value: WAFV2ClientTypes.SingleQueryArgument?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.SingleQueryArgument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.SingleQueryArgument()
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.SingleHeader {

    static func write(value: WAFV2ClientTypes.SingleHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.SingleHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.SingleHeader()
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleSet()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.publishedVersions = try reader["PublishedVersions"].readMapIfPresent(valueReadingClosure: WAFV2ClientTypes.ManagedRuleSetVersion.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.recommendedVersion = try reader["RecommendedVersion"].readIfPresent()
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleSetVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleSetVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleSetVersion()
        value.associatedRuleGroupArn = try reader["AssociatedRuleGroupArn"].readIfPresent()
        value.capacity = try reader["Capacity"].readIfPresent()
        value.forecastedLifetime = try reader["ForecastedLifetime"].readIfPresent()
        value.publishTimestamp = try reader["PublishTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTimestamp = try reader["LastUpdateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expiryTimestamp = try reader["ExpiryTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension WAFV2ClientTypes.MobileSdkRelease {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.MobileSdkRelease {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.MobileSdkRelease()
        value.releaseVersion = try reader["ReleaseVersion"].readIfPresent()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.releaseNotes = try reader["ReleaseNotes"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.Tag {

    static func write(value: WAFV2ClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet()
        value.ipAddressVersion = try reader["IPAddressVersion"].readIfPresent()
        value.addresses = try reader["Addresses"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.RegexPatternSet {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RegexPatternSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RegexPatternSet()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.regularExpressionList = try reader["RegularExpressionList"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Regex.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.Regex {

    static func write(value: WAFV2ClientTypes.Regex?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RegexString"].write(value.regexString)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Regex {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Regex()
        value.regexString = try reader["RegexString"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.RuleGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleGroup()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.capacity = try reader["Capacity"].readIfPresent() ?? 0
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.visibilityConfig = try reader["VisibilityConfig"].readIfPresent(with: WAFV2ClientTypes.VisibilityConfig.read(from:))
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent()
        value.customResponseBodies = try reader["CustomResponseBodies"].readMapIfPresent(valueReadingClosure: WAFV2ClientTypes.CustomResponseBody.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.availableLabels = try reader["AvailableLabels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.LabelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.consumedLabels = try reader["ConsumedLabels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.LabelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.CustomResponseBody {

    static func write(value: WAFV2ClientTypes.CustomResponseBody?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["ContentType"].write(value.contentType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CustomResponseBody {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CustomResponseBody()
        value.contentType = try reader["ContentType"].readIfPresent() ?? .sdkUnknown("")
        value.content = try reader["Content"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.VisibilityConfig {

    static func write(value: WAFV2ClientTypes.VisibilityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CloudWatchMetricsEnabled"].write(value.cloudWatchMetricsEnabled)
        try writer["MetricName"].write(value.metricName)
        try writer["SampledRequestsEnabled"].write(value.sampledRequestsEnabled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.VisibilityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.VisibilityConfig()
        value.sampledRequestsEnabled = try reader["SampledRequestsEnabled"].readIfPresent() ?? false
        value.cloudWatchMetricsEnabled = try reader["CloudWatchMetricsEnabled"].readIfPresent() ?? false
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.Rule {

    static func write(value: WAFV2ClientTypes.Rule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Action"].write(value.action, with: WAFV2ClientTypes.RuleAction.write(value:to:))
        try writer["CaptchaConfig"].write(value.captchaConfig, with: WAFV2ClientTypes.CaptchaConfig.write(value:to:))
        try writer["ChallengeConfig"].write(value.challengeConfig, with: WAFV2ClientTypes.ChallengeConfig.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["OverrideAction"].write(value.overrideAction, with: WAFV2ClientTypes.OverrideAction.write(value:to:))
        try writer["Priority"].write(value.priority)
        try writer["RuleLabels"].writeList(value.ruleLabels, memberWritingClosure: WAFV2ClientTypes.Label.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Statement"].write(value.statement, with: WAFV2ClientTypes.Statement.write(value:to:))
        try writer["VisibilityConfig"].write(value.visibilityConfig, with: WAFV2ClientTypes.VisibilityConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Rule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Rule()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        value.statement = try reader["Statement"].readIfPresent(with: WAFV2ClientTypes.Statement.read(from:))
        value.action = try reader["Action"].readIfPresent(with: WAFV2ClientTypes.RuleAction.read(from:))
        value.overrideAction = try reader["OverrideAction"].readIfPresent(with: WAFV2ClientTypes.OverrideAction.read(from:))
        value.ruleLabels = try reader["RuleLabels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Label.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.visibilityConfig = try reader["VisibilityConfig"].readIfPresent(with: WAFV2ClientTypes.VisibilityConfig.read(from:))
        value.captchaConfig = try reader["CaptchaConfig"].readIfPresent(with: WAFV2ClientTypes.CaptchaConfig.read(from:))
        value.challengeConfig = try reader["ChallengeConfig"].readIfPresent(with: WAFV2ClientTypes.ChallengeConfig.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.ChallengeConfig {

    static func write(value: WAFV2ClientTypes.ChallengeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImmunityTimeProperty"].write(value.immunityTimeProperty, with: WAFV2ClientTypes.ImmunityTimeProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ChallengeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ChallengeConfig()
        value.immunityTimeProperty = try reader["ImmunityTimeProperty"].readIfPresent(with: WAFV2ClientTypes.ImmunityTimeProperty.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.ImmunityTimeProperty {

    static func write(value: WAFV2ClientTypes.ImmunityTimeProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImmunityTime"].write(value.immunityTime)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ImmunityTimeProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ImmunityTimeProperty()
        value.immunityTime = try reader["ImmunityTime"].readIfPresent() ?? 0
        return value
    }
}

extension WAFV2ClientTypes.CaptchaConfig {

    static func write(value: WAFV2ClientTypes.CaptchaConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImmunityTimeProperty"].write(value.immunityTimeProperty, with: WAFV2ClientTypes.ImmunityTimeProperty.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CaptchaConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CaptchaConfig()
        value.immunityTimeProperty = try reader["ImmunityTimeProperty"].readIfPresent(with: WAFV2ClientTypes.ImmunityTimeProperty.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.Label {

    static func write(value: WAFV2ClientTypes.Label?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Label {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Label()
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.OverrideAction {

    static func write(value: WAFV2ClientTypes.OverrideAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Count"].write(value.count, with: WAFV2ClientTypes.CountAction.write(value:to:))
        try writer["None"].write(value.`none`, with: WAFV2ClientTypes.NoneAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.OverrideAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.OverrideAction()
        value.count = try reader["Count"].readIfPresent(with: WAFV2ClientTypes.CountAction.read(from:))
        value.`none` = try reader["None"].readIfPresent(with: WAFV2ClientTypes.NoneAction.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.NoneAction {

    static func write(value: WAFV2ClientTypes.NoneAction?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.NoneAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.NoneAction()
    }
}

extension WAFV2ClientTypes.Statement {

    static func write(value: WAFV2ClientTypes.Statement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AndStatement"].write(value.andStatement, with: WAFV2ClientTypes.AndStatement.write(value:to:))
        try writer["ByteMatchStatement"].write(value.byteMatchStatement, with: WAFV2ClientTypes.ByteMatchStatement.write(value:to:))
        try writer["GeoMatchStatement"].write(value.geoMatchStatement, with: WAFV2ClientTypes.GeoMatchStatement.write(value:to:))
        try writer["IPSetReferenceStatement"].write(value.ipSetReferenceStatement, with: WAFV2ClientTypes.IPSetReferenceStatement.write(value:to:))
        try writer["LabelMatchStatement"].write(value.labelMatchStatement, with: WAFV2ClientTypes.LabelMatchStatement.write(value:to:))
        try writer["ManagedRuleGroupStatement"].write(value.managedRuleGroupStatement, with: WAFV2ClientTypes.ManagedRuleGroupStatement.write(value:to:))
        try writer["NotStatement"].write(value.notStatement, with: WAFV2ClientTypes.NotStatement.write(value:to:))
        try writer["OrStatement"].write(value.orStatement, with: WAFV2ClientTypes.OrStatement.write(value:to:))
        try writer["RateBasedStatement"].write(value.rateBasedStatement, with: WAFV2ClientTypes.RateBasedStatement.write(value:to:))
        try writer["RegexMatchStatement"].write(value.regexMatchStatement, with: WAFV2ClientTypes.RegexMatchStatement.write(value:to:))
        try writer["RegexPatternSetReferenceStatement"].write(value.regexPatternSetReferenceStatement, with: WAFV2ClientTypes.RegexPatternSetReferenceStatement.write(value:to:))
        try writer["RuleGroupReferenceStatement"].write(value.ruleGroupReferenceStatement, with: WAFV2ClientTypes.RuleGroupReferenceStatement.write(value:to:))
        try writer["SizeConstraintStatement"].write(value.sizeConstraintStatement, with: WAFV2ClientTypes.SizeConstraintStatement.write(value:to:))
        try writer["SqliMatchStatement"].write(value.sqliMatchStatement, with: WAFV2ClientTypes.SqliMatchStatement.write(value:to:))
        try writer["XssMatchStatement"].write(value.xssMatchStatement, with: WAFV2ClientTypes.XssMatchStatement.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.Statement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.Statement()
        value.byteMatchStatement = try reader["ByteMatchStatement"].readIfPresent(with: WAFV2ClientTypes.ByteMatchStatement.read(from:))
        value.sqliMatchStatement = try reader["SqliMatchStatement"].readIfPresent(with: WAFV2ClientTypes.SqliMatchStatement.read(from:))
        value.xssMatchStatement = try reader["XssMatchStatement"].readIfPresent(with: WAFV2ClientTypes.XssMatchStatement.read(from:))
        value.sizeConstraintStatement = try reader["SizeConstraintStatement"].readIfPresent(with: WAFV2ClientTypes.SizeConstraintStatement.read(from:))
        value.geoMatchStatement = try reader["GeoMatchStatement"].readIfPresent(with: WAFV2ClientTypes.GeoMatchStatement.read(from:))
        value.ruleGroupReferenceStatement = try reader["RuleGroupReferenceStatement"].readIfPresent(with: WAFV2ClientTypes.RuleGroupReferenceStatement.read(from:))
        value.ipSetReferenceStatement = try reader["IPSetReferenceStatement"].readIfPresent(with: WAFV2ClientTypes.IPSetReferenceStatement.read(from:))
        value.regexPatternSetReferenceStatement = try reader["RegexPatternSetReferenceStatement"].readIfPresent(with: WAFV2ClientTypes.RegexPatternSetReferenceStatement.read(from:))
        value.rateBasedStatement = try reader["RateBasedStatement"].readIfPresent(with: WAFV2ClientTypes.RateBasedStatement.read(from:))
        value.andStatement = try reader["AndStatement"].readIfPresent(with: WAFV2ClientTypes.AndStatement.read(from:))
        value.orStatement = try reader["OrStatement"].readIfPresent(with: WAFV2ClientTypes.OrStatement.read(from:))
        value.notStatement = try reader["NotStatement"].readIfPresent(with: WAFV2ClientTypes.NotStatement.read(from:))
        value.managedRuleGroupStatement = try reader["ManagedRuleGroupStatement"].readIfPresent(with: WAFV2ClientTypes.ManagedRuleGroupStatement.read(from:))
        value.labelMatchStatement = try reader["LabelMatchStatement"].readIfPresent(with: WAFV2ClientTypes.LabelMatchStatement.read(from:))
        value.regexMatchStatement = try reader["RegexMatchStatement"].readIfPresent(with: WAFV2ClientTypes.RegexMatchStatement.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.RegexMatchStatement {

    static func write(value: WAFV2ClientTypes.RegexMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["RegexString"].write(value.regexString)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RegexMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RegexMatchStatement()
        value.regexString = try reader["RegexString"].readIfPresent() ?? ""
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.TextTransformation {

    static func write(value: WAFV2ClientTypes.TextTransformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Priority"].write(value.priority)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.TextTransformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.TextTransformation()
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.LabelMatchStatement {

    static func write(value: WAFV2ClientTypes.LabelMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Scope"].write(value.scope)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.LabelMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.LabelMatchStatement()
        value.scope = try reader["Scope"].readIfPresent() ?? .sdkUnknown("")
        value.key = try reader["Key"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleGroupStatement {

    static func write(value: WAFV2ClientTypes.ManagedRuleGroupStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExcludedRules"].writeList(value.excludedRules, memberWritingClosure: WAFV2ClientTypes.ExcludedRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ManagedRuleGroupConfigs"].writeList(value.managedRuleGroupConfigs, memberWritingClosure: WAFV2ClientTypes.ManagedRuleGroupConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["RuleActionOverrides"].writeList(value.ruleActionOverrides, memberWritingClosure: WAFV2ClientTypes.RuleActionOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ScopeDownStatement"].write(value.scopeDownStatement, with: WAFV2ClientTypes.Statement.write(value:to:))
        try writer["VendorName"].write(value.vendorName)
        try writer["Version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleGroupStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleGroupStatement()
        value.vendorName = try reader["VendorName"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.version = try reader["Version"].readIfPresent()
        value.excludedRules = try reader["ExcludedRules"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ExcludedRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.scopeDownStatement = try reader["ScopeDownStatement"].readIfPresent(with: WAFV2ClientTypes.Statement.read(from:))
        value.managedRuleGroupConfigs = try reader["ManagedRuleGroupConfigs"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ManagedRuleGroupConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ruleActionOverrides = try reader["RuleActionOverrides"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RuleActionOverride.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.RuleActionOverride {

    static func write(value: WAFV2ClientTypes.RuleActionOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionToUse"].write(value.actionToUse, with: WAFV2ClientTypes.RuleAction.write(value:to:))
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleActionOverride {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleActionOverride()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.actionToUse = try reader["ActionToUse"].readIfPresent(with: WAFV2ClientTypes.RuleAction.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleGroupConfig {

    static func write(value: WAFV2ClientTypes.ManagedRuleGroupConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AWSManagedRulesACFPRuleSet"].write(value.awsManagedRulesACFPRuleSet, with: WAFV2ClientTypes.AWSManagedRulesACFPRuleSet.write(value:to:))
        try writer["AWSManagedRulesATPRuleSet"].write(value.awsManagedRulesATPRuleSet, with: WAFV2ClientTypes.AWSManagedRulesATPRuleSet.write(value:to:))
        try writer["AWSManagedRulesBotControlRuleSet"].write(value.awsManagedRulesBotControlRuleSet, with: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet.write(value:to:))
        try writer["LoginPath"].write(value.loginPath)
        try writer["PasswordField"].write(value.passwordField, with: WAFV2ClientTypes.PasswordField.write(value:to:))
        try writer["PayloadType"].write(value.payloadType)
        try writer["UsernameField"].write(value.usernameField, with: WAFV2ClientTypes.UsernameField.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleGroupConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleGroupConfig()
        value.loginPath = try reader["LoginPath"].readIfPresent()
        value.payloadType = try reader["PayloadType"].readIfPresent()
        value.usernameField = try reader["UsernameField"].readIfPresent(with: WAFV2ClientTypes.UsernameField.read(from:))
        value.passwordField = try reader["PasswordField"].readIfPresent(with: WAFV2ClientTypes.PasswordField.read(from:))
        value.awsManagedRulesBotControlRuleSet = try reader["AWSManagedRulesBotControlRuleSet"].readIfPresent(with: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet.read(from:))
        value.awsManagedRulesATPRuleSet = try reader["AWSManagedRulesATPRuleSet"].readIfPresent(with: WAFV2ClientTypes.AWSManagedRulesATPRuleSet.read(from:))
        value.awsManagedRulesACFPRuleSet = try reader["AWSManagedRulesACFPRuleSet"].readIfPresent(with: WAFV2ClientTypes.AWSManagedRulesACFPRuleSet.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.AWSManagedRulesACFPRuleSet {

    static func write(value: WAFV2ClientTypes.AWSManagedRulesACFPRuleSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationPath"].write(value.creationPath)
        try writer["EnableRegexInPath"].write(value.enableRegexInPath)
        try writer["RegistrationPagePath"].write(value.registrationPagePath)
        try writer["RequestInspection"].write(value.requestInspection, with: WAFV2ClientTypes.RequestInspectionACFP.write(value:to:))
        try writer["ResponseInspection"].write(value.responseInspection, with: WAFV2ClientTypes.ResponseInspection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AWSManagedRulesACFPRuleSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AWSManagedRulesACFPRuleSet()
        value.creationPath = try reader["CreationPath"].readIfPresent() ?? ""
        value.registrationPagePath = try reader["RegistrationPagePath"].readIfPresent() ?? ""
        value.requestInspection = try reader["RequestInspection"].readIfPresent(with: WAFV2ClientTypes.RequestInspectionACFP.read(from:))
        value.responseInspection = try reader["ResponseInspection"].readIfPresent(with: WAFV2ClientTypes.ResponseInspection.read(from:))
        value.enableRegexInPath = try reader["EnableRegexInPath"].readIfPresent() ?? false
        return value
    }
}

extension WAFV2ClientTypes.ResponseInspection {

    static func write(value: WAFV2ClientTypes.ResponseInspection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BodyContains"].write(value.bodyContains, with: WAFV2ClientTypes.ResponseInspectionBodyContains.write(value:to:))
        try writer["Header"].write(value.header, with: WAFV2ClientTypes.ResponseInspectionHeader.write(value:to:))
        try writer["Json"].write(value.json, with: WAFV2ClientTypes.ResponseInspectionJson.write(value:to:))
        try writer["StatusCode"].write(value.statusCode, with: WAFV2ClientTypes.ResponseInspectionStatusCode.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ResponseInspection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ResponseInspection()
        value.statusCode = try reader["StatusCode"].readIfPresent(with: WAFV2ClientTypes.ResponseInspectionStatusCode.read(from:))
        value.header = try reader["Header"].readIfPresent(with: WAFV2ClientTypes.ResponseInspectionHeader.read(from:))
        value.bodyContains = try reader["BodyContains"].readIfPresent(with: WAFV2ClientTypes.ResponseInspectionBodyContains.read(from:))
        value.json = try reader["Json"].readIfPresent(with: WAFV2ClientTypes.ResponseInspectionJson.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.ResponseInspectionJson {

    static func write(value: WAFV2ClientTypes.ResponseInspectionJson?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureValues"].writeList(value.failureValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Identifier"].write(value.identifier)
        try writer["SuccessValues"].writeList(value.successValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ResponseInspectionJson {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ResponseInspectionJson()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        value.successValues = try reader["SuccessValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.failureValues = try reader["FailureValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.ResponseInspectionBodyContains {

    static func write(value: WAFV2ClientTypes.ResponseInspectionBodyContains?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureStrings"].writeList(value.failureStrings, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SuccessStrings"].writeList(value.successStrings, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ResponseInspectionBodyContains {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ResponseInspectionBodyContains()
        value.successStrings = try reader["SuccessStrings"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.failureStrings = try reader["FailureStrings"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.ResponseInspectionHeader {

    static func write(value: WAFV2ClientTypes.ResponseInspectionHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureValues"].writeList(value.failureValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["SuccessValues"].writeList(value.successValues, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ResponseInspectionHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ResponseInspectionHeader()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.successValues = try reader["SuccessValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.failureValues = try reader["FailureValues"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.ResponseInspectionStatusCode {

    static func write(value: WAFV2ClientTypes.ResponseInspectionStatusCode?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureCodes"].writeList(value.failureCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SuccessCodes"].writeList(value.successCodes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ResponseInspectionStatusCode {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ResponseInspectionStatusCode()
        value.successCodes = try reader["SuccessCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.failureCodes = try reader["FailureCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RequestInspectionACFP {

    static func write(value: WAFV2ClientTypes.RequestInspectionACFP?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AddressFields"].writeList(value.addressFields, memberWritingClosure: WAFV2ClientTypes.AddressField.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EmailField"].write(value.emailField, with: WAFV2ClientTypes.EmailField.write(value:to:))
        try writer["PasswordField"].write(value.passwordField, with: WAFV2ClientTypes.PasswordField.write(value:to:))
        try writer["PayloadType"].write(value.payloadType)
        try writer["PhoneNumberFields"].writeList(value.phoneNumberFields, memberWritingClosure: WAFV2ClientTypes.PhoneNumberField.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UsernameField"].write(value.usernameField, with: WAFV2ClientTypes.UsernameField.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RequestInspectionACFP {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RequestInspectionACFP()
        value.payloadType = try reader["PayloadType"].readIfPresent() ?? .sdkUnknown("")
        value.usernameField = try reader["UsernameField"].readIfPresent(with: WAFV2ClientTypes.UsernameField.read(from:))
        value.passwordField = try reader["PasswordField"].readIfPresent(with: WAFV2ClientTypes.PasswordField.read(from:))
        value.emailField = try reader["EmailField"].readIfPresent(with: WAFV2ClientTypes.EmailField.read(from:))
        value.phoneNumberFields = try reader["PhoneNumberFields"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.PhoneNumberField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.addressFields = try reader["AddressFields"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.AddressField.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.AddressField {

    static func write(value: WAFV2ClientTypes.AddressField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AddressField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AddressField()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.PhoneNumberField {

    static func write(value: WAFV2ClientTypes.PhoneNumberField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.PhoneNumberField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.PhoneNumberField()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.EmailField {

    static func write(value: WAFV2ClientTypes.EmailField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.EmailField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.EmailField()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.PasswordField {

    static func write(value: WAFV2ClientTypes.PasswordField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.PasswordField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.PasswordField()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.UsernameField {

    static func write(value: WAFV2ClientTypes.UsernameField?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.UsernameField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.UsernameField()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.AWSManagedRulesATPRuleSet {

    static func write(value: WAFV2ClientTypes.AWSManagedRulesATPRuleSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableRegexInPath"].write(value.enableRegexInPath)
        try writer["LoginPath"].write(value.loginPath)
        try writer["RequestInspection"].write(value.requestInspection, with: WAFV2ClientTypes.RequestInspection.write(value:to:))
        try writer["ResponseInspection"].write(value.responseInspection, with: WAFV2ClientTypes.ResponseInspection.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AWSManagedRulesATPRuleSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AWSManagedRulesATPRuleSet()
        value.loginPath = try reader["LoginPath"].readIfPresent() ?? ""
        value.requestInspection = try reader["RequestInspection"].readIfPresent(with: WAFV2ClientTypes.RequestInspection.read(from:))
        value.responseInspection = try reader["ResponseInspection"].readIfPresent(with: WAFV2ClientTypes.ResponseInspection.read(from:))
        value.enableRegexInPath = try reader["EnableRegexInPath"].readIfPresent() ?? false
        return value
    }
}

extension WAFV2ClientTypes.RequestInspection {

    static func write(value: WAFV2ClientTypes.RequestInspection?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PasswordField"].write(value.passwordField, with: WAFV2ClientTypes.PasswordField.write(value:to:))
        try writer["PayloadType"].write(value.payloadType)
        try writer["UsernameField"].write(value.usernameField, with: WAFV2ClientTypes.UsernameField.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RequestInspection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RequestInspection()
        value.payloadType = try reader["PayloadType"].readIfPresent() ?? .sdkUnknown("")
        value.usernameField = try reader["UsernameField"].readIfPresent(with: WAFV2ClientTypes.UsernameField.read(from:))
        value.passwordField = try reader["PasswordField"].readIfPresent(with: WAFV2ClientTypes.PasswordField.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet {

    static func write(value: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableMachineLearning"].write(value.enableMachineLearning)
        try writer["InspectionLevel"].write(value.inspectionLevel)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet()
        value.inspectionLevel = try reader["InspectionLevel"].readIfPresent() ?? .sdkUnknown("")
        value.enableMachineLearning = try reader["EnableMachineLearning"].readIfPresent() ?? true
        return value
    }
}

extension WAFV2ClientTypes.ExcludedRule {

    static func write(value: WAFV2ClientTypes.ExcludedRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ExcludedRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ExcludedRule()
        value.name = try reader["Name"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.NotStatement {

    static func write(value: WAFV2ClientTypes.NotStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Statement"].write(value.statement, with: WAFV2ClientTypes.Statement.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.NotStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.NotStatement()
        value.statement = try reader["Statement"].readIfPresent(with: WAFV2ClientTypes.Statement.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.OrStatement {

    static func write(value: WAFV2ClientTypes.OrStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Statements"].writeList(value.statements, memberWritingClosure: WAFV2ClientTypes.Statement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.OrStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.OrStatement()
        value.statements = try reader["Statements"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Statement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.AndStatement {

    static func write(value: WAFV2ClientTypes.AndStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Statements"].writeList(value.statements, memberWritingClosure: WAFV2ClientTypes.Statement.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AndStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AndStatement()
        value.statements = try reader["Statements"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Statement.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RateBasedStatement {

    static func write(value: WAFV2ClientTypes.RateBasedStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AggregateKeyType"].write(value.aggregateKeyType)
        try writer["CustomKeys"].writeList(value.customKeys, memberWritingClosure: WAFV2ClientTypes.RateBasedStatementCustomKey.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EvaluationWindowSec"].write(value.evaluationWindowSec)
        try writer["ForwardedIPConfig"].write(value.forwardedIPConfig, with: WAFV2ClientTypes.ForwardedIPConfig.write(value:to:))
        try writer["Limit"].write(value.limit)
        try writer["ScopeDownStatement"].write(value.scopeDownStatement, with: WAFV2ClientTypes.Statement.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateBasedStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateBasedStatement()
        value.limit = try reader["Limit"].readIfPresent() ?? 0
        value.evaluationWindowSec = try reader["EvaluationWindowSec"].readIfPresent() ?? 0
        value.aggregateKeyType = try reader["AggregateKeyType"].readIfPresent() ?? .sdkUnknown("")
        value.scopeDownStatement = try reader["ScopeDownStatement"].readIfPresent(with: WAFV2ClientTypes.Statement.read(from:))
        value.forwardedIPConfig = try reader["ForwardedIPConfig"].readIfPresent(with: WAFV2ClientTypes.ForwardedIPConfig.read(from:))
        value.customKeys = try reader["CustomKeys"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RateBasedStatementCustomKey.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.RateBasedStatementCustomKey {

    static func write(value: WAFV2ClientTypes.RateBasedStatementCustomKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Cookie"].write(value.cookie, with: WAFV2ClientTypes.RateLimitCookie.write(value:to:))
        try writer["ForwardedIP"].write(value.forwardedIP, with: WAFV2ClientTypes.RateLimitForwardedIP.write(value:to:))
        try writer["HTTPMethod"].write(value.httpMethod, with: WAFV2ClientTypes.RateLimitHTTPMethod.write(value:to:))
        try writer["Header"].write(value.header, with: WAFV2ClientTypes.RateLimitHeader.write(value:to:))
        try writer["IP"].write(value.ip, with: WAFV2ClientTypes.RateLimitIP.write(value:to:))
        try writer["LabelNamespace"].write(value.labelNamespace, with: WAFV2ClientTypes.RateLimitLabelNamespace.write(value:to:))
        try writer["QueryArgument"].write(value.queryArgument, with: WAFV2ClientTypes.RateLimitQueryArgument.write(value:to:))
        try writer["QueryString"].write(value.queryString, with: WAFV2ClientTypes.RateLimitQueryString.write(value:to:))
        try writer["UriPath"].write(value.uriPath, with: WAFV2ClientTypes.RateLimitUriPath.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateBasedStatementCustomKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateBasedStatementCustomKey()
        value.header = try reader["Header"].readIfPresent(with: WAFV2ClientTypes.RateLimitHeader.read(from:))
        value.cookie = try reader["Cookie"].readIfPresent(with: WAFV2ClientTypes.RateLimitCookie.read(from:))
        value.queryArgument = try reader["QueryArgument"].readIfPresent(with: WAFV2ClientTypes.RateLimitQueryArgument.read(from:))
        value.queryString = try reader["QueryString"].readIfPresent(with: WAFV2ClientTypes.RateLimitQueryString.read(from:))
        value.httpMethod = try reader["HTTPMethod"].readIfPresent(with: WAFV2ClientTypes.RateLimitHTTPMethod.read(from:))
        value.forwardedIP = try reader["ForwardedIP"].readIfPresent(with: WAFV2ClientTypes.RateLimitForwardedIP.read(from:))
        value.ip = try reader["IP"].readIfPresent(with: WAFV2ClientTypes.RateLimitIP.read(from:))
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent(with: WAFV2ClientTypes.RateLimitLabelNamespace.read(from:))
        value.uriPath = try reader["UriPath"].readIfPresent(with: WAFV2ClientTypes.RateLimitUriPath.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.RateLimitUriPath {

    static func write(value: WAFV2ClientTypes.RateLimitUriPath?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitUriPath {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitUriPath()
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RateLimitLabelNamespace {

    static func write(value: WAFV2ClientTypes.RateLimitLabelNamespace?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitLabelNamespace {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitLabelNamespace()
        value.namespace = try reader["Namespace"].readIfPresent() ?? ""
        return value
    }
}

extension WAFV2ClientTypes.RateLimitIP {

    static func write(value: WAFV2ClientTypes.RateLimitIP?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitIP {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.RateLimitIP()
    }
}

extension WAFV2ClientTypes.RateLimitForwardedIP {

    static func write(value: WAFV2ClientTypes.RateLimitForwardedIP?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitForwardedIP {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.RateLimitForwardedIP()
    }
}

extension WAFV2ClientTypes.RateLimitHTTPMethod {

    static func write(value: WAFV2ClientTypes.RateLimitHTTPMethod?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitHTTPMethod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return WAFV2ClientTypes.RateLimitHTTPMethod()
    }
}

extension WAFV2ClientTypes.RateLimitQueryString {

    static func write(value: WAFV2ClientTypes.RateLimitQueryString?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitQueryString {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitQueryString()
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RateLimitQueryArgument {

    static func write(value: WAFV2ClientTypes.RateLimitQueryArgument?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitQueryArgument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitQueryArgument()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RateLimitCookie {

    static func write(value: WAFV2ClientTypes.RateLimitCookie?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitCookie {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitCookie()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.RateLimitHeader {

    static func write(value: WAFV2ClientTypes.RateLimitHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RateLimitHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RateLimitHeader()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.ForwardedIPConfig {

    static func write(value: WAFV2ClientTypes.ForwardedIPConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FallbackBehavior"].write(value.fallbackBehavior)
        try writer["HeaderName"].write(value.headerName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ForwardedIPConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ForwardedIPConfig()
        value.headerName = try reader["HeaderName"].readIfPresent() ?? ""
        value.fallbackBehavior = try reader["FallbackBehavior"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.RegexPatternSetReferenceStatement {

    static func write(value: WAFV2ClientTypes.RegexPatternSetReferenceStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RegexPatternSetReferenceStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RegexPatternSetReferenceStatement()
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.IPSetReferenceStatement {

    static func write(value: WAFV2ClientTypes.IPSetReferenceStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["IPSetForwardedIPConfig"].write(value.ipSetForwardedIPConfig, with: WAFV2ClientTypes.IPSetForwardedIPConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.IPSetReferenceStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.IPSetReferenceStatement()
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.ipSetForwardedIPConfig = try reader["IPSetForwardedIPConfig"].readIfPresent(with: WAFV2ClientTypes.IPSetForwardedIPConfig.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.IPSetForwardedIPConfig {

    static func write(value: WAFV2ClientTypes.IPSetForwardedIPConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FallbackBehavior"].write(value.fallbackBehavior)
        try writer["HeaderName"].write(value.headerName)
        try writer["Position"].write(value.position)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.IPSetForwardedIPConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.IPSetForwardedIPConfig()
        value.headerName = try reader["HeaderName"].readIfPresent() ?? ""
        value.fallbackBehavior = try reader["FallbackBehavior"].readIfPresent() ?? .sdkUnknown("")
        value.position = try reader["Position"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.RuleGroupReferenceStatement {

    static func write(value: WAFV2ClientTypes.RuleGroupReferenceStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ARN"].write(value.arn)
        try writer["ExcludedRules"].writeList(value.excludedRules, memberWritingClosure: WAFV2ClientTypes.ExcludedRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RuleActionOverrides"].writeList(value.ruleActionOverrides, memberWritingClosure: WAFV2ClientTypes.RuleActionOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RuleGroupReferenceStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RuleGroupReferenceStatement()
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.excludedRules = try reader["ExcludedRules"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.ExcludedRule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ruleActionOverrides = try reader["RuleActionOverrides"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.RuleActionOverride.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.GeoMatchStatement {

    static func write(value: WAFV2ClientTypes.GeoMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CountryCodes"].writeList(value.countryCodes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<WAFV2ClientTypes.CountryCode>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ForwardedIPConfig"].write(value.forwardedIPConfig, with: WAFV2ClientTypes.ForwardedIPConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.GeoMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.GeoMatchStatement()
        value.countryCodes = try reader["CountryCodes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<WAFV2ClientTypes.CountryCode>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.forwardedIPConfig = try reader["ForwardedIPConfig"].readIfPresent(with: WAFV2ClientTypes.ForwardedIPConfig.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.SizeConstraintStatement {

    static func write(value: WAFV2ClientTypes.SizeConstraintStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["Size"].write(value.size)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.SizeConstraintStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.SizeConstraintStatement()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent() ?? .sdkUnknown("")
        value.size = try reader["Size"].readIfPresent() ?? 0
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.XssMatchStatement {

    static func write(value: WAFV2ClientTypes.XssMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.XssMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.XssMatchStatement()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension WAFV2ClientTypes.SqliMatchStatement {

    static func write(value: WAFV2ClientTypes.SqliMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["SensitivityLevel"].write(value.sensitivityLevel)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.SqliMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.SqliMatchStatement()
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.sensitivityLevel = try reader["SensitivityLevel"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ByteMatchStatement {

    static func write(value: WAFV2ClientTypes.ByteMatchStatement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FieldToMatch"].write(value.fieldToMatch, with: WAFV2ClientTypes.FieldToMatch.write(value:to:))
        try writer["PositionalConstraint"].write(value.positionalConstraint)
        try writer["SearchString"].write(value.searchString)
        try writer["TextTransformations"].writeList(value.textTransformations, memberWritingClosure: WAFV2ClientTypes.TextTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ByteMatchStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ByteMatchStatement()
        value.searchString = try reader["SearchString"].readIfPresent() ?? Foundation.Data("".utf8)
        value.fieldToMatch = try reader["FieldToMatch"].readIfPresent(with: WAFV2ClientTypes.FieldToMatch.read(from:))
        value.textTransformations = try reader["TextTransformations"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.TextTransformation.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.positionalConstraint = try reader["PositionalConstraint"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.SampledHTTPRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.SampledHTTPRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.SampledHTTPRequest()
        value.request = try reader["Request"].readIfPresent(with: WAFV2ClientTypes.HTTPRequest.read(from:))
        value.weight = try reader["Weight"].readIfPresent() ?? 0
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.action = try reader["Action"].readIfPresent()
        value.ruleNameWithinRuleGroup = try reader["RuleNameWithinRuleGroup"].readIfPresent()
        value.requestHeadersInserted = try reader["RequestHeadersInserted"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.HTTPHeader.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.responseCodeSent = try reader["ResponseCodeSent"].readIfPresent()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Label.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.captchaResponse = try reader["CaptchaResponse"].readIfPresent(with: WAFV2ClientTypes.CaptchaResponse.read(from:))
        value.challengeResponse = try reader["ChallengeResponse"].readIfPresent(with: WAFV2ClientTypes.ChallengeResponse.read(from:))
        value.overriddenAction = try reader["OverriddenAction"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ChallengeResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ChallengeResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ChallengeResponse()
        value.responseCode = try reader["ResponseCode"].readIfPresent()
        value.solveTimestamp = try reader["SolveTimestamp"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.CaptchaResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.CaptchaResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.CaptchaResponse()
        value.responseCode = try reader["ResponseCode"].readIfPresent()
        value.solveTimestamp = try reader["SolveTimestamp"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.HTTPHeader {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.HTTPHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.HTTPHeader()
        value.name = try reader["Name"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.HTTPRequest {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.HTTPRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.HTTPRequest()
        value.clientIP = try reader["ClientIP"].readIfPresent()
        value.country = try reader["Country"].readIfPresent()
        value.uri = try reader["URI"].readIfPresent()
        value.method = try reader["Method"].readIfPresent()
        value.httpVersion = try reader["HTTPVersion"].readIfPresent()
        value.headers = try reader["Headers"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.HTTPHeader.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.TimeWindow {

    static func write(value: WAFV2ClientTypes.TimeWindow?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.TimeWindow {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.TimeWindow()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension WAFV2ClientTypes.WebACL {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.WebACL {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.WebACL()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.arn = try reader["ARN"].readIfPresent() ?? ""
        value.defaultAction = try reader["DefaultAction"].readIfPresent(with: WAFV2ClientTypes.DefaultAction.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.rules = try reader["Rules"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Rule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.visibilityConfig = try reader["VisibilityConfig"].readIfPresent(with: WAFV2ClientTypes.VisibilityConfig.read(from:))
        value.capacity = try reader["Capacity"].readIfPresent() ?? 0
        value.preProcessFirewallManagerRuleGroups = try reader["PreProcessFirewallManagerRuleGroups"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.FirewallManagerRuleGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.postProcessFirewallManagerRuleGroups = try reader["PostProcessFirewallManagerRuleGroups"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.FirewallManagerRuleGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.managedByFirewallManager = try reader["ManagedByFirewallManager"].readIfPresent() ?? false
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent()
        value.customResponseBodies = try reader["CustomResponseBodies"].readMapIfPresent(valueReadingClosure: WAFV2ClientTypes.CustomResponseBody.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.captchaConfig = try reader["CaptchaConfig"].readIfPresent(with: WAFV2ClientTypes.CaptchaConfig.read(from:))
        value.challengeConfig = try reader["ChallengeConfig"].readIfPresent(with: WAFV2ClientTypes.ChallengeConfig.read(from:))
        value.tokenDomains = try reader["TokenDomains"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.associationConfig = try reader["AssociationConfig"].readIfPresent(with: WAFV2ClientTypes.AssociationConfig.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.AssociationConfig {

    static func write(value: WAFV2ClientTypes.AssociationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequestBody"].writeMap(value.requestBody, valueWritingClosure: WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.AssociationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.AssociationConfig()
        value.requestBody = try reader["RequestBody"].readMapIfPresent(valueReadingClosure: WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig {

    static func write(value: WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultSizeInspectionLimit"].write(value.defaultSizeInspectionLimit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.RequestBodyAssociatedResourceTypeConfig()
        value.defaultSizeInspectionLimit = try reader["DefaultSizeInspectionLimit"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension WAFV2ClientTypes.FirewallManagerRuleGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.FirewallManagerRuleGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.FirewallManagerRuleGroup()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.priority = try reader["Priority"].readIfPresent() ?? 0
        value.firewallManagerStatement = try reader["FirewallManagerStatement"].readIfPresent(with: WAFV2ClientTypes.FirewallManagerStatement.read(from:))
        value.overrideAction = try reader["OverrideAction"].readIfPresent(with: WAFV2ClientTypes.OverrideAction.read(from:))
        value.visibilityConfig = try reader["VisibilityConfig"].readIfPresent(with: WAFV2ClientTypes.VisibilityConfig.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.FirewallManagerStatement {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.FirewallManagerStatement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.FirewallManagerStatement()
        value.managedRuleGroupStatement = try reader["ManagedRuleGroupStatement"].readIfPresent(with: WAFV2ClientTypes.ManagedRuleGroupStatement.read(from:))
        value.ruleGroupReferenceStatement = try reader["RuleGroupReferenceStatement"].readIfPresent(with: WAFV2ClientTypes.RuleGroupReferenceStatement.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.DefaultAction {

    static func write(value: WAFV2ClientTypes.DefaultAction?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Allow"].write(value.allow, with: WAFV2ClientTypes.AllowAction.write(value:to:))
        try writer["Block"].write(value.block, with: WAFV2ClientTypes.BlockAction.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.DefaultAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.DefaultAction()
        value.block = try reader["Block"].readIfPresent(with: WAFV2ClientTypes.BlockAction.read(from:))
        value.allow = try reader["Allow"].readIfPresent(with: WAFV2ClientTypes.AllowAction.read(from:))
        return value
    }
}

extension WAFV2ClientTypes.APIKeySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.APIKeySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.APIKeySummary()
        value.tokenDomains = try reader["TokenDomains"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.apiKey = try reader["APIKey"].readIfPresent()
        value.creationTimestamp = try reader["CreationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.version = try reader["Version"].readIfPresent() ?? 0
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleGroupSummary()
        value.vendorName = try reader["VendorName"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.versioningSupported = try reader["VersioningSupported"].readIfPresent() ?? false
        value.description = try reader["Description"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleGroupVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleGroupVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleGroupVersion()
        value.name = try reader["Name"].readIfPresent()
        value.lastUpdateTimestamp = try reader["LastUpdateTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension WAFV2ClientTypes.ManagedRuleSetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ManagedRuleSetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ManagedRuleSetSummary()
        value.name = try reader["Name"].readIfPresent()
        value.id = try reader["Id"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.lockToken = try reader["LockToken"].readIfPresent()
        value.arn = try reader["ARN"].readIfPresent()
        value.labelNamespace = try reader["LabelNamespace"].readIfPresent()
        return value
    }
}

extension WAFV2ClientTypes.ReleaseSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.ReleaseSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.ReleaseSummary()
        value.releaseVersion = try reader["ReleaseVersion"].readIfPresent()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension WAFV2ClientTypes.TagInfoForResource {

    static func read(from reader: SmithyJSON.Reader) throws -> WAFV2ClientTypes.TagInfoForResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = WAFV2ClientTypes.TagInfoForResource()
        value.resourceARN = try reader["ResourceARN"].readIfPresent()
        value.tagList = try reader["TagList"].readListIfPresent(memberReadingClosure: WAFV2ClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension WAFV2ClientTypes.VersionToPublish {

    static func write(value: WAFV2ClientTypes.VersionToPublish?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociatedRuleGroupArn"].write(value.associatedRuleGroupArn)
        try writer["ForecastedLifetime"].write(value.forecastedLifetime)
    }
}

public enum WAFV2ClientTypes {}
