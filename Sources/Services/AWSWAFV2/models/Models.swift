// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension WAFV2ClientTypes.AWSManagedRulesATPRuleSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loginPath = "LoginPath"
        case requestInspection = "RequestInspection"
        case responseInspection = "ResponseInspection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loginPath = self.loginPath {
            try encodeContainer.encode(loginPath, forKey: .loginPath)
        }
        if let requestInspection = self.requestInspection {
            try encodeContainer.encode(requestInspection, forKey: .requestInspection)
        }
        if let responseInspection = self.responseInspection {
            try encodeContainer.encode(responseInspection, forKey: .responseInspection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loginPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loginPath)
        loginPath = loginPathDecoded
        let requestInspectionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RequestInspection.self, forKey: .requestInspection)
        requestInspection = requestInspectionDecoded
        let responseInspectionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseInspection.self, forKey: .responseInspection)
        responseInspection = responseInspectionDecoded
    }
}

extension WAFV2ClientTypes {
    /// Details for your use of the account takeover prevention managed rule group, AWSManagedRulesATPRuleSet. This configuration is used in ManagedRuleGroupConfig.
    public struct AWSManagedRulesATPRuleSet: Swift.Equatable {
        /// The path of the login endpoint for your application. For example, for the URL https://example.com/web/login, you would provide the path /web/login. The rule group inspects only HTTP POST requests to your specified login endpoint.
        /// This member is required.
        public var loginPath: Swift.String?
        /// The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage.
        public var requestInspection: WAFV2ClientTypes.RequestInspection?
        /// The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that submit too many failed login attempts in a short amount of time. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
        public var responseInspection: WAFV2ClientTypes.ResponseInspection?

        public init (
            loginPath: Swift.String? = nil,
            requestInspection: WAFV2ClientTypes.RequestInspection? = nil,
            responseInspection: WAFV2ClientTypes.ResponseInspection? = nil
        )
        {
            self.loginPath = loginPath
            self.requestInspection = requestInspection
            self.responseInspection = responseInspection
        }
    }

}

extension WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inspectionLevel = "InspectionLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inspectionLevel = self.inspectionLevel {
            try encodeContainer.encode(inspectionLevel.rawValue, forKey: .inspectionLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inspectionLevelDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.InspectionLevel.self, forKey: .inspectionLevel)
        inspectionLevel = inspectionLevelDecoded
    }
}

extension WAFV2ClientTypes {
    /// Details for your use of the Bot Control managed rule group, AWSManagedRulesBotControlRuleSet. This configuration is used in ManagedRuleGroupConfig.
    public struct AWSManagedRulesBotControlRuleSet: Swift.Equatable {
        /// The inspection level to use for the Bot Control rule group. The common level is the least expensive. The targeted level includes all common level rules and adds rules with more advanced inspection criteria. For details, see [WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html).
        /// This member is required.
        public var inspectionLevel: WAFV2ClientTypes.InspectionLevel?

        public init (
            inspectionLevel: WAFV2ClientTypes.InspectionLevel? = nil
        )
        {
            self.inspectionLevel = inspectionLevel
        }
    }

}

extension WAFV2ClientTypes.ActionCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ActionValue.self, forKey: .action)
        action = actionDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single action condition for a [Condition] in a logging filter.
    public struct ActionCondition: Swift.Equatable {
        /// The action setting that a log record must contain in order to meet the condition. This is the action that WAF applied to the web request. For rule groups, this is either the configured rule action setting, or if you've applied a rule action override to the rule, it's the override action. The value EXCLUDED_AS_COUNT matches on excluded rules and also on rules that have a rule action override of Count.
        /// This member is required.
        public var action: WAFV2ClientTypes.ActionValue?

        public init (
            action: WAFV2ClientTypes.ActionValue? = nil
        )
        {
            self.action = action
        }
    }

}

extension WAFV2ClientTypes {
    public enum ActionValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case block
        case captcha
        case challenge
        case count
        case excludedAsCount
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionValue] {
            return [
                .allow,
                .block,
                .captcha,
                .challenge,
                .count,
                .excludedAsCount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .block: return "BLOCK"
            case .captcha: return "CAPTCHA"
            case .challenge: return "CHALLENGE"
            case .count: return "COUNT"
            case .excludedAsCount: return "EXCLUDED_AS_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionValue(rawValue: rawValue) ?? ActionValue.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.All: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Inspect all of the elements that WAF has parsed and extracted from the web request component that you've identified in your [FieldToMatch] specifications. This is used only in the [FieldToMatch] specification for some web request component types. JSON specification: "All": {}
    public struct All: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.AllQueryArguments: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Inspect all query arguments of the web request. This is used only in the [FieldToMatch] specification for some web request component types. JSON specification: "AllQueryArguments": {}
    public struct AllQueryArguments: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.AllowAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = self.customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should allow the request and optionally defines additional custom handling for the request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct AllowAction: Swift.Equatable {
        /// Defines custom handling for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes.AndStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for statement0 in statements {
                try statementsContainer.encode(statement0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Statement?].self, forKey: .statements)
        var statementsDecoded0:[WAFV2ClientTypes.Statement]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [WAFV2ClientTypes.Statement]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A logical rule statement used to combine other rule statements with AND logic. You provide more than one [Statement] within the AndStatement.
    public struct AndStatement: Swift.Equatable {
        /// The statements to combine with AND logic. You can use any statements that can be nested.
        /// This member is required.
        public var statements: [WAFV2ClientTypes.Statement]?

        public init (
            statements: [WAFV2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

extension AssociateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case webACLArn = "WebACLArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let webACLArn = self.webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
    }
}

extension AssociateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateWebACLInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to associate with the web ACL. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:aws:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:aws:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:aws:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.
    /// This member is required.
    public var webACLArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
        self.webACLArn = webACLArn
    }
}

struct AssociateWebACLInputBody: Swift.Equatable {
    let webACLArn: Swift.String?
    let resourceArn: Swift.String?
}

extension AssociateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case webACLArn = "WebACLArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension AssociateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateWebACLOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFV2ClientTypes.BlockAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponse = "CustomResponse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponse = self.customResponse {
            try encodeContainer.encode(customResponse, forKey: .customResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customResponseDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CustomResponse.self, forKey: .customResponse)
        customResponse = customResponseDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should block the request and optionally defines additional custom handling for the response to the web request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct BlockAction: Swift.Equatable {
        /// Defines a custom response for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customResponse: WAFV2ClientTypes.CustomResponse?

        public init (
            customResponse: WAFV2ClientTypes.CustomResponse? = nil
        )
        {
            self.customResponse = customResponse
        }
    }

}

extension WAFV2ClientTypes.Body: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oversizeHandling = "OversizeHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oversizeHandling = self.oversizeHandling {
            try encodeContainer.encode(oversizeHandling.rawValue, forKey: .oversizeHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oversizeHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OversizeHandling.self, forKey: .oversizeHandling)
        oversizeHandling = oversizeHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect the body of the web request. The body immediately follows the request headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification.
    public struct Body: Swift.Equatable {
        /// What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the body normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// You can combine the MATCH or NO_MATCH settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. Default: CONTINUE
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init (
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    public enum BodyParsingFallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case evaluateAsString
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [BodyParsingFallbackBehavior] {
            return [
                .evaluateAsString,
                .match,
                .noMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .evaluateAsString: return "EVALUATE_AS_STRING"
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BodyParsingFallbackBehavior(rawValue: rawValue) ?? BodyParsingFallbackBehavior.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.ByteMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case positionalConstraint = "PositionalConstraint"
        case searchString = "SearchString"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let positionalConstraint = self.positionalConstraint {
            try encodeContainer.encode(positionalConstraint.rawValue, forKey: .positionalConstraint)
        }
        if let searchString = self.searchString {
            try encodeContainer.encode(searchString.base64EncodedString(), forKey: .searchString)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchStringDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .searchString)
        searchString = searchStringDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
        let positionalConstraintDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.PositionalConstraint.self, forKey: .positionalConstraint)
        positionalConstraint = positionalConstraintDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.
    public struct ByteMatchStatement: Swift.Equatable {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The area within the portion of the web request that you want WAF to search for SearchString. Valid values include the following: CONTAINS The specified part of the web request must include the value of SearchString, but the location doesn't matter. CONTAINS_WORD The specified part of the web request must include the value of SearchString, and SearchString must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, SearchString must be a word, which means that both of the following are true:
        ///
        /// * SearchString is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and ;BadBot.
        ///
        /// * SearchString is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, BadBot; and -BadBot;.
        ///
        ///
        /// EXACTLY The value of the specified part of the web request must exactly match the value of SearchString. STARTS_WITH The value of SearchString must appear at the beginning of the specified part of the web request. ENDS_WITH The value of SearchString must appear at the end of the specified part of the web request.
        /// This member is required.
        public var positionalConstraint: WAFV2ClientTypes.PositionalConstraint?
        /// A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in [FieldToMatch]. The maximum length of the value is 200 bytes. Valid values depend on the component that you specify for inspection in FieldToMatch:
        ///
        /// * Method: The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request.
        ///
        /// * UriPath: The value that you want WAF to search for in the URI path, for example, /images/daily-ad.jpg.
        ///
        ///
        /// If SearchString includes alphabetic characters A-Z and a-z, note that the value is case sensitive. If you're using the WAF API Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 200 bytes. For example, suppose the value of Type is HEADER and the value of Data is User-Agent. If you want to search the User-Agent header for the value BadBot, you base64-encode BadBot using MIME base64-encoding and include the resulting value, QmFkQm90, in the value of SearchString. If you're using the CLI or one of the Amazon Web Services SDKs The value that you want WAF to search for. The SDK automatically base64 encodes the value.
        /// This member is required.
        public var searchString: ClientRuntime.Data?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            positionalConstraint: WAFV2ClientTypes.PositionalConstraint? = nil,
            searchString: ClientRuntime.Data? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.positionalConstraint = positionalConstraint
            self.searchString = searchString
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes.CaptchaAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = self.customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should run a CAPTCHA check against the request:
    ///
    /// * If the request includes a valid, unexpired CAPTCHA token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a CountAction.
    ///
    /// * If the request doesn't include a valid, unexpired token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. WAF generates a response that it sends back to the client, which includes the following:
    ///
    /// * The header x-amzn-waf-action with a value of captcha.
    ///
    /// * The HTTP status code 405 Method Not Allowed.
    ///
    /// * If the request contains an Accept header with a value of text/html, the response includes a CAPTCHA JavaScript page interstitial.
    ///
    ///
    ///
    ///
    ///
    /// You can configure the expiration time in the CaptchaConfigImmunityTimeProperty setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.
    public struct CaptchaAction: Swift.Equatable {
        /// Defines custom handling for the web request, used when the CAPTCHA inspection determines that the request's token is valid and unexpired. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes.CaptchaConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case immunityTimeProperty = "ImmunityTimeProperty"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let immunityTimeProperty = self.immunityTimeProperty {
            try encodeContainer.encode(immunityTimeProperty, forKey: .immunityTimeProperty)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let immunityTimePropertyDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ImmunityTimeProperty.self, forKey: .immunityTimeProperty)
        immunityTimeProperty = immunityTimePropertyDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies how WAF should handle CAPTCHA evaluations. This is available at the web ACL level and in each rule.
    public struct CaptchaConfig: Swift.Equatable {
        /// Determines how long a CAPTCHA timestamp in the token remains valid after the client successfully solves a CAPTCHA puzzle.
        public var immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty?

        public init (
            immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty? = nil
        )
        {
            self.immunityTimeProperty = immunityTimeProperty
        }
    }

}

extension WAFV2ClientTypes.CaptchaResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case responseCode = "ResponseCode"
        case solveTimestamp = "SolveTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let responseCode = self.responseCode {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let solveTimestamp = self.solveTimestamp {
            try encodeContainer.encode(solveTimestamp, forKey: .solveTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let solveTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .solveTimestamp)
        solveTimestamp = solveTimestampDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension WAFV2ClientTypes {
    /// The result from the inspection of the web request for a valid CAPTCHA token.
    public struct CaptchaResponse: Swift.Equatable {
        /// The reason for failure, populated when the evaluation of the token fails.
        public var failureReason: WAFV2ClientTypes.FailureReason?
        /// The HTTP response code indicating the status of the CAPTCHA token in the web request. If the token is missing, invalid, or expired, this code is 405 Method Not Allowed.
        public var responseCode: Swift.Int?
        /// The time that the CAPTCHA was last solved for the supplied token.
        public var solveTimestamp: Swift.Int?

        public init (
            failureReason: WAFV2ClientTypes.FailureReason? = nil,
            responseCode: Swift.Int? = nil,
            solveTimestamp: Swift.Int? = nil
        )
        {
            self.failureReason = failureReason
            self.responseCode = responseCode
            self.solveTimestamp = solveTimestamp
        }
    }

}

extension WAFV2ClientTypes.ChallengeAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = self.customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should run a Challenge check against the request to verify that the request is coming from a legitimate client session:
    ///
    /// * If the request includes a valid, unexpired challenge token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a CountAction.
    ///
    /// * If the request doesn't include a valid, unexpired challenge token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. WAF then generates a challenge response that it sends back to the client, which includes the following:
    ///
    /// * The header x-amzn-waf-action with a value of challenge.
    ///
    /// * The HTTP status code 202 Request Accepted.
    ///
    /// * If the request contains an Accept header with a value of text/html, the response includes a JavaScript page interstitial with a challenge script.
    ///
    ///
    /// Challenges run silent browser interrogations in the background, and don't generally affect the end user experience. A challenge enforces token acquisition using an interstitial JavaScript challenge that inspects the client session for legitimate behavior. The challenge blocks bots or at least increases the cost of operating sophisticated bots. After the client session successfully responds to the challenge, it receives a new token from WAF, which the challenge script uses to resubmit the original request.
    ///
    ///
    /// You can configure the expiration time in the ChallengeConfigImmunityTimeProperty setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.
    public struct ChallengeAction: Swift.Equatable {
        /// Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes.ChallengeConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case immunityTimeProperty = "ImmunityTimeProperty"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let immunityTimeProperty = self.immunityTimeProperty {
            try encodeContainer.encode(immunityTimeProperty, forKey: .immunityTimeProperty)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let immunityTimePropertyDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ImmunityTimeProperty.self, forKey: .immunityTimeProperty)
        immunityTimeProperty = immunityTimePropertyDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies how WAF should handle Challenge evaluations. This is available at the web ACL level and in each rule.
    public struct ChallengeConfig: Swift.Equatable {
        /// Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.
        public var immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty?

        public init (
            immunityTimeProperty: WAFV2ClientTypes.ImmunityTimeProperty? = nil
        )
        {
            self.immunityTimeProperty = immunityTimeProperty
        }
    }

}

extension WAFV2ClientTypes.ChallengeResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case responseCode = "ResponseCode"
        case solveTimestamp = "SolveTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let responseCode = self.responseCode {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let solveTimestamp = self.solveTimestamp {
            try encodeContainer.encode(solveTimestamp, forKey: .solveTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let solveTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .solveTimestamp)
        solveTimestamp = solveTimestampDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension WAFV2ClientTypes {
    /// The result from the inspection of the web request for a valid challenge token.
    public struct ChallengeResponse: Swift.Equatable {
        /// The reason for failure, populated when the evaluation of the token fails.
        public var failureReason: WAFV2ClientTypes.FailureReason?
        /// The HTTP response code indicating the status of the challenge token in the web request. If the token is missing, invalid, or expired, this code is 202 Request Accepted.
        public var responseCode: Swift.Int?
        /// The time that the challenge was last solved for the supplied token.
        public var solveTimestamp: Swift.Int?

        public init (
            failureReason: WAFV2ClientTypes.FailureReason? = nil,
            responseCode: Swift.Int? = nil,
            solveTimestamp: Swift.Int? = nil
        )
        {
            self.failureReason = failureReason
            self.responseCode = responseCode
            self.solveTimestamp = solveTimestamp
        }
    }

}

extension CheckCapacityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension CheckCapacityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CheckCapacityInput: Swift.Equatable {
    /// An array of [Rule] that you're configuring to use in a rule group or web ACL.
    /// This member is required.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.rules = rules
        self.scope = scope
    }
}

struct CheckCapacityInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let rules: [WAFV2ClientTypes.Rule]?
}

extension CheckCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension CheckCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CheckCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFExpiredManagedRuleGroupVersionException" : self = .wAFExpiredManagedRuleGroupVersionException(try WAFExpiredManagedRuleGroupVersionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CheckCapacityOutputError: Swift.Error, Swift.Equatable {
    case wAFExpiredManagedRuleGroupVersionException(WAFExpiredManagedRuleGroupVersionException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CheckCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CheckCapacityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacity = output.capacity
        } else {
            self.capacity = 0
        }
    }
}

public struct CheckCapacityOutputResponse: Swift.Equatable {
    /// The capacity required by the rules and scope.
    public var capacity: Swift.Int

    public init (
        capacity: Swift.Int = 0
    )
    {
        self.capacity = capacity
    }
}

struct CheckCapacityOutputResponseBody: Swift.Equatable {
    let capacity: Swift.Int
}

extension CheckCapacityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
    }
}

extension WAFV2ClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eq
        case ge
        case gt
        case le
        case lt
        case ne
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .eq,
                .ge,
                .gt,
                .le,
                .lt,
                .ne,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eq: return "EQ"
            case .ge: return "GE"
            case .gt: return "GT"
            case .le: return "LE"
            case .lt: return "LT"
            case .ne: return "NE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.Condition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionCondition = "ActionCondition"
        case labelNameCondition = "LabelNameCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionCondition = self.actionCondition {
            try encodeContainer.encode(actionCondition, forKey: .actionCondition)
        }
        if let labelNameCondition = self.labelNameCondition {
            try encodeContainer.encode(labelNameCondition, forKey: .labelNameCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionConditionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ActionCondition.self, forKey: .actionCondition)
        actionCondition = actionConditionDecoded
        let labelNameConditionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LabelNameCondition.self, forKey: .labelNameCondition)
        labelNameCondition = labelNameConditionDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single match condition for a [Filter].
    public struct Condition: Swift.Equatable {
        /// A single action condition. This is the action setting that a log record must contain in order to meet the condition.
        public var actionCondition: WAFV2ClientTypes.ActionCondition?
        /// A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.
        public var labelNameCondition: WAFV2ClientTypes.LabelNameCondition?

        public init (
            actionCondition: WAFV2ClientTypes.ActionCondition? = nil,
            labelNameCondition: WAFV2ClientTypes.LabelNameCondition? = nil
        )
        {
            self.actionCondition = actionCondition
            self.labelNameCondition = labelNameCondition
        }
    }

}

extension WAFV2ClientTypes.CookieMatchPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case excludedCookies = "ExcludedCookies"
        case includedCookies = "IncludedCookies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = self.all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let excludedCookies = excludedCookies {
            var excludedCookiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedCookies)
            for singlecookiename0 in excludedCookies {
                try excludedCookiesContainer.encode(singlecookiename0)
            }
        }
        if let includedCookies = includedCookies {
            var includedCookiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedCookies)
            for singlecookiename0 in includedCookies {
                try includedCookiesContainer.encode(singlecookiename0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedCookiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedCookies)
        var includedCookiesDecoded0:[Swift.String]? = nil
        if let includedCookiesContainer = includedCookiesContainer {
            includedCookiesDecoded0 = [Swift.String]()
            for string0 in includedCookiesContainer {
                if let string0 = string0 {
                    includedCookiesDecoded0?.append(string0)
                }
            }
        }
        includedCookies = includedCookiesDecoded0
        let excludedCookiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedCookies)
        var excludedCookiesDecoded0:[Swift.String]? = nil
        if let excludedCookiesContainer = excludedCookiesContainer {
            excludedCookiesDecoded0 = [Swift.String]()
            for string0 in excludedCookiesContainer {
                if let string0 = string0 {
                    excludedCookiesDecoded0?.append(string0)
                }
            }
        }
        excludedCookies = excludedCookiesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either All, IncludedCookies, or ExcludedCookies. Example JSON: "MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }
    public struct CookieMatchPattern: Swift.Equatable {
        /// Inspect all cookies.
        public var all: WAFV2ClientTypes.All?
        /// Inspect only the cookies whose keys don't match any of the strings specified here.
        public var excludedCookies: [Swift.String]?
        /// Inspect only the cookies that have a key that matches one of the strings specified here.
        public var includedCookies: [Swift.String]?

        public init (
            all: WAFV2ClientTypes.All? = nil,
            excludedCookies: [Swift.String]? = nil,
            includedCookies: [Swift.String]? = nil
        )
        {
            self.all = all
            self.excludedCookies = excludedCookies
            self.includedCookies = includedCookies
        }
    }

}

extension WAFV2ClientTypes.Cookies: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchPattern = "MatchPattern"
        case matchScope = "MatchScope"
        case oversizeHandling = "OversizeHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let matchPattern = self.matchPattern {
            try encodeContainer.encode(matchPattern, forKey: .matchPattern)
        }
        if let matchScope = self.matchScope {
            try encodeContainer.encode(matchScope.rawValue, forKey: .matchScope)
        }
        if let oversizeHandling = self.oversizeHandling {
            try encodeContainer.encode(oversizeHandling.rawValue, forKey: .oversizeHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchPatternDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CookieMatchPattern.self, forKey: .matchPattern)
        matchPattern = matchPatternDecoded
        let matchScopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.MapMatchScope.self, forKey: .matchScope)
        matchScope = matchScopeDecoded
        let oversizeHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OversizeHandling.self, forKey: .oversizeHandling)
        oversizeHandling = oversizeHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect the cookies in the web request. You can specify the parts of the cookies to inspect and you can narrow the set of cookies to inspect by including or excluding specific keys. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "Cookies": { "MatchPattern": { "All": {} }, "MatchScope": "KEY", "OversizeHandling": "MATCH" }
    public struct Cookies: Swift.Equatable {
        /// The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either All, IncludedCookies, or ExcludedCookies. Example JSON: "MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.CookieMatchPattern?
        /// The parts of the cookies to inspect with the rule inspection criteria. If you specify All, WAF inspects both keys and values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.MapMatchScope?
        /// What WAF should do if the cookies of the request are larger than WAF can inspect. WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the cookies normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init (
            matchPattern: WAFV2ClientTypes.CookieMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.MapMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes.CountAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customRequestHandling = "CustomRequestHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customRequestHandling = self.customRequestHandling {
            try encodeContainer.encode(customRequestHandling, forKey: .customRequestHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customRequestHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CustomRequestHandling.self, forKey: .customRequestHandling)
        customRequestHandling = customRequestHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should count the request. Optionally defines additional custom handling for the request. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction].
    public struct CountAction: Swift.Equatable {
        /// Defines custom handling for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customRequestHandling: WAFV2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: WAFV2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}

extension WAFV2ClientTypes {
    public enum CountryCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ad
        case ae
        case af
        case ag
        case ai
        case al
        case am
        case ao
        case aq
        case ar
        case `as`
        case at
        case au
        case aw
        case ax
        case az
        case ba
        case bb
        case bd
        case be
        case bf
        case bg
        case bh
        case bi
        case bj
        case bl
        case bm
        case bn
        case bo
        case bq
        case br
        case bs
        case bt
        case bv
        case bw
        case by
        case bz
        case ca
        case cc
        case cd
        case cf
        case cg
        case ch
        case ci
        case ck
        case cl
        case cm
        case cn
        case co
        case cr
        case cu
        case cv
        case cw
        case cx
        case cy
        case cz
        case de
        case dj
        case dk
        case dm
        case `do`
        case dz
        case ec
        case ee
        case eg
        case eh
        case er
        case es
        case et
        case fi
        case fj
        case fk
        case fm
        case fo
        case fr
        case ga
        case gb
        case gd
        case ge
        case gf
        case gg
        case gh
        case gi
        case gl
        case gm
        case gn
        case gp
        case gq
        case gr
        case gs
        case gt
        case gu
        case gw
        case gy
        case hk
        case hm
        case hn
        case hr
        case ht
        case hu
        case id
        case ie
        case il
        case im
        case `in`
        case io
        case iq
        case ir
        case `is`
        case it
        case je
        case jm
        case jo
        case jp
        case ke
        case kg
        case kh
        case ki
        case km
        case kn
        case kp
        case kr
        case kw
        case ky
        case kz
        case la
        case lb
        case lc
        case li
        case lk
        case lr
        case ls
        case lt
        case lu
        case lv
        case ly
        case ma
        case mc
        case md
        case me
        case mf
        case mg
        case mh
        case mk
        case ml
        case mm
        case mn
        case mo
        case mp
        case mq
        case mr
        case ms
        case mt
        case mu
        case mv
        case mw
        case mx
        case my
        case mz
        case na
        case nc
        case ne
        case nf
        case ng
        case ni
        case nl
        case no
        case np
        case nr
        case nu
        case nz
        case om
        case pa
        case pe
        case pf
        case pg
        case ph
        case pk
        case pl
        case pm
        case pn
        case pr
        case ps
        case pt
        case pw
        case py
        case qa
        case re
        case ro
        case rs
        case ru
        case rw
        case sa
        case sb
        case sc
        case sd
        case se
        case sg
        case sh
        case si
        case sj
        case sk
        case sl
        case sm
        case sn
        case so
        case sr
        case ss
        case st
        case sv
        case sx
        case sy
        case sz
        case tc
        case td
        case tf
        case tg
        case th
        case tj
        case tk
        case tl
        case tm
        case tn
        case to
        case tr
        case tt
        case tv
        case tw
        case tz
        case ua
        case ug
        case um
        case us
        case uy
        case uz
        case va
        case vc
        case ve
        case vg
        case vi
        case vn
        case vu
        case wf
        case ws
        case xk
        case ye
        case yt
        case za
        case zm
        case zw
        case sdkUnknown(Swift.String)

        public static var allCases: [CountryCode] {
            return [
                .ad,
                .ae,
                .af,
                .ag,
                .ai,
                .al,
                .am,
                .ao,
                .aq,
                .ar,
                .as,
                .at,
                .au,
                .aw,
                .ax,
                .az,
                .ba,
                .bb,
                .bd,
                .be,
                .bf,
                .bg,
                .bh,
                .bi,
                .bj,
                .bl,
                .bm,
                .bn,
                .bo,
                .bq,
                .br,
                .bs,
                .bt,
                .bv,
                .bw,
                .by,
                .bz,
                .ca,
                .cc,
                .cd,
                .cf,
                .cg,
                .ch,
                .ci,
                .ck,
                .cl,
                .cm,
                .cn,
                .co,
                .cr,
                .cu,
                .cv,
                .cw,
                .cx,
                .cy,
                .cz,
                .de,
                .dj,
                .dk,
                .dm,
                .do,
                .dz,
                .ec,
                .ee,
                .eg,
                .eh,
                .er,
                .es,
                .et,
                .fi,
                .fj,
                .fk,
                .fm,
                .fo,
                .fr,
                .ga,
                .gb,
                .gd,
                .ge,
                .gf,
                .gg,
                .gh,
                .gi,
                .gl,
                .gm,
                .gn,
                .gp,
                .gq,
                .gr,
                .gs,
                .gt,
                .gu,
                .gw,
                .gy,
                .hk,
                .hm,
                .hn,
                .hr,
                .ht,
                .hu,
                .id,
                .ie,
                .il,
                .im,
                .in,
                .io,
                .iq,
                .ir,
                .is,
                .it,
                .je,
                .jm,
                .jo,
                .jp,
                .ke,
                .kg,
                .kh,
                .ki,
                .km,
                .kn,
                .kp,
                .kr,
                .kw,
                .ky,
                .kz,
                .la,
                .lb,
                .lc,
                .li,
                .lk,
                .lr,
                .ls,
                .lt,
                .lu,
                .lv,
                .ly,
                .ma,
                .mc,
                .md,
                .me,
                .mf,
                .mg,
                .mh,
                .mk,
                .ml,
                .mm,
                .mn,
                .mo,
                .mp,
                .mq,
                .mr,
                .ms,
                .mt,
                .mu,
                .mv,
                .mw,
                .mx,
                .my,
                .mz,
                .na,
                .nc,
                .ne,
                .nf,
                .ng,
                .ni,
                .nl,
                .no,
                .np,
                .nr,
                .nu,
                .nz,
                .om,
                .pa,
                .pe,
                .pf,
                .pg,
                .ph,
                .pk,
                .pl,
                .pm,
                .pn,
                .pr,
                .ps,
                .pt,
                .pw,
                .py,
                .qa,
                .re,
                .ro,
                .rs,
                .ru,
                .rw,
                .sa,
                .sb,
                .sc,
                .sd,
                .se,
                .sg,
                .sh,
                .si,
                .sj,
                .sk,
                .sl,
                .sm,
                .sn,
                .so,
                .sr,
                .ss,
                .st,
                .sv,
                .sx,
                .sy,
                .sz,
                .tc,
                .td,
                .tf,
                .tg,
                .th,
                .tj,
                .tk,
                .tl,
                .tm,
                .tn,
                .to,
                .tr,
                .tt,
                .tv,
                .tw,
                .tz,
                .ua,
                .ug,
                .um,
                .us,
                .uy,
                .uz,
                .va,
                .vc,
                .ve,
                .vg,
                .vi,
                .vn,
                .vu,
                .wf,
                .ws,
                .xk,
                .ye,
                .yt,
                .za,
                .zm,
                .zw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ad: return "AD"
            case .ae: return "AE"
            case .af: return "AF"
            case .ag: return "AG"
            case .ai: return "AI"
            case .al: return "AL"
            case .am: return "AM"
            case .ao: return "AO"
            case .aq: return "AQ"
            case .ar: return "AR"
            case .as: return "AS"
            case .at: return "AT"
            case .au: return "AU"
            case .aw: return "AW"
            case .ax: return "AX"
            case .az: return "AZ"
            case .ba: return "BA"
            case .bb: return "BB"
            case .bd: return "BD"
            case .be: return "BE"
            case .bf: return "BF"
            case .bg: return "BG"
            case .bh: return "BH"
            case .bi: return "BI"
            case .bj: return "BJ"
            case .bl: return "BL"
            case .bm: return "BM"
            case .bn: return "BN"
            case .bo: return "BO"
            case .bq: return "BQ"
            case .br: return "BR"
            case .bs: return "BS"
            case .bt: return "BT"
            case .bv: return "BV"
            case .bw: return "BW"
            case .by: return "BY"
            case .bz: return "BZ"
            case .ca: return "CA"
            case .cc: return "CC"
            case .cd: return "CD"
            case .cf: return "CF"
            case .cg: return "CG"
            case .ch: return "CH"
            case .ci: return "CI"
            case .ck: return "CK"
            case .cl: return "CL"
            case .cm: return "CM"
            case .cn: return "CN"
            case .co: return "CO"
            case .cr: return "CR"
            case .cu: return "CU"
            case .cv: return "CV"
            case .cw: return "CW"
            case .cx: return "CX"
            case .cy: return "CY"
            case .cz: return "CZ"
            case .de: return "DE"
            case .dj: return "DJ"
            case .dk: return "DK"
            case .dm: return "DM"
            case .do: return "DO"
            case .dz: return "DZ"
            case .ec: return "EC"
            case .ee: return "EE"
            case .eg: return "EG"
            case .eh: return "EH"
            case .er: return "ER"
            case .es: return "ES"
            case .et: return "ET"
            case .fi: return "FI"
            case .fj: return "FJ"
            case .fk: return "FK"
            case .fm: return "FM"
            case .fo: return "FO"
            case .fr: return "FR"
            case .ga: return "GA"
            case .gb: return "GB"
            case .gd: return "GD"
            case .ge: return "GE"
            case .gf: return "GF"
            case .gg: return "GG"
            case .gh: return "GH"
            case .gi: return "GI"
            case .gl: return "GL"
            case .gm: return "GM"
            case .gn: return "GN"
            case .gp: return "GP"
            case .gq: return "GQ"
            case .gr: return "GR"
            case .gs: return "GS"
            case .gt: return "GT"
            case .gu: return "GU"
            case .gw: return "GW"
            case .gy: return "GY"
            case .hk: return "HK"
            case .hm: return "HM"
            case .hn: return "HN"
            case .hr: return "HR"
            case .ht: return "HT"
            case .hu: return "HU"
            case .id: return "ID"
            case .ie: return "IE"
            case .il: return "IL"
            case .im: return "IM"
            case .in: return "IN"
            case .io: return "IO"
            case .iq: return "IQ"
            case .ir: return "IR"
            case .is: return "IS"
            case .it: return "IT"
            case .je: return "JE"
            case .jm: return "JM"
            case .jo: return "JO"
            case .jp: return "JP"
            case .ke: return "KE"
            case .kg: return "KG"
            case .kh: return "KH"
            case .ki: return "KI"
            case .km: return "KM"
            case .kn: return "KN"
            case .kp: return "KP"
            case .kr: return "KR"
            case .kw: return "KW"
            case .ky: return "KY"
            case .kz: return "KZ"
            case .la: return "LA"
            case .lb: return "LB"
            case .lc: return "LC"
            case .li: return "LI"
            case .lk: return "LK"
            case .lr: return "LR"
            case .ls: return "LS"
            case .lt: return "LT"
            case .lu: return "LU"
            case .lv: return "LV"
            case .ly: return "LY"
            case .ma: return "MA"
            case .mc: return "MC"
            case .md: return "MD"
            case .me: return "ME"
            case .mf: return "MF"
            case .mg: return "MG"
            case .mh: return "MH"
            case .mk: return "MK"
            case .ml: return "ML"
            case .mm: return "MM"
            case .mn: return "MN"
            case .mo: return "MO"
            case .mp: return "MP"
            case .mq: return "MQ"
            case .mr: return "MR"
            case .ms: return "MS"
            case .mt: return "MT"
            case .mu: return "MU"
            case .mv: return "MV"
            case .mw: return "MW"
            case .mx: return "MX"
            case .my: return "MY"
            case .mz: return "MZ"
            case .na: return "NA"
            case .nc: return "NC"
            case .ne: return "NE"
            case .nf: return "NF"
            case .ng: return "NG"
            case .ni: return "NI"
            case .nl: return "NL"
            case .no: return "NO"
            case .np: return "NP"
            case .nr: return "NR"
            case .nu: return "NU"
            case .nz: return "NZ"
            case .om: return "OM"
            case .pa: return "PA"
            case .pe: return "PE"
            case .pf: return "PF"
            case .pg: return "PG"
            case .ph: return "PH"
            case .pk: return "PK"
            case .pl: return "PL"
            case .pm: return "PM"
            case .pn: return "PN"
            case .pr: return "PR"
            case .ps: return "PS"
            case .pt: return "PT"
            case .pw: return "PW"
            case .py: return "PY"
            case .qa: return "QA"
            case .re: return "RE"
            case .ro: return "RO"
            case .rs: return "RS"
            case .ru: return "RU"
            case .rw: return "RW"
            case .sa: return "SA"
            case .sb: return "SB"
            case .sc: return "SC"
            case .sd: return "SD"
            case .se: return "SE"
            case .sg: return "SG"
            case .sh: return "SH"
            case .si: return "SI"
            case .sj: return "SJ"
            case .sk: return "SK"
            case .sl: return "SL"
            case .sm: return "SM"
            case .sn: return "SN"
            case .so: return "SO"
            case .sr: return "SR"
            case .ss: return "SS"
            case .st: return "ST"
            case .sv: return "SV"
            case .sx: return "SX"
            case .sy: return "SY"
            case .sz: return "SZ"
            case .tc: return "TC"
            case .td: return "TD"
            case .tf: return "TF"
            case .tg: return "TG"
            case .th: return "TH"
            case .tj: return "TJ"
            case .tk: return "TK"
            case .tl: return "TL"
            case .tm: return "TM"
            case .tn: return "TN"
            case .to: return "TO"
            case .tr: return "TR"
            case .tt: return "TT"
            case .tv: return "TV"
            case .tw: return "TW"
            case .tz: return "TZ"
            case .ua: return "UA"
            case .ug: return "UG"
            case .um: return "UM"
            case .us: return "US"
            case .uy: return "UY"
            case .uz: return "UZ"
            case .va: return "VA"
            case .vc: return "VC"
            case .ve: return "VE"
            case .vg: return "VG"
            case .vi: return "VI"
            case .vn: return "VN"
            case .vu: return "VU"
            case .wf: return "WF"
            case .ws: return "WS"
            case .xk: return "XK"
            case .ye: return "YE"
            case .yt: return "YT"
            case .za: return "ZA"
            case .zm: return "ZM"
            case .zw: return "ZW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CountryCode(rawValue: rawValue) ?? CountryCode.sdkUnknown(rawValue)
        }
    }
}

extension CreateIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case ipAddressVersion = "IPAddressVersion"
        case name = "Name"
        case scope = "Scope"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddress0 in addresses {
                try addressesContainer.encode(ipaddress0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let ipAddressVersion = self.ipAddressVersion {
            try encodeContainer.encode(ipAddressVersion.rawValue, forKey: .ipAddressVersion)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateIPSetInput: Swift.Equatable {
    /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
    ///
    /// * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
    ///
    ///
    /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
    ///
    /// * Empty array: "Addresses": []
    ///
    /// * Array with one address: "Addresses": ["192.0.2.44/32"]
    ///
    /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
    ///
    /// * INVALID specification: "Addresses": [""] INVALID
    /// This member is required.
    public var addresses: [Swift.String]?
    /// A description of the IP set that helps with identification.
    public var description: Swift.String?
    /// The version of the IP addresses, either IPV4 or IPV6.
    /// This member is required.
    public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init (
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.ipAddressVersion = ipAddressVersion
        self.name = name
        self.scope = scope
        self.tags = tags
    }
}

struct CreateIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let description: Swift.String?
    let ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?
    let addresses: [Swift.String]?
    let tags: [WAFV2ClientTypes.Tag]?
}

extension CreateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case ipAddressVersion = "IPAddressVersion"
        case name = "Name"
        case scope = "Scope"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ipAddressVersionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPAddressVersion.self, forKey: .ipAddressVersion)
        ipAddressVersion = ipAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateIPSetOutputResponse: Swift.Equatable {
    /// High-level information about an [IPSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an IPSet, and the ARN, that you provide to the [IPSetReferenceStatement] to use the address set in a [Rule].
    public var summary: WAFV2ClientTypes.IPSetSummary?

    public init (
        summary: WAFV2ClientTypes.IPSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateIPSetOutputResponseBody: Swift.Equatable {
    let summary: WAFV2ClientTypes.IPSetSummary?
}

extension CreateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPSetSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension CreateRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regex0 in regularExpressionList {
                try regularExpressionListContainer.encode(regex0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRegexPatternSetInput: Swift.Equatable {
    /// A description of the set that helps with identification.
    public var description: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Array of regular expression strings.
    /// This member is required.
    public var regularExpressionList: [WAFV2ClientTypes.Regex]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [WAFV2ClientTypes.Regex]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
        self.tags = tags
    }
}

struct CreateRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let description: Swift.String?
    let regularExpressionList: [WAFV2ClientTypes.Regex]?
    let tags: [WAFV2ClientTypes.Tag]?
}

extension CreateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[WAFV2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [WAFV2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateRegexPatternSetOutputResponse: Swift.Equatable {
    /// High-level information about a [RegexPatternSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RegexPatternSet, and the ARN, that you provide to the [RegexPatternSetReferenceStatement] to use the pattern set in a [Rule].
    public var summary: WAFV2ClientTypes.RegexPatternSetSummary?

    public init (
        summary: WAFV2ClientTypes.RegexPatternSetSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateRegexPatternSetOutputResponseBody: Swift.Equatable {
    let summary: WAFV2ClientTypes.RegexPatternSetSummary?
}

extension CreateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RegexPatternSetSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension CreateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

extension CreateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRuleGroupInput: Swift.Equatable {
    /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using [CheckCapacity]. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
    /// This member is required.
    public var capacity: Swift.Int?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    /// A description of the rule group that helps with identification.
    public var description: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init (
        capacity: Swift.Int? = nil,
        customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.capacity = capacity
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.visibilityConfig = visibilityConfig
    }
}

struct CreateRuleGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let capacity: Swift.Int?
    let description: Swift.String?
    let rules: [WAFV2ClientTypes.Rule]?
    let visibilityConfig: WAFV2ClientTypes.VisibilityConfig?
    let tags: [WAFV2ClientTypes.Tag]?
    let customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
}

extension CreateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension CreateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateRuleGroupOutputResponse: Swift.Equatable {
    /// High-level information about a [RuleGroup], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public var summary: WAFV2ClientTypes.RuleGroupSummary?

    public init (
        summary: WAFV2ClientTypes.RuleGroupSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateRuleGroupOutputResponseBody: Swift.Equatable {
    let summary: WAFV2ClientTypes.RuleGroupSummary?
}

extension CreateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleGroupSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension CreateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case tokenDomains = "TokenDomains"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let challengeConfig = self.challengeConfig {
            try encodeContainer.encode(challengeConfig, forKey: .challengeConfig)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let tokenDomains = tokenDomains {
            var tokenDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokenDomains)
            for tokendomain0 in tokenDomains {
                try tokenDomainsContainer.encode(tokendomain0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

extension CreateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateWebACLInput: Swift.Equatable {
    /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
    public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
    public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    /// The action to perform if none of the Rules contained in the WebACL match.
    /// This member is required.
    public var defaultAction: WAFV2ClientTypes.DefaultAction?
    /// A description of the web ACL that helps with identification.
    public var description: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// An array of key:value pairs to associate with the resource.
    public var tags: [WAFV2ClientTypes.Tag]?
    /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains. Example JSON: "TokenDomains": { "mywebsite.com", "myotherwebsite.com" } Public suffixes aren't allowed. For example, you can't use usa.gov or co.uk as token domains.
    public var tokenDomains: [Swift.String]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init (
        captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
        challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
        customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil,
        tokenDomains: [Swift.String]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.captchaConfig = captchaConfig
        self.challengeConfig = challengeConfig
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tags = tags
        self.tokenDomains = tokenDomains
        self.visibilityConfig = visibilityConfig
    }
}

struct CreateWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let defaultAction: WAFV2ClientTypes.DefaultAction?
    let description: Swift.String?
    let rules: [WAFV2ClientTypes.Rule]?
    let visibilityConfig: WAFV2ClientTypes.VisibilityConfig?
    let tags: [WAFV2ClientTypes.Tag]?
    let customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    let captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    let challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    let tokenDomains: [Swift.String]?
}

extension CreateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case tokenDomains = "TokenDomains"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let captchaConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
        let challengeConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeConfig.self, forKey: .challengeConfig)
        challengeConfig = challengeConfigDecoded
        let tokenDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenDomains)
        var tokenDomainsDecoded0:[Swift.String]? = nil
        if let tokenDomainsContainer = tokenDomainsContainer {
            tokenDomainsDecoded0 = [Swift.String]()
            for string0 in tokenDomainsContainer {
                if let string0 = string0 {
                    tokenDomainsDecoded0?.append(string0)
                }
            }
        }
        tokenDomains = tokenDomainsDecoded0
    }
}

extension CreateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFConfigurationWarningException" : self = .wAFConfigurationWarningException(try WAFConfigurationWarningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFExpiredManagedRuleGroupVersionException" : self = .wAFExpiredManagedRuleGroupVersionException(try WAFExpiredManagedRuleGroupVersionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFConfigurationWarningException(WAFConfigurationWarningException)
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFExpiredManagedRuleGroupVersionException(WAFExpiredManagedRuleGroupVersionException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.summary = output.summary
        } else {
            self.summary = nil
        }
    }
}

public struct CreateWebACLOutputResponse: Swift.Equatable {
    /// High-level information about a [WebACL], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a WebACL, and the ARN, that you provide to operations like [AssociateWebACL].
    public var summary: WAFV2ClientTypes.WebACLSummary?

    public init (
        summary: WAFV2ClientTypes.WebACLSummary? = nil
    )
    {
        self.summary = summary
    }
}

struct CreateWebACLOutputResponseBody: Swift.Equatable {
    let summary: WAFV2ClientTypes.WebACLSummary?
}

extension CreateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.WebACLSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}

extension WAFV2ClientTypes.CustomHTTPHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFV2ClientTypes {
    /// A custom header for custom request and response handling. This is used in [CustomResponse] and [CustomRequestHandling].
    public struct CustomHTTPHeader: Swift.Equatable {
        /// The name of the custom header. For custom request header insertion, when WAF inserts the header into the request, it prefixes this name x-amzn-waf-, to avoid confusion with the headers that are already in the request. For example, for the header name sample, WAF inserts the header x-amzn-waf-sample.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the custom header.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFV2ClientTypes.CustomRequestHandling: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insertHeaders = "InsertHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insertHeaders = insertHeaders {
            var insertHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insertHeaders)
            for customhttpheader0 in insertHeaders {
                try insertHeadersContainer.encode(customhttpheader0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insertHeadersContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.CustomHTTPHeader?].self, forKey: .insertHeaders)
        var insertHeadersDecoded0:[WAFV2ClientTypes.CustomHTTPHeader]? = nil
        if let insertHeadersContainer = insertHeadersContainer {
            insertHeadersDecoded0 = [WAFV2ClientTypes.CustomHTTPHeader]()
            for structure0 in insertHeadersContainer {
                if let structure0 = structure0 {
                    insertHeadersDecoded0?.append(structure0)
                }
            }
        }
        insertHeaders = insertHeadersDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Custom request handling behavior that inserts custom headers into a web request. You can add custom request handling for WAF to use when the rule action doesn't block the request. For example, CaptchaAction for requests with valid t okens, and AllowAction. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public struct CustomRequestHandling: Swift.Equatable {
        /// The HTTP headers to insert into the request. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        /// This member is required.
        public var insertHeaders: [WAFV2ClientTypes.CustomHTTPHeader]?

        public init (
            insertHeaders: [WAFV2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.insertHeaders = insertHeaders
        }
    }

}

extension WAFV2ClientTypes.CustomResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodyKey = "CustomResponseBodyKey"
        case responseCode = "ResponseCode"
        case responseHeaders = "ResponseHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodyKey = self.customResponseBodyKey {
            try encodeContainer.encode(customResponseBodyKey, forKey: .customResponseBodyKey)
        }
        if let responseCode = self.responseCode {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let responseHeaders = responseHeaders {
            var responseHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseHeaders)
            for customhttpheader0 in responseHeaders {
                try responseHeadersContainer.encode(customhttpheader0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let customResponseBodyKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customResponseBodyKey)
        customResponseBodyKey = customResponseBodyKeyDecoded
        let responseHeadersContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.CustomHTTPHeader?].self, forKey: .responseHeaders)
        var responseHeadersDecoded0:[WAFV2ClientTypes.CustomHTTPHeader]? = nil
        if let responseHeadersContainer = responseHeadersContainer {
            responseHeadersDecoded0 = [WAFV2ClientTypes.CustomHTTPHeader]()
            for structure0 in responseHeadersContainer {
                if let structure0 = structure0 {
                    responseHeadersDecoded0?.append(structure0)
                }
            }
        }
        responseHeaders = responseHeadersDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A custom response to send to the client. You can define a custom response for rule actions and default web ACL actions that are set to [BlockAction]. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public struct CustomResponse: Swift.Equatable {
        /// References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the CustomResponseBodies setting for the [WebACL] or [RuleGroup] where you want to use it. Then, in the rule action or web ACL default action BlockAction setting, you reference the response body using this key.
        public var customResponseBodyKey: Swift.String?
        /// The HTTP status code to return to the client. For a list of status codes that you can use in your custom responses, see [Supported status codes for custom response](https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        /// This member is required.
        public var responseCode: Swift.Int?
        /// The HTTP headers to use in the response. Duplicate header names are not allowed. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var responseHeaders: [WAFV2ClientTypes.CustomHTTPHeader]?

        public init (
            customResponseBodyKey: Swift.String? = nil,
            responseCode: Swift.Int? = nil,
            responseHeaders: [WAFV2ClientTypes.CustomHTTPHeader]? = nil
        )
        {
            self.customResponseBodyKey = customResponseBodyKey
            self.responseCode = responseCode
            self.responseHeaders = responseHeaders
        }
    }

}

extension WAFV2ClientTypes.CustomResponseBody: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case contentType = "ContentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let contentType = self.contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentTypeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
    }
}

extension WAFV2ClientTypes {
    /// The response body to use in a custom response to a web request. This is referenced by key from [CustomResponse]CustomResponseBodyKey.
    public struct CustomResponseBody: Swift.Equatable {
        /// The payload of the custom response. You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the ContentType setting. For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        /// This member is required.
        public var content: Swift.String?
        /// The type of content in the payload that you are defining in the Content string.
        /// This member is required.
        public var contentType: WAFV2ClientTypes.ResponseContentType?

        public init (
            content: Swift.String? = nil,
            contentType: WAFV2ClientTypes.ResponseContentType? = nil
        )
        {
            self.content = content
            self.contentType = contentType
        }
    }

}

extension WAFV2ClientTypes.DefaultAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allow = "Allow"
        case block = "Block"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allow = self.allow {
            try encodeContainer.encode(allow, forKey: .allow)
        }
        if let block = self.block {
            try encodeContainer.encode(block, forKey: .block)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.BlockAction.self, forKey: .block)
        block = blockDecoded
        let allowDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AllowAction.self, forKey: .allow)
        allow = allowDecoded
    }
}

extension WAFV2ClientTypes {
    /// In a [WebACL], this is the action that you want WAF to perform when a web request doesn't match any of the rules in the WebACL. The default action must be a terminating action.
    public struct DefaultAction: Swift.Equatable {
        /// Specifies that WAF should allow requests by default.
        public var allow: WAFV2ClientTypes.AllowAction?
        /// Specifies that WAF should block requests by default.
        public var block: WAFV2ClientTypes.BlockAction?

        public init (
            allow: WAFV2ClientTypes.AllowAction? = nil,
            block: WAFV2ClientTypes.BlockAction? = nil
        )
        {
            self.allow = allow
            self.block = block
        }
    }

}

extension DeleteFirewallManagerRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLArn = "WebACLArn"
        case webACLLockToken = "WebACLLockToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let webACLArn = self.webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
        if let webACLLockToken = self.webACLLockToken {
            try encodeContainer.encode(webACLLockToken, forKey: .webACLLockToken)
        }
    }
}

extension DeleteFirewallManagerRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFirewallManagerRuleGroupsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the web ACL.
    /// This member is required.
    public var webACLArn: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var webACLLockToken: Swift.String?

    public init (
        webACLArn: Swift.String? = nil,
        webACLLockToken: Swift.String? = nil
    )
    {
        self.webACLArn = webACLArn
        self.webACLLockToken = webACLLockToken
    }
}

struct DeleteFirewallManagerRuleGroupsInputBody: Swift.Equatable {
    let webACLArn: Swift.String?
    let webACLLockToken: Swift.String?
}

extension DeleteFirewallManagerRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACLArn = "WebACLArn"
        case webACLLockToken = "WebACLLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let webACLLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLLockToken)
        webACLLockToken = webACLLockTokenDecoded
    }
}

extension DeleteFirewallManagerRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFirewallManagerRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFirewallManagerRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFirewallManagerRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFirewallManagerRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextWebACLLockToken = output.nextWebACLLockToken
        } else {
            self.nextWebACLLockToken = nil
        }
    }
}

public struct DeleteFirewallManagerRuleGroupsOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextWebACLLockToken: Swift.String?

    public init (
        nextWebACLLockToken: Swift.String? = nil
    )
    {
        self.nextWebACLLockToken = nextWebACLLockToken
    }
}

struct DeleteFirewallManagerRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextWebACLLockToken: Swift.String?
}

extension DeleteFirewallManagerRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextWebACLLockToken = "NextWebACLLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextWebACLLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextWebACLLockToken)
        nextWebACLLockToken = nextWebACLLockTokenDecoded
    }
}

extension DeleteIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension DeleteIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteIPSetInput: Swift.Equatable {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
}

extension DeleteIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteIPSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeleteLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the web ACL from which you want to delete the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeleteLoggingConfigurationInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeleteLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeleteLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLoggingConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DeletePermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeletePermissionPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group from which you want to delete the policy. You must be the owner of the rule group to perform this operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DeletePermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DeletePermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DeletePermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePermissionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension DeleteRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRegexPatternSetInput: Swift.Equatable {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
}

extension DeleteRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRegexPatternSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension DeleteRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRuleGroupInput: Swift.Equatable {
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteRuleGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
}

extension DeleteRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRuleGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension DeleteWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWebACLInput: Swift.Equatable {
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct DeleteWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
}

extension DeleteWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension DeleteWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFAssociatedItemException" : self = .wAFAssociatedItemException(try WAFAssociatedItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFAssociatedItemException(WAFAssociatedItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWebACLOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeManagedRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scope = "Scope"
        case vendorName = "VendorName"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let vendorName = self.vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }
}

extension DescribeManagedRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeManagedRuleGroupInput: Swift.Equatable {
    /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
    /// This member is required.
    public var vendorName: Swift.String?
    /// The version of the rule group. You can only use a version that is not scheduled for expiration. If you don't provide this, WAF uses the vendor's default version.
    public var versionName: Swift.String?

    public init (
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.name = name
        self.scope = scope
        self.vendorName = vendorName
        self.versionName = versionName
    }
}

struct DescribeManagedRuleGroupInputBody: Swift.Equatable {
    let vendorName: Swift.String?
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let versionName: Swift.String?
}

extension DescribeManagedRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scope = "Scope"
        case vendorName = "VendorName"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
    }
}

extension DescribeManagedRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeManagedRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFExpiredManagedRuleGroupVersionException" : self = .wAFExpiredManagedRuleGroupVersionException(try WAFExpiredManagedRuleGroupVersionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeManagedRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFExpiredManagedRuleGroupVersionException(WAFExpiredManagedRuleGroupVersionException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeManagedRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeManagedRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.availableLabels = output.availableLabels
            self.capacity = output.capacity
            self.consumedLabels = output.consumedLabels
            self.labelNamespace = output.labelNamespace
            self.rules = output.rules
            self.snsTopicArn = output.snsTopicArn
            self.versionName = output.versionName
        } else {
            self.availableLabels = nil
            self.capacity = 0
            self.consumedLabels = nil
            self.labelNamespace = nil
            self.rules = nil
            self.snsTopicArn = nil
            self.versionName = nil
        }
    }
}

public struct DescribeManagedRuleGroupOutputResponse: Swift.Equatable {
    /// The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the RuleLabels for a [Rule].
    public var availableLabels: [WAFV2ClientTypes.LabelSummary]?
    /// The web ACL capacity units (WCUs) required for this rule group. WAF uses web ACL capacity units (WCU) to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect each rule's relative cost. Rule group capacity is fixed at creation, so users can plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
    public var capacity: Swift.Int
    /// The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
    public var consumedLabels: [WAFV2ClientTypes.LabelSummary]?
    /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
    ///
    /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
    ///
    /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
    public var labelNamespace: Swift.String?
    ///
    public var rules: [WAFV2ClientTypes.RuleSummary]?
    /// The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes to the managed rule group. You can subscribe to the SNS topic to receive notifications when the managed rule group is modified, such as for new versions and for version expiration. For more information, see the [Amazon Simple Notification Service Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/welcome.html).
    public var snsTopicArn: Swift.String?
    /// The managed rule group's version.
    public var versionName: Swift.String?

    public init (
        availableLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
        capacity: Swift.Int = 0,
        consumedLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
        labelNamespace: Swift.String? = nil,
        rules: [WAFV2ClientTypes.RuleSummary]? = nil,
        snsTopicArn: Swift.String? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.availableLabels = availableLabels
        self.capacity = capacity
        self.consumedLabels = consumedLabels
        self.labelNamespace = labelNamespace
        self.rules = rules
        self.snsTopicArn = snsTopicArn
        self.versionName = versionName
    }
}

struct DescribeManagedRuleGroupOutputResponseBody: Swift.Equatable {
    let versionName: Swift.String?
    let snsTopicArn: Swift.String?
    let capacity: Swift.Int
    let rules: [WAFV2ClientTypes.RuleSummary]?
    let labelNamespace: Swift.String?
    let availableLabels: [WAFV2ClientTypes.LabelSummary]?
    let consumedLabels: [WAFV2ClientTypes.LabelSummary]?
}

extension DescribeManagedRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case labelNamespace = "LabelNamespace"
        case rules = "Rules"
        case snsTopicArn = "SnsTopicArn"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let availableLabelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.LabelSummary?].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[WAFV2ClientTypes.LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [WAFV2ClientTypes.LabelSummary]()
            for structure0 in availableLabelsContainer {
                if let structure0 = structure0 {
                    availableLabelsDecoded0?.append(structure0)
                }
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.LabelSummary?].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[WAFV2ClientTypes.LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [WAFV2ClientTypes.LabelSummary]()
            for structure0 in consumedLabelsContainer {
                if let structure0 = structure0 {
                    consumedLabelsDecoded0?.append(structure0)
                }
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}

extension DisassociateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension DisassociateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateWebACLInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:aws:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:aws:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:aws:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct DisassociateWebACLInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension DisassociateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension DisassociateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateWebACLOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFV2ClientTypes.ExcludedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFV2ClientTypes {
    /// Specifies a single rule in a rule group whose action you want to override to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
    public struct ExcludedRule: Swift.Equatable {
        /// The name of the rule whose action you want to override to Count.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    public enum FailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case tokenDomainMismatch
        case tokenExpired
        case tokenInvalid
        case tokenMissing
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureReason] {
            return [
                .tokenDomainMismatch,
                .tokenExpired,
                .tokenInvalid,
                .tokenMissing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .tokenDomainMismatch: return "TOKEN_DOMAIN_MISMATCH"
            case .tokenExpired: return "TOKEN_EXPIRED"
            case .tokenInvalid: return "TOKEN_INVALID"
            case .tokenMissing: return "TOKEN_MISSING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailureReason(rawValue: rawValue) ?? FailureReason.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum FallbackBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [FallbackBehavior] {
            return [
                .match,
                .noMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FallbackBehavior(rawValue: rawValue) ?? FallbackBehavior.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.FieldToMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allQueryArguments = "AllQueryArguments"
        case body = "Body"
        case cookies = "Cookies"
        case headers = "Headers"
        case jsonBody = "JsonBody"
        case method = "Method"
        case queryString = "QueryString"
        case singleHeader = "SingleHeader"
        case singleQueryArgument = "SingleQueryArgument"
        case uriPath = "UriPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allQueryArguments = self.allQueryArguments {
            try encodeContainer.encode(allQueryArguments, forKey: .allQueryArguments)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let cookies = self.cookies {
            try encodeContainer.encode(cookies, forKey: .cookies)
        }
        if let headers = self.headers {
            try encodeContainer.encode(headers, forKey: .headers)
        }
        if let jsonBody = self.jsonBody {
            try encodeContainer.encode(jsonBody, forKey: .jsonBody)
        }
        if let method = self.method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let singleHeader = self.singleHeader {
            try encodeContainer.encode(singleHeader, forKey: .singleHeader)
        }
        if let singleQueryArgument = self.singleQueryArgument {
            try encodeContainer.encode(singleQueryArgument, forKey: .singleQueryArgument)
        }
        if let uriPath = self.uriPath {
            try encodeContainer.encode(uriPath, forKey: .uriPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let singleHeaderDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.SingleHeader.self, forKey: .singleHeader)
        singleHeader = singleHeaderDecoded
        let singleQueryArgumentDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.SingleQueryArgument.self, forKey: .singleQueryArgument)
        singleQueryArgument = singleQueryArgumentDecoded
        let allQueryArgumentsDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AllQueryArguments.self, forKey: .allQueryArguments)
        allQueryArguments = allQueryArgumentsDecoded
        let uriPathDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.UriPath.self, forKey: .uriPath)
        uriPath = uriPathDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.QueryString.self, forKey: .queryString)
        queryString = queryStringDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
        let methodDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Method.self, forKey: .method)
        method = methodDecoded
        let jsonBodyDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.JsonBody.self, forKey: .jsonBody)
        jsonBody = jsonBodyDecoded
        let headersDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Headers.self, forKey: .headers)
        headers = headersDecoded
        let cookiesDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Cookies.self, forKey: .cookies)
        cookies = cookiesDecoded
    }
}

extension WAFV2ClientTypes {
    /// The part of the web request that you want WAF to inspect. Include the single FieldToMatch type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in FieldToMatch for each rule statement that requires it. To inspect more than one component of the web request, create a separate rule statement for each component. Example JSON for a QueryString field to match:  "FieldToMatch": { "QueryString": {} } Example JSON for a Method field to match specification:  "FieldToMatch": { "Method": { "Name": "DELETE" } }
    public struct FieldToMatch: Swift.Equatable {
        /// Inspect all query arguments.
        public var allQueryArguments: WAFV2ClientTypes.AllQueryArguments?
        /// Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. For information about how to handle oversized request bodies, see the Body object configuration.
        public var body: WAFV2ClientTypes.Body?
        /// Inspect the request cookies. You must configure scope and pattern matching filters in the Cookies object, to define the set of cookies and the parts of the cookies that WAF inspects. Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the Cookies object. WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
        public var cookies: WAFV2ClientTypes.Cookies?
        /// Inspect the request headers. You must configure scope and pattern matching filters in the Headers object, to define the set of headers to and the parts of the headers that WAF inspects. Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the Headers object. WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
        public var headers: WAFV2ClientTypes.Headers?
        /// Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. For information about how to handle oversized request bodies, see the JsonBody object configuration.
        public var jsonBody: WAFV2ClientTypes.JsonBody?
        /// Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
        public var method: WAFV2ClientTypes.Method?
        /// Inspect the query string. This is the part of a URL that appears after a ? character, if any.
        public var queryString: WAFV2ClientTypes.QueryString?
        /// Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive. Example JSON: "SingleHeader": { "Name": "haystack" } Alternately, you can filter and inspect all headers with the HeadersFieldToMatch setting.
        public var singleHeader: WAFV2ClientTypes.SingleHeader?
        /// Inspect a single query argument. Provide the name of the query argument to inspect, such as UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive. Example JSON: "SingleQueryArgument": { "Name": "myArgument" }
        public var singleQueryArgument: WAFV2ClientTypes.SingleQueryArgument?
        /// Inspect the request URI path. This is the part of the web request that identifies a resource, for example, /images/daily-ad.jpg.
        public var uriPath: WAFV2ClientTypes.UriPath?

        public init (
            allQueryArguments: WAFV2ClientTypes.AllQueryArguments? = nil,
            body: WAFV2ClientTypes.Body? = nil,
            cookies: WAFV2ClientTypes.Cookies? = nil,
            headers: WAFV2ClientTypes.Headers? = nil,
            jsonBody: WAFV2ClientTypes.JsonBody? = nil,
            method: WAFV2ClientTypes.Method? = nil,
            queryString: WAFV2ClientTypes.QueryString? = nil,
            singleHeader: WAFV2ClientTypes.SingleHeader? = nil,
            singleQueryArgument: WAFV2ClientTypes.SingleQueryArgument? = nil,
            uriPath: WAFV2ClientTypes.UriPath? = nil
        )
        {
            self.allQueryArguments = allQueryArguments
            self.body = body
            self.cookies = cookies
            self.headers = headers
            self.jsonBody = jsonBody
            self.method = method
            self.queryString = queryString
            self.singleHeader = singleHeader
            self.singleQueryArgument = singleQueryArgument
            self.uriPath = uriPath
        }
    }

}

extension WAFV2ClientTypes.Filter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case behavior = "Behavior"
        case conditions = "Conditions"
        case requirement = "Requirement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let behavior = self.behavior {
            try encodeContainer.encode(behavior.rawValue, forKey: .behavior)
        }
        if let conditions = conditions {
            var conditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditions)
            for condition0 in conditions {
                try conditionsContainer.encode(condition0)
            }
        }
        if let requirement = self.requirement {
            try encodeContainer.encode(requirement.rawValue, forKey: .requirement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let behaviorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FilterBehavior.self, forKey: .behavior)
        behavior = behaviorDecoded
        let requirementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FilterRequirement.self, forKey: .requirement)
        requirement = requirementDecoded
        let conditionsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Condition?].self, forKey: .conditions)
        var conditionsDecoded0:[WAFV2ClientTypes.Condition]? = nil
        if let conditionsContainer = conditionsContainer {
            conditionsDecoded0 = [WAFV2ClientTypes.Condition]()
            for structure0 in conditionsContainer {
                if let structure0 = structure0 {
                    conditionsDecoded0?.append(structure0)
                }
            }
        }
        conditions = conditionsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A single logging filter, used in [LoggingFilter].
    public struct Filter: Swift.Equatable {
        /// How to handle logs that satisfy the filter's conditions and requirement.
        /// This member is required.
        public var behavior: WAFV2ClientTypes.FilterBehavior?
        /// Match conditions for the filter.
        /// This member is required.
        public var conditions: [WAFV2ClientTypes.Condition]?
        /// Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        /// This member is required.
        public var requirement: WAFV2ClientTypes.FilterRequirement?

        public init (
            behavior: WAFV2ClientTypes.FilterBehavior? = nil,
            conditions: [WAFV2ClientTypes.Condition]? = nil,
            requirement: WAFV2ClientTypes.FilterRequirement? = nil
        )
        {
            self.behavior = behavior
            self.conditions = conditions
            self.requirement = requirement
        }
    }

}

extension WAFV2ClientTypes {
    public enum FilterBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drop
        case keep
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterBehavior] {
            return [
                .drop,
                .keep,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drop: return "DROP"
            case .keep: return "KEEP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterBehavior(rawValue: rawValue) ?? FilterBehavior.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum FilterRequirement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case meetsAll
        case meetsAny
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRequirement] {
            return [
                .meetsAll,
                .meetsAny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .meetsAll: return "MEETS_ALL"
            case .meetsAny: return "MEETS_ANY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterRequirement(rawValue: rawValue) ?? FilterRequirement.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.FirewallManagerRuleGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallManagerStatement = "FirewallManagerStatement"
        case name = "Name"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let firewallManagerStatement = self.firewallManagerStatement {
            try encodeContainer.encode(firewallManagerStatement, forKey: .firewallManagerStatement)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrideAction = self.overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let firewallManagerStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FirewallManagerStatement.self, forKey: .firewallManagerStatement)
        firewallManagerStatement = firewallManagerStatementDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule group that's defined for an Firewall Manager WAF policy.
    public struct FirewallManagerRuleGroup: Swift.Equatable {
        /// The processing guidance for an Firewall Manager rule. This is like a regular rule [Statement], but it can only contain a rule group reference.
        /// This member is required.
        public var firewallManagerStatement: WAFV2ClientTypes.FirewallManagerStatement?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        /// This member is required.
        public var overrideAction: WAFV2ClientTypes.OverrideAction?
        /// If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init (
            firewallManagerStatement: WAFV2ClientTypes.FirewallManagerStatement? = nil,
            name: Swift.String? = nil,
            overrideAction: WAFV2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.firewallManagerStatement = firewallManagerStatement
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes.FirewallManagerStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRuleGroupStatement = "ManagedRuleGroupStatement"
        case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let managedRuleGroupStatement = self.managedRuleGroupStatement {
            try encodeContainer.encode(managedRuleGroupStatement, forKey: .managedRuleGroupStatement)
        }
        if let ruleGroupReferenceStatement = self.ruleGroupReferenceStatement {
            try encodeContainer.encode(ruleGroupReferenceStatement, forKey: .ruleGroupReferenceStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedRuleGroupStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ManagedRuleGroupStatement.self, forKey: .managedRuleGroupStatement)
        managedRuleGroupStatement = managedRuleGroupStatementDecoded
        let ruleGroupReferenceStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleGroupReferenceStatement.self, forKey: .ruleGroupReferenceStatement)
        ruleGroupReferenceStatement = ruleGroupReferenceStatementDecoded
    }
}

extension WAFV2ClientTypes {
    /// The processing guidance for an Firewall Manager rule. This is like a regular rule [Statement], but it can only contain a rule group reference.
    public struct FirewallManagerStatement: Swift.Equatable {
        /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet or the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
        public var managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement?
        /// A rule statement used to run the rules that are defined in a [RuleGroup]. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. You can only use a rule group reference statement at the top level inside a web ACL.
        public var ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement?

        public init (
            managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement? = nil,
            ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement? = nil
        )
        {
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
        }
    }

}

extension WAFV2ClientTypes.ForwardedIPConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fallbackBehavior = "FallbackBehavior"
        case headerName = "HeaderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fallbackBehavior = self.fallbackBehavior {
            try encodeContainer.encode(fallbackBehavior.rawValue, forKey: .fallbackBehavior)
        }
        if let headerName = self.headerName {
            try encodeContainer.encode(headerName, forKey: .headerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let fallbackBehaviorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FallbackBehavior.self, forKey: .fallbackBehavior)
        fallbackBehavior = fallbackBehaviorDecoded
    }
}

extension WAFV2ClientTypes {
    /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This configuration is used for [GeoMatchStatement] and [RateBasedStatement]. For [IPSetReferenceStatement], use [IPSetForwardedIPConfig] instead. WAF only evaluates the first IP address found in the specified HTTP header.
    public struct ForwardedIPConfig: Swift.Equatable {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors:
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var fallbackBehavior: WAFV2ClientTypes.FallbackBehavior?
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        /// This member is required.
        public var headerName: Swift.String?

        public init (
            fallbackBehavior: WAFV2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
        }
    }

}

extension WAFV2ClientTypes {
    public enum ForwardedIPPosition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case first
        case last
        case sdkUnknown(Swift.String)

        public static var allCases: [ForwardedIPPosition] {
            return [
                .any,
                .first,
                .last,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .first: return "FIRST"
            case .last: return "LAST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ForwardedIPPosition(rawValue: rawValue) ?? ForwardedIPPosition.sdkUnknown(rawValue)
        }
    }
}

extension GenerateMobileSdkReleaseUrlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform = "Platform"
        case releaseVersion = "ReleaseVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
    }
}

extension GenerateMobileSdkReleaseUrlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateMobileSdkReleaseUrlInput: Swift.Equatable {
    /// The device platform.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?
    /// The release version. For the latest available version, specify LATEST.
    /// This member is required.
    public var releaseVersion: Swift.String?

    public init (
        platform: WAFV2ClientTypes.Platform? = nil,
        releaseVersion: Swift.String? = nil
    )
    {
        self.platform = platform
        self.releaseVersion = releaseVersion
    }
}

struct GenerateMobileSdkReleaseUrlInputBody: Swift.Equatable {
    let platform: WAFV2ClientTypes.Platform?
    let releaseVersion: Swift.String?
}

extension GenerateMobileSdkReleaseUrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform = "Platform"
        case releaseVersion = "ReleaseVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
    }
}

extension GenerateMobileSdkReleaseUrlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GenerateMobileSdkReleaseUrlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GenerateMobileSdkReleaseUrlOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GenerateMobileSdkReleaseUrlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GenerateMobileSdkReleaseUrlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.url = output.url
        } else {
            self.url = nil
        }
    }
}

public struct GenerateMobileSdkReleaseUrlOutputResponse: Swift.Equatable {
    /// The presigned download URL for the specified SDK release.
    public var url: Swift.String?

    public init (
        url: Swift.String? = nil
    )
    {
        self.url = url
    }
}

struct GenerateMobileSdkReleaseUrlOutputResponseBody: Swift.Equatable {
    let url: Swift.String?
}

extension GenerateMobileSdkReleaseUrlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension WAFV2ClientTypes.GeoMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case countryCodes = "CountryCodes"
        case forwardedIPConfig = "ForwardedIPConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countryCodes = countryCodes {
            var countryCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .countryCodes)
            for countrycode0 in countryCodes {
                try countryCodesContainer.encode(countrycode0.rawValue)
            }
        }
        if let forwardedIPConfig = self.forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryCodesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.CountryCode?].self, forKey: .countryCodes)
        var countryCodesDecoded0:[WAFV2ClientTypes.CountryCode]? = nil
        if let countryCodesContainer = countryCodesContainer {
            countryCodesDecoded0 = [WAFV2ClientTypes.CountryCode]()
            for enum0 in countryCodesContainer {
                if let enum0 = enum0 {
                    countryCodesDecoded0?.append(enum0)
                }
            }
        }
        countryCodes = countryCodesDecoded0
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
    ///
    /// * To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the CountryCodes array.
    ///
    /// * Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
    ///
    ///
    /// WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ForwardedIPConfig. If you use the web request origin, the label formats are awswaf:clientip:geo:region:- and awswaf:clientip:geo:country:. If you use a forwarded IP address, the label formats are awswaf:forwardedip:geo:region:- and awswaf:forwardedip:geo:country:. For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public struct GeoMatchStatement: Swift.Equatable {
        /// An array of two-character country codes that you want to match against, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the ISO 3166 international standard. When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that's unlikely to be a source of traffic to your site.
        public var countryCodes: [WAFV2ClientTypes.CountryCode]?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        public var forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig?

        public init (
            countryCodes: [WAFV2ClientTypes.CountryCode]? = nil,
            forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig? = nil
        )
        {
            self.countryCodes = countryCodes
            self.forwardedIPConfig = forwardedIPConfig
        }
    }

}

extension GetIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension GetIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetIPSetInput: Swift.Equatable {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
}

extension GetIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ipSet = output.ipSet
            self.lockToken = output.lockToken
        } else {
            self.ipSet = nil
            self.lockToken = nil
        }
    }
}

public struct GetIPSetOutputResponse: Swift.Equatable {
    ///
    public var ipSet: WAFV2ClientTypes.IPSet?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?

    public init (
        ipSet: WAFV2ClientTypes.IPSet? = nil,
        lockToken: Swift.String? = nil
    )
    {
        self.ipSet = ipSet
        self.lockToken = lockToken
    }
}

struct GetIPSetOutputResponseBody: Swift.Equatable {
    let ipSet: WAFV2ClientTypes.IPSet?
    let lockToken: Swift.String?
}

extension GetIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSet = "IPSet"
        case lockToken = "LockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipSetDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPSet.self, forKey: .ipSet)
        ipSet = ipSetDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension GetLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLoggingConfigurationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the web ACL for which you want to get the [LoggingConfiguration].
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetLoggingConfigurationInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct GetLoggingConfigurationOutputResponse: Swift.Equatable {
    /// The [LoggingConfiguration] for the specified web ACL.
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct GetLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?
}

extension GetLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension GetManagedRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension GetManagedRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetManagedRuleSetInput: Swift.Equatable {
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetManagedRuleSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
}

extension GetManagedRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetManagedRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetManagedRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetManagedRuleSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetManagedRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetManagedRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.managedRuleSet = output.managedRuleSet
        } else {
            self.lockToken = nil
            self.managedRuleSet = nil
        }
    }
}

public struct GetManagedRuleSetOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    /// The managed rule set that you requested.
    public var managedRuleSet: WAFV2ClientTypes.ManagedRuleSet?

    public init (
        lockToken: Swift.String? = nil,
        managedRuleSet: WAFV2ClientTypes.ManagedRuleSet? = nil
    )
    {
        self.lockToken = lockToken
        self.managedRuleSet = managedRuleSet
    }
}

struct GetManagedRuleSetOutputResponseBody: Swift.Equatable {
    let managedRuleSet: WAFV2ClientTypes.ManagedRuleSet?
    let lockToken: Swift.String?
}

extension GetManagedRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case managedRuleSet = "ManagedRuleSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedRuleSetDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ManagedRuleSet.self, forKey: .managedRuleSet)
        managedRuleSet = managedRuleSetDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension GetMobileSdkReleaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform = "Platform"
        case releaseVersion = "ReleaseVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
    }
}

extension GetMobileSdkReleaseInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMobileSdkReleaseInput: Swift.Equatable {
    /// The device platform.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?
    /// The release version. For the latest available version, specify LATEST.
    /// This member is required.
    public var releaseVersion: Swift.String?

    public init (
        platform: WAFV2ClientTypes.Platform? = nil,
        releaseVersion: Swift.String? = nil
    )
    {
        self.platform = platform
        self.releaseVersion = releaseVersion
    }
}

struct GetMobileSdkReleaseInputBody: Swift.Equatable {
    let platform: WAFV2ClientTypes.Platform?
    let releaseVersion: Swift.String?
}

extension GetMobileSdkReleaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform = "Platform"
        case releaseVersion = "ReleaseVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
    }
}

extension GetMobileSdkReleaseOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMobileSdkReleaseOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMobileSdkReleaseOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMobileSdkReleaseOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMobileSdkReleaseOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mobileSdkRelease = output.mobileSdkRelease
        } else {
            self.mobileSdkRelease = nil
        }
    }
}

public struct GetMobileSdkReleaseOutputResponse: Swift.Equatable {
    /// Information for a specified SDK release, including release notes and tags.
    public var mobileSdkRelease: WAFV2ClientTypes.MobileSdkRelease?

    public init (
        mobileSdkRelease: WAFV2ClientTypes.MobileSdkRelease? = nil
    )
    {
        self.mobileSdkRelease = mobileSdkRelease
    }
}

struct GetMobileSdkReleaseOutputResponseBody: Swift.Equatable {
    let mobileSdkRelease: WAFV2ClientTypes.MobileSdkRelease?
}

extension GetMobileSdkReleaseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mobileSdkRelease = "MobileSdkRelease"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mobileSdkReleaseDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.MobileSdkRelease.self, forKey: .mobileSdkRelease)
        mobileSdkRelease = mobileSdkReleaseDecoded
    }
}

extension GetPermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetPermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetPermissionPolicyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the rule group for which you want to get the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetPermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPermissionPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetPermissionPolicyOutputResponse: Swift.Equatable {
    /// The IAM policy that is attached to the specified rule group.
    public var policy: Swift.String?

    public init (
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

struct GetPermissionPolicyOutputResponseBody: Swift.Equatable {
    let policy: Swift.String?
}

extension GetPermissionPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension GetRateBasedStatementManagedKeysInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupRuleName = "RuleGroupRuleName"
        case ruleName = "RuleName"
        case scope = "Scope"
        case webACLId = "WebACLId"
        case webACLName = "WebACLName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleGroupRuleName = self.ruleGroupRuleName {
            try encodeContainer.encode(ruleGroupRuleName, forKey: .ruleGroupRuleName)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let webACLId = self.webACLId {
            try encodeContainer.encode(webACLId, forKey: .webACLId)
        }
        if let webACLName = self.webACLName {
            try encodeContainer.encode(webACLName, forKey: .webACLName)
        }
    }
}

extension GetRateBasedStatementManagedKeysInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRateBasedStatementManagedKeysInput: Swift.Equatable {
    /// The name of the rule group reference statement in your web ACL. This is required only when you have the rate-based rule nested inside a rule group.
    public var ruleGroupRuleName: Swift.String?
    /// The name of the rate-based rule to get the keys for. If you have the rule defined inside a rule group that you're using in your web ACL, also provide the name of the rule group reference statement in the request parameter RuleGroupRuleName.
    /// This member is required.
    public var ruleName: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var webACLId: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var webACLName: Swift.String?

    public init (
        ruleGroupRuleName: Swift.String? = nil,
        ruleName: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        webACLId: Swift.String? = nil,
        webACLName: Swift.String? = nil
    )
    {
        self.ruleGroupRuleName = ruleGroupRuleName
        self.ruleName = ruleName
        self.scope = scope
        self.webACLId = webACLId
        self.webACLName = webACLName
    }
}

struct GetRateBasedStatementManagedKeysInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let webACLName: Swift.String?
    let webACLId: Swift.String?
    let ruleGroupRuleName: Swift.String?
    let ruleName: Swift.String?
}

extension GetRateBasedStatementManagedKeysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleGroupRuleName = "RuleGroupRuleName"
        case ruleName = "RuleName"
        case scope = "Scope"
        case webACLId = "WebACLId"
        case webACLName = "WebACLName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let webACLNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLName)
        webACLName = webACLNameDecoded
        let webACLIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLId)
        webACLId = webACLIdDecoded
        let ruleGroupRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupRuleName)
        ruleGroupRuleName = ruleGroupRuleNameDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
    }
}

extension GetRateBasedStatementManagedKeysOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRateBasedStatementManagedKeysOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRateBasedStatementManagedKeysOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRateBasedStatementManagedKeysOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRateBasedStatementManagedKeysOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedKeysIPV4 = output.managedKeysIPV4
            self.managedKeysIPV6 = output.managedKeysIPV6
        } else {
            self.managedKeysIPV4 = nil
            self.managedKeysIPV6 = nil
        }
    }
}

public struct GetRateBasedStatementManagedKeysOutputResponse: Swift.Equatable {
    /// The keys that are of Internet Protocol version 4 (IPv4).
    public var managedKeysIPV4: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?
    /// The keys that are of Internet Protocol version 6 (IPv6).
    public var managedKeysIPV6: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?

    public init (
        managedKeysIPV4: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil,
        managedKeysIPV6: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet? = nil
    )
    {
        self.managedKeysIPV4 = managedKeysIPV4
        self.managedKeysIPV6 = managedKeysIPV6
    }
}

struct GetRateBasedStatementManagedKeysOutputResponseBody: Swift.Equatable {
    let managedKeysIPV4: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?
    let managedKeysIPV6: WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet?
}

extension GetRateBasedStatementManagedKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedKeysIPV4 = "ManagedKeysIPV4"
        case managedKeysIPV6 = "ManagedKeysIPV6"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedKeysIPV4Decoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet.self, forKey: .managedKeysIPV4)
        managedKeysIPV4 = managedKeysIPV4Decoded
        let managedKeysIPV6Decoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet.self, forKey: .managedKeysIPV6)
        managedKeysIPV6 = managedKeysIPV6Decoded
    }
}

extension GetRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension GetRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRegexPatternSetInput: Swift.Equatable {
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
}

extension GetRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.regexPatternSet = output.regexPatternSet
        } else {
            self.lockToken = nil
            self.regexPatternSet = nil
        }
    }
}

public struct GetRegexPatternSetOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    ///
    public var regexPatternSet: WAFV2ClientTypes.RegexPatternSet?

    public init (
        lockToken: Swift.String? = nil,
        regexPatternSet: WAFV2ClientTypes.RegexPatternSet? = nil
    )
    {
        self.lockToken = lockToken
        self.regexPatternSet = regexPatternSet
    }
}

struct GetRegexPatternSetOutputResponseBody: Swift.Equatable {
    let regexPatternSet: WAFV2ClientTypes.RegexPatternSet?
    let lockToken: Swift.String?
}

extension GetRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case regexPatternSet = "RegexPatternSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexPatternSetDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RegexPatternSet.self, forKey: .regexPatternSet)
        regexPatternSet = regexPatternSetDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension GetRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension GetRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetRuleGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the entity.
    public var arn: Swift.String?
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    public var id: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetRuleGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let arn: Swift.String?
}

extension GetRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension GetRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lockToken = output.lockToken
            self.ruleGroup = output.ruleGroup
        } else {
            self.lockToken = nil
            self.ruleGroup = nil
        }
    }
}

public struct GetRuleGroupOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    ///
    public var ruleGroup: WAFV2ClientTypes.RuleGroup?

    public init (
        lockToken: Swift.String? = nil,
        ruleGroup: WAFV2ClientTypes.RuleGroup? = nil
    )
    {
        self.lockToken = lockToken
        self.ruleGroup = ruleGroup
    }
}

struct GetRuleGroupOutputResponseBody: Swift.Equatable {
    let ruleGroup: WAFV2ClientTypes.RuleGroup?
    let lockToken: Swift.String?
}

extension GetRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lockToken = "LockToken"
        case ruleGroup = "RuleGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension GetSampledRequestsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleMetricName = "RuleMetricName"
        case scope = "Scope"
        case timeWindow = "TimeWindow"
        case webAclArn = "WebAclArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxItems = self.maxItems {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let ruleMetricName = self.ruleMetricName {
            try encodeContainer.encode(ruleMetricName, forKey: .ruleMetricName)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let timeWindow = self.timeWindow {
            try encodeContainer.encode(timeWindow, forKey: .timeWindow)
        }
        if let webAclArn = self.webAclArn {
            try encodeContainer.encode(webAclArn, forKey: .webAclArn)
        }
    }
}

extension GetSampledRequestsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetSampledRequestsInput: Swift.Equatable {
    /// The number of requests that you want WAF to return from among the first 5,000 requests that your Amazon Web Services resource received during the time range. If your resource received fewer requests than the value of MaxItems, GetSampledRequests returns information about all of them.
    /// This member is required.
    public var maxItems: Swift.Int?
    /// The metric name assigned to the Rule or RuleGroup dimension for which you want a sample of requests.
    /// This member is required.
    public var ruleMetricName: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The start date and time and the end date and time of the range for which you want GetSampledRequests to return a sample of requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours. If you specify a start time that's earlier than three hours ago, WAF sets it to three hours ago.
    /// This member is required.
    public var timeWindow: WAFV2ClientTypes.TimeWindow?
    /// The Amazon resource name (ARN) of the WebACL for which you want a sample of requests.
    /// This member is required.
    public var webAclArn: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        ruleMetricName: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        timeWindow: WAFV2ClientTypes.TimeWindow? = nil,
        webAclArn: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.ruleMetricName = ruleMetricName
        self.scope = scope
        self.timeWindow = timeWindow
        self.webAclArn = webAclArn
    }
}

struct GetSampledRequestsInputBody: Swift.Equatable {
    let webAclArn: Swift.String?
    let ruleMetricName: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let timeWindow: WAFV2ClientTypes.TimeWindow?
    let maxItems: Swift.Int?
}

extension GetSampledRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxItems = "MaxItems"
        case ruleMetricName = "RuleMetricName"
        case scope = "Scope"
        case timeWindow = "TimeWindow"
        case webAclArn = "WebAclArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webAclArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclArn)
        webAclArn = webAclArnDecoded
        let ruleMetricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleMetricName)
        ruleMetricName = ruleMetricNameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension GetSampledRequestsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSampledRequestsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetSampledRequestsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSampledRequestsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetSampledRequestsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.populationSize = output.populationSize
            self.sampledRequests = output.sampledRequests
            self.timeWindow = output.timeWindow
        } else {
            self.populationSize = 0
            self.sampledRequests = nil
            self.timeWindow = nil
        }
    }
}

public struct GetSampledRequestsOutputResponse: Swift.Equatable {
    /// The total number of requests from which GetSampledRequests got a sample of MaxItems requests. If PopulationSize is less than MaxItems, the sample includes every request that your Amazon Web Services resource received during the specified time range.
    public var populationSize: Swift.Int
    /// A complex type that contains detailed information about each of the requests in the sample.
    public var sampledRequests: [WAFV2ClientTypes.SampledHTTPRequest]?
    /// Usually, TimeWindow is the time range that you specified in the GetSampledRequests request. However, if your Amazon Web Services resource received more than 5,000 requests during the time range that you specified in the request, GetSampledRequests returns the time range for the first 5,000 requests. Times are in Coordinated Universal Time (UTC) format.
    public var timeWindow: WAFV2ClientTypes.TimeWindow?

    public init (
        populationSize: Swift.Int = 0,
        sampledRequests: [WAFV2ClientTypes.SampledHTTPRequest]? = nil,
        timeWindow: WAFV2ClientTypes.TimeWindow? = nil
    )
    {
        self.populationSize = populationSize
        self.sampledRequests = sampledRequests
        self.timeWindow = timeWindow
    }
}

struct GetSampledRequestsOutputResponseBody: Swift.Equatable {
    let sampledRequests: [WAFV2ClientTypes.SampledHTTPRequest]?
    let populationSize: Swift.Int
    let timeWindow: WAFV2ClientTypes.TimeWindow?
}

extension GetSampledRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case populationSize = "PopulationSize"
        case sampledRequests = "SampledRequests"
        case timeWindow = "TimeWindow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledRequestsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.SampledHTTPRequest?].self, forKey: .sampledRequests)
        var sampledRequestsDecoded0:[WAFV2ClientTypes.SampledHTTPRequest]? = nil
        if let sampledRequestsContainer = sampledRequestsContainer {
            sampledRequestsDecoded0 = [WAFV2ClientTypes.SampledHTTPRequest]()
            for structure0 in sampledRequestsContainer {
                if let structure0 = structure0 {
                    sampledRequestsDecoded0?.append(structure0)
                }
            }
        }
        sampledRequests = sampledRequestsDecoded0
        let populationSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .populationSize) ?? 0
        populationSize = populationSizeDecoded
        let timeWindowDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.TimeWindow.self, forKey: .timeWindow)
        timeWindow = timeWindowDecoded
    }
}

extension GetWebACLForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension GetWebACLForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWebACLForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource whose web ACL you want to retrieve. The ARN must be in one of the following formats:
    ///
    /// * For an Application Load Balancer: arn:aws:elasticloadbalancing:region:account-id:loadbalancer/app/load-balancer-name/load-balancer-id
    ///
    /// * For an Amazon API Gateway REST API: arn:aws:apigateway:region::/restapis/api-id/stages/stage-name
    ///
    /// * For an AppSync GraphQL API: arn:aws:appsync:region:account-id:apis/GraphQLApiId
    ///
    /// * For an Amazon Cognito user pool: arn:aws:cognito-idp:region:account-id:userpool/user-pool-id
    ///
    /// * For an App Runner service: arn:aws:apprunner:region:account-id:service/apprunner-service-name/apprunner-service-id
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct GetWebACLForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension GetWebACLForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension GetWebACLForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWebACLForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetWebACLForResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWebACLForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetWebACLForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webACL = output.webACL
        } else {
            self.webACL = nil
        }
    }
}

public struct GetWebACLForResourceOutputResponse: Swift.Equatable {
    /// The web ACL that is associated with the resource. If there is no associated resource, WAF returns a null web ACL.
    public var webACL: WAFV2ClientTypes.WebACL?

    public init (
        webACL: WAFV2ClientTypes.WebACL? = nil
    )
    {
        self.webACL = webACL
    }
}

struct GetWebACLForResourceOutputResponseBody: Swift.Equatable {
    let webACL: WAFV2ClientTypes.WebACL?
}

extension GetWebACLForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
    }
}

extension GetWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension GetWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetWebACLInput: Swift.Equatable {
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.id = id
        self.name = name
        self.scope = scope
    }
}

struct GetWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
}

extension GetWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationIntegrationURL = output.applicationIntegrationURL
            self.lockToken = output.lockToken
            self.webACL = output.webACL
        } else {
            self.applicationIntegrationURL = nil
            self.lockToken = nil
            self.webACL = nil
        }
    }
}

public struct GetWebACLOutputResponse: Swift.Equatable {
    /// The URL to use in SDK integrations with Amazon Web Services managed rule groups. For example, you can use the integration SDKs with the account takeover prevention managed rule group AWSManagedRulesATPRuleSet. This is only populated if you are using a rule group in your web ACL that integrates with your applications in this way. For more information, see [WAF client application integration](https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html) in the WAF Developer Guide.
    public var applicationIntegrationURL: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var lockToken: Swift.String?
    /// The web ACL specification. You can modify the settings in this web ACL and use it to update this web ACL or create a new one.
    public var webACL: WAFV2ClientTypes.WebACL?

    public init (
        applicationIntegrationURL: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        webACL: WAFV2ClientTypes.WebACL? = nil
    )
    {
        self.applicationIntegrationURL = applicationIntegrationURL
        self.lockToken = lockToken
        self.webACL = webACL
    }
}

struct GetWebACLOutputResponseBody: Swift.Equatable {
    let webACL: WAFV2ClientTypes.WebACL?
    let lockToken: Swift.String?
    let applicationIntegrationURL: Swift.String?
}

extension GetWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationIntegrationURL = "ApplicationIntegrationURL"
        case lockToken = "LockToken"
        case webACL = "WebACL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.WebACL.self, forKey: .webACL)
        webACL = webACLDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let applicationIntegrationURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationIntegrationURL)
        applicationIntegrationURL = applicationIntegrationURLDecoded
    }
}

extension WAFV2ClientTypes.HTTPHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFV2ClientTypes {
    /// Part of the response from [GetSampledRequests]. This is a complex type that appears as Headers in the response syntax. HTTPHeader contains the names and values of all of the headers that appear in one of the web requests.
    public struct HTTPHeader: Swift.Equatable {
        /// The name of the HTTP header.
        public var name: Swift.String?
        /// The value of the HTTP header.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension WAFV2ClientTypes.HTTPRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIP = "ClientIP"
        case country = "Country"
        case httpVersion = "HTTPVersion"
        case headers = "Headers"
        case method = "Method"
        case uri = "URI"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientIP = self.clientIP {
            try encodeContainer.encode(clientIP, forKey: .clientIP)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let httpVersion = self.httpVersion {
            try encodeContainer.encode(httpVersion, forKey: .httpVersion)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httpheader0 in headers {
                try headersContainer.encode(httpheader0)
            }
        }
        if let method = self.method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let uri = self.uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIPDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientIP)
        clientIP = clientIPDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let methodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .method)
        method = methodDecoded
        let httpVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpVersion)
        httpVersion = httpVersionDecoded
        let headersContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.HTTPHeader?].self, forKey: .headers)
        var headersDecoded0:[WAFV2ClientTypes.HTTPHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [WAFV2ClientTypes.HTTPHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Part of the response from [GetSampledRequests]. This is a complex type that appears as Request in the response syntax. HTTPRequest contains information about one of the web requests.
    public struct HTTPRequest: Swift.Equatable {
        /// The IP address that the request originated from. If the web ACL is associated with a CloudFront distribution, this is the value of one of the following fields in CloudFront access logs:
        ///
        /// * c-ip, if the viewer did not use an HTTP proxy or a load balancer to send the request
        ///
        /// * x-forwarded-for, if the viewer did use an HTTP proxy or a load balancer to send the request
        public var clientIP: Swift.String?
        /// The two-letter country code for the country that the request originated from. For a current list of country codes, see the Wikipedia entry [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        public var country: Swift.String?
        /// A complex type that contains the name and value for each header in the sampled web request.
        public var headers: [WAFV2ClientTypes.HTTPHeader]?
        /// The HTTP version specified in the sampled web request, for example, HTTP/1.1.
        public var httpVersion: Swift.String?
        /// The HTTP method specified in the sampled web request.
        public var method: Swift.String?
        /// The URI path of the request, which identifies the resource, for example, /images/daily-ad.jpg.
        public var uri: Swift.String?

        public init (
            clientIP: Swift.String? = nil,
            country: Swift.String? = nil,
            headers: [WAFV2ClientTypes.HTTPHeader]? = nil,
            httpVersion: Swift.String? = nil,
            method: Swift.String? = nil,
            uri: Swift.String? = nil
        )
        {
            self.clientIP = clientIP
            self.country = country
            self.headers = headers
            self.httpVersion = httpVersion
            self.method = method
            self.uri = uri
        }
    }

}

extension WAFV2ClientTypes.HeaderMatchPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case excludedHeaders = "ExcludedHeaders"
        case includedHeaders = "IncludedHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = self.all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let excludedHeaders = excludedHeaders {
            var excludedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedHeaders)
            for fieldtomatchdata0 in excludedHeaders {
                try excludedHeadersContainer.encode(fieldtomatchdata0)
            }
        }
        if let includedHeaders = includedHeaders {
            var includedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedHeaders)
            for fieldtomatchdata0 in includedHeaders {
                try includedHeadersContainer.encode(fieldtomatchdata0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedHeaders)
        var includedHeadersDecoded0:[Swift.String]? = nil
        if let includedHeadersContainer = includedHeadersContainer {
            includedHeadersDecoded0 = [Swift.String]()
            for string0 in includedHeadersContainer {
                if let string0 = string0 {
                    includedHeadersDecoded0?.append(string0)
                }
            }
        }
        includedHeaders = includedHeadersDecoded0
        let excludedHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedHeaders)
        var excludedHeadersDecoded0:[Swift.String]? = nil
        if let excludedHeadersContainer = excludedHeadersContainer {
            excludedHeadersDecoded0 = [Swift.String]()
            for string0 in excludedHeadersContainer {
                if let string0 = string0 {
                    excludedHeadersDecoded0?.append(string0)
                }
            }
        }
        excludedHeaders = excludedHeadersDecoded0
    }
}

extension WAFV2ClientTypes {
    /// The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either All, IncludedHeaders, or ExcludedHeaders. Example JSON: "MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }
    public struct HeaderMatchPattern: Swift.Equatable {
        /// Inspect all headers.
        public var all: WAFV2ClientTypes.All?
        /// Inspect only the headers whose keys don't match any of the strings specified here.
        public var excludedHeaders: [Swift.String]?
        /// Inspect only the headers that have a key that matches one of the strings specified here.
        public var includedHeaders: [Swift.String]?

        public init (
            all: WAFV2ClientTypes.All? = nil,
            excludedHeaders: [Swift.String]? = nil,
            includedHeaders: [Swift.String]? = nil
        )
        {
            self.all = all
            self.excludedHeaders = excludedHeaders
            self.includedHeaders = includedHeaders
        }
    }

}

extension WAFV2ClientTypes.Headers: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchPattern = "MatchPattern"
        case matchScope = "MatchScope"
        case oversizeHandling = "OversizeHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let matchPattern = self.matchPattern {
            try encodeContainer.encode(matchPattern, forKey: .matchPattern)
        }
        if let matchScope = self.matchScope {
            try encodeContainer.encode(matchScope.rawValue, forKey: .matchScope)
        }
        if let oversizeHandling = self.oversizeHandling {
            try encodeContainer.encode(oversizeHandling.rawValue, forKey: .oversizeHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchPatternDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.HeaderMatchPattern.self, forKey: .matchPattern)
        matchPattern = matchPatternDecoded
        let matchScopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.MapMatchScope.self, forKey: .matchScope)
        matchScope = matchScopeDecoded
        let oversizeHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OversizeHandling.self, forKey: .oversizeHandling)
        oversizeHandling = oversizeHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect all headers in the web request. You can specify the parts of the headers to inspect and you can narrow the set of headers to inspect by including or excluding specific keys. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. If you want to inspect just the value of a single header, use the SingleHeaderFieldToMatch setting instead. Example JSON: "Headers": { "MatchPattern": { "All": {} }, "MatchScope": "KEY", "OversizeHandling": "MATCH" }
    public struct Headers: Swift.Equatable {
        /// The filter to use to identify the subset of headers to inspect in a web request. You must specify exactly one setting: either All, IncludedHeaders, or ExcludedHeaders. Example JSON: "MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.HeaderMatchPattern?
        /// The parts of the headers to match with the rule inspection criteria. If you specify All, WAF inspects both keys and values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.MapMatchScope?
        /// What WAF should do if the headers of the request are larger than WAF can inspect. WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the headers normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init (
            matchPattern: WAFV2ClientTypes.HeaderMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.MapMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes {
    public enum IPAddressVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ipv4
        case ipv6
        case sdkUnknown(Swift.String)

        public static var allCases: [IPAddressVersion] {
            return [
                .ipv4,
                .ipv6,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ipv4: return "IPV4"
            case .ipv6: return "IPV6"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IPAddressVersion(rawValue: rawValue) ?? IPAddressVersion.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.IPSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case addresses = "Addresses"
        case description = "Description"
        case ipAddressVersion = "IPAddressVersion"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddress0 in addresses {
                try addressesContainer.encode(ipaddress0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let ipAddressVersion = self.ipAddressVersion {
            try encodeContainer.encode(ipAddressVersion.rawValue, forKey: .ipAddressVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ipAddressVersionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPAddressVersion.self, forKey: .ipAddressVersion)
        ipAddressVersion = ipAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Contains zero or more IP addresses or blocks of IP addresses specified in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. For information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). WAF assigns an ARN to each IPSet that you create. To use an IP set in a rule, you provide the ARN to the [Rule] statement [IPSetReferenceStatement].
    public struct IPSet: Swift.Equatable {
        /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
        ///
        /// * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
        ///
        /// * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
        ///
        /// * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
        ///
        /// * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
        ///
        ///
        /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
        ///
        /// * Empty array: "Addresses": []
        ///
        /// * Array with one address: "Addresses": ["192.0.2.44/32"]
        ///
        /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
        ///
        /// * INVALID specification: "Addresses": [""] INVALID
        /// This member is required.
        public var addresses: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the IP set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        /// This member is required.
        public var id: Swift.String?
        /// The version of the IP addresses, either IPV4 or IPV6.
        /// This member is required.
        public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        /// This member is required.
        public var name: Swift.String?

        public init (
            addresses: [Swift.String]? = nil,
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil,
            name: Swift.String? = nil
        )
        {
            self.addresses = addresses
            self.arn = arn
            self.description = description
            self.id = id
            self.ipAddressVersion = ipAddressVersion
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.IPSetForwardedIPConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fallbackBehavior = "FallbackBehavior"
        case headerName = "HeaderName"
        case position = "Position"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fallbackBehavior = self.fallbackBehavior {
            try encodeContainer.encode(fallbackBehavior.rawValue, forKey: .fallbackBehavior)
        }
        if let headerName = self.headerName {
            try encodeContainer.encode(headerName, forKey: .headerName)
        }
        if let position = self.position {
            try encodeContainer.encode(position.rawValue, forKey: .position)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let headerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .headerName)
        headerName = headerNameDecoded
        let fallbackBehaviorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FallbackBehavior.self, forKey: .fallbackBehavior)
        fallbackBehavior = fallbackBehaviorDecoded
        let positionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ForwardedIPPosition.self, forKey: .position)
        position = positionDecoded
    }
}

extension WAFV2ClientTypes {
    /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This configuration is used only for [IPSetReferenceStatement]. For [GeoMatchStatement] and [RateBasedStatement], use [ForwardedIPConfig] instead.
    public struct IPSetForwardedIPConfig: Swift.Equatable {
        /// The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. You can specify the following fallback behaviors:
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var fallbackBehavior: WAFV2ClientTypes.FallbackBehavior?
        /// The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to X-Forwarded-For. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        /// This member is required.
        public var headerName: Swift.String?
        /// The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be 10.1.1.1, 127.0.0.0, 10.10.10.10 where the first IP address identifies the original client and the rest identify proxies that the request went through. The options for this setting are the following:
        ///
        /// * FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.
        ///
        /// * LAST - Inspect the last IP address in the list of IP addresses in the header.
        ///
        /// * ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10.
        /// This member is required.
        public var position: WAFV2ClientTypes.ForwardedIPPosition?

        public init (
            fallbackBehavior: WAFV2ClientTypes.FallbackBehavior? = nil,
            headerName: Swift.String? = nil,
            position: WAFV2ClientTypes.ForwardedIPPosition? = nil
        )
        {
            self.fallbackBehavior = fallbackBehavior
            self.headerName = headerName
            self.position = position
        }
    }

}

extension WAFV2ClientTypes.IPSetReferenceStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case ipSetForwardedIPConfig = "IPSetForwardedIPConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let ipSetForwardedIPConfig = self.ipSetForwardedIPConfig {
            try encodeContainer.encode(ipSetForwardedIPConfig, forKey: .ipSetForwardedIPConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let ipSetForwardedIPConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPSetForwardedIPConfig.self, forKey: .ipSetForwardedIPConfig)
        ipSetForwardedIPConfig = ipSetForwardedIPConfigDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an [IPSet] that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see [CreateIPSet]. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
    public struct IPSetReferenceStatement: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the [IPSet] that this statement references.
        /// This member is required.
        public var arn: Swift.String?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.
        public var ipSetForwardedIPConfig: WAFV2ClientTypes.IPSetForwardedIPConfig?

        public init (
            arn: Swift.String? = nil,
            ipSetForwardedIPConfig: WAFV2ClientTypes.IPSetForwardedIPConfig? = nil
        )
        {
            self.arn = arn
            self.ipSetForwardedIPConfig = ipSetForwardedIPConfig
        }
    }

}

extension WAFV2ClientTypes.IPSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about an [IPSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an IPSet, and the ARN, that you provide to the [IPSetReferenceStatement] to use the address set in a [Rule].
    public struct IPSetSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the IP set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the IP set. You cannot change the name of an IPSet after you create it.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.ImmunityTimeProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case immunityTime = "ImmunityTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let immunityTime = self.immunityTime {
            try encodeContainer.encode(immunityTime, forKey: .immunityTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let immunityTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .immunityTime)
        immunityTime = immunityTimeDecoded
    }
}

extension WAFV2ClientTypes {
    /// Used for CAPTCHA and challenge token settings. Determines how long a CAPTCHA or challenge timestamp remains valid after WAF updates it for a successful CAPTCHA or challenge response.
    public struct ImmunityTimeProperty: Swift.Equatable {
        /// The amount of time, in seconds, that a CAPTCHA or challenge timestamp is considered valid by WAF. The default setting is 300. For the Challenge action, the minimum setting is 300.
        /// This member is required.
        public var immunityTime: Swift.Int?

        public init (
            immunityTime: Swift.Int? = nil
        )
        {
            self.immunityTime = immunityTime
        }
    }

}

extension WAFV2ClientTypes {
    public enum InspectionLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case common
        case targeted
        case sdkUnknown(Swift.String)

        public static var allCases: [InspectionLevel] {
            return [
                .common,
                .targeted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .common: return "COMMON"
            case .targeted: return "TARGETED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InspectionLevel(rawValue: rawValue) ?? InspectionLevel.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.JsonBody: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invalidFallbackBehavior = "InvalidFallbackBehavior"
        case matchPattern = "MatchPattern"
        case matchScope = "MatchScope"
        case oversizeHandling = "OversizeHandling"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invalidFallbackBehavior = self.invalidFallbackBehavior {
            try encodeContainer.encode(invalidFallbackBehavior.rawValue, forKey: .invalidFallbackBehavior)
        }
        if let matchPattern = self.matchPattern {
            try encodeContainer.encode(matchPattern, forKey: .matchPattern)
        }
        if let matchScope = self.matchScope {
            try encodeContainer.encode(matchScope.rawValue, forKey: .matchScope)
        }
        if let oversizeHandling = self.oversizeHandling {
            try encodeContainer.encode(oversizeHandling.rawValue, forKey: .oversizeHandling)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchPatternDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.JsonMatchPattern.self, forKey: .matchPattern)
        matchPattern = matchPatternDecoded
        let matchScopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.JsonMatchScope.self, forKey: .matchScope)
        matchScope = matchScopeDecoded
        let invalidFallbackBehaviorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.BodyParsingFallbackBehavior.self, forKey: .invalidFallbackBehavior)
        invalidFallbackBehavior = invalidFallbackBehaviorDecoded
        let oversizeHandlingDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OversizeHandling.self, forKey: .oversizeHandling)
        oversizeHandling = oversizeHandlingDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect the body of the web request as JSON. The body immediately follows the request headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON that result from the matches that you indicate. Example JSON: "JsonBody": { "MatchPattern": { "All": {} }, "MatchScope": "ALL" }
    public struct JsonBody: Swift.Equatable {
        /// What WAF should do if it fails to completely parse the JSON body. The options are the following:
        ///
        /// * EVALUATE_AS_STRING - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array. WAF parses the JSON in the following examples as two valid key, value pairs:
        ///
        /// * Missing comma: {"key1":"value1""key2":"value2"}
        ///
        /// * Missing colon: {"key1":"value1","key2""value2"}
        ///
        /// * Extra colons: {"key1"::"value1","key2""value2"}
        public var invalidFallbackBehavior: WAFV2ClientTypes.BodyParsingFallbackBehavior?
        /// The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria.
        /// This member is required.
        public var matchPattern: WAFV2ClientTypes.JsonMatchPattern?
        /// The parts of the JSON to match against using the MatchPattern. If you specify All, WAF matches against keys and values.
        /// This member is required.
        public var matchScope: WAFV2ClientTypes.JsonMatchScope?
        /// What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the body normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// You can combine the MATCH or NO_MATCH settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. Default: CONTINUE
        public var oversizeHandling: WAFV2ClientTypes.OversizeHandling?

        public init (
            invalidFallbackBehavior: WAFV2ClientTypes.BodyParsingFallbackBehavior? = nil,
            matchPattern: WAFV2ClientTypes.JsonMatchPattern? = nil,
            matchScope: WAFV2ClientTypes.JsonMatchScope? = nil,
            oversizeHandling: WAFV2ClientTypes.OversizeHandling? = nil
        )
        {
            self.invalidFallbackBehavior = invalidFallbackBehavior
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}

extension WAFV2ClientTypes.JsonMatchPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case includedPaths = "IncludedPaths"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = self.all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let includedPaths = includedPaths {
            var includedPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedPaths)
            for jsonpointerpath0 in includedPaths {
                try includedPathsContainer.encode(jsonpointerpath0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedPathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedPaths)
        var includedPathsDecoded0:[Swift.String]? = nil
        if let includedPathsContainer = includedPathsContainer {
            includedPathsDecoded0 = [Swift.String]()
            for string0 in includedPathsContainer {
                if let string0 = string0 {
                    includedPathsDecoded0?.append(string0)
                }
            }
        }
        includedPaths = includedPathsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. This is used with the [FieldToMatch] option JsonBody.
    public struct JsonMatchPattern: Swift.Equatable {
        /// Match all of the elements. See also MatchScope in [JsonBody]. You must specify either this setting or the IncludedPaths setting, but not both.
        public var all: WAFV2ClientTypes.All?
        /// Match only the specified include paths. See also MatchScope in [JsonBody]. Provide the include paths using JSON Pointer syntax. For example, "IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]. For information about this syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). You must specify either this setting or the All setting, but not both. Don't use this option to include all paths. Instead, use the All setting.
        public var includedPaths: [Swift.String]?

        public init (
            all: WAFV2ClientTypes.All? = nil,
            includedPaths: [Swift.String]? = nil
        )
        {
            self.all = all
            self.includedPaths = includedPaths
        }
    }

}

extension WAFV2ClientTypes {
    public enum JsonMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [JsonMatchScope] {
            return [
                .all,
                .key,
                .value,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JsonMatchScope(rawValue: rawValue) ?? JsonMatchScope.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.Label: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single label container. This is used as an element of a label array in multiple contexts, for example, in RuleLabels inside a [Rule] and in Labels inside a [SampledHTTPRequest].
    public struct Label: Swift.Equatable {
        /// The label string.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes {
    public enum LabelMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case label
        case namespace
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelMatchScope] {
            return [
                .label,
                .namespace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .label: return "LABEL"
            case .namespace: return "NAMESPACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LabelMatchScope(rawValue: rawValue) ?? LabelMatchScope.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.LabelMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LabelMatchScope.self, forKey: .scope)
        scope = scopeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement.
    public struct LabelMatchStatement: Swift.Equatable {
        /// The string to match against. The setting you provide for this depends on the match statement's Scope setting:
        ///
        /// * If the Scope indicates LABEL, then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.
        ///
        /// * If the Scope indicates NAMESPACE, then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.
        ///
        ///
        /// Labels are case sensitive and components of a label must be separated by colon, for example NS1:NS2:name.
        /// This member is required.
        public var key: Swift.String?
        /// Specify whether you want to match using the label name or just the namespace.
        /// This member is required.
        public var scope: WAFV2ClientTypes.LabelMatchScope?

        public init (
            key: Swift.String? = nil,
            scope: WAFV2ClientTypes.LabelMatchScope? = nil
        )
        {
            self.key = key
            self.scope = scope
        }
    }

}

extension WAFV2ClientTypes.LabelNameCondition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelName = "LabelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelName = self.labelName {
            try encodeContainer.encode(labelName, forKey: .labelName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelName)
        labelName = labelNameDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single label name condition for a [Condition] in a logging filter.
    public struct LabelNameCondition: Swift.Equatable {
        /// The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.
        /// This member is required.
        public var labelName: Swift.String?

        public init (
            labelName: Swift.String? = nil
        )
        {
            self.labelName = labelName
        }
    }

}

extension WAFV2ClientTypes.LabelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFV2ClientTypes {
    /// List of labels used by one or more of the rules of a [RuleGroup]. This summary object is used for the following rule group lists:
    ///
    /// * AvailableLabels - Labels that rules add to matching requests. These labels are defined in the RuleLabels for a [Rule].
    ///
    /// * ConsumedLabels - Labels that rules match against. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
    public struct LabelSummary: Swift.Equatable {
        /// An individual label specification.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension ListAvailableManagedRuleGroupVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextMarker = "NextMarker"
        case scope = "Scope"
        case vendorName = "VendorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let vendorName = self.vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
    }
}

extension ListAvailableManagedRuleGroupVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAvailableManagedRuleGroupVersionsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
    /// This member is required.
    public var name: Swift.String?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
    /// This member is required.
    public var vendorName: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        vendorName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextMarker = nextMarker
        self.scope = scope
        self.vendorName = vendorName
    }
}

struct ListAvailableManagedRuleGroupVersionsInputBody: Swift.Equatable {
    let vendorName: Swift.String?
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListAvailableManagedRuleGroupVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextMarker = "NextMarker"
        case scope = "Scope"
        case vendorName = "VendorName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListAvailableManagedRuleGroupVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAvailableManagedRuleGroupVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAvailableManagedRuleGroupVersionsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAvailableManagedRuleGroupVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAvailableManagedRuleGroupVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.currentDefaultVersion = output.currentDefaultVersion
            self.nextMarker = output.nextMarker
            self.versions = output.versions
        } else {
            self.currentDefaultVersion = nil
            self.nextMarker = nil
            self.versions = nil
        }
    }
}

public struct ListAvailableManagedRuleGroupVersionsOutputResponse: Swift.Equatable {
    /// The name of the version that's currently set as the default.
    public var currentDefaultVersion: Swift.String?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The versions that are currently available for the specified managed rule group.
    public var versions: [WAFV2ClientTypes.ManagedRuleGroupVersion]?

    public init (
        currentDefaultVersion: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        versions: [WAFV2ClientTypes.ManagedRuleGroupVersion]? = nil
    )
    {
        self.currentDefaultVersion = currentDefaultVersion
        self.nextMarker = nextMarker
        self.versions = versions
    }
}

struct ListAvailableManagedRuleGroupVersionsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let versions: [WAFV2ClientTypes.ManagedRuleGroupVersion]?
    let currentDefaultVersion: Swift.String?
}

extension ListAvailableManagedRuleGroupVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentDefaultVersion = "CurrentDefaultVersion"
        case nextMarker = "NextMarker"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let versionsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ManagedRuleGroupVersion?].self, forKey: .versions)
        var versionsDecoded0:[WAFV2ClientTypes.ManagedRuleGroupVersion]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [WAFV2ClientTypes.ManagedRuleGroupVersion]()
            for structure0 in versionsContainer {
                if let structure0 = structure0 {
                    versionsDecoded0?.append(structure0)
                }
            }
        }
        versions = versionsDecoded0
        let currentDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentDefaultVersion)
        currentDefaultVersion = currentDefaultVersionDecoded
    }
}

extension ListAvailableManagedRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListAvailableManagedRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAvailableManagedRuleGroupsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListAvailableManagedRuleGroupsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListAvailableManagedRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListAvailableManagedRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAvailableManagedRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAvailableManagedRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAvailableManagedRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAvailableManagedRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedRuleGroups = output.managedRuleGroups
            self.nextMarker = output.nextMarker
        } else {
            self.managedRuleGroups = nil
            self.nextMarker = nil
        }
    }
}

public struct ListAvailableManagedRuleGroupsOutputResponse: Swift.Equatable {
    ///
    public var managedRuleGroups: [WAFV2ClientTypes.ManagedRuleGroupSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init (
        managedRuleGroups: [WAFV2ClientTypes.ManagedRuleGroupSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedRuleGroups = managedRuleGroups
        self.nextMarker = nextMarker
    }
}

struct ListAvailableManagedRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let managedRuleGroups: [WAFV2ClientTypes.ManagedRuleGroupSummary]?
}

extension ListAvailableManagedRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRuleGroups = "ManagedRuleGroups"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let managedRuleGroupsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ManagedRuleGroupSummary?].self, forKey: .managedRuleGroups)
        var managedRuleGroupsDecoded0:[WAFV2ClientTypes.ManagedRuleGroupSummary]? = nil
        if let managedRuleGroupsContainer = managedRuleGroupsContainer {
            managedRuleGroupsDecoded0 = [WAFV2ClientTypes.ManagedRuleGroupSummary]()
            for structure0 in managedRuleGroupsContainer {
                if let structure0 = structure0 {
                    managedRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        managedRuleGroups = managedRuleGroupsDecoded0
    }
}

extension ListIPSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListIPSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListIPSetsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListIPSetsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListIPSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListIPSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIPSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListIPSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIPSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListIPSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ipSets = output.ipSets
            self.nextMarker = output.nextMarker
        } else {
            self.ipSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListIPSetsOutputResponse: Swift.Equatable {
    /// Array of IPSets. This may not be the full list of IPSets that you have defined. See the Limit specification for this request.
    public var ipSets: [WAFV2ClientTypes.IPSetSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init (
        ipSets: [WAFV2ClientTypes.IPSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.ipSets = ipSets
        self.nextMarker = nextMarker
    }
}

struct ListIPSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let ipSets: [WAFV2ClientTypes.IPSetSummary]?
}

extension ListIPSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipSets = "IPSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ipSetsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.IPSetSummary?].self, forKey: .ipSets)
        var ipSetsDecoded0:[WAFV2ClientTypes.IPSetSummary]? = nil
        if let ipSetsContainer = ipSetsContainer {
            ipSetsDecoded0 = [WAFV2ClientTypes.IPSetSummary]()
            for structure0 in ipSetsContainer {
                if let structure0 = structure0 {
                    ipSetsDecoded0?.append(structure0)
                }
            }
        }
        ipSets = ipSetsDecoded0
    }
}

extension ListLoggingConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListLoggingConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLoggingConfigurationsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListLoggingConfigurationsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListLoggingConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListLoggingConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLoggingConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListLoggingConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLoggingConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListLoggingConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfigurations = output.loggingConfigurations
            self.nextMarker = output.nextMarker
        } else {
            self.loggingConfigurations = nil
            self.nextMarker = nil
        }
    }
}

public struct ListLoggingConfigurationsOutputResponse: Swift.Equatable {
    ///
    public var loggingConfigurations: [WAFV2ClientTypes.LoggingConfiguration]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init (
        loggingConfigurations: [WAFV2ClientTypes.LoggingConfiguration]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.loggingConfigurations = loggingConfigurations
        self.nextMarker = nextMarker
    }
}

struct ListLoggingConfigurationsOutputResponseBody: Swift.Equatable {
    let loggingConfigurations: [WAFV2ClientTypes.LoggingConfiguration]?
    let nextMarker: Swift.String?
}

extension ListLoggingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfigurations = "LoggingConfigurations"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.LoggingConfiguration?].self, forKey: .loggingConfigurations)
        var loggingConfigurationsDecoded0:[WAFV2ClientTypes.LoggingConfiguration]? = nil
        if let loggingConfigurationsContainer = loggingConfigurationsContainer {
            loggingConfigurationsDecoded0 = [WAFV2ClientTypes.LoggingConfiguration]()
            for structure0 in loggingConfigurationsContainer {
                if let structure0 = structure0 {
                    loggingConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        loggingConfigurations = loggingConfigurationsDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListManagedRuleSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListManagedRuleSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListManagedRuleSetsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListManagedRuleSetsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListManagedRuleSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListManagedRuleSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListManagedRuleSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListManagedRuleSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListManagedRuleSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListManagedRuleSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.managedRuleSets = output.managedRuleSets
            self.nextMarker = output.nextMarker
        } else {
            self.managedRuleSets = nil
            self.nextMarker = nil
        }
    }
}

public struct ListManagedRuleSetsOutputResponse: Swift.Equatable {
    /// Your managed rule sets.
    public var managedRuleSets: [WAFV2ClientTypes.ManagedRuleSetSummary]?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?

    public init (
        managedRuleSets: [WAFV2ClientTypes.ManagedRuleSetSummary]? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.managedRuleSets = managedRuleSets
        self.nextMarker = nextMarker
    }
}

struct ListManagedRuleSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let managedRuleSets: [WAFV2ClientTypes.ManagedRuleSetSummary]?
}

extension ListManagedRuleSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRuleSets = "ManagedRuleSets"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let managedRuleSetsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ManagedRuleSetSummary?].self, forKey: .managedRuleSets)
        var managedRuleSetsDecoded0:[WAFV2ClientTypes.ManagedRuleSetSummary]? = nil
        if let managedRuleSetsContainer = managedRuleSetsContainer {
            managedRuleSetsDecoded0 = [WAFV2ClientTypes.ManagedRuleSetSummary]()
            for structure0 in managedRuleSetsContainer {
                if let structure0 = structure0 {
                    managedRuleSetsDecoded0?.append(structure0)
                }
            }
        }
        managedRuleSets = managedRuleSetsDecoded0
    }
}

extension ListMobileSdkReleasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case platform = "Platform"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
    }
}

extension ListMobileSdkReleasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListMobileSdkReleasesInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The device platform to retrieve the list for.
    /// This member is required.
    public var platform: WAFV2ClientTypes.Platform?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        platform: WAFV2ClientTypes.Platform? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.platform = platform
    }
}

struct ListMobileSdkReleasesInputBody: Swift.Equatable {
    let platform: WAFV2ClientTypes.Platform?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListMobileSdkReleasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case platform = "Platform"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListMobileSdkReleasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMobileSdkReleasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListMobileSdkReleasesOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMobileSdkReleasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListMobileSdkReleasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.releaseSummaries = output.releaseSummaries
        } else {
            self.nextMarker = nil
            self.releaseSummaries = nil
        }
    }
}

public struct ListMobileSdkReleasesOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// High level information for the available SDK releases.
    public var releaseSummaries: [WAFV2ClientTypes.ReleaseSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        releaseSummaries: [WAFV2ClientTypes.ReleaseSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.releaseSummaries = releaseSummaries
    }
}

struct ListMobileSdkReleasesOutputResponseBody: Swift.Equatable {
    let releaseSummaries: [WAFV2ClientTypes.ReleaseSummary]?
    let nextMarker: Swift.String?
}

extension ListMobileSdkReleasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case releaseSummaries = "ReleaseSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseSummariesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ReleaseSummary?].self, forKey: .releaseSummaries)
        var releaseSummariesDecoded0:[WAFV2ClientTypes.ReleaseSummary]? = nil
        if let releaseSummariesContainer = releaseSummariesContainer {
            releaseSummariesDecoded0 = [WAFV2ClientTypes.ReleaseSummary]()
            for structure0 in releaseSummariesContainer {
                if let structure0 = structure0 {
                    releaseSummariesDecoded0?.append(structure0)
                }
            }
        }
        releaseSummaries = releaseSummariesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}

extension ListRegexPatternSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListRegexPatternSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRegexPatternSetsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListRegexPatternSetsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListRegexPatternSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListRegexPatternSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRegexPatternSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRegexPatternSetsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRegexPatternSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRegexPatternSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.regexPatternSets = output.regexPatternSets
        } else {
            self.nextMarker = nil
            self.regexPatternSets = nil
        }
    }
}

public struct ListRegexPatternSetsOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    ///
    public var regexPatternSets: [WAFV2ClientTypes.RegexPatternSetSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        regexPatternSets: [WAFV2ClientTypes.RegexPatternSetSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.regexPatternSets = regexPatternSets
    }
}

struct ListRegexPatternSetsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let regexPatternSets: [WAFV2ClientTypes.RegexPatternSetSummary]?
}

extension ListRegexPatternSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case regexPatternSets = "RegexPatternSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let regexPatternSetsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.RegexPatternSetSummary?].self, forKey: .regexPatternSets)
        var regexPatternSetsDecoded0:[WAFV2ClientTypes.RegexPatternSetSummary]? = nil
        if let regexPatternSetsContainer = regexPatternSetsContainer {
            regexPatternSetsDecoded0 = [WAFV2ClientTypes.RegexPatternSetSummary]()
            for structure0 in regexPatternSetsContainer {
                if let structure0 = structure0 {
                    regexPatternSetsDecoded0?.append(structure0)
                }
            }
        }
        regexPatternSets = regexPatternSetsDecoded0
    }
}

extension ListResourcesForWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case webACLArn = "WebACLArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let webACLArn = self.webACLArn {
            try encodeContainer.encode(webACLArn, forKey: .webACLArn)
        }
    }
}

extension ListResourcesForWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListResourcesForWebACLInput: Swift.Equatable {
    /// Used for web ACLs that are scoped for regional applications. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. If you don't provide a resource type, the call uses the resource type APPLICATION_LOAD_BALANCER. Default: APPLICATION_LOAD_BALANCER
    public var resourceType: WAFV2ClientTypes.ResourceType?
    /// The Amazon Resource Name (ARN) of the web ACL.
    /// This member is required.
    public var webACLArn: Swift.String?

    public init (
        resourceType: WAFV2ClientTypes.ResourceType? = nil,
        webACLArn: Swift.String? = nil
    )
    {
        self.resourceType = resourceType
        self.webACLArn = webACLArn
    }
}

struct ListResourcesForWebACLInputBody: Swift.Equatable {
    let webACLArn: Swift.String?
    let resourceType: WAFV2ClientTypes.ResourceType?
}

extension ListResourcesForWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType = "ResourceType"
        case webACLArn = "WebACLArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webACLArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webACLArn)
        webACLArn = webACLArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension ListResourcesForWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListResourcesForWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListResourcesForWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListResourcesForWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListResourcesForWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArns = output.resourceArns
        } else {
            self.resourceArns = nil
        }
    }
}

public struct ListResourcesForWebACLOutputResponse: Swift.Equatable {
    /// The array of Amazon Resource Names (ARNs) of the associated resources.
    public var resourceArns: [Swift.String]?

    public init (
        resourceArns: [Swift.String]? = nil
    )
    {
        self.resourceArns = resourceArns
    }
}

struct ListResourcesForWebACLOutputResponseBody: Swift.Equatable {
    let resourceArns: [Swift.String]?
}

extension ListResourcesForWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArns = "ResourceArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
    }
}

extension ListRuleGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListRuleGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListRuleGroupsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListRuleGroupsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListRuleGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListRuleGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRuleGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListRuleGroupsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRuleGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListRuleGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.ruleGroups = output.ruleGroups
        } else {
            self.nextMarker = nil
            self.ruleGroups = nil
        }
    }
}

public struct ListRuleGroupsOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    ///
    public var ruleGroups: [WAFV2ClientTypes.RuleGroupSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        ruleGroups: [WAFV2ClientTypes.RuleGroupSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.ruleGroups = ruleGroups
    }
}

struct ListRuleGroupsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let ruleGroups: [WAFV2ClientTypes.RuleGroupSummary]?
}

extension ListRuleGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case ruleGroups = "RuleGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let ruleGroupsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.RuleGroupSummary?].self, forKey: .ruleGroups)
        var ruleGroupsDecoded0:[WAFV2ClientTypes.RuleGroupSummary]? = nil
        if let ruleGroupsContainer = ruleGroupsContainer {
            ruleGroupsDecoded0 = [WAFV2ClientTypes.RuleGroupSummary]()
            for structure0 in ruleGroupsContainer {
                if let structure0 = structure0 {
                    ruleGroupsDecoded0?.append(structure0)
                }
            }
        }
        ruleGroups = ruleGroupsDecoded0
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let limit: Swift.Int?
    let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.tagInfoForResource = output.tagInfoForResource
        } else {
            self.nextMarker = nil
            self.tagInfoForResource = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// The collection of tagging definitions for the resource.
    public var tagInfoForResource: WAFV2ClientTypes.TagInfoForResource?

    public init (
        nextMarker: Swift.String? = nil,
        tagInfoForResource: WAFV2ClientTypes.TagInfoForResource? = nil
    )
    {
        self.nextMarker = nextMarker
        self.tagInfoForResource = tagInfoForResource
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let tagInfoForResource: WAFV2ClientTypes.TagInfoForResource?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case tagInfoForResource = "TagInfoForResource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let tagInfoForResourceDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.TagInfoForResource.self, forKey: .tagInfoForResource)
        tagInfoForResource = tagInfoForResourceDecoded
    }
}

extension ListWebACLsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextMarker = self.nextMarker {
            try encodeContainer.encode(nextMarker, forKey: .nextMarker)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension ListWebACLsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWebACLsInput: Swift.Equatable {
    /// The maximum number of objects that you want WAF to return for this request. If more objects are available, in the response, WAF provides a NextMarker value that you can use in a subsequent call to get the next batch of objects.
    public var limit: Swift.Int?
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        limit: Swift.Int? = nil,
        nextMarker: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.limit = limit
        self.nextMarker = nextMarker
        self.scope = scope
    }
}

struct ListWebACLsInputBody: Swift.Equatable {
    let scope: WAFV2ClientTypes.Scope?
    let nextMarker: Swift.String?
    let limit: Swift.Int?
}

extension ListWebACLsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextMarker = "NextMarker"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListWebACLsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWebACLsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWebACLsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWebACLsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWebACLsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextMarker = output.nextMarker
            self.webACLs = output.webACLs
        } else {
            self.nextMarker = nil
            self.webACLs = nil
        }
    }
}

public struct ListWebACLsOutputResponse: Swift.Equatable {
    /// When you request a list of objects with a Limit setting, if the number of objects that are still available for retrieval exceeds the limit, WAF returns a NextMarker value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.
    public var nextMarker: Swift.String?
    ///
    public var webACLs: [WAFV2ClientTypes.WebACLSummary]?

    public init (
        nextMarker: Swift.String? = nil,
        webACLs: [WAFV2ClientTypes.WebACLSummary]? = nil
    )
    {
        self.nextMarker = nextMarker
        self.webACLs = webACLs
    }
}

struct ListWebACLsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let webACLs: [WAFV2ClientTypes.WebACLSummary]?
}

extension ListWebACLsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case webACLs = "WebACLs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let webACLsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.WebACLSummary?].self, forKey: .webACLs)
        var webACLsDecoded0:[WAFV2ClientTypes.WebACLSummary]? = nil
        if let webACLsContainer = webACLsContainer {
            webACLsDecoded0 = [WAFV2ClientTypes.WebACLSummary]()
            for structure0 in webACLsContainer {
                if let structure0 = structure0 {
                    webACLsDecoded0?.append(structure0)
                }
            }
        }
        webACLs = webACLsDecoded0
    }
}

extension WAFV2ClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
        case loggingFilter = "LoggingFilter"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case redactedFields = "RedactedFields"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for resourcearn0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(resourcearn0)
            }
        }
        if let loggingFilter = self.loggingFilter {
            try encodeContainer.encode(loggingFilter, forKey: .loggingFilter)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let redactedFields = redactedFields {
            var redactedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redactedFields)
            for fieldtomatch0 in redactedFields {
                try redactedFieldsContainer.encode(fieldtomatch0)
            }
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[Swift.String]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [Swift.String]()
            for string0 in logDestinationConfigsContainer {
                if let string0 = string0 {
                    logDestinationConfigsDecoded0?.append(string0)
                }
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
        let redactedFieldsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.FieldToMatch?].self, forKey: .redactedFields)
        var redactedFieldsDecoded0:[WAFV2ClientTypes.FieldToMatch]? = nil
        if let redactedFieldsContainer = redactedFieldsContainer {
            redactedFieldsDecoded0 = [WAFV2ClientTypes.FieldToMatch]()
            for structure0 in redactedFieldsContainer {
                if let structure0 = structure0 {
                    redactedFieldsDecoded0?.append(structure0)
                }
            }
        }
        redactedFields = redactedFieldsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .managedByFirewallManager) ?? false
        managedByFirewallManager = managedByFirewallManagerDecoded
        let loggingFilterDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LoggingFilter.self, forKey: .loggingFilter)
        loggingFilter = loggingFilterDecoded
    }
}

extension WAFV2ClientTypes {
    /// Defines an association between logging destinations and a web ACL resource, for logging from WAF. As part of the association, you can specify parts of the standard logging fields to keep out of the logs and you can specify filters so that you log only a subset of the logging records. You can define one logging destination per web ACL. You can access information about the traffic that WAF inspects using the following steps:
    ///
    /// * Create your logging destination. You can use an Amazon CloudWatch Logs log group, an Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose. The name that you give the destination must start with aws-waf-logs-. Depending on the type of destination, you might need to configure additional settings or permissions. For configuration requirements and pricing information for each destination type, see [Logging web ACL traffic](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
    ///
    /// * Associate your logging destination to your web ACL using a PutLoggingConfiguration request.
    ///
    ///
    /// When you successfully enable logging using a PutLoggingConfiguration request, WAF creates an additional role or policy that is required to write logs to the logging destination. For an Amazon CloudWatch Logs log group, WAF creates a resource policy on the log group. For an Amazon S3 bucket, WAF creates a bucket policy. For an Amazon Kinesis Data Firehose, WAF creates a service-linked role. For additional information about web ACL logging, see [Logging web ACL traffic information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
    public struct LoggingConfiguration: Swift.Equatable {
        /// The logging destination configuration that you want to associate with the web ACL. You can associate one logging destination to a web ACL.
        /// This member is required.
        public var logDestinationConfigs: [Swift.String]?
        /// Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
        public var loggingFilter: WAFV2ClientTypes.LoggingFilter?
        /// Indicates whether the logging configuration was created by Firewall Manager, as part of an WAF policy configuration. If true, only Firewall Manager can modify or delete the configuration.
        public var managedByFirewallManager: Swift.Bool
        /// The parts of the request that you want to keep out of the logs. For example, if you redact the SingleHeader field, the HEADER field in the logs will be REDACTED. You can specify only the following fields for redaction: UriPath, QueryString, SingleHeader, Method, and JsonBody.
        public var redactedFields: [WAFV2ClientTypes.FieldToMatch]?
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with LogDestinationConfigs.
        /// This member is required.
        public var resourceArn: Swift.String?

        public init (
            logDestinationConfigs: [Swift.String]? = nil,
            loggingFilter: WAFV2ClientTypes.LoggingFilter? = nil,
            managedByFirewallManager: Swift.Bool = false,
            redactedFields: [WAFV2ClientTypes.FieldToMatch]? = nil,
            resourceArn: Swift.String? = nil
        )
        {
            self.logDestinationConfigs = logDestinationConfigs
            self.loggingFilter = loggingFilter
            self.managedByFirewallManager = managedByFirewallManager
            self.redactedFields = redactedFields
            self.resourceArn = resourceArn
        }
    }

}

extension WAFV2ClientTypes.LoggingFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultBehavior = "DefaultBehavior"
        case filters = "Filters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultBehavior = self.defaultBehavior {
            try encodeContainer.encode(defaultBehavior.rawValue, forKey: .defaultBehavior)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filter0 in filters {
                try filtersContainer.encode(filter0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[WAFV2ClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [WAFV2ClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let defaultBehaviorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FilterBehavior.self, forKey: .defaultBehavior)
        defaultBehavior = defaultBehaviorDecoded
    }
}

extension WAFV2ClientTypes {
    /// Filtering that specifies which web requests are kept in the logs and which are dropped, defined for a web ACL's [LoggingConfiguration]. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
    public struct LoggingFilter: Swift.Equatable {
        /// Default handling for logs that don't match any of the specified filtering conditions.
        /// This member is required.
        public var defaultBehavior: WAFV2ClientTypes.FilterBehavior?
        /// The filters that you want to apply to the logs.
        /// This member is required.
        public var filters: [WAFV2ClientTypes.Filter]?

        public init (
            defaultBehavior: WAFV2ClientTypes.FilterBehavior? = nil,
            filters: [WAFV2ClientTypes.Filter]? = nil
        )
        {
            self.defaultBehavior = defaultBehavior
            self.filters = filters
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleGroupConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsManagedRulesATPRuleSet = "AWSManagedRulesATPRuleSet"
        case awsManagedRulesBotControlRuleSet = "AWSManagedRulesBotControlRuleSet"
        case loginPath = "LoginPath"
        case passwordField = "PasswordField"
        case payloadType = "PayloadType"
        case usernameField = "UsernameField"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsManagedRulesATPRuleSet = self.awsManagedRulesATPRuleSet {
            try encodeContainer.encode(awsManagedRulesATPRuleSet, forKey: .awsManagedRulesATPRuleSet)
        }
        if let awsManagedRulesBotControlRuleSet = self.awsManagedRulesBotControlRuleSet {
            try encodeContainer.encode(awsManagedRulesBotControlRuleSet, forKey: .awsManagedRulesBotControlRuleSet)
        }
        if let loginPath = self.loginPath {
            try encodeContainer.encode(loginPath, forKey: .loginPath)
        }
        if let passwordField = self.passwordField {
            try encodeContainer.encode(passwordField, forKey: .passwordField)
        }
        if let payloadType = self.payloadType {
            try encodeContainer.encode(payloadType.rawValue, forKey: .payloadType)
        }
        if let usernameField = self.usernameField {
            try encodeContainer.encode(usernameField, forKey: .usernameField)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loginPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loginPath)
        loginPath = loginPathDecoded
        let payloadTypeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.PayloadType.self, forKey: .payloadType)
        payloadType = payloadTypeDecoded
        let usernameFieldDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.UsernameField.self, forKey: .usernameField)
        usernameField = usernameFieldDecoded
        let passwordFieldDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.PasswordField.self, forKey: .passwordField)
        passwordField = passwordFieldDecoded
        let awsManagedRulesBotControlRuleSetDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet.self, forKey: .awsManagedRulesBotControlRuleSet)
        awsManagedRulesBotControlRuleSet = awsManagedRulesBotControlRuleSetDecoded
        let awsManagedRulesATPRuleSetDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AWSManagedRulesATPRuleSet.self, forKey: .awsManagedRulesATPRuleSet)
        awsManagedRulesATPRuleSet = awsManagedRulesATPRuleSetDecoded
    }
}

extension WAFV2ClientTypes {
    /// Additional information that's used by a managed rule group. Many managed rule groups don't require this. Use the AWSManagedRulesATPRuleSet configuration object for the account takeover prevention managed rule group, to provide information such as the sign-in page of your application and the type of content to accept or reject from the client. Use the AWSManagedRulesBotControlRuleSet configuration object to configure the protection level that you want the Bot Control rule group to use. For example specifications, see the examples section of [CreateWebACL].
    public struct ManagedRuleGroupConfig: Swift.Equatable {
        /// Additional configuration for using the account takeover prevention (ATP) managed rule group, AWSManagedRulesATPRuleSet. Use this to provide login request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to login requests. This configuration replaces the individual configuration fields in ManagedRuleGroupConfig and provides additional feature configuration. For information about using the ATP managed rule group, see [WAF Fraud Control account takeover prevention (ATP) rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-atp.html) and [WAF Fraud Control account takeover prevention (ATP)](https://docs.aws.amazon.com/waf/latest/developerguide/waf-atp.html) in the WAF Developer Guide.
        public var awsManagedRulesATPRuleSet: WAFV2ClientTypes.AWSManagedRulesATPRuleSet?
        /// Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see [WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html) and [WAF Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html) in the WAF Developer Guide.
        public var awsManagedRulesBotControlRuleSet: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet?
        /// Instead of this setting, provide your configuration under AWSManagedRulesATPRuleSet.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet LoginPath")
        public var loginPath: Swift.String?
        /// Instead of this setting, provide your configuration under AWSManagedRulesATPRuleSetRequestInspection.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PasswordField")
        public var passwordField: WAFV2ClientTypes.PasswordField?
        /// Instead of this setting, provide your configuration under AWSManagedRulesATPRuleSetRequestInspection.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PayloadType")
        public var payloadType: WAFV2ClientTypes.PayloadType?
        /// Instead of this setting, provide your configuration under AWSManagedRulesATPRuleSetRequestInspection.
        @available(*, deprecated, message: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection UsernameField")
        public var usernameField: WAFV2ClientTypes.UsernameField?

        public init (
            awsManagedRulesATPRuleSet: WAFV2ClientTypes.AWSManagedRulesATPRuleSet? = nil,
            awsManagedRulesBotControlRuleSet: WAFV2ClientTypes.AWSManagedRulesBotControlRuleSet? = nil,
            loginPath: Swift.String? = nil,
            passwordField: WAFV2ClientTypes.PasswordField? = nil,
            payloadType: WAFV2ClientTypes.PayloadType? = nil,
            usernameField: WAFV2ClientTypes.UsernameField? = nil
        )
        {
            self.awsManagedRulesATPRuleSet = awsManagedRulesATPRuleSet
            self.awsManagedRulesBotControlRuleSet = awsManagedRulesBotControlRuleSet
            self.loginPath = loginPath
            self.passwordField = passwordField
            self.payloadType = payloadType
            self.usernameField = usernameField
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleGroupStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedRules = "ExcludedRules"
        case managedRuleGroupConfigs = "ManagedRuleGroupConfigs"
        case name = "Name"
        case ruleActionOverrides = "RuleActionOverrides"
        case scopeDownStatement = "ScopeDownStatement"
        case vendorName = "VendorName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrule0 in excludedRules {
                try excludedRulesContainer.encode(excludedrule0)
            }
        }
        if let managedRuleGroupConfigs = managedRuleGroupConfigs {
            var managedRuleGroupConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedRuleGroupConfigs)
            for managedrulegroupconfig0 in managedRuleGroupConfigs {
                try managedRuleGroupConfigsContainer.encode(managedrulegroupconfig0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleActionOverrides = ruleActionOverrides {
            var ruleActionOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleActionOverrides)
            for ruleactionoverride0 in ruleActionOverrides {
                try ruleActionOverridesContainer.encode(ruleactionoverride0)
            }
        }
        if let scopeDownStatement = self.scopeDownStatement {
            try encodeContainer.encode(scopeDownStatement.value, forKey: .scopeDownStatement)
        }
        if let vendorName = self.vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[WAFV2ClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [WAFV2ClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
        let scopeDownStatementDecoded = try containerValues.decodeIfPresent(Box<WAFV2ClientTypes.Statement>.self, forKey: .scopeDownStatement)
        scopeDownStatement = scopeDownStatementDecoded
        let managedRuleGroupConfigsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ManagedRuleGroupConfig?].self, forKey: .managedRuleGroupConfigs)
        var managedRuleGroupConfigsDecoded0:[WAFV2ClientTypes.ManagedRuleGroupConfig]? = nil
        if let managedRuleGroupConfigsContainer = managedRuleGroupConfigsContainer {
            managedRuleGroupConfigsDecoded0 = [WAFV2ClientTypes.ManagedRuleGroupConfig]()
            for structure0 in managedRuleGroupConfigsContainer {
                if let structure0 = structure0 {
                    managedRuleGroupConfigsDecoded0?.append(structure0)
                }
            }
        }
        managedRuleGroupConfigs = managedRuleGroupConfigsDecoded0
        let ruleActionOverridesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.RuleActionOverride?].self, forKey: .ruleActionOverrides)
        var ruleActionOverridesDecoded0:[WAFV2ClientTypes.RuleActionOverride]? = nil
        if let ruleActionOverridesContainer = ruleActionOverridesContainer {
            ruleActionOverridesDecoded0 = [WAFV2ClientTypes.RuleActionOverride]()
            for structure0 in ruleActionOverridesContainer {
                if let structure0 = structure0 {
                    ruleActionOverridesDecoded0?.append(structure0)
                }
            }
        }
        ruleActionOverrides = ruleActionOverridesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet or the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
    public struct ManagedRuleGroupStatement: Swift.Equatable {
        /// Rules in the referenced rule group whose actions are set to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
        public var excludedRules: [WAFV2ClientTypes.ExcludedRule]?
        /// Additional information that's used by a managed rule group. Many managed rule groups don't require this. Use the AWSManagedRulesATPRuleSet configuration object for the account takeover prevention managed rule group, to provide information such as the sign-in page of your application and the type of content to accept or reject from the client. Use the AWSManagedRulesBotControlRuleSet configuration object to configure the protection level that you want the Bot Control rule group to use.
        public var managedRuleGroupConfigs: [WAFV2ClientTypes.ManagedRuleGroupConfig]?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        /// This member is required.
        public var name: Swift.String?
        /// Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
        public var ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]?
        /// An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable [Statement] in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
        public var scopeDownStatement: Box<WAFV2ClientTypes.Statement>?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        /// This member is required.
        public var vendorName: Swift.String?
        /// The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don't specify this, WAF uses the vendor's default version, and then keeps the version at the vendor's default when the vendor updates the managed rule group settings.
        public var version: Swift.String?

        public init (
            excludedRules: [WAFV2ClientTypes.ExcludedRule]? = nil,
            managedRuleGroupConfigs: [WAFV2ClientTypes.ManagedRuleGroupConfig]? = nil,
            name: Swift.String? = nil,
            ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]? = nil,
            scopeDownStatement: Box<WAFV2ClientTypes.Statement>? = nil,
            vendorName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.excludedRules = excludedRules
            self.managedRuleGroupConfigs = managedRuleGroupConfigs
            self.name = name
            self.ruleActionOverrides = ruleActionOverrides
            self.scopeDownStatement = scopeDownStatement
            self.vendorName = vendorName
            self.version = version
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case vendorName = "VendorName"
        case versioningSupported = "VersioningSupported"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let vendorName = self.vendorName {
            try encodeContainer.encode(vendorName, forKey: .vendorName)
        }
        if versioningSupported != false {
            try encodeContainer.encode(versioningSupported, forKey: .versioningSupported)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorName)
        vendorName = vendorNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versioningSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .versioningSupported) ?? false
        versioningSupported = versioningSupportedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a managed rule group, returned by [ListAvailableManagedRuleGroups]. This provides information like the name and vendor name, that you provide when you add a [ManagedRuleGroupStatement] to a web ACL. Managed rule groups include Amazon Web Services Managed Rules rule groups, which are free of charge to WAF customers, and Amazon Web Services Marketplace managed rule groups, which you can subscribe to through Amazon Web Services Marketplace.
    public struct ManagedRuleGroupSummary: Swift.Equatable {
        /// The description of the managed rule group, provided by Amazon Web Services Managed Rules or the Amazon Web Services Marketplace seller who manages it.
        public var description: Swift.String?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        public var name: Swift.String?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        public var vendorName: Swift.String?
        /// Indicates whether the managed rule group is versioned. If it is, you can retrieve the versions list by calling [ListAvailableManagedRuleGroupVersions].
        public var versioningSupported: Swift.Bool

        public init (
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            vendorName: Swift.String? = nil,
            versioningSupported: Swift.Bool = false
        )
        {
            self.description = description
            self.name = name
            self.vendorName = vendorName
            self.versioningSupported = versioningSupported
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleGroupVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdateTimestamp, format: .epochSeconds, forKey: .lastUpdateTimestamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
    }
}

extension WAFV2ClientTypes {
    /// Describes a single version of a managed rule group.
    public struct ManagedRuleGroupVersion: Swift.Equatable {
        /// The date and time that the managed rule group owner updated the rule group version information.
        public var lastUpdateTimestamp: ClientRuntime.Date?
        /// The version name.
        public var name: Swift.String?

        public init (
            lastUpdateTimestamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case name = "Name"
        case publishedVersions = "PublishedVersions"
        case recommendedVersion = "RecommendedVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let publishedVersions = publishedVersions {
            var publishedVersionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publishedVersions)
            for (dictKey0, publishedVersions0) in publishedVersions {
                try publishedVersionsContainer.encode(publishedVersions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let recommendedVersion = self.recommendedVersion {
            try encodeContainer.encode(recommendedVersion, forKey: .recommendedVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let publishedVersionsContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.ManagedRuleSetVersion?].self, forKey: .publishedVersions)
        var publishedVersionsDecoded0: [Swift.String:WAFV2ClientTypes.ManagedRuleSetVersion]? = nil
        if let publishedVersionsContainer = publishedVersionsContainer {
            publishedVersionsDecoded0 = [Swift.String:WAFV2ClientTypes.ManagedRuleSetVersion]()
            for (key0, managedrulesetversion0) in publishedVersionsContainer {
                if let managedrulesetversion0 = managedrulesetversion0 {
                    publishedVersionsDecoded0?[key0] = managedrulesetversion0
                }
            }
        }
        publishedVersions = publishedVersionsDecoded0
        let recommendedVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedVersion)
        recommendedVersion = recommendedVersionDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
    }
}

extension WAFV2ClientTypes {
    /// A set of rules that is managed by Amazon Web Services and Amazon Web Services Marketplace sellers to provide versioned managed rule groups for customers of WAF. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSet: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
        /// This member is required.
        public var name: Swift.String?
        /// The versions of this managed rule set that are available for use by customers.
        public var publishedVersions: [Swift.String:WAFV2ClientTypes.ManagedRuleSetVersion]?
        /// The version that you would like your customers to use.
        public var recommendedVersion: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            name: Swift.String? = nil,
            publishedVersions: [Swift.String:WAFV2ClientTypes.ManagedRuleSetVersion]? = nil,
            recommendedVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.name = name
            self.publishedVersions = publishedVersions
            self.recommendedVersion = recommendedVersion
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information for a managed rule set. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSetSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
        public var id: Swift.String?
        /// The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a managed rule group is the following: awswaf:managed:::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.ManagedRuleSetVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedRuleGroupArn = "AssociatedRuleGroupArn"
        case capacity = "Capacity"
        case expiryTimestamp = "ExpiryTimestamp"
        case forecastedLifetime = "ForecastedLifetime"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case publishTimestamp = "PublishTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedRuleGroupArn = self.associatedRuleGroupArn {
            try encodeContainer.encode(associatedRuleGroupArn, forKey: .associatedRuleGroupArn)
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let expiryTimestamp = self.expiryTimestamp {
            try encodeContainer.encodeTimestamp(expiryTimestamp, format: .epochSeconds, forKey: .expiryTimestamp)
        }
        if let forecastedLifetime = self.forecastedLifetime {
            try encodeContainer.encode(forecastedLifetime, forKey: .forecastedLifetime)
        }
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encodeTimestamp(lastUpdateTimestamp, format: .epochSeconds, forKey: .lastUpdateTimestamp)
        }
        if let publishTimestamp = self.publishTimestamp {
            try encodeContainer.encodeTimestamp(publishTimestamp, format: .epochSeconds, forKey: .publishTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRuleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedRuleGroupArn)
        associatedRuleGroupArn = associatedRuleGroupArnDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let forecastedLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .forecastedLifetime)
        forecastedLifetime = forecastedLifetimeDecoded
        let publishTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .publishTimestamp)
        publishTimestamp = publishTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let expiryTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiryTimestamp)
        expiryTimestamp = expiryTimestampDecoded
    }
}

extension WAFV2ClientTypes {
    /// Information for a single version of a managed rule set. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct ManagedRuleSetVersion: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the vendor rule group that's used to define the published version of your managed rule group.
        public var associatedRuleGroupArn: Swift.String?
        /// The web ACL capacity units (WCUs) required for this rule group. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public var capacity: Swift.Int
        /// The time that this version is set to expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var expiryTimestamp: ClientRuntime.Date?
        /// The amount of time you expect this version of your managed rule group to last, in days.
        public var forecastedLifetime: Swift.Int?
        /// The last time that you updated this version. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var lastUpdateTimestamp: ClientRuntime.Date?
        /// The time that you first published this version. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
        public var publishTimestamp: ClientRuntime.Date?

        public init (
            associatedRuleGroupArn: Swift.String? = nil,
            capacity: Swift.Int = 0,
            expiryTimestamp: ClientRuntime.Date? = nil,
            forecastedLifetime: Swift.Int? = nil,
            lastUpdateTimestamp: ClientRuntime.Date? = nil,
            publishTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.associatedRuleGroupArn = associatedRuleGroupArn
            self.capacity = capacity
            self.expiryTimestamp = expiryTimestamp
            self.forecastedLifetime = forecastedLifetime
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.publishTimestamp = publishTimestamp
        }
    }

}

extension WAFV2ClientTypes {
    public enum MapMatchScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case key
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [MapMatchScope] {
            return [
                .all,
                .key,
                .value,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .key: return "KEY"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MapMatchScope(rawValue: rawValue) ?? MapMatchScope.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.Method: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Inspect the HTTP method of the web request. The method indicates the type of operation that the request is asking the origin to perform. This is used only in the [FieldToMatch] specification for some web request component types. JSON specification: "Method": {}
    public struct Method: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.MobileSdkRelease: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case releaseNotes = "ReleaseNotes"
        case releaseVersion = "ReleaseVersion"
        case tags = "Tags"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let releaseNotes = self.releaseNotes {
            try encodeContainer.encode(releaseNotes, forKey: .releaseNotes)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let releaseNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseNotes)
        releaseNotes = releaseNotesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Information for a release of the mobile SDK, including release notes and tags. The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage WAF tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see [WAF client application integration](https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html) in the WAF Developer Guide.
    public struct MobileSdkRelease: Swift.Equatable {
        /// Notes describing the release.
        public var releaseNotes: Swift.String?
        /// The release version.
        public var releaseVersion: Swift.String?
        /// Tags that are associated with the release.
        public var tags: [WAFV2ClientTypes.Tag]?
        /// The timestamp of the release.
        public var timestamp: ClientRuntime.Date?

        public init (
            releaseNotes: Swift.String? = nil,
            releaseVersion: Swift.String? = nil,
            tags: [WAFV2ClientTypes.Tag]? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.releaseNotes = releaseNotes
            self.releaseVersion = releaseVersion
            self.tags = tags
            self.timestamp = timestamp
        }
    }

}

extension WAFV2ClientTypes.NoneAction: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Specifies that WAF should do nothing. This is used for the OverrideAction setting on a [Rule] when the rule uses a rule group reference statement. This is used in the context of other settings, for example to specify values for [RuleAction] and web ACL [DefaultAction]. JSON specification: "None": {}
    public struct NoneAction: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.NotStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statement = "Statement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statement = self.statement {
            try encodeContainer.encode(statement.value, forKey: .statement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementDecoded = try containerValues.decodeIfPresent(Box<WAFV2ClientTypes.Statement>.self, forKey: .statement)
        statement = statementDecoded
    }
}

extension WAFV2ClientTypes {
    /// A logical rule statement used to negate the results of another rule statement. You provide one [Statement] within the NotStatement.
    public struct NotStatement: Swift.Equatable {
        /// The statement to negate. You can use any statement that can be nested.
        /// This member is required.
        public var statement: Box<WAFV2ClientTypes.Statement>?

        public init (
            statement: Box<WAFV2ClientTypes.Statement>? = nil
        )
        {
            self.statement = statement
        }
    }

}

extension WAFV2ClientTypes.OrStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for statement0 in statements {
                try statementsContainer.encode(statement0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Statement?].self, forKey: .statements)
        var statementsDecoded0:[WAFV2ClientTypes.Statement]? = nil
        if let statementsContainer = statementsContainer {
            statementsDecoded0 = [WAFV2ClientTypes.Statement]()
            for structure0 in statementsContainer {
                if let structure0 = structure0 {
                    statementsDecoded0?.append(structure0)
                }
            }
        }
        statements = statementsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A logical rule statement used to combine other rule statements with OR logic. You provide more than one [Statement] within the OrStatement.
    public struct OrStatement: Swift.Equatable {
        /// The statements to combine with OR logic. You can use any statements that can be nested.
        /// This member is required.
        public var statements: [WAFV2ClientTypes.Statement]?

        public init (
            statements: [WAFV2ClientTypes.Statement]? = nil
        )
        {
            self.statements = statements
        }
    }

}

extension WAFV2ClientTypes.OverrideAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case `none` = "None"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let `none` = self.`none` {
            try encodeContainer.encode(`none`, forKey: .`none`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CountAction.self, forKey: .count)
        count = countDecoded
        let noneDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.NoneAction.self, forKey: .none)
        `none` = noneDecoded
    }
}

extension WAFV2ClientTypes {
    /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
    public struct OverrideAction: Swift.Equatable {
        /// Override the rule group evaluation result to count only. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        public var count: WAFV2ClientTypes.CountAction?
        /// Don't override the rule group evaluation result. This is the most common setting.
        public var `none`: WAFV2ClientTypes.NoneAction?

        public init (
            count: WAFV2ClientTypes.CountAction? = nil,
            `none`: WAFV2ClientTypes.NoneAction? = nil
        )
        {
            self.count = count
            self.`none` = `none`
        }
    }

}

extension WAFV2ClientTypes {
    public enum OversizeHandling: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `continue`
        case match
        case noMatch
        case sdkUnknown(Swift.String)

        public static var allCases: [OversizeHandling] {
            return [
                .continue,
                .match,
                .noMatch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continue: return "CONTINUE"
            case .match: return "MATCH"
            case .noMatch: return "NO_MATCH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OversizeHandling(rawValue: rawValue) ?? OversizeHandling.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum ParameterExceptionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case andStatement
        case associableResource
        case atpRuleSetResponseInspection
        case bodyParsingFallbackBehavior
        case byteMatchStatement
        case challengeConfig
        case changePropagationStatus
        case cookieMatchPattern
        case customRequestHandling
        case customResponse
        case customResponseBody
        case defaultAction
        case entityLimit
        case excludedRule
        case expireTimestamp
        case fallbackBehavior
        case fieldToMatch
        case filterCondition
        case firewallManagerStatement
        case forwardedIpConfig
        case geoMatchStatement
        case headerMatchPattern
        case headerName
        case ipAddress
        case ipAddressVersion
        case ipSet
        case ipSetForwardedIpConfig
        case ipSetReferenceStatement
        case jsonMatchPattern
        case jsonMatchScope
        case labelMatchStatement
        case loggingFilter
        case logDestination
        case managedRuleGroupConfig
        case managedRuleSet
        case managedRuleSetStatement
        case mapMatchScope
        case metricName
        case notStatement
        case orStatement
        case overrideAction
        case oversizeHandling
        case payloadType
        case position
        case rateBasedStatement
        case regexPatternReferenceStatement
        case regexPatternSet
        case resourceArn
        case resourceType
        case responseContentType
        case rule
        case ruleAction
        case ruleGroup
        case ruleGroupReferenceStatement
        case scopeValue
        case singleHeader
        case singleQueryArgument
        case sizeConstraintStatement
        case sqliMatchStatement
        case statement
        case tags
        case tagKeys
        case textTransformation
        case tokenDomain
        case webAcl
        case xssMatchStatement
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterExceptionField] {
            return [
                .andStatement,
                .associableResource,
                .atpRuleSetResponseInspection,
                .bodyParsingFallbackBehavior,
                .byteMatchStatement,
                .challengeConfig,
                .changePropagationStatus,
                .cookieMatchPattern,
                .customRequestHandling,
                .customResponse,
                .customResponseBody,
                .defaultAction,
                .entityLimit,
                .excludedRule,
                .expireTimestamp,
                .fallbackBehavior,
                .fieldToMatch,
                .filterCondition,
                .firewallManagerStatement,
                .forwardedIpConfig,
                .geoMatchStatement,
                .headerMatchPattern,
                .headerName,
                .ipAddress,
                .ipAddressVersion,
                .ipSet,
                .ipSetForwardedIpConfig,
                .ipSetReferenceStatement,
                .jsonMatchPattern,
                .jsonMatchScope,
                .labelMatchStatement,
                .loggingFilter,
                .logDestination,
                .managedRuleGroupConfig,
                .managedRuleSet,
                .managedRuleSetStatement,
                .mapMatchScope,
                .metricName,
                .notStatement,
                .orStatement,
                .overrideAction,
                .oversizeHandling,
                .payloadType,
                .position,
                .rateBasedStatement,
                .regexPatternReferenceStatement,
                .regexPatternSet,
                .resourceArn,
                .resourceType,
                .responseContentType,
                .rule,
                .ruleAction,
                .ruleGroup,
                .ruleGroupReferenceStatement,
                .scopeValue,
                .singleHeader,
                .singleQueryArgument,
                .sizeConstraintStatement,
                .sqliMatchStatement,
                .statement,
                .tags,
                .tagKeys,
                .textTransformation,
                .tokenDomain,
                .webAcl,
                .xssMatchStatement,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .andStatement: return "AND_STATEMENT"
            case .associableResource: return "ASSOCIABLE_RESOURCE"
            case .atpRuleSetResponseInspection: return "ATP_RULE_SET_RESPONSE_INSPECTION"
            case .bodyParsingFallbackBehavior: return "BODY_PARSING_FALLBACK_BEHAVIOR"
            case .byteMatchStatement: return "BYTE_MATCH_STATEMENT"
            case .challengeConfig: return "CHALLENGE_CONFIG"
            case .changePropagationStatus: return "CHANGE_PROPAGATION_STATUS"
            case .cookieMatchPattern: return "COOKIE_MATCH_PATTERN"
            case .customRequestHandling: return "CUSTOM_REQUEST_HANDLING"
            case .customResponse: return "CUSTOM_RESPONSE"
            case .customResponseBody: return "CUSTOM_RESPONSE_BODY"
            case .defaultAction: return "DEFAULT_ACTION"
            case .entityLimit: return "ENTITY_LIMIT"
            case .excludedRule: return "EXCLUDED_RULE"
            case .expireTimestamp: return "EXPIRE_TIMESTAMP"
            case .fallbackBehavior: return "FALLBACK_BEHAVIOR"
            case .fieldToMatch: return "FIELD_TO_MATCH"
            case .filterCondition: return "FILTER_CONDITION"
            case .firewallManagerStatement: return "FIREWALL_MANAGER_STATEMENT"
            case .forwardedIpConfig: return "FORWARDED_IP_CONFIG"
            case .geoMatchStatement: return "GEO_MATCH_STATEMENT"
            case .headerMatchPattern: return "HEADER_MATCH_PATTERN"
            case .headerName: return "HEADER_NAME"
            case .ipAddress: return "IP_ADDRESS"
            case .ipAddressVersion: return "IP_ADDRESS_VERSION"
            case .ipSet: return "IP_SET"
            case .ipSetForwardedIpConfig: return "IP_SET_FORWARDED_IP_CONFIG"
            case .ipSetReferenceStatement: return "IP_SET_REFERENCE_STATEMENT"
            case .jsonMatchPattern: return "JSON_MATCH_PATTERN"
            case .jsonMatchScope: return "JSON_MATCH_SCOPE"
            case .labelMatchStatement: return "LABEL_MATCH_STATEMENT"
            case .loggingFilter: return "LOGGING_FILTER"
            case .logDestination: return "LOG_DESTINATION"
            case .managedRuleGroupConfig: return "MANAGED_RULE_GROUP_CONFIG"
            case .managedRuleSet: return "MANAGED_RULE_SET"
            case .managedRuleSetStatement: return "MANAGED_RULE_SET_STATEMENT"
            case .mapMatchScope: return "MAP_MATCH_SCOPE"
            case .metricName: return "METRIC_NAME"
            case .notStatement: return "NOT_STATEMENT"
            case .orStatement: return "OR_STATEMENT"
            case .overrideAction: return "OVERRIDE_ACTION"
            case .oversizeHandling: return "OVERSIZE_HANDLING"
            case .payloadType: return "PAYLOAD_TYPE"
            case .position: return "POSITION"
            case .rateBasedStatement: return "RATE_BASED_STATEMENT"
            case .regexPatternReferenceStatement: return "REGEX_PATTERN_REFERENCE_STATEMENT"
            case .regexPatternSet: return "REGEX_PATTERN_SET"
            case .resourceArn: return "RESOURCE_ARN"
            case .resourceType: return "RESOURCE_TYPE"
            case .responseContentType: return "RESPONSE_CONTENT_TYPE"
            case .rule: return "RULE"
            case .ruleAction: return "RULE_ACTION"
            case .ruleGroup: return "RULE_GROUP"
            case .ruleGroupReferenceStatement: return "RULE_GROUP_REFERENCE_STATEMENT"
            case .scopeValue: return "SCOPE_VALUE"
            case .singleHeader: return "SINGLE_HEADER"
            case .singleQueryArgument: return "SINGLE_QUERY_ARGUMENT"
            case .sizeConstraintStatement: return "SIZE_CONSTRAINT_STATEMENT"
            case .sqliMatchStatement: return "SQLI_MATCH_STATEMENT"
            case .statement: return "STATEMENT"
            case .tags: return "TAGS"
            case .tagKeys: return "TAG_KEYS"
            case .textTransformation: return "TEXT_TRANSFORMATION"
            case .tokenDomain: return "TOKEN_DOMAIN"
            case .webAcl: return "WEB_ACL"
            case .xssMatchStatement: return "XSS_MATCH_STATEMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParameterExceptionField(rawValue: rawValue) ?? ParameterExceptionField.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.PasswordField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension WAFV2ClientTypes {
    /// Details about your login page password field for request inspection, used in the AWSManagedRulesATPRuleSetRequestInspection configuration.
    public struct PasswordField: Swift.Equatable {
        /// The name of the password field. For example /form/password.
        /// This member is required.
        public var identifier: Swift.String?

        public init (
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes {
    public enum PayloadType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case formEncoded
        case json
        case sdkUnknown(Swift.String)

        public static var allCases: [PayloadType] {
            return [
                .formEncoded,
                .json,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .formEncoded: return "FORM_ENCODED"
            case .json: return "JSON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PayloadType(rawValue: rawValue) ?? PayloadType.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum Platform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case android
        case ios
        case sdkUnknown(Swift.String)

        public static var allCases: [Platform] {
            return [
                .android,
                .ios,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .ios: return "IOS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Platform(rawValue: rawValue) ?? Platform.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum PositionalConstraint: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case contains
        case containsWord
        case endsWith
        case exactly
        case startsWith
        case sdkUnknown(Swift.String)

        public static var allCases: [PositionalConstraint] {
            return [
                .contains,
                .containsWord,
                .endsWith,
                .exactly,
                .startsWith,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .contains: return "CONTAINS"
            case .containsWord: return "CONTAINS_WORD"
            case .endsWith: return "ENDS_WITH"
            case .exactly: return "EXACTLY"
            case .startsWith: return "STARTS_WITH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PositionalConstraint(rawValue: rawValue) ?? PositionalConstraint.sdkUnknown(rawValue)
        }
    }
}

extension PutLoggingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
    }
}

extension PutLoggingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLoggingConfigurationInput: Swift.Equatable {
    ///
    /// This member is required.
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationInputBody: Swift.Equatable {
    let loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension PutLoggingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLoggingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLogDestinationPermissionIssueException" : self = .wAFLogDestinationPermissionIssueException(try WAFLogDestinationPermissionIssueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFServiceLinkedRoleErrorException" : self = .wAFServiceLinkedRoleErrorException(try WAFServiceLinkedRoleErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLoggingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFLogDestinationPermissionIssueException(WAFLogDestinationPermissionIssueException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFServiceLinkedRoleErrorException(WAFServiceLinkedRoleErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLoggingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutLoggingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loggingConfiguration = output.loggingConfiguration
        } else {
            self.loggingConfiguration = nil
        }
    }
}

public struct PutLoggingConfigurationOutputResponse: Swift.Equatable {
    ///
    public var loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?

    public init (
        loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration? = nil
    )
    {
        self.loggingConfiguration = loggingConfiguration
    }
}

struct PutLoggingConfigurationOutputResponseBody: Swift.Equatable {
    let loggingConfiguration: WAFV2ClientTypes.LoggingConfiguration?
}

extension PutLoggingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loggingConfiguration = "LoggingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
    }
}

extension PutManagedRuleSetVersionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case recommendedVersion = "RecommendedVersion"
        case scope = "Scope"
        case versionsToPublish = "VersionsToPublish"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendedVersion = self.recommendedVersion {
            try encodeContainer.encode(recommendedVersion, forKey: .recommendedVersion)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let versionsToPublish = versionsToPublish {
            var versionsToPublishContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .versionsToPublish)
            for (dictKey0, versionsToPublish0) in versionsToPublish {
                try versionsToPublishContainer.encode(versionsToPublish0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PutManagedRuleSetVersionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutManagedRuleSetVersionsInput: Swift.Equatable {
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the named managed rule group that you'd like your customers to choose, from among your version offerings.
    public var recommendedVersion: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The versions of the named managed rule group that you want to offer to your customers.
    public var versionsToPublish: [Swift.String:WAFV2ClientTypes.VersionToPublish]?

    public init (
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        recommendedVersion: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        versionsToPublish: [Swift.String:WAFV2ClientTypes.VersionToPublish]? = nil
    )
    {
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.recommendedVersion = recommendedVersion
        self.scope = scope
        self.versionsToPublish = versionsToPublish
    }
}

struct PutManagedRuleSetVersionsInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
    let recommendedVersion: Swift.String?
    let versionsToPublish: [Swift.String:WAFV2ClientTypes.VersionToPublish]?
}

extension PutManagedRuleSetVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case recommendedVersion = "RecommendedVersion"
        case scope = "Scope"
        case versionsToPublish = "VersionsToPublish"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let recommendedVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedVersion)
        recommendedVersion = recommendedVersionDecoded
        let versionsToPublishContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.VersionToPublish?].self, forKey: .versionsToPublish)
        var versionsToPublishDecoded0: [Swift.String:WAFV2ClientTypes.VersionToPublish]? = nil
        if let versionsToPublishContainer = versionsToPublishContainer {
            versionsToPublishDecoded0 = [Swift.String:WAFV2ClientTypes.VersionToPublish]()
            for (key0, versiontopublish0) in versionsToPublishContainer {
                if let versiontopublish0 = versiontopublish0 {
                    versionsToPublishDecoded0?[key0] = versiontopublish0
                }
            }
        }
        versionsToPublish = versionsToPublishDecoded0
    }
}

extension PutManagedRuleSetVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutManagedRuleSetVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutManagedRuleSetVersionsOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutManagedRuleSetVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutManagedRuleSetVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct PutManagedRuleSetVersionsOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct PutManagedRuleSetVersionsOutputResponseBody: Swift.Equatable {
    let nextLockToken: Swift.String?
}

extension PutManagedRuleSetVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension PutPermissionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension PutPermissionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutPermissionPolicyInput: Swift.Equatable {
    /// The policy to attach to the specified rule group. The policy specifications must conform to the following:
    ///
    /// * The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.
    ///
    /// * The policy must include specifications for Effect, Action, and Principal.
    ///
    /// * Effect must specify Allow.
    ///
    /// * Action must specify wafv2:CreateWebACL, wafv2:UpdateWebACL, and wafv2:PutFirewallManagerRuleGroups and may optionally specify wafv2:GetRuleGroup. WAF rejects any extra actions or wildcard actions in the policy.
    ///
    /// * The policy must not include a Resource parameter.
    ///
    ///
    /// For more information, see [IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html).
    /// This member is required.
    public var policy: Swift.String?
    /// The Amazon Resource Name (ARN) of the [RuleGroup] to which you want to attach the policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        policy: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policy = policy
        self.resourceArn = resourceArn
    }
}

struct PutPermissionPolicyInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let policy: Swift.String?
}

extension PutPermissionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy = "Policy"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
    }
}

extension PutPermissionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutPermissionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidPermissionPolicyException" : self = .wAFInvalidPermissionPolicyException(try WAFInvalidPermissionPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutPermissionPolicyOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidPermissionPolicyException(WAFInvalidPermissionPolicyException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPermissionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutPermissionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFV2ClientTypes.QueryString: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Inspect the query string of the web request. This is the part of a URL that appears after a ? character, if any. This is used only in the [FieldToMatch] specification for some web request component types. JSON specification: "QueryString": {}
    public struct QueryString: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.RateBasedStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateKeyType = "AggregateKeyType"
        case forwardedIPConfig = "ForwardedIPConfig"
        case limit = "Limit"
        case scopeDownStatement = "ScopeDownStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateKeyType = self.aggregateKeyType {
            try encodeContainer.encode(aggregateKeyType.rawValue, forKey: .aggregateKeyType)
        }
        if let forwardedIPConfig = self.forwardedIPConfig {
            try encodeContainer.encode(forwardedIPConfig, forKey: .forwardedIPConfig)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let scopeDownStatement = self.scopeDownStatement {
            try encodeContainer.encode(scopeDownStatement.value, forKey: .scopeDownStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let aggregateKeyTypeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RateBasedStatementAggregateKeyType.self, forKey: .aggregateKeyType)
        aggregateKeyType = aggregateKeyTypeDecoded
        let scopeDownStatementDecoded = try containerValues.decodeIfPresent(Box<WAFV2ClientTypes.Statement>.self, forKey: .scopeDownStatement)
        scopeDownStatement = scopeDownStatementDecoded
        let forwardedIPConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ForwardedIPConfig.self, forKey: .forwardedIPConfig)
        forwardedIPConfig = forwardedIPConfigDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:
    ///
    /// * An IP match statement with an IP set that specifies the address 192.0.2.44.
    ///
    /// * A string match statement that searches in the User-Agent header for the string BadBot.
    ///
    ///
    /// In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule. You cannot nest a RateBasedStatement inside another statement, for example inside a NotStatement or OrStatement. You can define a RateBasedStatement inside a web ACL and inside a rule group.
    public struct RateBasedStatement: Swift.Equatable {
        /// Setting that indicates how to aggregate the request counts. The options are the following:
        ///
        /// * IP - Aggregate the request counts on the IP address from the web request origin.
        ///
        /// * FORWARDED_IP - Aggregate the request counts on the first IP address in an HTTP header. If you use this, configure the ForwardedIPConfig, to specify the header to use.
        /// This member is required.
        public var aggregateKeyType: WAFV2ClientTypes.RateBasedStatementAggregateKeyType?
        /// The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all. This is required if AggregateKeyType is set to FORWARDED_IP.
        public var forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig?
        /// The limit on requests per 5-minute period for a single originating IP address. If the statement includes a ScopeDownStatement, this limit is applied only to the requests that match the statement.
        /// This member is required.
        public var limit: Swift.Int
        /// An optional nested statement that narrows the scope of the web requests that are evaluated by the rate-based statement. Requests are only tracked by the rate-based statement if they match the scope-down statement. You can use any nestable [Statement] in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
        public var scopeDownStatement: Box<WAFV2ClientTypes.Statement>?

        public init (
            aggregateKeyType: WAFV2ClientTypes.RateBasedStatementAggregateKeyType? = nil,
            forwardedIPConfig: WAFV2ClientTypes.ForwardedIPConfig? = nil,
            limit: Swift.Int = 0,
            scopeDownStatement: Box<WAFV2ClientTypes.Statement>? = nil
        )
        {
            self.aggregateKeyType = aggregateKeyType
            self.forwardedIPConfig = forwardedIPConfig
            self.limit = limit
            self.scopeDownStatement = scopeDownStatement
        }
    }

}

extension WAFV2ClientTypes {
    public enum RateBasedStatementAggregateKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forwardedIp
        case ip
        case sdkUnknown(Swift.String)

        public static var allCases: [RateBasedStatementAggregateKeyType] {
            return [
                .forwardedIp,
                .ip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forwardedIp: return "FORWARDED_IP"
            case .ip: return "IP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RateBasedStatementAggregateKeyType(rawValue: rawValue) ?? RateBasedStatementAggregateKeyType.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.RateBasedStatementManagedKeysIPSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case ipAddressVersion = "IPAddressVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddress0 in addresses {
                try addressesContainer.encode(ipaddress0)
            }
        }
        if let ipAddressVersion = self.ipAddressVersion {
            try encodeContainer.encode(ipAddressVersion.rawValue, forKey: .ipAddressVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressVersionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPAddressVersion.self, forKey: .ipAddressVersion)
        ipAddressVersion = ipAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// The set of IP addresses that are currently blocked for a [RateBasedStatement].
    public struct RateBasedStatementManagedKeysIPSet: Swift.Equatable {
        /// The IP addresses that are currently blocked.
        public var addresses: [Swift.String]?
        /// The version of the IP addresses, either IPV4 or IPV6.
        public var ipAddressVersion: WAFV2ClientTypes.IPAddressVersion?

        public init (
            addresses: [Swift.String]? = nil,
            ipAddressVersion: WAFV2ClientTypes.IPAddressVersion? = nil
        )
        {
            self.addresses = addresses
            self.ipAddressVersion = ipAddressVersion
        }
    }

}

extension WAFV2ClientTypes.Regex: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regexString = "RegexString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regexString = self.regexString {
            try encodeContainer.encode(regexString, forKey: .regexString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexString)
        regexString = regexStringDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single regular expression. This is used in a [RegexPatternSet].
    public struct Regex: Swift.Equatable {
        /// The string representing the regular expression.
        public var regexString: Swift.String?

        public init (
            regexString: Swift.String? = nil
        )
        {
            self.regexString = regexString
        }
    }

}

extension WAFV2ClientTypes.RegexMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case regexString = "RegexString"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let regexString = self.regexString {
            try encodeContainer.encode(regexString, forKey: .regexString)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regexStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexString)
        regexString = regexStringDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement used to search web request components for a match against a single regular expression.
    public struct RegexMatchStatement: Swift.Equatable {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The string representing the regular expression.
        /// This member is required.
        public var regexString: Swift.String?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            regexString: Swift.String? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.regexString = regexString
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes.RegexPatternSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regex0 in regularExpressionList {
                try regularExpressionListContainer.encode(regex0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[WAFV2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [WAFV2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Contains one or more regular expressions. WAF assigns an ARN to each RegexPatternSet that you create. To use a set in a rule, you provide the ARN to the [Rule] statement [RegexPatternSetReferenceStatement].
    public struct RegexPatternSet: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// The name of the set. You cannot change the name after you create the set.
        public var name: Swift.String?
        /// The regular expression patterns in the set.
        public var regularExpressionList: [WAFV2ClientTypes.Regex]?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            regularExpressionList: [WAFV2ClientTypes.Regex]? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
            self.regularExpressionList = regularExpressionList
        }
    }

}

extension WAFV2ClientTypes.RegexPatternSetReferenceStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case fieldToMatch = "FieldToMatch"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement used to search web request components for matches with regular expressions. To use this, create a [RegexPatternSet] that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see [CreateRegexPatternSet]. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
    public struct RegexPatternSetReferenceStatement: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the [RegexPatternSet] that this statement references.
        /// This member is required.
        public var arn: Swift.String?
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            arn: Swift.String? = nil,
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.arn = arn
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes.RegexPatternSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a [RegexPatternSet], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RegexPatternSet, and the ARN, that you provide to the [RegexPatternSetReferenceStatement] to use the pattern set in a [Rule].
    public struct RegexPatternSetSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the set that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.ReleaseSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case releaseVersion = "ReleaseVersion"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}

extension WAFV2ClientTypes {
    /// High level information for an SDK release.
    public struct ReleaseSummary: Swift.Equatable {
        /// The release version.
        public var releaseVersion: Swift.String?
        /// The timestamp of the release.
        public var timestamp: ClientRuntime.Date?

        public init (
            releaseVersion: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.releaseVersion = releaseVersion
            self.timestamp = timestamp
        }
    }

}

extension WAFV2ClientTypes.RequestInspection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case passwordField = "PasswordField"
        case payloadType = "PayloadType"
        case usernameField = "UsernameField"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let passwordField = self.passwordField {
            try encodeContainer.encode(passwordField, forKey: .passwordField)
        }
        if let payloadType = self.payloadType {
            try encodeContainer.encode(payloadType.rawValue, forKey: .payloadType)
        }
        if let usernameField = self.usernameField {
            try encodeContainer.encode(usernameField, forKey: .usernameField)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadTypeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.PayloadType.self, forKey: .payloadType)
        payloadType = payloadTypeDecoded
        let usernameFieldDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.UsernameField.self, forKey: .usernameField)
        usernameField = usernameFieldDecoded
        let passwordFieldDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.PasswordField.self, forKey: .passwordField)
        passwordField = passwordFieldDecoded
    }
}

extension WAFV2ClientTypes {
    /// The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. This is part of the AWSManagedRulesATPRuleSet configuration in ManagedRuleGroupConfig. In these settings, you specify how your application accepts login attempts by providing the request payload type and the names of the fields within the request body where the username and password are provided.
    public struct RequestInspection: Swift.Equatable {
        /// Details about your login page password field. How you specify this depends on the payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "login": { "username": "THE_USERNAME", "password": "THE_PASSWORD" } }, the username field specification is /login/username and the password field specification is /login/password.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named username1 and password1, the username field specification is username1 and the password field specification is password1.
        /// This member is required.
        public var passwordField: WAFV2ClientTypes.PasswordField?
        /// The payload type for your login endpoint, either JSON or form encoded.
        /// This member is required.
        public var payloadType: WAFV2ClientTypes.PayloadType?
        /// Details about your login page username field. How you specify this depends on the payload type.
        ///
        /// * For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901). For example, for the JSON payload { "login": { "username": "THE_USERNAME", "password": "THE_PASSWORD" } }, the username field specification is /login/username and the password field specification is /login/password.
        ///
        /// * For form encoded payload types, use the HTML form names. For example, for an HTML form with input elements named username1 and password1, the username field specification is username1 and the password field specification is password1.
        /// This member is required.
        public var usernameField: WAFV2ClientTypes.UsernameField?

        public init (
            passwordField: WAFV2ClientTypes.PasswordField? = nil,
            payloadType: WAFV2ClientTypes.PayloadType? = nil,
            usernameField: WAFV2ClientTypes.UsernameField? = nil
        )
        {
            self.passwordField = passwordField
            self.payloadType = payloadType
            self.usernameField = usernameField
        }
    }

}

extension WAFV2ClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apiGateway
        case applicationLoadBalancer
        case appsync
        case appRunnerService
        case cognitioUserPool
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .apiGateway,
                .applicationLoadBalancer,
                .appsync,
                .appRunnerService,
                .cognitioUserPool,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .applicationLoadBalancer: return "APPLICATION_LOAD_BALANCER"
            case .appsync: return "APPSYNC"
            case .appRunnerService: return "APP_RUNNER_SERVICE"
            case .cognitioUserPool: return "COGNITO_USER_POOL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum ResponseContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applicationJson
        case textHtml
        case textPlain
        case sdkUnknown(Swift.String)

        public static var allCases: [ResponseContentType] {
            return [
                .applicationJson,
                .textHtml,
                .textPlain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applicationJson: return "APPLICATION_JSON"
            case .textHtml: return "TEXT_HTML"
            case .textPlain: return "TEXT_PLAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResponseContentType(rawValue: rawValue) ?? ResponseContentType.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.ResponseInspection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bodyContains = "BodyContains"
        case header = "Header"
        case json = "Json"
        case statusCode = "StatusCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bodyContains = self.bodyContains {
            try encodeContainer.encode(bodyContains, forKey: .bodyContains)
        }
        if let header = self.header {
            try encodeContainer.encode(header, forKey: .header)
        }
        if let json = self.json {
            try encodeContainer.encode(json, forKey: .json)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode, forKey: .statusCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseInspectionStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let headerDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseInspectionHeader.self, forKey: .header)
        header = headerDecoded
        let bodyContainsDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseInspectionBodyContains.self, forKey: .bodyContains)
        bodyContains = bodyContainsDecoded
        let jsonDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ResponseInspectionJson.self, forKey: .json)
        json = jsonDecoded
    }
}

extension WAFV2ClientTypes {
    /// The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that submit too many failed login attempts in a short amount of time. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. This is part of the AWSManagedRulesATPRuleSet configuration in ManagedRuleGroupConfig. Enable login response inspection by configuring exactly one component of the response to inspect. You can't configure more than one. If you don't configure any of the response inspection options, response inspection is disabled.
    public struct ResponseInspection: Swift.Equatable {
        /// Configures inspection of the response body. WAF can inspect the first 65,536 bytes (64 KB) of the response body.
        public var bodyContains: WAFV2ClientTypes.ResponseInspectionBodyContains?
        /// Configures inspection of the response header.
        public var header: WAFV2ClientTypes.ResponseInspectionHeader?
        /// Configures inspection of the response JSON. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON.
        public var json: WAFV2ClientTypes.ResponseInspectionJson?
        /// Configures inspection of the response status code.
        public var statusCode: WAFV2ClientTypes.ResponseInspectionStatusCode?

        public init (
            bodyContains: WAFV2ClientTypes.ResponseInspectionBodyContains? = nil,
            header: WAFV2ClientTypes.ResponseInspectionHeader? = nil,
            json: WAFV2ClientTypes.ResponseInspectionJson? = nil,
            statusCode: WAFV2ClientTypes.ResponseInspectionStatusCode? = nil
        )
        {
            self.bodyContains = bodyContains
            self.header = header
            self.json = json
            self.statusCode = statusCode
        }
    }

}

extension WAFV2ClientTypes.ResponseInspectionBodyContains: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureStrings = "FailureStrings"
        case successStrings = "SuccessStrings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureStrings = failureStrings {
            var failureStringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failureStrings)
            for failurevalue0 in failureStrings {
                try failureStringsContainer.encode(failurevalue0)
            }
        }
        if let successStrings = successStrings {
            var successStringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .successStrings)
            for successvalue0 in successStrings {
                try successStringsContainer.encode(successvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .successStrings)
        var successStringsDecoded0:[Swift.String]? = nil
        if let successStringsContainer = successStringsContainer {
            successStringsDecoded0 = [Swift.String]()
            for string0 in successStringsContainer {
                if let string0 = string0 {
                    successStringsDecoded0?.append(string0)
                }
            }
        }
        successStrings = successStringsDecoded0
        let failureStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureStrings)
        var failureStringsDecoded0:[Swift.String]? = nil
        if let failureStringsContainer = failureStringsContainer {
            failureStringsDecoded0 = [Swift.String]()
            for string0 in failureStringsContainer {
                if let string0 = string0 {
                    failureStringsDecoded0?.append(string0)
                }
            }
        }
        failureStrings = failureStringsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Configures inspection of the response body. WAF can inspect the first 65,536 bytes (64 KB) of the response body. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionBodyContains: Swift.Equatable {
        /// Strings in the body of the response that indicate a failed login attempt. To be counted as a failed login, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON example: "FailureStrings": [ "Login failed" ]
        /// This member is required.
        public var failureStrings: [Swift.String]?
        /// Strings in the body of the response that indicate a successful login attempt. To be counted as a successful login, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. JSON example: "SuccessStrings": [ "Login successful", "Welcome to our site!" ]
        /// This member is required.
        public var successStrings: [Swift.String]?

        public init (
            failureStrings: [Swift.String]? = nil,
            successStrings: [Swift.String]? = nil
        )
        {
            self.failureStrings = failureStrings
            self.successStrings = successStrings
        }
    }

}

extension WAFV2ClientTypes.ResponseInspectionHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureValues = "FailureValues"
        case name = "Name"
        case successValues = "SuccessValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureValues = failureValues {
            var failureValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failureValues)
            for failurevalue0 in failureValues {
                try failureValuesContainer.encode(failurevalue0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let successValues = successValues {
            var successValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .successValues)
            for successvalue0 in successValues {
                try successValuesContainer.encode(successvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let successValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .successValues)
        var successValuesDecoded0:[Swift.String]? = nil
        if let successValuesContainer = successValuesContainer {
            successValuesDecoded0 = [Swift.String]()
            for string0 in successValuesContainer {
                if let string0 = string0 {
                    successValuesDecoded0?.append(string0)
                }
            }
        }
        successValues = successValuesDecoded0
        let failureValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureValues)
        var failureValuesDecoded0:[Swift.String]? = nil
        if let failureValuesContainer = failureValuesContainer {
            failureValuesDecoded0 = [Swift.String]()
            for string0 in failureValuesContainer {
                if let string0 = string0 {
                    failureValuesDecoded0?.append(string0)
                }
            }
        }
        failureValues = failureValuesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Configures inspection of the response header. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionHeader: Swift.Equatable {
        /// Values in the response header with the specified name that indicate a failed login attempt. To be counted as a failed login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "FailureValues": [ "LoginFailed", "Failed login" ]
        /// This member is required.
        public var failureValues: [Swift.String]?
        /// The name of the header to match against. The name must be an exact match, including case. JSON example: "Name": [ "LoginResult" ]
        /// This member is required.
        public var name: Swift.String?
        /// Values in the response header with the specified name that indicate a successful login attempt. To be counted as a successful login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "SuccessValues": [ "LoginPassed", "Successful login" ]
        /// This member is required.
        public var successValues: [Swift.String]?

        public init (
            failureValues: [Swift.String]? = nil,
            name: Swift.String? = nil,
            successValues: [Swift.String]? = nil
        )
        {
            self.failureValues = failureValues
            self.name = name
            self.successValues = successValues
        }
    }

}

extension WAFV2ClientTypes.ResponseInspectionJson: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureValues = "FailureValues"
        case identifier = "Identifier"
        case successValues = "SuccessValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureValues = failureValues {
            var failureValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failureValues)
            for failurevalue0 in failureValues {
                try failureValuesContainer.encode(failurevalue0)
            }
        }
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let successValues = successValues {
            var successValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .successValues)
            for successvalue0 in successValues {
                try successValuesContainer.encode(successvalue0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let successValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .successValues)
        var successValuesDecoded0:[Swift.String]? = nil
        if let successValuesContainer = successValuesContainer {
            successValuesDecoded0 = [Swift.String]()
            for string0 in successValuesContainer {
                if let string0 = string0 {
                    successValuesDecoded0?.append(string0)
                }
            }
        }
        successValues = successValuesDecoded0
        let failureValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureValues)
        var failureValuesDecoded0:[Swift.String]? = nil
        if let failureValuesContainer = failureValuesContainer {
            failureValuesDecoded0 = [Swift.String]()
            for string0 in failureValuesContainer {
                if let string0 = string0 {
                    failureValuesDecoded0?.append(string0)
                }
            }
        }
        failureValues = failureValuesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Configures inspection of the response JSON. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionJson: Swift.Equatable {
        /// Values for the specified identifier in the response JSON that indicate a failed login attempt. To be counted as a failed login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "FailureValues": [ "False", "Failed" ]
        /// This member is required.
        public var failureValues: [Swift.String]?
        /// The identifier for the value to match against in the JSON. The identifier must be an exact match, including case. JSON example: "Identifier": [ "/login/success" ]
        /// This member is required.
        public var identifier: Swift.String?
        /// Values for the specified identifier in the response JSON that indicate a successful login attempt. To be counted as a successful login, the value must be an exact match, including case. Each value must be unique among the success and failure values. JSON example: "SuccessValues": [ "True", "Succeeded" ]
        /// This member is required.
        public var successValues: [Swift.String]?

        public init (
            failureValues: [Swift.String]? = nil,
            identifier: Swift.String? = nil,
            successValues: [Swift.String]? = nil
        )
        {
            self.failureValues = failureValues
            self.identifier = identifier
            self.successValues = successValues
        }
    }

}

extension WAFV2ClientTypes.ResponseInspectionStatusCode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureCodes = "FailureCodes"
        case successCodes = "SuccessCodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureCodes = failureCodes {
            var failureCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failureCodes)
            for failurecode0 in failureCodes {
                try failureCodesContainer.encode(failurecode0)
            }
        }
        if let successCodes = successCodes {
            var successCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .successCodes)
            for successcode0 in successCodes {
                try successCodesContainer.encode(successcode0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successCodesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .successCodes)
        var successCodesDecoded0:[Swift.Int]? = nil
        if let successCodesContainer = successCodesContainer {
            successCodesDecoded0 = [Swift.Int]()
            for integer0 in successCodesContainer {
                if let integer0 = integer0 {
                    successCodesDecoded0?.append(integer0)
                }
            }
        }
        successCodes = successCodesDecoded0
        let failureCodesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .failureCodes)
        var failureCodesDecoded0:[Swift.Int]? = nil
        if let failureCodesContainer = failureCodesContainer {
            failureCodesDecoded0 = [Swift.Int]()
            for integer0 in failureCodesContainer {
                if let integer0 = integer0 {
                    failureCodesDecoded0?.append(integer0)
                }
            }
        }
        failureCodes = failureCodesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// Configures inspection of the response status code. This is part of the ResponseInspection configuration for AWSManagedRulesATPRuleSet. Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.
    public struct ResponseInspectionStatusCode: Swift.Equatable {
        /// Status codes in the response that indicate a failed login attempt. To be counted as a failed login, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: "FailureCodes": [ 400, 404 ]
        /// This member is required.
        public var failureCodes: [Swift.Int]?
        /// Status codes in the response that indicate a successful login attempt. To be counted as a successful login, the response status code must match one of these. Each code must be unique among the success and failure status codes. JSON example: "SuccessCodes": [ 200, 201 ]
        /// This member is required.
        public var successCodes: [Swift.Int]?

        public init (
            failureCodes: [Swift.Int]? = nil,
            successCodes: [Swift.Int]? = nil
        )
        {
            self.failureCodes = failureCodes
            self.successCodes = successCodes
        }
    }

}

extension WAFV2ClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case name = "Name"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleLabels = "RuleLabels"
        case statement = "Statement"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let challengeConfig = self.challengeConfig {
            try encodeContainer.encode(challengeConfig, forKey: .challengeConfig)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrideAction = self.overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleLabels = ruleLabels {
            var ruleLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleLabels)
            for label0 in ruleLabels {
                try ruleLabelsContainer.encode(label0)
            }
        }
        if let statement = self.statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let statementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Statement.self, forKey: .statement)
        statement = statementDecoded
        let actionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleAction.self, forKey: .action)
        action = actionDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let ruleLabelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Label?].self, forKey: .ruleLabels)
        var ruleLabelsDecoded0:[WAFV2ClientTypes.Label]? = nil
        if let ruleLabelsContainer = ruleLabelsContainer {
            ruleLabelsDecoded0 = [WAFV2ClientTypes.Label]()
            for structure0 in ruleLabelsContainer {
                if let structure0 = structure0 {
                    ruleLabelsDecoded0?.append(structure0)
                }
            }
        }
        ruleLabels = ruleLabelsDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let captchaConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
        let challengeConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeConfig.self, forKey: .challengeConfig)
        challengeConfig = challengeConfigDecoded
    }
}

extension WAFV2ClientTypes {
    /// A single rule, which you can use in a [WebACL] or [RuleGroup] to identify web requests that you want to allow, block, or count. Each rule includes one top-level [Statement] that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public struct Rule: Swift.Equatable {
        /// The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include RuleGroupReferenceStatement and ManagedRuleGroupStatement. You must specify either this Action setting or the rule OverrideAction setting, but not both:
        ///
        /// * If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting.
        ///
        /// * If the rule statement references a rule group, use the override action setting and not this action setting.
        public var action: WAFV2ClientTypes.RuleAction?
        /// Specifies how WAF should handle CAPTCHA evaluations. If you don't specify this, WAF uses the CAPTCHA configuration that's defined for the web ACL.
        public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
        /// Specifies how WAF should handle Challenge evaluations. If you don't specify this, WAF uses the challenge configuration that's defined for the web ACL.
        public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
        /// The name of the rule. You can't change the name of a Rule after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with Count action, in your rule group reference statement settings.
        public var overrideAction: WAFV2ClientTypes.OverrideAction?
        /// If you define more than one Rule in a WebACL, WAF evaluates each request against the Rules in order based on the value of Priority. WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. Rules that run after this rule in the web ACL can match against these labels using a LabelMatchStatement. For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:
        ///
        /// * Separate each component of the label with a colon.
        ///
        /// * Each namespace or name can have up to 128 characters.
        ///
        /// * You can specify up to 5 namespaces in a label.
        ///
        /// * Don't use the following reserved words in your label specification: aws, waf, managed, rulegroup, webacl, regexpatternset, or ipset.
        ///
        ///
        /// For example, myLabelName or nameSpace1:nameSpace2:myLabelName.
        public var ruleLabels: [WAFV2ClientTypes.Label]?
        /// The WAF processing statement for the rule, for example [ByteMatchStatement] or [SizeConstraintStatement].
        /// This member is required.
        public var statement: WAFV2ClientTypes.Statement?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init (
            action: WAFV2ClientTypes.RuleAction? = nil,
            captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
            challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
            name: Swift.String? = nil,
            overrideAction: WAFV2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            ruleLabels: [WAFV2ClientTypes.Label]? = nil,
            statement: WAFV2ClientTypes.Statement? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.action = action
            self.captchaConfig = captchaConfig
            self.challengeConfig = challengeConfig
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleLabels = ruleLabels
            self.statement = statement
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes.RuleAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allow = "Allow"
        case block = "Block"
        case captcha = "Captcha"
        case challenge = "Challenge"
        case count = "Count"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allow = self.allow {
            try encodeContainer.encode(allow, forKey: .allow)
        }
        if let block = self.block {
            try encodeContainer.encode(block, forKey: .block)
        }
        if let captcha = self.captcha {
            try encodeContainer.encode(captcha, forKey: .captcha)
        }
        if let challenge = self.challenge {
            try encodeContainer.encode(challenge, forKey: .challenge)
        }
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.BlockAction.self, forKey: .block)
        block = blockDecoded
        let allowDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AllowAction.self, forKey: .allow)
        allow = allowDecoded
        let countDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CountAction.self, forKey: .count)
        count = countDecoded
        let captchaDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaAction.self, forKey: .captcha)
        captcha = captchaDecoded
        let challengeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeAction.self, forKey: .challenge)
        challenge = challengeDecoded
    }
}

extension WAFV2ClientTypes {
    /// The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting.
    public struct RuleAction: Swift.Equatable {
        /// Instructs WAF to allow the web request.
        public var allow: WAFV2ClientTypes.AllowAction?
        /// Instructs WAF to block the web request.
        public var block: WAFV2ClientTypes.BlockAction?
        /// Instructs WAF to run a CAPTCHA check against the web request.
        public var captcha: WAFV2ClientTypes.CaptchaAction?
        /// Instructs WAF to run a Challenge check against the web request.
        public var challenge: WAFV2ClientTypes.ChallengeAction?
        /// Instructs WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.
        public var count: WAFV2ClientTypes.CountAction?

        public init (
            allow: WAFV2ClientTypes.AllowAction? = nil,
            block: WAFV2ClientTypes.BlockAction? = nil,
            captcha: WAFV2ClientTypes.CaptchaAction? = nil,
            challenge: WAFV2ClientTypes.ChallengeAction? = nil,
            count: WAFV2ClientTypes.CountAction? = nil
        )
        {
            self.allow = allow
            self.block = block
            self.captcha = captcha
            self.challenge = challenge
            self.count = count
        }
    }

}

extension WAFV2ClientTypes.RuleActionOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionToUse = "ActionToUse"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionToUse = self.actionToUse {
            try encodeContainer.encode(actionToUse, forKey: .actionToUse)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionToUseDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleAction.self, forKey: .actionToUse)
        actionToUse = actionToUseDecoded
    }
}

extension WAFV2ClientTypes {
    /// Action setting to use in the place of a rule action that is configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
    public struct RuleActionOverride: Swift.Equatable {
        /// The override action to use, in place of the configured action of the rule in the rule group.
        /// This member is required.
        public var actionToUse: WAFV2ClientTypes.RuleAction?
        /// The name of the rule to override.
        /// This member is required.
        public var name: Swift.String?

        public init (
            actionToUse: WAFV2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionToUse = actionToUse
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.RuleGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case name = "Name"
        case rules = "Rules"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availableLabels = availableLabels {
            var availableLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableLabels)
            for labelsummary0 in availableLabels {
                try availableLabelsContainer.encode(labelsummary0)
            }
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let consumedLabels = consumedLabels {
            var consumedLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .consumedLabels)
            for labelsummary0 in consumedLabels {
                try consumedLabelsContainer.encode(labelsummary0)
            }
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let availableLabelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.LabelSummary?].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[WAFV2ClientTypes.LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [WAFV2ClientTypes.LabelSummary]()
            for structure0 in availableLabelsContainer {
                if let structure0 = structure0 {
                    availableLabelsDecoded0?.append(structure0)
                }
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.LabelSummary?].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[WAFV2ClientTypes.LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [WAFV2ClientTypes.LabelSummary]()
            for structure0 in consumedLabelsContainer {
                if let structure0 = structure0 {
                    consumedLabelsDecoded0?.append(structure0)
                }
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule group defines a collection of rules to inspect and control web requests that you can use in a [WebACL]. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements.
    public struct RuleGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the RuleLabels for a [Rule].
        public var availableLabels: [WAFV2ClientTypes.LabelSummary]?
        /// The web ACL capacity units (WCUs) required for this rule group. When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using [CheckCapacity]. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        /// This member is required.
        public var capacity: Swift.Int
        /// The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a LabelMatchStatement specification, in the [Statement] definition of a rule.
        public var consumedLabels: [WAFV2ClientTypes.LabelSummary]?
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
        /// A description of the rule group that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
        ///
        /// * The syntax for the label namespace prefix for your rule groups is the following: awswaf::rulegroup::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
        public var rules: [WAFV2ClientTypes.Rule]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init (
            arn: Swift.String? = nil,
            availableLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
            capacity: Swift.Int = 0,
            consumedLabels: [WAFV2ClientTypes.LabelSummary]? = nil,
            customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [WAFV2ClientTypes.Rule]? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.arn = arn
            self.availableLabels = availableLabels
            self.capacity = capacity
            self.consumedLabels = consumedLabels
            self.customResponseBodies = customResponseBodies
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.name = name
            self.rules = rules
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes.RuleGroupReferenceStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case excludedRules = "ExcludedRules"
        case ruleActionOverrides = "RuleActionOverrides"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrule0 in excludedRules {
                try excludedRulesContainer.encode(excludedrule0)
            }
        }
        if let ruleActionOverrides = ruleActionOverrides {
            var ruleActionOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleActionOverrides)
            for ruleactionoverride0 in ruleActionOverrides {
                try ruleActionOverridesContainer.encode(ruleactionoverride0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[WAFV2ClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [WAFV2ClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
        let ruleActionOverridesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.RuleActionOverride?].self, forKey: .ruleActionOverrides)
        var ruleActionOverridesDecoded0:[WAFV2ClientTypes.RuleActionOverride]? = nil
        if let ruleActionOverridesContainer = ruleActionOverridesContainer {
            ruleActionOverridesDecoded0 = [WAFV2ClientTypes.RuleActionOverride]()
            for structure0 in ruleActionOverridesContainer {
                if let structure0 = structure0 {
                    ruleActionOverridesDecoded0?.append(structure0)
                }
            }
        }
        ruleActionOverrides = ruleActionOverridesDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement used to run the rules that are defined in a [RuleGroup]. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. You can only use a rule group reference statement at the top level inside a web ACL.
    public struct RuleGroupReferenceStatement: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        /// This member is required.
        public var arn: Swift.String?
        /// Rules in the referenced rule group whose actions are set to Count. Instead of this option, use RuleActionOverrides. It accepts any valid action setting, including Count.
        public var excludedRules: [WAFV2ClientTypes.ExcludedRule]?
        /// Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. You can use overrides for testing, for example you can override all of rule actions to Count and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.
        public var ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]?

        public init (
            arn: Swift.String? = nil,
            excludedRules: [WAFV2ClientTypes.ExcludedRule]? = nil,
            ruleActionOverrides: [WAFV2ClientTypes.RuleActionOverride]? = nil
        )
        {
            self.arn = arn
            self.excludedRules = excludedRules
            self.ruleActionOverrides = ruleActionOverrides
        }
    }

}

extension WAFV2ClientTypes.RuleGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a [RuleGroup], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public struct RuleGroupSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the rule group that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the data type instance. You cannot change the name after you create the instance.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.RuleSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a [Rule], returned by operations like [DescribeManagedRuleGroup]. This provides information like the ID, that you can use to retrieve and manage a RuleGroup, and the ARN, that you provide to the [RuleGroupReferenceStatement] to use the rule group in a [Rule].
    public struct RuleSummary: Swift.Equatable {
        /// The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting.
        public var action: WAFV2ClientTypes.RuleAction?
        /// The name of the rule.
        public var name: Swift.String?

        public init (
            action: WAFV2ClientTypes.RuleAction? = nil,
            name: Swift.String? = nil
        )
        {
            self.action = action
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.SampledHTTPRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case captchaResponse = "CaptchaResponse"
        case challengeResponse = "ChallengeResponse"
        case labels = "Labels"
        case overriddenAction = "OverriddenAction"
        case request = "Request"
        case requestHeadersInserted = "RequestHeadersInserted"
        case responseCodeSent = "ResponseCodeSent"
        case ruleNameWithinRuleGroup = "RuleNameWithinRuleGroup"
        case timestamp = "Timestamp"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let captchaResponse = self.captchaResponse {
            try encodeContainer.encode(captchaResponse, forKey: .captchaResponse)
        }
        if let challengeResponse = self.challengeResponse {
            try encodeContainer.encode(challengeResponse, forKey: .challengeResponse)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for label0 in labels {
                try labelsContainer.encode(label0)
            }
        }
        if let overriddenAction = self.overriddenAction {
            try encodeContainer.encode(overriddenAction, forKey: .overriddenAction)
        }
        if let request = self.request {
            try encodeContainer.encode(request, forKey: .request)
        }
        if let requestHeadersInserted = requestHeadersInserted {
            var requestHeadersInsertedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestHeadersInserted)
            for httpheader0 in requestHeadersInserted {
                try requestHeadersInsertedContainer.encode(httpheader0)
            }
        }
        if let responseCodeSent = self.responseCodeSent {
            try encodeContainer.encode(responseCodeSent, forKey: .responseCodeSent)
        }
        if let ruleNameWithinRuleGroup = self.ruleNameWithinRuleGroup {
            try encodeContainer.encode(ruleNameWithinRuleGroup, forKey: .ruleNameWithinRuleGroup)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.HTTPRequest.self, forKey: .request)
        request = requestDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weight) ?? 0
        weight = weightDecoded
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let ruleNameWithinRuleGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleNameWithinRuleGroup)
        ruleNameWithinRuleGroup = ruleNameWithinRuleGroupDecoded
        let requestHeadersInsertedContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.HTTPHeader?].self, forKey: .requestHeadersInserted)
        var requestHeadersInsertedDecoded0:[WAFV2ClientTypes.HTTPHeader]? = nil
        if let requestHeadersInsertedContainer = requestHeadersInsertedContainer {
            requestHeadersInsertedDecoded0 = [WAFV2ClientTypes.HTTPHeader]()
            for structure0 in requestHeadersInsertedContainer {
                if let structure0 = structure0 {
                    requestHeadersInsertedDecoded0?.append(structure0)
                }
            }
        }
        requestHeadersInserted = requestHeadersInsertedDecoded0
        let responseCodeSentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCodeSent)
        responseCodeSent = responseCodeSentDecoded
        let labelsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Label?].self, forKey: .labels)
        var labelsDecoded0:[WAFV2ClientTypes.Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [WAFV2ClientTypes.Label]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let captchaResponseDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaResponse.self, forKey: .captchaResponse)
        captchaResponse = captchaResponseDecoded
        let challengeResponseDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeResponse.self, forKey: .challengeResponse)
        challengeResponse = challengeResponseDecoded
        let overriddenActionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .overriddenAction)
        overriddenAction = overriddenActionDecoded
    }
}

extension WAFV2ClientTypes {
    /// Represents a single sampled web request. The response from [GetSampledRequests] includes a SampledHTTPRequests complex type that appears as SampledRequests in the response syntax. SampledHTTPRequests contains an array of SampledHTTPRequest objects.
    public struct SampledHTTPRequest: Swift.Equatable {
        /// The action that WAF applied to the request.
        public var action: Swift.String?
        /// The CAPTCHA response for the request.
        public var captchaResponse: WAFV2ClientTypes.CaptchaResponse?
        /// The Challenge response for the request.
        public var challengeResponse: WAFV2ClientTypes.ChallengeResponse?
        /// Labels applied to the web request by matching rules. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. For example, awswaf:111122223333:myRuleGroup:testRules:testNS1:testNS2:labelNameA or awswaf:managed:aws:managed-rule-set:header:encoding:utf8.
        public var labels: [WAFV2ClientTypes.Label]?
        /// Used only for rule group rules that have a rule action override in place in the web ACL. This is the action that the rule group rule is configured for, and not the action that was applied to the request. The action that WAF applied is the Action value.
        public var overriddenAction: Swift.String?
        /// A complex type that contains detailed information about the request.
        /// This member is required.
        public var request: WAFV2ClientTypes.HTTPRequest?
        /// Custom request headers inserted by WAF into the request, according to the custom request configuration for the matching rule action.
        public var requestHeadersInserted: [WAFV2ClientTypes.HTTPHeader]?
        /// The response code that was sent for the request.
        public var responseCodeSent: Swift.Int?
        /// The name of the Rule that the request matched. For managed rule groups, the format for this name is ##. For your own rule groups, the format for this name is #. If the rule is not in a rule group, this field is absent.
        public var ruleNameWithinRuleGroup: Swift.String?
        /// The time at which WAF received the request from your Amazon Web Services resource, in Unix time format (in seconds).
        public var timestamp: ClientRuntime.Date?
        /// A value that indicates how one result in the response relates proportionally to other results in the response. For example, a result that has a weight of 2 represents roughly twice as many web requests as a result that has a weight of 1.
        /// This member is required.
        public var weight: Swift.Int

        public init (
            action: Swift.String? = nil,
            captchaResponse: WAFV2ClientTypes.CaptchaResponse? = nil,
            challengeResponse: WAFV2ClientTypes.ChallengeResponse? = nil,
            labels: [WAFV2ClientTypes.Label]? = nil,
            overriddenAction: Swift.String? = nil,
            request: WAFV2ClientTypes.HTTPRequest? = nil,
            requestHeadersInserted: [WAFV2ClientTypes.HTTPHeader]? = nil,
            responseCodeSent: Swift.Int? = nil,
            ruleNameWithinRuleGroup: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil,
            weight: Swift.Int = 0
        )
        {
            self.action = action
            self.captchaResponse = captchaResponse
            self.challengeResponse = challengeResponse
            self.labels = labels
            self.overriddenAction = overriddenAction
            self.request = request
            self.requestHeadersInserted = requestHeadersInserted
            self.responseCodeSent = responseCodeSent
            self.ruleNameWithinRuleGroup = ruleNameWithinRuleGroup
            self.timestamp = timestamp
            self.weight = weight
        }
    }

}

extension WAFV2ClientTypes {
    public enum Scope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudfront
        case regional
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .cloudfront,
                .regional,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudfront: return "CLOUDFRONT"
            case .regional: return "REGIONAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scope(rawValue: rawValue) ?? Scope.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes {
    public enum SensitivityLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case sdkUnknown(Swift.String)

        public static var allCases: [SensitivityLevel] {
            return [
                .high,
                .low,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SensitivityLevel(rawValue: rawValue) ?? SensitivityLevel.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.SingleHeader: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect one of the headers in the web request, identified by name, for example, User-Agent or Referer. The name isn't case sensitive. You can filter and inspect all headers with the FieldToMatch setting Headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "SingleHeader": { "Name": "haystack" }
    public struct SingleHeader: Swift.Equatable {
        /// The name of the query header to inspect.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.SingleQueryArgument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension WAFV2ClientTypes {
    /// Inspect one query argument in the web request, identified by name, for example UserName or SalesRegion. The name isn't case sensitive. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "SingleQueryArgument": { "Name": "myArgument" }
    public struct SingleQueryArgument: Swift.Equatable {
        /// The name of the query argument to inspect.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.SizeConstraintStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case fieldToMatch = "FieldToMatch"
        case size = "Size"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size) ?? 0
        size = sizeDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
    public struct SizeConstraintStatement: Swift.Equatable {
        /// The operator to use to compare the request part to the size setting.
        /// This member is required.
        public var comparisonOperator: WAFV2ClientTypes.ComparisonOperator?
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The size, in byte, to compare to the request part, after any transformations.
        /// This member is required.
        public var size: Swift.Int
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            comparisonOperator: WAFV2ClientTypes.ComparisonOperator? = nil,
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes.SqliMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case sensitivityLevel = "SensitivityLevel"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let sensitivityLevel = self.sensitivityLevel {
            try encodeContainer.encode(sensitivityLevel.rawValue, forKey: .sensitivityLevel)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
        let sensitivityLevelDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.SensitivityLevel.self, forKey: .sensitivityLevel)
        sensitivityLevel = sensitivityLevelDecoded
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
    public struct SqliMatchStatement: Swift.Equatable {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// The sensitivity that you want WAF to use to inspect for SQL injection attacks. HIGH detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see [Testing and tuning](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html) in the WAF Developer Guide. LOW is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives. Default: LOW
        public var sensitivityLevel: WAFV2ClientTypes.SensitivityLevel?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            sensitivityLevel: WAFV2ClientTypes.SensitivityLevel? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.sensitivityLevel = sensitivityLevel
            self.textTransformations = textTransformations
        }
    }

}

extension WAFV2ClientTypes.Statement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case andStatement = "AndStatement"
        case byteMatchStatement = "ByteMatchStatement"
        case geoMatchStatement = "GeoMatchStatement"
        case ipSetReferenceStatement = "IPSetReferenceStatement"
        case labelMatchStatement = "LabelMatchStatement"
        case managedRuleGroupStatement = "ManagedRuleGroupStatement"
        case notStatement = "NotStatement"
        case orStatement = "OrStatement"
        case rateBasedStatement = "RateBasedStatement"
        case regexMatchStatement = "RegexMatchStatement"
        case regexPatternSetReferenceStatement = "RegexPatternSetReferenceStatement"
        case ruleGroupReferenceStatement = "RuleGroupReferenceStatement"
        case sizeConstraintStatement = "SizeConstraintStatement"
        case sqliMatchStatement = "SqliMatchStatement"
        case xssMatchStatement = "XssMatchStatement"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let andStatement = self.andStatement {
            try encodeContainer.encode(andStatement, forKey: .andStatement)
        }
        if let byteMatchStatement = self.byteMatchStatement {
            try encodeContainer.encode(byteMatchStatement, forKey: .byteMatchStatement)
        }
        if let geoMatchStatement = self.geoMatchStatement {
            try encodeContainer.encode(geoMatchStatement, forKey: .geoMatchStatement)
        }
        if let ipSetReferenceStatement = self.ipSetReferenceStatement {
            try encodeContainer.encode(ipSetReferenceStatement, forKey: .ipSetReferenceStatement)
        }
        if let labelMatchStatement = self.labelMatchStatement {
            try encodeContainer.encode(labelMatchStatement, forKey: .labelMatchStatement)
        }
        if let managedRuleGroupStatement = self.managedRuleGroupStatement {
            try encodeContainer.encode(managedRuleGroupStatement, forKey: .managedRuleGroupStatement)
        }
        if let notStatement = self.notStatement {
            try encodeContainer.encode(notStatement, forKey: .notStatement)
        }
        if let orStatement = self.orStatement {
            try encodeContainer.encode(orStatement, forKey: .orStatement)
        }
        if let rateBasedStatement = self.rateBasedStatement {
            try encodeContainer.encode(rateBasedStatement, forKey: .rateBasedStatement)
        }
        if let regexMatchStatement = self.regexMatchStatement {
            try encodeContainer.encode(regexMatchStatement, forKey: .regexMatchStatement)
        }
        if let regexPatternSetReferenceStatement = self.regexPatternSetReferenceStatement {
            try encodeContainer.encode(regexPatternSetReferenceStatement, forKey: .regexPatternSetReferenceStatement)
        }
        if let ruleGroupReferenceStatement = self.ruleGroupReferenceStatement {
            try encodeContainer.encode(ruleGroupReferenceStatement, forKey: .ruleGroupReferenceStatement)
        }
        if let sizeConstraintStatement = self.sizeConstraintStatement {
            try encodeContainer.encode(sizeConstraintStatement, forKey: .sizeConstraintStatement)
        }
        if let sqliMatchStatement = self.sqliMatchStatement {
            try encodeContainer.encode(sqliMatchStatement, forKey: .sqliMatchStatement)
        }
        if let xssMatchStatement = self.xssMatchStatement {
            try encodeContainer.encode(xssMatchStatement, forKey: .xssMatchStatement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ByteMatchStatement.self, forKey: .byteMatchStatement)
        byteMatchStatement = byteMatchStatementDecoded
        let sqliMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.SqliMatchStatement.self, forKey: .sqliMatchStatement)
        sqliMatchStatement = sqliMatchStatementDecoded
        let xssMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.XssMatchStatement.self, forKey: .xssMatchStatement)
        xssMatchStatement = xssMatchStatementDecoded
        let sizeConstraintStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.SizeConstraintStatement.self, forKey: .sizeConstraintStatement)
        sizeConstraintStatement = sizeConstraintStatementDecoded
        let geoMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.GeoMatchStatement.self, forKey: .geoMatchStatement)
        geoMatchStatement = geoMatchStatementDecoded
        let ruleGroupReferenceStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RuleGroupReferenceStatement.self, forKey: .ruleGroupReferenceStatement)
        ruleGroupReferenceStatement = ruleGroupReferenceStatementDecoded
        let ipSetReferenceStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.IPSetReferenceStatement.self, forKey: .ipSetReferenceStatement)
        ipSetReferenceStatement = ipSetReferenceStatementDecoded
        let regexPatternSetReferenceStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RegexPatternSetReferenceStatement.self, forKey: .regexPatternSetReferenceStatement)
        regexPatternSetReferenceStatement = regexPatternSetReferenceStatementDecoded
        let rateBasedStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RateBasedStatement.self, forKey: .rateBasedStatement)
        rateBasedStatement = rateBasedStatementDecoded
        let andStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.AndStatement.self, forKey: .andStatement)
        andStatement = andStatementDecoded
        let orStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.OrStatement.self, forKey: .orStatement)
        orStatement = orStatementDecoded
        let notStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.NotStatement.self, forKey: .notStatement)
        notStatement = notStatementDecoded
        let managedRuleGroupStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ManagedRuleGroupStatement.self, forKey: .managedRuleGroupStatement)
        managedRuleGroupStatement = managedRuleGroupStatementDecoded
        let labelMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.LabelMatchStatement.self, forKey: .labelMatchStatement)
        labelMatchStatement = labelMatchStatementDecoded
        let regexMatchStatementDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.RegexMatchStatement.self, forKey: .regexMatchStatement)
        regexMatchStatement = regexMatchStatementDecoded
    }
}

extension WAFV2ClientTypes {
    /// The processing guidance for a [Rule], used by WAF to determine whether a web request matches the rule. For example specifications, see the examples section of [CreateWebACL].
    public struct Statement: Swift.Equatable {
        /// A logical rule statement used to combine other rule statements with AND logic. You provide more than one [Statement] within the AndStatement.
        public var andStatement: WAFV2ClientTypes.AndStatement?
        /// A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.
        public var byteMatchStatement: WAFV2ClientTypes.ByteMatchStatement?
        /// A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
        ///
        /// * To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the CountryCodes array.
        ///
        /// * Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
        ///
        ///
        /// WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match ForwardedIPConfig. If you use the web request origin, the label formats are awswaf:clientip:geo:region:- and awswaf:clientip:geo:country:. If you use a forwarded IP address, the label formats are awswaf:forwardedip:geo:region:- and awswaf:forwardedip:geo:country:. For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var geoMatchStatement: WAFV2ClientTypes.GeoMatchStatement?
        /// A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an [IPSet] that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see [CreateIPSet]. Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
        public var ipSetReferenceStatement: WAFV2ClientTypes.IPSetReferenceStatement?
        /// A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement.
        public var labelMatchStatement: WAFV2ClientTypes.LabelMatchStatement?
        /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet or the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
        public var managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement?
        /// A logical rule statement used to negate the results of another rule statement. You provide one [Statement] within the NotStatement.
        public var notStatement: WAFV2ClientTypes.NotStatement?
        /// A logical rule statement used to combine other rule statements with OR logic. You provide more than one [Statement] within the OrStatement.
        public var orStatement: WAFV2ClientTypes.OrStatement?
        /// A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit. You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:
        ///
        /// * An IP match statement with an IP set that specifies the address 192.0.2.44.
        ///
        /// * A string match statement that searches in the User-Agent header for the string BadBot.
        ///
        ///
        /// In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule. You cannot nest a RateBasedStatement inside another statement, for example inside a NotStatement or OrStatement. You can define a RateBasedStatement inside a web ACL and inside a rule group.
        public var rateBasedStatement: WAFV2ClientTypes.RateBasedStatement?
        /// A rule statement used to search web request components for a match against a single regular expression.
        public var regexMatchStatement: WAFV2ClientTypes.RegexMatchStatement?
        /// A rule statement used to search web request components for matches with regular expressions. To use this, create a [RegexPatternSet] that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see [CreateRegexPatternSet]. Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.
        public var regexPatternSetReferenceStatement: WAFV2ClientTypes.RegexPatternSetReferenceStatement?
        /// A rule statement used to run the rules that are defined in a [RuleGroup]. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement. You cannot nest a RuleGroupReferenceStatement, for example for use inside a NotStatement or OrStatement. You can only use a rule group reference statement at the top level inside a web ACL.
        public var ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement?
        /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
        public var sizeConstraintStatement: WAFV2ClientTypes.SizeConstraintStatement?
        /// A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
        public var sqliMatchStatement: WAFV2ClientTypes.SqliMatchStatement?
        /// A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
        public var xssMatchStatement: WAFV2ClientTypes.XssMatchStatement?

        public init (
            andStatement: WAFV2ClientTypes.AndStatement? = nil,
            byteMatchStatement: WAFV2ClientTypes.ByteMatchStatement? = nil,
            geoMatchStatement: WAFV2ClientTypes.GeoMatchStatement? = nil,
            ipSetReferenceStatement: WAFV2ClientTypes.IPSetReferenceStatement? = nil,
            labelMatchStatement: WAFV2ClientTypes.LabelMatchStatement? = nil,
            managedRuleGroupStatement: WAFV2ClientTypes.ManagedRuleGroupStatement? = nil,
            notStatement: WAFV2ClientTypes.NotStatement? = nil,
            orStatement: WAFV2ClientTypes.OrStatement? = nil,
            rateBasedStatement: WAFV2ClientTypes.RateBasedStatement? = nil,
            regexMatchStatement: WAFV2ClientTypes.RegexMatchStatement? = nil,
            regexPatternSetReferenceStatement: WAFV2ClientTypes.RegexPatternSetReferenceStatement? = nil,
            ruleGroupReferenceStatement: WAFV2ClientTypes.RuleGroupReferenceStatement? = nil,
            sizeConstraintStatement: WAFV2ClientTypes.SizeConstraintStatement? = nil,
            sqliMatchStatement: WAFV2ClientTypes.SqliMatchStatement? = nil,
            xssMatchStatement: WAFV2ClientTypes.XssMatchStatement? = nil
        )
        {
            self.andStatement = andStatement
            self.byteMatchStatement = byteMatchStatement
            self.geoMatchStatement = geoMatchStatement
            self.ipSetReferenceStatement = ipSetReferenceStatement
            self.labelMatchStatement = labelMatchStatement
            self.managedRuleGroupStatement = managedRuleGroupStatement
            self.notStatement = notStatement
            self.orStatement = orStatement
            self.rateBasedStatement = rateBasedStatement
            self.regexMatchStatement = regexMatchStatement
            self.regexPatternSetReferenceStatement = regexPatternSetReferenceStatement
            self.ruleGroupReferenceStatement = ruleGroupReferenceStatement
            self.sizeConstraintStatement = sizeConstraintStatement
            self.sqliMatchStatement = sqliMatchStatement
            self.xssMatchStatement = xssMatchStatement
        }
    }

}

extension WAFV2ClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension WAFV2ClientTypes {
    /// A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource. You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console.
    public struct Tag: Swift.Equatable {
        /// Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
        /// This member is required.
        public var key: Swift.String?
        /// Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension WAFV2ClientTypes.TagInfoForResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for tag0 in tagList {
                try tagListContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagListContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}

extension WAFV2ClientTypes {
    /// The collection of tagging definitions for an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource. You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console.
    public struct TagInfoForResource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource.
        public var resourceARN: Swift.String?
        /// The array of [Tag] objects defined for the resource.
        public var tagList: [WAFV2ClientTypes.Tag]?

        public init (
            resourceARN: Swift.String? = nil,
            tagList: [WAFV2ClientTypes.Tag]? = nil
        )
        {
            self.resourceARN = resourceARN
            self.tagList = tagList
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// An array of key:value pairs to associate with the resource.
    /// This member is required.
    public var tags: [WAFV2ClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [WAFV2ClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [WAFV2ClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WAFV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WAFV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension WAFV2ClientTypes.TextTransformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case priority = "Priority"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let typeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.TextTransformationType.self, forKey: .type)
        type = typeDecoded
    }
}

extension WAFV2ClientTypes {
    /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
    public struct TextTransformation: Swift.Equatable {
        /// Sets the relative processing order for multiple transformations that are defined for a rule statement. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// You can specify the following transformation types: BASE64_DECODE - Decode a Base64-encoded string. BASE64_DECODE_EXT - Decode a Base64-encoded string, but use a forgiving implementation that ignores characters that aren't valid. CMD_LINE - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command.
        ///
        /// * Delete the following characters: \ " ' ^
        ///
        /// * Delete spaces before the following characters: / (
        ///
        /// * Replace the following characters with a space: , ;
        ///
        /// * Replace multiple spaces with one space
        ///
        /// * Convert uppercase letters (A-Z) to lowercase (a-z)
        ///
        ///
        /// COMPRESS_WHITE_SPACE - Replace these characters with a space character (decimal 32):
        ///
        /// * \f, formfeed, decimal 12
        ///
        /// * \t, tab, decimal 9
        ///
        /// * \n, newline, decimal 10
        ///
        /// * \r, carriage return, decimal 13
        ///
        /// * \v, vertical tab, decimal 11
        ///
        /// * Non-breaking space, decimal 160
        ///
        ///
        /// COMPRESS_WHITE_SPACE also replaces multiple spaces with one space. CSS_DECODE - Decode characters that were encoded using CSS 2.x escape rules syndata.html#characters. This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, ja\vascript for javascript. ESCAPE_SEQ_DECODE - Decode the following ANSI C escape sequences: \a, \b, \f, \n, \r, \t, \v, \\, \?, \', \", \xHH (hexadecimal), \0OOO (octal). Encodings that aren't valid remain in the output. HEX_DECODE - Decode a string of hexadecimal characters into a binary. HTML_ENTITY_DECODE - Replace HTML-encoded characters with unencoded characters. HTML_ENTITY_DECODE performs these operations:
        ///
        /// * Replaces (ampersand)quot; with "
        ///
        /// * Replaces (ampersand)nbsp; with a non-breaking space, decimal 160
        ///
        /// * Replaces (ampersand)lt; with a "less than" symbol
        ///
        /// * Replaces (ampersand)gt; with >
        ///
        /// * Replaces characters that are represented in hexadecimal format, (ampersand)#xhhhh;, with the corresponding characters
        ///
        /// * Replaces characters that are represented in decimal format, (ampersand)#nnnn;, with the corresponding characters
        ///
        ///
        /// JS_DECODE - Decode JavaScript escape sequences. If a \
        ///     u
        ///
        /// HHHH code is in the full-width ASCII code range of FF01-FF5E, then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. LOWERCASE - Convert uppercase letters (A-Z) to lowercase (a-z). MD5 - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. NONE - Specify NONE if you don't want any text transformations. NORMALIZE_PATH - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. NORMALIZE_PATH_WIN - This is the same as NORMALIZE_PATH, but first converts backslash characters to forward slashes. REMOVE_NULLS - Remove all NULL bytes from the input. REPLACE_COMMENTS - Replace each occurrence of a C-style comment (/* ... */) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (*/) is not acted upon. REPLACE_NULLS - Replace NULL bytes in the input with space characters (ASCII 0x20). SQL_HEX_DECODE - Decode SQL hex data. Example (0x414243) will be decoded to (ABC). URL_DECODE - Decode a URL-encoded value. URL_DECODE_UNI - Like URL_DECODE, but with support for Microsoft-specific %u encoding. If the code is in the full-width ASCII code range of FF01-FF5E, the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. UTF8_TO_UNICODE - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.
        /// This member is required.
        public var type: WAFV2ClientTypes.TextTransformationType?

        public init (
            priority: Swift.Int = 0,
            type: WAFV2ClientTypes.TextTransformationType? = nil
        )
        {
            self.priority = priority
            self.type = type
        }
    }

}

extension WAFV2ClientTypes {
    public enum TextTransformationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case base64Decode
        case base64DecodeExt
        case cmdLine
        case compressWhiteSpace
        case cssDecode
        case escapeSeqDecode
        case hexDecode
        case htmlEntityDecode
        case jsDecode
        case lowercase
        case md5
        case `none`
        case normalizePath
        case normalizePathWin
        case removeNulls
        case replaceComments
        case replaceNulls
        case sqlHexDecode
        case urlDecode
        case urlDecodeUni
        case utf8ToUnicode
        case sdkUnknown(Swift.String)

        public static var allCases: [TextTransformationType] {
            return [
                .base64Decode,
                .base64DecodeExt,
                .cmdLine,
                .compressWhiteSpace,
                .cssDecode,
                .escapeSeqDecode,
                .hexDecode,
                .htmlEntityDecode,
                .jsDecode,
                .lowercase,
                .md5,
                .none,
                .normalizePath,
                .normalizePathWin,
                .removeNulls,
                .replaceComments,
                .replaceNulls,
                .sqlHexDecode,
                .urlDecode,
                .urlDecodeUni,
                .utf8ToUnicode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .base64Decode: return "BASE64_DECODE"
            case .base64DecodeExt: return "BASE64_DECODE_EXT"
            case .cmdLine: return "CMD_LINE"
            case .compressWhiteSpace: return "COMPRESS_WHITE_SPACE"
            case .cssDecode: return "CSS_DECODE"
            case .escapeSeqDecode: return "ESCAPE_SEQ_DECODE"
            case .hexDecode: return "HEX_DECODE"
            case .htmlEntityDecode: return "HTML_ENTITY_DECODE"
            case .jsDecode: return "JS_DECODE"
            case .lowercase: return "LOWERCASE"
            case .md5: return "MD5"
            case .none: return "NONE"
            case .normalizePath: return "NORMALIZE_PATH"
            case .normalizePathWin: return "NORMALIZE_PATH_WIN"
            case .removeNulls: return "REMOVE_NULLS"
            case .replaceComments: return "REPLACE_COMMENTS"
            case .replaceNulls: return "REPLACE_NULLS"
            case .sqlHexDecode: return "SQL_HEX_DECODE"
            case .urlDecode: return "URL_DECODE"
            case .urlDecodeUni: return "URL_DECODE_UNI"
            case .utf8ToUnicode: return "UTF8_TO_UNICODE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TextTransformationType(rawValue: rawValue) ?? TextTransformationType.sdkUnknown(rawValue)
        }
    }
}

extension WAFV2ClientTypes.TimeWindow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension WAFV2ClientTypes {
    /// In a [GetSampledRequests] request, the StartTime and EndTime objects specify the time range for which you want WAF to return a sample of web requests. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours. In a [GetSampledRequests] response, the StartTime and EndTime objects specify the time range for which WAF actually returned a sample of web requests. WAF gets the specified number of requests from among the first 5,000 requests that your Amazon Web Services resource receives during the specified time period. If your resource receives more than 5,000 requests during that period, WAF stops sampling after the 5,000th request. In that case, EndTime is the time that WAF received the 5,000th request.
    public struct TimeWindow: Swift.Equatable {
        /// The end of the time range from which you want GetSampledRequests to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var endTime: ClientRuntime.Date?
        /// The beginning of the time range from which you want GetSampledRequests to return a sample of the requests that your Amazon Web Services resource received. You must specify the times in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". You can specify any time range in the previous three hours.
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// An array of keys identifying the tags to disassociate from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationException" : self = .wAFTagOperationException(try WAFTagOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFTagOperationInternalErrorException" : self = .wAFTagOperationInternalErrorException(try WAFTagOperationInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFTagOperationException(WAFTagOperationException)
    case wAFTagOperationInternalErrorException(WAFTagOperationInternalErrorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateIPSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for ipaddress0 in addresses {
                try addressesContainer.encode(ipaddress0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension UpdateIPSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateIPSetInput: Swift.Equatable {
    /// Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses. All addresses must be specified using Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. Example address strings:
    ///
    /// * To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify 192.0.2.44/32.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify 192.0.2.0/24.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify 1111:0000:0000:0000:0000:0000:0000:0111/128.
    ///
    /// * To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify 1111:0000:0000:0000:0000:0000:0000:0000/64.
    ///
    ///
    /// For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Example JSON Addresses specifications:
    ///
    /// * Empty array: "Addresses": []
    ///
    /// * Array with one address: "Addresses": ["192.0.2.44/32"]
    ///
    /// * Array with three addresses: "Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]
    ///
    /// * INVALID specification: "Addresses": [""] INVALID
    /// This member is required.
    public var addresses: [Swift.String]?
    /// A description of the IP set that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the IP set. You cannot change the name of an IPSet after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        addresses: [Swift.String]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.addresses = addresses
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
    }
}

struct UpdateIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let description: Swift.String?
    let addresses: [Swift.String]?
    let lockToken: Swift.String?
}

extension UpdateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension UpdateIPSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateIPSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateIPSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateIPSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateIPSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateIPSetOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateIPSetOutputResponseBody: Swift.Equatable {
    let nextLockToken: Swift.String?
}

extension UpdateIPSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension UpdateManagedRuleSetVersionExpiryDateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryTimestamp = "ExpiryTimestamp"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
        case versionToExpire = "VersionToExpire"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiryTimestamp = self.expiryTimestamp {
            try encodeContainer.encodeTimestamp(expiryTimestamp, format: .epochSeconds, forKey: .expiryTimestamp)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let versionToExpire = self.versionToExpire {
            try encodeContainer.encode(versionToExpire, forKey: .versionToExpire)
        }
    }
}

extension UpdateManagedRuleSetVersionExpiryDateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateManagedRuleSetVersionExpiryDateInput: Swift.Equatable {
    /// The time that you want the version to expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
    /// This member is required.
    public var expiryTimestamp: ClientRuntime.Date?
    /// A unique identifier for the managed rule set. The ID is returned in the responses to commands like list. You provide it to operations like get and update.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set. This name is assigned to the corresponding managed rule group, which your customers can access and use.
    /// This member is required.
    public var name: Swift.String?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// The version that you want to remove from your list of offerings for the named managed rule group.
    /// This member is required.
    public var versionToExpire: Swift.String?

    public init (
        expiryTimestamp: ClientRuntime.Date? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        versionToExpire: Swift.String? = nil
    )
    {
        self.expiryTimestamp = expiryTimestamp
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.scope = scope
        self.versionToExpire = versionToExpire
    }
}

struct UpdateManagedRuleSetVersionExpiryDateInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
    let versionToExpire: Swift.String?
    let expiryTimestamp: ClientRuntime.Date?
}

extension UpdateManagedRuleSetVersionExpiryDateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryTimestamp = "ExpiryTimestamp"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
        case versionToExpire = "VersionToExpire"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let versionToExpireDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionToExpire)
        versionToExpire = versionToExpireDecoded
        let expiryTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiryTimestamp)
        expiryTimestamp = expiryTimestampDecoded
    }
}

extension UpdateManagedRuleSetVersionExpiryDateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateManagedRuleSetVersionExpiryDateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateManagedRuleSetVersionExpiryDateOutputError: Swift.Error, Swift.Equatable {
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateManagedRuleSetVersionExpiryDateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateManagedRuleSetVersionExpiryDateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.expiringVersion = output.expiringVersion
            self.expiryTimestamp = output.expiryTimestamp
            self.nextLockToken = output.nextLockToken
        } else {
            self.expiringVersion = nil
            self.expiryTimestamp = nil
            self.nextLockToken = nil
        }
    }
}

public struct UpdateManagedRuleSetVersionExpiryDateOutputResponse: Swift.Equatable {
    /// The version that is set to expire.
    public var expiringVersion: Swift.String?
    /// The time that the version will expire. Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z".
    public var expiryTimestamp: ClientRuntime.Date?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    public var nextLockToken: Swift.String?

    public init (
        expiringVersion: Swift.String? = nil,
        expiryTimestamp: ClientRuntime.Date? = nil,
        nextLockToken: Swift.String? = nil
    )
    {
        self.expiringVersion = expiringVersion
        self.expiryTimestamp = expiryTimestamp
        self.nextLockToken = nextLockToken
    }
}

struct UpdateManagedRuleSetVersionExpiryDateOutputResponseBody: Swift.Equatable {
    let expiringVersion: Swift.String?
    let expiryTimestamp: ClientRuntime.Date?
    let nextLockToken: Swift.String?
}

extension UpdateManagedRuleSetVersionExpiryDateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiringVersion = "ExpiringVersion"
        case expiryTimestamp = "ExpiryTimestamp"
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expiringVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expiringVersion)
        expiringVersion = expiringVersionDecoded
        let expiryTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expiryTimestamp)
        expiryTimestamp = expiryTimestampDecoded
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension UpdateRegexPatternSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regex0 in regularExpressionList {
                try regularExpressionListContainer.encode(regex0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension UpdateRegexPatternSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRegexPatternSetInput: Swift.Equatable {
    /// A description of the set that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the set. You cannot change the name after you create the set.
    /// This member is required.
    public var name: Swift.String?
    ///
    /// This member is required.
    public var regularExpressionList: [WAFV2ClientTypes.Regex]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?

    public init (
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        regularExpressionList: [WAFV2ClientTypes.Regex]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil
    )
    {
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.regularExpressionList = regularExpressionList
        self.scope = scope
    }
}

struct UpdateRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let description: Swift.String?
    let regularExpressionList: [WAFV2ClientTypes.Regex]?
    let lockToken: Swift.String?
}

extension UpdateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[WAFV2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [WAFV2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}

extension UpdateRegexPatternSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRegexPatternSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRegexPatternSetOutputError: Swift.Error, Swift.Equatable {
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRegexPatternSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRegexPatternSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateRegexPatternSetOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateRegexPatternSetOutputResponseBody: Swift.Equatable {
    let nextLockToken: Swift.String?
}

extension UpdateRegexPatternSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension UpdateRuleGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

extension UpdateRuleGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRuleGroupInput: Swift.Equatable {
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    /// A description of the rule group that helps with identification.
    public var description: Swift.String?
    /// A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the rule group. You cannot change the name of a rule group after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init (
        customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.customResponseBodies = customResponseBodies
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}

struct UpdateRuleGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let description: Swift.String?
    let rules: [WAFV2ClientTypes.Rule]?
    let visibilityConfig: WAFV2ClientTypes.VisibilityConfig?
    let lockToken: Swift.String?
    let customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
}

extension UpdateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customResponseBodies = "CustomResponseBodies"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
    }
}

extension UpdateRuleGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuleGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFConfigurationWarningException" : self = .wAFConfigurationWarningException(try WAFConfigurationWarningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRuleGroupOutputError: Swift.Error, Swift.Equatable {
    case wAFConfigurationWarningException(WAFConfigurationWarningException)
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuleGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRuleGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateRuleGroupOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateRuleGroupOutputResponseBody: Swift.Equatable {
    let nextLockToken: Swift.String?
}

extension UpdateRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension UpdateWebACLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tokenDomains = "TokenDomains"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let challengeConfig = self.challengeConfig {
            try encodeContainer.encode(challengeConfig, forKey: .challengeConfig)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let tokenDomains = tokenDomains {
            var tokenDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokenDomains)
            for tokendomain0 in tokenDomains {
                try tokenDomainsContainer.encode(tokendomain0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }
}

extension UpdateWebACLInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateWebACLInput: Swift.Equatable {
    /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
    public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
    public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    /// The action to perform if none of the Rules contained in the WebACL match.
    /// This member is required.
    public var defaultAction: WAFV2ClientTypes.DefaultAction?
    /// A description of the web ACL that helps with identification.
    public var description: Swift.String?
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [WAFV2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, a Amazon Cognito user pool, or an App Runner service. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: WAFV2ClientTypes.Scope?
    /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains. Example JSON: "TokenDomains": { "mywebsite.com", "myotherwebsite.com" } Public suffixes aren't allowed. For example, you can't use usa.gov or co.uk as token domains.
    public var tokenDomains: [Swift.String]?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

    public init (
        captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
        challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
        customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [WAFV2ClientTypes.Rule]? = nil,
        scope: WAFV2ClientTypes.Scope? = nil,
        tokenDomains: [Swift.String]? = nil,
        visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.captchaConfig = captchaConfig
        self.challengeConfig = challengeConfig
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.tokenDomains = tokenDomains
        self.visibilityConfig = visibilityConfig
    }
}

struct UpdateWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: WAFV2ClientTypes.Scope?
    let id: Swift.String?
    let defaultAction: WAFV2ClientTypes.DefaultAction?
    let description: Swift.String?
    let rules: [WAFV2ClientTypes.Rule]?
    let visibilityConfig: WAFV2ClientTypes.VisibilityConfig?
    let lockToken: Swift.String?
    let customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
    let captchaConfig: WAFV2ClientTypes.CaptchaConfig?
    let challengeConfig: WAFV2ClientTypes.ChallengeConfig?
    let tokenDomains: [Swift.String]?
}

extension UpdateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tokenDomains = "TokenDomains"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let captchaConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
        let challengeConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeConfig.self, forKey: .challengeConfig)
        challengeConfig = challengeConfigDecoded
        let tokenDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenDomains)
        var tokenDomainsDecoded0:[Swift.String]? = nil
        if let tokenDomainsContainer = tokenDomainsContainer {
            tokenDomainsDecoded0 = [Swift.String]()
            for string0 in tokenDomainsContainer {
                if let string0 = string0 {
                    tokenDomainsDecoded0?.append(string0)
                }
            }
        }
        tokenDomains = tokenDomainsDecoded0
    }
}

extension UpdateWebACLOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateWebACLOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "WAFConfigurationWarningException" : self = .wAFConfigurationWarningException(try WAFConfigurationWarningException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFDuplicateItemException" : self = .wAFDuplicateItemException(try WAFDuplicateItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFExpiredManagedRuleGroupVersionException" : self = .wAFExpiredManagedRuleGroupVersionException(try WAFExpiredManagedRuleGroupVersionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInternalErrorException" : self = .wAFInternalErrorException(try WAFInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidOperationException" : self = .wAFInvalidOperationException(try WAFInvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidParameterException" : self = .wAFInvalidParameterException(try WAFInvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFInvalidResourceException" : self = .wAFInvalidResourceException(try WAFInvalidResourceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFLimitsExceededException" : self = .wAFLimitsExceededException(try WAFLimitsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFNonexistentItemException" : self = .wAFNonexistentItemException(try WAFNonexistentItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFOptimisticLockException" : self = .wAFOptimisticLockException(try WAFOptimisticLockException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFSubscriptionNotFoundException" : self = .wAFSubscriptionNotFoundException(try WAFSubscriptionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WAFUnavailableEntityException" : self = .wAFUnavailableEntityException(try WAFUnavailableEntityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateWebACLOutputError: Swift.Error, Swift.Equatable {
    case wAFConfigurationWarningException(WAFConfigurationWarningException)
    case wAFDuplicateItemException(WAFDuplicateItemException)
    case wAFExpiredManagedRuleGroupVersionException(WAFExpiredManagedRuleGroupVersionException)
    case wAFInternalErrorException(WAFInternalErrorException)
    case wAFInvalidOperationException(WAFInvalidOperationException)
    case wAFInvalidParameterException(WAFInvalidParameterException)
    case wAFInvalidResourceException(WAFInvalidResourceException)
    case wAFLimitsExceededException(WAFLimitsExceededException)
    case wAFNonexistentItemException(WAFNonexistentItemException)
    case wAFOptimisticLockException(WAFOptimisticLockException)
    case wAFSubscriptionNotFoundException(WAFSubscriptionNotFoundException)
    case wAFUnavailableEntityException(WAFUnavailableEntityException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateWebACLOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateWebACLOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextLockToken = output.nextLockToken
        } else {
            self.nextLockToken = nil
        }
    }
}

public struct UpdateWebACLOutputResponse: Swift.Equatable {
    /// A token used for optimistic locking. WAF returns this token to your update requests. You use NextLockToken in the same manner as you use LockToken.
    public var nextLockToken: Swift.String?

    public init (
        nextLockToken: Swift.String? = nil
    )
    {
        self.nextLockToken = nextLockToken
    }
}

struct UpdateWebACLOutputResponseBody: Swift.Equatable {
    let nextLockToken: Swift.String?
}

extension UpdateWebACLOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextLockToken = "NextLockToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextLockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextLockToken)
        nextLockToken = nextLockTokenDecoded
    }
}

extension WAFV2ClientTypes.UriPath: Swift.Codable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension WAFV2ClientTypes {
    /// Inspect the path component of the URI of the web request. This is the part of the web request that identifies a resource. For example, /images/daily-ad.jpg. This is used only in the [FieldToMatch] specification for some web request component types. JSON specification: "UriPath": {}
    public struct UriPath: Swift.Equatable {

        public init () { }
    }

}

extension WAFV2ClientTypes.UsernameField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifier = "Identifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
    }
}

extension WAFV2ClientTypes {
    /// Details about your login page username field for request inspection, used in the AWSManagedRulesATPRuleSetRequestInspection configuration.
    public struct UsernameField: Swift.Equatable {
        /// The name of the username field. For example /form/username.
        /// This member is required.
        public var identifier: Swift.String?

        public init (
            identifier: Swift.String? = nil
        )
        {
            self.identifier = identifier
        }
    }

}

extension WAFV2ClientTypes.VersionToPublish: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedRuleGroupArn = "AssociatedRuleGroupArn"
        case forecastedLifetime = "ForecastedLifetime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedRuleGroupArn = self.associatedRuleGroupArn {
            try encodeContainer.encode(associatedRuleGroupArn, forKey: .associatedRuleGroupArn)
        }
        if let forecastedLifetime = self.forecastedLifetime {
            try encodeContainer.encode(forecastedLifetime, forKey: .forecastedLifetime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRuleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedRuleGroupArn)
        associatedRuleGroupArn = associatedRuleGroupArnDecoded
        let forecastedLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .forecastedLifetime)
        forecastedLifetime = forecastedLifetimeDecoded
    }
}

extension WAFV2ClientTypes {
    /// A version of the named managed rule group, that the rule group's vendor publishes for use by customers. This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    public struct VersionToPublish: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the vendor's rule group that's used in the published managed rule group version.
        public var associatedRuleGroupArn: Swift.String?
        /// The amount of time the vendor expects this version of the managed rule group to last, in days.
        public var forecastedLifetime: Swift.Int?

        public init (
            associatedRuleGroupArn: Swift.String? = nil,
            forecastedLifetime: Swift.Int? = nil
        )
        {
            self.associatedRuleGroupArn = associatedRuleGroupArn
            self.forecastedLifetime = forecastedLifetime
        }
    }

}

extension WAFV2ClientTypes.VisibilityConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        case metricName = "MetricName"
        case sampledRequestsEnabled = "SampledRequestsEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cloudWatchMetricsEnabled != false {
            try encodeContainer.encode(cloudWatchMetricsEnabled, forKey: .cloudWatchMetricsEnabled)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if sampledRequestsEnabled != false {
            try encodeContainer.encode(sampledRequestsEnabled, forKey: .sampledRequestsEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledRequestsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sampledRequestsEnabled) ?? false
        sampledRequestsEnabled = sampledRequestsEnabledDecoded
        let cloudWatchMetricsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudWatchMetricsEnabled) ?? false
        cloudWatchMetricsEnabled = cloudWatchMetricsEnabledDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
    }
}

extension WAFV2ClientTypes {
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    public struct VisibilityConfig: Swift.Equatable {
        /// A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see [WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
        /// This member is required.
        public var cloudWatchMetricsEnabled: Swift.Bool
        /// A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for WAF, for example All and Default_Action.
        /// This member is required.
        public var metricName: Swift.String?
        /// A boolean indicating whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console.
        /// This member is required.
        public var sampledRequestsEnabled: Swift.Bool

        public init (
            cloudWatchMetricsEnabled: Swift.Bool = false,
            metricName: Swift.String? = nil,
            sampledRequestsEnabled: Swift.Bool = false
        )
        {
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
            self.metricName = metricName
            self.sampledRequestsEnabled = sampledRequestsEnabled
        }
    }

}

extension WAFAssociatedItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFAssociatedItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform the operation because your resource is being used by another resource or it’s associated with another resource.
public struct WAFAssociatedItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFAssociatedItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFAssociatedItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFConfigurationWarningException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFConfigurationWarningExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you are inspecting the web request body, headers, or cookies without specifying how to handle oversize components. Rules that inspect the body must either provide an OversizeHandling configuration or they must be preceded by a SizeConstraintStatement that blocks the body content from being too large. Rules that inspect the headers or cookies must provide an OversizeHandling configuration. Provide the handling configuration and retry your operation. Alternately, you can suppress this warning by adding the following tag to the resource that you provide to this operation: Tag (key:WAF:OversizeFieldsHandlingConstraintOptOut, value:true).
public struct WAFConfigurationWarningException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFConfigurationWarningExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFConfigurationWarningExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFDuplicateItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFDuplicateItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform the operation because the resource that you tried to save is a duplicate of an existing one.
public struct WAFDuplicateItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFDuplicateItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFDuplicateItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFExpiredManagedRuleGroupVersionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFExpiredManagedRuleGroupVersionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because the specified version for the managed rule group has expired. You can retrieve the available versions for the managed rule group by calling [ListAvailableManagedRuleGroupVersions].
public struct WAFExpiredManagedRuleGroupVersionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFExpiredManagedRuleGroupVersionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFExpiredManagedRuleGroupVersionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInternalErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request is valid, but WAF couldn’t perform the operation because of a system problem. Retry your request.
public struct WAFInternalErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInternalErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation isn't valid.
public struct WAFInvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.field = output.field
            self.message = output.message
            self.parameter = output.parameter
            self.reason = output.reason
        } else {
            self.field = nil
            self.parameter = nil
            self.reason = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because WAF didn't recognize a parameter in the request. For example:
///
/// * You specified a parameter name or value that isn't valid.
///
/// * Your nested statement isn't valid. You might have tried to nest a statement that can’t be nested.
///
/// * You tried to update a WebACL with a DefaultAction that isn't among the types available at [DefaultAction].
///
/// * Your request references an ARN that is malformed, or corresponds to a resource with which a web ACL can't be associated.
public struct WAFInvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The settings where the invalid parameter was found.
    public var field: WAFV2ClientTypes.ParameterExceptionField?
    public var message: Swift.String?
    /// The invalid parameter that resulted in the exception.
    public var parameter: Swift.String?
    /// Additional information about the exception.
    public var reason: Swift.String?

    public init (
        field: WAFV2ClientTypes.ParameterExceptionField? = nil,
        message: Swift.String? = nil,
        parameter: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.field = field
        self.message = message
        self.parameter = parameter
        self.reason = reason
    }
}

struct WAFInvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let field: WAFV2ClientTypes.ParameterExceptionField?
    let parameter: Swift.String?
    let reason: Swift.String?
}

extension WAFInvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field = "Field"
        case parameter = "Parameter"
        case reason = "Reason"
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let fieldDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ParameterExceptionField.self, forKey: .field)
        field = fieldDecoded
        let parameterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameter)
        parameter = parameterDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension WAFInvalidPermissionPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidPermissionPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because the specified policy isn't in the proper format. The policy specifications must conform to the following:
///
/// * The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.
///
/// * The policy must include specifications for Effect, Action, and Principal.
///
/// * Effect must specify Allow.
///
/// * Action must specify wafv2:CreateWebACL, wafv2:UpdateWebACL, and wafv2:PutFirewallManagerRuleGroups and may optionally specify wafv2:GetRuleGroup. WAF rejects any extra actions or wildcard actions in the policy.
///
/// * The policy must not include a Resource parameter.
///
///
/// For more information, see [IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html).
public struct WAFInvalidPermissionPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidPermissionPolicyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidPermissionPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFInvalidResourceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFInvalidResourceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform the operation because the resource that you requested isn’t valid. Check the resource, and try again.
public struct WAFInvalidResourceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFInvalidResourceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFInvalidResourceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFLimitsExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFLimitsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform the operation because you exceeded your resource limit. For example, the maximum number of WebACL objects that you can create for an Amazon Web Services account. For more information, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the WAF Developer Guide.
public struct WAFLimitsExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFLimitsExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFLimitsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFLogDestinationPermissionIssueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFLogDestinationPermissionIssueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation failed because you don't have the permissions that your logging configuration requires. For information, see [Logging web ACL traffic information](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) in the WAF Developer Guide.
public struct WAFLogDestinationPermissionIssueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFLogDestinationPermissionIssueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFLogDestinationPermissionIssueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFNonexistentItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFNonexistentItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform the operation because your resource doesn't exist. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate.
public struct WAFNonexistentItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFNonexistentItemExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFNonexistentItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFOptimisticLockException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFOptimisticLockExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t save your changes because you tried to update or delete a resource that has changed since you last retrieved it. Get the resource again, make any changes you need to make to the new copy, and retry your operation.
public struct WAFOptimisticLockException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFOptimisticLockExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFOptimisticLockExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFServiceLinkedRoleErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFServiceLinkedRoleErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF is not able to access the service linked role. This can be caused by a previous PutLoggingConfiguration request, which can lock the service linked role for about 20 seconds. Please try your request again. The service linked role can also be locked by a previous DeleteServiceLinkedRole request, which can lock the role for 15 minutes or more. If you recently made a call to DeleteServiceLinkedRole, wait at least 15 minutes and try the request again. If you receive this same exception again, you will have to wait additional time until the role is unlocked.
public struct WAFServiceLinkedRoleErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFServiceLinkedRoleErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFServiceLinkedRoleErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFSubscriptionNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFSubscriptionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You tried to use a managed rule group that's available by subscription, but you aren't subscribed to it yet.
public struct WAFSubscriptionNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFSubscriptionNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFSubscriptionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFTagOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error occurred during the tagging operation. Retry your request.
public struct WAFTagOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFTagOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFTagOperationInternalErrorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFTagOperationInternalErrorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t perform your tagging operation because of an internal error. Retry your request.
public struct WAFTagOperationInternalErrorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFTagOperationInternalErrorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFTagOperationInternalErrorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFUnavailableEntityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: WAFUnavailableEntityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// WAF couldn’t retrieve a resource that you specified for this operation. If you've just created a resource that you're using in this operation, you might just need to wait a few minutes. It can take from a few seconds to a number of minutes for changes to propagate. Verify the resources that you are specifying in your request parameters and then retry the operation.
public struct WAFUnavailableEntityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct WAFUnavailableEntityExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension WAFUnavailableEntityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension WAFV2ClientTypes.WebACL: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case capacity = "Capacity"
        case captchaConfig = "CaptchaConfig"
        case challengeConfig = "ChallengeConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case name = "Name"
        case postProcessFirewallManagerRuleGroups = "PostProcessFirewallManagerRuleGroups"
        case preProcessFirewallManagerRuleGroups = "PreProcessFirewallManagerRuleGroups"
        case rules = "Rules"
        case tokenDomains = "TokenDomains"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let challengeConfig = self.challengeConfig {
            try encodeContainer.encode(challengeConfig, forKey: .challengeConfig)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customResponseBodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customResponseBodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups {
            var postProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .postProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroup0 in postProcessFirewallManagerRuleGroups {
                try postProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroup0)
            }
        }
        if let preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups {
            var preProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .preProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroup0 in preProcessFirewallManagerRuleGroups {
                try preProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroup0)
            }
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rule0 in rules {
                try rulesContainer.encode(rule0)
            }
        }
        if let tokenDomains = tokenDomains {
            var tokenDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokenDomains)
            for tokendomain0 in tokenDomains {
                try tokenDomainsContainer.encode(tokendomain0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[WAFV2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [WAFV2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let preProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .preProcessFirewallManagerRuleGroups)
        var preProcessFirewallManagerRuleGroupsDecoded0:[WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let preProcessFirewallManagerRuleGroupsContainer = preProcessFirewallManagerRuleGroupsContainer {
            preProcessFirewallManagerRuleGroupsDecoded0 = [WAFV2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in preProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    preProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroupsDecoded0
        let postProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .postProcessFirewallManagerRuleGroups)
        var postProcessFirewallManagerRuleGroupsDecoded0:[WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let postProcessFirewallManagerRuleGroupsContainer = postProcessFirewallManagerRuleGroupsContainer {
            postProcessFirewallManagerRuleGroupsDecoded0 = [WAFV2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in postProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    postProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroupsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .managedByFirewallManager) ?? false
        managedByFirewallManager = managedByFirewallManagerDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: WAFV2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:WAFV2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let captchaConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
        let challengeConfigDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.ChallengeConfig.self, forKey: .challengeConfig)
        challengeConfig = challengeConfigDecoded
        let tokenDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenDomains)
        var tokenDomainsDecoded0:[Swift.String]? = nil
        if let tokenDomainsContainer = tokenDomainsContainer {
            tokenDomainsDecoded0 = [Swift.String]()
            for string0 in tokenDomainsContainer {
                if let string0 = string0 {
                    tokenDomainsDecoded0?.append(string0)
                }
            }
        }
        tokenDomains = tokenDomainsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types [Rule], [RuleGroup], and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, an AppSync GraphQL API, Amazon Cognito user pool, or an App Runner service.
    public struct WebACL: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the web ACL that you want to associate with the resource.
        /// This member is required.
        public var arn: Swift.String?
        /// The web ACL capacity units (WCUs) currently being used by this web ACL. WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        public var capacity: Swift.Int
        /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
        public var captchaConfig: WAFV2ClientTypes.CaptchaConfig?
        /// Specifies how WAF should handle challenge evaluations for rules that don't have their own ChallengeConfig settings. If you don't specify this, WAF uses its default settings for ChallengeConfig.
        public var challengeConfig: WAFV2ClientTypes.ChallengeConfig?
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]?
        /// The action to perform if none of the Rules contained in the WebACL match.
        /// This member is required.
        public var defaultAction: WAFV2ClientTypes.DefaultAction?
        /// A description of the web ACL that helps with identification.
        public var description: Swift.String?
        /// A unique identifier for the WebACL. This ID is returned in the responses to create and list commands. You use this ID to do things like get, update, and delete a WebACL.
        /// This member is required.
        public var id: Swift.String?
        /// The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix.
        ///
        /// * The syntax for the label namespace prefix for a web ACL is the following: awswaf::webacl::
        ///
        /// * When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: :
        public var labelNamespace: Swift.String?
        /// Indicates whether this web ACL is managed by Firewall Manager. If true, then only Firewall Manager can delete the web ACL or any Firewall Manager rule groups in the web ACL.
        public var managedByFirewallManager: Swift.Bool
        /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The last set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized before these. In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public var postProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]?
        /// The first set of rules for WAF to process in the web ACL. This is defined in an Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any rules and rule groups that you define for the web ACL are prioritized after these. In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run first in the web ACL and a set of rule groups to run last. Within each set, the administrator prioritizes the rule groups, to determine their relative processing order.
        public var preProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]?
        /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
        public var rules: [WAFV2ClientTypes.Rule]?
        /// Specifies the domains that WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When WAF provides a token, it uses the domain of the Amazon Web Services resource that the web ACL is protecting. If you don't specify a list of token domains, WAF accepts tokens only for the domain of the protected resource. With a token domain list, WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        public var tokenDomains: [Swift.String]?
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: WAFV2ClientTypes.VisibilityConfig?

        public init (
            arn: Swift.String? = nil,
            capacity: Swift.Int = 0,
            captchaConfig: WAFV2ClientTypes.CaptchaConfig? = nil,
            challengeConfig: WAFV2ClientTypes.ChallengeConfig? = nil,
            customResponseBodies: [Swift.String:WAFV2ClientTypes.CustomResponseBody]? = nil,
            defaultAction: WAFV2ClientTypes.DefaultAction? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            labelNamespace: Swift.String? = nil,
            managedByFirewallManager: Swift.Bool = false,
            name: Swift.String? = nil,
            postProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil,
            preProcessFirewallManagerRuleGroups: [WAFV2ClientTypes.FirewallManagerRuleGroup]? = nil,
            rules: [WAFV2ClientTypes.Rule]? = nil,
            tokenDomains: [Swift.String]? = nil,
            visibilityConfig: WAFV2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.arn = arn
            self.capacity = capacity
            self.captchaConfig = captchaConfig
            self.challengeConfig = challengeConfig
            self.customResponseBodies = customResponseBodies
            self.defaultAction = defaultAction
            self.description = description
            self.id = id
            self.labelNamespace = labelNamespace
            self.managedByFirewallManager = managedByFirewallManager
            self.name = name
            self.postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups
            self.preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups
            self.rules = rules
            self.tokenDomains = tokenDomains
            self.visibilityConfig = visibilityConfig
        }
    }

}

extension WAFV2ClientTypes.WebACLSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "ARN"
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lockToken = self.lockToken {
            try encodeContainer.encode(lockToken, forKey: .lockToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension WAFV2ClientTypes {
    /// High-level information about a [WebACL], returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a WebACL, and the ARN, that you provide to operations like [AssociateWebACL].
    public struct WebACLSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the entity.
        public var arn: Swift.String?
        /// A description of the web ACL that helps with identification.
        public var description: Swift.String?
        /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
        public var id: Swift.String?
        /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
        public var lockToken: Swift.String?
        /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
        public var name: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lockToken: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.lockToken = lockToken
            self.name = name
        }
    }

}

extension WAFV2ClientTypes.XssMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformation0 in textTransformations {
                try textTransformationsContainer.encode(texttransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(WAFV2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([WAFV2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[WAFV2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [WAFV2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
    }
}

extension WAFV2ClientTypes {
    /// A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
    public struct XssMatchStatement: Swift.Equatable {
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: WAFV2ClientTypes.FieldToMatch?
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [WAFV2ClientTypes.TextTransformation]?

        public init (
            fieldToMatch: WAFV2ClientTypes.FieldToMatch? = nil,
            textTransformations: [WAFV2ClientTypes.TextTransformation]? = nil
        )
        {
            self.fieldToMatch = fieldToMatch
            self.textTransformations = textTransformations
        }
    }

}
