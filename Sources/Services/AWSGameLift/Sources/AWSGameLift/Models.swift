//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct DeleteAliasOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBuildOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteContainerGroupDefinitionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteFleetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteScalingPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteScriptOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterGameServerOutput: Swift.Sendable {

    public init() { }
}

extension GameLiftClientTypes {

    public enum AcceptanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accept
        case reject
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceptanceType] {
            return [
                .accept,
                .reject
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accept: return "ACCEPT"
            case .reject: return "REJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The service encountered an unrecoverable internal failure while processing the request. Clients can retry such requests immediately or after a waiting period.
public struct InternalServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One or more parameter values in the request are invalid. Correct the invalid parameter values before retrying.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested resources was not found. The resource was either not created yet or deleted.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested operation is not supported in the Region specified.
public struct UnsupportedRegionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedRegionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AcceptMatchInput: Swift.Sendable {
    /// Player response to the proposed match.
    /// This member is required.
    public var acceptanceType: GameLiftClientTypes.AcceptanceType?
    /// A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.
    /// This member is required.
    public var playerIds: [Swift.String]?
    /// A unique identifier for a matchmaking ticket. The ticket must be in status REQUIRES_ACCEPTANCE; otherwise this request will fail.
    /// This member is required.
    public var ticketId: Swift.String?

    public init(
        acceptanceType: GameLiftClientTypes.AcceptanceType? = nil,
        playerIds: [Swift.String]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.acceptanceType = acceptanceType
        self.playerIds = playerIds
        self.ticketId = ticketId
    }
}

extension AcceptMatchInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptMatchInput(acceptanceType: \(Swift.String(describing: acceptanceType)), ticketId: \(Swift.String(describing: ticketId)), playerIds: \"CONTENT_REDACTED\")"}
}

public struct AcceptMatchOutput: Swift.Sendable {

    public init() { }
}

extension GameLiftClientTypes {

    public enum RoutingStrategyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case simple
        case terminal
        case sdkUnknown(Swift.String)

        public static var allCases: [RoutingStrategyType] {
            return [
                .simple,
                .terminal
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .simple: return "SIMPLE"
            case .terminal: return "TERMINAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// The routing configuration for a fleet alias. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct RoutingStrategy: Swift.Sendable {
        /// A unique identifier for the fleet that the alias points to. This value is the fleet ID, not the fleet ARN.
        public var fleetId: Swift.String?
        /// The message text to be used with a terminal routing strategy.
        public var message: Swift.String?
        /// The type of routing strategy for the alias. Possible routing types include the following:
        ///
        /// * SIMPLE - The alias resolves to one specific fleet. Use this type when routing to active fleets.
        ///
        /// * TERMINAL - The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the message embedded.
        public var type: GameLiftClientTypes.RoutingStrategyType?

        public init(
            fleetId: Swift.String? = nil,
            message: Swift.String? = nil,
            type: GameLiftClientTypes.RoutingStrategyType? = nil
        )
        {
            self.fleetId = fleetId
            self.message = message
            self.type = type
        }
    }
}

extension GameLiftClientTypes {

    /// Properties that describe an alias resource. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Alias: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift alias resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::alias/alias-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift alias ARN, the resource ID matches the alias ID value.
        public var aliasArn: Swift.String?
        /// A unique identifier for the alias. Alias IDs are unique within a Region.
        public var aliasId: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A human-readable description of an alias.
        public var description: Swift.String?
        /// The time that this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var lastUpdatedTime: Foundation.Date?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public var name: Swift.String?
        /// The routing configuration, including routing type and fleet target, for the alias.
        public var routingStrategy: GameLiftClientTypes.RoutingStrategy?

        public init(
            aliasArn: Swift.String? = nil,
            aliasId: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil
        )
        {
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.creationTime = creationTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.routingStrategy = routingStrategy
        }
    }
}

extension GameLiftClientTypes {

    /// Amazon GameLift configuration options for your Anywhere fleets.
    public struct AnywhereConfiguration: Swift.Sendable {
        /// The cost to run your fleet per hour. Amazon GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see [Setting up queues](https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html) in the Amazon GameLift Developer Guide.
        /// This member is required.
        public var cost: Swift.String?

        public init(
            cost: Swift.String? = nil
        )
        {
            self.cost = cost
        }
    }
}

extension GameLiftClientTypes {

    /// Values for use in player attribute key-value pairs. This object lets you specify an attribute value using any of the valid data types: string, number, string array, or data map. Each AttributeValue object can use only one of the available properties.
    public struct AttributeValue: Swift.Sendable {
        /// For number values, expressed as double.
        public var n: Swift.Double?
        /// For single string values. Maximum string length is 100 characters.
        public var s: Swift.String?
        /// For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters.
        public var sdm: [Swift.String: Swift.Double]?
        /// For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.
        public var sl: [Swift.String]?

        public init(
            n: Swift.Double? = nil,
            s: Swift.String? = nil,
            sdm: [Swift.String: Swift.Double]? = nil,
            sl: [Swift.String]? = nil
        )
        {
            self.n = n
            self.s = s
            self.sdm = sdm
            self.sl = sl
        }
    }
}

extension GameLiftClientTypes {

    /// Amazon Web Services account security credentials that allow interactions with Amazon GameLift resources. The credentials are temporary and valid for a limited time span. You can request fresh credentials at any time. Amazon Web Services security credentials consist of three parts: an access key ID, a secret access key, and a session token. You must use all three parts together to authenticate your access requests. You need Amazon Web Services credentials for the following tasks:
    ///
    /// * To upload a game server build directly to Amazon GameLift S3 storage using CreateBuild. To get access for this task, call [RequestUploadCredentials].
    ///
    /// * To remotely connect to an active Amazon GameLift fleet instances. To get remote access, call [GetComputeAccess].
    public struct AwsCredentials: Swift.Sendable {
        /// The access key ID that identifies the temporary security credentials.
        public var accessKeyId: Swift.String?
        /// The secret access key that can be used to sign requests.
        public var secretAccessKey: Swift.String?
        /// The token that users must pass to the service API to use the temporary credentials.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }
}

extension GameLiftClientTypes.AwsCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension GameLiftClientTypes {

    public enum BackfillMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [BackfillMode] {
            return [
                .automatic,
                .manual
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum BalancingStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemandOnly
        case spotOnly
        case spotPreferred
        case sdkUnknown(Swift.String)

        public static var allCases: [BalancingStrategy] {
            return [
                .onDemandOnly,
                .spotOnly,
                .spotPreferred
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemandOnly: return "ON_DEMAND_ONLY"
            case .spotOnly: return "SPOT_ONLY"
            case .spotPreferred: return "SPOT_PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum OperatingSystem: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonLinux
        case amazonLinux2
        case amazonLinux2023
        case windows2012
        case windows2016
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatingSystem] {
            return [
                .amazonLinux,
                .amazonLinux2,
                .amazonLinux2023,
                .windows2012,
                .windows2016
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonLinux: return "AMAZON_LINUX"
            case .amazonLinux2: return "AMAZON_LINUX_2"
            case .amazonLinux2023: return "AMAZON_LINUX_2023"
            case .windows2012: return "WINDOWS_2012"
            case .windows2016: return "WINDOWS_2016"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum BuildStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case initialized
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildStatus] {
            return [
                .failed,
                .initialized,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .initialized: return "INITIALIZED"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Properties describing a custom game build. [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Build: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) assigned to a Amazon GameLift build resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::build/build-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift build ARN, the resource ID matches the BuildId value.
        public var buildArn: Swift.String?
        /// A unique identifier for the build.
        public var buildId: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A descriptive label associated with a build. Build names don't need to be unique. It can be set using [CreateBuild](https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateBuild.html) or [UpdateBuild](https://docs.aws.amazon.com/gamelift/latest/apireference/UpdateBuild).
        public var name: Swift.String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// The Amazon GameLift Server SDK version used to develop your game server.
        public var serverSdkVersion: Swift.String?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED or when using a custom Amazon S3 storage location, this value is 0.
        public var sizeOnDisk: Swift.Int?
        /// Current status of the build. Possible build statuses include the following:
        ///
        /// * INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.
        ///
        /// * READY -- The game build has been successfully uploaded. You can now create new fleets for this build.
        ///
        /// * FAILED -- The game build upload failed. You cannot create new fleets for this build.
        public var status: GameLiftClientTypes.BuildStatus?
        /// Version information associated with a build or script. Version strings don't need to be unique.
        public var version: Swift.String?

        public init(
            buildArn: Swift.String? = nil,
            buildId: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            serverSdkVersion: Swift.String? = nil,
            sizeOnDisk: Swift.Int? = nil,
            status: GameLiftClientTypes.BuildStatus? = nil,
            version: Swift.String? = nil
        )
        {
            self.buildArn = buildArn
            self.buildId = buildId
            self.creationTime = creationTime
            self.name = name
            self.operatingSystem = operatingSystem
            self.serverSdkVersion = serverSdkVersion
            self.sizeOnDisk = sizeOnDisk
            self.status = status
            self.version = version
        }
    }
}

extension GameLiftClientTypes {

    public enum CertificateType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case generated
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateType] {
            return [
                .disabled,
                .generated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .generated: return "GENERATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the [Amazon GameLift Server SDK](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html) operation GetInstanceCertificate.
    public struct CertificateConfiguration: Swift.Sendable {
        /// Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values include:
        ///
        /// * GENERATED - Generate a TLS/SSL certificate for this fleet.
        ///
        /// * DISABLED - (default) Do not generate a TLS/SSL certificate for this fleet.
        /// This member is required.
        public var certificateType: GameLiftClientTypes.CertificateType?

        public init(
            certificateType: GameLiftClientTypes.CertificateType? = nil
        )
        {
            self.certificateType = certificateType
        }
    }
}

extension GameLiftClientTypes {

    public enum FilterInstanceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case draining
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterInstanceStatus] {
            return [
                .active,
                .draining
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .draining: return "DRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Filters which game servers may be claimed when calling ClaimGameServer.
    public struct ClaimFilterOption: Swift.Sendable {
        /// List of instance statuses that game servers may be claimed on. If provided, the list must contain the ACTIVE status.
        public var instanceStatuses: [GameLiftClientTypes.FilterInstanceStatus]?

        public init(
            instanceStatuses: [GameLiftClientTypes.FilterInstanceStatus]? = nil
        )
        {
            self.instanceStatuses = instanceStatuses
        }
    }
}

/// The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified game server group has no available game servers to fulfill a ClaimGameServer request. Clients can retry such requests immediately or after a waiting period.
public struct OutOfCapacityException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OutOfCapacityException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The client failed authentication. Clients should not retry such requests.
public struct UnauthorizedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ClaimGameServerInput: Swift.Sendable {
    /// Object that restricts how a claimed game server is chosen.
    public var filterOption: GameLiftClientTypes.ClaimFilterOption?
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want Amazon GameLift FleetIQ to look for an available game server to claim.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to claim. If this parameter is left empty, Amazon GameLift FleetIQ searches for an available game server in the specified game server group.
    public var gameServerId: Swift.String?

    public init(
        filterOption: GameLiftClientTypes.ClaimFilterOption? = nil,
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.filterOption = filterOption
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

extension GameLiftClientTypes {

    public enum GameServerClaimStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case claimed
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerClaimStatus] {
            return [
                .claimed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .claimed: return "CLAIMED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum GameServerUtilizationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case utilized
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerUtilizationStatus] {
            return [
                .available,
                .utilized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .utilized: return "UTILIZED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Properties describing a game server that is running on an instance in a game server group. A game server is created by a successful call to RegisterGameServer and deleted by calling DeregisterGameServer. A game server is claimed to host a game session by calling ClaimGameServer.
    public struct GameServer: Swift.Sendable {
        /// Indicates when an available game server has been reserved for gameplay but has not yet started hosting a game. Once it is claimed, the game server remains in CLAIMED status for a maximum of one minute. During this time, game clients connect to the game server to start the game and trigger the game server to update its utilization status. After one minute, the game server claim status reverts to null.
        public var claimStatus: GameLiftClientTypes.GameServerClaimStatus?
        /// The port and IP address that must be used to establish a client connection to the game server.
        public var connectionInfo: Swift.String?
        /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
        public var gameServerData: Swift.String?
        /// The ARN identifier for the game server group where the game server is located.
        public var gameServerGroupArn: Swift.String?
        /// A unique identifier for the game server group where the game server is running.
        public var gameServerGroupName: Swift.String?
        /// A custom string that uniquely identifies the game server. Game server IDs are developer-defined and are unique across all game server groups in an Amazon Web Services account.
        public var gameServerId: Swift.String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
        public var instanceId: Swift.String?
        /// Timestamp that indicates the last time the game server was claimed. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). This value is used to calculate when a claimed game server's status should revert to null.
        public var lastClaimTime: Foundation.Date?
        /// Timestamp that indicates the last time the game server was updated with health status. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). After game server registration, this property is only changed when a game server update specifies a health check value.
        public var lastHealthCheckTime: Foundation.Date?
        /// Timestamp that indicates when the game server registered. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var registrationTime: Foundation.Date?
        /// Indicates whether the game server is currently available for new games or is busy. Possible statuses include:
        ///
        /// * AVAILABLE - The game server is available to be claimed. A game server that has been claimed remains in this status until it reports game hosting activity.
        ///
        /// * UTILIZED - The game server is currently hosting a game session with players.
        public var utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?

        public init(
            claimStatus: GameLiftClientTypes.GameServerClaimStatus? = nil,
            connectionInfo: Swift.String? = nil,
            gameServerData: Swift.String? = nil,
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            gameServerId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            lastClaimTime: Foundation.Date? = nil,
            lastHealthCheckTime: Foundation.Date? = nil,
            registrationTime: Foundation.Date? = nil,
            utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus? = nil
        )
        {
            self.claimStatus = claimStatus
            self.connectionInfo = connectionInfo
            self.gameServerData = gameServerData
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.instanceId = instanceId
            self.lastClaimTime = lastClaimTime
            self.lastHealthCheckTime = lastHealthCheckTime
            self.registrationTime = registrationTime
            self.utilizationStatus = utilizationStatus
        }
    }
}

public struct ClaimGameServerOutput: Swift.Sendable {
    /// Object that describes the newly claimed game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init(
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

extension GameLiftClientTypes {

    public enum ComparisonOperatorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperatorType] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum ComputeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case pending
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeStatus] {
            return [
                .active,
                .pending,
                .terminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pending: return "PENDING"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum IpProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [IpProtocol] {
            return [
                .tcp,
                .udp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Defines how an internal-facing container port is mapped to an external-facing connection port on a fleet instance of compute type CONTAINER. Incoming traffic, such as a game client, uses a connection port to connect to a process in the container fleet. Amazon GameLift directs the inbound traffic to the container port that is assigned to the process, such as a game session, running on a container. Part of: [ContainerAttributes]
    public struct ContainerPortMapping: Swift.Sendable {
        /// The port opened on the fleet instance. This is also called the "host port".
        public var connectionPort: Swift.Int?
        /// The port opened on the container.
        public var containerPort: Swift.Int?
        /// The network protocol that this mapping supports.
        public var `protocol`: GameLiftClientTypes.IpProtocol?

        public init(
            connectionPort: Swift.Int? = nil,
            containerPort: Swift.Int? = nil,
            `protocol`: GameLiftClientTypes.IpProtocol? = nil
        )
        {
            self.connectionPort = connectionPort
            self.containerPort = containerPort
            self.`protocol` = `protocol`
        }
    }
}

extension GameLiftClientTypes.ContainerPortMapping: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerPortMapping(protocol: \(Swift.String(describing: `protocol`)), connectionPort: \"CONTENT_REDACTED\", containerPort: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Describes attributes of containers that are deployed to a fleet with compute type CONTAINER.
    public struct ContainerAttributes: Swift.Sendable {
        /// Describes how container ports map to connection ports on the fleet instance. Incoming traffic connects to a game via a connection port. A ContainerPortMapping directs the traffic from a connection port to a port on the container that hosts the game session.
        public var containerPortMappings: [GameLiftClientTypes.ContainerPortMapping]?

        public init(
            containerPortMappings: [GameLiftClientTypes.ContainerPortMapping]? = nil
        )
        {
            self.containerPortMappings = containerPortMappings
        }
    }
}

extension GameLiftClientTypes {

    public enum EC2InstanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case c32xlarge
        case c34xlarge
        case c38xlarge
        case c3Large
        case c3Xlarge
        case c42xlarge
        case c44xlarge
        case c48xlarge
        case c4Large
        case c4Xlarge
        case c512xlarge
        case c518xlarge
        case c524xlarge
        case c52xlarge
        case c54xlarge
        case c59xlarge
        case c5Large
        case c5Xlarge
        case c5a12xlarge
        case c5a16xlarge
        case c5a24xlarge
        case c5a2xlarge
        case c5a4xlarge
        case c5a8xlarge
        case c5aLarge
        case c5aXlarge
        case c5d12xlarge
        case c5d18xlarge
        case c5d24xlarge
        case c5d2xlarge
        case c5d4xlarge
        case c5d9xlarge
        case c5dLarge
        case c5dXlarge
        case c6a12xlarge
        case c6a16xlarge
        case c6a24xlarge
        case c6a2xlarge
        case c6a4xlarge
        case c6a8xlarge
        case c6aLarge
        case c6aXlarge
        case c6g12xlarge
        case c6g16xlarge
        case c6g2xlarge
        case c6g4xlarge
        case c6g8xlarge
        case c6gLarge
        case c6gMedium
        case c6gXlarge
        case c6gn12xlarge
        case c6gn16xlarge
        case c6gn2xlarge
        case c6gn4xlarge
        case c6gn8xlarge
        case c6gnLarge
        case c6gnMedium
        case c6gnXlarge
        case c6i12xlarge
        case c6i16xlarge
        case c6i24xlarge
        case c6i2xlarge
        case c6i4xlarge
        case c6i8xlarge
        case c6iLarge
        case c6iXlarge
        case c7g12xlarge
        case c7g16xlarge
        case c7g2xlarge
        case c7g4xlarge
        case c7g8xlarge
        case c7gLarge
        case c7gMedium
        case c7gXlarge
        case g5g16xlarge
        case g5g2xlarge
        case g5g4xlarge
        case g5g8xlarge
        case g5gXlarge
        case m32xlarge
        case m3Large
        case m3Medium
        case m3Xlarge
        case m410xlarge
        case m42xlarge
        case m44xlarge
        case m4Large
        case m4Xlarge
        case m512xlarge
        case m516xlarge
        case m524xlarge
        case m52xlarge
        case m54xlarge
        case m58xlarge
        case m5Large
        case m5Xlarge
        case m5a12xlarge
        case m5a16xlarge
        case m5a24xlarge
        case m5a2xlarge
        case m5a4xlarge
        case m5a8xlarge
        case m5aLarge
        case m5aXlarge
        case m6g12xlarge
        case m6g16xlarge
        case m6g2xlarge
        case m6g4xlarge
        case m6g8xlarge
        case m6gLarge
        case m6gMedium
        case m6gXlarge
        case m7g12xlarge
        case m7g16xlarge
        case m7g2xlarge
        case m7g4xlarge
        case m7g8xlarge
        case m7gLarge
        case m7gMedium
        case m7gXlarge
        case r32xlarge
        case r34xlarge
        case r38xlarge
        case r3Large
        case r3Xlarge
        case r416xlarge
        case r42xlarge
        case r44xlarge
        case r48xlarge
        case r4Large
        case r4Xlarge
        case r512xlarge
        case r516xlarge
        case r524xlarge
        case r52xlarge
        case r54xlarge
        case r58xlarge
        case r5Large
        case r5Xlarge
        case r5a12xlarge
        case r5a16xlarge
        case r5a24xlarge
        case r5a2xlarge
        case r5a4xlarge
        case r5a8xlarge
        case r5aLarge
        case r5aXlarge
        case r5d12xlarge
        case r5d16xlarge
        case r5d24xlarge
        case r5d2xlarge
        case r5d4xlarge
        case r5d8xlarge
        case r5dLarge
        case r5dXlarge
        case r6g12xlarge
        case r6g16xlarge
        case r6g2xlarge
        case r6g4xlarge
        case r6g8xlarge
        case r6gLarge
        case r6gMedium
        case r6gXlarge
        case r7g12xlarge
        case r7g16xlarge
        case r7g2xlarge
        case r7g4xlarge
        case r7g8xlarge
        case r7gLarge
        case r7gMedium
        case r7gXlarge
        case t2Large
        case t2Medium
        case t2Micro
        case t2Small
        case sdkUnknown(Swift.String)

        public static var allCases: [EC2InstanceType] {
            return [
                .c32xlarge,
                .c34xlarge,
                .c38xlarge,
                .c3Large,
                .c3Xlarge,
                .c42xlarge,
                .c44xlarge,
                .c48xlarge,
                .c4Large,
                .c4Xlarge,
                .c512xlarge,
                .c518xlarge,
                .c524xlarge,
                .c52xlarge,
                .c54xlarge,
                .c59xlarge,
                .c5Large,
                .c5Xlarge,
                .c5a12xlarge,
                .c5a16xlarge,
                .c5a24xlarge,
                .c5a2xlarge,
                .c5a4xlarge,
                .c5a8xlarge,
                .c5aLarge,
                .c5aXlarge,
                .c5d12xlarge,
                .c5d18xlarge,
                .c5d24xlarge,
                .c5d2xlarge,
                .c5d4xlarge,
                .c5d9xlarge,
                .c5dLarge,
                .c5dXlarge,
                .c6a12xlarge,
                .c6a16xlarge,
                .c6a24xlarge,
                .c6a2xlarge,
                .c6a4xlarge,
                .c6a8xlarge,
                .c6aLarge,
                .c6aXlarge,
                .c6g12xlarge,
                .c6g16xlarge,
                .c6g2xlarge,
                .c6g4xlarge,
                .c6g8xlarge,
                .c6gLarge,
                .c6gMedium,
                .c6gXlarge,
                .c6gn12xlarge,
                .c6gn16xlarge,
                .c6gn2xlarge,
                .c6gn4xlarge,
                .c6gn8xlarge,
                .c6gnLarge,
                .c6gnMedium,
                .c6gnXlarge,
                .c6i12xlarge,
                .c6i16xlarge,
                .c6i24xlarge,
                .c6i2xlarge,
                .c6i4xlarge,
                .c6i8xlarge,
                .c6iLarge,
                .c6iXlarge,
                .c7g12xlarge,
                .c7g16xlarge,
                .c7g2xlarge,
                .c7g4xlarge,
                .c7g8xlarge,
                .c7gLarge,
                .c7gMedium,
                .c7gXlarge,
                .g5g16xlarge,
                .g5g2xlarge,
                .g5g4xlarge,
                .g5g8xlarge,
                .g5gXlarge,
                .m32xlarge,
                .m3Large,
                .m3Medium,
                .m3Xlarge,
                .m410xlarge,
                .m42xlarge,
                .m44xlarge,
                .m4Large,
                .m4Xlarge,
                .m512xlarge,
                .m516xlarge,
                .m524xlarge,
                .m52xlarge,
                .m54xlarge,
                .m58xlarge,
                .m5Large,
                .m5Xlarge,
                .m5a12xlarge,
                .m5a16xlarge,
                .m5a24xlarge,
                .m5a2xlarge,
                .m5a4xlarge,
                .m5a8xlarge,
                .m5aLarge,
                .m5aXlarge,
                .m6g12xlarge,
                .m6g16xlarge,
                .m6g2xlarge,
                .m6g4xlarge,
                .m6g8xlarge,
                .m6gLarge,
                .m6gMedium,
                .m6gXlarge,
                .m7g12xlarge,
                .m7g16xlarge,
                .m7g2xlarge,
                .m7g4xlarge,
                .m7g8xlarge,
                .m7gLarge,
                .m7gMedium,
                .m7gXlarge,
                .r32xlarge,
                .r34xlarge,
                .r38xlarge,
                .r3Large,
                .r3Xlarge,
                .r416xlarge,
                .r42xlarge,
                .r44xlarge,
                .r48xlarge,
                .r4Large,
                .r4Xlarge,
                .r512xlarge,
                .r516xlarge,
                .r524xlarge,
                .r52xlarge,
                .r54xlarge,
                .r58xlarge,
                .r5Large,
                .r5Xlarge,
                .r5a12xlarge,
                .r5a16xlarge,
                .r5a24xlarge,
                .r5a2xlarge,
                .r5a4xlarge,
                .r5a8xlarge,
                .r5aLarge,
                .r5aXlarge,
                .r5d12xlarge,
                .r5d16xlarge,
                .r5d24xlarge,
                .r5d2xlarge,
                .r5d4xlarge,
                .r5d8xlarge,
                .r5dLarge,
                .r5dXlarge,
                .r6g12xlarge,
                .r6g16xlarge,
                .r6g2xlarge,
                .r6g4xlarge,
                .r6g8xlarge,
                .r6gLarge,
                .r6gMedium,
                .r6gXlarge,
                .r7g12xlarge,
                .r7g16xlarge,
                .r7g2xlarge,
                .r7g4xlarge,
                .r7g8xlarge,
                .r7gLarge,
                .r7gMedium,
                .r7gXlarge,
                .t2Large,
                .t2Medium,
                .t2Micro,
                .t2Small
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .c32xlarge: return "c3.2xlarge"
            case .c34xlarge: return "c3.4xlarge"
            case .c38xlarge: return "c3.8xlarge"
            case .c3Large: return "c3.large"
            case .c3Xlarge: return "c3.xlarge"
            case .c42xlarge: return "c4.2xlarge"
            case .c44xlarge: return "c4.4xlarge"
            case .c48xlarge: return "c4.8xlarge"
            case .c4Large: return "c4.large"
            case .c4Xlarge: return "c4.xlarge"
            case .c512xlarge: return "c5.12xlarge"
            case .c518xlarge: return "c5.18xlarge"
            case .c524xlarge: return "c5.24xlarge"
            case .c52xlarge: return "c5.2xlarge"
            case .c54xlarge: return "c5.4xlarge"
            case .c59xlarge: return "c5.9xlarge"
            case .c5Large: return "c5.large"
            case .c5Xlarge: return "c5.xlarge"
            case .c5a12xlarge: return "c5a.12xlarge"
            case .c5a16xlarge: return "c5a.16xlarge"
            case .c5a24xlarge: return "c5a.24xlarge"
            case .c5a2xlarge: return "c5a.2xlarge"
            case .c5a4xlarge: return "c5a.4xlarge"
            case .c5a8xlarge: return "c5a.8xlarge"
            case .c5aLarge: return "c5a.large"
            case .c5aXlarge: return "c5a.xlarge"
            case .c5d12xlarge: return "c5d.12xlarge"
            case .c5d18xlarge: return "c5d.18xlarge"
            case .c5d24xlarge: return "c5d.24xlarge"
            case .c5d2xlarge: return "c5d.2xlarge"
            case .c5d4xlarge: return "c5d.4xlarge"
            case .c5d9xlarge: return "c5d.9xlarge"
            case .c5dLarge: return "c5d.large"
            case .c5dXlarge: return "c5d.xlarge"
            case .c6a12xlarge: return "c6a.12xlarge"
            case .c6a16xlarge: return "c6a.16xlarge"
            case .c6a24xlarge: return "c6a.24xlarge"
            case .c6a2xlarge: return "c6a.2xlarge"
            case .c6a4xlarge: return "c6a.4xlarge"
            case .c6a8xlarge: return "c6a.8xlarge"
            case .c6aLarge: return "c6a.large"
            case .c6aXlarge: return "c6a.xlarge"
            case .c6g12xlarge: return "c6g.12xlarge"
            case .c6g16xlarge: return "c6g.16xlarge"
            case .c6g2xlarge: return "c6g.2xlarge"
            case .c6g4xlarge: return "c6g.4xlarge"
            case .c6g8xlarge: return "c6g.8xlarge"
            case .c6gLarge: return "c6g.large"
            case .c6gMedium: return "c6g.medium"
            case .c6gXlarge: return "c6g.xlarge"
            case .c6gn12xlarge: return "c6gn.12xlarge"
            case .c6gn16xlarge: return "c6gn.16xlarge"
            case .c6gn2xlarge: return "c6gn.2xlarge"
            case .c6gn4xlarge: return "c6gn.4xlarge"
            case .c6gn8xlarge: return "c6gn.8xlarge"
            case .c6gnLarge: return "c6gn.large"
            case .c6gnMedium: return "c6gn.medium"
            case .c6gnXlarge: return "c6gn.xlarge"
            case .c6i12xlarge: return "c6i.12xlarge"
            case .c6i16xlarge: return "c6i.16xlarge"
            case .c6i24xlarge: return "c6i.24xlarge"
            case .c6i2xlarge: return "c6i.2xlarge"
            case .c6i4xlarge: return "c6i.4xlarge"
            case .c6i8xlarge: return "c6i.8xlarge"
            case .c6iLarge: return "c6i.large"
            case .c6iXlarge: return "c6i.xlarge"
            case .c7g12xlarge: return "c7g.12xlarge"
            case .c7g16xlarge: return "c7g.16xlarge"
            case .c7g2xlarge: return "c7g.2xlarge"
            case .c7g4xlarge: return "c7g.4xlarge"
            case .c7g8xlarge: return "c7g.8xlarge"
            case .c7gLarge: return "c7g.large"
            case .c7gMedium: return "c7g.medium"
            case .c7gXlarge: return "c7g.xlarge"
            case .g5g16xlarge: return "g5g.16xlarge"
            case .g5g2xlarge: return "g5g.2xlarge"
            case .g5g4xlarge: return "g5g.4xlarge"
            case .g5g8xlarge: return "g5g.8xlarge"
            case .g5gXlarge: return "g5g.xlarge"
            case .m32xlarge: return "m3.2xlarge"
            case .m3Large: return "m3.large"
            case .m3Medium: return "m3.medium"
            case .m3Xlarge: return "m3.xlarge"
            case .m410xlarge: return "m4.10xlarge"
            case .m42xlarge: return "m4.2xlarge"
            case .m44xlarge: return "m4.4xlarge"
            case .m4Large: return "m4.large"
            case .m4Xlarge: return "m4.xlarge"
            case .m512xlarge: return "m5.12xlarge"
            case .m516xlarge: return "m5.16xlarge"
            case .m524xlarge: return "m5.24xlarge"
            case .m52xlarge: return "m5.2xlarge"
            case .m54xlarge: return "m5.4xlarge"
            case .m58xlarge: return "m5.8xlarge"
            case .m5Large: return "m5.large"
            case .m5Xlarge: return "m5.xlarge"
            case .m5a12xlarge: return "m5a.12xlarge"
            case .m5a16xlarge: return "m5a.16xlarge"
            case .m5a24xlarge: return "m5a.24xlarge"
            case .m5a2xlarge: return "m5a.2xlarge"
            case .m5a4xlarge: return "m5a.4xlarge"
            case .m5a8xlarge: return "m5a.8xlarge"
            case .m5aLarge: return "m5a.large"
            case .m5aXlarge: return "m5a.xlarge"
            case .m6g12xlarge: return "m6g.12xlarge"
            case .m6g16xlarge: return "m6g.16xlarge"
            case .m6g2xlarge: return "m6g.2xlarge"
            case .m6g4xlarge: return "m6g.4xlarge"
            case .m6g8xlarge: return "m6g.8xlarge"
            case .m6gLarge: return "m6g.large"
            case .m6gMedium: return "m6g.medium"
            case .m6gXlarge: return "m6g.xlarge"
            case .m7g12xlarge: return "m7g.12xlarge"
            case .m7g16xlarge: return "m7g.16xlarge"
            case .m7g2xlarge: return "m7g.2xlarge"
            case .m7g4xlarge: return "m7g.4xlarge"
            case .m7g8xlarge: return "m7g.8xlarge"
            case .m7gLarge: return "m7g.large"
            case .m7gMedium: return "m7g.medium"
            case .m7gXlarge: return "m7g.xlarge"
            case .r32xlarge: return "r3.2xlarge"
            case .r34xlarge: return "r3.4xlarge"
            case .r38xlarge: return "r3.8xlarge"
            case .r3Large: return "r3.large"
            case .r3Xlarge: return "r3.xlarge"
            case .r416xlarge: return "r4.16xlarge"
            case .r42xlarge: return "r4.2xlarge"
            case .r44xlarge: return "r4.4xlarge"
            case .r48xlarge: return "r4.8xlarge"
            case .r4Large: return "r4.large"
            case .r4Xlarge: return "r4.xlarge"
            case .r512xlarge: return "r5.12xlarge"
            case .r516xlarge: return "r5.16xlarge"
            case .r524xlarge: return "r5.24xlarge"
            case .r52xlarge: return "r5.2xlarge"
            case .r54xlarge: return "r5.4xlarge"
            case .r58xlarge: return "r5.8xlarge"
            case .r5Large: return "r5.large"
            case .r5Xlarge: return "r5.xlarge"
            case .r5a12xlarge: return "r5a.12xlarge"
            case .r5a16xlarge: return "r5a.16xlarge"
            case .r5a24xlarge: return "r5a.24xlarge"
            case .r5a2xlarge: return "r5a.2xlarge"
            case .r5a4xlarge: return "r5a.4xlarge"
            case .r5a8xlarge: return "r5a.8xlarge"
            case .r5aLarge: return "r5a.large"
            case .r5aXlarge: return "r5a.xlarge"
            case .r5d12xlarge: return "r5d.12xlarge"
            case .r5d16xlarge: return "r5d.16xlarge"
            case .r5d24xlarge: return "r5d.24xlarge"
            case .r5d2xlarge: return "r5d.2xlarge"
            case .r5d4xlarge: return "r5d.4xlarge"
            case .r5d8xlarge: return "r5d.8xlarge"
            case .r5dLarge: return "r5d.large"
            case .r5dXlarge: return "r5d.xlarge"
            case .r6g12xlarge: return "r6g.12xlarge"
            case .r6g16xlarge: return "r6g.16xlarge"
            case .r6g2xlarge: return "r6g.2xlarge"
            case .r6g4xlarge: return "r6g.4xlarge"
            case .r6g8xlarge: return "r6g.8xlarge"
            case .r6gLarge: return "r6g.large"
            case .r6gMedium: return "r6g.medium"
            case .r6gXlarge: return "r6g.xlarge"
            case .r7g12xlarge: return "r7g.12xlarge"
            case .r7g16xlarge: return "r7g.16xlarge"
            case .r7g2xlarge: return "r7g.2xlarge"
            case .r7g4xlarge: return "r7g.4xlarge"
            case .r7g8xlarge: return "r7g.8xlarge"
            case .r7gLarge: return "r7g.large"
            case .r7gMedium: return "r7g.medium"
            case .r7gXlarge: return "r7g.xlarge"
            case .t2Large: return "t2.large"
            case .t2Medium: return "t2.medium"
            case .t2Micro: return "t2.micro"
            case .t2Small: return "t2.small"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. An Amazon GameLift compute resource for hosting your game servers. Computes in an Amazon GameLift fleet differs depending on the fleet's compute type property as follows:
    ///
    /// * For EC2 fleets, a compute is an EC2 instance.
    ///
    /// * For ANYWHERE fleets, a compute is a computing resource that you provide and is registered to the fleet.
    ///
    /// * For CONTAINER fleets, a compute is a container that's registered to the fleet.
    public struct Compute: Swift.Sendable {
        /// The ARN that is assigned to a compute resource and uniquely identifies it. ARNs are unique across locations. Instances in managed EC2 fleets are not assigned a Compute ARN.
        public var computeArn: Swift.String?
        /// A descriptive label for the compute resource. For instances in a managed EC2 fleet, the compute name is the same value as the InstanceId ID.
        public var computeName: Swift.String?
        /// Current status of the compute. A compute must have an ACTIVE status to host game sessions.
        public var computeStatus: GameLiftClientTypes.ComputeStatus?
        /// Some attributes of a container.
        public var containerAttributes: GameLiftClientTypes.ContainerAttributes?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// The DNS name of a compute resource. Amazon GameLift requires a DNS name or IP address for a compute.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name (ARN) of the fleet that the compute belongs to.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the compute belongs to.
        public var fleetId: Swift.String?
        /// The endpoint of the Amazon GameLift Agent.
        public var gameLiftAgentEndpoint: Swift.String?
        /// The Amazon GameLift SDK endpoint connection for a registered compute resource in an Anywhere fleet. The game servers on the compute use this endpoint to connect to the Amazon GameLift service.
        public var gameLiftServiceSdkEndpoint: Swift.String?
        /// The InstanceID of the Instance hosting the compute for Container and Managed EC2 fleets.
        public var instanceId: Swift.String?
        /// The IP address of a compute resource. Amazon GameLift requires a DNS name or IP address for a compute.
        public var ipAddress: Swift.String?
        /// The name of the custom location you added to the fleet that this compute resource resides in.
        public var location: Swift.String?
        /// The type of operating system on the compute resource. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// The Amazon EC2 instance type that the fleet uses. For registered computes in an Amazon GameLift Anywhere fleet, this property is empty.
        public var type: GameLiftClientTypes.EC2InstanceType?

        public init(
            computeArn: Swift.String? = nil,
            computeName: Swift.String? = nil,
            computeStatus: GameLiftClientTypes.ComputeStatus? = nil,
            containerAttributes: GameLiftClientTypes.ContainerAttributes? = nil,
            creationTime: Foundation.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameLiftAgentEndpoint: Swift.String? = nil,
            gameLiftServiceSdkEndpoint: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            type: GameLiftClientTypes.EC2InstanceType? = nil
        )
        {
            self.computeArn = computeArn
            self.computeName = computeName
            self.computeStatus = computeStatus
            self.containerAttributes = containerAttributes
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameLiftAgentEndpoint = gameLiftAgentEndpoint
            self.gameLiftServiceSdkEndpoint = gameLiftServiceSdkEndpoint
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.location = location
            self.operatingSystem = operatingSystem
            self.type = type
        }
    }
}

extension GameLiftClientTypes.Compute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Compute(computeArn: \(Swift.String(describing: computeArn)), computeName: \(Swift.String(describing: computeName)), computeStatus: \(Swift.String(describing: computeStatus)), containerAttributes: \(Swift.String(describing: containerAttributes)), creationTime: \(Swift.String(describing: creationTime)), dnsName: \(Swift.String(describing: dnsName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), gameLiftAgentEndpoint: \(Swift.String(describing: gameLiftAgentEndpoint)), gameLiftServiceSdkEndpoint: \(Swift.String(describing: gameLiftServiceSdkEndpoint)), instanceId: \(Swift.String(describing: instanceId)), location: \(Swift.String(describing: location)), operatingSystem: \(Swift.String(describing: operatingSystem)), type: \(Swift.String(describing: type)), ipAddress: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum ComputeType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case anywhere
        case container
        case ec2
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .anywhere,
                .container,
                .ec2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .anywhere: return "ANYWHERE"
            case .container: return "CONTAINER"
            case .ec2: return "EC2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This operation has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet. Part of: [ContainerGroupsConfiguration], [ContainerGroupsAttributes]
    public struct ConnectionPortRange: Swift.Sendable {
        /// Starting value for the port range.
        /// This member is required.
        public var fromPort: Swift.Int?
        /// Ending value for the port. Port numbers are end-inclusive. This value must be equal to or greater than FromPort.
        /// This member is required.
        public var toPort: Swift.Int?

        public init(
            fromPort: Swift.Int? = nil,
            toPort: Swift.Int? = nil
        )
        {
            self.fromPort = fromPort
            self.toPort = toPort
        }
    }
}

extension GameLiftClientTypes.ConnectionPortRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectionPortRange(fromPort: \"CONTENT_REDACTED\", toPort: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum ContainerDependencyCondition: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case healthy
        case start
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerDependencyCondition] {
            return [
                .complete,
                .healthy,
                .start,
                .success
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .healthy: return "HEALTHY"
            case .start: return "START"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. A container's dependency on another container in the same container group. The dependency impacts how the dependent container is able to start or shut down based the status of the other container. For example, ContainerA is configured with the following dependency: a START dependency on ContainerB. This means that ContainerA can't start until ContainerB has started. It also means that ContainerA must shut down before ContainerB. Part of: [ContainerDefinition]
    public struct ContainerDependency: Swift.Sendable {
        /// The condition that the dependency container must reach before the dependent container can start. Valid conditions include:
        ///
        /// * START - The dependency container must have started.
        ///
        /// * COMPLETE - The dependency container has run to completion (exits). Use this condition with nonessential containers, such as those that run a script and then exit. The dependency container can't be an essential container.
        ///
        /// * SUCCESS - The dependency container has run to completion and exited with a zero status. The dependency container can't be an essential container.
        ///
        /// * HEALTHY - The dependency container has passed its Docker health check. Use this condition with dependency containers that have health checks configured. This condition is confirmed at container group startup only.
        /// This member is required.
        public var condition: GameLiftClientTypes.ContainerDependencyCondition?
        /// A descriptive label for the container definition that this container depends on.
        /// This member is required.
        public var containerName: Swift.String?

        public init(
            condition: GameLiftClientTypes.ContainerDependencyCondition? = nil,
            containerName: Swift.String? = nil
        )
        {
            self.condition = condition
            self.containerName = containerName
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. An environment variable to set inside a container, in the form of a key-value pair. Related data type: [ContainerDefinition$Environment]
    public struct ContainerEnvironment: Swift.Sendable {
        /// The environment variable name.
        /// This member is required.
        public var name: Swift.String?
        /// The environment variable value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension GameLiftClientTypes {

    /// Instructions on when and how to check the health of a container in a container fleet. When health check properties are set in a container definition, they override any Docker health checks in the container image. For more information on container health checks, see [HealthCheck command](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html#ECS-Type-HealthCheck-command) in the Amazon Elastic Container Service API. The following example instructions tell the container to wait 100 seconds after launch before counting failed health checks, then initiate the health check command every 60 seconds. After issuing the health check command, wait 10 seconds for it to succeed. If it fails, retry the command 3 times before considering the container to be unhealthy. {"Command": [ "CMD-SHELL", "ps cax | grep "processmanager" || exit 1" ], "Interval": 300, "Timeout": 30, "Retries": 5, "StartPeriod": 100 } Part of: [ContainerDefinition$HealthCheck]
    public struct ContainerHealthCheck: Swift.Sendable {
        /// A string array that specifies the command that the container runs to determine if it's healthy.
        /// This member is required.
        public var command: [Swift.String]?
        /// The time period (in seconds) between each health check.
        public var interval: Swift.Int?
        /// The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.
        public var retries: Swift.Int?
        /// The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.
        public var startPeriod: Swift.Int?
        /// The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.
        public var timeout: Swift.Int?

        public init(
            command: [Swift.String]? = nil,
            interval: Swift.Int? = nil,
            retries: Swift.Int? = nil,
            startPeriod: Swift.Int? = nil,
            timeout: Swift.Int? = nil
        )
        {
            self.command = command
            self.interval = interval
            self.retries = retries
            self.startPeriod = startPeriod
            self.timeout = timeout
        }
    }
}

extension GameLiftClientTypes {

    /// Specifies how much memory is available to a container. You can't change this value after you create this object. Part of: [ContainerDefinition$MemoryLimits]
    public struct ContainerMemoryLimits: Swift.Sendable {
        /// The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter [memory](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory) in the Amazon Elastic Container Service Developer Guide.
        public var hardLimit: Swift.Int?
        /// The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter [memoryreservation](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation) (Amazon Elastic Container Service Developer Guide).
        public var softLimit: Swift.Int?

        public init(
            hardLimit: Swift.Int? = nil,
            softLimit: Swift.Int? = nil
        )
        {
            self.hardLimit = hardLimit
            self.softLimit = softLimit
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. A set of one or more port numbers that can be opened on the container. Part of: [ContainerPortConfiguration]
    public struct ContainerPortRange: Swift.Sendable {
        /// A starting value for the range of allowed port numbers.
        /// This member is required.
        public var fromPort: Swift.Int?
        /// The network protocol that these ports support.
        /// This member is required.
        public var `protocol`: GameLiftClientTypes.IpProtocol?
        /// An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than FromPort.
        /// This member is required.
        public var toPort: Swift.Int?

        public init(
            fromPort: Swift.Int? = nil,
            `protocol`: GameLiftClientTypes.IpProtocol? = nil,
            toPort: Swift.Int? = nil
        )
        {
            self.fromPort = fromPort
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }
}

extension GameLiftClientTypes.ContainerPortRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerPortRange(protocol: \(Swift.String(describing: `protocol`)), fromPort: \"CONTENT_REDACTED\", toPort: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    /// Defines ranges of ports that server processes can connect to. Part of: [ContainerDefinition$PortConfiguration]
    public struct ContainerPortConfiguration: Swift.Sendable {
        /// Specifies one or more ranges of ports on a container. These ranges must not overlap.
        /// This member is required.
        public var containerPortRanges: [GameLiftClientTypes.ContainerPortRange]?

        public init(
            containerPortRanges: [GameLiftClientTypes.ContainerPortRange]? = nil
        )
        {
            self.containerPortRanges = containerPortRanges
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Describes a container in a container fleet, the resources available to the container, and the commands that are run when the container starts. Container properties can't be updated. To change a property, create a new container group definition. See also [ContainerDefinitionInput]. Part of: [ContainerGroupDefinition] Returned by: [DescribeContainerGroupDefinition], [ListContainerGroupDefinitions]
    public struct ContainerDefinition: Swift.Sendable {
        /// A command that's passed to the container on startup. Each argument for the command is an additional string in the array. See the [ContainerDefinition::command](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-command) parameter in the Amazon Elastic Container Service API reference.
        public var command: [Swift.String]?
        /// The container definition identifier. Container names are unique within a container group definition.
        /// This member is required.
        public var containerName: Swift.String?
        /// The number of CPU units that are reserved for the container. Note: 1 vCPU unit equals 1024 CPU units. If no resources are reserved, the container shares the total CPU limit for the container group. Related data type: [ContainerGroupDefinition$TotalCpuLimit]
        public var cpu: Swift.Int?
        /// Indicates that the container relies on the status of other containers in the same container group during its startup and shutdown sequences. A container might have dependencies on multiple containers.
        public var dependsOn: [GameLiftClientTypes.ContainerDependency]?
        /// The entry point that's passed to the container on startup. If there are multiple arguments, each argument is an additional string in the array. See the [ContainerDefinition::entryPoint](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-entryPoint) parameter in the Amazon Elastic Container Service API Reference.
        public var entryPoint: [Swift.String]?
        /// A set of environment variables that's passed to the container on startup. See the [ContainerDefinition::environment](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-environment) parameter in the Amazon Elastic Container Service API Reference.
        public var environment: [GameLiftClientTypes.ContainerEnvironment]?
        /// Indicates whether the container is vital to the container group. If an essential container fails, the entire container group is restarted.
        public var essential: Swift.Bool?
        /// A configuration for a non-terminal health check. A container, which automatically restarts if it stops functioning, also restarts if it fails this health check. If an essential container in the daemon group fails a health check, the entire container group is restarted. The essential container in the replica group doesn't use this health check mechanism, because the Amazon GameLift Agent automatically handles the task.
        public var healthCheck: GameLiftClientTypes.ContainerHealthCheck?
        /// The URI to the image that $short; copied and deployed to a container fleet. For a more specific identifier, see ResolvedImageDigest.
        /// This member is required.
        public var imageUri: Swift.String?
        /// The amount of memory that Amazon GameLift makes available to the container. If memory limits aren't set for an individual container, the container shares the container group's total memory allocation. Related data type: [ContainerGroupDefinition$TotalMemoryLimit]
        public var memoryLimits: GameLiftClientTypes.ContainerMemoryLimits?
        /// Defines the ports that are available to assign to processes in the container. For example, a game server process requires a container port to allow game clients to connect to it. Container ports aren't directly accessed by inbound traffic. Amazon GameLift maps these container ports to externally accessible connection ports, which are assigned as needed from the container fleet's ConnectionPortRange.
        public var portConfiguration: GameLiftClientTypes.ContainerPortConfiguration?
        /// A unique and immutable identifier for the container image that is deployed to a container fleet. The digest is a SHA 256 hash of the container image manifest.
        public var resolvedImageDigest: Swift.String?
        /// The directory in the container where commands are run. See the [ContainerDefinition::workingDirectory](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-workingDirectory) parameter in the Amazon Elastic Container Service API Reference.
        public var workingDirectory: Swift.String?

        public init(
            command: [Swift.String]? = nil,
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            dependsOn: [GameLiftClientTypes.ContainerDependency]? = nil,
            entryPoint: [Swift.String]? = nil,
            environment: [GameLiftClientTypes.ContainerEnvironment]? = nil,
            essential: Swift.Bool? = nil,
            healthCheck: GameLiftClientTypes.ContainerHealthCheck? = nil,
            imageUri: Swift.String? = nil,
            memoryLimits: GameLiftClientTypes.ContainerMemoryLimits? = nil,
            portConfiguration: GameLiftClientTypes.ContainerPortConfiguration? = nil,
            resolvedImageDigest: Swift.String? = nil,
            workingDirectory: Swift.String? = nil
        )
        {
            self.command = command
            self.containerName = containerName
            self.cpu = cpu
            self.dependsOn = dependsOn
            self.entryPoint = entryPoint
            self.environment = environment
            self.essential = essential
            self.healthCheck = healthCheck
            self.imageUri = imageUri
            self.memoryLimits = memoryLimits
            self.portConfiguration = portConfiguration
            self.resolvedImageDigest = resolvedImageDigest
            self.workingDirectory = workingDirectory
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Describes a container's configuration, resources, and start instructions. Use this data type to create a container group definition. For the properties of a container that's been deployed to a fleet, see [ContainerDefinition]. You can't change these properties after you've created the container group definition. If you need a container group with different properties, then you must create a new one. Used with: [CreateContainerGroupDefinition]
    public struct ContainerDefinitionInput: Swift.Sendable {
        /// A command to pass to the container on startup. Add multiple arguments as additional strings in the array. See the [ContainerDefinition command](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-command) parameter in the Amazon Elastic Container Service API reference.
        public var command: [Swift.String]?
        /// A string that uniquely identifies the container definition within a container group.
        /// This member is required.
        public var containerName: Swift.String?
        /// The number of CPU units to reserve for this container. The container can use more resources when needed, if available. Note: 1 vCPU unit equals 1024 CPU units. If you don't reserve CPU units for this container, then it shares the total CPU limit for the container group. This property is similar to the Amazon ECS container definition parameter [environment](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_environment) (Amazon Elastic Container Service Developer Guide). Related data type: [ContainerGroupDefinition$TotalCpuLimit]
        public var cpu: Swift.Int?
        /// Sets up dependencies between this container and the status of other containers in the same container group. A container can have dependencies on multiple different containers. You can use dependencies to establish a startup/shutdown sequence across the container group. A container startup dependency is reversed on shutdown. For example, you might specify that SideCarContainerB has a START dependency on SideCarContainerA. This dependency means that SideCarContainerB can't start until after SideCarContainerA has started. This dependency is reversed on shutdown, which means that SideCarContainerB must shut down before SideCarContainerA can shut down.
        public var dependsOn: [GameLiftClientTypes.ContainerDependency]?
        /// An entry point to pass to the container on startup. Add multiple arguments as additional strings in the array. See the [ContainerDefinition::entryPoint](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-entryPoint) parameter in the Amazon Elastic Container Service API Reference.
        public var entryPoint: [Swift.String]?
        /// A set of environment variables to pass to the container on startup. See the [ContainerDefinition::environment](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-environment) parameter in the Amazon Elastic Container Service API Reference.
        public var environment: [GameLiftClientTypes.ContainerEnvironment]?
        /// Specifies whether the container is vital for the container group to function properly. If an essential container fails, it causes the entire container group to restart. Each container group must have an essential container. Replica container groups - A replica group must have exactly one essential container. Use the following to configure an essential replica container:
        ///
        /// * Choose a container is running your game server and the Amazon GameLift Agent.
        ///
        /// * Include a port configuration. This container runs your game server processes, and each process requires a container port to allow access to game clients.
        ///
        /// * Don't configure a health check. The Agent handles this task for the essential replica container.
        ///
        ///
        /// Daemon container groups - A daemon group must have at least one essential container.
        public var essential: Swift.Bool?
        /// Configuration for a non-terminal health check. A container automatically restarts if it stops functioning. This parameter lets you define additional reasons to consider a container unhealthy and restart it. You can set a health check for any container except for the essential container in the replica container group. If an essential container in the daemon group fails a health check, the entire container group is restarted.
        public var healthCheck: GameLiftClientTypes.ContainerHealthCheck?
        /// The location of a container image that $short; will copy and deploy to a container fleet. Images in Amazon Elastic Container Registry private repositories are supported. The repository must be in the same Amazon Web Services account and Amazon Web Services Region where you're creating the container group definition. For limits on image size, see [Amazon GameLift endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/gamelift.html). You can use any of the following image URI formats:
        ///
        /// * Image ID only: [AWS account].dkr.ecr.[AWS region].amazonaws.com/[repository ID]
        ///
        /// * Image ID and digest: [AWS account].dkr.ecr.[AWS region].amazonaws.com/[repository ID]@[digest]
        ///
        /// * Image ID and tag: [AWS account].dkr.ecr.[AWS region].amazonaws.com/[repository ID]:[tag]
        /// This member is required.
        public var imageUri: Swift.String?
        /// The amount of memory to make available to the container. If you don't specify memory limits for this container, then it shares the container group's total memory allocation. Related data type: [ContainerGroupDefinition$TotalMemoryLimit]
        public var memoryLimits: GameLiftClientTypes.ContainerMemoryLimits?
        /// A set of ports that Amazon GameLift can assign to processes in the container. All processes that accept inbound traffic connections, including game server processes, must be assigned a port from this set. The set of ports must be large enough to assign one to each process in the container that needs one. If the container includes your game server, include enough ports to assign one port to each concurrent server process (as defined in a container fleet's [RuntimeConfiguration]). For more details, see [Networking for container fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-network). Container ports aren't directly accessed by inbound traffic. Amazon GameLift maps these container ports to externally accessible connection ports, which are assigned as needed from the container fleet's ConnectionPortRange.
        public var portConfiguration: GameLiftClientTypes.ContainerPortConfiguration?
        /// The directory in the container where commands are run. See the [ContainerDefinition::workingDirectory parameter](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html#ECS-Type-ContainerDefinition-workingDirectory) in the Amazon Elastic Container Service API Reference.
        public var workingDirectory: Swift.String?

        public init(
            command: [Swift.String]? = nil,
            containerName: Swift.String? = nil,
            cpu: Swift.Int? = nil,
            dependsOn: [GameLiftClientTypes.ContainerDependency]? = nil,
            entryPoint: [Swift.String]? = nil,
            environment: [GameLiftClientTypes.ContainerEnvironment]? = nil,
            essential: Swift.Bool? = nil,
            healthCheck: GameLiftClientTypes.ContainerHealthCheck? = nil,
            imageUri: Swift.String? = nil,
            memoryLimits: GameLiftClientTypes.ContainerMemoryLimits? = nil,
            portConfiguration: GameLiftClientTypes.ContainerPortConfiguration? = nil,
            workingDirectory: Swift.String? = nil
        )
        {
            self.command = command
            self.containerName = containerName
            self.cpu = cpu
            self.dependsOn = dependsOn
            self.entryPoint = entryPoint
            self.environment = environment
            self.essential = essential
            self.healthCheck = healthCheck
            self.imageUri = imageUri
            self.memoryLimits = memoryLimits
            self.portConfiguration = portConfiguration
            self.workingDirectory = workingDirectory
        }
    }
}

extension GameLiftClientTypes {

    public enum ContainerOperatingSystem: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonLinux2023
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerOperatingSystem] {
            return [
                .amazonLinux2023
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonLinux2023: return "AMAZON_LINUX_2023"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum ContainerSchedulingStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daemon
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerSchedulingStrategy] {
            return [
                .daemon,
                .replica
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daemon: return "DAEMON"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum ContainerGroupDefinitionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copying
        case failed
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerGroupDefinitionStatus] {
            return [
                .copying,
                .failed,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copying: return "COPYING"
            case .failed: return "FAILED"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. The properties that describe a container group resource. Container group definition properties can't be updated. To change a property, create a new container group definition. Used with: [CreateContainerGroupDefinition] Returned by: [DescribeContainerGroupDefinition], [ListContainerGroupDefinitions]
    public struct ContainerGroupDefinition: Swift.Sendable {
        /// The set of container definitions that are included in the container group.
        public var containerDefinitions: [GameLiftClientTypes.ContainerDefinition]?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to an Amazon GameLift ContainerGroupDefinition resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is arn:aws:gamelift:::containergroupdefinition/[container group definition name].
        public var containerGroupDefinitionArn: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.
        public var name: Swift.String?
        /// The platform required for all containers in the container group definition. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
        public var operatingSystem: GameLiftClientTypes.ContainerOperatingSystem?
        /// The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.
        public var schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy?
        /// Current status of the container group definition resource. Values include:
        ///
        /// * COPYING -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.
        ///
        /// * READY -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.
        ///
        /// * FAILED -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see StatusReason. A container group definition resource in failed status will be deleted within a few minutes.
        public var status: GameLiftClientTypes.ContainerGroupDefinitionStatus?
        /// Additional information about a container group definition that's in FAILED status. Possible reasons include:
        ///
        /// * An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call [CreateContainerGroupDefinition]again.
        ///
        /// * An access-denied message means that you don't have permissions to access the container image on ECR. See [ IAM permission examples](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html) for help setting up required IAM permissions for Amazon GameLift.
        ///
        /// * The ImageUri value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.
        ///
        /// * At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see [ Amazon GameLift endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/gamelift.html).
        ///
        /// * At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.
        public var statusReason: Swift.String?
        /// The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units). You can set additional limits for each [ContainerDefinition] in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group. For more details on memory allocation, see the [Container fleet design guide](https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet).
        public var totalCpuLimit: Swift.Int?
        /// The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources. You can set additional limits for each [ContainerDefinition] in the group. If individual containers have limits, this value must meet the following requirements:
        ///
        /// * Equal to or greater than the sum of all container-specific soft memory limits in the group.
        ///
        /// * Equal to or greater than any container-specific hard limits in the group.
        ///
        ///
        /// For more details on memory allocation, see the [Container fleet design guide](https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet).
        public var totalMemoryLimit: Swift.Int?

        public init(
            containerDefinitions: [GameLiftClientTypes.ContainerDefinition]? = nil,
            containerGroupDefinitionArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.ContainerOperatingSystem? = nil,
            schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy? = nil,
            status: GameLiftClientTypes.ContainerGroupDefinitionStatus? = nil,
            statusReason: Swift.String? = nil,
            totalCpuLimit: Swift.Int? = nil,
            totalMemoryLimit: Swift.Int? = nil
        )
        {
            self.containerDefinitions = containerDefinitions
            self.containerGroupDefinitionArn = containerGroupDefinitionArn
            self.creationTime = creationTime
            self.name = name
            self.operatingSystem = operatingSystem
            self.schedulingStrategy = schedulingStrategy
            self.status = status
            self.statusReason = statusReason
            self.totalCpuLimit = totalCpuLimit
            self.totalMemoryLimit = totalMemoryLimit
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. The properties of a container group that is deployed to a container fleet. Part of: [ContainerGroupsAttributes] Returned by: [DescribeFleetAttributes]
    public struct ContainerGroupDefinitionProperty: Swift.Sendable {
        /// The unique identifier for the container group definition.
        public var containerGroupDefinitionName: Swift.String?
        /// The method for scheduling and maintaining copies of the container group across a container fleet.
        public var schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy?

        public init(
            containerGroupDefinitionName: Swift.String? = nil,
            schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy? = nil
        )
        {
            self.containerGroupDefinitionName = containerGroupDefinitionName
            self.schedulingStrategy = schedulingStrategy
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Determines how many replica container groups that Amazon GameLift deploys to each instance in a container fleet. Amazon GameLift calculates the maximum possible replica groups per instance based on the instance 's CPU and memory resources. When deploying a fleet, Amazon GameLift places replica container groups on each fleet instance based on the following:
    ///
    /// * If no desired value is set, Amazon GameLift places the calculated maximum.
    ///
    /// * If a desired number is set to a value higher than the calculated maximum, fleet creation fails..
    ///
    /// * If a desired number is set to a value lower than the calculated maximum, Amazon GameLift places the desired number.
    ///
    ///
    /// Part of: [ContainerGroupsConfiguration], [ContainerGroupsAttributes] Returned by: [DescribeFleetAttributes], [CreateFleet]
    public struct ContainerGroupsPerInstance: Swift.Sendable {
        /// The desired number of replica container groups to place on each fleet instance.
        public var desiredReplicaContainerGroupsPerInstance: Swift.Int?
        /// The maximum possible number of replica container groups that each fleet instance can have.
        public var maxReplicaContainerGroupsPerInstance: Swift.Int?

        public init(
            desiredReplicaContainerGroupsPerInstance: Swift.Int? = nil,
            maxReplicaContainerGroupsPerInstance: Swift.Int? = nil
        )
        {
            self.desiredReplicaContainerGroupsPerInstance = desiredReplicaContainerGroupsPerInstance
            self.maxReplicaContainerGroupsPerInstance = maxReplicaContainerGroupsPerInstance
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. The properties of container groups that are running on a container fleet. Container group properties for a fleet can't be changed. Returned by: [DescribeFleetAttributes], [CreateFleet]
    public struct ContainerGroupsAttributes: Swift.Sendable {
        /// A set of ports that allow inbound traffic to connect to processes running in the fleet's container groups. Amazon GameLift maps each connection port to a container port, which is assigned to a specific container process. A fleet's connection port range can't be changed, but you can control access to connection ports by updating a fleet's EC2InboundPermissions with [UpdateFleetPortSettings].
        public var connectionPortRange: GameLiftClientTypes.ConnectionPortRange?
        /// A collection of properties that describe each container group in the fleet. A container fleet is deployed with one or more [ContainerGroupDefinition] resources, which is where these properties are set.
        public var containerGroupDefinitionProperties: [GameLiftClientTypes.ContainerGroupDefinitionProperty]?
        /// Details about the number of replica container groups that Amazon GameLift deploys to each instance in the container fleet.
        public var containerGroupsPerInstance: GameLiftClientTypes.ContainerGroupsPerInstance?

        public init(
            connectionPortRange: GameLiftClientTypes.ConnectionPortRange? = nil,
            containerGroupDefinitionProperties: [GameLiftClientTypes.ContainerGroupDefinitionProperty]? = nil,
            containerGroupsPerInstance: GameLiftClientTypes.ContainerGroupsPerInstance? = nil
        )
        {
            self.connectionPortRange = connectionPortRange
            self.containerGroupDefinitionProperties = containerGroupDefinitionProperties
            self.containerGroupsPerInstance = containerGroupsPerInstance
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. Configuration details for a set of container groups, for use when creating a fleet with compute type CONTAINER. Used with: [CreateFleet]
    public struct ContainerGroupsConfiguration: Swift.Sendable {
        /// A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet. Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula: [Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group] As a best practice, double the minimum number of connection ports. Use the fleet's EC2InboundPermissions property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See [IpPermission] for more details.
        /// This member is required.
        public var connectionPortRange: GameLiftClientTypes.ConnectionPortRange?
        /// The list of container group definition names to deploy to a new container fleet.
        /// This member is required.
        public var containerGroupDefinitionNames: [Swift.String]?
        /// The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.
        public var desiredReplicaContainerGroupsPerInstance: Swift.Int?

        public init(
            connectionPortRange: GameLiftClientTypes.ConnectionPortRange? = nil,
            containerGroupDefinitionNames: [Swift.String]? = nil,
            desiredReplicaContainerGroupsPerInstance: Swift.Int? = nil
        )
        {
            self.connectionPortRange = connectionPortRange
            self.containerGroupDefinitionNames = containerGroupDefinitionNames
            self.desiredReplicaContainerGroupsPerInstance = desiredReplicaContainerGroupsPerInstance
        }
    }
}

/// The requested operation would cause the resource to exceed the allowed service limit. Resolve the issue before retrying.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested tagging operation did not succeed. This may be due to invalid tag format or the maximum tag limit may have been exceeded. Resolve the issue before retrying.
public struct TaggingFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TaggingFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension GameLiftClientTypes {

    /// A label that you can assign to a Amazon GameLift resource. Learn more [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference [ Amazon Web Services Tagging Strategies](http://aws.amazon.com/answers/account-management/aws-tagging-strategies/) Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Tag: Swift.Sendable {
        /// The key for a developer-defined key value pair for tagging an Amazon Web Services resource.
        /// This member is required.
        public var key: Swift.String?
        /// The value for a developer-defined key value pair for tagging an Amazon Web Services resource.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateAliasInput: Swift.Sendable {
    /// A human-readable description of the alias.
    public var description: Swift.String?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?
    /// The routing configuration, including routing type and fleet target, for the alias.
    /// This member is required.
    public var routingStrategy: GameLiftClientTypes.RoutingStrategy?
    /// A list of labels to assign to the new alias resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
        self.tags = tags
    }
}

public struct CreateAliasOutput: Swift.Sendable {
    /// The newly created alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init(
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

extension GameLiftClientTypes {

    /// The location in Amazon S3 where build or script files are stored for access by Amazon GameLift.
    public struct S3Location: Swift.Sendable {
        /// An Amazon S3 bucket identifier. Thename of the S3 bucket. Amazon GameLift doesn't support uploading from Amazon S3 buckets with names that contain a dot (.).
        public var bucket: Swift.String?
        /// The name of the zip file that contains the build files or script files.
        public var key: Swift.String?
        /// The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from an S3 bucket that you own. Use this parameter to specify a specific version of the file. If not set, the latest version of the file is retrieved.
        public var objectVersion: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access the S3 bucket.
        public var roleArn: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            objectVersion: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.objectVersion = objectVersion
            self.roleArn = roleArn
        }
    }
}

public struct CreateBuildInput: Swift.Sendable {
    /// A descriptive label associated with a build. Build names don't need to be unique. You can change this value later.
    public var name: Swift.String?
    /// The operating system that your game server binaries run on. This value determines the type of fleet resources that you use for this build. If your game build contains multiple executables, they all must run on the same operating system. You must specify a valid operating system in this request. There is no default value. You can't change a build's operating system later. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
    public var operatingSystem: GameLiftClientTypes.OperatingSystem?
    /// A server SDK version you used when integrating your game server build with Amazon GameLift. For more information see [Integrate games with custom game servers](https://docs.aws.amazon.com/gamelift/latest/developerguide/integration-custom-intro.html). By default Amazon GameLift sets this value to 4.0.2.
    public var serverSdkVersion: Swift.String?
    /// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region. If a StorageLocation is specified, the size of your file can be found in your Amazon S3 bucket. Amazon GameLift will report a SizeOnDisk of 0.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// A list of labels to assign to the new build resource. Tags are developer defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html) to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?
    /// Version information associated with a build or script. Version strings don't need to be unique. You can change this value later.
    public var version: Swift.String?

    public init(
        name: Swift.String? = nil,
        operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
        serverSdkVersion: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.operatingSystem = operatingSystem
        self.serverSdkVersion = serverSdkVersion
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
    }
}

public struct CreateBuildOutput: Swift.Sendable {
    /// The newly created build resource, including a unique build IDs and status.
    public var build: GameLiftClientTypes.Build?
    /// Amazon S3 location for your game build file, including bucket name and key.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call [RequestUploadCredentials](https://docs.aws.amazon.com/gamelift/latest/apireference/API_RequestUploadCredentials.html).
    public var uploadCredentials: GameLiftClientTypes.AwsCredentials?

    public init(
        build: GameLiftClientTypes.Build? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        uploadCredentials: GameLiftClientTypes.AwsCredentials? = nil
    )
    {
        self.build = build
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

extension CreateBuildOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBuildOutput(build: \(Swift.String(describing: build)), storageLocation: \(Swift.String(describing: storageLocation)), uploadCredentials: \"CONTENT_REDACTED\")"}
}

public struct CreateContainerGroupDefinitionInput: Swift.Sendable {
    /// Definitions for all containers in this group. Each container definition identifies the container image and specifies configuration settings for the container. See the [ Container fleet design guide](https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet.html) for container guidelines.
    /// This member is required.
    public var containerDefinitions: [GameLiftClientTypes.ContainerDefinitionInput]?
    /// A descriptive identifier for the container group definition. The name value must be unique in an Amazon Web Services Region.
    /// This member is required.
    public var name: Swift.String?
    /// The platform that is used by containers in the container group definition. All containers in a group must run on the same operating system. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
    /// This member is required.
    public var operatingSystem: GameLiftClientTypes.ContainerOperatingSystem?
    /// The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group has one copy per fleet instance. Default value is REPLICA.
    public var schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy?
    /// A list of labels to assign to the container group definition resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?
    /// The maximum amount of CPU units to allocate to the container group. Set this parameter to an integer value in CPU units (1 vCPU is equal to 1024 CPU units). All containers in the group share this memory. If you specify CPU limits for individual containers, set this parameter based on the following guidelines. The value must be equal to or greater than the sum of the CPU limits for all containers in the group.
    /// This member is required.
    public var totalCpuLimit: Swift.Int?
    /// The maximum amount of memory (in MiB) to allocate to the container group. All containers in the group share this memory. If you specify memory limits for individual containers, set this parameter based on the following guidelines. The value must be (1) greater than the sum of the soft memory limits for all containers in the group, and (2) greater than any individual container's hard memory limit.
    /// This member is required.
    public var totalMemoryLimit: Swift.Int?

    public init(
        containerDefinitions: [GameLiftClientTypes.ContainerDefinitionInput]? = nil,
        name: Swift.String? = nil,
        operatingSystem: GameLiftClientTypes.ContainerOperatingSystem? = nil,
        schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        totalCpuLimit: Swift.Int? = nil,
        totalMemoryLimit: Swift.Int? = nil
    )
    {
        self.containerDefinitions = containerDefinitions
        self.name = name
        self.operatingSystem = operatingSystem
        self.schedulingStrategy = schedulingStrategy
        self.tags = tags
        self.totalCpuLimit = totalCpuLimit
        self.totalMemoryLimit = totalMemoryLimit
    }
}

public struct CreateContainerGroupDefinitionOutput: Swift.Sendable {
    /// The properties of the newly created container group definition resource. You use this resource to create a container fleet.
    public var containerGroupDefinition: GameLiftClientTypes.ContainerGroupDefinition?

    public init(
        containerGroupDefinition: GameLiftClientTypes.ContainerGroupDefinition? = nil
    )
    {
        self.containerGroupDefinition = containerGroupDefinition
    }
}

/// The operation failed because Amazon GameLift has not yet finished validating this compute. We recommend attempting 8 to 10 retries over 3 to 5 minutes with [exponential backoffs and jitter](http://aws.amazon.com/blogs/https:/aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/).
public struct NotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotReadyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension GameLiftClientTypes {

    /// A range of IP addresses and port settings that allow inbound traffic to connect to processes on an instance in a fleet. Processes are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. For container fleets, the port settings must use the same port numbers as the fleet's connection ports. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP messaging and one for UDP.
    public struct IpPermission: Swift.Sendable {
        /// A starting value for a range of allowed port numbers. For fleets using Linux builds, only ports 22 and 1026-60000 are valid. For fleets using Windows builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var fromPort: Swift.Int?
        /// A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        /// This member is required.
        public var ipRange: Swift.String?
        /// The network communication protocol used by the fleet.
        /// This member is required.
        public var `protocol`: GameLiftClientTypes.IpProtocol?
        /// An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than FromPort. For fleets using Linux builds, only ports 22 and 1026-60000 are valid. For fleets using Windows builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var toPort: Swift.Int?

        public init(
            fromPort: Swift.Int? = nil,
            ipRange: Swift.String? = nil,
            `protocol`: GameLiftClientTypes.IpProtocol? = nil,
            toPort: Swift.Int? = nil
        )
        {
            self.fromPort = fromPort
            self.ipRange = ipRange
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }
}

extension GameLiftClientTypes.IpPermission: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpPermission(protocol: \(Swift.String(describing: `protocol`)), fromPort: \"CONTENT_REDACTED\", ipRange: \"CONTENT_REDACTED\", toPort: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum FleetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ondemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetType] {
            return [
                .ondemand,
                .spot
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ondemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum InstanceRoleCredentialsProvider: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sharedCredentialFile
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRoleCredentialsProvider] {
            return [
                .sharedCredentialFile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sharedCredentialFile: return "SHARED_CREDENTIAL_FILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. A remote location where a multi-location fleet can deploy game servers for game hosting.
    public struct LocationConfiguration: Swift.Sendable {
        /// An Amazon Web Services Region code, such as us-west-2. For a list of supported Regions and Local Zones, see [ Amazon GameLift service locations](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html) for managed hosting.
        /// This member is required.
        public var location: Swift.String?

        public init(
            location: Swift.String? = nil
        )
        {
            self.location = location
        }
    }
}

extension GameLiftClientTypes {

    public enum ProtectionPolicy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullprotection
        case noprotection
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectionPolicy] {
            return [
                .fullprotection,
                .noprotection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullprotection: return "FullProtection"
            case .noprotection: return "NoProtection"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
    public struct ResourceCreationLimitPolicy: Swift.Sendable {
        /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
        public var newGameSessionsPerCreator: Swift.Int?
        /// The time span used in evaluating the resource creation limit policy.
        public var policyPeriodInMinutes: Swift.Int?

        public init(
            newGameSessionsPerCreator: Swift.Int? = nil,
            policyPeriodInMinutes: Swift.Int? = nil
        )
        {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }
    }
}

extension GameLiftClientTypes {

    /// A set of instructions for launching server processes on fleet computes. Server processes run either an executable in a custom game build or a Realtime Servers script. Server process configurations are part of a fleet's runtime configuration.
    public struct ServerProcess: Swift.Sendable {
        /// The number of server processes using this configuration that run concurrently on each instance or container..
        /// This member is required.
        public var concurrentExecutions: Swift.Int?
        /// The location of a game build executable or Realtime script. Game builds and Realtime scripts are installed on instances at the root:
        ///
        /// * Windows (custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"
        ///
        /// * Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
        ///
        ///
        /// Amazon GameLift doesn't support the use of setup scripts that launch the game executable. For custom game builds, this parameter must indicate the executable that calls the server SDK operations initSDK() and ProcessReady().
        /// This member is required.
        public var launchPath: Swift.String?
        /// An optional list of parameters to pass to the server executable or Realtime script on launch.
        public var parameters: Swift.String?

        public init(
            concurrentExecutions: Swift.Int? = nil,
            launchPath: Swift.String? = nil,
            parameters: Swift.String? = nil
        )
        {
            self.concurrentExecutions = concurrentExecutions
            self.launchPath = launchPath
            self.parameters = parameters
        }
    }
}

extension GameLiftClientTypes {

    /// This data type has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. A set of instructions that define the set of server processes to run on computes in a fleet. Server processes run either an executable in a custom game build or a Realtime Servers script. Amazon GameLift launches the processes, manages their life cycle, and replaces them as needed. Computes check regularly for an updated runtime configuration. On a container fleet, the Amazon GameLift Agent uses the runtime configuration to manage the lifecycle of server processes in a replica container group. An Amazon GameLift instance is limited to 50 processes running concurrently. To calculate the total number of processes defined in a runtime configuration, add the values of the ConcurrentExecutions parameter for each server process. Learn more about [ Running Multiple Processes on a Fleet](https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-multiprocess.html).
    public struct RuntimeConfiguration: Swift.Sendable {
        /// The maximum amount of time (in seconds) allowed to launch a new game session and have it report ready to host players. During this time, the game session is in status ACTIVATING. If the game session does not become active before the timeout, it is ended and the game session status is changed to TERMINATED.
        public var gameSessionActivationTimeoutSeconds: Swift.Int?
        /// The number of game sessions in status ACTIVATING to allow on an instance or container. This setting limits the instance resources that can be used for new game activations at any one time.
        public var maxConcurrentGameSessionActivations: Swift.Int?
        /// A collection of server process configurations that identify what server processes to run on fleet computes.
        public var serverProcesses: [GameLiftClientTypes.ServerProcess]?

        public init(
            gameSessionActivationTimeoutSeconds: Swift.Int? = nil,
            maxConcurrentGameSessionActivations: Swift.Int? = nil,
            serverProcesses: [GameLiftClientTypes.ServerProcess]? = nil
        )
        {
            self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
            self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
            self.serverProcesses = serverProcesses
        }
    }
}

public struct CreateFleetInput: Swift.Sendable {
    /// Amazon GameLift Anywhere configuration options.
    public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
    /// The unique identifier for a custom game server build to be deployed to a fleet with compute type EC2. You can use either the build ID or ARN. The build must be uploaded to Amazon GameLift and in READY status. This fleet property can't be changed after the fleet is created.
    public var buildId: Swift.String?
    /// Prompts Amazon GameLift to generate a TLS/SSL certificate for the fleet. Amazon GameLift uses the certificates to encrypt traffic between game clients and the game servers running on Amazon GameLift. By default, the CertificateConfiguration is DISABLED. You can't change this property after you create the fleet. Certificate Manager (ACM) certificates expire after 13 months. Certificate expiration can cause fleets to fail, preventing players from connecting to instances in the fleet. We recommend you replace fleets before 13 months, consider using fleet aliases for a smooth transition. ACM isn't available in all Amazon Web Services regions. A fleet creation request with certificate generation enabled in an unsupported Region, fails with a 4xx error. For more information about the supported Regions, see [Supported Regions](https://docs.aws.amazon.com/acm/latest/userguide/acm-regions.html) in the Certificate Manager User Guide.
    public var certificateConfiguration: GameLiftClientTypes.CertificateConfiguration?
    /// The type of compute resource used to host your game servers.
    ///
    /// * EC2 – The game server build is deployed to Amazon EC2 instances for cloud hosting. This is the default setting.
    ///
    /// * CONTAINER – Container images with your game server build and supporting software are deployed to Amazon EC2 instances for cloud hosting. With this compute type, you must specify the ContainerGroupsConfiguration parameter.
    ///
    /// * ANYWHERE – Game servers or container images with your game server and supporting software are deployed to compute resources that are provided and managed by you. With this compute type, you can also set the AnywhereConfiguration parameter.
    public var computeType: GameLiftClientTypes.ComputeType?
    /// The container groups to deploy to instances in the container fleet and other fleet-level configuration settings. Use the [CreateContainerGroupDefinition] action to create container groups. A container fleet must have exactly one replica container group, and can optionally have one daemon container group. You can't change this property after you create the fleet.
    public var containerGroupsConfiguration: GameLiftClientTypes.ContainerGroupsConfiguration?
    /// A description for the fleet.
    public var description: Swift.String?
    /// The IP address ranges and port settings that allow inbound traffic to access game server processes and other processes on this fleet. Set this parameter for EC2 and container fleets. You can leave this parameter empty when creating the fleet, but you must call [UpdateFleetPortSettings] to set it before players can connect to game sessions. As a best practice, we recommend opening ports for remote access only when you need them and closing them when you're finished. For Realtime Servers fleets, Amazon GameLift automatically sets TCP and UDP ranges. To manage inbound access for a container fleet, set this parameter to the same port numbers that you set for the fleet's connection port range. During the life of the fleet, update this parameter to control which connection ports are open to inbound traffic.
    public var ec2InboundPermissions: [GameLiftClientTypes.IpPermission]?
    /// The Amazon GameLift-supported Amazon EC2 instance type to use with EC2 and container fleets. Instance type determines the computing resources that will be used to host your game servers, including CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions of Amazon EC2 instance types.
    public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    /// Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to ON_DEMAND. Learn more about when to use [ On-Demand versus Spot Instances](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot). This fleet property can't be changed after the fleet is created.
    public var fleetType: GameLiftClientTypes.FleetType?
    /// A unique identifier for an IAM role with access permissions to other Amazon Web Services services. Any application that runs on an instance in the fleet--including install scripts, server processes, and other processes--can use these permissions to interact with Amazon Web Services resources that you own or have access to. For more information about using the role with your game server builds, see [ Communicate with other Amazon Web Services resources from your fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html). This fleet property can't be changed after the fleet is created.
    public var instanceRoleArn: Swift.String?
    /// Prompts Amazon GameLift to generate a shared credentials file for the IAM role that's defined in InstanceRoleArn. The shared credentials file is stored on each fleet instance and refreshed as needed. Use shared credentials for applications that are deployed along with the game server executable, if the game server is integrated with server SDK version 5.x. For more information about using shared credentials, see [ Communicate with other Amazon Web Services resources from your fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html).
    public var instanceRoleCredentialsProvider: GameLiftClientTypes.InstanceRoleCredentialsProvider?
    /// A set of remote locations to deploy additional instances to and manage as a multi-location fleet. Use this parameter when creating a fleet in Amazon Web Services Regions that support multiple locations. You can add any Amazon Web Services Region or Local Zone that's supported by Amazon GameLift. Provide a list of one or more Amazon Web Services Region codes, such as us-west-2, or Local Zone names. When using this parameter, Amazon GameLift requires you to include your home location in the request. For a list of supported Regions and Local Zones, see [ Amazon GameLift service locations](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-regions.html) for managed hosting.
    public var locations: [GameLiftClientTypes.LocationConfiguration]?
    /// This parameter is no longer used. To specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API ProcessReady() and specify one or more directory paths in logParameters. For more information, see [Initialize the server process](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-initialize) in the Amazon GameLift Developer Guide.
    public var logPaths: [Swift.String]?
    /// The name of an Amazon Web Services CloudWatch metric group to add this fleet to. A metric group is used to aggregate the metrics for multiple fleets. You can specify an existing metric group name or set a new name to create a new metric group. A fleet can be included in only one metric group at a time.
    public var metricGroups: [Swift.String]?
    /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?
    /// The status of termination protection for active game sessions on the fleet. By default, this property is set to NoProtection. You can also set game session protection for an individual game session by calling [UpdateGameSession].
    ///
    /// * NoProtection - Game sessions can be terminated during active gameplay as a result of a scale-down event.
    ///
    /// * FullProtection - Game sessions in ACTIVE status cannot be terminated during a scale-down event.
    public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    /// Used when peering your Amazon GameLift fleet with a VPC, the unique identifier for the Amazon Web Services account that owns the VPC. You can find your account ID in the Amazon Web Services Management Console under account settings.
    public var peerVpcAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    public var peerVpcId: Swift.String?
    /// A policy that limits the number of game sessions that an individual player can create on instances in this fleet within a specified span of time.
    public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
    /// Instructions for how to launch and run server processes on the fleet. Set runtime configuration for EC2 fleets and container fleets. For an Anywhere fleets, set this parameter only if the fleet is running the Amazon GameLift Agent. The runtime configuration defines one or more server process configurations. Each server process identifies a game executable or Realtime script file and the number of processes to run concurrently. This parameter replaces the parameters ServerLaunchPath and ServerLaunchParameters, which are still supported for backward compatibility.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
    /// The unique identifier for a Realtime configuration script to be deployed to a fleet with compute type EC2. You can use either the script ID or ARN. Scripts must be uploaded to Amazon GameLift prior to creating the fleet. This fleet property can't be changed after the fleet is created.
    public var scriptId: Swift.String?
    /// This parameter is no longer used. Specify server launch parameters using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
    public var serverLaunchParameters: Swift.String?
    /// This parameter is no longer used. Specify a server launch path using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
    public var serverLaunchPath: Swift.String?
    /// A list of labels to assign to the new fleet resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
        buildId: Swift.String? = nil,
        certificateConfiguration: GameLiftClientTypes.CertificateConfiguration? = nil,
        computeType: GameLiftClientTypes.ComputeType? = nil,
        containerGroupsConfiguration: GameLiftClientTypes.ContainerGroupsConfiguration? = nil,
        description: Swift.String? = nil,
        ec2InboundPermissions: [GameLiftClientTypes.IpPermission]? = nil,
        ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
        fleetType: GameLiftClientTypes.FleetType? = nil,
        instanceRoleArn: Swift.String? = nil,
        instanceRoleCredentialsProvider: GameLiftClientTypes.InstanceRoleCredentialsProvider? = nil,
        locations: [GameLiftClientTypes.LocationConfiguration]? = nil,
        logPaths: [Swift.String]? = nil,
        metricGroups: [Swift.String]? = nil,
        name: Swift.String? = nil,
        newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
        peerVpcAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil,
        resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil,
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil,
        scriptId: Swift.String? = nil,
        serverLaunchParameters: Swift.String? = nil,
        serverLaunchPath: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.anywhereConfiguration = anywhereConfiguration
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.computeType = computeType
        self.containerGroupsConfiguration = containerGroupsConfiguration
        self.description = description
        self.ec2InboundPermissions = ec2InboundPermissions
        self.ec2InstanceType = ec2InstanceType
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.instanceRoleCredentialsProvider = instanceRoleCredentialsProvider
        self.locations = locations
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.runtimeConfiguration = runtimeConfiguration
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.tags = tags
    }
}

extension GameLiftClientTypes {

    public enum FleetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case building
        case deleting
        case downloading
        case error
        case new
        case notFound
        case terminated
        case validating
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetStatus] {
            return [
                .activating,
                .active,
                .building,
                .deleting,
                .downloading,
                .error,
                .new,
                .notFound,
                .terminated,
                .validating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .building: return "BUILDING"
            case .deleting: return "DELETING"
            case .downloading: return "DOWNLOADING"
            case .error: return "ERROR"
            case .new: return "NEW"
            case .notFound: return "NOT_FOUND"
            case .terminated: return "TERMINATED"
            case .validating: return "VALIDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum FleetAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoscaling
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetAction] {
            return [
                .autoscaling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "AUTO_SCALING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This operation has been expanded to use with the Amazon GameLift containers feature, which is currently in public preview. Describes an Amazon GameLift fleet of game hosting resources. Attributes differ based on the fleet's compute type, as follows:
    ///
    /// * EC2 fleet attributes identify a Build resource (for fleets with customer game server builds) or a Script resource (for Realtime Servers fleets).
    ///
    /// * Container fleets have ContainerGroupsAttributes, which identify the fleet's ContainerGroupDefinition resources.
    ///
    /// * Amazon GameLift Anywhere fleets have an abbreviated set of attributes, because most fleet configurations are set directly on the fleet's computes. Attributes include fleet identifiers and descriptive properties, creation/termination time, and fleet status.
    ///
    ///
    /// Returned by: [DescribeFleetAttributes]
    public struct FleetAttributes: Swift.Sendable {
        /// This property is used with the Amazon GameLift containers feature, which is currently in public preview. A set of attributes that describe the container groups that are deployed on the fleet. These attributes are included for fleets with compute type CONTAINER only. This attribute is used with fleets where ComputeType is "Container".
        public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the Amazon GameLift build resource that is deployed on instances in this fleet. In a GameLift build ARN, the resource ID matches the BuildId value. This attribute is used with fleets where ComputeType is "EC2".
        public var buildArn: Swift.String?
        /// A unique identifier for the build resource that is deployed on instances in this fleet. This attribute is used with fleets where ComputeType is "EC2".
        public var buildId: Swift.String?
        /// Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate.
        public var certificateConfiguration: GameLiftClientTypes.CertificateConfiguration?
        /// The type of compute resource used to host your game servers. You can use your own compute resources with Amazon GameLift Anywhere or use Amazon EC2 instances with managed Amazon GameLift.
        public var computeType: GameLiftClientTypes.ComputeType?
        /// A set of properties that describe the container groups that are deployed to the fleet. These attributes are included for fleets with compute type CONTAINER.
        public var containerGroupsAttributes: GameLiftClientTypes.ContainerGroupsAttributes?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A human-readable description of the fleet.
        public var description: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift fleet ARN, the resource ID matches the FleetId value.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet.
        public var fleetId: Swift.String?
        /// Indicates whether the fleet uses On-Demand or Spot instances. For more information, see [ On-Demand versus Spot Instances](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot). This fleet property can't be changed after the fleet is created.
        public var fleetType: GameLiftClientTypes.FleetType?
        /// A unique identifier for an IAM role with access permissions to other Amazon Web Services services. Any application that runs on an instance in the fleet--including install scripts, server processes, and other processes--can use these permissions to interact with Amazon Web Services resources that you own or have access to. For more information about using the role with your game server builds, see [ Communicate with other Amazon Web Services resources from your fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html). This attribute is used with fleets where ComputeType is "EC2" or "Container".
        public var instanceRoleArn: Swift.String?
        /// Indicates that fleet instances maintain a shared credentials file for the IAM role defined in InstanceRoleArn. Shared credentials allow applications that are deployed with the game server executable to communicate with other Amazon Web Services resources. This property is used only when the game server is integrated with the server SDK version 5.x. For more information about using shared credentials, see [ Communicate with other Amazon Web Services resources from your fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html). This attribute is used with fleets where ComputeType is "EC2" or "Container".
        public var instanceRoleCredentialsProvider: GameLiftClientTypes.InstanceRoleCredentialsProvider?
        /// The Amazon EC2 instance type that the fleet uses. Instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions. This attribute is used with fleets where ComputeType is "EC2" or "Container".
        public var instanceType: GameLiftClientTypes.EC2InstanceType?
        /// This parameter is no longer used. Game session log paths are now defined using the Amazon GameLift server API ProcessReady()logParameters. See more information in the [Server API Reference](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process).
        public var logPaths: [Swift.String]?
        /// Name of a metric group that metrics for this fleet are added to. In Amazon CloudWatch, you can view aggregated metrics for fleets that are in a metric group. A fleet can be included in only one metric group at a time. This attribute is used with fleets where ComputeType is "EC2" or "Container".
        public var metricGroups: [Swift.String]?
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public var name: Swift.String?
        /// The type of game session protection to set on all new instances that are started in the fleet. This attribute is used with fleets where ComputeType is "EC2" or "Container".
        ///
        /// * NoProtection -- The game session can be terminated during a scale-down event.
        ///
        /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
        /// The operating system of the fleet's computing resources. A fleet's operating system is determined by the OS of the build or script that is deployed on this fleet. This attribute is used with fleets where ComputeType is "EC2" or "Container". Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
        public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift script resource that is deployed on instances in this fleet. In a GameLift script ARN, the resource ID matches the ScriptId value.
        public var scriptArn: Swift.String?
        /// A unique identifier for the Realtime script resource that is deployed on instances in this fleet. This attribute is used with fleets where ComputeType is "EC2".
        public var scriptId: Swift.String?
        /// This parameter is no longer used. Server launch parameters are now defined using the fleet's runtime configuration. Requests that use this parameter continue to be valid.
        public var serverLaunchParameters: Swift.String?
        /// This parameter is no longer used. Server launch paths are now defined using the fleet's [RuntimeConfiguration](https://docs.aws.amazon.com/gamelift/latest/apireference/RuntimeConfiguration.html). Requests that use this parameter continue to be valid.
        public var serverLaunchPath: Swift.String?
        /// Current status of the fleet. Possible fleet statuses include the following:
        ///
        /// * NEW -- A new fleet resource has been defined and Amazon GameLift has started creating the fleet. Desired instances is set to 1.
        ///
        /// * DOWNLOADING/VALIDATING/BUILDING -- Amazon GameLift is download the game server build, running install scripts, and then validating the build files. When complete, Amazon GameLift launches a fleet instance.
        ///
        /// * ACTIVATING -- Amazon GameLift is launching a game server process and testing its connectivity with the Amazon GameLift service.
        ///
        /// * ACTIVE -- The fleet is now ready to host game sessions.
        ///
        /// * ERROR -- An error occurred when downloading, validating, building, or activating the fleet.
        ///
        /// * DELETING -- Hosts are responding to a delete fleet request.
        ///
        /// * TERMINATED -- The fleet no longer exists.
        public var status: GameLiftClientTypes.FleetStatus?
        /// A list of fleet activity that has been suspended using [StopFleetActions](https://docs.aws.amazon.com/gamelift/latest/apireference/API_StopFleetActions.html). This includes fleet auto-scaling. This attribute is used with fleets where ComputeType is "EC2" or "Container".
        public var stoppedActions: [GameLiftClientTypes.FleetAction]?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: Foundation.Date?

        public init(
            anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
            buildArn: Swift.String? = nil,
            buildId: Swift.String? = nil,
            certificateConfiguration: GameLiftClientTypes.CertificateConfiguration? = nil,
            computeType: GameLiftClientTypes.ComputeType? = nil,
            containerGroupsAttributes: GameLiftClientTypes.ContainerGroupsAttributes? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            fleetType: GameLiftClientTypes.FleetType? = nil,
            instanceRoleArn: Swift.String? = nil,
            instanceRoleCredentialsProvider: GameLiftClientTypes.InstanceRoleCredentialsProvider? = nil,
            instanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            logPaths: [Swift.String]? = nil,
            metricGroups: [Swift.String]? = nil,
            name: Swift.String? = nil,
            newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil,
            scriptArn: Swift.String? = nil,
            scriptId: Swift.String? = nil,
            serverLaunchParameters: Swift.String? = nil,
            serverLaunchPath: Swift.String? = nil,
            status: GameLiftClientTypes.FleetStatus? = nil,
            stoppedActions: [GameLiftClientTypes.FleetAction]? = nil,
            terminationTime: Foundation.Date? = nil
        )
        {
            self.anywhereConfiguration = anywhereConfiguration
            self.buildArn = buildArn
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.computeType = computeType
            self.containerGroupsAttributes = containerGroupsAttributes
            self.creationTime = creationTime
            self.description = description
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.instanceRoleCredentialsProvider = instanceRoleCredentialsProvider
            self.instanceType = instanceType
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.operatingSystem = operatingSystem
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
            self.status = status
            self.stoppedActions = stoppedActions
            self.terminationTime = terminationTime
        }
    }
}

extension GameLiftClientTypes {

    /// A fleet location and its life-cycle state. A location state object might be used to describe a fleet's remote location or home Region. Life-cycle state tracks the progress of launching the first instance in a new location and preparing it for game hosting, and then removing all instances and deleting the location from the fleet.
    ///
    /// * NEW -- A new fleet location has been defined and desired instances is set to 1.
    ///
    /// * DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- Amazon GameLift is setting up the new fleet location, creating new instances with the game build or Realtime script and starting server processes.
    ///
    /// * ACTIVE -- Hosts can now accept game sessions.
    ///
    /// * ERROR -- An error occurred when downloading, validating, building, or activating the fleet location.
    ///
    /// * DELETING -- Hosts are responding to a delete fleet location request.
    ///
    /// * TERMINATED -- The fleet location no longer exists.
    ///
    /// * NOT_FOUND -- The fleet location was not found. This could be because the custom location was removed or not created.
    public struct LocationState: Swift.Sendable {
        /// The fleet location, expressed as an Amazon Web Services Region code such as us-west-2.
        public var location: Swift.String?
        /// The life-cycle status of a fleet location.
        public var status: GameLiftClientTypes.FleetStatus?

        public init(
            location: Swift.String? = nil,
            status: GameLiftClientTypes.FleetStatus? = nil
        )
        {
            self.location = location
            self.status = status
        }
    }
}

public struct CreateFleetOutput: Swift.Sendable {
    /// The properties for the new fleet, including the current status. All fleets are placed in NEW status on creation.
    public var fleetAttributes: GameLiftClientTypes.FleetAttributes?
    /// The fleet's locations and life-cycle status of each location. For new fleets, the status of all locations is set to NEW. During fleet creation, Amazon GameLift updates each location status as instances are deployed there and prepared for game hosting. This list includes an entry for the fleet's home Region. For fleets with no remote locations, only one entry, representing the home Region, is returned.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init(
        fleetAttributes: GameLiftClientTypes.FleetAttributes? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.locationStates = locationStates
    }
}

/// The requested operation would cause a conflict with the current state of a resource associated with the request and/or the fleet. Resolve the conflict before retrying.
public struct InvalidFleetStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFleetStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateFleetLocationsInput: Swift.Sendable {
    /// A unique identifier for the fleet to add locations to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A list of locations to deploy additional instances to and manage as part of the fleet. You can add any Amazon GameLift-supported Amazon Web Services Region as a remote location, in the form of an Amazon Web Services Region code such as us-west-2.
    /// This member is required.
    public var locations: [GameLiftClientTypes.LocationConfiguration]?

    public init(
        fleetId: Swift.String? = nil,
        locations: [GameLiftClientTypes.LocationConfiguration]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

public struct CreateFleetLocationsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated with new locations.
    public var fleetId: Swift.String?
    /// The remote locations that are being added to the fleet, and the life-cycle status of each location. For new locations, the status is set to NEW. During location creation, Amazon GameLift updates each location's status as instances are deployed there and prepared for game hosting. This list does not include the fleet home Region or any remote locations that were already added to the fleet.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Settings for a target-based scaling policy as part of a [GameServerGroupAutoScalingPolicy](https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerGroupAutoScalingPolicy.html) . These settings are used to create a target-based policy that tracks the Amazon GameLift FleetIQ metric "PercentUtilizedGameServers" and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
    public struct TargetTrackingConfiguration: Swift.Sendable {
        /// Desired value to use with a game server group target-based scaling policy.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            targetValue: Swift.Double? = nil
        )
        {
            self.targetValue = targetValue
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Configuration settings for intelligent automatic scaling that uses target tracking. These settings are used to add an Auto Scaling policy when creating the corresponding Auto Scaling group. After the Auto Scaling group is created, all updates to Auto Scaling policies, including changing this policy and adding or removing other policies, is done directly on the Auto Scaling group.
    public struct GameServerGroupAutoScalingPolicy: Swift.Sendable {
        /// Length of time, in seconds, it takes for a new instance to start new game server processes and register with Amazon GameLift FleetIQ. Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up, because it avoids prematurely starting new instances.
        public var estimatedInstanceWarmup: Swift.Int?
        /// Settings for a target-based scaling policy applied to Auto Scaling group. These settings are used to create a target-based policy that tracks the Amazon GameLift FleetIQ metric "PercentUtilizedGameServers" and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
        /// This member is required.
        public var targetTrackingConfiguration: GameLiftClientTypes.TargetTrackingConfiguration?

        public init(
            estimatedInstanceWarmup: Swift.Int? = nil,
            targetTrackingConfiguration: GameLiftClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }
}

extension GameLiftClientTypes {

    public enum GameServerProtectionPolicy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullProtection
        case noProtection
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerProtectionPolicy] {
            return [
                .fullProtection,
                .noProtection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullProtection: return "FULL_PROTECTION"
            case .noProtection: return "NO_PROTECTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum GameServerGroupInstanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case c42xlarge
        case c44xlarge
        case c48xlarge
        case c4Large
        case c4Xlarge
        case c512xlarge
        case c518xlarge
        case c524xlarge
        case c52xlarge
        case c54xlarge
        case c59xlarge
        case c5Large
        case c5Xlarge
        case c5a12xlarge
        case c5a16xlarge
        case c5a24xlarge
        case c5a2xlarge
        case c5a4xlarge
        case c5a8xlarge
        case c5aLarge
        case c5aXlarge
        case c6g12xlarge
        case c6g16xlarge
        case c6g2xlarge
        case c6g4xlarge
        case c6g8xlarge
        case c6gLarge
        case c6gMedium
        case c6gXlarge
        case m410xlarge
        case m42xlarge
        case m44xlarge
        case m4Large
        case m4Xlarge
        case m512xlarge
        case m516xlarge
        case m524xlarge
        case m52xlarge
        case m54xlarge
        case m58xlarge
        case m5Large
        case m5Xlarge
        case m5a12xlarge
        case m5a16xlarge
        case m5a24xlarge
        case m5a2xlarge
        case m5a4xlarge
        case m5a8xlarge
        case m5aLarge
        case m5aXlarge
        case m6g12xlarge
        case m6g16xlarge
        case m6g2xlarge
        case m6g4xlarge
        case m6g8xlarge
        case m6gLarge
        case m6gMedium
        case m6gXlarge
        case r416xlarge
        case r42xlarge
        case r44xlarge
        case r48xlarge
        case r4Large
        case r4Xlarge
        case r512xlarge
        case r516xlarge
        case r524xlarge
        case r52xlarge
        case r54xlarge
        case r58xlarge
        case r5Large
        case r5Xlarge
        case r5a12xlarge
        case r5a16xlarge
        case r5a24xlarge
        case r5a2xlarge
        case r5a4xlarge
        case r5a8xlarge
        case r5aLarge
        case r5aXlarge
        case r6g12xlarge
        case r6g16xlarge
        case r6g2xlarge
        case r6g4xlarge
        case r6g8xlarge
        case r6gLarge
        case r6gMedium
        case r6gXlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupInstanceType] {
            return [
                .c42xlarge,
                .c44xlarge,
                .c48xlarge,
                .c4Large,
                .c4Xlarge,
                .c512xlarge,
                .c518xlarge,
                .c524xlarge,
                .c52xlarge,
                .c54xlarge,
                .c59xlarge,
                .c5Large,
                .c5Xlarge,
                .c5a12xlarge,
                .c5a16xlarge,
                .c5a24xlarge,
                .c5a2xlarge,
                .c5a4xlarge,
                .c5a8xlarge,
                .c5aLarge,
                .c5aXlarge,
                .c6g12xlarge,
                .c6g16xlarge,
                .c6g2xlarge,
                .c6g4xlarge,
                .c6g8xlarge,
                .c6gLarge,
                .c6gMedium,
                .c6gXlarge,
                .m410xlarge,
                .m42xlarge,
                .m44xlarge,
                .m4Large,
                .m4Xlarge,
                .m512xlarge,
                .m516xlarge,
                .m524xlarge,
                .m52xlarge,
                .m54xlarge,
                .m58xlarge,
                .m5Large,
                .m5Xlarge,
                .m5a12xlarge,
                .m5a16xlarge,
                .m5a24xlarge,
                .m5a2xlarge,
                .m5a4xlarge,
                .m5a8xlarge,
                .m5aLarge,
                .m5aXlarge,
                .m6g12xlarge,
                .m6g16xlarge,
                .m6g2xlarge,
                .m6g4xlarge,
                .m6g8xlarge,
                .m6gLarge,
                .m6gMedium,
                .m6gXlarge,
                .r416xlarge,
                .r42xlarge,
                .r44xlarge,
                .r48xlarge,
                .r4Large,
                .r4Xlarge,
                .r512xlarge,
                .r516xlarge,
                .r524xlarge,
                .r52xlarge,
                .r54xlarge,
                .r58xlarge,
                .r5Large,
                .r5Xlarge,
                .r5a12xlarge,
                .r5a16xlarge,
                .r5a24xlarge,
                .r5a2xlarge,
                .r5a4xlarge,
                .r5a8xlarge,
                .r5aLarge,
                .r5aXlarge,
                .r6g12xlarge,
                .r6g16xlarge,
                .r6g2xlarge,
                .r6g4xlarge,
                .r6g8xlarge,
                .r6gLarge,
                .r6gMedium,
                .r6gXlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .c42xlarge: return "c4.2xlarge"
            case .c44xlarge: return "c4.4xlarge"
            case .c48xlarge: return "c4.8xlarge"
            case .c4Large: return "c4.large"
            case .c4Xlarge: return "c4.xlarge"
            case .c512xlarge: return "c5.12xlarge"
            case .c518xlarge: return "c5.18xlarge"
            case .c524xlarge: return "c5.24xlarge"
            case .c52xlarge: return "c5.2xlarge"
            case .c54xlarge: return "c5.4xlarge"
            case .c59xlarge: return "c5.9xlarge"
            case .c5Large: return "c5.large"
            case .c5Xlarge: return "c5.xlarge"
            case .c5a12xlarge: return "c5a.12xlarge"
            case .c5a16xlarge: return "c5a.16xlarge"
            case .c5a24xlarge: return "c5a.24xlarge"
            case .c5a2xlarge: return "c5a.2xlarge"
            case .c5a4xlarge: return "c5a.4xlarge"
            case .c5a8xlarge: return "c5a.8xlarge"
            case .c5aLarge: return "c5a.large"
            case .c5aXlarge: return "c5a.xlarge"
            case .c6g12xlarge: return "c6g.12xlarge"
            case .c6g16xlarge: return "c6g.16xlarge"
            case .c6g2xlarge: return "c6g.2xlarge"
            case .c6g4xlarge: return "c6g.4xlarge"
            case .c6g8xlarge: return "c6g.8xlarge"
            case .c6gLarge: return "c6g.large"
            case .c6gMedium: return "c6g.medium"
            case .c6gXlarge: return "c6g.xlarge"
            case .m410xlarge: return "m4.10xlarge"
            case .m42xlarge: return "m4.2xlarge"
            case .m44xlarge: return "m4.4xlarge"
            case .m4Large: return "m4.large"
            case .m4Xlarge: return "m4.xlarge"
            case .m512xlarge: return "m5.12xlarge"
            case .m516xlarge: return "m5.16xlarge"
            case .m524xlarge: return "m5.24xlarge"
            case .m52xlarge: return "m5.2xlarge"
            case .m54xlarge: return "m5.4xlarge"
            case .m58xlarge: return "m5.8xlarge"
            case .m5Large: return "m5.large"
            case .m5Xlarge: return "m5.xlarge"
            case .m5a12xlarge: return "m5a.12xlarge"
            case .m5a16xlarge: return "m5a.16xlarge"
            case .m5a24xlarge: return "m5a.24xlarge"
            case .m5a2xlarge: return "m5a.2xlarge"
            case .m5a4xlarge: return "m5a.4xlarge"
            case .m5a8xlarge: return "m5a.8xlarge"
            case .m5aLarge: return "m5a.large"
            case .m5aXlarge: return "m5a.xlarge"
            case .m6g12xlarge: return "m6g.12xlarge"
            case .m6g16xlarge: return "m6g.16xlarge"
            case .m6g2xlarge: return "m6g.2xlarge"
            case .m6g4xlarge: return "m6g.4xlarge"
            case .m6g8xlarge: return "m6g.8xlarge"
            case .m6gLarge: return "m6g.large"
            case .m6gMedium: return "m6g.medium"
            case .m6gXlarge: return "m6g.xlarge"
            case .r416xlarge: return "r4.16xlarge"
            case .r42xlarge: return "r4.2xlarge"
            case .r44xlarge: return "r4.4xlarge"
            case .r48xlarge: return "r4.8xlarge"
            case .r4Large: return "r4.large"
            case .r4Xlarge: return "r4.xlarge"
            case .r512xlarge: return "r5.12xlarge"
            case .r516xlarge: return "r5.16xlarge"
            case .r524xlarge: return "r5.24xlarge"
            case .r52xlarge: return "r5.2xlarge"
            case .r54xlarge: return "r5.4xlarge"
            case .r58xlarge: return "r5.8xlarge"
            case .r5Large: return "r5.large"
            case .r5Xlarge: return "r5.xlarge"
            case .r5a12xlarge: return "r5a.12xlarge"
            case .r5a16xlarge: return "r5a.16xlarge"
            case .r5a24xlarge: return "r5a.24xlarge"
            case .r5a2xlarge: return "r5a.2xlarge"
            case .r5a4xlarge: return "r5a.4xlarge"
            case .r5a8xlarge: return "r5a.8xlarge"
            case .r5aLarge: return "r5a.large"
            case .r5aXlarge: return "r5a.xlarge"
            case .r6g12xlarge: return "r6g.12xlarge"
            case .r6g16xlarge: return "r6g.16xlarge"
            case .r6g2xlarge: return "r6g.2xlarge"
            case .r6g4xlarge: return "r6g.4xlarge"
            case .r6g8xlarge: return "r6g.8xlarge"
            case .r6gLarge: return "r6g.large"
            case .r6gMedium: return "r6g.medium"
            case .r6gXlarge: return "r6g.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. An allowed instance type for a game server group. All game server groups must have at least two instance types defined for it. Amazon GameLift FleetIQ periodically evaluates each defined instance type for viability. It then updates the Auto Scaling group with the list of viable instance types.
    public struct InstanceDefinition: Swift.Sendable {
        /// An Amazon EC2 instance type designation.
        /// This member is required.
        public var instanceType: GameLiftClientTypes.GameServerGroupInstanceType?
        /// Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group. Instance weights are used by Amazon GameLift FleetIQ to calculate the instance type's cost per unit hour and better identify the most cost-effective options. For detailed information on weighting instance capacity, see [Instance Weighting](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon Elastic Compute Cloud Auto Scaling User Guide. Default value is "1".
        public var weightedCapacity: Swift.String?

        public init(
            instanceType: GameLiftClientTypes.GameServerGroupInstanceType? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. An Amazon Elastic Compute Cloud launch template that contains configuration settings and game server code to be deployed to all instances in a game server group. The launch template is specified when creating a new game server group.
    public struct LaunchTemplateSpecification: Swift.Sendable {
        /// A unique identifier for an existing Amazon EC2 launch template.
        public var launchTemplateId: Swift.String?
        /// A readable identifier for an existing Amazon EC2 launch template.
        public var launchTemplateName: Swift.String?
        /// The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.
        public var version: Swift.String?

        public init(
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }
}

public struct CreateGameServerGroupInput: Swift.Sendable {
    /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. The scaling policy uses the metric "PercentUtilizedGameServers" to maintain a buffer of idle game servers that can immediately accommodate new games and players. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    public var autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy?
    /// Indicates how Amazon GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
    ///
    /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
    ///
    /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
    ///
    /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
    public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    /// An identifier for the new game server group. This value is used to generate unique ARN identifiers for the Amazon EC2 Auto Scaling group and the Amazon GameLift FleetIQ game server group. The name must be unique per Region per Amazon Web Services account.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to NO_PROTECTION by default.
    public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    /// The Amazon EC2 instance types and sizes to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by Amazon GameLift FleetIQ. For more information on instance types, see [EC2 Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon Elastic Compute Cloud User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see [ Instance Weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide.
    /// This member is required.
    public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    /// The Amazon EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. You can specify the template using either the template name or ID. For help with creating a launch template, see [Creating a Launch Template for an Auto Scaling Group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the Amazon Elastic Compute Cloud Auto Scaling User Guide. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs. If you specify network interfaces in your launch template, you must explicitly set the property AssociatePublicIpAddress to "true". If no network interface is specified in the launch template, Amazon GameLift FleetIQ uses your account's default VPC.
    /// This member is required.
    public var launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification?
    /// The maximum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, Amazon GameLift FleetIQ and EC2 do not scale up the group above this maximum. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    /// This member is required.
    public var maxSize: Swift.Int?
    /// The minimum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, Amazon GameLift FleetIQ and Amazon EC2 do not scale down the group below this minimum. In production, this value should be set to at least 1. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    /// This member is required.
    public var minSize: Swift.Int?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of labels to assign to the new game server group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management, and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?
    /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group. By default, all Amazon GameLift FleetIQ-supported Availability Zones are used. You can use this parameter to specify VPCs that you've set up. This property cannot be updated after the game server group is created, and the corresponding Auto Scaling group will always use the property value that is set with this request, even if the Auto Scaling group is updated directly.
    public var vpcSubnets: [Swift.String]?

    public init(
        autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy? = nil,
        balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
        instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
        launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        vpcSubnets: [Swift.String]? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.launchTemplate = launchTemplate
        self.maxSize = maxSize
        self.minSize = minSize
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSubnets = vpcSubnets
    }
}

extension GameLiftClientTypes {

    public enum GameServerGroupStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case deleted
        case deleteScheduled
        case deleting
        case error
        case new
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupStatus] {
            return [
                .activating,
                .active,
                .deleted,
                .deleteScheduled,
                .deleting,
                .error,
                .new
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleteScheduled: return "DELETE_SCHEDULED"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .new: return "NEW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum GameServerGroupAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case replaceInstanceTypes
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupAction] {
            return [
                .replaceInstanceTypes
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .replaceInstanceTypes: return "REPLACE_INSTANCE_TYPES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Properties that describe a game server group resource. A game server group manages certain properties related to a corresponding Amazon EC2 Auto Scaling group. A game server group is created by a successful call to CreateGameServerGroup and deleted by calling DeleteGameServerGroup. Game server group activity can be temporarily suspended and resumed by calling SuspendGameServerGroup and ResumeGameServerGroup, respectively.
    public struct GameServerGroup: Swift.Sendable {
        /// A generated unique ID for the Amazon EC2 Auto Scaling group that is associated with this game server group.
        public var autoScalingGroupArn: Swift.String?
        /// Indicates how Amazon GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
        ///
        /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
        ///
        /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
        ///
        /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
        public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A generated unique ID for the game server group.
        public var gameServerGroupArn: Swift.String?
        /// A developer-defined identifier for the game server group. The name is unique for each Region in each Amazon Web Services account.
        public var gameServerGroupName: Swift.String?
        /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status.
        public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
        /// The set of Amazon EC2 instance types that Amazon GameLift FleetIQ can use when balancing and automatically scaling instances in the corresponding Auto Scaling group.
        public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
        /// A timestamp that indicates when this game server group was last updated.
        public var lastUpdatedTime: Foundation.Date?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
        public var roleArn: Swift.String?
        /// The current status of the game server group. Possible statuses include:
        ///
        /// * NEW - Amazon GameLift FleetIQ has validated the CreateGameServerGroup() request.
        ///
        /// * ACTIVATING - Amazon GameLift FleetIQ is setting up a game server group, which includes creating an Auto Scaling group in your Amazon Web Services account.
        ///
        /// * ACTIVE - The game server group has been successfully created.
        ///
        /// * DELETE_SCHEDULED - A request to delete the game server group has been received.
        ///
        /// * DELETING - Amazon GameLift FleetIQ has received a valid DeleteGameServerGroup() request and is processing it. Amazon GameLift FleetIQ must first complete and release hosts before it deletes the Auto Scaling group and the game server group.
        ///
        /// * DELETED - The game server group has been successfully deleted.
        ///
        /// * ERROR - The asynchronous processes of activating or deleting a game server group has failed, resulting in an error state.
        public var status: GameLiftClientTypes.GameServerGroupStatus?
        /// Additional information about the current game server group status. This information might provide additional insight on groups that are in ERROR status.
        public var statusReason: Swift.String?
        /// A list of activities that are currently suspended for this game server group. If this property is empty, all activities are occurring.
        public var suspendedActions: [GameLiftClientTypes.GameServerGroupAction]?

        public init(
            autoScalingGroupArn: Swift.String? = nil,
            balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
            creationTime: Foundation.Date? = nil,
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
            instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
            lastUpdatedTime: Foundation.Date? = nil,
            roleArn: Swift.String? = nil,
            status: GameLiftClientTypes.GameServerGroupStatus? = nil,
            statusReason: Swift.String? = nil,
            suspendedActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
        )
        {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.balancingStrategy = balancingStrategy
            self.creationTime = creationTime
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerProtectionPolicy = gameServerProtectionPolicy
            self.instanceDefinitions = instanceDefinitions
            self.lastUpdatedTime = lastUpdatedTime
            self.roleArn = roleArn
            self.status = status
            self.statusReason = statusReason
            self.suspendedActions = suspendedActions
        }
    }
}

public struct CreateGameServerGroupOutput: Swift.Sendable {
    /// The newly created game server group object, including the new ARN value for the Amazon GameLift FleetIQ game server group and the object's status. The Amazon EC2 Auto Scaling group ARN is initially null, since the group has not yet been created. This value is added once the game server group status reaches ACTIVE.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

/// The specified fleet has no available instances to fulfill a CreateGameSession request. Clients can retry such requests immediately or after a waiting period.
public struct FleetCapacityExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "FleetCapacityExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A game session with this custom ID string already exists in this fleet. Resolve this conflict before retrying this request.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service is unable to resolve the routing for a particular alias because it has a terminal RoutingStrategy associated with it. The message returned in this exception is the message defined in the routing strategy itself. Such requests should only be retried if the routing strategy for the specified alias is modified.
public struct TerminalRoutingStrategyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TerminalRoutingStrategyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension GameLiftClientTypes {

    /// This key-value pair can store custom data about a game session. For example, you might use a GameProperty to track a game session's map, level of difficulty, or remaining time. The difficulty level could be specified like this: {"Key": "difficulty", "Value":"Novice"}. You can set game properties when creating a game session. You can also modify game properties of an active game session. When searching for game sessions, you can filter on game property keys and values. You can't delete game properties from a game session. For examples of working with game properties, see [Create a game session with properties](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#game-properties).
    public struct GameProperty: Swift.Sendable {
        /// The game property identifier.
        /// This member is required.
        public var key: Swift.String?
        /// The game property value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateGameSessionInput: Swift.Sendable {
    /// A unique identifier for the alias associated with the fleet to create a game session in. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var aliasId: Swift.String?
    /// A unique identifier for a player or entity creating the game session. If you add a resource creation limit policy to a fleet, the CreateGameSession operation requires a CreatorId. Amazon GameLift limits the number of game session creation requests with the same CreatorId in a specified time period. If you your fleet doesn't have a resource creation limit policy and you provide a CreatorId in your CreateGameSession requests, Amazon GameLift limits requests to one request per CreatorId per second. To not limit CreateGameSession requests with the same CreatorId, don't provide a CreatorId in your CreateGameSession request.
    public var creatorId: Swift.String?
    /// A unique identifier for the fleet to create a game session in. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var fleetId: Swift.String?
    /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}. For an example, see [Create a game session with custom properties](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#game-properties-create).
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameSessionData: Swift.String?
    /// This parameter is deprecated. Use IdempotencyToken instead. Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID.
    public var gameSessionId: Swift.String?
    /// Custom string that uniquely identifies the new game session request. This is useful for ensuring that game session requests with the same idempotency token are processed only once. Subsequent requests with the same string return the original GameSession object, with an updated status. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. A game session ARN has the following format: arn:aws:gamelift:::gamesession//. Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.
    public var idempotencyToken: Swift.String?
    /// A fleet's remote location to place the new game session in. If this parameter is not set, the new game session is placed in the fleet's home Region. Specify a remote location with an Amazon Web Services Region code such as us-west-2. When using an Anywhere fleet, this parameter is required and must be set to the Anywhere fleet's custom location.
    public var location: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    /// This member is required.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var name: Swift.String?

    public init(
        aliasId: Swift.String? = nil,
        creatorId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil,
        location: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        name: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.creatorId = creatorId
        self.fleetId = fleetId
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.idempotencyToken = idempotencyToken
        self.location = location
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
    }
}

extension GameLiftClientTypes {

    public enum PlayerSessionCreationPolicy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case acceptAll
        case denyAll
        case sdkUnknown(Swift.String)

        public static var allCases: [PlayerSessionCreationPolicy] {
            return [
                .acceptAll,
                .denyAll
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .acceptAll: return "ACCEPT_ALL"
            case .denyAll: return "DENY_ALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum GameSessionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activating
        case active
        case error
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionStatus] {
            return [
                .activating,
                .active,
                .error,
                .terminated,
                .terminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .error: return "ERROR"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum GameSessionStatusReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case interrupted
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionStatusReason] {
            return [
                .interrupted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .interrupted: return "INTERRUPTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Properties describing a game session. A game session in ACTIVE status can host players. When a game session ends, its status is set to TERMINATED. Amazon GameLift retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days. [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct GameSession: Swift.Sendable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public var creatorId: Swift.String?
        /// Number of players currently in the game session.
        public var currentPlayerSessionCount: Swift.Int?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that this game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the game session is running on.
        public var fleetId: Swift.String?
        /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}.
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. A game session ARN has the following format: arn:aws:gamelift:::gamesession//.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// The fleet location where the game session is running. This value might specify the fleet's home Region or a remote location. Location is expressed as an Amazon Web Services Region code such as us-west-2.
        public var location: Swift.String?
        /// Information about the matchmaking process that resulted in the game session, if matchmaking was used. Data is in JSON syntax, formatted as a string. Information includes the matchmaker ID as well as player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data). Matchmaker data is updated whenever new players are added during a successful backfill (see [StartMatchBackfill](https://docs.aws.amazon.com/gamelift/latest/apireference/API_StartMatchBackfill.html)).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var name: Swift.String?
        /// Indicates whether or not the game session is accepting new players.
        public var playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
        /// The port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public var status: GameLiftClientTypes.GameSessionStatus?
        /// Provides additional information about game session status. INTERRUPTED indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.
        public var statusReason: GameLiftClientTypes.GameSessionStatusReason?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            creatorId: Swift.String? = nil,
            currentPlayerSessionCount: Swift.Int? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.GameSessionStatus? = nil,
            statusReason: GameLiftClientTypes.GameSessionStatusReason? = nil,
            terminationTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.creatorId = creatorId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.location = location
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.port = port
            self.status = status
            self.statusReason = statusReason
            self.terminationTime = terminationTime
        }
    }
}

extension GameLiftClientTypes.GameSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GameSession(creationTime: \(Swift.String(describing: creationTime)), creatorId: \(Swift.String(describing: creatorId)), currentPlayerSessionCount: \(Swift.String(describing: currentPlayerSessionCount)), dnsName: \(Swift.String(describing: dnsName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), gameProperties: \(Swift.String(describing: gameProperties)), gameSessionData: \(Swift.String(describing: gameSessionData)), gameSessionId: \(Swift.String(describing: gameSessionId)), location: \(Swift.String(describing: location)), matchmakerData: \(Swift.String(describing: matchmakerData)), maximumPlayerSessionCount: \(Swift.String(describing: maximumPlayerSessionCount)), name: \(Swift.String(describing: name)), playerSessionCreationPolicy: \(Swift.String(describing: playerSessionCreationPolicy)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), terminationTime: \(Swift.String(describing: terminationTime)), ipAddress: \"CONTENT_REDACTED\", port: \"CONTENT_REDACTED\")"}
}

public struct CreateGameSessionOutput: Swift.Sendable {
    /// Object that describes the newly created game session record.
    public var gameSession: GameLiftClientTypes.GameSession?

    public init(
        gameSession: GameLiftClientTypes.GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

extension GameLiftClientTypes {

    /// A fleet or alias designated in a game session queue. Queues fulfill requests for new game sessions by placing a new game session on any of the queue's destinations.
    public struct GameSessionQueueDestination: Swift.Sendable {
        /// The Amazon Resource Name (ARN) that is assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a Region name, provide a unique identifier across all Regions.
        public var destinationArn: Swift.String?

        public init(
            destinationArn: Swift.String? = nil
        )
        {
            self.destinationArn = destinationArn
        }
    }
}

extension GameLiftClientTypes {

    /// A list of fleet locations where a game session queue can place new game sessions. You can use a filter to temporarily turn off placements for specific locations. For queues that have multi-location fleets, you can use a filter configuration allow placement with some, but not all of these locations.
    public struct FilterConfiguration: Swift.Sendable {
        /// A list of locations to allow game session placement in, in the form of Amazon Web Services Region codes such as us-west-2.
        public var allowedLocations: [Swift.String]?

        public init(
            allowedLocations: [Swift.String]? = nil
        )
        {
            self.allowedLocations = allowedLocations
        }
    }
}

extension GameLiftClientTypes {

    /// Sets a latency cap for individual players when placing a game session. With a latency policy in force, a game session cannot be placed in a fleet location where a player reports latency higher than the cap. Latency policies are used only with placement request that provide player latency information. Player latency policies can be stacked to gradually relax latency requirements over time.
    public struct PlayerLatencyPolicy: Swift.Sendable {
        /// The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
        public var maximumIndividualPlayerLatencyMilliseconds: Swift.Int?
        /// The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
        public var policyDurationSeconds: Swift.Int?

        public init(
            maximumIndividualPlayerLatencyMilliseconds: Swift.Int? = nil,
            policyDurationSeconds: Swift.Int? = nil
        )
        {
            self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
            self.policyDurationSeconds = policyDurationSeconds
        }
    }
}

extension GameLiftClientTypes {

    public enum PriorityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cost
        case destination
        case latency
        case location
        case sdkUnknown(Swift.String)

        public static var allCases: [PriorityType] {
            return [
                .cost,
                .destination,
                .latency,
                .location
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cost: return "COST"
            case .destination: return "DESTINATION"
            case .latency: return "LATENCY"
            case .location: return "LOCATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Custom prioritization settings for use by a game session queue when placing new game sessions with available game servers. When defined, this configuration replaces the default FleetIQ prioritization process, which is as follows:
    ///
    /// * If player latency data is included in a game session request, destinations and locations are prioritized first based on lowest average latency (1), then on lowest hosting cost (2), then on destination list order (3), and finally on location (alphabetical) (4). This approach ensures that the queue's top priority is to place game sessions where average player latency is lowest, and--if latency is the same--where the hosting cost is less, etc.
    ///
    /// * If player latency data is not included, destinations and locations are prioritized first on destination list order (1), and then on location (alphabetical) (2). This approach ensures that the queue's top priority is to place game sessions on the first destination fleet listed. If that fleet has multiple locations, the game session is placed on the first location (when listed alphabetically).
    ///
    ///
    /// Changing the priority order will affect how game sessions are placed.
    public struct PriorityConfiguration: Swift.Sendable {
        /// The prioritization order to use for fleet locations, when the PriorityOrder property includes LOCATION. Locations are identified by Amazon Web Services Region codes such as us-west-2. Each location can only be listed once.
        public var locationOrder: [Swift.String]?
        /// The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.
        ///
        /// * LATENCY -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest.
        ///
        /// * COST -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.
        ///
        /// * DESTINATION -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.
        ///
        /// * LOCATION -- FleetIQ prioritizes based on the provided order of locations, as defined in LocationOrder.
        public var priorityOrder: [GameLiftClientTypes.PriorityType]?

        public init(
            locationOrder: [Swift.String]? = nil,
            priorityOrder: [GameLiftClientTypes.PriorityType]? = nil
        )
        {
            self.locationOrder = locationOrder
            self.priorityOrder = priorityOrder
        }
    }
}

public struct CreateGameSessionQueueInput: Swift.Sendable {
    /// Information to be added to all events that are related to this game session queue.
    public var customEventData: Swift.String?
    /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
    public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location.
    public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
    public var notificationTarget: Swift.String?
    /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
    public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process.
    public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    /// A list of labels to assign to the new game session queue resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?
    /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status. By default, this property is set to 600.
    public var timeoutInSeconds: Swift.Int?

    public init(
        customEventData: Swift.String? = nil,
        destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
        filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
        priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        timeoutInSeconds: Swift.Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.tags = tags
        self.timeoutInSeconds = timeoutInSeconds
    }
}

extension GameLiftClientTypes {

    /// Configuration for a game session placement mechanism that processes requests for new game sessions. A queue can be used on its own or as part of a matchmaking solution.
    public struct GameSessionQueue: Swift.Sendable {
        /// Information that is added to all events that are related to this game session queue.
        public var customEventData: Swift.String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
        public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location.
        public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. In a Amazon GameLift game session queue ARN, the resource ID matches the Name value.
        public var gameSessionQueueArn: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
        public var notificationTarget: Swift.String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
        public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process.
        public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status. By default, this property is set to 600.
        public var timeoutInSeconds: Swift.Int?

        public init(
            customEventData: Swift.String? = nil,
            destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
            filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
            gameSessionQueueArn: Swift.String? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
            priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.timeoutInSeconds = timeoutInSeconds
        }
    }
}

public struct CreateGameSessionQueueOutput: Swift.Sendable {
    /// An object that describes the newly created game session queue.
    public var gameSessionQueue: GameLiftClientTypes.GameSessionQueue?

    public init(
        gameSessionQueue: GameLiftClientTypes.GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

public struct CreateLocationInput: Swift.Sendable {
    /// A descriptive name for the custom location.
    /// This member is required.
    public var locationName: Swift.String?
    /// A list of labels to assign to the new resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management, and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Rareference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        locationName: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.locationName = locationName
        self.tags = tags
    }
}

extension GameLiftClientTypes {

    /// Properties of a custom location for use in an Amazon GameLift Anywhere fleet. This data type is returned in response to a call to [CreateLocation].
    public struct LocationModel: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var locationArn: Swift.String?
        /// The location's name.
        public var locationName: Swift.String?

        public init(
            locationArn: Swift.String? = nil,
            locationName: Swift.String? = nil
        )
        {
            self.locationArn = locationArn
            self.locationName = locationName
        }
    }
}

public struct CreateLocationOutput: Swift.Sendable {
    /// The details of the custom location you created.
    public var location: GameLiftClientTypes.LocationModel?

    public init(
        location: GameLiftClientTypes.LocationModel? = nil
    )
    {
        self.location = location
    }
}

extension GameLiftClientTypes {

    public enum FlexMatchMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standalone
        case withQueue
        case sdkUnknown(Swift.String)

        public static var allCases: [FlexMatchMode] {
            return [
                .standalone,
                .withQueue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standalone: return "STANDALONE"
            case .withQueue: return "WITH_QUEUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateMatchmakingConfigurationInput: Swift.Sendable {
    /// A flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
    /// This member is required.
    public var acceptanceRequired: Swift.Bool?
    /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
    public var acceptanceTimeoutSeconds: Swift.Int?
    /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 10-person team, and the additional player count is set to 2, 10 players will be selected for the match and 2 more player slots will be open for future players. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var additionalPlayerCount: Swift.Int?
    /// The method used to backfill game sessions that are created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have Amazon GameLift create a backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [ Backfill Existing Games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
    public var backfillMode: GameLiftClientTypes.BackfillMode?
    /// Information to be added to all events related to this matchmaking configuration.
    public var customEventData: Swift.String?
    /// A human-readable description of the matchmaking configuration.
    public var description: Swift.String?
    /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
    ///
    /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
    ///
    /// * WITH_QUEUE - FlexMatch forms matches and uses the specified Amazon GameLift queue to start a game session for the match.
    public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}. This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameSessionData: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new Amazon GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
    public var gameSessionQueueArns: [Swift.String]?
    /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive matchmaking notifications. See [ Setting up notifications for matchmaking](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html) for more information.
    public var notificationTarget: Swift.String?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
    /// This member is required.
    public var requestTimeoutSeconds: Swift.Int?
    /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
    /// This member is required.
    public var ruleSetName: Swift.String?
    /// A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        acceptanceRequired: Swift.Bool? = nil,
        acceptanceTimeoutSeconds: Swift.Int? = nil,
        additionalPlayerCount: Swift.Int? = nil,
        backfillMode: GameLiftClientTypes.BackfillMode? = nil,
        customEventData: Swift.String? = nil,
        description: Swift.String? = nil,
        flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionQueueArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        requestTimeoutSeconds: Swift.Int? = nil,
        ruleSetName: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
        self.tags = tags
    }
}

extension GameLiftClientTypes {

    /// Guidelines for use with FlexMatch to match players into games. All matchmaking requests must specify a matchmaking configuration.
    public struct MatchmakingConfiguration: Swift.Sendable {
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. When this option is enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public var acceptanceRequired: Swift.Bool?
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public var acceptanceTimeoutSeconds: Swift.Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 10-person team, and the additional player count is set to 2, 10 players will be selected for the match and 2 more player slots will be open for future players. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var additionalPlayerCount: Swift.Int?
        /// The method used to backfill game sessions created with this matchmaking configuration. MANUAL indicates that the game makes backfill requests or does not use the match backfill feature. AUTOMATIC indicates that GameLift creates backfill requests whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [Backfill existing games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public var backfillMode: GameLiftClientTypes.BackfillMode?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingconfiguration/. In a Amazon GameLift configuration ARN, the resource ID matches the Name value.
        public var configurationArn: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// Information to attach to all events related to the matchmaking configuration.
        public var customEventData: Swift.String?
        /// A descriptive label that is associated with matchmaking configuration.
        public var description: Swift.String?
        /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
        ///
        /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
        ///
        /// * WITH_QUEUE - FlexMatch forms matches and uses the specified Amazon GameLift queue to start a game session for the match.
        public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
        /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}. This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameSessionData: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new Amazon GameLift-hosted game sessions for matches that are created with this matchmaking configuration. This property is not set when FlexMatchMode is set to STANDALONE.
        public var gameSessionQueueArns: [Swift.String]?
        /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        public var notificationTarget: Swift.String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public var requestTimeoutSeconds: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift matchmaking rule set resource that this configuration uses.
        public var ruleSetArn: Swift.String?
        /// A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public var ruleSetName: Swift.String?

        public init(
            acceptanceRequired: Swift.Bool? = nil,
            acceptanceTimeoutSeconds: Swift.Int? = nil,
            additionalPlayerCount: Swift.Int? = nil,
            backfillMode: GameLiftClientTypes.BackfillMode? = nil,
            configurationArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            customEventData: Swift.String? = nil,
            description: Swift.String? = nil,
            flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionQueueArns: [Swift.String]? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            requestTimeoutSeconds: Swift.Int? = nil,
            ruleSetArn: Swift.String? = nil,
            ruleSetName: Swift.String? = nil
        )
        {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.configurationArn = configurationArn
            self.creationTime = creationTime
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetArn = ruleSetArn
            self.ruleSetName = ruleSetName
        }
    }
}

public struct CreateMatchmakingConfigurationOutput: Swift.Sendable {
    /// Object that describes the newly created matchmaking configuration.
    public var configuration: GameLiftClientTypes.MatchmakingConfiguration?

    public init(
        configuration: GameLiftClientTypes.MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct CreateMatchmakingRuleSetInput: Swift.Sendable {
    /// A unique identifier for the matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name value. Note that the rule set name is different from the optional name field in the rule set body.
    /// This member is required.
    public var name: Swift.String?
    /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
    /// This member is required.
    public var ruleSetBody: Swift.String?
    /// A list of labels to assign to the new matchmaking rule set resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        name: Swift.String? = nil,
        ruleSetBody: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.ruleSetBody = ruleSetBody
        self.tags = tags
    }
}

extension GameLiftClientTypes {

    /// Set of rule statements, used with FlexMatch, that determine how to build your player matches. Each rule set describes a type of group to be created and defines the parameters for acceptable player matches. A rule set may define the following elements for a match. For detailed information and examples showing how to construct a rule set, see [Build a FlexMatch rule set](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-rulesets.html).
    ///
    /// * Teams -- Required. A rule set must define one or multiple teams for the match and set minimum and maximum team sizes. For example, a rule set might describe a 4x4 match that requires all eight slots to be filled.
    ///
    /// * Player attributes -- Optional. These attributes specify a set of player characteristics to evaluate when looking for a match. Matchmaking requests that use a rule set with player attributes must provide the corresponding attribute values. For example, an attribute might specify a player's skill or level.
    ///
    /// * Rules -- Optional. Rules define how to evaluate potential players for a match based on player attributes. A rule might specify minimum requirements for individual players, teams, or entire matches. For example, a rule might require each player to meet a certain skill level, each team to have at least one player in a certain role, or the match to have a minimum average skill level. or may describe an entire group--such as all teams must be evenly matched or have at least one player in a certain role.
    ///
    /// * Expansions -- Optional. Expansions allow you to relax the rules after a period of time when no acceptable matches are found. This feature lets you balance getting players into games in a reasonable amount of time instead of making them wait indefinitely for the best possible match. For example, you might use an expansion to increase the maximum skill variance between players after 30 seconds.
    public struct MatchmakingRuleSet: Swift.Sendable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift matchmaking rule set resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingruleset/. In a GameLift rule set ARN, the resource ID matches the RuleSetName value.
        public var ruleSetArn: Swift.String?
        /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        /// This member is required.
        public var ruleSetBody: Swift.String?
        /// A unique identifier for the matchmaking rule set
        public var ruleSetName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            ruleSetArn: Swift.String? = nil,
            ruleSetBody: Swift.String? = nil,
            ruleSetName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.ruleSetArn = ruleSetArn
            self.ruleSetBody = ruleSetBody
            self.ruleSetName = ruleSetName
        }
    }
}

public struct CreateMatchmakingRuleSetOutput: Swift.Sendable {
    /// The newly created matchmaking rule set.
    /// This member is required.
    public var ruleSet: GameLiftClientTypes.MatchmakingRuleSet?

    public init(
        ruleSet: GameLiftClientTypes.MatchmakingRuleSet? = nil
    )
    {
        self.ruleSet = ruleSet
    }
}

/// The game instance is currently full and cannot allow the requested player(s) to join. Clients can retry such requests immediately or after a waiting period.
public struct GameSessionFullException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GameSessionFullException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested operation would cause a conflict with the current state of a resource associated with the request and/or the game instance. Resolve the conflict before retrying.
public struct InvalidGameSessionStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGameSessionStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreatePlayerSessionInput: Swift.Sendable {
    /// A unique identifier for the game session to add a player to.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
    public var playerData: Swift.String?
    /// A unique identifier for a player. Player IDs are developer-defined.
    /// This member is required.
    public var playerId: Swift.String?

    public init(
        gameSessionId: Swift.String? = nil,
        playerData: Swift.String? = nil,
        playerId: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerData = playerData
        self.playerId = playerId
    }
}

extension CreatePlayerSessionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePlayerSessionInput(gameSessionId: \(Swift.String(describing: gameSessionId)), playerData: \(Swift.String(describing: playerData)), playerId: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum PlayerSessionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case completed
        case reserved
        case timedout
        case sdkUnknown(Swift.String)

        public static var allCases: [PlayerSessionStatus] {
            return [
                .active,
                .completed,
                .reserved,
                .timedout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .completed: return "COMPLETED"
            case .reserved: return "RESERVED"
            case .timedout: return "TIMEDOUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Represents a player session. Player sessions are created either for a specific game session, or as part of a game session placement or matchmaking request. A player session can represents a reserved player slot in a game session (when status is RESERVED) or actual player activity in a game session (when status is ACTIVE). A player session object, including player data, is automatically passed to a game session when the player connects to the game session and is validated. After the game session ends, player sessions information is retained for 30 days and then removed. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct PlayerSession: Swift.Sendable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that the player's game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the player's game session is running on.
        public var fleetId: Swift.String?
        /// A unique identifier for the game session that the player session is connected to.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public var playerData: Swift.String?
        /// A unique identifier for a player that is associated with this player session.
        public var playerId: Swift.String?
        /// A unique identifier for a player session.
        public var playerSessionId: Swift.String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the player session. Possible player session statuses include the following:
        ///
        /// * RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.
        ///
        /// * ACTIVE -- The player has been validated by the server process and is currently connected.
        ///
        /// * COMPLETED -- The player connection has been dropped.
        ///
        /// * TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
        public var status: GameLiftClientTypes.PlayerSessionStatus?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            playerData: Swift.String? = nil,
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.PlayerSessionStatus? = nil,
            terminationTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.port = port
            self.status = status
            self.terminationTime = terminationTime
        }
    }
}

extension GameLiftClientTypes.PlayerSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlayerSession(creationTime: \(Swift.String(describing: creationTime)), dnsName: \(Swift.String(describing: dnsName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), gameSessionId: \(Swift.String(describing: gameSessionId)), playerData: \(Swift.String(describing: playerData)), playerSessionId: \(Swift.String(describing: playerSessionId)), status: \(Swift.String(describing: status)), terminationTime: \(Swift.String(describing: terminationTime)), ipAddress: \"CONTENT_REDACTED\", playerId: \"CONTENT_REDACTED\", port: \"CONTENT_REDACTED\")"}
}

public struct CreatePlayerSessionOutput: Swift.Sendable {
    /// Object that describes the newly created player session record.
    public var playerSession: GameLiftClientTypes.PlayerSession?

    public init(
        playerSession: GameLiftClientTypes.PlayerSession? = nil
    )
    {
        self.playerSession = playerSession
    }
}

public struct CreatePlayerSessionsInput: Swift.Sendable {
    /// A unique identifier for the game session to add players to.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Any player data strings for player IDs that are not included in the PlayerIds parameter are ignored.
    public var playerDataMap: [Swift.String: Swift.String]?
    /// List of unique identifiers for the players to be added.
    /// This member is required.
    public var playerIds: [Swift.String]?

    public init(
        gameSessionId: Swift.String? = nil,
        playerDataMap: [Swift.String: Swift.String]? = nil,
        playerIds: [Swift.String]? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerDataMap = playerDataMap
        self.playerIds = playerIds
    }
}

extension CreatePlayerSessionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePlayerSessionsInput(gameSessionId: \(Swift.String(describing: gameSessionId)), playerDataMap: \(Swift.String(describing: playerDataMap)), playerIds: \"CONTENT_REDACTED\")"}
}

public struct CreatePlayerSessionsOutput: Swift.Sendable {
    /// A collection of player session objects created for the added players.
    public var playerSessions: [GameLiftClientTypes.PlayerSession]?

    public init(
        playerSessions: [GameLiftClientTypes.PlayerSession]? = nil
    )
    {
        self.playerSessions = playerSessions
    }
}

public struct CreateScriptInput: Swift.Sendable {
    /// A descriptive label that is associated with a script. Script names don't need to be unique. You can use [UpdateScript](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html) to change this value later.
    public var name: Swift.String?
    /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// A list of labels to assign to the new script resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html) to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?
    /// Version information associated with a build or script. Version strings don't need to be unique. You can use [UpdateScript](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html) to change this value later.
    public var version: Swift.String?
    /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
    public var zipFile: Foundation.Data?

    public init(
        name: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        version: Swift.String? = nil,
        zipFile: Foundation.Data? = nil
    )
    {
        self.name = name
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
        self.zipFile = zipFile
    }
}

extension GameLiftClientTypes {

    /// Properties describing a Realtime script. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Script: Swift.Sendable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// A descriptive label that is associated with a script. Script names don't need to be unique.
        public var name: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the ScriptId value.
        public var scriptArn: Swift.String?
        /// A unique identifier for the Realtime script
        public var scriptId: Swift.String?
        /// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
        public var sizeOnDisk: Swift.Int?
        /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
        public var storageLocation: GameLiftClientTypes.S3Location?
        /// Version information associated with a build or script. Version strings don't need to be unique.
        public var version: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            scriptArn: Swift.String? = nil,
            scriptId: Swift.String? = nil,
            sizeOnDisk: Swift.Int? = nil,
            storageLocation: GameLiftClientTypes.S3Location? = nil,
            version: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.name = name
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.sizeOnDisk = sizeOnDisk
            self.storageLocation = storageLocation
            self.version = version
        }
    }
}

public struct CreateScriptOutput: Swift.Sendable {
    /// The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
    public var script: GameLiftClientTypes.Script?

    public init(
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

public struct CreateVpcPeeringAuthorizationInput: Swift.Sendable {
    /// A unique identifier for the Amazon Web Services account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var gameLiftAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init(
        gameLiftAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

extension GameLiftClientTypes {

    /// Represents an authorization for a VPC peering connection between the VPC for an Amazon GameLift fleet and another VPC on an account you have access to. This authorization must exist and be valid for the peering connection to be established. Authorizations are valid for 24 hours after they are issued. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct VpcPeeringAuthorization: Swift.Sendable {
        /// Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// Time stamp indicating when this authorization expires (24 hours after issuance). Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var expirationTime: Foundation.Date?
        /// A unique identifier for the Amazon Web Services account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
        public var gameLiftAwsAccountId: Swift.String?
        /// The authorization's peer VPC Amazon Web Services account ID.
        public var peerVpcAwsAccountId: Swift.String?
        /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
        public var peerVpcId: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            expirationTime: Foundation.Date? = nil,
            gameLiftAwsAccountId: Swift.String? = nil,
            peerVpcAwsAccountId: Swift.String? = nil,
            peerVpcId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }
    }
}

public struct CreateVpcPeeringAuthorizationOutput: Swift.Sendable {
    /// Details on the requested VPC peering authorization, including expiration.
    public var vpcPeeringAuthorization: GameLiftClientTypes.VpcPeeringAuthorization?

    public init(
        vpcPeeringAuthorization: GameLiftClientTypes.VpcPeeringAuthorization? = nil
    )
    {
        self.vpcPeeringAuthorization = vpcPeeringAuthorization
    }
}

public struct CreateVpcPeeringConnectionInput: Swift.Sendable {
    /// A unique identifier for the fleet. You can use either the fleet ID or ARN value. This tells Amazon GameLift which GameLift VPC to peer with.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for the Amazon Web Services account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var peerVpcAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        peerVpcAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

public struct CreateVpcPeeringConnectionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAliasInput: Swift.Sendable {
    /// A unique identifier of the alias that you want to delete. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init(
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

public struct DeleteBuildInput: Swift.Sendable {
    /// A unique identifier for the build to delete. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init(
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

public struct DeleteContainerGroupDefinitionInput: Swift.Sendable {
    /// The unique identifier for the container group definition to delete. You can use either the Name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteFleetInput: Swift.Sendable {
    /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

public struct DeleteFleetLocationsInput: Swift.Sendable {
    /// A unique identifier for the fleet to delete locations for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The list of fleet locations to delete. Specify locations in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var locations: [Swift.String]?

    public init(
        fleetId: Swift.String? = nil,
        locations: [Swift.String]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

public struct DeleteFleetLocationsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that location attributes are being deleted for.
    public var fleetId: Swift.String?
    /// The remote locations that are being deleted, with each location status set to DELETING.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

extension GameLiftClientTypes {

    public enum GameServerGroupDeleteOption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forceDelete
        case retain
        case safeDelete
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupDeleteOption] {
            return [
                .forceDelete,
                .retain,
                .safeDelete
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forceDelete: return "FORCE_DELETE"
            case .retain: return "RETAIN"
            case .safeDelete: return "SAFE_DELETE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteGameServerGroupInput: Swift.Sendable {
    /// The type of delete to perform. Options include the following:
    ///
    /// * SAFE_DELETE – (default) Terminates the game server group and Amazon EC2 Auto Scaling group only when it has no game servers that are in UTILIZED status.
    ///
    /// * FORCE_DELETE – Terminates the game server group, including all active game servers regardless of their utilization status, and the Amazon EC2 Auto Scaling group.
    ///
    /// * RETAIN – Does a safe delete of the game server group but retains the Amazon EC2 Auto Scaling group as is.
    public var deleteOption: GameLiftClientTypes.GameServerGroupDeleteOption?
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?

    public init(
        deleteOption: GameLiftClientTypes.GameServerGroupDeleteOption? = nil,
        gameServerGroupName: Swift.String? = nil
    )
    {
        self.deleteOption = deleteOption
        self.gameServerGroupName = gameServerGroupName
    }
}

public struct DeleteGameServerGroupOutput: Swift.Sendable {
    /// An object that describes the deleted game server group resource, with status updated to DELETE_SCHEDULED.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

public struct DeleteGameSessionQueueInput: Swift.Sendable {
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteGameSessionQueueOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteLocationInput: Swift.Sendable {
    /// The location name of the custom location to be deleted.
    /// This member is required.
    public var locationName: Swift.String?

    public init(
        locationName: Swift.String? = nil
    )
    {
        self.locationName = locationName
    }
}

public struct DeleteLocationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteMatchmakingConfigurationInput: Swift.Sendable {
    /// A unique identifier for the matchmaking configuration. You can use either the configuration name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteMatchmakingConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteMatchmakingRuleSetInput: Swift.Sendable {
    /// A unique identifier for the matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteMatchmakingRuleSetOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteScalingPolicyInput: Swift.Sendable {
    /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.name = name
    }
}

public struct DeleteScriptInput: Swift.Sendable {
    /// A unique identifier for the Realtime script to delete. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?

    public init(
        scriptId: Swift.String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

public struct DeleteVpcPeeringAuthorizationInput: Swift.Sendable {
    /// A unique identifier for the Amazon Web Services account that you use to manage your Amazon GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var gameLiftAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init(
        gameLiftAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

public struct DeleteVpcPeeringAuthorizationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteVpcPeeringConnectionInput: Swift.Sendable {
    /// A unique identifier for the fleet. This fleet specified must match the fleet referenced in the VPC peering connection record. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for a VPC peering connection.
    /// This member is required.
    public var vpcPeeringConnectionId: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        vpcPeeringConnectionId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}

public struct DeleteVpcPeeringConnectionOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterComputeInput: Swift.Sendable {
    /// The unique identifier of the compute resource to deregister. For an Anywhere fleet compute, use the registered compute name. For a container fleet, use the compute name (for example, a123b456c789012d3e4567f8a901b23c/1a234b56-7cd8-9e0f-a1b2-c34d567ef8a9) or the compute ARN.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet the compute resource is currently registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

public struct DeregisterComputeOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterGameServerInput: Swift.Sendable {
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to deregister.
    /// This member is required.
    public var gameServerId: Swift.String?

    public init(
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

public struct DescribeAliasInput: Swift.Sendable {
    /// The unique identifier for the fleet alias that you want to retrieve. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init(
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

public struct DescribeAliasOutput: Swift.Sendable {
    /// The requested alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init(
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

public struct DescribeBuildInput: Swift.Sendable {
    /// A unique identifier for the build to retrieve properties for. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init(
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

public struct DescribeBuildOutput: Swift.Sendable {
    /// Set of properties describing the requested build.
    public var build: GameLiftClientTypes.Build?

    public init(
        build: GameLiftClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

public struct DescribeComputeInput: Swift.Sendable {
    /// The unique identifier of the compute resource to retrieve properties for. For an Anywhere fleet compute, use the registered compute name. For an EC2 fleet instance, use the instance ID. For a container fleet, use the compute name (for example, a123b456c789012d3e4567f8a901b23c/1a234b56-7cd8-9e0f-a1b2-c34d567ef8a9) or the compute ARN.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet that the compute belongs to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

public struct DescribeComputeOutput: Swift.Sendable {
    /// The set of properties for the requested compute resource.
    public var compute: GameLiftClientTypes.Compute?

    public init(
        compute: GameLiftClientTypes.Compute? = nil
    )
    {
        self.compute = compute
    }
}

public struct DescribeContainerGroupDefinitionInput: Swift.Sendable {
    /// The unique identifier for the container group definition to retrieve properties for. You can use either the Name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DescribeContainerGroupDefinitionOutput: Swift.Sendable {
    /// The properties of the requested container group definition resource.
    public var containerGroupDefinition: GameLiftClientTypes.ContainerGroupDefinition?

    public init(
        containerGroupDefinition: GameLiftClientTypes.ContainerGroupDefinition? = nil
    )
    {
        self.containerGroupDefinition = containerGroupDefinition
    }
}

public struct DescribeEC2InstanceLimitsInput: Swift.Sendable {
    /// Name of an Amazon EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Do not specify a value for this parameter to retrieve limits for all instance types.
    public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    /// The name of a remote location to request instance limits for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?

    public init(
        ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
        location: Swift.String? = nil
    )
    {
        self.ec2InstanceType = ec2InstanceType
        self.location = location
    }
}

extension GameLiftClientTypes {

    /// The Amazon GameLift service limits for an Amazon EC2 instance type and current utilization. Amazon GameLift allows Amazon Web Services accounts a maximum number of instances, per instance type, per Amazon Web Services Region or location, for use with Amazon GameLift. You can request an limit increase for your account by using the Service limits page in the Amazon GameLift console.
    public struct EC2InstanceLimit: Swift.Sendable {
        /// The number of instances for the specified type and location that are currently being used by the Amazon Web Services account.
        public var currentInstances: Swift.Int?
        /// The name of an Amazon EC2 instance type. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions.
        public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
        /// The number of instances that is allowed for the specified instance type and location.
        public var instanceLimit: Swift.Int?
        /// An Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?

        public init(
            currentInstances: Swift.Int? = nil,
            ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            instanceLimit: Swift.Int? = nil,
            location: Swift.String? = nil
        )
        {
            self.currentInstances = currentInstances
            self.ec2InstanceType = ec2InstanceType
            self.instanceLimit = instanceLimit
            self.location = location
        }
    }
}

public struct DescribeEC2InstanceLimitsOutput: Swift.Sendable {
    /// The maximum number of instances for the specified instance type.
    public var ec2InstanceLimits: [GameLiftClientTypes.EC2InstanceLimit]?

    public init(
        ec2InstanceLimits: [GameLiftClientTypes.EC2InstanceLimit]? = nil
    )
    {
        self.ec2InstanceLimits = ec2InstanceLimits
    }
}

public struct DescribeFleetAttributesInput: Swift.Sendable {
    /// A list of unique fleet identifiers to retrieve attributes for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init(
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct DescribeFleetAttributesOutput: Swift.Sendable {
    /// A collection of objects containing attribute metadata for each requested fleet ID. Attribute objects are returned only for fleets that currently exist.
    public var fleetAttributes: [GameLiftClientTypes.FleetAttributes]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        fleetAttributes: [GameLiftClientTypes.FleetAttributes]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.nextToken = nextToken
    }
}

public struct DescribeFleetCapacityInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve capacity information for. You can use either the fleet ID or ARN value. Leave this parameter empty to retrieve capacity information for all fleets.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init(
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    /// Resource capacity settings. Fleet capacity is measured in Amazon EC2 instances. Pending and terminating counts are non-zero when the fleet capacity is adjusting to a scaling event or if access to resources is temporarily affected.
    public struct EC2InstanceCounts: Swift.Sendable {
        /// Actual number of instances that are ready to host game sessions.
        public var active: Swift.Int?
        /// Requested number of active instances. Amazon GameLift takes action as needed to maintain the desired number of instances. Capacity is scaled up or down by changing the desired instances. A change in the desired instances value can take up to 1 minute to be reflected when viewing a fleet's capacity settings.
        public var desired: Swift.Int?
        /// Number of active instances that are not currently hosting a game session.
        public var idle: Swift.Int?
        /// The maximum instance count value allowed.
        public var maximum: Swift.Int?
        /// The minimum instance count value allowed.
        public var minimum: Swift.Int?
        /// Number of instances that are starting but not yet active.
        public var pending: Swift.Int?
        /// Number of instances that are no longer active but haven't yet been terminated.
        public var terminating: Swift.Int?

        public init(
            active: Swift.Int? = nil,
            desired: Swift.Int? = nil,
            idle: Swift.Int? = nil,
            maximum: Swift.Int? = nil,
            minimum: Swift.Int? = nil,
            pending: Swift.Int? = nil,
            terminating: Swift.Int? = nil
        )
        {
            self.active = active
            self.desired = desired
            self.idle = idle
            self.maximum = maximum
            self.minimum = minimum
            self.pending = pending
            self.terminating = terminating
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift containers feature, which is currently in public preview. The number and status of replica container groups that are deployed across a fleet with compute type CONTAINER. This information, combined with the number of server processes being hosted per container group (see RuntimeConfiguration), tells you how many game sessions the fleet is currently capable of hosting concurrently. Returned by: [DescribeFleetCapacity], [DescribeFleetLocationCapacity]
    public struct ReplicaContainerGroupCounts: Swift.Sendable {
        /// The number of container groups that have active game sessions.
        public var active: Swift.Int?
        /// The number of container groups that have no active game sessions.
        public var idle: Swift.Int?
        /// The number of container groups that are starting up but have not yet registered.
        public var pending: Swift.Int?
        /// The number of container groups that are in the process of shutting down.
        public var terminating: Swift.Int?

        public init(
            active: Swift.Int? = nil,
            idle: Swift.Int? = nil,
            pending: Swift.Int? = nil,
            terminating: Swift.Int? = nil
        )
        {
            self.active = active
            self.idle = idle
            self.pending = pending
            self.terminating = terminating
        }
    }
}

extension GameLiftClientTypes {

    /// Current resource capacity settings for managed EC2 fleets and container fleets. For multi-location fleets, location values might refer to a fleet's remote location or its home Region. Returned by: [DescribeFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetCapacity.html), [DescribeFleetLocationCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetLocationCapacity.html), [UpdateFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateFleetCapacity.html)
    public struct FleetCapacity: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet associated with the location.
        public var fleetId: Swift.String?
        /// The current number of instances in the fleet, listed by instance status. Counts for pending and terminating instances might be non-zero if the fleet is adjusting to a scaling event or if access to resources is temporarily affected.
        public var instanceCounts: GameLiftClientTypes.EC2InstanceCounts?
        /// The Amazon EC2 instance type that is used for instances in a fleet. Instance type determines the computing resources in use, including CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions.
        public var instanceType: GameLiftClientTypes.EC2InstanceType?
        /// The fleet location for the instance count information, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?
        /// This property is used with the Amazon GameLift containers feature, which is currently in public preview. The number and status of replica container groups in a container fleet.
        public var replicaContainerGroupCounts: GameLiftClientTypes.ReplicaContainerGroupCounts?

        public init(
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            instanceCounts: GameLiftClientTypes.EC2InstanceCounts? = nil,
            instanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            location: Swift.String? = nil,
            replicaContainerGroupCounts: GameLiftClientTypes.ReplicaContainerGroupCounts? = nil
        )
        {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
            self.instanceType = instanceType
            self.location = location
            self.replicaContainerGroupCounts = replicaContainerGroupCounts
        }
    }
}

public struct DescribeFleetCapacityOutput: Swift.Sendable {
    /// A collection of objects that contains capacity information for each requested fleet ID. Capacity objects are returned only for fleets that currently exist. Changes in desired instance value can take up to 1 minute to be reflected.
    public var fleetCapacity: [GameLiftClientTypes.FleetCapacity]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        fleetCapacity: [GameLiftClientTypes.FleetCapacity]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
        self.nextToken = nextToken
    }
}

public struct DescribeFleetEventsInput: Swift.Sendable {
    /// The most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    public var endTime: Foundation.Date?
    /// A unique identifier for the fleet to get event logs for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// The earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    public var startTime: Foundation.Date?

    public init(
        endTime: Foundation.Date? = nil,
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.endTime = endTime
        self.fleetId = fleetId
        self.limit = limit
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

extension GameLiftClientTypes {

    public enum EventCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fleetActivationFailed
        case fleetActivationFailedNoInstances
        case fleetBinaryDownloadFailed
        case fleetCreated
        case fleetCreationCompletedInstaller
        case fleetCreationExtractingBuild
        case fleetCreationFailedInstaller
        case fleetCreationRunningInstaller
        case fleetCreationValidatingRuntimeConfig
        case fleetDeleted
        case fleetInitializationFailed
        case fleetNewGameSessionProtectionPolicyUpdated
        case fleetScalingEvent
        case fleetStateActivating
        case fleetStateActive
        case fleetStateBuilding
        case fleetStateDownloading
        case fleetStateError
        case fleetStateValidating
        case fleetValidationExecutableRuntimeFailure
        case fleetValidationLaunchPathNotFound
        case fleetValidationTimedOut
        case fleetVpcPeeringDeleted
        case fleetVpcPeeringFailed
        case fleetVpcPeeringSucceeded
        case gameSessionActivationTimeout
        case genericEvent
        case instanceInterrupted
        case instanceRecycled
        case serverProcessCrashed
        case serverProcessForceTerminated
        case serverProcessInvalidPath
        case serverProcessProcessExitTimeout
        case serverProcessProcessReadyTimeout
        case serverProcessSdkInitializationTimeout
        case serverProcessTerminatedUnhealthy
        case sdkUnknown(Swift.String)

        public static var allCases: [EventCode] {
            return [
                .fleetActivationFailed,
                .fleetActivationFailedNoInstances,
                .fleetBinaryDownloadFailed,
                .fleetCreated,
                .fleetCreationCompletedInstaller,
                .fleetCreationExtractingBuild,
                .fleetCreationFailedInstaller,
                .fleetCreationRunningInstaller,
                .fleetCreationValidatingRuntimeConfig,
                .fleetDeleted,
                .fleetInitializationFailed,
                .fleetNewGameSessionProtectionPolicyUpdated,
                .fleetScalingEvent,
                .fleetStateActivating,
                .fleetStateActive,
                .fleetStateBuilding,
                .fleetStateDownloading,
                .fleetStateError,
                .fleetStateValidating,
                .fleetValidationExecutableRuntimeFailure,
                .fleetValidationLaunchPathNotFound,
                .fleetValidationTimedOut,
                .fleetVpcPeeringDeleted,
                .fleetVpcPeeringFailed,
                .fleetVpcPeeringSucceeded,
                .gameSessionActivationTimeout,
                .genericEvent,
                .instanceInterrupted,
                .instanceRecycled,
                .serverProcessCrashed,
                .serverProcessForceTerminated,
                .serverProcessInvalidPath,
                .serverProcessProcessExitTimeout,
                .serverProcessProcessReadyTimeout,
                .serverProcessSdkInitializationTimeout,
                .serverProcessTerminatedUnhealthy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fleetActivationFailed: return "FLEET_ACTIVATION_FAILED"
            case .fleetActivationFailedNoInstances: return "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
            case .fleetBinaryDownloadFailed: return "FLEET_BINARY_DOWNLOAD_FAILED"
            case .fleetCreated: return "FLEET_CREATED"
            case .fleetCreationCompletedInstaller: return "FLEET_CREATION_COMPLETED_INSTALLER"
            case .fleetCreationExtractingBuild: return "FLEET_CREATION_EXTRACTING_BUILD"
            case .fleetCreationFailedInstaller: return "FLEET_CREATION_FAILED_INSTALLER"
            case .fleetCreationRunningInstaller: return "FLEET_CREATION_RUNNING_INSTALLER"
            case .fleetCreationValidatingRuntimeConfig: return "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
            case .fleetDeleted: return "FLEET_DELETED"
            case .fleetInitializationFailed: return "FLEET_INITIALIZATION_FAILED"
            case .fleetNewGameSessionProtectionPolicyUpdated: return "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
            case .fleetScalingEvent: return "FLEET_SCALING_EVENT"
            case .fleetStateActivating: return "FLEET_STATE_ACTIVATING"
            case .fleetStateActive: return "FLEET_STATE_ACTIVE"
            case .fleetStateBuilding: return "FLEET_STATE_BUILDING"
            case .fleetStateDownloading: return "FLEET_STATE_DOWNLOADING"
            case .fleetStateError: return "FLEET_STATE_ERROR"
            case .fleetStateValidating: return "FLEET_STATE_VALIDATING"
            case .fleetValidationExecutableRuntimeFailure: return "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
            case .fleetValidationLaunchPathNotFound: return "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
            case .fleetValidationTimedOut: return "FLEET_VALIDATION_TIMED_OUT"
            case .fleetVpcPeeringDeleted: return "FLEET_VPC_PEERING_DELETED"
            case .fleetVpcPeeringFailed: return "FLEET_VPC_PEERING_FAILED"
            case .fleetVpcPeeringSucceeded: return "FLEET_VPC_PEERING_SUCCEEDED"
            case .gameSessionActivationTimeout: return "GAME_SESSION_ACTIVATION_TIMEOUT"
            case .genericEvent: return "GENERIC_EVENT"
            case .instanceInterrupted: return "INSTANCE_INTERRUPTED"
            case .instanceRecycled: return "INSTANCE_RECYCLED"
            case .serverProcessCrashed: return "SERVER_PROCESS_CRASHED"
            case .serverProcessForceTerminated: return "SERVER_PROCESS_FORCE_TERMINATED"
            case .serverProcessInvalidPath: return "SERVER_PROCESS_INVALID_PATH"
            case .serverProcessProcessExitTimeout: return "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
            case .serverProcessProcessReadyTimeout: return "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
            case .serverProcessSdkInitializationTimeout: return "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
            case .serverProcessTerminatedUnhealthy: return "SERVER_PROCESS_TERMINATED_UNHEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Log entry describing an event that involves Amazon GameLift resources (such as a fleet). In addition to tracking activity, event codes and messages can provide additional information for troubleshooting and debugging problems.
    public struct Event: Swift.Sendable {
        /// The number of times that this event occurred.
        public var count: Swift.Int?
        /// The type of event being logged. Fleet state transition events:
        ///
        /// * FLEET_CREATED -- A fleet resource was successfully created with a status of NEW. Event messaging includes the fleet ID.
        ///
        /// * FLEET_STATE_DOWNLOADING -- Fleet status changed from NEW to DOWNLOADING. Amazon GameLift is downloading the compressed build and running install scripts.
        ///
        /// * FLEET_STATE_VALIDATING -- Fleet status changed from DOWNLOADING to VALIDATING. Amazon GameLift has successfully installed build and is now validating the build files.
        ///
        /// * FLEET_STATE_BUILDING -- Fleet status changed from VALIDATING to BUILDING. Amazon GameLift has successfully verified the build files and is now launching a fleet instance.
        ///
        /// * FLEET_STATE_ACTIVATING -- Fleet status changed from BUILDING to ACTIVATING. Amazon GameLift is launching a game server process on the fleet instance and is testing its connectivity with the Amazon GameLift service.
        ///
        /// * FLEET_STATE_ACTIVE -- The fleet's status changed from ACTIVATING to ACTIVE. The fleet is now ready to host game sessions.
        ///
        /// * FLEET_STATE_ERROR -- The Fleet's status changed to ERROR. Describe the fleet event message for more details.
        ///
        ///
        /// Fleet creation events (ordered by fleet creation activity):
        ///
        /// * FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet instance.
        ///
        /// * FLEET_CREATION_EXTRACTING_BUILD -- The game server build was successfully downloaded to an instance, and Amazon GameLiftis now extracting the build files from the uploaded build. Failure at this stage prevents a fleet from moving to ACTIVE status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_CREATION_RUNNING_INSTALLER -- The game server build files were successfully extracted, and Amazon GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to ACTIVE status. Logs for this stage list the installation steps and whether or not the install completed successfully. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_CREATION_COMPLETED_INSTALLER -- The game server build files were successfully installed and validation of the installation will begin soon.
        ///
        /// * FLEET_CREATION_FAILED_INSTALLER -- The installed failed while attempting to install the build files. This event indicates that the failure occurred before Amazon GameLift could start validation.
        ///
        /// * FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful, and the GameLift is now verifying that the game server launch paths, which are specified in the fleet's runtime configuration, exist. If any listed launch path exists, Amazon GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to ACTIVE status. Logs for this stage list the launch paths in the runtime configuration and indicate whether each is found. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the runtime configuration failed because the executable specified in a launch path does not exist on the instance.
        ///
        /// * FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the runtime configuration failed because the executable specified in a launch path failed to run on the fleet instance.
        ///
        /// * FLEET_VALIDATION_TIMED_OUT -- Validation of the fleet at the end of creation timed out. Try fleet creation again.
        ///
        /// * FLEET_ACTIVATION_FAILED -- The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. For more information, see [Debug Fleet Creation Issues](https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creating-debug.html#fleets-creating-debug-creation).
        ///
        /// * FLEET_ACTIVATION_FAILED_NO_INSTANCES -- Fleet creation was not able to obtain any instances based on the input fleet attributes. Try again at a different time or choose a different combination of fleet attributes such as fleet type, instance type, etc.
        ///
        /// * FLEET_INITIALIZATION_FAILED -- A generic exception occurred during fleet creation. Describe the fleet event message for more details.
        ///
        ///
        /// VPC peering events:
        ///
        /// * FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been established between the VPC for an Amazon GameLift fleet and a VPC in your Amazon Web Services account.
        ///
        /// * FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed. Event details and status information provide additional detail. A common reason for peering failure is that the two VPCs have overlapping CIDR blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in your Amazon Web Services account. For more information on VPC peering failures, see [https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html)
        ///
        /// * FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully deleted.
        ///
        ///
        /// Spot instance events:
        ///
        /// * INSTANCE_INTERRUPTED -- A spot instance was interrupted by EC2 with a two-minute notification.
        ///
        /// * INSTANCE_RECYCLED -- A spot instance was determined to have a high risk of interruption and is scheduled to be recycled once it has no active game sessions.
        ///
        ///
        /// Server process events:
        ///
        /// * SERVER_PROCESS_INVALID_PATH -- The game server executable or script could not be found based on the Fleet runtime configuration. Check that the launch path is correct based on the operating system of the Fleet.
        ///
        /// * SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT -- The server process did not call InitSDK() within the time expected (5 minutes). Check your game session log to see why InitSDK() was not called in time.
        ///
        /// * SERVER_PROCESS_PROCESS_READY_TIMEOUT -- The server process did not call ProcessReady() within the time expected (5 minutes) after calling InitSDK(). Check your game session log to see why ProcessReady() was not called in time.
        ///
        /// * SERVER_PROCESS_CRASHED -- The server process exited without calling ProcessEnding(). Check your game session log to see why ProcessEnding() was not called.
        ///
        /// * SERVER_PROCESS_TERMINATED_UNHEALTHY -- The server process did not report a valid health check for too long and was therefore terminated by GameLift. Check your game session log to see if the thread became stuck processing a synchronous task for too long.
        ///
        /// * SERVER_PROCESS_FORCE_TERMINATED -- The server process did not exit cleanly within the time expected after OnProcessTerminate() was sent. Check your game session log to see why termination took longer than expected.
        ///
        /// * SERVER_PROCESS_PROCESS_EXIT_TIMEOUT -- The server process did not exit cleanly within the time expected (30 seconds) after calling ProcessEnding(). Check your game session log to see why termination took longer than expected.
        ///
        ///
        /// Game session events:
        ///
        /// * GAME_SESSION_ACTIVATION_TIMEOUT -- GameSession failed to activate within the expected time. Check your game session log to see why ActivateGameSession() took longer to complete than expected.
        ///
        ///
        /// Other fleet events:
        ///
        /// * FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.
        ///
        /// * FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting.
        ///
        /// * FLEET_DELETED -- A request to delete a fleet was initiated.
        ///
        /// * GENERIC_EVENT -- An unspecified event has occurred.
        public var eventCode: GameLiftClientTypes.EventCode?
        /// A unique identifier for a fleet event.
        public var eventId: Swift.String?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var eventTime: Foundation.Date?
        /// Additional information related to the event.
        public var message: Swift.String?
        /// Location of stored logs with additional detail that is related to the event. This is useful for debugging issues. The URL is valid for 15 minutes. You can also access fleet creation logs through the Amazon GameLift console.
        public var preSignedLogUrl: Swift.String?
        /// A unique identifier for an event resource, such as a fleet ID.
        public var resourceId: Swift.String?

        public init(
            count: Swift.Int? = nil,
            eventCode: GameLiftClientTypes.EventCode? = nil,
            eventId: Swift.String? = nil,
            eventTime: Foundation.Date? = nil,
            message: Swift.String? = nil,
            preSignedLogUrl: Swift.String? = nil,
            resourceId: Swift.String? = nil
        )
        {
            self.count = count
            self.eventCode = eventCode
            self.eventId = eventId
            self.eventTime = eventTime
            self.message = message
            self.preSignedLogUrl = preSignedLogUrl
            self.resourceId = resourceId
        }
    }
}

public struct DescribeFleetEventsOutput: Swift.Sendable {
    /// A collection of objects containing event log entries for the specified fleet.
    public var events: [GameLiftClientTypes.Event]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        events: [GameLiftClientTypes.Event]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

public struct DescribeFleetLocationAttributesInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve remote locations for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This limit is not currently enforced.
    public var limit: Swift.Int?
    /// A list of fleet locations to retrieve information for. Specify locations in the form of an Amazon Web Services Region code, such as us-west-2.
    public var locations: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        locations: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.locations = locations
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    public enum LocationUpdateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationUpdateStatus] {
            return [
                .pendingUpdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Details about a location in a multi-location fleet.
    public struct LocationAttributes: Swift.Sendable {
        /// A fleet location and its current life-cycle state.
        public var locationState: GameLiftClientTypes.LocationState?
        /// A list of fleet actions that have been suspended in the fleet location.
        public var stoppedActions: [GameLiftClientTypes.FleetAction]?
        /// The status of fleet activity updates to the location. The status PENDING_UPDATE indicates that StopFleetActions or StartFleetActions has been requested but the update has not yet been completed for the location.
        public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

        public init(
            locationState: GameLiftClientTypes.LocationState? = nil,
            stoppedActions: [GameLiftClientTypes.FleetAction]? = nil,
            updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
        )
        {
            self.locationState = locationState
            self.stoppedActions = stoppedActions
            self.updateStatus = updateStatus
        }
    }
}

public struct DescribeFleetLocationAttributesOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that location attributes were requested for.
    public var fleetId: Swift.String?
    /// Location-specific information on the requested fleet's remote locations.
    public var locationAttributes: [GameLiftClientTypes.LocationAttributes]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationAttributes: [GameLiftClientTypes.LocationAttributes]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationAttributes = locationAttributes
        self.nextToken = nextToken
    }
}

public struct DescribeFleetLocationCapacityInput: Swift.Sendable {
    /// A unique identifier for the fleet to request location capacity for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to retrieve capacity information for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var location: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

public struct DescribeFleetLocationCapacityOutput: Swift.Sendable {
    /// Resource capacity information for the requested fleet location. Capacity objects are returned only for fleets and locations that currently exist. Changes in desired instance value can take up to 1 minute to be reflected.
    public var fleetCapacity: GameLiftClientTypes.FleetCapacity?

    public init(
        fleetCapacity: GameLiftClientTypes.FleetCapacity? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
    }
}

public struct DescribeFleetLocationUtilizationInput: Swift.Sendable {
    /// A unique identifier for the fleet to request location utilization for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to retrieve utilization information for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var location: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

extension GameLiftClientTypes {

    /// Current resource utilization statistics in a specified fleet or location. The location value might refer to a fleet's remote location or its home region.
    public struct FleetUtilization: Swift.Sendable {
        /// The number of active game sessions that are currently being hosted across all instances in the fleet location.
        public var activeGameSessionCount: Swift.Int?
        /// The number of server processes in ACTIVE status that are currently running across all instances in the fleet location.
        public var activeServerProcessCount: Swift.Int?
        /// The number of active player sessions that are currently being hosted across all instances in the fleet location.
        public var currentPlayerSessionCount: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet associated with the location.
        public var fleetId: Swift.String?
        /// The fleet location for the fleet utilization information, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?
        /// The maximum number of players allowed across all game sessions that are currently being hosted across all instances in the fleet location.
        public var maximumPlayerSessionCount: Swift.Int?

        public init(
            activeGameSessionCount: Swift.Int? = nil,
            activeServerProcessCount: Swift.Int? = nil,
            currentPlayerSessionCount: Swift.Int? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            location: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil
        )
        {
            self.activeGameSessionCount = activeGameSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }
    }
}

public struct DescribeFleetLocationUtilizationOutput: Swift.Sendable {
    /// Utilization information for the requested fleet location. Utilization objects are returned only for fleets and locations that currently exist.
    public var fleetUtilization: GameLiftClientTypes.FleetUtilization?

    public init(
        fleetUtilization: GameLiftClientTypes.FleetUtilization? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
    }
}

public struct DescribeFleetPortSettingsInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve port settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A remote location to check for status of port setting updates. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

public struct DescribeFleetPortSettingsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was requested.
    public var fleetId: Swift.String?
    /// The port settings for the requested fleet ID.
    public var inboundPermissions: [GameLiftClientTypes.IpPermission]?
    /// The requested fleet location, expressed as an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?
    /// The current status of updates to the fleet's port settings in the requested fleet location. A status of PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
    public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        inboundPermissions: [GameLiftClientTypes.IpPermission]? = nil,
        location: Swift.String? = nil,
        updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.inboundPermissions = inboundPermissions
        self.location = location
        self.updateStatus = updateStatus
    }
}

public struct DescribeFleetUtilizationInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve utilization data for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init(
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct DescribeFleetUtilizationOutput: Swift.Sendable {
    /// A collection of objects containing utilization information for each requested fleet ID. Utilization objects are returned only for fleets that currently exist.
    public var fleetUtilization: [GameLiftClientTypes.FleetUtilization]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        fleetUtilization: [GameLiftClientTypes.FleetUtilization]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
        self.nextToken = nextToken
    }
}

public struct DescribeGameServerInput: Swift.Sendable {
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server information to be retrieved.
    /// This member is required.
    public var gameServerId: Swift.String?

    public init(
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

public struct DescribeGameServerOutput: Swift.Sendable {
    /// Object that describes the requested game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init(
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

public struct DescribeGameServerGroupInput: Swift.Sendable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?

    public init(
        gameServerGroupName: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
    }
}

public struct DescribeGameServerGroupOutput: Swift.Sendable {
    /// An object with the property settings for the requested game server group resource.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

public struct DescribeGameServerInstancesInput: Swift.Sendable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The Amazon EC2 instance IDs that you want to retrieve status on. Amazon EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0. To retrieve all instances in the game server group, leave this parameter empty.
    public var instanceIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        gameServerGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.instanceIds = instanceIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    public enum GameServerInstanceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case draining
        case spotTerminating
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerInstanceStatus] {
            return [
                .active,
                .draining,
                .spotTerminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .draining: return "DRAINING"
            case .spotTerminating: return "SPOT_TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// This data type is used with the Amazon GameLift FleetIQ and game server groups. Additional properties, including status, that describe an EC2 instance in a game server group. Instance configurations are set with game server group properties (see DescribeGameServerGroup and with the EC2 launch template that was used when creating the game server group. Retrieve game server instances for a game server group by calling DescribeGameServerInstances.
    public struct GameServerInstance: Swift.Sendable {
        /// A generated unique identifier for the game server group that includes the game server instance.
        public var gameServerGroupArn: Swift.String?
        /// A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.
        public var gameServerGroupName: Swift.String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
        public var instanceId: Swift.String?
        /// Current status of the game server instance
        public var instanceStatus: GameLiftClientTypes.GameServerInstanceStatus?

        public init(
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceStatus: GameLiftClientTypes.GameServerInstanceStatus? = nil
        )
        {
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.instanceId = instanceId
            self.instanceStatus = instanceStatus
        }
    }
}

public struct DescribeGameServerInstancesOutput: Swift.Sendable {
    /// The collection of requested game server instances.
    public var gameServerInstances: [GameLiftClientTypes.GameServerInstance]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameServerInstances: [GameLiftClientTypes.GameServerInstance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerInstances = gameServerInstances
        self.nextToken = nextToken
    }
}

public struct DescribeGameSessionDetailsInput: Swift.Sendable {
    /// A unique identifier for the alias associated with the fleet to retrieve all game sessions for. You can use either the alias ID or ARN value.
    public var aliasId: Swift.String?
    /// A unique identifier for the fleet to retrieve all game sessions active on the fleet. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?
    /// A unique identifier for the game session to retrieve.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A fleet location to get game session details for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory).
    public var statusFilter: Swift.String?

    public init(
        aliasId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

extension GameLiftClientTypes {

    /// A game session's properties plus the protection policy currently in force.
    public struct GameSessionDetail: Swift.Sendable {
        /// Object that describes a game session.
        public var gameSession: GameLiftClientTypes.GameSession?
        /// Current status of protection for the game session.
        ///
        /// * NoProtection -- The game session can be terminated during a scale-down event.
        ///
        /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public var protectionPolicy: GameLiftClientTypes.ProtectionPolicy?

        public init(
            gameSession: GameLiftClientTypes.GameSession? = nil,
            protectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil
        )
        {
            self.gameSession = gameSession
            self.protectionPolicy = protectionPolicy
        }
    }
}

public struct DescribeGameSessionDetailsOutput: Swift.Sendable {
    /// A collection of properties for each game session that matches the request.
    public var gameSessionDetails: [GameLiftClientTypes.GameSessionDetail]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameSessionDetails: [GameLiftClientTypes.GameSessionDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessionDetails = gameSessionDetails
        self.nextToken = nextToken
    }
}

public struct DescribeGameSessionPlacementInput: Swift.Sendable {
    /// A unique identifier for a game session placement to retrieve.
    /// This member is required.
    public var placementId: Swift.String?

    public init(
        placementId: Swift.String? = nil
    )
    {
        self.placementId = placementId
    }
}

extension GameLiftClientTypes {

    /// Information about a player session. This object contains only the player ID and player session ID. To retrieve full details on a player session, call [DescribePlayerSessions](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribePlayerSessions.html) with the player session ID.
    public struct PlacedPlayerSession: Swift.Sendable {
        /// A unique identifier for a player that is associated with this player session.
        public var playerId: Swift.String?
        /// A unique identifier for a player session.
        public var playerSessionId: Swift.String?

        public init(
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil
        )
        {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }
    }
}

extension GameLiftClientTypes.PlacedPlayerSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlacedPlayerSession(playerSessionId: \(Swift.String(describing: playerSessionId)), playerId: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    /// Regional latency information for a player, used when requesting a new game session. This value indicates the amount of time lag that exists when the player is connected to a fleet in the specified Region. The relative difference between a player's latency values for multiple Regions are used to determine which fleets are best suited to place a new game session for the player.
    public struct PlayerLatency: Swift.Sendable {
        /// Amount of time that represents the time lag experienced by the player when connected to the specified Region.
        public var latencyInMilliseconds: Swift.Float?
        /// A unique identifier for a player associated with the latency data.
        public var playerId: Swift.String?
        /// Name of the Region that is associated with the latency value.
        public var regionIdentifier: Swift.String?

        public init(
            latencyInMilliseconds: Swift.Float? = nil,
            playerId: Swift.String? = nil,
            regionIdentifier: Swift.String? = nil
        )
        {
            self.latencyInMilliseconds = latencyInMilliseconds
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
        }
    }
}

extension GameLiftClientTypes.PlayerLatency: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PlayerLatency(latencyInMilliseconds: \(Swift.String(describing: latencyInMilliseconds)), regionIdentifier: \(Swift.String(describing: regionIdentifier)), playerId: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum GameSessionPlacementState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case fulfilled
        case pending
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionPlacementState] {
            return [
                .cancelled,
                .failed,
                .fulfilled,
                .pending,
                .timedOut
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .fulfilled: return "FULFILLED"
            case .pending: return "PENDING"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Represents a potential game session placement, including the full details of the original placement request and the current status. If the game session placement status is PENDING, the properties for game session ID/ARN, region, IP address/DNS, and port aren't final. A game session is not active and ready to accept players until placement status reaches FULFILLED. When the placement is in PENDING status, Amazon GameLift may attempt to place a game session multiple times before succeeding. With each attempt it creates a [GameSession] object and updates this placement object with the new game session properties..
    public struct GameSessionPlacement: Swift.Sendable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public var endTime: Foundation.Date?
        /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}.
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// Identifier for the game session created by this placement request. This identifier is unique across all Regions. This value isn't final until placement status is FULFILLED.
        public var gameSessionArn: Swift.String?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. This value isn't final until placement status is FULFILLED.
        public var gameSessionId: Swift.String?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var gameSessionName: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var gameSessionQueueName: Swift.String?
        /// Name of the Region where the game session created by this placement request is running. This value isn't final until placement status is FULFILLED.
        public var gameSessionRegion: Swift.String?
        /// The IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value isn't final until placement status is FULFILLED.
        public var ipAddress: Swift.String?
        /// Information on the matchmaking process for this game. Data is in JSON syntax, formatted as a string. It identifies the matchmaking configuration used to create the match, and contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A collection of information on player sessions created in response to the game session placement request. These player sessions are created only after a new game session is successfully placed (placement status is FULFILLED). This information includes the player ID, provided in the placement request, and a corresponding player session ID.
        public var placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]?
        /// A unique identifier for a game session placement.
        public var placementId: Swift.String?
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to Amazon Web Services Regions.
        public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?
        /// The port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value isn't final until placement status is FULFILLED.
        public var port: Swift.Int?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var startTime: Foundation.Date?
        /// Current status of the game session placement request.
        ///
        /// * PENDING -- The placement request is in the queue waiting to be processed. Game session properties are not yet final.
        ///
        /// * FULFILLED -- A new game session has been successfully placed. Game session properties are now final.
        ///
        /// * CANCELLED -- The placement request was canceled.
        ///
        /// * TIMED_OUT -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.
        ///
        /// * FAILED -- Amazon GameLift is not able to complete the process of placing the game session. Common reasons are the game session terminated before the placement process was completed, or an unexpected internal error.
        public var status: GameLiftClientTypes.GameSessionPlacementState?

        public init(
            dnsName: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionArn: Swift.String? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            gameSessionName: Swift.String? = nil,
            gameSessionQueueName: Swift.String? = nil,
            gameSessionRegion: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]? = nil,
            placementId: Swift.String? = nil,
            playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil,
            port: Swift.Int? = nil,
            startTime: Foundation.Date? = nil,
            status: GameLiftClientTypes.GameSessionPlacementState? = nil
        )
        {
            self.dnsName = dnsName
            self.endTime = endTime
            self.gameProperties = gameProperties
            self.gameSessionArn = gameSessionArn
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.gameSessionRegion = gameSessionRegion
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placedPlayerSessions = placedPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.port = port
            self.startTime = startTime
            self.status = status
        }
    }
}

extension GameLiftClientTypes.GameSessionPlacement: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GameSessionPlacement(dnsName: \(Swift.String(describing: dnsName)), endTime: \(Swift.String(describing: endTime)), gameProperties: \(Swift.String(describing: gameProperties)), gameSessionArn: \(Swift.String(describing: gameSessionArn)), gameSessionData: \(Swift.String(describing: gameSessionData)), gameSessionId: \(Swift.String(describing: gameSessionId)), gameSessionName: \(Swift.String(describing: gameSessionName)), gameSessionQueueName: \(Swift.String(describing: gameSessionQueueName)), gameSessionRegion: \(Swift.String(describing: gameSessionRegion)), matchmakerData: \(Swift.String(describing: matchmakerData)), maximumPlayerSessionCount: \(Swift.String(describing: maximumPlayerSessionCount)), placedPlayerSessions: \(Swift.String(describing: placedPlayerSessions)), placementId: \(Swift.String(describing: placementId)), playerLatencies: \(Swift.String(describing: playerLatencies)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), ipAddress: \"CONTENT_REDACTED\", port: \"CONTENT_REDACTED\")"}
}

public struct DescribeGameSessionPlacementOutput: Swift.Sendable {
    /// Object that describes the requested game session placement.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init(
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

public struct DescribeGameSessionQueuesInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. You can request up to 50 results.
    public var limit: Swift.Int?
    /// A list of queue names to retrieve information for. You can use either the queue ID or ARN value. To request settings for all queues, leave this parameter empty.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

public struct DescribeGameSessionQueuesOutput: Swift.Sendable {
    /// A collection of objects that describe the requested game session queues.
    public var gameSessionQueues: [GameLiftClientTypes.GameSessionQueue]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameSessionQueues: [GameLiftClientTypes.GameSessionQueue]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessionQueues = gameSessionQueues
        self.nextToken = nextToken
    }
}

public struct DescribeGameSessionsInput: Swift.Sendable {
    /// A unique identifier for the alias associated with the fleet to retrieve game sessions for. You can use either the alias ID or ARN value.
    public var aliasId: Swift.String?
    /// A unique identifier for the fleet to retrieve game sessions for. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?
    /// A unique identifier for the game session to retrieve.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A fleet location to get game sessions for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Game session status to filter results on. You can filter on the following states: ACTIVE, TERMINATED, ACTIVATING, and TERMINATING. The last two are transitory and used for only very brief periods of time.
    public var statusFilter: Swift.String?

    public init(
        aliasId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

public struct DescribeGameSessionsOutput: Swift.Sendable {
    /// A collection of properties for each game session that matches the request.
    public var gameSessions: [GameLiftClientTypes.GameSession]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameSessions: [GameLiftClientTypes.GameSession]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

public struct DescribeInstancesInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve instance information for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
    public var instanceId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The name of a location to retrieve instance information for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    public enum InstanceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case pending
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStatus] {
            return [
                .active,
                .pending,
                .terminating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pending: return "PENDING"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Represents a virtual computing instance that runs game server processes and hosts game sessions. In Amazon GameLift, one or more instances make up a managed EC2 fleet.
    public struct Instance: Swift.Sendable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: Foundation.Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon Elastic Compute Cloud Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the instance belongs to.
        public var fleetId: Swift.String?
        /// A unique identifier for the instance.
        public var instanceId: Swift.String?
        /// IP address that is assigned to the instance.
        public var ipAddress: Swift.String?
        /// The fleet location of the instance, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?
        /// Operating system that is running on this EC2 instance. Amazon Linux 2 (AL2) will reach end of support on 6/30/2025. See more details in the [Amazon Linux 2 FAQs](https://aws.amazon.com/amazon-linux-2/faqs/). For game servers that are hosted on AL2 and use Amazon GameLift server SDK 4.x., first update the game server build to server SDK 5.x, and then deploy to AL2023 instances. See [ Migrate to Amazon GameLift server SDK version 5.](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk5-migration.html)
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// Current status of the instance. Possible statuses include the following:
        ///
        /// * PENDING -- The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration.
        ///
        /// * ACTIVE -- The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.
        ///
        /// * TERMINATING -- The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.
        public var status: GameLiftClientTypes.InstanceStatus?
        /// EC2 instance type that defines the computing resources of this instance.
        public var type: GameLiftClientTypes.EC2InstanceType?

        public init(
            creationTime: Foundation.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            status: GameLiftClientTypes.InstanceStatus? = nil,
            type: GameLiftClientTypes.EC2InstanceType? = nil
        )
        {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.location = location
            self.operatingSystem = operatingSystem
            self.status = status
            self.type = type
        }
    }
}

extension GameLiftClientTypes.Instance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Instance(creationTime: \(Swift.String(describing: creationTime)), dnsName: \(Swift.String(describing: dnsName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), instanceId: \(Swift.String(describing: instanceId)), location: \(Swift.String(describing: location)), operatingSystem: \(Swift.String(describing: operatingSystem)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)), ipAddress: \"CONTENT_REDACTED\")"}
}

public struct DescribeInstancesOutput: Swift.Sendable {
    /// A collection of objects containing properties for each instance returned.
    public var instances: [GameLiftClientTypes.Instance]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        instances: [GameLiftClientTypes.Instance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
    }
}

public struct DescribeMatchmakingInput: Swift.Sendable {
    /// A unique identifier for a matchmaking ticket. You can include up to 10 ID values.
    /// This member is required.
    public var ticketIds: [Swift.String]?

    public init(
        ticketIds: [Swift.String]? = nil
    )
    {
        self.ticketIds = ticketIds
    }
}

extension GameLiftClientTypes {

    /// Represents a new player session that is created as a result of a successful FlexMatch match. A successful match automatically creates new player sessions for every player ID in the original matchmaking request. When players connect to the match's game session, they must include both player ID and player session ID in order to claim their assigned player slot.
    public struct MatchedPlayerSession: Swift.Sendable {
        /// A unique identifier for a player
        public var playerId: Swift.String?
        /// A unique identifier for a player session
        public var playerSessionId: Swift.String?

        public init(
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil
        )
        {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }
    }
}

extension GameLiftClientTypes.MatchedPlayerSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MatchedPlayerSession(playerSessionId: \(Swift.String(describing: playerSessionId)), playerId: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    /// Connection information for a new game session that is created in response to a start matchmaking request. Once a match is made, the FlexMatch engine creates a new game session for it. This information, including the game session endpoint and player sessions for each player in the original matchmaking request, is added to the matchmaking ticket.
    public struct GameSessionConnectionInfo: Swift.Sendable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// A unique identifier for the game session. Use the game session ID.
        public var gameSessionArn: Swift.String?
        /// The IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// A collection of player session IDs, one for each player ID that was included in the original matchmaking request.
        public var matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]?
        /// The port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?

        public init(
            dnsName: Swift.String? = nil,
            gameSessionArn: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]? = nil,
            port: Swift.Int? = nil
        )
        {
            self.dnsName = dnsName
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.matchedPlayerSessions = matchedPlayerSessions
            self.port = port
        }
    }
}

extension GameLiftClientTypes.GameSessionConnectionInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GameSessionConnectionInfo(dnsName: \(Swift.String(describing: dnsName)), gameSessionArn: \(Swift.String(describing: gameSessionArn)), matchedPlayerSessions: \(Swift.String(describing: matchedPlayerSessions)), port: \(Swift.String(describing: port)), ipAddress: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    /// Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed.
    public struct Player: Swift.Sendable {
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions. If this property is present, FlexMatch considers placing the match only in Regions for which latency is reported. If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no Regions are available to the player and the ticket is not matchable.
        public var latencyInMs: [Swift.String: Swift.Int]?
        /// A collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the playerAttributes used in a matchmaking rule set. Example: "PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}. You can provide up to 10 PlayerAttributes.
        public var playerAttributes: [Swift.String: GameLiftClientTypes.AttributeValue]?
        /// A unique identifier for a player
        public var playerId: Swift.String?
        /// Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
        public var team: Swift.String?

        public init(
            latencyInMs: [Swift.String: Swift.Int]? = nil,
            playerAttributes: [Swift.String: GameLiftClientTypes.AttributeValue]? = nil,
            playerId: Swift.String? = nil,
            team: Swift.String? = nil
        )
        {
            self.latencyInMs = latencyInMs
            self.playerAttributes = playerAttributes
            self.playerId = playerId
            self.team = team
        }
    }
}

extension GameLiftClientTypes.Player: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Player(latencyInMs: \(Swift.String(describing: latencyInMs)), playerAttributes: \(Swift.String(describing: playerAttributes)), team: \(Swift.String(describing: team)), playerId: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {

    public enum MatchmakingConfigurationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case failed
        case placing
        case queued
        case requiresAcceptance
        case searching
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [MatchmakingConfigurationStatus] {
            return [
                .cancelled,
                .completed,
                .failed,
                .placing,
                .queued,
                .requiresAcceptance,
                .searching,
                .timedOut
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .placing: return "PLACING"
            case .queued: return "QUEUED"
            case .requiresAcceptance: return "REQUIRES_ACCEPTANCE"
            case .searching: return "SEARCHING"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Ticket generated to track the progress of a matchmaking request. Each ticket is uniquely identified by a ticket ID, supplied by the requester, when creating a matchmaking request.
    public struct MatchmakingTicket: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift matchmaking configuration resource that is used with this ticket.
        public var configurationArn: Swift.String?
        /// Name of the matchmaking configuration that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.
        public var configurationName: Swift.String?
        /// Time stamp indicating when the matchmaking request stopped being processed due to successful completion, timeout, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var endTime: Foundation.Date?
        /// Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.
        public var estimatedWaitTime: Swift.Int?
        /// Connection information for a new game session. Once a match is made, the FlexMatch engine creates a new game session for it. This information is added to the matchmaking ticket, which you can be retrieve by calling [DescribeMatchmaking](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeMatchmaking.html) .
        public var gameSessionConnectionInfo: GameLiftClientTypes.GameSessionConnectionInfo?
        /// A set of Player objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status COMPLETED, the Player objects include the team the players were assigned to in the resulting match.
        public var players: [GameLiftClientTypes.Player]?
        /// Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var startTime: Foundation.Date?
        /// Current status of the matchmaking request.
        ///
        /// * QUEUED -- The matchmaking request has been received and is currently waiting to be processed.
        ///
        /// * SEARCHING -- The matchmaking request is currently being processed.
        ///
        /// * REQUIRES_ACCEPTANCE -- A match has been proposed and the players must accept the match. This status is used only with requests that use a matchmaking configuration with a player acceptance requirement.
        ///
        /// * PLACING -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match.
        ///
        /// * COMPLETED -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players.
        ///
        /// * FAILED -- The matchmaking request was not completed.
        ///
        /// * CANCELLED -- The matchmaking request was canceled. This may be the result of a StopMatchmaking operation or a proposed match that one or more players failed to accept.
        ///
        /// * TIMED_OUT -- The matchmaking request was not successful within the duration specified in the matchmaking configuration.
        ///
        ///
        /// Matchmaking requests that fail to successfully complete (statuses FAILED, CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket IDs.
        public var status: GameLiftClientTypes.MatchmakingConfigurationStatus?
        /// Additional information about the current status.
        public var statusMessage: Swift.String?
        /// Code to explain the current status. For example, a status reason may indicate when a ticket has returned to SEARCHING status after a proposed match fails to receive player acceptances.
        public var statusReason: Swift.String?
        /// A unique identifier for a matchmaking ticket.
        public var ticketId: Swift.String?

        public init(
            configurationArn: Swift.String? = nil,
            configurationName: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            estimatedWaitTime: Swift.Int? = nil,
            gameSessionConnectionInfo: GameLiftClientTypes.GameSessionConnectionInfo? = nil,
            players: [GameLiftClientTypes.Player]? = nil,
            startTime: Foundation.Date? = nil,
            status: GameLiftClientTypes.MatchmakingConfigurationStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusReason: Swift.String? = nil,
            ticketId: Swift.String? = nil
        )
        {
            self.configurationArn = configurationArn
            self.configurationName = configurationName
            self.endTime = endTime
            self.estimatedWaitTime = estimatedWaitTime
            self.gameSessionConnectionInfo = gameSessionConnectionInfo
            self.players = players
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
            self.statusReason = statusReason
            self.ticketId = ticketId
        }
    }
}

public struct DescribeMatchmakingOutput: Swift.Sendable {
    /// A collection of existing matchmaking ticket objects matching the request.
    public var ticketList: [GameLiftClientTypes.MatchmakingTicket]?

    public init(
        ticketList: [GameLiftClientTypes.MatchmakingTicket]? = nil
    )
    {
        self.ticketList = ticketList
    }
}

public struct DescribeMatchmakingConfigurationsInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is limited to 10.
    public var limit: Swift.Int?
    /// A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.
    public var ruleSetName: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
        self.ruleSetName = ruleSetName
    }
}

public struct DescribeMatchmakingConfigurationsOutput: Swift.Sendable {
    /// A collection of requested matchmaking configurations.
    public var configurations: [GameLiftClientTypes.MatchmakingConfiguration]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        configurations: [GameLiftClientTypes.MatchmakingConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurations = configurations
        self.nextToken = nextToken
    }
}

public struct DescribeMatchmakingRuleSetsInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A list of one or more matchmaking rule set names to retrieve details for. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

public struct DescribeMatchmakingRuleSetsOutput: Swift.Sendable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of requested matchmaking rule set objects.
    /// This member is required.
    public var ruleSets: [GameLiftClientTypes.MatchmakingRuleSet]?

    public init(
        nextToken: Swift.String? = nil,
        ruleSets: [GameLiftClientTypes.MatchmakingRuleSet]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

public struct DescribePlayerSessionsInput: Swift.Sendable {
    /// A unique identifier for the game session to retrieve player sessions for.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
    public var nextToken: Swift.String?
    /// A unique identifier for a player to retrieve player sessions for.
    public var playerId: Swift.String?
    /// A unique identifier for a player session to retrieve.
    public var playerSessionId: Swift.String?
    /// Player session status to filter results on. Note that when a PlayerSessionId or PlayerId is provided in a DescribePlayerSessions request, then the PlayerSessionStatusFilter has no effect on the response. Possible player session statuses include the following:
    ///
    /// * RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.
    ///
    /// * ACTIVE -- The player has been validated by the server process and is currently connected.
    ///
    /// * COMPLETED -- The player connection has been dropped.
    ///
    /// * TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
    public var playerSessionStatusFilter: Swift.String?

    public init(
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        playerId: Swift.String? = nil,
        playerSessionId: Swift.String? = nil,
        playerSessionStatusFilter: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.nextToken = nextToken
        self.playerId = playerId
        self.playerSessionId = playerSessionId
        self.playerSessionStatusFilter = playerSessionStatusFilter
    }
}

extension DescribePlayerSessionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePlayerSessionsInput(gameSessionId: \(Swift.String(describing: gameSessionId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), playerSessionId: \(Swift.String(describing: playerSessionId)), playerSessionStatusFilter: \(Swift.String(describing: playerSessionStatusFilter)), playerId: \"CONTENT_REDACTED\")"}
}

public struct DescribePlayerSessionsOutput: Swift.Sendable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of objects containing properties for each player session that matches the request.
    public var playerSessions: [GameLiftClientTypes.PlayerSession]?

    public init(
        nextToken: Swift.String? = nil,
        playerSessions: [GameLiftClientTypes.PlayerSession]? = nil
    )
    {
        self.nextToken = nextToken
        self.playerSessions = playerSessions
    }
}

public struct DescribeRuntimeConfigurationInput: Swift.Sendable {
    /// A unique identifier for the fleet to get the runtime configuration for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

public struct DescribeRuntimeConfigurationOutput: Swift.Sendable {
    /// Instructions that describe how server processes are launched and maintained on computes in the fleet.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init(
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

extension GameLiftClientTypes {

    public enum ScalingStatusType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleted
        case deleteRequested
        case deleting
        case error
        case updateRequested
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingStatusType] {
            return [
                .active,
                .deleted,
                .deleteRequested,
                .deleting,
                .error,
                .updateRequested,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleteRequested: return "DELETE_REQUESTED"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .updateRequested: return "UPDATE_REQUESTED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeScalingPoliciesInput: Swift.Sendable {
    /// A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.
    ///
    /// * ACTIVE -- The scaling policy is currently in force.
    ///
    /// * UPDATEREQUESTED -- A request to update the scaling policy has been received.
    ///
    /// * UPDATING -- A change is being made to the scaling policy.
    ///
    /// * DELETEREQUESTED -- A request to delete the scaling policy has been received.
    ///
    /// * DELETING -- The scaling policy is being deleted.
    ///
    /// * DELETED -- The scaling policy has been deleted.
    ///
    /// * ERROR -- An error occurred in creating the policy. It should be removed and recreated.
    public var statusFilter: GameLiftClientTypes.ScalingStatusType?

    public init(
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: GameLiftClientTypes.ScalingStatusType? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

extension GameLiftClientTypes {

    public enum MetricName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activatinggamesessions
        case activegamesessions
        case activeinstances
        case availablegamesessions
        case availableplayersessions
        case concurrentactivatablegamesessions
        case currentplayersessions
        case idleinstances
        case percentavailablegamesessions
        case percentidleinstances
        case queuedepth
        case waittime
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .activatinggamesessions,
                .activegamesessions,
                .activeinstances,
                .availablegamesessions,
                .availableplayersessions,
                .concurrentactivatablegamesessions,
                .currentplayersessions,
                .idleinstances,
                .percentavailablegamesessions,
                .percentidleinstances,
                .queuedepth,
                .waittime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activatinggamesessions: return "ActivatingGameSessions"
            case .activegamesessions: return "ActiveGameSessions"
            case .activeinstances: return "ActiveInstances"
            case .availablegamesessions: return "AvailableGameSessions"
            case .availableplayersessions: return "AvailablePlayerSessions"
            case .concurrentactivatablegamesessions: return "ConcurrentActivatableGameSessions"
            case .currentplayersessions: return "CurrentPlayerSessions"
            case .idleinstances: return "IdleInstances"
            case .percentavailablegamesessions: return "PercentAvailableGameSessions"
            case .percentidleinstances: return "PercentIdleInstances"
            case .queuedepth: return "QueueDepth"
            case .waittime: return "WaitTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum PolicyType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rulebased
        case targetbased
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .rulebased,
                .targetbased
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rulebased: return "RuleBased"
            case .targetbased: return "TargetBased"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    public enum ScalingAdjustmentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case changeincapacity
        case exactcapacity
        case percentchangeincapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingAdjustmentType] {
            return [
                .changeincapacity,
                .exactcapacity,
                .percentchangeincapacity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .changeincapacity: return "ChangeInCapacity"
            case .exactcapacity: return "ExactCapacity"
            case .percentchangeincapacity: return "PercentChangeInCapacity"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension GameLiftClientTypes {

    /// Settings for a target-based scaling policy. A target-based policy tracks a particular fleet metric specifies a target value for the metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so that the metric returns to the target value. The target configuration specifies settings as needed for the target based policy, including the target value.
    public struct TargetConfiguration: Swift.Sendable {
        /// Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            targetValue: Swift.Double? = nil
        )
        {
            self.targetValue = targetValue
        }
    }
}

extension GameLiftClientTypes {

    /// Rule that controls how a fleet is scaled. Scaling policies are uniquely identified by the combination of name and fleet ID.
    public struct ScalingPolicy: Swift.Sendable {
        /// Comparison operator to use when measuring a metric against the threshold value.
        public var comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public var evaluationPeriods: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that is associated with this scaling policy.
        public var fleetId: Swift.String?
        /// The fleet location.
        public var location: Swift.String?
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).
        ///
        /// * ActivatingGameSessions -- Game sessions in the process of being created.
        ///
        /// * ActiveGameSessions -- Game sessions that are currently running.
        ///
        /// * ActiveInstances -- Fleet instances that are currently running at least one game session.
        ///
        /// * AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.
        ///
        /// * AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.
        ///
        /// * CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.
        ///
        /// * IdleInstances -- Active instances that are currently hosting zero game sessions.
        ///
        /// * PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.
        ///
        /// * PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.
        ///
        /// * QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        ///
        /// * WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        public var metricName: GameLiftClientTypes.MetricName?
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
        public var name: Swift.String?
        /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public var policyType: GameLiftClientTypes.PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public var scalingAdjustment: Swift.Int?
        /// The type of adjustment to make to a fleet's instance count.
        ///
        /// * ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.
        ///
        /// * ExactCapacity -- set the instance count to the scaling adjustment value.
        ///
        /// * PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.
        public var scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
        /// Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets. If the policy is suspended for a fleet, the policy status does not change.
        ///
        /// * ACTIVE -- The scaling policy can be used for auto-scaling a fleet.
        ///
        /// * UPDATE_REQUESTED -- A request to update the scaling policy has been received.
        ///
        /// * UPDATING -- A change is being made to the scaling policy.
        ///
        /// * DELETE_REQUESTED -- A request to delete the scaling policy has been received.
        ///
        /// * DELETING -- The scaling policy is being deleted.
        ///
        /// * DELETED -- The scaling policy has been deleted.
        ///
        /// * ERROR -- An error occurred in creating the policy. It should be removed and recreated.
        public var status: GameLiftClientTypes.ScalingStatusType?
        /// An object that contains settings for a target-based scaling policy.
        public var targetConfiguration: GameLiftClientTypes.TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public var threshold: Swift.Double?
        /// The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
        public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

        public init(
            comparisonOperator: GameLiftClientTypes.ComparisonOperatorType? = nil,
            evaluationPeriods: Swift.Int? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            location: Swift.String? = nil,
            metricName: GameLiftClientTypes.MetricName? = nil,
            name: Swift.String? = nil,
            policyType: GameLiftClientTypes.PolicyType? = nil,
            scalingAdjustment: Swift.Int? = nil,
            scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType? = nil,
            status: GameLiftClientTypes.ScalingStatusType? = nil,
            targetConfiguration: GameLiftClientTypes.TargetConfiguration? = nil,
            threshold: Swift.Double? = nil,
            updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.status = status
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
            self.updateStatus = updateStatus
        }
    }
}

public struct DescribeScalingPoliciesOutput: Swift.Sendable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of objects containing the scaling policies matching the request.
    public var scalingPolicies: [GameLiftClientTypes.ScalingPolicy]?

    public init(
        nextToken: Swift.String? = nil,
        scalingPolicies: [GameLiftClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

public struct DescribeScriptInput: Swift.Sendable {
    /// A unique identifier for the Realtime script to retrieve properties for. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?

    public init(
        scriptId: Swift.String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

public struct DescribeScriptOutput: Swift.Sendable {
    /// A set of properties describing the requested script.
    public var script: GameLiftClientTypes.Script?

    public init(
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

public struct DescribeVpcPeeringAuthorizationsInput: Swift.Sendable {

    public init() { }
}

public struct DescribeVpcPeeringAuthorizationsOutput: Swift.Sendable {
    /// A collection of objects that describe all valid VPC peering operations for the current Amazon Web Services account.
    public var vpcPeeringAuthorizations: [GameLiftClientTypes.VpcPeeringAuthorization]?

    public init(
        vpcPeeringAuthorizations: [GameLiftClientTypes.VpcPeeringAuthorization]? = nil
    )
    {
        self.vpcPeeringAuthorizations = vpcPeeringAuthorizations
    }
}

public struct DescribeVpcPeeringConnectionsInput: Swift.Sendable {
    /// A unique identifier for the fleet. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?

    public init(
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

extension GameLiftClientTypes {

    /// Represents status information for a VPC peering connection. Status codes and messages are provided from EC2 (see [VpcPeeringConnectionStateReason](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpcPeeringConnectionStateReason.html)). Connection status information is also communicated as a fleet event.
    public struct VpcPeeringConnectionStatus: Swift.Sendable {
        /// Code indicating the status of a VPC peering connection.
        public var code: Swift.String?
        /// Additional messaging associated with the connection status.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension GameLiftClientTypes {

    /// Represents a peering connection between a VPC on one of your Amazon Web Services accounts and the VPC for your Amazon GameLift fleets. This record may be for an active peering connection or a pending connection that has not yet been established. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct VpcPeeringConnection: Swift.Sendable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet resource for this connection.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.
        public var fleetId: Swift.String?
        /// A unique identifier for the VPC that contains the Amazon GameLift fleet for this connection. This VPC is managed by Amazon GameLift and does not appear in your Amazon Web Services account.
        public var gameLiftVpcId: Swift.String?
        /// CIDR block of IPv4 addresses assigned to the VPC peering connection for the GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these blocks cannot overlap or the peering connection cannot be created.
        public var ipV4CidrBlock: Swift.String?
        /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with Amazon GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
        public var peerVpcId: Swift.String?
        /// The status information about the connection. Status indicates if a connection is pending, successful, or failed.
        public var status: GameLiftClientTypes.VpcPeeringConnectionStatus?
        /// A unique identifier that is automatically assigned to the connection record. This ID is referenced in VPC peering connection events, and is used when deleting a connection.
        public var vpcPeeringConnectionId: Swift.String?

        public init(
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameLiftVpcId: Swift.String? = nil,
            ipV4CidrBlock: Swift.String? = nil,
            peerVpcId: Swift.String? = nil,
            status: GameLiftClientTypes.VpcPeeringConnectionStatus? = nil,
            vpcPeeringConnectionId: Swift.String? = nil
        )
        {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameLiftVpcId = gameLiftVpcId
            self.ipV4CidrBlock = ipV4CidrBlock
            self.peerVpcId = peerVpcId
            self.status = status
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }
    }
}

public struct DescribeVpcPeeringConnectionsOutput: Swift.Sendable {
    /// A collection of VPC peering connection records that match the request.
    public var vpcPeeringConnections: [GameLiftClientTypes.VpcPeeringConnection]?

    public init(
        vpcPeeringConnections: [GameLiftClientTypes.VpcPeeringConnection]? = nil
    )
    {
        self.vpcPeeringConnections = vpcPeeringConnections
    }
}

extension GameLiftClientTypes {

    /// Player information for use when creating player sessions using a game session placement request.
    public struct DesiredPlayerSession: Swift.Sendable {
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public var playerData: Swift.String?
        /// A unique identifier for a player to associate with the player session.
        public var playerId: Swift.String?

        public init(
            playerData: Swift.String? = nil,
            playerId: Swift.String? = nil
        )
        {
            self.playerData = playerData
            self.playerId = playerId
        }
    }
}

extension GameLiftClientTypes.DesiredPlayerSession: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DesiredPlayerSession(playerData: \(Swift.String(describing: playerData)), playerId: \"CONTENT_REDACTED\")"}
}

public struct GetComputeAccessInput: Swift.Sendable {
    /// A unique identifier for the compute resource that you want to connect to. For an EC2 fleet compute, use the instance ID. For a container fleet, use the compute name (for example, a123b456c789012d3e4567f8a901b23c/1a234b56-7cd8-9e0f-a1b2-c34d567ef8a9) or the compute ARN.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet that holds the compute resource that you want to connect to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

public struct GetComputeAccessOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to an Amazon GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var computeArn: Swift.String?
    /// The identifier of the compute resource to be accessed. This value might be either a compute name or an instance ID.
    public var computeName: Swift.String?
    /// A set of temporary Amazon Web Services credentials for use when connecting to the compute resource with Amazon EC2 Systems Manager (SSM).
    public var credentials: GameLiftClientTypes.AwsCredentials?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// The ID of the fleet that holds the compute resource to be accessed.
    public var fleetId: Swift.String?
    /// (For container fleets only) The instance ID where the compute resource is running.
    public var target: Swift.String?

    public init(
        computeArn: Swift.String? = nil,
        computeName: Swift.String? = nil,
        credentials: GameLiftClientTypes.AwsCredentials? = nil,
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        target: Swift.String? = nil
    )
    {
        self.computeArn = computeArn
        self.computeName = computeName
        self.credentials = credentials
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.target = target
    }
}

extension GetComputeAccessOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComputeAccessOutput(computeArn: \(Swift.String(describing: computeArn)), computeName: \(Swift.String(describing: computeName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), target: \(Swift.String(describing: target)), credentials: \"CONTENT_REDACTED\")"}
}

public struct GetComputeAuthTokenInput: Swift.Sendable {
    /// The name of the compute resource you are requesting the authentication token for. For an Anywhere fleet compute, use the registered compute name. For an EC2 fleet instance, use the instance ID. For a container fleet, use the compute name (for example, a123b456c789012d3e4567f8a901b23c/1a234b56-7cd8-9e0f-a1b2-c34d567ef8a9) or the compute ARN.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet that the compute is registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init(
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

public struct GetComputeAuthTokenOutput: Swift.Sendable {
    /// A valid temporary authentication token.
    public var authToken: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to an Amazon GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var computeArn: Swift.String?
    /// The name of the compute resource that the authentication token is issued to.
    public var computeName: Swift.String?
    /// The amount of time until the authentication token is no longer valid.
    public var expirationTimestamp: Foundation.Date?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that the compute is registered to.
    public var fleetId: Swift.String?

    public init(
        authToken: Swift.String? = nil,
        computeArn: Swift.String? = nil,
        computeName: Swift.String? = nil,
        expirationTimestamp: Foundation.Date? = nil,
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.authToken = authToken
        self.computeArn = computeArn
        self.computeName = computeName
        self.expirationTimestamp = expirationTimestamp
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

public struct GetGameSessionLogUrlInput: Swift.Sendable {
    /// A unique identifier for the game session to get logs for.
    /// This member is required.
    public var gameSessionId: Swift.String?

    public init(
        gameSessionId: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
    }
}

public struct GetGameSessionLogUrlOutput: Swift.Sendable {
    /// Location of the requested game session logs, available for download. This URL is valid for 15 minutes, after which S3 will reject any download request using this URL. You can request a new URL any time within the 14-day period that the logs are retained.
    public var preSignedUrl: Swift.String?

    public init(
        preSignedUrl: Swift.String? = nil
    )
    {
        self.preSignedUrl = preSignedUrl
    }
}

public struct GetInstanceAccessInput: Swift.Sendable {
    /// A unique identifier for the fleet that contains the instance you want to access. You can request access to instances in EC2 fleets with the following statuses: ACTIVATING, ACTIVE, or ERROR. Use either a fleet ID or an ARN value. You can access fleets in ERROR status for a short period of time before Amazon GameLift deletes them.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for the instance you want to access. You can access an instance in any status.
    /// This member is required.
    public var instanceId: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
    }
}

extension GameLiftClientTypes {

    /// A set of credentials that allow remote access to an instance in an EC2 managed fleet. These credentials are returned in response to a call to [GetInstanceAccess], which requests access for instances that are running game servers with the Amazon GameLift server SDK version 4.x or earlier.
    public struct InstanceCredentials: Swift.Sendable {
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it's a private key for use with SSH.
        public var secret: Swift.String?
        /// A user name for logging in.
        public var userName: Swift.String?

        public init(
            secret: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.secret = secret
            self.userName = userName
        }
    }
}

extension GameLiftClientTypes.InstanceCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension GameLiftClientTypes {

    /// Information and credentials that you can use to remotely connect to an instance in an EC2 managed fleet. This data type is returned in response to a call to [GetInstanceAccess].
    public struct InstanceAccess: Swift.Sendable {
        /// Security credentials that are required to access the instance.
        public var credentials: GameLiftClientTypes.InstanceCredentials?
        /// A unique identifier for the fleet containing the instance to be accessed.
        public var fleetId: Swift.String?
        /// A unique identifier for the instance to be accessed.
        public var instanceId: Swift.String?
        /// IP address assigned to the instance.
        public var ipAddress: Swift.String?
        /// Operating system that is running on the instance.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?

        public init(
            credentials: GameLiftClientTypes.InstanceCredentials? = nil,
            fleetId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil
        )
        {
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
        }
    }
}

extension GameLiftClientTypes.InstanceAccess: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceAccess(fleetId: \(Swift.String(describing: fleetId)), instanceId: \(Swift.String(describing: instanceId)), operatingSystem: \(Swift.String(describing: operatingSystem)), credentials: \"CONTENT_REDACTED\", ipAddress: \"CONTENT_REDACTED\")"}
}

public struct GetInstanceAccessOutput: Swift.Sendable {
    /// The connection information for a fleet instance, including IP address and access credentials.
    public var instanceAccess: GameLiftClientTypes.InstanceAccess?

    public init(
        instanceAccess: GameLiftClientTypes.InstanceAccess? = nil
    )
    {
        self.instanceAccess = instanceAccess
    }
}

public struct ListAliasesInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    public var name: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// The routing type to filter results on. Use this parameter to retrieve only aliases with a certain routing type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:
    ///
    /// * SIMPLE -- The alias resolves to one specific fleet. Use this type when routing to active fleets.
    ///
    /// * TERMINAL -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the [RoutingStrategy](https://docs.aws.amazon.com/gamelift/latest/apireference/API_RoutingStrategy.html) message embedded.
    public var routingStrategyType: GameLiftClientTypes.RoutingStrategyType?

    public init(
        limit: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        routingStrategyType: GameLiftClientTypes.RoutingStrategyType? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextToken = nextToken
        self.routingStrategyType = routingStrategyType
    }
}

public struct ListAliasesOutput: Swift.Sendable {
    /// A collection of alias resources that match the request parameters.
    public var aliases: [GameLiftClientTypes.Alias]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        aliases: [GameLiftClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

public struct ListBuildsInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, don't specify a value.
    public var nextToken: Swift.String?
    /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:
    ///
    /// * INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.
    ///
    /// * READY -- The game build has been successfully uploaded. You can now create new fleets for this build.
    ///
    /// * FAILED -- The game build upload failed. You cannot create new fleets for this build.
    public var status: GameLiftClientTypes.BuildStatus?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: GameLiftClientTypes.BuildStatus? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.status = status
    }
}

public struct ListBuildsOutput: Swift.Sendable {
    /// A collection of build resources that match the request.
    public var builds: [GameLiftClientTypes.Build]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        builds: [GameLiftClientTypes.Build]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.builds = builds
        self.nextToken = nextToken
    }
}

public struct ListComputeInput: Swift.Sendable {
    /// A unique identifier for the fleet to retrieve compute resources for.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The name of a location to retrieve compute resources for. For an Amazon GameLift Anywhere fleet, use a custom location. For a multi-location EC2 or container fleet, provide a Amazon Web Services Region or Local Zone code (for example: us-west-2 or us-west-2-lax-1).
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
    }
}

public struct ListComputeOutput: Swift.Sendable {
    /// A list of compute resources in the specified fleet.
    public var computeList: [GameLiftClientTypes.Compute]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        computeList: [GameLiftClientTypes.Compute]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeList = computeList
        self.nextToken = nextToken
    }
}

public struct ListContainerGroupDefinitionsInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// The type of container group definitions to retrieve.
    ///
    /// * DAEMON -- Daemon container groups run background processes and are deployed once per fleet instance.
    ///
    /// * REPLICA -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.
    public var schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        schedulingStrategy: GameLiftClientTypes.ContainerSchedulingStrategy? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.schedulingStrategy = schedulingStrategy
    }
}

public struct ListContainerGroupDefinitionsOutput: Swift.Sendable {
    /// A result set of container group definitions that match the request.
    public var containerGroupDefinitions: [GameLiftClientTypes.ContainerGroupDefinition]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        containerGroupDefinitions: [GameLiftClientTypes.ContainerGroupDefinition]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.containerGroupDefinitions = containerGroupDefinitions
        self.nextToken = nextToken
    }
}

public struct ListFleetsInput: Swift.Sendable {
    /// A unique identifier for the build to request fleets for. Use this parameter to return only fleets using a specified build. Use either the build ID or ARN value.
    public var buildId: Swift.String?
    /// The container group definition name to request fleets for. Use this parameter to return only fleets that are deployed with the specified container group definition.
    public var containerGroupDefinitionName: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// A unique identifier for the Realtime script to request fleets for. Use this parameter to return only fleets using a specified script. Use either the script ID or ARN value.
    public var scriptId: Swift.String?

    public init(
        buildId: Swift.String? = nil,
        containerGroupDefinitionName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scriptId: Swift.String? = nil
    )
    {
        self.buildId = buildId
        self.containerGroupDefinitionName = containerGroupDefinitionName
        self.limit = limit
        self.nextToken = nextToken
        self.scriptId = scriptId
    }
}

public struct ListFleetsOutput: Swift.Sendable {
    /// A set of fleet IDs that match the list request.
    public var fleetIds: [Swift.String]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        fleetIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.nextToken = nextToken
    }
}

public struct ListGameServerGroupsInput: Swift.Sendable {
    /// The game server groups' limit.
    public var limit: Swift.Int?
    /// Specify the pagination token from a previous request to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct ListGameServerGroupsOutput: Swift.Sendable {
    /// The game server groups' game server groups.
    public var gameServerGroups: [GameLiftClientTypes.GameServerGroup]?
    /// Specify the pagination token from a previous request to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init(
        gameServerGroups: [GameLiftClientTypes.GameServerGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerGroups = gameServerGroups
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListGameServersInput: Swift.Sendable {
    /// An identifier for the game server group to retrieve a list of game servers from. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Indicates how to sort the returned data based on game server registration timestamp. Use ASCENDING to retrieve oldest game servers first, or use DESCENDING to retrieve newest game servers first. If this parameter is left empty, game servers are returned in no particular order.
    public var sortOrder: GameLiftClientTypes.SortOrder?

    public init(
        gameServerGroupName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: GameLiftClientTypes.SortOrder? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.limit = limit
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListGameServersOutput: Swift.Sendable {
    /// A collection of game server objects that match the request.
    public var gameServers: [GameLiftClientTypes.GameServer]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameServers: [GameLiftClientTypes.GameServer]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServers = gameServers
        self.nextToken = nextToken
    }
}

extension GameLiftClientTypes {

    public enum LocationFilter: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case custom
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationFilter] {
            return [
                .aws,
                .custom
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .custom: return "CUSTOM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListLocationsInput: Swift.Sendable {
    /// Filters the list for AWS or CUSTOM locations.
    public var filters: [GameLiftClientTypes.LocationFilter]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init(
        filters: [GameLiftClientTypes.LocationFilter]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct ListLocationsOutput: Swift.Sendable {
    /// A collection of locations.
    public var locations: [GameLiftClientTypes.LocationModel]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        locations: [GameLiftClientTypes.LocationModel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.locations = locations
        self.nextToken = nextToken
    }
}

public struct ListScriptsInput: Swift.Sendable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, don't specify a value.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct ListScriptsOutput: Swift.Sendable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A set of properties describing the requested script.
    public var scripts: [GameLiftClientTypes.Script]?

    public init(
        nextToken: Swift.String? = nil,
        scripts: [GameLiftClientTypes.Script]? = nil
    )
    {
        self.nextToken = nextToken
        self.scripts = scripts
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that uniquely identifies the Amazon GameLift resource that you want to retrieve tags for. Amazon GameLift includes resource ARNs in the data object for the resource. You can retrieve the ARN by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The collection of tags assigned to the resource.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutScalingPolicyInput: Swift.Sendable {
    /// Comparison operator to use when measuring the metric against the threshold value.
    public var comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
    /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
    public var evaluationPeriods: Swift.Int?
    /// A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.
    /// This member is required.
    public var fleetId: Swift.String?
    /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).
    ///
    /// * ActivatingGameSessions -- Game sessions in the process of being created.
    ///
    /// * ActiveGameSessions -- Game sessions that are currently running.
    ///
    /// * ActiveInstances -- Fleet instances that are currently running at least one game session.
    ///
    /// * AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.
    ///
    /// * AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.
    ///
    /// * CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.
    ///
    /// * IdleInstances -- Active instances that are currently hosting zero game sessions.
    ///
    /// * PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.
    ///
    /// * PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.
    ///
    /// * QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    ///
    /// * WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    /// This member is required.
    public var metricName: GameLiftClientTypes.MetricName?
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
    /// This member is required.
    public var name: Swift.String?
    /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
    public var policyType: GameLiftClientTypes.PolicyType?
    /// Amount of adjustment to make, based on the scaling adjustment type.
    public var scalingAdjustment: Swift.Int?
    /// The type of adjustment to make to a fleet's instance count:
    ///
    /// * ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.
    ///
    /// * ExactCapacity -- set the instance count to the scaling adjustment value.
    ///
    /// * PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.
    public var scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
    /// An object that contains settings for a target-based scaling policy.
    public var targetConfiguration: GameLiftClientTypes.TargetConfiguration?
    /// Metric value used to trigger a scaling event.
    public var threshold: Swift.Double?

    public init(
        comparisonOperator: GameLiftClientTypes.ComparisonOperatorType? = nil,
        evaluationPeriods: Swift.Int? = nil,
        fleetId: Swift.String? = nil,
        metricName: GameLiftClientTypes.MetricName? = nil,
        name: Swift.String? = nil,
        policyType: GameLiftClientTypes.PolicyType? = nil,
        scalingAdjustment: Swift.Int? = nil,
        scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType? = nil,
        targetConfiguration: GameLiftClientTypes.TargetConfiguration? = nil,
        threshold: Swift.Double? = nil
    )
    {
        self.comparisonOperator = comparisonOperator
        self.evaluationPeriods = evaluationPeriods
        self.fleetId = fleetId
        self.metricName = metricName
        self.name = name
        self.policyType = policyType
        self.scalingAdjustment = scalingAdjustment
        self.scalingAdjustmentType = scalingAdjustmentType
        self.targetConfiguration = targetConfiguration
        self.threshold = threshold
    }
}

public struct PutScalingPolicyOutput: Swift.Sendable {
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct RegisterComputeInput: Swift.Sendable {
    /// The path to a TLS certificate on your compute resource. Amazon GameLift doesn't validate the path and certificate.
    public var certificatePath: Swift.String?
    /// A descriptive label for the compute resource.
    /// This member is required.
    public var computeName: Swift.String?
    /// The DNS name of the compute resource. Amazon GameLift requires either a DNS name or IP address.
    public var dnsName: Swift.String?
    /// A unique identifier for the fleet to register the compute to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The IP address of the compute resource. Amazon GameLift requires either a DNS name or IP address. When registering an Anywhere fleet, an IP address is required.
    public var ipAddress: Swift.String?
    /// The name of a custom location to associate with the compute resource being registered. This parameter is required when registering a compute for an Anywhere fleet.
    public var location: Swift.String?

    public init(
        certificatePath: Swift.String? = nil,
        computeName: Swift.String? = nil,
        dnsName: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        ipAddress: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.certificatePath = certificatePath
        self.computeName = computeName
        self.dnsName = dnsName
        self.fleetId = fleetId
        self.ipAddress = ipAddress
        self.location = location
    }
}

extension RegisterComputeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterComputeInput(certificatePath: \(Swift.String(describing: certificatePath)), computeName: \(Swift.String(describing: computeName)), dnsName: \(Swift.String(describing: dnsName)), fleetId: \(Swift.String(describing: fleetId)), location: \(Swift.String(describing: location)), ipAddress: \"CONTENT_REDACTED\")"}
}

public struct RegisterComputeOutput: Swift.Sendable {
    /// The details of the compute resource you registered.
    public var compute: GameLiftClientTypes.Compute?

    public init(
        compute: GameLiftClientTypes.Compute? = nil
    )
    {
        self.compute = compute
    }
}

public struct RegisterGameServerInput: Swift.Sendable {
    /// Information that is needed to make inbound client connections to the game server. This might include the IP address and port, DNS name, and other information.
    public var connectionInfo: Swift.String?
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to register. Game server IDs are developer-defined and must be unique across all game server groups in your Amazon Web Services account.
    /// This member is required.
    public var gameServerId: Swift.String?
    /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
    /// This member is required.
    public var instanceId: Swift.String?

    public init(
        connectionInfo: Swift.String? = nil,
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.connectionInfo = connectionInfo
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.instanceId = instanceId
    }
}

public struct RegisterGameServerOutput: Swift.Sendable {
    /// Object that describes the newly registered game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init(
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

public struct RequestUploadCredentialsInput: Swift.Sendable {
    /// A unique identifier for the build to get credentials for. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init(
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

public struct RequestUploadCredentialsOutput: Swift.Sendable {
    /// Amazon S3 path and key, identifying where the game build files are stored.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// Amazon Web Services credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
    public var uploadCredentials: GameLiftClientTypes.AwsCredentials?

    public init(
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        uploadCredentials: GameLiftClientTypes.AwsCredentials? = nil
    )
    {
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

extension RequestUploadCredentialsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestUploadCredentialsOutput(storageLocation: \(Swift.String(describing: storageLocation)), uploadCredentials: \"CONTENT_REDACTED\")"}
}

public struct ResolveAliasInput: Swift.Sendable {
    /// The unique identifier of the alias that you want to retrieve a fleet ID for. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init(
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

public struct ResolveAliasOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet resource that this alias points to.
    public var fleetArn: Swift.String?
    /// The fleet identifier that the alias is pointing to.
    public var fleetId: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

public struct ResumeGameServerGroupInput: Swift.Sendable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The activity to resume for this game server group.
    /// This member is required.
    public var resumeActions: [GameLiftClientTypes.GameServerGroupAction]?

    public init(
        gameServerGroupName: Swift.String? = nil,
        resumeActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.resumeActions = resumeActions
    }
}

public struct ResumeGameServerGroupOutput: Swift.Sendable {
    /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the resumed activity.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

public struct SearchGameSessionsInput: Swift.Sendable {
    /// A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var aliasId: Swift.String?
    /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:
    ///
    /// * Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.
    ///
    /// * Comparator -- Valid comparators are: =, <>, <, >, <=, >=.
    ///
    /// * Value -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and <>. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".
    ///
    ///
    /// To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:
    ///
    /// * =, <>, <, >, <=, >=
    ///
    /// * Parentheses
    ///
    /// * NOT
    ///
    /// * AND
    ///
    /// * OR
    ///
    ///
    /// For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions>=10 AND hasAvailablePlayerSessions=true".
    public var filterExpression: Swift.String?
    /// A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20.
    public var limit: Swift.Int?
    /// A fleet location to search for game sessions. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:
    ///
    /// * Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.
    ///
    /// * Order -- Valid sort orders are ASC (ascending) and DESC (descending).
    ///
    ///
    /// For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
    public var sortExpression: Swift.String?

    public init(
        aliasId: Swift.String? = nil,
        filterExpression: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortExpression: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.filterExpression = filterExpression
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.sortExpression = sortExpression
    }
}

public struct SearchGameSessionsOutput: Swift.Sendable {
    /// A collection of objects containing game session properties for each session that matches the request.
    public var gameSessions: [GameLiftClientTypes.GameSession]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init(
        gameSessions: [GameLiftClientTypes.GameSession]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

public struct StartFleetActionsInput: Swift.Sendable {
    /// List of actions to restart on the fleet.
    /// This member is required.
    public var actions: [GameLiftClientTypes.FleetAction]?
    /// A unique identifier for the fleet to restart actions on. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to restart fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init(
        actions: [GameLiftClientTypes.FleetAction]? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

public struct StartFleetActionsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet to restart actions on.
    public var fleetId: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

public struct StartGameSessionPlacementInput: Swift.Sendable {
    /// Set of information on each player to create a player session for.
    public var desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]?
    /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameSessionData: Swift.String?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var gameSessionName: Swift.String?
    /// Name of the queue to use to place the new game session. You can use either the queue name or ARN value.
    /// This member is required.
    public var gameSessionQueueName: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    /// This member is required.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all Regions and cannot be reused.
    /// This member is required.
    public var placementId: Swift.String?
    /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to Amazon Web Services Regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players.
    public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?

    public init(
        desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionName: Swift.String? = nil,
        gameSessionQueueName: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        placementId: Swift.String? = nil,
        playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil
    )
    {
        self.desiredPlayerSessions = desiredPlayerSessions
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placementId = placementId
        self.playerLatencies = playerLatencies
    }
}

public struct StartGameSessionPlacementOutput: Swift.Sendable {
    /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init(
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

public struct StartMatchBackfillInput: Swift.Sendable {
    /// Name of the matchmaker to use for this request. You can use either the configuration name or ARN value. The ARN of the matchmaker that was used with the original game session is listed in the GameSession object, MatchmakerData property.
    /// This member is required.
    public var configurationName: Swift.String?
    /// A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking solution, this parameter is not needed.
    public var gameSessionArn: Swift.String?
    /// Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game. You can include up to 199 Players in a StartMatchBackfill request.
    ///
    /// * PlayerID, PlayerAttributes, Team -- This information is maintained in the GameSession object, MatchmakerData property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see [ Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data). The backfill request must specify the team membership for every player. Do not specify team if you are not using backfill.
    ///
    /// * LatencyInMs -- If the matchmaker uses player latency, include a latency value, in milliseconds, for the Region that the game session is currently in. Do not include latency values for any other Region.
    /// This member is required.
    public var players: [GameLiftClientTypes.Player]?
    /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.
    public var ticketId: Swift.String?

    public init(
        configurationName: Swift.String? = nil,
        gameSessionArn: Swift.String? = nil,
        players: [GameLiftClientTypes.Player]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.configurationName = configurationName
        self.gameSessionArn = gameSessionArn
        self.players = players
        self.ticketId = ticketId
    }
}

public struct StartMatchBackfillOutput: Swift.Sendable {
    /// Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.
    public var matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?

    public init(
        matchmakingTicket: GameLiftClientTypes.MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

public struct StartMatchmakingInput: Swift.Sendable {
    /// Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value.
    /// This member is required.
    public var configurationName: Swift.String?
    /// Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, Player objects contain the name of the team the player is assigned to. You can include up to 10 Players in a StartMatchmaking request.
    /// This member is required.
    public var players: [GameLiftClientTypes.Player]?
    /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.
    public var ticketId: Swift.String?

    public init(
        configurationName: Swift.String? = nil,
        players: [GameLiftClientTypes.Player]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.configurationName = configurationName
        self.players = players
        self.ticketId = ticketId
    }
}

public struct StartMatchmakingOutput: Swift.Sendable {
    /// Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.
    public var matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?

    public init(
        matchmakingTicket: GameLiftClientTypes.MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

public struct StopFleetActionsInput: Swift.Sendable {
    /// List of actions to suspend on the fleet.
    /// This member is required.
    public var actions: [GameLiftClientTypes.FleetAction]?
    /// A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init(
        actions: [GameLiftClientTypes.FleetAction]? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

public struct StopFleetActionsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet to stop actions on.
    public var fleetId: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

public struct StopGameSessionPlacementInput: Swift.Sendable {
    /// A unique identifier for a game session placement to stop.
    /// This member is required.
    public var placementId: Swift.String?

    public init(
        placementId: Swift.String? = nil
    )
    {
        self.placementId = placementId
    }
}

public struct StopGameSessionPlacementOutput: Swift.Sendable {
    /// Object that describes the canceled game session placement, with CANCELLED status and an end time stamp.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init(
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

public struct StopMatchmakingInput: Swift.Sendable {
    /// A unique identifier for a matchmaking ticket.
    /// This member is required.
    public var ticketId: Swift.String?

    public init(
        ticketId: Swift.String? = nil
    )
    {
        self.ticketId = ticketId
    }
}

public struct StopMatchmakingOutput: Swift.Sendable {

    public init() { }
}

public struct SuspendGameServerGroupInput: Swift.Sendable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The activity to suspend for this game server group.
    /// This member is required.
    public var suspendActions: [GameLiftClientTypes.GameServerGroupAction]?

    public init(
        gameServerGroupName: Swift.String? = nil,
        suspendActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.suspendActions = suspendActions
    }
}

public struct SuspendGameServerGroupOutput: Swift.Sendable {
    /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the suspended activity.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that uniquely identifies the Amazon GameLift resource that you want to assign tags to. Amazon GameLift includes resource ARNs in the data object for the resource. You can retrieve the ARN by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of one or more tags to assign to the specified Amazon GameLift resource. Tags are developer-defined and structured as key-value pairs. The maximum tag limit may be lower than stated. See [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) for tagging limits.
    /// This member is required.
    public var tags: [GameLiftClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that uniquely identifies the Amazon GameLift resource that you want to remove tags from. Amazon GameLift includes resource ARNs in the data object for the resource. You can retrieve the ARN by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of one or more tag keys to remove from the specified Amazon GameLift resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAliasInput: Swift.Sendable {
    /// A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?
    /// A human-readable description of the alias.
    public var description: Swift.String?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    public var name: Swift.String?
    /// The routing configuration, including routing type and fleet target, for the alias.
    public var routingStrategy: GameLiftClientTypes.RoutingStrategy?

    public init(
        aliasId: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil
    )
    {
        self.aliasId = aliasId
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
    }
}

public struct UpdateAliasOutput: Swift.Sendable {
    /// The updated alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init(
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

public struct UpdateBuildInput: Swift.Sendable {
    /// A unique identifier for the build to update. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?
    /// A descriptive label associated with a build. Build names don't need to be unique.
    public var name: Swift.String?
    /// Version information associated with a build or script. Version strings don't need to be unique.
    public var version: Swift.String?

    public init(
        buildId: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.buildId = buildId
        self.name = name
        self.version = version
    }
}

public struct UpdateBuildOutput: Swift.Sendable {
    /// The updated build resource.
    public var build: GameLiftClientTypes.Build?

    public init(
        build: GameLiftClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

public struct UpdateFleetAttributesInput: Swift.Sendable {
    /// Amazon GameLift Anywhere configuration options.
    public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
    /// A human-readable description of a fleet.
    public var description: Swift.String?
    /// A unique identifier for the fleet to update attribute metadata for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The name of a metric group to add this fleet to. Use a metric group in Amazon CloudWatch to aggregate the metrics from multiple fleets. Provide an existing metric group name, or create a new metric group by providing a new name. A fleet can only be in one metric group at a time.
    public var metricGroups: [Swift.String]?
    /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    public var name: Swift.String?
    /// The game session protection policy to apply to all new game sessions created in this fleet. Game sessions that already exist are not affected. You can set protection for individual game sessions using [UpdateGameSession](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateGameSession.html) .
    ///
    /// * NoProtection -- The game session can be terminated during a scale-down event.
    ///
    /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
    public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    /// Policy settings that limit the number of game sessions an individual player can create over a span of time.
    public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?

    public init(
        anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
        description: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        metricGroups: [Swift.String]? = nil,
        name: Swift.String? = nil,
        newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
        resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil
    )
    {
        self.anywhereConfiguration = anywhereConfiguration
        self.description = description
        self.fleetId = fleetId
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
    }
}

public struct UpdateFleetAttributesOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

public struct UpdateFleetCapacityInput: Swift.Sendable {
    /// The number of Amazon EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits. Changes in desired instance value can take up to 1 minute to be reflected when viewing the fleet's capacity settings.
    public var desiredInstances: Swift.Int?
    /// A unique identifier for the fleet to update capacity settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The name of a remote location to update fleet capacity settings for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?
    /// The maximum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 1.
    public var maxSize: Swift.Int?
    /// The minimum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 0.
    public var minSize: Swift.Int?

    public init(
        desiredInstances: Swift.Int? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil
    )
    {
        self.desiredInstances = desiredInstances
        self.fleetId = fleetId
        self.location = location
        self.maxSize = maxSize
        self.minSize = minSize
    }
}

public struct UpdateFleetCapacityOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?
    /// The remote location being updated, expressed as an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.location = location
    }
}

public struct UpdateFleetPortSettingsInput: Swift.Sendable {
    /// A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A collection of port settings to be added to the fleet resource.
    public var inboundPermissionAuthorizations: [GameLiftClientTypes.IpPermission]?
    /// A collection of port settings to be removed from the fleet resource.
    public var inboundPermissionRevocations: [GameLiftClientTypes.IpPermission]?

    public init(
        fleetId: Swift.String? = nil,
        inboundPermissionAuthorizations: [GameLiftClientTypes.IpPermission]? = nil,
        inboundPermissionRevocations: [GameLiftClientTypes.IpPermission]? = nil
    )
    {
        self.fleetId = fleetId
        self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
        self.inboundPermissionRevocations = inboundPermissionRevocations
    }
}

public struct UpdateFleetPortSettingsOutput: Swift.Sendable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?

    public init(
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

extension GameLiftClientTypes {

    public enum GameServerHealthCheck: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case healthy
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerHealthCheck] {
            return [
                .healthy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .healthy: return "HEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateGameServerInput: Swift.Sendable {
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to update.
    /// This member is required.
    public var gameServerId: Swift.String?
    /// Indicates health status of the game server. A request that includes this parameter updates the game server's LastHealthCheckTime timestamp.
    public var healthCheck: GameLiftClientTypes.GameServerHealthCheck?
    /// Indicates if the game server is available or is currently hosting gameplay. You can update a game server status from AVAILABLE to UTILIZED, but you can't change a the status from UTILIZED to AVAILABLE.
    public var utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?

    public init(
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil,
        healthCheck: GameLiftClientTypes.GameServerHealthCheck? = nil,
        utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus? = nil
    )
    {
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.healthCheck = healthCheck
        self.utilizationStatus = utilizationStatus
    }
}

public struct UpdateGameServerOutput: Swift.Sendable {
    /// Object that describes the newly updated game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init(
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

public struct UpdateGameServerGroupInput: Swift.Sendable {
    /// Indicates how Amazon GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
    ///
    /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
    ///
    /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
    ///
    /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
    public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to NO_PROTECTION by default.
    public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    /// An updated list of Amazon EC2 instance types to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by Amazon GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for the game server group. For more information on instance types, see [EC2 Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see [ Instance Weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
    public var roleArn: Swift.String?

    public init(
        balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
        instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.roleArn = roleArn
    }
}

public struct UpdateGameServerGroupOutput: Swift.Sendable {
    /// An object that describes the game server group resource with updated properties.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init(
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

public struct UpdateGameSessionInput: Swift.Sendable {
    /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}. You can use this parameter to modify game properties in an active game session. This action adds new properties and modifies existing properties. There is no way to delete properties. For an example, see [Update the value of a game property](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#game-properties-update).
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A unique identifier for the game session to update.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var name: Swift.String?
    /// A policy that determines whether the game session is accepting new players.
    public var playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
    /// Game session protection policy to apply to this game session only.
    ///
    /// * NoProtection -- The game session can be terminated during a scale-down event.
    ///
    /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
    public var protectionPolicy: GameLiftClientTypes.ProtectionPolicy?

    public init(
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionId: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        name: Swift.String? = nil,
        playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy? = nil,
        protectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil
    )
    {
        self.gameProperties = gameProperties
        self.gameSessionId = gameSessionId
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
        self.playerSessionCreationPolicy = playerSessionCreationPolicy
        self.protectionPolicy = protectionPolicy
    }
}

public struct UpdateGameSessionOutput: Swift.Sendable {
    /// The updated game session properties.
    public var gameSession: GameLiftClientTypes.GameSession?

    public init(
        gameSession: GameLiftClientTypes.GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

public struct UpdateGameSessionQueueInput: Swift.Sendable {
    /// Information to be added to all events that are related to this game session queue.
    public var customEventData: Swift.String?
    /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.
    public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.
    public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
    public var notificationTarget: Swift.String?
    /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of policies.
    public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.
    public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status. By default, this property is set to 600.
    public var timeoutInSeconds: Swift.Int?

    public init(
        customEventData: Swift.String? = nil,
        destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
        filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
        priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
        timeoutInSeconds: Swift.Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}

public struct UpdateGameSessionQueueOutput: Swift.Sendable {
    /// An object that describes the newly updated game session queue.
    public var gameSessionQueue: GameLiftClientTypes.GameSessionQueue?

    public init(
        gameSessionQueue: GameLiftClientTypes.GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

public struct UpdateMatchmakingConfigurationInput: Swift.Sendable {
    /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
    public var acceptanceRequired: Swift.Bool?
    /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
    public var acceptanceTimeoutSeconds: Swift.Int?
    /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 10-person team, and the additional player count is set to 2, 10 players will be selected for the match and 2 more player slots will be open for future players. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var additionalPlayerCount: Swift.Int?
    /// The method that is used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a match backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [Backfill Existing Games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
    public var backfillMode: GameLiftClientTypes.BackfillMode?
    /// Information to add to all events related to the matchmaking configuration.
    public var customEventData: Swift.String?
    /// A description for the matchmaking configuration.
    public var description: Swift.String?
    /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
    ///
    /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
    ///
    /// * WITH_QUEUE - FlexMatch forms matches and uses the specified Amazon GameLift queue to start a game session for the match.
    public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    /// A set of key-value pairs that can store custom data in a game session. For example: {"Key": "difficulty", "Value": "novice"}. This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the game session that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameSessionData: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new Amazon GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
    public var gameSessionQueueArns: [Swift.String]?
    /// A unique identifier for the matchmaking configuration to update. You can use either the configuration name or ARN value.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive matchmaking notifications. See [ Setting up notifications for matchmaking](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html) for more information.
    public var notificationTarget: Swift.String?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
    public var requestTimeoutSeconds: Swift.Int?
    /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
    public var ruleSetName: Swift.String?

    public init(
        acceptanceRequired: Swift.Bool? = nil,
        acceptanceTimeoutSeconds: Swift.Int? = nil,
        additionalPlayerCount: Swift.Int? = nil,
        backfillMode: GameLiftClientTypes.BackfillMode? = nil,
        customEventData: Swift.String? = nil,
        description: Swift.String? = nil,
        flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionQueueArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        requestTimeoutSeconds: Swift.Int? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
    }
}

public struct UpdateMatchmakingConfigurationOutput: Swift.Sendable {
    /// The updated matchmaking configuration.
    public var configuration: GameLiftClientTypes.MatchmakingConfiguration?

    public init(
        configuration: GameLiftClientTypes.MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

public struct UpdateRuntimeConfigurationInput: Swift.Sendable {
    /// A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// Instructions for launching server processes on fleet computes. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run, how to launch them, and the number of processes to run concurrently.
    /// This member is required.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init(
        fleetId: Swift.String? = nil,
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.fleetId = fleetId
        self.runtimeConfiguration = runtimeConfiguration
    }
}

public struct UpdateRuntimeConfigurationOutput: Swift.Sendable {
    /// The runtime configuration currently in use by computes in the fleet. If the update is successful, all property changes are shown.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init(
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

public struct UpdateScriptInput: Swift.Sendable {
    /// A descriptive label that is associated with a script. Script names don't need to be unique.
    public var name: Swift.String?
    /// A unique identifier for the Realtime script to update. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?
    /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// Version information associated with a build or script. Version strings don't need to be unique.
    public var version: Swift.String?
    /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
    public var zipFile: Foundation.Data?

    public init(
        name: Swift.String? = nil,
        scriptId: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        version: Swift.String? = nil,
        zipFile: Foundation.Data? = nil
    )
    {
        self.name = name
        self.scriptId = scriptId
        self.storageLocation = storageLocation
        self.version = version
        self.zipFile = zipFile
    }
}

public struct UpdateScriptOutput: Swift.Sendable {
    /// The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
    public var script: GameLiftClientTypes.Script?

    public init(
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

public struct ValidateMatchmakingRuleSetInput: Swift.Sendable {
    /// A collection of matchmaking rules to validate, formatted as a JSON string.
    /// This member is required.
    public var ruleSetBody: Swift.String?

    public init(
        ruleSetBody: Swift.String? = nil
    )
    {
        self.ruleSetBody = ruleSetBody
    }
}

public struct ValidateMatchmakingRuleSetOutput: Swift.Sendable {
    /// A response indicating whether the rule set is valid.
    public var valid: Swift.Bool?

    public init(
        valid: Swift.Bool? = nil
    )
    {
        self.valid = valid
    }
}

extension AcceptMatchInput {

    static func urlPathProvider(_ value: AcceptMatchInput) -> Swift.String? {
        return "/"
    }
}

extension ClaimGameServerInput {

    static func urlPathProvider(_ value: ClaimGameServerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAliasInput {

    static func urlPathProvider(_ value: CreateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBuildInput {

    static func urlPathProvider(_ value: CreateBuildInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContainerGroupDefinitionInput {

    static func urlPathProvider(_ value: CreateContainerGroupDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFleetInput {

    static func urlPathProvider(_ value: CreateFleetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFleetLocationsInput {

    static func urlPathProvider(_ value: CreateFleetLocationsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGameServerGroupInput {

    static func urlPathProvider(_ value: CreateGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGameSessionInput {

    static func urlPathProvider(_ value: CreateGameSessionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateGameSessionQueueInput {

    static func urlPathProvider(_ value: CreateGameSessionQueueInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLocationInput {

    static func urlPathProvider(_ value: CreateLocationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateMatchmakingConfigurationInput {

    static func urlPathProvider(_ value: CreateMatchmakingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateMatchmakingRuleSetInput {

    static func urlPathProvider(_ value: CreateMatchmakingRuleSetInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePlayerSessionInput {

    static func urlPathProvider(_ value: CreatePlayerSessionInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePlayerSessionsInput {

    static func urlPathProvider(_ value: CreatePlayerSessionsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateScriptInput {

    static func urlPathProvider(_ value: CreateScriptInput) -> Swift.String? {
        return "/"
    }
}

extension CreateVpcPeeringAuthorizationInput {

    static func urlPathProvider(_ value: CreateVpcPeeringAuthorizationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateVpcPeeringConnectionInput {

    static func urlPathProvider(_ value: CreateVpcPeeringConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAliasInput {

    static func urlPathProvider(_ value: DeleteAliasInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBuildInput {

    static func urlPathProvider(_ value: DeleteBuildInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteContainerGroupDefinitionInput {

    static func urlPathProvider(_ value: DeleteContainerGroupDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFleetInput {

    static func urlPathProvider(_ value: DeleteFleetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFleetLocationsInput {

    static func urlPathProvider(_ value: DeleteFleetLocationsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGameServerGroupInput {

    static func urlPathProvider(_ value: DeleteGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGameSessionQueueInput {

    static func urlPathProvider(_ value: DeleteGameSessionQueueInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLocationInput {

    static func urlPathProvider(_ value: DeleteLocationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMatchmakingConfigurationInput {

    static func urlPathProvider(_ value: DeleteMatchmakingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMatchmakingRuleSetInput {

    static func urlPathProvider(_ value: DeleteMatchmakingRuleSetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScalingPolicyInput {

    static func urlPathProvider(_ value: DeleteScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScriptInput {

    static func urlPathProvider(_ value: DeleteScriptInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteVpcPeeringAuthorizationInput {

    static func urlPathProvider(_ value: DeleteVpcPeeringAuthorizationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteVpcPeeringConnectionInput {

    static func urlPathProvider(_ value: DeleteVpcPeeringConnectionInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterComputeInput {

    static func urlPathProvider(_ value: DeregisterComputeInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterGameServerInput {

    static func urlPathProvider(_ value: DeregisterGameServerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAliasInput {

    static func urlPathProvider(_ value: DescribeAliasInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeBuildInput {

    static func urlPathProvider(_ value: DescribeBuildInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeComputeInput {

    static func urlPathProvider(_ value: DescribeComputeInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeContainerGroupDefinitionInput {

    static func urlPathProvider(_ value: DescribeContainerGroupDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEC2InstanceLimitsInput {

    static func urlPathProvider(_ value: DescribeEC2InstanceLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetAttributesInput {

    static func urlPathProvider(_ value: DescribeFleetAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetCapacityInput {

    static func urlPathProvider(_ value: DescribeFleetCapacityInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetEventsInput {

    static func urlPathProvider(_ value: DescribeFleetEventsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetLocationAttributesInput {

    static func urlPathProvider(_ value: DescribeFleetLocationAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetLocationCapacityInput {

    static func urlPathProvider(_ value: DescribeFleetLocationCapacityInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetLocationUtilizationInput {

    static func urlPathProvider(_ value: DescribeFleetLocationUtilizationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetPortSettingsInput {

    static func urlPathProvider(_ value: DescribeFleetPortSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFleetUtilizationInput {

    static func urlPathProvider(_ value: DescribeFleetUtilizationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameServerInput {

    static func urlPathProvider(_ value: DescribeGameServerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameServerGroupInput {

    static func urlPathProvider(_ value: DescribeGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameServerInstancesInput {

    static func urlPathProvider(_ value: DescribeGameServerInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameSessionDetailsInput {

    static func urlPathProvider(_ value: DescribeGameSessionDetailsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameSessionPlacementInput {

    static func urlPathProvider(_ value: DescribeGameSessionPlacementInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameSessionQueuesInput {

    static func urlPathProvider(_ value: DescribeGameSessionQueuesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeGameSessionsInput {

    static func urlPathProvider(_ value: DescribeGameSessionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInstancesInput {

    static func urlPathProvider(_ value: DescribeInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMatchmakingInput {

    static func urlPathProvider(_ value: DescribeMatchmakingInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMatchmakingConfigurationsInput {

    static func urlPathProvider(_ value: DescribeMatchmakingConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMatchmakingRuleSetsInput {

    static func urlPathProvider(_ value: DescribeMatchmakingRuleSetsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePlayerSessionsInput {

    static func urlPathProvider(_ value: DescribePlayerSessionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeRuntimeConfigurationInput {

    static func urlPathProvider(_ value: DescribeRuntimeConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScalingPoliciesInput {

    static func urlPathProvider(_ value: DescribeScalingPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScriptInput {

    static func urlPathProvider(_ value: DescribeScriptInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeVpcPeeringAuthorizationsInput {

    static func urlPathProvider(_ value: DescribeVpcPeeringAuthorizationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeVpcPeeringConnectionsInput {

    static func urlPathProvider(_ value: DescribeVpcPeeringConnectionsInput) -> Swift.String? {
        return "/"
    }
}

extension GetComputeAccessInput {

    static func urlPathProvider(_ value: GetComputeAccessInput) -> Swift.String? {
        return "/"
    }
}

extension GetComputeAuthTokenInput {

    static func urlPathProvider(_ value: GetComputeAuthTokenInput) -> Swift.String? {
        return "/"
    }
}

extension GetGameSessionLogUrlInput {

    static func urlPathProvider(_ value: GetGameSessionLogUrlInput) -> Swift.String? {
        return "/"
    }
}

extension GetInstanceAccessInput {

    static func urlPathProvider(_ value: GetInstanceAccessInput) -> Swift.String? {
        return "/"
    }
}

extension ListAliasesInput {

    static func urlPathProvider(_ value: ListAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListBuildsInput {

    static func urlPathProvider(_ value: ListBuildsInput) -> Swift.String? {
        return "/"
    }
}

extension ListComputeInput {

    static func urlPathProvider(_ value: ListComputeInput) -> Swift.String? {
        return "/"
    }
}

extension ListContainerGroupDefinitionsInput {

    static func urlPathProvider(_ value: ListContainerGroupDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFleetsInput {

    static func urlPathProvider(_ value: ListFleetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGameServerGroupsInput {

    static func urlPathProvider(_ value: ListGameServerGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGameServersInput {

    static func urlPathProvider(_ value: ListGameServersInput) -> Swift.String? {
        return "/"
    }
}

extension ListLocationsInput {

    static func urlPathProvider(_ value: ListLocationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListScriptsInput {

    static func urlPathProvider(_ value: ListScriptsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutScalingPolicyInput {

    static func urlPathProvider(_ value: PutScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterComputeInput {

    static func urlPathProvider(_ value: RegisterComputeInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterGameServerInput {

    static func urlPathProvider(_ value: RegisterGameServerInput) -> Swift.String? {
        return "/"
    }
}

extension RequestUploadCredentialsInput {

    static func urlPathProvider(_ value: RequestUploadCredentialsInput) -> Swift.String? {
        return "/"
    }
}

extension ResolveAliasInput {

    static func urlPathProvider(_ value: ResolveAliasInput) -> Swift.String? {
        return "/"
    }
}

extension ResumeGameServerGroupInput {

    static func urlPathProvider(_ value: ResumeGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension SearchGameSessionsInput {

    static func urlPathProvider(_ value: SearchGameSessionsInput) -> Swift.String? {
        return "/"
    }
}

extension StartFleetActionsInput {

    static func urlPathProvider(_ value: StartFleetActionsInput) -> Swift.String? {
        return "/"
    }
}

extension StartGameSessionPlacementInput {

    static func urlPathProvider(_ value: StartGameSessionPlacementInput) -> Swift.String? {
        return "/"
    }
}

extension StartMatchBackfillInput {

    static func urlPathProvider(_ value: StartMatchBackfillInput) -> Swift.String? {
        return "/"
    }
}

extension StartMatchmakingInput {

    static func urlPathProvider(_ value: StartMatchmakingInput) -> Swift.String? {
        return "/"
    }
}

extension StopFleetActionsInput {

    static func urlPathProvider(_ value: StopFleetActionsInput) -> Swift.String? {
        return "/"
    }
}

extension StopGameSessionPlacementInput {

    static func urlPathProvider(_ value: StopGameSessionPlacementInput) -> Swift.String? {
        return "/"
    }
}

extension StopMatchmakingInput {

    static func urlPathProvider(_ value: StopMatchmakingInput) -> Swift.String? {
        return "/"
    }
}

extension SuspendGameServerGroupInput {

    static func urlPathProvider(_ value: SuspendGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAliasInput {

    static func urlPathProvider(_ value: UpdateAliasInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateBuildInput {

    static func urlPathProvider(_ value: UpdateBuildInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFleetAttributesInput {

    static func urlPathProvider(_ value: UpdateFleetAttributesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFleetCapacityInput {

    static func urlPathProvider(_ value: UpdateFleetCapacityInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFleetPortSettingsInput {

    static func urlPathProvider(_ value: UpdateFleetPortSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGameServerInput {

    static func urlPathProvider(_ value: UpdateGameServerInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGameServerGroupInput {

    static func urlPathProvider(_ value: UpdateGameServerGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGameSessionInput {

    static func urlPathProvider(_ value: UpdateGameSessionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateGameSessionQueueInput {

    static func urlPathProvider(_ value: UpdateGameSessionQueueInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateMatchmakingConfigurationInput {

    static func urlPathProvider(_ value: UpdateMatchmakingConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateRuntimeConfigurationInput {

    static func urlPathProvider(_ value: UpdateRuntimeConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateScriptInput {

    static func urlPathProvider(_ value: UpdateScriptInput) -> Swift.String? {
        return "/"
    }
}

extension ValidateMatchmakingRuleSetInput {

    static func urlPathProvider(_ value: ValidateMatchmakingRuleSetInput) -> Swift.String? {
        return "/"
    }
}

extension AcceptMatchInput {

    static func write(value: AcceptMatchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceptanceType"].write(value.acceptanceType)
        try writer["PlayerIds"].writeList(value.playerIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TicketId"].write(value.ticketId)
    }
}

extension ClaimGameServerInput {

    static func write(value: ClaimGameServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FilterOption"].write(value.filterOption, with: GameLiftClientTypes.ClaimFilterOption.write(value:to:))
        try writer["GameServerData"].write(value.gameServerData)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerId"].write(value.gameServerId)
    }
}

extension CreateAliasInput {

    static func write(value: CreateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["RoutingStrategy"].write(value.routingStrategy, with: GameLiftClientTypes.RoutingStrategy.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateBuildInput {

    static func write(value: CreateBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["OperatingSystem"].write(value.operatingSystem)
        try writer["ServerSdkVersion"].write(value.serverSdkVersion)
        try writer["StorageLocation"].write(value.storageLocation, with: GameLiftClientTypes.S3Location.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Version"].write(value.version)
    }
}

extension CreateContainerGroupDefinitionInput {

    static func write(value: CreateContainerGroupDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerDefinitions"].writeList(value.containerDefinitions, memberWritingClosure: GameLiftClientTypes.ContainerDefinitionInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["OperatingSystem"].write(value.operatingSystem)
        try writer["SchedulingStrategy"].write(value.schedulingStrategy)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TotalCpuLimit"].write(value.totalCpuLimit)
        try writer["TotalMemoryLimit"].write(value.totalMemoryLimit)
    }
}

extension CreateFleetInput {

    static func write(value: CreateFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnywhereConfiguration"].write(value.anywhereConfiguration, with: GameLiftClientTypes.AnywhereConfiguration.write(value:to:))
        try writer["BuildId"].write(value.buildId)
        try writer["CertificateConfiguration"].write(value.certificateConfiguration, with: GameLiftClientTypes.CertificateConfiguration.write(value:to:))
        try writer["ComputeType"].write(value.computeType)
        try writer["ContainerGroupsConfiguration"].write(value.containerGroupsConfiguration, with: GameLiftClientTypes.ContainerGroupsConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["EC2InboundPermissions"].writeList(value.ec2InboundPermissions, memberWritingClosure: GameLiftClientTypes.IpPermission.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EC2InstanceType"].write(value.ec2InstanceType)
        try writer["FleetType"].write(value.fleetType)
        try writer["InstanceRoleArn"].write(value.instanceRoleArn)
        try writer["InstanceRoleCredentialsProvider"].write(value.instanceRoleCredentialsProvider)
        try writer["Locations"].writeList(value.locations, memberWritingClosure: GameLiftClientTypes.LocationConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LogPaths"].writeList(value.logPaths, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricGroups"].writeList(value.metricGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["NewGameSessionProtectionPolicy"].write(value.newGameSessionProtectionPolicy)
        try writer["PeerVpcAwsAccountId"].write(value.peerVpcAwsAccountId)
        try writer["PeerVpcId"].write(value.peerVpcId)
        try writer["ResourceCreationLimitPolicy"].write(value.resourceCreationLimitPolicy, with: GameLiftClientTypes.ResourceCreationLimitPolicy.write(value:to:))
        try writer["RuntimeConfiguration"].write(value.runtimeConfiguration, with: GameLiftClientTypes.RuntimeConfiguration.write(value:to:))
        try writer["ScriptId"].write(value.scriptId)
        try writer["ServerLaunchParameters"].write(value.serverLaunchParameters)
        try writer["ServerLaunchPath"].write(value.serverLaunchPath)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateFleetLocationsInput {

    static func write(value: CreateFleetLocationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Locations"].writeList(value.locations, memberWritingClosure: GameLiftClientTypes.LocationConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateGameServerGroupInput {

    static func write(value: CreateGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingPolicy"].write(value.autoScalingPolicy, with: GameLiftClientTypes.GameServerGroupAutoScalingPolicy.write(value:to:))
        try writer["BalancingStrategy"].write(value.balancingStrategy)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerProtectionPolicy"].write(value.gameServerProtectionPolicy)
        try writer["InstanceDefinitions"].writeList(value.instanceDefinitions, memberWritingClosure: GameLiftClientTypes.InstanceDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LaunchTemplate"].write(value.launchTemplate, with: GameLiftClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcSubnets"].writeList(value.vpcSubnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateGameSessionInput {

    static func write(value: CreateGameSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
        try writer["CreatorId"].write(value.creatorId)
        try writer["FleetId"].write(value.fleetId)
        try writer["GameProperties"].writeList(value.gameProperties, memberWritingClosure: GameLiftClientTypes.GameProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameSessionData"].write(value.gameSessionData)
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["IdempotencyToken"].write(value.idempotencyToken)
        try writer["Location"].write(value.location)
        try writer["MaximumPlayerSessionCount"].write(value.maximumPlayerSessionCount)
        try writer["Name"].write(value.name)
    }
}

extension CreateGameSessionQueueInput {

    static func write(value: CreateGameSessionQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomEventData"].write(value.customEventData)
        try writer["Destinations"].writeList(value.destinations, memberWritingClosure: GameLiftClientTypes.GameSessionQueueDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FilterConfiguration"].write(value.filterConfiguration, with: GameLiftClientTypes.FilterConfiguration.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["NotificationTarget"].write(value.notificationTarget)
        try writer["PlayerLatencyPolicies"].writeList(value.playerLatencyPolicies, memberWritingClosure: GameLiftClientTypes.PlayerLatencyPolicy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PriorityConfiguration"].write(value.priorityConfiguration, with: GameLiftClientTypes.PriorityConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TimeoutInSeconds"].write(value.timeoutInSeconds)
    }
}

extension CreateLocationInput {

    static func write(value: CreateLocationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocationName"].write(value.locationName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateMatchmakingConfigurationInput {

    static func write(value: CreateMatchmakingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceptanceRequired"].write(value.acceptanceRequired)
        try writer["AcceptanceTimeoutSeconds"].write(value.acceptanceTimeoutSeconds)
        try writer["AdditionalPlayerCount"].write(value.additionalPlayerCount)
        try writer["BackfillMode"].write(value.backfillMode)
        try writer["CustomEventData"].write(value.customEventData)
        try writer["Description"].write(value.description)
        try writer["FlexMatchMode"].write(value.flexMatchMode)
        try writer["GameProperties"].writeList(value.gameProperties, memberWritingClosure: GameLiftClientTypes.GameProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameSessionData"].write(value.gameSessionData)
        try writer["GameSessionQueueArns"].writeList(value.gameSessionQueueArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["NotificationTarget"].write(value.notificationTarget)
        try writer["RequestTimeoutSeconds"].write(value.requestTimeoutSeconds)
        try writer["RuleSetName"].write(value.ruleSetName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateMatchmakingRuleSetInput {

    static func write(value: CreateMatchmakingRuleSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["RuleSetBody"].write(value.ruleSetBody)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePlayerSessionInput {

    static func write(value: CreatePlayerSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["PlayerData"].write(value.playerData)
        try writer["PlayerId"].write(value.playerId)
    }
}

extension CreatePlayerSessionsInput {

    static func write(value: CreatePlayerSessionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["PlayerDataMap"].writeMap(value.playerDataMap, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PlayerIds"].writeList(value.playerIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateScriptInput {

    static func write(value: CreateScriptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["StorageLocation"].write(value.storageLocation, with: GameLiftClientTypes.S3Location.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Version"].write(value.version)
        try writer["ZipFile"].write(value.zipFile)
    }
}

extension CreateVpcPeeringAuthorizationInput {

    static func write(value: CreateVpcPeeringAuthorizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameLiftAwsAccountId"].write(value.gameLiftAwsAccountId)
        try writer["PeerVpcId"].write(value.peerVpcId)
    }
}

extension CreateVpcPeeringConnectionInput {

    static func write(value: CreateVpcPeeringConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["PeerVpcAwsAccountId"].write(value.peerVpcAwsAccountId)
        try writer["PeerVpcId"].write(value.peerVpcId)
    }
}

extension DeleteAliasInput {

    static func write(value: DeleteAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
    }
}

extension DeleteBuildInput {

    static func write(value: DeleteBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BuildId"].write(value.buildId)
    }
}

extension DeleteContainerGroupDefinitionInput {

    static func write(value: DeleteContainerGroupDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteFleetInput {

    static func write(value: DeleteFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
    }
}

extension DeleteFleetLocationsInput {

    static func write(value: DeleteFleetLocationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Locations"].writeList(value.locations, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteGameServerGroupInput {

    static func write(value: DeleteGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteOption"].write(value.deleteOption)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
    }
}

extension DeleteGameSessionQueueInput {

    static func write(value: DeleteGameSessionQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteLocationInput {

    static func write(value: DeleteLocationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocationName"].write(value.locationName)
    }
}

extension DeleteMatchmakingConfigurationInput {

    static func write(value: DeleteMatchmakingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteMatchmakingRuleSetInput {

    static func write(value: DeleteMatchmakingRuleSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteScalingPolicyInput {

    static func write(value: DeleteScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Name"].write(value.name)
    }
}

extension DeleteScriptInput {

    static func write(value: DeleteScriptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScriptId"].write(value.scriptId)
    }
}

extension DeleteVpcPeeringAuthorizationInput {

    static func write(value: DeleteVpcPeeringAuthorizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameLiftAwsAccountId"].write(value.gameLiftAwsAccountId)
        try writer["PeerVpcId"].write(value.peerVpcId)
    }
}

extension DeleteVpcPeeringConnectionInput {

    static func write(value: DeleteVpcPeeringConnectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["VpcPeeringConnectionId"].write(value.vpcPeeringConnectionId)
    }
}

extension DeregisterComputeInput {

    static func write(value: DeregisterComputeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeName"].write(value.computeName)
        try writer["FleetId"].write(value.fleetId)
    }
}

extension DeregisterGameServerInput {

    static func write(value: DeregisterGameServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerId"].write(value.gameServerId)
    }
}

extension DescribeAliasInput {

    static func write(value: DescribeAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
    }
}

extension DescribeBuildInput {

    static func write(value: DescribeBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BuildId"].write(value.buildId)
    }
}

extension DescribeComputeInput {

    static func write(value: DescribeComputeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeName"].write(value.computeName)
        try writer["FleetId"].write(value.fleetId)
    }
}

extension DescribeContainerGroupDefinitionInput {

    static func write(value: DescribeContainerGroupDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeEC2InstanceLimitsInput {

    static func write(value: DescribeEC2InstanceLimitsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EC2InstanceType"].write(value.ec2InstanceType)
        try writer["Location"].write(value.location)
    }
}

extension DescribeFleetAttributesInput {

    static func write(value: DescribeFleetAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetIds"].writeList(value.fleetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFleetCapacityInput {

    static func write(value: DescribeFleetCapacityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetIds"].writeList(value.fleetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFleetEventsInput {

    static func write(value: DescribeFleetEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["FleetId"].write(value.fleetId)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension DescribeFleetLocationAttributesInput {

    static func write(value: DescribeFleetLocationAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Limit"].write(value.limit)
        try writer["Locations"].writeList(value.locations, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFleetLocationCapacityInput {

    static func write(value: DescribeFleetLocationCapacityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
    }
}

extension DescribeFleetLocationUtilizationInput {

    static func write(value: DescribeFleetLocationUtilizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
    }
}

extension DescribeFleetPortSettingsInput {

    static func write(value: DescribeFleetPortSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
    }
}

extension DescribeFleetUtilizationInput {

    static func write(value: DescribeFleetUtilizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetIds"].writeList(value.fleetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeGameServerInput {

    static func write(value: DescribeGameServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerId"].write(value.gameServerId)
    }
}

extension DescribeGameServerGroupInput {

    static func write(value: DescribeGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
    }
}

extension DescribeGameServerInstancesInput {

    static func write(value: DescribeGameServerInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeGameSessionDetailsInput {

    static func write(value: DescribeGameSessionDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
        try writer["FleetId"].write(value.fleetId)
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
        try writer["StatusFilter"].write(value.statusFilter)
    }
}

extension DescribeGameSessionPlacementInput {

    static func write(value: DescribeGameSessionPlacementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PlacementId"].write(value.placementId)
    }
}

extension DescribeGameSessionQueuesInput {

    static func write(value: DescribeGameSessionQueuesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeGameSessionsInput {

    static func write(value: DescribeGameSessionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
        try writer["FleetId"].write(value.fleetId)
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
        try writer["StatusFilter"].write(value.statusFilter)
    }
}

extension DescribeInstancesInput {

    static func write(value: DescribeInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["InstanceId"].write(value.instanceId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeMatchmakingInput {

    static func write(value: DescribeMatchmakingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TicketIds"].writeList(value.ticketIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeMatchmakingConfigurationsInput {

    static func write(value: DescribeMatchmakingConfigurationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
        try writer["RuleSetName"].write(value.ruleSetName)
    }
}

extension DescribeMatchmakingRuleSetsInput {

    static func write(value: DescribeMatchmakingRuleSetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Names"].writeList(value.names, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribePlayerSessionsInput {

    static func write(value: DescribePlayerSessionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["PlayerId"].write(value.playerId)
        try writer["PlayerSessionId"].write(value.playerSessionId)
        try writer["PlayerSessionStatusFilter"].write(value.playerSessionStatusFilter)
    }
}

extension DescribeRuntimeConfigurationInput {

    static func write(value: DescribeRuntimeConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
    }
}

extension DescribeScalingPoliciesInput {

    static func write(value: DescribeScalingPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
        try writer["StatusFilter"].write(value.statusFilter)
    }
}

extension DescribeScriptInput {

    static func write(value: DescribeScriptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScriptId"].write(value.scriptId)
    }
}

extension DescribeVpcPeeringAuthorizationsInput {

    static func write(value: DescribeVpcPeeringAuthorizationsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeVpcPeeringConnectionsInput {

    static func write(value: DescribeVpcPeeringConnectionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
    }
}

extension GetComputeAccessInput {

    static func write(value: GetComputeAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeName"].write(value.computeName)
        try writer["FleetId"].write(value.fleetId)
    }
}

extension GetComputeAuthTokenInput {

    static func write(value: GetComputeAuthTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeName"].write(value.computeName)
        try writer["FleetId"].write(value.fleetId)
    }
}

extension GetGameSessionLogUrlInput {

    static func write(value: GetGameSessionLogUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameSessionId"].write(value.gameSessionId)
    }
}

extension GetInstanceAccessInput {

    static func write(value: GetInstanceAccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["InstanceId"].write(value.instanceId)
    }
}

extension ListAliasesInput {

    static func write(value: ListAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["Name"].write(value.name)
        try writer["NextToken"].write(value.nextToken)
        try writer["RoutingStrategyType"].write(value.routingStrategyType)
    }
}

extension ListBuildsInput {

    static func write(value: ListBuildsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
    }
}

extension ListComputeInput {

    static func write(value: ListComputeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListContainerGroupDefinitionsInput {

    static func write(value: ListContainerGroupDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["SchedulingStrategy"].write(value.schedulingStrategy)
    }
}

extension ListFleetsInput {

    static func write(value: ListFleetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BuildId"].write(value.buildId)
        try writer["ContainerGroupDefinitionName"].write(value.containerGroupDefinitionName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScriptId"].write(value.scriptId)
    }
}

extension ListGameServerGroupsInput {

    static func write(value: ListGameServerGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListGameServersInput {

    static func write(value: ListGameServersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListLocationsInput {

    static func write(value: ListLocationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.LocationFilter>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListScriptsInput {

    static func write(value: ListScriptsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Limit"].write(value.limit)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension PutScalingPolicyInput {

    static func write(value: PutScalingPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComparisonOperator"].write(value.comparisonOperator)
        try writer["EvaluationPeriods"].write(value.evaluationPeriods)
        try writer["FleetId"].write(value.fleetId)
        try writer["MetricName"].write(value.metricName)
        try writer["Name"].write(value.name)
        try writer["PolicyType"].write(value.policyType)
        try writer["ScalingAdjustment"].write(value.scalingAdjustment)
        try writer["ScalingAdjustmentType"].write(value.scalingAdjustmentType)
        try writer["TargetConfiguration"].write(value.targetConfiguration, with: GameLiftClientTypes.TargetConfiguration.write(value:to:))
        try writer["Threshold"].write(value.threshold)
    }
}

extension RegisterComputeInput {

    static func write(value: RegisterComputeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificatePath"].write(value.certificatePath)
        try writer["ComputeName"].write(value.computeName)
        try writer["DnsName"].write(value.dnsName)
        try writer["FleetId"].write(value.fleetId)
        try writer["IpAddress"].write(value.ipAddress)
        try writer["Location"].write(value.location)
    }
}

extension RegisterGameServerInput {

    static func write(value: RegisterGameServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionInfo"].write(value.connectionInfo)
        try writer["GameServerData"].write(value.gameServerData)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerId"].write(value.gameServerId)
        try writer["InstanceId"].write(value.instanceId)
    }
}

extension RequestUploadCredentialsInput {

    static func write(value: RequestUploadCredentialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BuildId"].write(value.buildId)
    }
}

extension ResolveAliasInput {

    static func write(value: ResolveAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
    }
}

extension ResumeGameServerGroupInput {

    static func write(value: ResumeGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["ResumeActions"].writeList(value.resumeActions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.GameServerGroupAction>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SearchGameSessionsInput {

    static func write(value: SearchGameSessionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
        try writer["FilterExpression"].write(value.filterExpression)
        try writer["FleetId"].write(value.fleetId)
        try writer["Limit"].write(value.limit)
        try writer["Location"].write(value.location)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortExpression"].write(value.sortExpression)
    }
}

extension StartFleetActionsInput {

    static func write(value: StartFleetActionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.FleetAction>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
    }
}

extension StartGameSessionPlacementInput {

    static func write(value: StartGameSessionPlacementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredPlayerSessions"].writeList(value.desiredPlayerSessions, memberWritingClosure: GameLiftClientTypes.DesiredPlayerSession.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameProperties"].writeList(value.gameProperties, memberWritingClosure: GameLiftClientTypes.GameProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameSessionData"].write(value.gameSessionData)
        try writer["GameSessionName"].write(value.gameSessionName)
        try writer["GameSessionQueueName"].write(value.gameSessionQueueName)
        try writer["MaximumPlayerSessionCount"].write(value.maximumPlayerSessionCount)
        try writer["PlacementId"].write(value.placementId)
        try writer["PlayerLatencies"].writeList(value.playerLatencies, memberWritingClosure: GameLiftClientTypes.PlayerLatency.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartMatchBackfillInput {

    static func write(value: StartMatchBackfillInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationName"].write(value.configurationName)
        try writer["GameSessionArn"].write(value.gameSessionArn)
        try writer["Players"].writeList(value.players, memberWritingClosure: GameLiftClientTypes.Player.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TicketId"].write(value.ticketId)
    }
}

extension StartMatchmakingInput {

    static func write(value: StartMatchmakingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigurationName"].write(value.configurationName)
        try writer["Players"].writeList(value.players, memberWritingClosure: GameLiftClientTypes.Player.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TicketId"].write(value.ticketId)
    }
}

extension StopFleetActionsInput {

    static func write(value: StopFleetActionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Actions"].writeList(value.actions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.FleetAction>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
    }
}

extension StopGameSessionPlacementInput {

    static func write(value: StopGameSessionPlacementInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PlacementId"].write(value.placementId)
    }
}

extension StopMatchmakingInput {

    static func write(value: StopMatchmakingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TicketId"].write(value.ticketId)
    }
}

extension SuspendGameServerGroupInput {

    static func write(value: SuspendGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["SuspendActions"].writeList(value.suspendActions, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.GameServerGroupAction>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: GameLiftClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAliasInput {

    static func write(value: UpdateAliasInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AliasId"].write(value.aliasId)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["RoutingStrategy"].write(value.routingStrategy, with: GameLiftClientTypes.RoutingStrategy.write(value:to:))
    }
}

extension UpdateBuildInput {

    static func write(value: UpdateBuildInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BuildId"].write(value.buildId)
        try writer["Name"].write(value.name)
        try writer["Version"].write(value.version)
    }
}

extension UpdateFleetAttributesInput {

    static func write(value: UpdateFleetAttributesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnywhereConfiguration"].write(value.anywhereConfiguration, with: GameLiftClientTypes.AnywhereConfiguration.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["FleetId"].write(value.fleetId)
        try writer["MetricGroups"].writeList(value.metricGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["NewGameSessionProtectionPolicy"].write(value.newGameSessionProtectionPolicy)
        try writer["ResourceCreationLimitPolicy"].write(value.resourceCreationLimitPolicy, with: GameLiftClientTypes.ResourceCreationLimitPolicy.write(value:to:))
    }
}

extension UpdateFleetCapacityInput {

    static func write(value: UpdateFleetCapacityInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredInstances"].write(value.desiredInstances)
        try writer["FleetId"].write(value.fleetId)
        try writer["Location"].write(value.location)
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
    }
}

extension UpdateFleetPortSettingsInput {

    static func write(value: UpdateFleetPortSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["InboundPermissionAuthorizations"].writeList(value.inboundPermissionAuthorizations, memberWritingClosure: GameLiftClientTypes.IpPermission.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InboundPermissionRevocations"].writeList(value.inboundPermissionRevocations, memberWritingClosure: GameLiftClientTypes.IpPermission.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateGameServerInput {

    static func write(value: UpdateGameServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameServerData"].write(value.gameServerData)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerId"].write(value.gameServerId)
        try writer["HealthCheck"].write(value.healthCheck)
        try writer["UtilizationStatus"].write(value.utilizationStatus)
    }
}

extension UpdateGameServerGroupInput {

    static func write(value: UpdateGameServerGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BalancingStrategy"].write(value.balancingStrategy)
        try writer["GameServerGroupName"].write(value.gameServerGroupName)
        try writer["GameServerProtectionPolicy"].write(value.gameServerProtectionPolicy)
        try writer["InstanceDefinitions"].writeList(value.instanceDefinitions, memberWritingClosure: GameLiftClientTypes.InstanceDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateGameSessionInput {

    static func write(value: UpdateGameSessionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameProperties"].writeList(value.gameProperties, memberWritingClosure: GameLiftClientTypes.GameProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameSessionId"].write(value.gameSessionId)
        try writer["MaximumPlayerSessionCount"].write(value.maximumPlayerSessionCount)
        try writer["Name"].write(value.name)
        try writer["PlayerSessionCreationPolicy"].write(value.playerSessionCreationPolicy)
        try writer["ProtectionPolicy"].write(value.protectionPolicy)
    }
}

extension UpdateGameSessionQueueInput {

    static func write(value: UpdateGameSessionQueueInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomEventData"].write(value.customEventData)
        try writer["Destinations"].writeList(value.destinations, memberWritingClosure: GameLiftClientTypes.GameSessionQueueDestination.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FilterConfiguration"].write(value.filterConfiguration, with: GameLiftClientTypes.FilterConfiguration.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["NotificationTarget"].write(value.notificationTarget)
        try writer["PlayerLatencyPolicies"].writeList(value.playerLatencyPolicies, memberWritingClosure: GameLiftClientTypes.PlayerLatencyPolicy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PriorityConfiguration"].write(value.priorityConfiguration, with: GameLiftClientTypes.PriorityConfiguration.write(value:to:))
        try writer["TimeoutInSeconds"].write(value.timeoutInSeconds)
    }
}

extension UpdateMatchmakingConfigurationInput {

    static func write(value: UpdateMatchmakingConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceptanceRequired"].write(value.acceptanceRequired)
        try writer["AcceptanceTimeoutSeconds"].write(value.acceptanceTimeoutSeconds)
        try writer["AdditionalPlayerCount"].write(value.additionalPlayerCount)
        try writer["BackfillMode"].write(value.backfillMode)
        try writer["CustomEventData"].write(value.customEventData)
        try writer["Description"].write(value.description)
        try writer["FlexMatchMode"].write(value.flexMatchMode)
        try writer["GameProperties"].writeList(value.gameProperties, memberWritingClosure: GameLiftClientTypes.GameProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["GameSessionData"].write(value.gameSessionData)
        try writer["GameSessionQueueArns"].writeList(value.gameSessionQueueArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["NotificationTarget"].write(value.notificationTarget)
        try writer["RequestTimeoutSeconds"].write(value.requestTimeoutSeconds)
        try writer["RuleSetName"].write(value.ruleSetName)
    }
}

extension UpdateRuntimeConfigurationInput {

    static func write(value: UpdateRuntimeConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["RuntimeConfiguration"].write(value.runtimeConfiguration, with: GameLiftClientTypes.RuntimeConfiguration.write(value:to:))
    }
}

extension UpdateScriptInput {

    static func write(value: UpdateScriptInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ScriptId"].write(value.scriptId)
        try writer["StorageLocation"].write(value.storageLocation, with: GameLiftClientTypes.S3Location.write(value:to:))
        try writer["Version"].write(value.version)
        try writer["ZipFile"].write(value.zipFile)
    }
}

extension ValidateMatchmakingRuleSetInput {

    static func write(value: ValidateMatchmakingRuleSetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RuleSetBody"].write(value.ruleSetBody)
    }
}

extension AcceptMatchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcceptMatchOutput {
        return AcceptMatchOutput()
    }
}

extension ClaimGameServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ClaimGameServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ClaimGameServerOutput()
        value.gameServer = try reader["GameServer"].readIfPresent(with: GameLiftClientTypes.GameServer.read(from:))
        return value
    }
}

extension CreateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: GameLiftClientTypes.Alias.read(from:))
        return value
    }
}

extension CreateBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBuildOutput()
        value.build = try reader["Build"].readIfPresent(with: GameLiftClientTypes.Build.read(from:))
        value.storageLocation = try reader["StorageLocation"].readIfPresent(with: GameLiftClientTypes.S3Location.read(from:))
        value.uploadCredentials = try reader["UploadCredentials"].readIfPresent(with: GameLiftClientTypes.AwsCredentials.read(from:))
        return value
    }
}

extension CreateContainerGroupDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContainerGroupDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContainerGroupDefinitionOutput()
        value.containerGroupDefinition = try reader["ContainerGroupDefinition"].readIfPresent(with: GameLiftClientTypes.ContainerGroupDefinition.read(from:))
        return value
    }
}

extension CreateFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFleetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFleetOutput()
        value.fleetAttributes = try reader["FleetAttributes"].readIfPresent(with: GameLiftClientTypes.FleetAttributes.read(from:))
        value.locationStates = try reader["LocationStates"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.LocationState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateFleetLocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFleetLocationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFleetLocationsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.locationStates = try reader["LocationStates"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.LocationState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension CreateGameSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGameSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGameSessionOutput()
        value.gameSession = try reader["GameSession"].readIfPresent(with: GameLiftClientTypes.GameSession.read(from:))
        return value
    }
}

extension CreateGameSessionQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateGameSessionQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateGameSessionQueueOutput()
        value.gameSessionQueue = try reader["GameSessionQueue"].readIfPresent(with: GameLiftClientTypes.GameSessionQueue.read(from:))
        return value
    }
}

extension CreateLocationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLocationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLocationOutput()
        value.location = try reader["Location"].readIfPresent(with: GameLiftClientTypes.LocationModel.read(from:))
        return value
    }
}

extension CreateMatchmakingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMatchmakingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMatchmakingConfigurationOutput()
        value.configuration = try reader["Configuration"].readIfPresent(with: GameLiftClientTypes.MatchmakingConfiguration.read(from:))
        return value
    }
}

extension CreateMatchmakingRuleSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMatchmakingRuleSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMatchmakingRuleSetOutput()
        value.ruleSet = try reader["RuleSet"].readIfPresent(with: GameLiftClientTypes.MatchmakingRuleSet.read(from:))
        return value
    }
}

extension CreatePlayerSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePlayerSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePlayerSessionOutput()
        value.playerSession = try reader["PlayerSession"].readIfPresent(with: GameLiftClientTypes.PlayerSession.read(from:))
        return value
    }
}

extension CreatePlayerSessionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePlayerSessionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePlayerSessionsOutput()
        value.playerSessions = try reader["PlayerSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.PlayerSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateScriptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScriptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateScriptOutput()
        value.script = try reader["Script"].readIfPresent(with: GameLiftClientTypes.Script.read(from:))
        return value
    }
}

extension CreateVpcPeeringAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVpcPeeringAuthorizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateVpcPeeringAuthorizationOutput()
        value.vpcPeeringAuthorization = try reader["VpcPeeringAuthorization"].readIfPresent(with: GameLiftClientTypes.VpcPeeringAuthorization.read(from:))
        return value
    }
}

extension CreateVpcPeeringConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateVpcPeeringConnectionOutput {
        return CreateVpcPeeringConnectionOutput()
    }
}

extension DeleteAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAliasOutput {
        return DeleteAliasOutput()
    }
}

extension DeleteBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBuildOutput {
        return DeleteBuildOutput()
    }
}

extension DeleteContainerGroupDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContainerGroupDefinitionOutput {
        return DeleteContainerGroupDefinitionOutput()
    }
}

extension DeleteFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFleetOutput {
        return DeleteFleetOutput()
    }
}

extension DeleteFleetLocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFleetLocationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteFleetLocationsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.locationStates = try reader["LocationStates"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.LocationState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension DeleteGameSessionQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGameSessionQueueOutput {
        return DeleteGameSessionQueueOutput()
    }
}

extension DeleteLocationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLocationOutput {
        return DeleteLocationOutput()
    }
}

extension DeleteMatchmakingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMatchmakingConfigurationOutput {
        return DeleteMatchmakingConfigurationOutput()
    }
}

extension DeleteMatchmakingRuleSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMatchmakingRuleSetOutput {
        return DeleteMatchmakingRuleSetOutput()
    }
}

extension DeleteScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScalingPolicyOutput {
        return DeleteScalingPolicyOutput()
    }
}

extension DeleteScriptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScriptOutput {
        return DeleteScriptOutput()
    }
}

extension DeleteVpcPeeringAuthorizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVpcPeeringAuthorizationOutput {
        return DeleteVpcPeeringAuthorizationOutput()
    }
}

extension DeleteVpcPeeringConnectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteVpcPeeringConnectionOutput {
        return DeleteVpcPeeringConnectionOutput()
    }
}

extension DeregisterComputeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterComputeOutput {
        return DeregisterComputeOutput()
    }
}

extension DeregisterGameServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterGameServerOutput {
        return DeregisterGameServerOutput()
    }
}

extension DescribeAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: GameLiftClientTypes.Alias.read(from:))
        return value
    }
}

extension DescribeBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBuildOutput()
        value.build = try reader["Build"].readIfPresent(with: GameLiftClientTypes.Build.read(from:))
        return value
    }
}

extension DescribeComputeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeComputeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeComputeOutput()
        value.compute = try reader["Compute"].readIfPresent(with: GameLiftClientTypes.Compute.read(from:))
        return value
    }
}

extension DescribeContainerGroupDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeContainerGroupDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeContainerGroupDefinitionOutput()
        value.containerGroupDefinition = try reader["ContainerGroupDefinition"].readIfPresent(with: GameLiftClientTypes.ContainerGroupDefinition.read(from:))
        return value
    }
}

extension DescribeEC2InstanceLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEC2InstanceLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEC2InstanceLimitsOutput()
        value.ec2InstanceLimits = try reader["EC2InstanceLimits"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.EC2InstanceLimit.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeFleetAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetAttributesOutput()
        value.fleetAttributes = try reader["FleetAttributes"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.FleetAttributes.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFleetCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetCapacityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetCapacityOutput()
        value.fleetCapacity = try reader["FleetCapacity"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.FleetCapacity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFleetEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetEventsOutput()
        value.events = try reader["Events"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Event.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFleetLocationAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetLocationAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetLocationAttributesOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.locationAttributes = try reader["LocationAttributes"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.LocationAttributes.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeFleetLocationCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetLocationCapacityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetLocationCapacityOutput()
        value.fleetCapacity = try reader["FleetCapacity"].readIfPresent(with: GameLiftClientTypes.FleetCapacity.read(from:))
        return value
    }
}

extension DescribeFleetLocationUtilizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetLocationUtilizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetLocationUtilizationOutput()
        value.fleetUtilization = try reader["FleetUtilization"].readIfPresent(with: GameLiftClientTypes.FleetUtilization.read(from:))
        return value
    }
}

extension DescribeFleetPortSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetPortSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetPortSettingsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.inboundPermissions = try reader["InboundPermissions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.IpPermission.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.location = try reader["Location"].readIfPresent()
        value.updateStatus = try reader["UpdateStatus"].readIfPresent()
        return value
    }
}

extension DescribeFleetUtilizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFleetUtilizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFleetUtilizationOutput()
        value.fleetUtilization = try reader["FleetUtilization"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.FleetUtilization.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeGameServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameServerOutput()
        value.gameServer = try reader["GameServer"].readIfPresent(with: GameLiftClientTypes.GameServer.read(from:))
        return value
    }
}

extension DescribeGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension DescribeGameServerInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameServerInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameServerInstancesOutput()
        value.gameServerInstances = try reader["GameServerInstances"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameServerInstance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeGameSessionDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameSessionDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameSessionDetailsOutput()
        value.gameSessionDetails = try reader["GameSessionDetails"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameSessionDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeGameSessionPlacementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameSessionPlacementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameSessionPlacementOutput()
        value.gameSessionPlacement = try reader["GameSessionPlacement"].readIfPresent(with: GameLiftClientTypes.GameSessionPlacement.read(from:))
        return value
    }
}

extension DescribeGameSessionQueuesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameSessionQueuesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameSessionQueuesOutput()
        value.gameSessionQueues = try reader["GameSessionQueues"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameSessionQueue.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeGameSessionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeGameSessionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeGameSessionsOutput()
        value.gameSessions = try reader["GameSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInstancesOutput()
        value.instances = try reader["Instances"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeMatchmakingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMatchmakingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMatchmakingOutput()
        value.ticketList = try reader["TicketList"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.MatchmakingTicket.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeMatchmakingConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMatchmakingConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMatchmakingConfigurationsOutput()
        value.configurations = try reader["Configurations"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.MatchmakingConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeMatchmakingRuleSetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMatchmakingRuleSetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMatchmakingRuleSetsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.ruleSets = try reader["RuleSets"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.MatchmakingRuleSet.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribePlayerSessionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePlayerSessionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePlayerSessionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.playerSessions = try reader["PlayerSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.PlayerSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeRuntimeConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeRuntimeConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeRuntimeConfigurationOutput()
        value.runtimeConfiguration = try reader["RuntimeConfiguration"].readIfPresent(with: GameLiftClientTypes.RuntimeConfiguration.read(from:))
        return value
    }
}

extension DescribeScalingPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScalingPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScalingPoliciesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scalingPolicies = try reader["ScalingPolicies"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ScalingPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeScriptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScriptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScriptOutput()
        value.script = try reader["Script"].readIfPresent(with: GameLiftClientTypes.Script.read(from:))
        return value
    }
}

extension DescribeVpcPeeringAuthorizationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeVpcPeeringAuthorizationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeVpcPeeringAuthorizationsOutput()
        value.vpcPeeringAuthorizations = try reader["VpcPeeringAuthorizations"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.VpcPeeringAuthorization.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeVpcPeeringConnectionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeVpcPeeringConnectionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeVpcPeeringConnectionsOutput()
        value.vpcPeeringConnections = try reader["VpcPeeringConnections"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.VpcPeeringConnection.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetComputeAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComputeAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComputeAccessOutput()
        value.computeArn = try reader["ComputeArn"].readIfPresent()
        value.computeName = try reader["ComputeName"].readIfPresent()
        value.credentials = try reader["Credentials"].readIfPresent(with: GameLiftClientTypes.AwsCredentials.read(from:))
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.target = try reader["Target"].readIfPresent()
        return value
    }
}

extension GetComputeAuthTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetComputeAuthTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetComputeAuthTokenOutput()
        value.authToken = try reader["AuthToken"].readIfPresent()
        value.computeArn = try reader["ComputeArn"].readIfPresent()
        value.computeName = try reader["ComputeName"].readIfPresent()
        value.expirationTimestamp = try reader["ExpirationTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension GetGameSessionLogUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetGameSessionLogUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetGameSessionLogUrlOutput()
        value.preSignedUrl = try reader["PreSignedUrl"].readIfPresent()
        return value
    }
}

extension GetInstanceAccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetInstanceAccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetInstanceAccessOutput()
        value.instanceAccess = try reader["InstanceAccess"].readIfPresent(with: GameLiftClientTypes.InstanceAccess.read(from:))
        return value
    }
}

extension ListAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAliasesOutput()
        value.aliases = try reader["Aliases"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Alias.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListBuildsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBuildsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListBuildsOutput()
        value.builds = try reader["Builds"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Build.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListComputeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListComputeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListComputeOutput()
        value.computeList = try reader["ComputeList"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Compute.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListContainerGroupDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContainerGroupDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContainerGroupDefinitionsOutput()
        value.containerGroupDefinitions = try reader["ContainerGroupDefinitions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerGroupDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFleetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFleetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFleetsOutput()
        value.fleetIds = try reader["FleetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGameServerGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGameServerGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGameServerGroupsOutput()
        value.gameServerGroups = try reader["GameServerGroups"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameServerGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListGameServersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGameServersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGameServersOutput()
        value.gameServers = try reader["GameServers"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameServer.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLocationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLocationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLocationsOutput()
        value.locations = try reader["Locations"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.LocationModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListScriptsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListScriptsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListScriptsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scripts = try reader["Scripts"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Script.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutScalingPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutScalingPolicyOutput()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension RegisterComputeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterComputeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterComputeOutput()
        value.compute = try reader["Compute"].readIfPresent(with: GameLiftClientTypes.Compute.read(from:))
        return value
    }
}

extension RegisterGameServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterGameServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterGameServerOutput()
        value.gameServer = try reader["GameServer"].readIfPresent(with: GameLiftClientTypes.GameServer.read(from:))
        return value
    }
}

extension RequestUploadCredentialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RequestUploadCredentialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RequestUploadCredentialsOutput()
        value.storageLocation = try reader["StorageLocation"].readIfPresent(with: GameLiftClientTypes.S3Location.read(from:))
        value.uploadCredentials = try reader["UploadCredentials"].readIfPresent(with: GameLiftClientTypes.AwsCredentials.read(from:))
        return value
    }
}

extension ResolveAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResolveAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResolveAliasOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension ResumeGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResumeGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ResumeGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension SearchGameSessionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchGameSessionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchGameSessionsOutput()
        value.gameSessions = try reader["GameSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension StartFleetActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartFleetActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartFleetActionsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension StartGameSessionPlacementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartGameSessionPlacementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartGameSessionPlacementOutput()
        value.gameSessionPlacement = try reader["GameSessionPlacement"].readIfPresent(with: GameLiftClientTypes.GameSessionPlacement.read(from:))
        return value
    }
}

extension StartMatchBackfillOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMatchBackfillOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMatchBackfillOutput()
        value.matchmakingTicket = try reader["MatchmakingTicket"].readIfPresent(with: GameLiftClientTypes.MatchmakingTicket.read(from:))
        return value
    }
}

extension StartMatchmakingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMatchmakingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMatchmakingOutput()
        value.matchmakingTicket = try reader["MatchmakingTicket"].readIfPresent(with: GameLiftClientTypes.MatchmakingTicket.read(from:))
        return value
    }
}

extension StopFleetActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopFleetActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopFleetActionsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension StopGameSessionPlacementOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopGameSessionPlacementOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopGameSessionPlacementOutput()
        value.gameSessionPlacement = try reader["GameSessionPlacement"].readIfPresent(with: GameLiftClientTypes.GameSessionPlacement.read(from:))
        return value
    }
}

extension StopMatchmakingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMatchmakingOutput {
        return StopMatchmakingOutput()
    }
}

extension SuspendGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SuspendGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SuspendGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAliasOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAliasOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAliasOutput()
        value.alias = try reader["Alias"].readIfPresent(with: GameLiftClientTypes.Alias.read(from:))
        return value
    }
}

extension UpdateBuildOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBuildOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBuildOutput()
        value.build = try reader["Build"].readIfPresent(with: GameLiftClientTypes.Build.read(from:))
        return value
    }
}

extension UpdateFleetAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFleetAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFleetAttributesOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension UpdateFleetCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFleetCapacityOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFleetCapacityOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension UpdateFleetPortSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFleetPortSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFleetPortSettingsOutput()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        return value
    }
}

extension UpdateGameServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGameServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGameServerOutput()
        value.gameServer = try reader["GameServer"].readIfPresent(with: GameLiftClientTypes.GameServer.read(from:))
        return value
    }
}

extension UpdateGameServerGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGameServerGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGameServerGroupOutput()
        value.gameServerGroup = try reader["GameServerGroup"].readIfPresent(with: GameLiftClientTypes.GameServerGroup.read(from:))
        return value
    }
}

extension UpdateGameSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGameSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGameSessionOutput()
        value.gameSession = try reader["GameSession"].readIfPresent(with: GameLiftClientTypes.GameSession.read(from:))
        return value
    }
}

extension UpdateGameSessionQueueOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateGameSessionQueueOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateGameSessionQueueOutput()
        value.gameSessionQueue = try reader["GameSessionQueue"].readIfPresent(with: GameLiftClientTypes.GameSessionQueue.read(from:))
        return value
    }
}

extension UpdateMatchmakingConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMatchmakingConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMatchmakingConfigurationOutput()
        value.configuration = try reader["Configuration"].readIfPresent(with: GameLiftClientTypes.MatchmakingConfiguration.read(from:))
        return value
    }
}

extension UpdateRuntimeConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateRuntimeConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateRuntimeConfigurationOutput()
        value.runtimeConfiguration = try reader["RuntimeConfiguration"].readIfPresent(with: GameLiftClientTypes.RuntimeConfiguration.read(from:))
        return value
    }
}

extension UpdateScriptOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateScriptOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateScriptOutput()
        value.script = try reader["Script"].readIfPresent(with: GameLiftClientTypes.Script.read(from:))
        return value
    }
}

extension ValidateMatchmakingRuleSetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ValidateMatchmakingRuleSetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ValidateMatchmakingRuleSetOutput()
        value.valid = try reader["Valid"].readIfPresent()
        return value
    }
}

enum AcceptMatchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ClaimGameServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "OutOfCapacityException": return try OutOfCapacityException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContainerGroupDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "NotReadyException": return try NotReadyException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFleetLocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "NotReadyException": return try NotReadyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGameSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "FleetCapacityExceededException": return try FleetCapacityExceededException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateGameSessionQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLocationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMatchmakingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMatchmakingRuleSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePlayerSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GameSessionFullException": return try GameSessionFullException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidGameSessionStatusException": return try InvalidGameSessionStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePlayerSessionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GameSessionFullException": return try GameSessionFullException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidGameSessionStatusException": return try InvalidGameSessionStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateScriptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVpcPeeringAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateVpcPeeringConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContainerGroupDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFleetLocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGameSessionQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLocationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMatchmakingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMatchmakingRuleSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScriptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVpcPeeringAuthorizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteVpcPeeringConnectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterComputeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterGameServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeComputeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeContainerGroupDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEC2InstanceLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetLocationAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetLocationCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetLocationUtilizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetPortSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFleetUtilizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameServerInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameSessionDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameSessionPlacementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameSessionQueuesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeGameSessionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMatchmakingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMatchmakingConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMatchmakingRuleSetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePlayerSessionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeRuntimeConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScalingPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScriptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeVpcPeeringAuthorizationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeVpcPeeringConnectionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComputeAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetComputeAuthTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetGameSessionLogUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetInstanceAccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBuildsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListComputeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContainerGroupDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFleetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGameServerGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGameServersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLocationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListScriptsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterComputeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotReadyException": return try NotReadyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterGameServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RequestUploadCredentialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResolveAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResumeGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchGameSessionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TerminalRoutingStrategyException": return try TerminalRoutingStrategyException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartFleetActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartGameSessionPlacementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMatchBackfillOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMatchmakingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopFleetActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopGameSessionPlacementOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMatchmakingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SuspendGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "TaggingFailedException": return try TaggingFailedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAliasOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBuildOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFleetAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFleetCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFleetPortSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGameServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGameServerGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGameSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidGameSessionStatusException": return try InvalidGameSessionStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateGameSessionQueueOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMatchmakingConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateRuntimeConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidFleetStatusException": return try InvalidFleetStatusException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateScriptOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "UnauthorizedException": return try UnauthorizedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ValidateMatchmakingRuleSetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServiceException": return try InternalServiceException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "UnsupportedRegionException": return try UnsupportedRegionException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension UnsupportedRegionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedRegionException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedRegionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServiceException {
        let reader = baseError.errorBodyReader
        var value = InternalServiceException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OutOfCapacityException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OutOfCapacityException {
        let reader = baseError.errorBodyReader
        var value = OutOfCapacityException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnauthorizedException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TaggingFailedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TaggingFailedException {
        let reader = baseError.errorBodyReader
        var value = TaggingFailedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotReadyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotReadyException {
        let reader = baseError.errorBodyReader
        var value = NotReadyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidFleetStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidFleetStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidFleetStatusException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TerminalRoutingStrategyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TerminalRoutingStrategyException {
        let reader = baseError.errorBodyReader
        var value = TerminalRoutingStrategyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension FleetCapacityExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> FleetCapacityExceededException {
        let reader = baseError.errorBodyReader
        var value = FleetCapacityExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGameSessionStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidGameSessionStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidGameSessionStatusException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GameSessionFullException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GameSessionFullException {
        let reader = baseError.errorBodyReader
        var value = GameSessionFullException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GameLiftClientTypes.GameServer {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameServer {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameServer()
        value.gameServerGroupName = try reader["GameServerGroupName"].readIfPresent()
        value.gameServerGroupArn = try reader["GameServerGroupArn"].readIfPresent()
        value.gameServerId = try reader["GameServerId"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.connectionInfo = try reader["ConnectionInfo"].readIfPresent()
        value.gameServerData = try reader["GameServerData"].readIfPresent()
        value.claimStatus = try reader["ClaimStatus"].readIfPresent()
        value.utilizationStatus = try reader["UtilizationStatus"].readIfPresent()
        value.registrationTime = try reader["RegistrationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastClaimTime = try reader["LastClaimTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastHealthCheckTime = try reader["LastHealthCheckTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GameLiftClientTypes.Alias {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Alias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Alias()
        value.aliasId = try reader["AliasId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.aliasArn = try reader["AliasArn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.routingStrategy = try reader["RoutingStrategy"].readIfPresent(with: GameLiftClientTypes.RoutingStrategy.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GameLiftClientTypes.RoutingStrategy {

    static func write(value: GameLiftClientTypes.RoutingStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FleetId"].write(value.fleetId)
        try writer["Message"].write(value.message)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.RoutingStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.RoutingStrategy()
        value.type = try reader["Type"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Build {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Build {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Build()
        value.buildId = try reader["BuildId"].readIfPresent()
        value.buildArn = try reader["BuildArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.sizeOnDisk = try reader["SizeOnDisk"].readIfPresent()
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.serverSdkVersion = try reader["ServerSdkVersion"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.AwsCredentials {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.AwsCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.AwsCredentials()
        value.accessKeyId = try reader["AccessKeyId"].readIfPresent()
        value.secretAccessKey = try reader["SecretAccessKey"].readIfPresent()
        value.sessionToken = try reader["SessionToken"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.S3Location {

    static func write(value: GameLiftClientTypes.S3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Key"].write(value.key)
        try writer["ObjectVersion"].write(value.objectVersion)
        try writer["RoleArn"].write(value.roleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.S3Location()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.objectVersion = try reader["ObjectVersion"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.ContainerGroupDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerGroupDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerGroupDefinition()
        value.containerGroupDefinitionArn = try reader["ContainerGroupDefinitionArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.schedulingStrategy = try reader["SchedulingStrategy"].readIfPresent()
        value.totalMemoryLimit = try reader["TotalMemoryLimit"].readIfPresent()
        value.totalCpuLimit = try reader["TotalCpuLimit"].readIfPresent()
        value.containerDefinitions = try reader["ContainerDefinitions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.ContainerDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerDefinition()
        value.containerName = try reader["ContainerName"].readIfPresent() ?? ""
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.resolvedImageDigest = try reader["ResolvedImageDigest"].readIfPresent()
        value.memoryLimits = try reader["MemoryLimits"].readIfPresent(with: GameLiftClientTypes.ContainerMemoryLimits.read(from:))
        value.portConfiguration = try reader["PortConfiguration"].readIfPresent(with: GameLiftClientTypes.ContainerPortConfiguration.read(from:))
        value.cpu = try reader["Cpu"].readIfPresent()
        value.healthCheck = try reader["HealthCheck"].readIfPresent(with: GameLiftClientTypes.ContainerHealthCheck.read(from:))
        value.command = try reader["Command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.essential = try reader["Essential"].readIfPresent()
        value.entryPoint = try reader["EntryPoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.workingDirectory = try reader["WorkingDirectory"].readIfPresent()
        value.environment = try reader["Environment"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerEnvironment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dependsOn = try reader["DependsOn"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.ContainerDependency {

    static func write(value: GameLiftClientTypes.ContainerDependency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Condition"].write(value.condition)
        try writer["ContainerName"].write(value.containerName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerDependency()
        value.containerName = try reader["ContainerName"].readIfPresent() ?? ""
        value.condition = try reader["Condition"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GameLiftClientTypes.ContainerEnvironment {

    static func write(value: GameLiftClientTypes.ContainerEnvironment?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerEnvironment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerEnvironment()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension GameLiftClientTypes.ContainerHealthCheck {

    static func write(value: GameLiftClientTypes.ContainerHealthCheck?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Interval"].write(value.interval)
        try writer["Retries"].write(value.retries)
        try writer["StartPeriod"].write(value.startPeriod)
        try writer["Timeout"].write(value.timeout)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerHealthCheck {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerHealthCheck()
        value.command = try reader["Command"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.interval = try reader["Interval"].readIfPresent()
        value.timeout = try reader["Timeout"].readIfPresent()
        value.retries = try reader["Retries"].readIfPresent()
        value.startPeriod = try reader["StartPeriod"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.ContainerPortConfiguration {

    static func write(value: GameLiftClientTypes.ContainerPortConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerPortRanges"].writeList(value.containerPortRanges, memberWritingClosure: GameLiftClientTypes.ContainerPortRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerPortConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerPortConfiguration()
        value.containerPortRanges = try reader["ContainerPortRanges"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerPortRange.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension GameLiftClientTypes.ContainerPortRange {

    static func write(value: GameLiftClientTypes.ContainerPortRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FromPort"].write(value.fromPort)
        try writer["Protocol"].write(value.`protocol`)
        try writer["ToPort"].write(value.toPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerPortRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerPortRange()
        value.fromPort = try reader["FromPort"].readIfPresent() ?? 0
        value.toPort = try reader["ToPort"].readIfPresent() ?? 0
        value.`protocol` = try reader["Protocol"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GameLiftClientTypes.ContainerMemoryLimits {

    static func write(value: GameLiftClientTypes.ContainerMemoryLimits?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HardLimit"].write(value.hardLimit)
        try writer["SoftLimit"].write(value.softLimit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerMemoryLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerMemoryLimits()
        value.softLimit = try reader["SoftLimit"].readIfPresent()
        value.hardLimit = try reader["HardLimit"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.FleetAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.FleetAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.FleetAttributes()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.fleetType = try reader["FleetType"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.terminationTime = try reader["TerminationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.buildId = try reader["BuildId"].readIfPresent()
        value.buildArn = try reader["BuildArn"].readIfPresent()
        value.scriptId = try reader["ScriptId"].readIfPresent()
        value.scriptArn = try reader["ScriptArn"].readIfPresent()
        value.serverLaunchPath = try reader["ServerLaunchPath"].readIfPresent()
        value.serverLaunchParameters = try reader["ServerLaunchParameters"].readIfPresent()
        value.logPaths = try reader["LogPaths"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.newGameSessionProtectionPolicy = try reader["NewGameSessionProtectionPolicy"].readIfPresent()
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.resourceCreationLimitPolicy = try reader["ResourceCreationLimitPolicy"].readIfPresent(with: GameLiftClientTypes.ResourceCreationLimitPolicy.read(from:))
        value.metricGroups = try reader["MetricGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.stoppedActions = try reader["StoppedActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<GameLiftClientTypes.FleetAction>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceRoleArn = try reader["InstanceRoleArn"].readIfPresent()
        value.certificateConfiguration = try reader["CertificateConfiguration"].readIfPresent(with: GameLiftClientTypes.CertificateConfiguration.read(from:))
        value.computeType = try reader["ComputeType"].readIfPresent()
        value.anywhereConfiguration = try reader["AnywhereConfiguration"].readIfPresent(with: GameLiftClientTypes.AnywhereConfiguration.read(from:))
        value.instanceRoleCredentialsProvider = try reader["InstanceRoleCredentialsProvider"].readIfPresent()
        value.containerGroupsAttributes = try reader["ContainerGroupsAttributes"].readIfPresent(with: GameLiftClientTypes.ContainerGroupsAttributes.read(from:))
        return value
    }
}

extension GameLiftClientTypes.ContainerGroupsAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerGroupsAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerGroupsAttributes()
        value.containerGroupDefinitionProperties = try reader["ContainerGroupDefinitionProperties"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerGroupDefinitionProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.connectionPortRange = try reader["ConnectionPortRange"].readIfPresent(with: GameLiftClientTypes.ConnectionPortRange.read(from:))
        value.containerGroupsPerInstance = try reader["ContainerGroupsPerInstance"].readIfPresent(with: GameLiftClientTypes.ContainerGroupsPerInstance.read(from:))
        return value
    }
}

extension GameLiftClientTypes.ContainerGroupsPerInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerGroupsPerInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerGroupsPerInstance()
        value.desiredReplicaContainerGroupsPerInstance = try reader["DesiredReplicaContainerGroupsPerInstance"].readIfPresent()
        value.maxReplicaContainerGroupsPerInstance = try reader["MaxReplicaContainerGroupsPerInstance"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.ConnectionPortRange {

    static func write(value: GameLiftClientTypes.ConnectionPortRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FromPort"].write(value.fromPort)
        try writer["ToPort"].write(value.toPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ConnectionPortRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ConnectionPortRange()
        value.fromPort = try reader["FromPort"].readIfPresent() ?? 0
        value.toPort = try reader["ToPort"].readIfPresent() ?? 0
        return value
    }
}

extension GameLiftClientTypes.ContainerGroupDefinitionProperty {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerGroupDefinitionProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerGroupDefinitionProperty()
        value.schedulingStrategy = try reader["SchedulingStrategy"].readIfPresent()
        value.containerGroupDefinitionName = try reader["ContainerGroupDefinitionName"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.AnywhereConfiguration {

    static func write(value: GameLiftClientTypes.AnywhereConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Cost"].write(value.cost)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.AnywhereConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.AnywhereConfiguration()
        value.cost = try reader["Cost"].readIfPresent() ?? ""
        return value
    }
}

extension GameLiftClientTypes.CertificateConfiguration {

    static func write(value: GameLiftClientTypes.CertificateConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateType"].write(value.certificateType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.CertificateConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.CertificateConfiguration()
        value.certificateType = try reader["CertificateType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GameLiftClientTypes.ResourceCreationLimitPolicy {

    static func write(value: GameLiftClientTypes.ResourceCreationLimitPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NewGameSessionsPerCreator"].write(value.newGameSessionsPerCreator)
        try writer["PolicyPeriodInMinutes"].write(value.policyPeriodInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ResourceCreationLimitPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ResourceCreationLimitPolicy()
        value.newGameSessionsPerCreator = try reader["NewGameSessionsPerCreator"].readIfPresent()
        value.policyPeriodInMinutes = try reader["PolicyPeriodInMinutes"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.LocationState {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.LocationState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.LocationState()
        value.location = try reader["Location"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameServerGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameServerGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameServerGroup()
        value.gameServerGroupName = try reader["GameServerGroupName"].readIfPresent()
        value.gameServerGroupArn = try reader["GameServerGroupArn"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.instanceDefinitions = try reader["InstanceDefinitions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.InstanceDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.balancingStrategy = try reader["BalancingStrategy"].readIfPresent()
        value.gameServerProtectionPolicy = try reader["GameServerProtectionPolicy"].readIfPresent()
        value.autoScalingGroupArn = try reader["AutoScalingGroupArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.suspendedActions = try reader["SuspendedActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<GameLiftClientTypes.GameServerGroupAction>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTime = try reader["LastUpdatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GameLiftClientTypes.InstanceDefinition {

    static func write(value: GameLiftClientTypes.InstanceDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceType"].write(value.instanceType)
        try writer["WeightedCapacity"].write(value.weightedCapacity)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.InstanceDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.InstanceDefinition()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.weightedCapacity = try reader["WeightedCapacity"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameSession {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSession()
        value.gameSessionId = try reader["GameSessionId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.terminationTime = try reader["TerminationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.currentPlayerSessionCount = try reader["CurrentPlayerSessionCount"].readIfPresent()
        value.maximumPlayerSessionCount = try reader["MaximumPlayerSessionCount"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.gameProperties = try reader["GameProperties"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.playerSessionCreationPolicy = try reader["PlayerSessionCreationPolicy"].readIfPresent()
        value.creatorId = try reader["CreatorId"].readIfPresent()
        value.gameSessionData = try reader["GameSessionData"].readIfPresent()
        value.matchmakerData = try reader["MatchmakerData"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameProperty {

    static func write(value: GameLiftClientTypes.GameProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameProperty()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension GameLiftClientTypes.GameSessionQueue {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSessionQueue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSessionQueue()
        value.name = try reader["Name"].readIfPresent()
        value.gameSessionQueueArn = try reader["GameSessionQueueArn"].readIfPresent()
        value.timeoutInSeconds = try reader["TimeoutInSeconds"].readIfPresent()
        value.playerLatencyPolicies = try reader["PlayerLatencyPolicies"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.PlayerLatencyPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.destinations = try reader["Destinations"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameSessionQueueDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.filterConfiguration = try reader["FilterConfiguration"].readIfPresent(with: GameLiftClientTypes.FilterConfiguration.read(from:))
        value.priorityConfiguration = try reader["PriorityConfiguration"].readIfPresent(with: GameLiftClientTypes.PriorityConfiguration.read(from:))
        value.customEventData = try reader["CustomEventData"].readIfPresent()
        value.notificationTarget = try reader["NotificationTarget"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.PriorityConfiguration {

    static func write(value: GameLiftClientTypes.PriorityConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocationOrder"].writeList(value.locationOrder, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PriorityOrder"].writeList(value.priorityOrder, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.PriorityType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.PriorityConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.PriorityConfiguration()
        value.priorityOrder = try reader["PriorityOrder"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<GameLiftClientTypes.PriorityType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.locationOrder = try reader["LocationOrder"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.FilterConfiguration {

    static func write(value: GameLiftClientTypes.FilterConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowedLocations"].writeList(value.allowedLocations, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.FilterConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.FilterConfiguration()
        value.allowedLocations = try reader["AllowedLocations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.GameSessionQueueDestination {

    static func write(value: GameLiftClientTypes.GameSessionQueueDestination?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationArn"].write(value.destinationArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSessionQueueDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSessionQueueDestination()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.PlayerLatencyPolicy {

    static func write(value: GameLiftClientTypes.PlayerLatencyPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumIndividualPlayerLatencyMilliseconds"].write(value.maximumIndividualPlayerLatencyMilliseconds)
        try writer["PolicyDurationSeconds"].write(value.policyDurationSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.PlayerLatencyPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.PlayerLatencyPolicy()
        value.maximumIndividualPlayerLatencyMilliseconds = try reader["MaximumIndividualPlayerLatencyMilliseconds"].readIfPresent()
        value.policyDurationSeconds = try reader["PolicyDurationSeconds"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.LocationModel {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.LocationModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.LocationModel()
        value.locationName = try reader["LocationName"].readIfPresent()
        value.locationArn = try reader["LocationArn"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.MatchmakingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.MatchmakingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.MatchmakingConfiguration()
        value.name = try reader["Name"].readIfPresent()
        value.configurationArn = try reader["ConfigurationArn"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.gameSessionQueueArns = try reader["GameSessionQueueArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.requestTimeoutSeconds = try reader["RequestTimeoutSeconds"].readIfPresent()
        value.acceptanceTimeoutSeconds = try reader["AcceptanceTimeoutSeconds"].readIfPresent()
        value.acceptanceRequired = try reader["AcceptanceRequired"].readIfPresent()
        value.ruleSetName = try reader["RuleSetName"].readIfPresent()
        value.ruleSetArn = try reader["RuleSetArn"].readIfPresent()
        value.notificationTarget = try reader["NotificationTarget"].readIfPresent()
        value.additionalPlayerCount = try reader["AdditionalPlayerCount"].readIfPresent()
        value.customEventData = try reader["CustomEventData"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.gameProperties = try reader["GameProperties"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gameSessionData = try reader["GameSessionData"].readIfPresent()
        value.backfillMode = try reader["BackfillMode"].readIfPresent()
        value.flexMatchMode = try reader["FlexMatchMode"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.MatchmakingRuleSet {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.MatchmakingRuleSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.MatchmakingRuleSet()
        value.ruleSetName = try reader["RuleSetName"].readIfPresent()
        value.ruleSetArn = try reader["RuleSetArn"].readIfPresent()
        value.ruleSetBody = try reader["RuleSetBody"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GameLiftClientTypes.PlayerSession {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.PlayerSession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.PlayerSession()
        value.playerSessionId = try reader["PlayerSessionId"].readIfPresent()
        value.playerId = try reader["PlayerId"].readIfPresent()
        value.gameSessionId = try reader["GameSessionId"].readIfPresent()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.terminationTime = try reader["TerminationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.playerData = try reader["PlayerData"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Script {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Script {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Script()
        value.scriptId = try reader["ScriptId"].readIfPresent()
        value.scriptArn = try reader["ScriptArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        value.sizeOnDisk = try reader["SizeOnDisk"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.storageLocation = try reader["StorageLocation"].readIfPresent(with: GameLiftClientTypes.S3Location.read(from:))
        return value
    }
}

extension GameLiftClientTypes.VpcPeeringAuthorization {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.VpcPeeringAuthorization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.VpcPeeringAuthorization()
        value.gameLiftAwsAccountId = try reader["GameLiftAwsAccountId"].readIfPresent()
        value.peerVpcAwsAccountId = try reader["PeerVpcAwsAccountId"].readIfPresent()
        value.peerVpcId = try reader["PeerVpcId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationTime = try reader["ExpirationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GameLiftClientTypes.Compute {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Compute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Compute()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.computeName = try reader["ComputeName"].readIfPresent()
        value.computeArn = try reader["ComputeArn"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.computeStatus = try reader["ComputeStatus"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.gameLiftServiceSdkEndpoint = try reader["GameLiftServiceSdkEndpoint"].readIfPresent()
        value.gameLiftAgentEndpoint = try reader["GameLiftAgentEndpoint"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.containerAttributes = try reader["ContainerAttributes"].readIfPresent(with: GameLiftClientTypes.ContainerAttributes.read(from:))
        return value
    }
}

extension GameLiftClientTypes.ContainerAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerAttributes()
        value.containerPortMappings = try reader["ContainerPortMappings"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ContainerPortMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.ContainerPortMapping {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ContainerPortMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ContainerPortMapping()
        value.containerPort = try reader["ContainerPort"].readIfPresent()
        value.connectionPort = try reader["ConnectionPort"].readIfPresent()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.EC2InstanceLimit {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.EC2InstanceLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.EC2InstanceLimit()
        value.ec2InstanceType = try reader["EC2InstanceType"].readIfPresent()
        value.currentInstances = try reader["CurrentInstances"].readIfPresent()
        value.instanceLimit = try reader["InstanceLimit"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.FleetCapacity {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.FleetCapacity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.FleetCapacity()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.instanceCounts = try reader["InstanceCounts"].readIfPresent(with: GameLiftClientTypes.EC2InstanceCounts.read(from:))
        value.location = try reader["Location"].readIfPresent()
        value.replicaContainerGroupCounts = try reader["ReplicaContainerGroupCounts"].readIfPresent(with: GameLiftClientTypes.ReplicaContainerGroupCounts.read(from:))
        return value
    }
}

extension GameLiftClientTypes.ReplicaContainerGroupCounts {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ReplicaContainerGroupCounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ReplicaContainerGroupCounts()
        value.pending = try reader["PENDING"].readIfPresent()
        value.active = try reader["ACTIVE"].readIfPresent()
        value.idle = try reader["IDLE"].readIfPresent()
        value.terminating = try reader["TERMINATING"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.EC2InstanceCounts {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.EC2InstanceCounts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.EC2InstanceCounts()
        value.desired = try reader["DESIRED"].readIfPresent()
        value.minimum = try reader["MINIMUM"].readIfPresent()
        value.maximum = try reader["MAXIMUM"].readIfPresent()
        value.pending = try reader["PENDING"].readIfPresent()
        value.active = try reader["ACTIVE"].readIfPresent()
        value.idle = try reader["IDLE"].readIfPresent()
        value.terminating = try reader["TERMINATING"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Event {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Event {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Event()
        value.eventId = try reader["EventId"].readIfPresent()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.eventCode = try reader["EventCode"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.eventTime = try reader["EventTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.preSignedLogUrl = try reader["PreSignedLogUrl"].readIfPresent()
        value.count = try reader["Count"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.LocationAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.LocationAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.LocationAttributes()
        value.locationState = try reader["LocationState"].readIfPresent(with: GameLiftClientTypes.LocationState.read(from:))
        value.stoppedActions = try reader["StoppedActions"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<GameLiftClientTypes.FleetAction>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.updateStatus = try reader["UpdateStatus"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.FleetUtilization {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.FleetUtilization {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.FleetUtilization()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.activeServerProcessCount = try reader["ActiveServerProcessCount"].readIfPresent()
        value.activeGameSessionCount = try reader["ActiveGameSessionCount"].readIfPresent()
        value.currentPlayerSessionCount = try reader["CurrentPlayerSessionCount"].readIfPresent()
        value.maximumPlayerSessionCount = try reader["MaximumPlayerSessionCount"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.IpPermission {

    static func write(value: GameLiftClientTypes.IpPermission?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FromPort"].write(value.fromPort)
        try writer["IpRange"].write(value.ipRange)
        try writer["Protocol"].write(value.`protocol`)
        try writer["ToPort"].write(value.toPort)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.IpPermission {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.IpPermission()
        value.fromPort = try reader["FromPort"].readIfPresent() ?? 0
        value.toPort = try reader["ToPort"].readIfPresent() ?? 0
        value.ipRange = try reader["IpRange"].readIfPresent() ?? ""
        value.`protocol` = try reader["Protocol"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension GameLiftClientTypes.GameServerInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameServerInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameServerInstance()
        value.gameServerGroupName = try reader["GameServerGroupName"].readIfPresent()
        value.gameServerGroupArn = try reader["GameServerGroupArn"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.instanceStatus = try reader["InstanceStatus"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameSessionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSessionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSessionDetail()
        value.gameSession = try reader["GameSession"].readIfPresent(with: GameLiftClientTypes.GameSession.read(from:))
        value.protectionPolicy = try reader["ProtectionPolicy"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameSessionPlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSessionPlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSessionPlacement()
        value.placementId = try reader["PlacementId"].readIfPresent()
        value.gameSessionQueueName = try reader["GameSessionQueueName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.gameProperties = try reader["GameProperties"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.GameProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maximumPlayerSessionCount = try reader["MaximumPlayerSessionCount"].readIfPresent()
        value.gameSessionName = try reader["GameSessionName"].readIfPresent()
        value.gameSessionId = try reader["GameSessionId"].readIfPresent()
        value.gameSessionArn = try reader["GameSessionArn"].readIfPresent()
        value.gameSessionRegion = try reader["GameSessionRegion"].readIfPresent()
        value.playerLatencies = try reader["PlayerLatencies"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.PlayerLatency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.placedPlayerSessions = try reader["PlacedPlayerSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.PlacedPlayerSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gameSessionData = try reader["GameSessionData"].readIfPresent()
        value.matchmakerData = try reader["MatchmakerData"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.PlacedPlayerSession {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.PlacedPlayerSession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.PlacedPlayerSession()
        value.playerId = try reader["PlayerId"].readIfPresent()
        value.playerSessionId = try reader["PlayerSessionId"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.PlayerLatency {

    static func write(value: GameLiftClientTypes.PlayerLatency?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LatencyInMilliseconds"].write(value.latencyInMilliseconds)
        try writer["PlayerId"].write(value.playerId)
        try writer["RegionIdentifier"].write(value.regionIdentifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.PlayerLatency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.PlayerLatency()
        value.playerId = try reader["PlayerId"].readIfPresent()
        value.regionIdentifier = try reader["RegionIdentifier"].readIfPresent()
        value.latencyInMilliseconds = try reader["LatencyInMilliseconds"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Instance {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Instance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Instance()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.MatchmakingTicket {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.MatchmakingTicket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.MatchmakingTicket()
        value.ticketId = try reader["TicketId"].readIfPresent()
        value.configurationName = try reader["ConfigurationName"].readIfPresent()
        value.configurationArn = try reader["ConfigurationArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.players = try reader["Players"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.Player.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.gameSessionConnectionInfo = try reader["GameSessionConnectionInfo"].readIfPresent(with: GameLiftClientTypes.GameSessionConnectionInfo.read(from:))
        value.estimatedWaitTime = try reader["EstimatedWaitTime"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.GameSessionConnectionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.GameSessionConnectionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.GameSessionConnectionInfo()
        value.gameSessionArn = try reader["GameSessionArn"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.dnsName = try reader["DnsName"].readIfPresent()
        value.port = try reader["Port"].readIfPresent()
        value.matchedPlayerSessions = try reader["MatchedPlayerSessions"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.MatchedPlayerSession.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.MatchedPlayerSession {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.MatchedPlayerSession {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.MatchedPlayerSession()
        value.playerId = try reader["PlayerId"].readIfPresent()
        value.playerSessionId = try reader["PlayerSessionId"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Player {

    static func write(value: GameLiftClientTypes.Player?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LatencyInMs"].writeMap(value.latencyInMs, valueWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PlayerAttributes"].writeMap(value.playerAttributes, valueWritingClosure: GameLiftClientTypes.AttributeValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PlayerId"].write(value.playerId)
        try writer["Team"].write(value.team)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Player {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Player()
        value.playerId = try reader["PlayerId"].readIfPresent()
        value.playerAttributes = try reader["PlayerAttributes"].readMapIfPresent(valueReadingClosure: GameLiftClientTypes.AttributeValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.team = try reader["Team"].readIfPresent()
        value.latencyInMs = try reader["LatencyInMs"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.AttributeValue {

    static func write(value: GameLiftClientTypes.AttributeValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["N"].write(value.n)
        try writer["S"].write(value.s)
        try writer["SDM"].writeMap(value.sdm, valueWritingClosure: SmithyReadWrite.WritingClosures.writeDouble(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["SL"].writeList(value.sl, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.AttributeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.AttributeValue()
        value.s = try reader["S"].readIfPresent()
        value.n = try reader["N"].readIfPresent()
        value.sl = try reader["SL"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sdm = try reader["SDM"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GameLiftClientTypes.RuntimeConfiguration {

    static func write(value: GameLiftClientTypes.RuntimeConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GameSessionActivationTimeoutSeconds"].write(value.gameSessionActivationTimeoutSeconds)
        try writer["MaxConcurrentGameSessionActivations"].write(value.maxConcurrentGameSessionActivations)
        try writer["ServerProcesses"].writeList(value.serverProcesses, memberWritingClosure: GameLiftClientTypes.ServerProcess.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.RuntimeConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.RuntimeConfiguration()
        value.serverProcesses = try reader["ServerProcesses"].readListIfPresent(memberReadingClosure: GameLiftClientTypes.ServerProcess.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maxConcurrentGameSessionActivations = try reader["MaxConcurrentGameSessionActivations"].readIfPresent()
        value.gameSessionActivationTimeoutSeconds = try reader["GameSessionActivationTimeoutSeconds"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.ServerProcess {

    static func write(value: GameLiftClientTypes.ServerProcess?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConcurrentExecutions"].write(value.concurrentExecutions)
        try writer["LaunchPath"].write(value.launchPath)
        try writer["Parameters"].write(value.parameters)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ServerProcess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ServerProcess()
        value.launchPath = try reader["LaunchPath"].readIfPresent() ?? ""
        value.parameters = try reader["Parameters"].readIfPresent()
        value.concurrentExecutions = try reader["ConcurrentExecutions"].readIfPresent() ?? 0
        return value
    }
}

extension GameLiftClientTypes.ScalingPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.ScalingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.ScalingPolicy()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.scalingAdjustment = try reader["ScalingAdjustment"].readIfPresent()
        value.scalingAdjustmentType = try reader["ScalingAdjustmentType"].readIfPresent()
        value.comparisonOperator = try reader["ComparisonOperator"].readIfPresent()
        value.threshold = try reader["Threshold"].readIfPresent()
        value.evaluationPeriods = try reader["EvaluationPeriods"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.policyType = try reader["PolicyType"].readIfPresent()
        value.targetConfiguration = try reader["TargetConfiguration"].readIfPresent(with: GameLiftClientTypes.TargetConfiguration.read(from:))
        value.updateStatus = try reader["UpdateStatus"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.TargetConfiguration {

    static func write(value: GameLiftClientTypes.TargetConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TargetValue"].write(value.targetValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.TargetConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.TargetConfiguration()
        value.targetValue = try reader["TargetValue"].readIfPresent() ?? 0.0
        return value
    }
}

extension GameLiftClientTypes.VpcPeeringConnection {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.VpcPeeringConnection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.VpcPeeringConnection()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.fleetArn = try reader["FleetArn"].readIfPresent()
        value.ipV4CidrBlock = try reader["IpV4CidrBlock"].readIfPresent()
        value.vpcPeeringConnectionId = try reader["VpcPeeringConnectionId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent(with: GameLiftClientTypes.VpcPeeringConnectionStatus.read(from:))
        value.peerVpcId = try reader["PeerVpcId"].readIfPresent()
        value.gameLiftVpcId = try reader["GameLiftVpcId"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.VpcPeeringConnectionStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.VpcPeeringConnectionStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.VpcPeeringConnectionStatus()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.InstanceAccess {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.InstanceAccess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.InstanceAccess()
        value.fleetId = try reader["FleetId"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.ipAddress = try reader["IpAddress"].readIfPresent()
        value.operatingSystem = try reader["OperatingSystem"].readIfPresent()
        value.credentials = try reader["Credentials"].readIfPresent(with: GameLiftClientTypes.InstanceCredentials.read(from:))
        return value
    }
}

extension GameLiftClientTypes.InstanceCredentials {

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.InstanceCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.InstanceCredentials()
        value.userName = try reader["UserName"].readIfPresent()
        value.secret = try reader["Secret"].readIfPresent()
        return value
    }
}

extension GameLiftClientTypes.Tag {

    static func write(value: GameLiftClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> GameLiftClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = GameLiftClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension GameLiftClientTypes.ClaimFilterOption {

    static func write(value: GameLiftClientTypes.ClaimFilterOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceStatuses"].writeList(value.instanceStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<GameLiftClientTypes.FilterInstanceStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension GameLiftClientTypes.ContainerDefinitionInput {

    static func write(value: GameLiftClientTypes.ContainerDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Command"].writeList(value.command, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerName"].write(value.containerName)
        try writer["Cpu"].write(value.cpu)
        try writer["DependsOn"].writeList(value.dependsOn, memberWritingClosure: GameLiftClientTypes.ContainerDependency.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EntryPoint"].writeList(value.entryPoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Environment"].writeList(value.environment, memberWritingClosure: GameLiftClientTypes.ContainerEnvironment.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Essential"].write(value.essential)
        try writer["HealthCheck"].write(value.healthCheck, with: GameLiftClientTypes.ContainerHealthCheck.write(value:to:))
        try writer["ImageUri"].write(value.imageUri)
        try writer["MemoryLimits"].write(value.memoryLimits, with: GameLiftClientTypes.ContainerMemoryLimits.write(value:to:))
        try writer["PortConfiguration"].write(value.portConfiguration, with: GameLiftClientTypes.ContainerPortConfiguration.write(value:to:))
        try writer["WorkingDirectory"].write(value.workingDirectory)
    }
}

extension GameLiftClientTypes.LocationConfiguration {

    static func write(value: GameLiftClientTypes.LocationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Location"].write(value.location)
    }
}

extension GameLiftClientTypes.ContainerGroupsConfiguration {

    static func write(value: GameLiftClientTypes.ContainerGroupsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConnectionPortRange"].write(value.connectionPortRange, with: GameLiftClientTypes.ConnectionPortRange.write(value:to:))
        try writer["ContainerGroupDefinitionNames"].writeList(value.containerGroupDefinitionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DesiredReplicaContainerGroupsPerInstance"].write(value.desiredReplicaContainerGroupsPerInstance)
    }
}

extension GameLiftClientTypes.LaunchTemplateSpecification {

    static func write(value: GameLiftClientTypes.LaunchTemplateSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LaunchTemplateId"].write(value.launchTemplateId)
        try writer["LaunchTemplateName"].write(value.launchTemplateName)
        try writer["Version"].write(value.version)
    }
}

extension GameLiftClientTypes.GameServerGroupAutoScalingPolicy {

    static func write(value: GameLiftClientTypes.GameServerGroupAutoScalingPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EstimatedInstanceWarmup"].write(value.estimatedInstanceWarmup)
        try writer["TargetTrackingConfiguration"].write(value.targetTrackingConfiguration, with: GameLiftClientTypes.TargetTrackingConfiguration.write(value:to:))
    }
}

extension GameLiftClientTypes.TargetTrackingConfiguration {

    static func write(value: GameLiftClientTypes.TargetTrackingConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TargetValue"].write(value.targetValue)
    }
}

extension GameLiftClientTypes.DesiredPlayerSession {

    static func write(value: GameLiftClientTypes.DesiredPlayerSession?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PlayerData"].write(value.playerData)
        try writer["PlayerId"].write(value.playerId)
    }
}

public enum GameLiftClientTypes {}
