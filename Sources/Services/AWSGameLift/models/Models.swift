// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AcceptMatchInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceType = "AcceptanceType"
        case playerIds = "PlayerIds"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceType = self.acceptanceType {
            try encodeContainer.encode(acceptanceType.rawValue, forKey: .acceptanceType)
        }
        if let playerIds = playerIds {
            var playerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerIds)
            for nonzeroandmaxstring0 in playerIds {
                try playerIdsContainer.encode(nonzeroandmaxstring0)
            }
        }
        if let ticketId = self.ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

extension AcceptMatchInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AcceptMatchInput: Swift.Equatable {
    /// Player response to the proposed match.
    /// This member is required.
    public var acceptanceType: GameLiftClientTypes.AcceptanceType?
    /// A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.
    /// This member is required.
    public var playerIds: [Swift.String]?
    /// A unique identifier for a matchmaking ticket. The ticket must be in status REQUIRES_ACCEPTANCE; otherwise this request will fail.
    /// This member is required.
    public var ticketId: Swift.String?

    public init (
        acceptanceType: GameLiftClientTypes.AcceptanceType? = nil,
        playerIds: [Swift.String]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.acceptanceType = acceptanceType
        self.playerIds = playerIds
        self.ticketId = ticketId
    }
}

struct AcceptMatchInputBody: Swift.Equatable {
    let ticketId: Swift.String?
    let playerIds: [Swift.String]?
    let acceptanceType: GameLiftClientTypes.AcceptanceType?
}

extension AcceptMatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceType = "AcceptanceType"
        case playerIds = "PlayerIds"
        case ticketId = "TicketId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .playerIds)
        var playerIdsDecoded0:[Swift.String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [Swift.String]()
            for string0 in playerIdsContainer {
                if let string0 = string0 {
                    playerIdsDecoded0?.append(string0)
                }
            }
        }
        playerIds = playerIdsDecoded0
        let acceptanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AcceptanceType.self, forKey: .acceptanceType)
        acceptanceType = acceptanceTypeDecoded
    }
}

extension AcceptMatchOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptMatchOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcceptMatchOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptMatchOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AcceptMatchOutputResponse: Swift.Equatable {

    public init () { }
}

extension GameLiftClientTypes {
    public enum AcceptanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accept
        case reject
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceptanceType] {
            return [
                .accept,
                .reject,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accept: return "ACCEPT"
            case .reject: return "REJECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AcceptanceType(rawValue: rawValue) ?? AcceptanceType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.Alias: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasArn = "AliasArn"
        case aliasId = "AliasId"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasArn = self.aliasArn {
            try encodeContainer.encode(aliasArn, forKey: .aliasArn)
        }
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encodeTimestamp(lastUpdatedTime, format: .epochSeconds, forKey: .lastUpdatedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = self.routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let aliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasArn)
        aliasArn = aliasArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// Properties that describe an alias resource. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Alias: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift alias resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::alias/alias-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift alias ARN, the resource ID matches the alias ID value.
        public var aliasArn: Swift.String?
        /// A unique identifier for the alias. Alias IDs are unique within a Region.
        public var aliasId: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A human-readable description of an alias.
        public var description: Swift.String?
        /// The time that this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var lastUpdatedTime: ClientRuntime.Date?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public var name: Swift.String?
        /// The routing configuration, including routing type and fleet target, for the alias.
        public var routingStrategy: GameLiftClientTypes.RoutingStrategy?

        public init (
            aliasArn: Swift.String? = nil,
            aliasId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil
        )
        {
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.creationTime = creationTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.routingStrategy = routingStrategy
        }
    }

}

extension GameLiftClientTypes.AnywhereConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cost = "Cost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cost = self.cost {
            try encodeContainer.encode(cost, forKey: .cost)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cost)
        cost = costDecoded
    }
}

extension GameLiftClientTypes {
    /// GameLift Anywhere configuration options for your Anywhere fleets.
    public struct AnywhereConfiguration: Swift.Equatable {
        /// The cost to run your fleet per hour. GameLift uses the provided cost of your fleet to balance usage in queues. For more information about queues, see [Setting up queues](https://docs.aws.amazon.com/gamelift/latest/developerguide/queues-intro.html).
        /// This member is required.
        public var cost: Swift.String?

        public init (
            cost: Swift.String? = nil
        )
        {
            self.cost = cost
        }
    }

}

extension GameLiftClientTypes.AttributeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case n = "N"
        case s = "S"
        case sdm = "SDM"
        case sl = "SL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let n = self.n {
            try encodeContainer.encode(n, forKey: .n)
        }
        if let s = self.s {
            try encodeContainer.encode(s, forKey: .s)
        }
        if let sdm = sdm {
            var sdmContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sdm)
            for (dictKey0, playerAttributeStringDoubleMap0) in sdm {
                try sdmContainer.encode(playerAttributeStringDoubleMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sl = sl {
            var slContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sl)
            for playerattributestring0 in sl {
                try slContainer.encode(playerattributestring0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s)
        s = sDecoded
        let nDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .n)
        n = nDecoded
        let slContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sl)
        var slDecoded0:[Swift.String]? = nil
        if let slContainer = slContainer {
            slDecoded0 = [Swift.String]()
            for string0 in slContainer {
                if let string0 = string0 {
                    slDecoded0?.append(string0)
                }
            }
        }
        sl = slDecoded0
        let sdmContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .sdm)
        var sdmDecoded0: [Swift.String:Swift.Double]? = nil
        if let sdmContainer = sdmContainer {
            sdmDecoded0 = [Swift.String:Swift.Double]()
            for (key0, doubleobject0) in sdmContainer {
                if let doubleobject0 = doubleobject0 {
                    sdmDecoded0?[key0] = doubleobject0
                }
            }
        }
        sdm = sdmDecoded0
    }
}

extension GameLiftClientTypes {
    /// Values for use in player attribute key-value pairs. This object lets you specify an attribute value using any of the valid data types: string, number, string array, or data map. Each AttributeValue object can use only one of the available properties.
    public struct AttributeValue: Swift.Equatable {
        /// For number values, expressed as double.
        public var n: Swift.Double?
        /// For single string values. Maximum string length is 100 characters.
        public var s: Swift.String?
        /// For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters.
        public var sdm: [Swift.String:Swift.Double]?
        /// For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.
        public var sl: [Swift.String]?

        public init (
            n: Swift.Double? = nil,
            s: Swift.String? = nil,
            sdm: [Swift.String:Swift.Double]? = nil,
            sl: [Swift.String]? = nil
        )
        {
            self.n = n
            self.s = s
            self.sdm = sdm
            self.sl = sl
        }
    }

}

extension GameLiftClientTypes.AwsCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case secretAccessKey = "SecretAccessKey"
        case sessionToken = "SessionToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let secretAccessKey = self.secretAccessKey {
            try encodeContainer.encode(secretAccessKey, forKey: .secretAccessKey)
        }
        if let sessionToken = self.sessionToken {
            try encodeContainer.encode(sessionToken, forKey: .sessionToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let sessionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionToken)
        sessionToken = sessionTokenDecoded
    }
}

extension GameLiftClientTypes.AwsCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension GameLiftClientTypes {
    /// Temporary access credentials used for uploading game build files to Amazon GameLift. They are valid for a limited time. If they expire before you upload your game build, get a new set by calling [RequestUploadCredentials](https://docs.aws.amazon.com/gamelift/latest/apireference/API_RequestUploadCredentials.html).
    public struct AwsCredentials: Swift.Equatable {
        /// Temporary key allowing access to the Amazon GameLift S3 account.
        public var accessKeyId: Swift.String?
        /// Temporary secret key allowing access to the Amazon GameLift S3 account.
        public var secretAccessKey: Swift.String?
        /// Token used to associate a specific build ID with the files uploaded using these credentials.
        public var sessionToken: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension GameLiftClientTypes {
    public enum BackfillMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [BackfillMode] {
            return [
                .automatic,
                .manual,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackfillMode(rawValue: rawValue) ?? BackfillMode.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum BalancingStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case onDemandOnly
        case spotOnly
        case spotPreferred
        case sdkUnknown(Swift.String)

        public static var allCases: [BalancingStrategy] {
            return [
                .onDemandOnly,
                .spotOnly,
                .spotPreferred,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .onDemandOnly: return "ON_DEMAND_ONLY"
            case .spotOnly: return "SPOT_ONLY"
            case .spotPreferred: return "SPOT_PREFERRED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BalancingStrategy(rawValue: rawValue) ?? BalancingStrategy.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.Build: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case creationTime = "CreationTime"
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case serverSdkVersion = "ServerSdkVersion"
        case sizeOnDisk = "SizeOnDisk"
        case status = "Status"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildArn = self.buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let serverSdkVersion = self.serverSdkVersion {
            try encodeContainer.encode(serverSdkVersion, forKey: .serverSdkVersion)
        }
        if let sizeOnDisk = self.sizeOnDisk {
            try encodeContainer.encode(sizeOnDisk, forKey: .sizeOnDisk)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BuildStatus.self, forKey: .status)
        status = statusDecoded
        let sizeOnDiskDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeOnDisk)
        sizeOnDisk = sizeOnDiskDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let serverSdkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSdkVersion)
        serverSdkVersion = serverSdkVersionDecoded
    }
}

extension GameLiftClientTypes {
    /// Properties describing a custom game build. [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Build: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) assigned to a GameLift build resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::build/build-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift build ARN, the resource ID matches the BuildId value.
        public var buildArn: Swift.String?
        /// A unique identifier for the build.
        public var buildId: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A descriptive label associated with a build. Build names do not need to be unique. It can be set using [CreateBuild](https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateBuild.html) or [UpdateBuild](https://docs.aws.amazon.com/gamelift/latest/apireference/UpdateBuild).
        public var name: Swift.String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// The GameLift Server SDK version used to develop your game server.
        public var serverSdkVersion: Swift.String?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED or when using a custom Amazon S3 storage location, this value is 0.
        public var sizeOnDisk: Swift.Int?
        /// Current status of the build. Possible build statuses include the following:
        ///
        /// * INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.
        ///
        /// * READY -- The game build has been successfully uploaded. You can now create new fleets for this build.
        ///
        /// * FAILED -- The game build upload failed. You cannot create new fleets for this build.
        public var status: GameLiftClientTypes.BuildStatus?
        /// Version information associated with a build or script. Version strings do not need to be unique.
        public var version: Swift.String?

        public init (
            buildArn: Swift.String? = nil,
            buildId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            serverSdkVersion: Swift.String? = nil,
            sizeOnDisk: Swift.Int? = nil,
            status: GameLiftClientTypes.BuildStatus? = nil,
            version: Swift.String? = nil
        )
        {
            self.buildArn = buildArn
            self.buildId = buildId
            self.creationTime = creationTime
            self.name = name
            self.operatingSystem = operatingSystem
            self.serverSdkVersion = serverSdkVersion
            self.sizeOnDisk = sizeOnDisk
            self.status = status
            self.version = version
        }
    }

}

extension GameLiftClientTypes {
    public enum BuildStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case initialized
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [BuildStatus] {
            return [
                .failed,
                .initialized,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .initialized: return "INITIALIZED"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BuildStatus(rawValue: rawValue) ?? BuildStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.CertificateConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateType = "CertificateType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateType = self.certificateType {
            try encodeContainer.encode(certificateType.rawValue, forKey: .certificateType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.CertificateType.self, forKey: .certificateType)
        certificateType = certificateTypeDecoded
    }
}

extension GameLiftClientTypes {
    /// Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the [GameLift Server SDK](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html) operation GetInstanceCertificate.
    public struct CertificateConfiguration: Swift.Equatable {
        /// Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values include:
        ///
        /// * GENERATED - Generate a TLS/SSL certificate for this fleet.
        ///
        /// * DISABLED - (default) Do not generate a TLS/SSL certificate for this fleet.
        /// This member is required.
        public var certificateType: GameLiftClientTypes.CertificateType?

        public init (
            certificateType: GameLiftClientTypes.CertificateType? = nil
        )
        {
            self.certificateType = certificateType
        }
    }

}

extension GameLiftClientTypes {
    public enum CertificateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case generated
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateType] {
            return [
                .disabled,
                .generated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .generated: return "GENERATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateType(rawValue: rawValue) ?? CertificateType.sdkUnknown(rawValue)
        }
    }
}

extension ClaimGameServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerData = self.gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

extension ClaimGameServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ClaimGameServerInput: Swift.Equatable {
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running. If you are not specifying a game server to claim, this value identifies where you want GameLift FleetIQ to look for an available game server to claim.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to claim. If this parameter is left empty, GameLift FleetIQ searches for an available game server in the specified game server group.
    public var gameServerId: Swift.String?

    public init (
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct ClaimGameServerInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let gameServerId: Swift.String?
    let gameServerData: Swift.String?
}

extension ClaimGameServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
    }
}

extension ClaimGameServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ClaimGameServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OutOfCapacityException" : self = .outOfCapacityException(try OutOfCapacityException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ClaimGameServerOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case outOfCapacityException(OutOfCapacityException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ClaimGameServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ClaimGameServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct ClaimGameServerOutputResponse: Swift.Equatable {
    /// Object that describes the newly claimed game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init (
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct ClaimGameServerOutputResponseBody: Swift.Equatable {
    let gameServer: GameLiftClientTypes.GameServer?
}

extension ClaimGameServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

extension GameLiftClientTypes {
    public enum ComparisonOperatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperatorType] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperatorType(rawValue: rawValue) ?? ComparisonOperatorType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.Compute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeArn = "ComputeArn"
        case computeName = "ComputeName"
        case computeStatus = "ComputeStatus"
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameLiftServiceSdkEndpoint = "GameLiftServiceSdkEndpoint"
        case ipAddress = "IpAddress"
        case location = "Location"
        case operatingSystem = "OperatingSystem"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeArn = self.computeArn {
            try encodeContainer.encode(computeArn, forKey: .computeArn)
        }
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let computeStatus = self.computeStatus {
            try encodeContainer.encode(computeStatus.rawValue, forKey: .computeStatus)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameLiftServiceSdkEndpoint = self.gameLiftServiceSdkEndpoint {
            try encodeContainer.encode(gameLiftServiceSdkEndpoint, forKey: .gameLiftServiceSdkEndpoint)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
        let computeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeArn)
        computeArn = computeArnDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let computeStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComputeStatus.self, forKey: .computeStatus)
        computeStatus = computeStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .type)
        type = typeDecoded
        let gameLiftServiceSdkEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftServiceSdkEndpoint)
        gameLiftServiceSdkEndpoint = gameLiftServiceSdkEndpointDecoded
    }
}

extension GameLiftClientTypes {
    /// Resources used to host your game servers. A compute resource can be managed GameLift Amazon EC2 instances or your own resources.
    public struct Compute: Swift.Equatable {
        /// The ARN that is assigned to the compute resource and uniquely identifies it. ARNs are unique across locations.
        public var computeArn: Swift.String?
        /// A descriptive label that is associated with the compute resource registered to your fleet.
        public var computeName: Swift.String?
        /// Current status of the compute. A compute must have an ACTIVE status to host game sessions.
        public var computeStatus: GameLiftClientTypes.ComputeStatus?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// The DNS name of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name (ARN) of the fleet that the compute is registered to.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the compute is registered to.
        public var fleetId: Swift.String?
        /// The endpoint connection details of the GameLift SDK endpoint that your game server connects to.
        public var gameLiftServiceSdkEndpoint: Swift.String?
        /// The IP address of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.
        public var ipAddress: Swift.String?
        /// The name of the custom location you added to the fleet that this compute resource resides in.
        public var location: Swift.String?
        /// The type of operating system on your compute resource.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// Which compute type that the fleet uses. A fleet can use Anywhere compute resources owned by you or managed Amazon EC2 instances.
        public var type: GameLiftClientTypes.EC2InstanceType?

        public init (
            computeArn: Swift.String? = nil,
            computeName: Swift.String? = nil,
            computeStatus: GameLiftClientTypes.ComputeStatus? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameLiftServiceSdkEndpoint: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            type: GameLiftClientTypes.EC2InstanceType? = nil
        )
        {
            self.computeArn = computeArn
            self.computeName = computeName
            self.computeStatus = computeStatus
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameLiftServiceSdkEndpoint = gameLiftServiceSdkEndpoint
            self.ipAddress = ipAddress
            self.location = location
            self.operatingSystem = operatingSystem
            self.type = type
        }
    }

}

extension GameLiftClientTypes {
    public enum ComputeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case pending
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeStatus] {
            return [
                .active,
                .pending,
                .terminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pending: return "PENDING"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeStatus(rawValue: rawValue) ?? ComputeStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum ComputeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anywhere
        case ec2
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputeType] {
            return [
                .anywhere,
                .ec2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anywhere: return "ANYWHERE"
            case .ec2: return "EC2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputeType(rawValue: rawValue) ?? ComputeType.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = self.routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateAliasInput: Swift.Equatable {
    /// A human-readable description of the alias.
    public var description: Swift.String?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?
    /// The routing configuration, including routing type and fleet target, for the alias.
    /// This member is required.
    public var routingStrategy: GameLiftClientTypes.RoutingStrategy?
    /// A list of labels to assign to the new alias resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
        self.tags = tags
    }
}

struct CreateAliasInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let routingStrategy: GameLiftClientTypes.RoutingStrategy?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateAliasOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct CreateAliasOutputResponse: Swift.Equatable {
    /// The newly created alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init (
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct CreateAliasOutputResponseBody: Swift.Equatable {
    let alias: GameLiftClientTypes.Alias?
}

extension CreateAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension CreateBuildInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case serverSdkVersion = "ServerSdkVersion"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let serverSdkVersion = self.serverSdkVersion {
            try encodeContainer.encode(serverSdkVersion, forKey: .serverSdkVersion)
        }
        if let storageLocation = self.storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension CreateBuildInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBuildInput: Swift.Equatable {
    /// A descriptive label associated with a build. Build names do not need to be unique. You can change this value later.
    public var name: Swift.String?
    /// The operating system that you built the game server binaries to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
    public var operatingSystem: GameLiftClientTypes.OperatingSystem?
    /// A server SDK version you used when integrating your game server build with GameLift. For more information see [Integrate games with custom game servers](https://docs.aws.amazon.com/gamelift/latest/developerguide/integration-custom-intro.html).
    public var serverSdkVersion: Swift.String?
    /// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region. If a StorageLocation is specified, the size of your file can be found in your Amazon S3 bucket. Amazon GameLift will report a SizeOnDisk of 0.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// A list of labels to assign to the new build resource. Tags are developer defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html) to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?
    /// Version information associated with a build or script. Version strings do not need to be unique. You can change this value later.
    public var version: Swift.String?

    public init (
        name: Swift.String? = nil,
        operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
        serverSdkVersion: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        version: Swift.String? = nil
    )
    {
        self.name = name
        self.operatingSystem = operatingSystem
        self.serverSdkVersion = serverSdkVersion
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
    }
}

struct CreateBuildInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.String?
    let storageLocation: GameLiftClientTypes.S3Location?
    let operatingSystem: GameLiftClientTypes.OperatingSystem?
    let tags: [GameLiftClientTypes.Tag]?
    let serverSdkVersion: Swift.String?
}

extension CreateBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case serverSdkVersion = "ServerSdkVersion"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let serverSdkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSdkVersion)
        serverSdkVersion = serverSdkVersionDecoded
    }
}

extension CreateBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBuildOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBuildOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateBuildOutputResponse(build: \(Swift.String(describing: build)), storageLocation: \(Swift.String(describing: storageLocation)), uploadCredentials: \"CONTENT_REDACTED\")"}
}

extension CreateBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
            self.storageLocation = output.storageLocation
            self.uploadCredentials = output.uploadCredentials
        } else {
            self.build = nil
            self.storageLocation = nil
            self.uploadCredentials = nil
        }
    }
}

public struct CreateBuildOutputResponse: Swift.Equatable {
    /// The newly created build resource, including a unique build IDs and status.
    public var build: GameLiftClientTypes.Build?
    /// Amazon S3 location for your game build file, including bucket name and key.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call [RequestUploadCredentials](https://docs.aws.amazon.com/gamelift/latest/apireference/API_RequestUploadCredentials.html).
    public var uploadCredentials: GameLiftClientTypes.AwsCredentials?

    public init (
        build: GameLiftClientTypes.Build? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        uploadCredentials: GameLiftClientTypes.AwsCredentials? = nil
    )
    {
        self.build = build
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

struct CreateBuildOutputResponseBody: Swift.Equatable {
    let build: GameLiftClientTypes.Build?
    let uploadCredentials: GameLiftClientTypes.AwsCredentials?
    let storageLocation: GameLiftClientTypes.S3Location?
}

extension CreateBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build = "Build"
        case storageLocation = "StorageLocation"
        case uploadCredentials = "UploadCredentials"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Build.self, forKey: .build)
        build = buildDecoded
        let uploadCredentialsDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AwsCredentials.self, forKey: .uploadCredentials)
        uploadCredentials = uploadCredentialsDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

extension CreateFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anywhereConfiguration = "AnywhereConfiguration"
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case computeType = "ComputeType"
        case description = "Description"
        case ec2InboundPermissions = "EC2InboundPermissions"
        case ec2InstanceType = "EC2InstanceType"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case locations = "Locations"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case runtimeConfiguration = "RuntimeConfiguration"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anywhereConfiguration = self.anywhereConfiguration {
            try encodeContainer.encode(anywhereConfiguration, forKey: .anywhereConfiguration)
        }
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = self.certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let computeType = self.computeType {
            try encodeContainer.encode(computeType.rawValue, forKey: .computeType)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let ec2InboundPermissions = ec2InboundPermissions {
            var ec2InboundPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InboundPermissions)
            for ippermission0 in ec2InboundPermissions {
                try ec2InboundPermissionsContainer.encode(ippermission0)
            }
        }
        if let ec2InstanceType = self.ec2InstanceType {
            try encodeContainer.encode(ec2InstanceType.rawValue, forKey: .ec2InstanceType)
        }
        if let fleetType = self.fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = self.instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationconfiguration0 in locations {
                try locationsContainer.encode(locationconfiguration0)
            }
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for nonzeroandmaxstring0 in logPaths {
                try logPathsContainer.encode(nonzeroandmaxstring0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgroup0 in metricGroups {
                try metricGroupsContainer.encode(metricgroup0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = self.newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let peerVpcAwsAccountId = self.peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
        if let resourceCreationLimitPolicy = self.resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let runtimeConfiguration = self.runtimeConfiguration {
            try encodeContainer.encode(runtimeConfiguration, forKey: .runtimeConfiguration)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = self.serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = self.serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFleetInput: Swift.Equatable {
    /// GameLift Anywhere configuration options.
    public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
    /// The unique identifier for a custom game server build to be deployed on fleet instances. You can use either the build ID or ARN. The build must be uploaded to GameLift and in READY status. This fleet property cannot be changed later.
    public var buildId: Swift.String?
    /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. GameLift uses the certificates to encrypt traffic between game clients and the game servers running on GameLift. By default, the CertificateConfiguration is DISABLED. You can't change this property after you create the fleet. Certificate Manager (ACM) certificates expire after 13 months. Certificate expiration can cause fleets to fail, preventing players from connecting to instances in the fleet. We recommend you replace fleets before 13 months, consider using fleet aliases for a smooth transition. ACM isn't available in all Amazon Web Services regions. A fleet creation request with certificate generation enabled in an unsupported Region, fails with a 4xx error. For more information about the supported Regions, see [Supported Regions](https://docs.aws.amazon.com/acm/latest/userguide/acm-regions.html) in the Certificate Manager User Guide.
    public var certificateConfiguration: GameLiftClientTypes.CertificateConfiguration?
    /// The type of compute resource used to host your game servers. You can use your own compute resources with GameLift Anywhere or use Amazon EC2 instances with managed GameLift.
    public var computeType: GameLiftClientTypes.ComputeType?
    /// A description for the fleet.
    public var description: Swift.String?
    /// The allowed IP address ranges and port settings that allow inbound traffic to access game sessions on this fleet. If the fleet is hosting a custom game build, this property must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift automatically sets TCP and UDP ranges.
    public var ec2InboundPermissions: [GameLiftClientTypes.IpPermission]?
    /// The GameLift-supported Amazon EC2 instance type to use for all fleet instances. Instance type determines the computing resources that will be used to host your game servers, including CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions of Amazon EC2 instance types.
    public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    /// Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to ON_DEMAND. Learn more about when to use [ On-Demand versus Spot Instances](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot). This property cannot be changed after the fleet is created.
    public var fleetType: GameLiftClientTypes.FleetType?
    /// A unique identifier for an IAM role that manages access to your Amazon Web Services services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN by using the [IAM dashboard](https://console.aws.amazon.com/iam/) in the Amazon Web Services Management Console. Learn more about using on-box credentials for your game servers at [ Access external resources from a game server](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html). This property cannot be changed after the fleet is created.
    public var instanceRoleArn: Swift.String?
    /// A set of remote locations to deploy additional instances to and manage as part of the fleet. This parameter can only be used when creating fleets in Amazon Web Services Regions that support multiple locations. You can add any GameLift-supported Amazon Web Services Region as a remote location, in the form of an Amazon Web Services Region code such as us-west-2. To create a fleet with instances in the home Region only, omit this parameter.
    public var locations: [GameLiftClientTypes.LocationConfiguration]?
    /// This parameter is no longer used. To specify where GameLift should store log files once a server process shuts down, use the GameLift server API ProcessReady() and specify one or more directory paths in logParameters. For more information, see [Initialize the server process](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-initialize) in the GameLift Developer Guide.
    public var logPaths: [Swift.String]?
    /// The name of an Amazon Web Services CloudWatch metric group to add this fleet to. A metric group is used to aggregate the metrics for multiple fleets. You can specify an existing metric group name or set a new name to create a new metric group. A fleet can be included in only one metric group at a time.
    public var metricGroups: [Swift.String]?
    /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?
    /// The status of termination protection for active game sessions on the fleet. By default, this property is set to NoProtection. You can also set game session protection for an individual game session by calling [UpdateGameSession].
    ///
    /// * NoProtection - Game sessions can be terminated during active gameplay as a result of a scale-down event.
    ///
    /// * FullProtection - Game sessions in ACTIVE status cannot be terminated during a scale-down event.
    public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    /// Used when peering your GameLift fleet with a VPC, the unique identifier for the Amazon Web Services account that owns the VPC. You can find your account ID in the Amazon Web Services Management Console under account settings.
    public var peerVpcAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    public var peerVpcId: Swift.String?
    /// A policy that limits the number of game sessions that an individual player can create on instances in this fleet within a specified span of time.
    public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
    /// Instructions for how to launch and maintain server processes on instances in the fleet. The runtime configuration defines one or more server process configurations, each identifying a build executable or Realtime script file and the number of processes of that type to run concurrently. The RuntimeConfiguration parameter is required unless the fleet is being configured using the older parameters ServerLaunchPath and ServerLaunchParameters, which are still supported for backward compatibility.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
    /// The unique identifier for a Realtime configuration script to be deployed on fleet instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift prior to creating the fleet. This fleet property cannot be changed later.
    public var scriptId: Swift.String?
    /// This parameter is no longer used. Specify server launch parameters using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
    public var serverLaunchParameters: Swift.String?
    /// This parameter is no longer used. Specify a server launch path using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
    public var serverLaunchPath: Swift.String?
    /// A list of labels to assign to the new fleet resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
        buildId: Swift.String? = nil,
        certificateConfiguration: GameLiftClientTypes.CertificateConfiguration? = nil,
        computeType: GameLiftClientTypes.ComputeType? = nil,
        description: Swift.String? = nil,
        ec2InboundPermissions: [GameLiftClientTypes.IpPermission]? = nil,
        ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
        fleetType: GameLiftClientTypes.FleetType? = nil,
        instanceRoleArn: Swift.String? = nil,
        locations: [GameLiftClientTypes.LocationConfiguration]? = nil,
        logPaths: [Swift.String]? = nil,
        metricGroups: [Swift.String]? = nil,
        name: Swift.String? = nil,
        newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
        peerVpcAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil,
        resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil,
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil,
        scriptId: Swift.String? = nil,
        serverLaunchParameters: Swift.String? = nil,
        serverLaunchPath: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.anywhereConfiguration = anywhereConfiguration
        self.buildId = buildId
        self.certificateConfiguration = certificateConfiguration
        self.computeType = computeType
        self.description = description
        self.ec2InboundPermissions = ec2InboundPermissions
        self.ec2InstanceType = ec2InstanceType
        self.fleetType = fleetType
        self.instanceRoleArn = instanceRoleArn
        self.locations = locations
        self.logPaths = logPaths
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        self.runtimeConfiguration = runtimeConfiguration
        self.scriptId = scriptId
        self.serverLaunchParameters = serverLaunchParameters
        self.serverLaunchPath = serverLaunchPath
        self.tags = tags
    }
}

struct CreateFleetInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let buildId: Swift.String?
    let scriptId: Swift.String?
    let serverLaunchPath: Swift.String?
    let serverLaunchParameters: Swift.String?
    let logPaths: [Swift.String]?
    let ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    let ec2InboundPermissions: [GameLiftClientTypes.IpPermission]?
    let newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    let runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
    let resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
    let metricGroups: [Swift.String]?
    let peerVpcAwsAccountId: Swift.String?
    let peerVpcId: Swift.String?
    let fleetType: GameLiftClientTypes.FleetType?
    let instanceRoleArn: Swift.String?
    let certificateConfiguration: GameLiftClientTypes.CertificateConfiguration?
    let locations: [GameLiftClientTypes.LocationConfiguration]?
    let tags: [GameLiftClientTypes.Tag]?
    let computeType: GameLiftClientTypes.ComputeType?
    let anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
}

extension CreateFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anywhereConfiguration = "AnywhereConfiguration"
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case computeType = "ComputeType"
        case description = "Description"
        case ec2InboundPermissions = "EC2InboundPermissions"
        case ec2InstanceType = "EC2InstanceType"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case locations = "Locations"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case runtimeConfiguration = "RuntimeConfiguration"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let serverLaunchPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverLaunchPath)
        serverLaunchPath = serverLaunchPathDecoded
        let serverLaunchParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverLaunchParameters)
        serverLaunchParameters = serverLaunchParametersDecoded
        let logPathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logPaths)
        var logPathsDecoded0:[Swift.String]? = nil
        if let logPathsContainer = logPathsContainer {
            logPathsDecoded0 = [Swift.String]()
            for string0 in logPathsContainer {
                if let string0 = string0 {
                    logPathsDecoded0?.append(string0)
                }
            }
        }
        logPaths = logPathsDecoded0
        let ec2InstanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .ec2InstanceType)
        ec2InstanceType = ec2InstanceTypeDecoded
        let ec2InboundPermissionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.IpPermission?].self, forKey: .ec2InboundPermissions)
        var ec2InboundPermissionsDecoded0:[GameLiftClientTypes.IpPermission]? = nil
        if let ec2InboundPermissionsContainer = ec2InboundPermissionsContainer {
            ec2InboundPermissionsDecoded0 = [GameLiftClientTypes.IpPermission]()
            for structure0 in ec2InboundPermissionsContainer {
                if let structure0 = structure0 {
                    ec2InboundPermissionsDecoded0?.append(structure0)
                }
            }
        }
        ec2InboundPermissions = ec2InboundPermissionsDecoded0
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[Swift.String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [Swift.String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetType.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let instanceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRoleArn)
        instanceRoleArn = instanceRoleArnDecoded
        let certificateConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.CertificateConfiguration.self, forKey: .certificateConfiguration)
        certificateConfiguration = certificateConfigurationDecoded
        let locationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationConfiguration?].self, forKey: .locations)
        var locationsDecoded0:[GameLiftClientTypes.LocationConfiguration]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [GameLiftClientTypes.LocationConfiguration]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let computeTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let anywhereConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AnywhereConfiguration.self, forKey: .anywhereConfiguration)
        anywhereConfiguration = anywhereConfigurationDecoded
    }
}

extension CreateFleetLocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationconfiguration0 in locations {
                try locationsContainer.encode(locationconfiguration0)
            }
        }
    }
}

extension CreateFleetLocationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateFleetLocationsInput: Swift.Equatable {
    /// A unique identifier for the fleet to add locations to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A list of locations to deploy additional instances to and manage as part of the fleet. You can add any GameLift-supported Amazon Web Services Region as a remote location, in the form of an Amazon Web Services Region code such as us-west-2.
    /// This member is required.
    public var locations: [GameLiftClientTypes.LocationConfiguration]?

    public init (
        fleetId: Swift.String? = nil,
        locations: [GameLiftClientTypes.LocationConfiguration]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

struct CreateFleetLocationsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let locations: [GameLiftClientTypes.LocationConfiguration]?
}

extension CreateFleetLocationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationConfiguration?].self, forKey: .locations)
        var locationsDecoded0:[GameLiftClientTypes.LocationConfiguration]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [GameLiftClientTypes.LocationConfiguration]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
    }
}

extension CreateFleetLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFleetLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFleetLocationsOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFleetLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFleetLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationStates = output.locationStates
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationStates = nil
        }
    }
}

public struct CreateFleetLocationsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated with new locations.
    public var fleetId: Swift.String?
    /// The remote locations that are being added to the fleet, and the life-cycle status of each location. For new locations, the status is set to NEW. During location creation, GameLift updates each location's status as instances are deployed there and prepared for game hosting. This list does not include the fleet home Region or any remote locations that were already added to the fleet.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

struct CreateFleetLocationsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let locationStates: [GameLiftClientTypes.LocationState]?
}

extension CreateFleetLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[GameLiftClientTypes.LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [GameLiftClientTypes.LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

extension CreateFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateFleetOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateFleetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetAttributes = output.fleetAttributes
            self.locationStates = output.locationStates
        } else {
            self.fleetAttributes = nil
            self.locationStates = nil
        }
    }
}

public struct CreateFleetOutputResponse: Swift.Equatable {
    /// The properties for the new fleet, including the current status. All fleets are placed in NEW status on creation.
    public var fleetAttributes: GameLiftClientTypes.FleetAttributes?
    /// The fleet's locations and life-cycle status of each location. For new fleets, the status of all locations is set to NEW. During fleet creation, GameLift updates each location status as instances are deployed there and prepared for game hosting. This list includes an entry for the fleet's home Region. For fleets with no remote locations, only one entry, representing the home Region, is returned.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init (
        fleetAttributes: GameLiftClientTypes.FleetAttributes? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.locationStates = locationStates
    }
}

struct CreateFleetOutputResponseBody: Swift.Equatable {
    let fleetAttributes: GameLiftClientTypes.FleetAttributes?
    let locationStates: [GameLiftClientTypes.LocationState]?
}

extension CreateFleetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetAttributes = "FleetAttributes"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetAttributesDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetAttributes.self, forKey: .fleetAttributes)
        fleetAttributes = fleetAttributesDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[GameLiftClientTypes.LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [GameLiftClientTypes.LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

extension CreateGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = self.autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let balancingStrategy = self.balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = self.gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinition0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinition0)
            }
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let maxSize = self.maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = self.minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let vpcSubnets = vpcSubnets {
            var vpcSubnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSubnets)
            for vpcsubnet0 in vpcSubnets {
                try vpcSubnetsContainer.encode(vpcsubnet0)
            }
        }
    }
}

extension CreateGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGameServerGroupInput: Swift.Equatable {
    /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. The scaling policy uses the metric "PercentUtilizedGameServers" to maintain a buffer of idle game servers that can immediately accommodate new games and players. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    public var autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy?
    /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
    ///
    /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
    ///
    /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
    ///
    /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
    public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    /// An identifier for the new game server group. This value is used to generate unique ARN identifiers for the Amazon EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name must be unique per Region per Amazon Web Services account.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to NO_PROTECTION by default.
    public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    /// The Amazon EC2 instance types and sizes to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. For more information on instance types, see [EC2 Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon Elastic Compute Cloud User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see [ Instance Weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide.
    /// This member is required.
    public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    /// The Amazon EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. You can specify the template using either the template name or ID. For help with creating a launch template, see [Creating a Launch Template for an Auto Scaling Group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the Amazon Elastic Compute Cloud Auto Scaling User Guide. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs. If you specify network interfaces in your launch template, you must explicitly set the property AssociatePublicIpAddress to "true". If no network interface is specified in the launch template, GameLift FleetIQ uses your account's default VPC.
    /// This member is required.
    public var launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification?
    /// The maximum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    /// This member is required.
    public var maxSize: Swift.Int?
    /// The minimum number of instances allowed in the Amazon EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and Amazon EC2 do not scale down the group below this minimum. In production, this value should be set to at least 1. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the Amazon Web Services console or APIs.
    /// This member is required.
    public var minSize: Swift.Int?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of labels to assign to the new game server group resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources is useful for resource management, access management, and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?
    /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group. By default, all GameLift FleetIQ-supported Availability Zones are used. You can use this parameter to specify VPCs that you've set up. This property cannot be updated after the game server group is created, and the corresponding Auto Scaling group will always use the property value that is set with this request, even if the Auto Scaling group is updated directly.
    public var vpcSubnets: [Swift.String]?

    public init (
        autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy? = nil,
        balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
        instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
        launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        roleArn: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        vpcSubnets: [Swift.String]? = nil
    )
    {
        self.autoScalingPolicy = autoScalingPolicy
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.launchTemplate = launchTemplate
        self.maxSize = maxSize
        self.minSize = minSize
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSubnets = vpcSubnets
    }
}

struct CreateGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let roleArn: Swift.String?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification?
    let instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    let autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy?
    let balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    let gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    let vpcSubnets: [Swift.String]?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[GameLiftClientTypes.InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [GameLiftClientTypes.InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupAutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let vpcSubnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vpcSubnets)
        var vpcSubnetsDecoded0:[Swift.String]? = nil
        if let vpcSubnetsContainer = vpcSubnetsContainer {
            vpcSubnetsDecoded0 = [Swift.String]()
            for string0 in vpcSubnetsContainer {
                if let string0 = string0 {
                    vpcSubnetsDecoded0?.append(string0)
                }
            }
        }
        vpcSubnets = vpcSubnetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct CreateGameServerGroupOutputResponse: Swift.Equatable {
    /// The newly created game server group object, including the new ARN value for the GameLift FleetIQ game server group and the object's status. The Amazon EC2 Auto Scaling group ARN is initially null, since the group has not yet been created. This value is added once the game server group status reaches ACTIVE.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct CreateGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension CreateGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension CreateGameSessionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let creatorId = self.creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let idempotencyToken = self.idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension CreateGameSessionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGameSessionInput: Swift.Equatable {
    /// A unique identifier for the alias associated with the fleet to create a game session in. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var aliasId: Swift.String?
    /// A unique identifier for a player or entity creating the game session. This parameter is required when requesting a new game session on a fleet with a resource creation limit policy. This type of policy limits the number of concurrent active game sessions that one player can create within a certain time span. GameLift uses the CreatorId to evaluate the new request against the policy.
    public var creatorId: Swift.String?
    /// A unique identifier for the fleet to create a game session in. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var fleetId: Swift.String?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameSessionData: Swift.String?
    /// This parameter is deprecated. Use IdempotencyToken instead. Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID.
    public var gameSessionId: Swift.String?
    /// Custom string that uniquely identifies the new game session request. This is useful for ensuring that game session requests with the same idempotency token are processed only once. Subsequent requests with the same string return the original GameSession object, with an updated status. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. A game session ARN has the following format: arn:aws:gamelift:::gamesession//. Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.
    public var idempotencyToken: Swift.String?
    /// A fleet's remote location to place the new game session in. If this parameter is not set, the new game session is placed in the fleet's home Region. Specify a remote location with an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    /// This member is required.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var name: Swift.String?

    public init (
        aliasId: Swift.String? = nil,
        creatorId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil,
        location: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        name: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.creatorId = creatorId
        self.fleetId = fleetId
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionId = gameSessionId
        self.idempotencyToken = idempotencyToken
        self.location = location
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
    }
}

struct CreateGameSessionInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let aliasId: Swift.String?
    let maximumPlayerSessionCount: Swift.Int?
    let name: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let creatorId: Swift.String?
    let gameSessionId: Swift.String?
    let idempotencyToken: Swift.String?
    let gameSessionData: Swift.String?
    let location: Swift.String?
}

extension CreateGameSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let creatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension CreateGameSessionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameSessionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "FleetCapacityExceededException" : self = .fleetCapacityExceededException(try FleetCapacityExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGameSessionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case fleetCapacityExceededException(FleetCapacityExceededException)
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameSessionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGameSessionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSession = output.gameSession
        } else {
            self.gameSession = nil
        }
    }
}

public struct CreateGameSessionOutputResponse: Swift.Equatable {
    /// Object that describes the newly created game session record.
    public var gameSession: GameLiftClientTypes.GameSession?

    public init (
        gameSession: GameLiftClientTypes.GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

struct CreateGameSessionOutputResponseBody: Swift.Equatable {
    let gameSession: GameLiftClientTypes.GameSession?
}

extension CreateGameSessionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSession = "GameSession"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
    }
}

extension CreateGameSessionQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case tags = "Tags"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestination0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestination0)
            }
        }
        if let filterConfiguration = self.filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicy0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicy0)
            }
        }
        if let priorityConfiguration = self.priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}

extension CreateGameSessionQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateGameSessionQueueInput: Swift.Equatable {
    /// Information to be added to all events that are related to this game session queue.
    public var customEventData: Swift.String?
    /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
    public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location.
    public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
    public var notificationTarget: Swift.String?
    /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
    public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process.
    public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    /// A list of labels to assign to the new game session queue resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?
    /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
    public var timeoutInSeconds: Swift.Int?

    public init (
        customEventData: Swift.String? = nil,
        destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
        filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
        priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        timeoutInSeconds: Swift.Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.tags = tags
        self.timeoutInSeconds = timeoutInSeconds
    }
}

struct CreateGameSessionQueueInputBody: Swift.Equatable {
    let name: Swift.String?
    let timeoutInSeconds: Swift.Int?
    let playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    let destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    let filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    let priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    let customEventData: Swift.String?
    let notificationTarget: Swift.String?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateGameSessionQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case tags = "Tags"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[GameLiftClientTypes.PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [GameLiftClientTypes.PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameLiftClientTypes.GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameLiftClientTypes.GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateGameSessionQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateGameSessionQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateGameSessionQueueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateGameSessionQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateGameSessionQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionQueue = output.gameSessionQueue
        } else {
            self.gameSessionQueue = nil
        }
    }
}

public struct CreateGameSessionQueueOutputResponse: Swift.Equatable {
    /// An object that describes the newly created game session queue.
    public var gameSessionQueue: GameLiftClientTypes.GameSessionQueue?

    public init (
        gameSessionQueue: GameLiftClientTypes.GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

struct CreateGameSessionQueueOutputResponseBody: Swift.Equatable {
    let gameSessionQueue: GameLiftClientTypes.GameSessionQueue?
}

extension CreateGameSessionQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionQueue = "GameSessionQueue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueueDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionQueue.self, forKey: .gameSessionQueue)
        gameSessionQueue = gameSessionQueueDecoded
    }
}

extension CreateLocationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationName = "LocationName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationName = self.locationName {
            try encodeContainer.encode(locationName, forKey: .locationName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateLocationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationInput: Swift.Equatable {
    /// A descriptive name for the custom location.
    /// This member is required.
    public var locationName: Swift.String?
    /// A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Rareference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        locationName: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.locationName = locationName
        self.tags = tags
    }
}

struct CreateLocationInputBody: Swift.Equatable {
    let locationName: Swift.String?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateLocationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationName = "LocationName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLocationOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateLocationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.location = output.location
        } else {
            self.location = nil
        }
    }
}

public struct CreateLocationOutputResponse: Swift.Equatable {
    /// The details of the custom location you created.
    public var location: GameLiftClientTypes.LocationModel?

    public init (
        location: GameLiftClientTypes.LocationModel? = nil
    )
    {
        self.location = location
    }
}

struct CreateLocationOutputResponseBody: Swift.Equatable {
    let location: GameLiftClientTypes.LocationModel?
}

extension CreateLocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationModel.self, forKey: .location)
        location = locationDecoded
    }
}

extension CreateMatchmakingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = self.acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = self.acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = self.additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = self.backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = self.flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for arnstringmodel0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(arnstringmodel0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = self.requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateMatchmakingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateMatchmakingConfigurationInput: Swift.Equatable {
    /// A flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
    /// This member is required.
    public var acceptanceRequired: Swift.Bool?
    /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
    public var acceptanceTimeoutSeconds: Swift.Int?
    /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var additionalPlayerCount: Swift.Int?
    /// The method used to backfill game sessions that are created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [ Backfill Existing Games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
    public var backfillMode: GameLiftClientTypes.BackfillMode?
    /// Information to be added to all events related to this matchmaking configuration.
    public var customEventData: Swift.String?
    /// A human-readable description of the matchmaking configuration.
    public var description: Swift.String?
    /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
    ///
    /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
    ///
    /// * WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
    public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameSessionData: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
    public var gameSessionQueueArns: [Swift.String]?
    /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive matchmaking notifications. See [ Setting up notifications for matchmaking](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html) for more information.
    public var notificationTarget: Swift.String?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
    /// This member is required.
    public var requestTimeoutSeconds: Swift.Int?
    /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
    /// This member is required.
    public var ruleSetName: Swift.String?
    /// A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        acceptanceRequired: Swift.Bool? = nil,
        acceptanceTimeoutSeconds: Swift.Int? = nil,
        additionalPlayerCount: Swift.Int? = nil,
        backfillMode: GameLiftClientTypes.BackfillMode? = nil,
        customEventData: Swift.String? = nil,
        description: Swift.String? = nil,
        flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionQueueArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        requestTimeoutSeconds: Swift.Int? = nil,
        ruleSetName: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
        self.tags = tags
    }
}

struct CreateMatchmakingConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let gameSessionQueueArns: [Swift.String]?
    let requestTimeoutSeconds: Swift.Int?
    let acceptanceTimeoutSeconds: Swift.Int?
    let acceptanceRequired: Swift.Bool?
    let ruleSetName: Swift.String?
    let notificationTarget: Swift.String?
    let additionalPlayerCount: Swift.Int?
    let customEventData: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let gameSessionData: Swift.String?
    let backfillMode: GameLiftClientTypes.BackfillMode?
    let flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateMatchmakingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[Swift.String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [Swift.String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMatchmakingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMatchmakingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMatchmakingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMatchmakingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMatchmakingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
        } else {
            self.configuration = nil
        }
    }
}

public struct CreateMatchmakingConfigurationOutputResponse: Swift.Equatable {
    /// Object that describes the newly created matchmaking configuration.
    public var configuration: GameLiftClientTypes.MatchmakingConfiguration?

    public init (
        configuration: GameLiftClientTypes.MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

struct CreateMatchmakingConfigurationOutputResponseBody: Swift.Equatable {
    let configuration: GameLiftClientTypes.MatchmakingConfiguration?
}

extension CreateMatchmakingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension CreateMatchmakingRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case ruleSetBody = "RuleSetBody"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleSetBody = self.ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateMatchmakingRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateMatchmakingRuleSetInput: Swift.Equatable {
    /// A unique identifier for the matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name value. Note that the rule set name is different from the optional name field in the rule set body.
    /// This member is required.
    public var name: Swift.String?
    /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
    /// This member is required.
    public var ruleSetBody: Swift.String?
    /// A list of labels to assign to the new matchmaking rule set resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        name: Swift.String? = nil,
        ruleSetBody: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.name = name
        self.ruleSetBody = ruleSetBody
        self.tags = tags
    }
}

struct CreateMatchmakingRuleSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let ruleSetBody: Swift.String?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateMatchmakingRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case ruleSetBody = "RuleSetBody"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMatchmakingRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMatchmakingRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMatchmakingRuleSetOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMatchmakingRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMatchmakingRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ruleSet = output.ruleSet
        } else {
            self.ruleSet = nil
        }
    }
}

public struct CreateMatchmakingRuleSetOutputResponse: Swift.Equatable {
    /// The newly created matchmaking rule set.
    /// This member is required.
    public var ruleSet: GameLiftClientTypes.MatchmakingRuleSet?

    public init (
        ruleSet: GameLiftClientTypes.MatchmakingRuleSet? = nil
    )
    {
        self.ruleSet = ruleSet
    }
}

struct CreateMatchmakingRuleSetOutputResponseBody: Swift.Equatable {
    let ruleSet: GameLiftClientTypes.MatchmakingRuleSet?
}

extension CreateMatchmakingRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSet = "RuleSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingRuleSet.self, forKey: .ruleSet)
        ruleSet = ruleSetDecoded
    }
}

extension CreatePlayerSessionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let playerData = self.playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
    }
}

extension CreatePlayerSessionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePlayerSessionInput: Swift.Equatable {
    /// A unique identifier for the game session to add a player to.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
    public var playerData: Swift.String?
    /// A unique identifier for a player. Player IDs are developer-defined.
    /// This member is required.
    public var playerId: Swift.String?

    public init (
        gameSessionId: Swift.String? = nil,
        playerData: Swift.String? = nil,
        playerId: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerData = playerData
        self.playerId = playerId
    }
}

struct CreatePlayerSessionInputBody: Swift.Equatable {
    let gameSessionId: Swift.String?
    let playerId: Swift.String?
    let playerData: Swift.String?
}

extension CreatePlayerSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension CreatePlayerSessionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePlayerSessionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GameSessionFullException" : self = .gameSessionFullException(try GameSessionFullException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePlayerSessionOutputError: Swift.Error, Swift.Equatable {
    case gameSessionFullException(GameSessionFullException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePlayerSessionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePlayerSessionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.playerSession = output.playerSession
        } else {
            self.playerSession = nil
        }
    }
}

public struct CreatePlayerSessionOutputResponse: Swift.Equatable {
    /// Object that describes the newly created player session record.
    public var playerSession: GameLiftClientTypes.PlayerSession?

    public init (
        playerSession: GameLiftClientTypes.PlayerSession? = nil
    )
    {
        self.playerSession = playerSession
    }
}

struct CreatePlayerSessionOutputResponseBody: Swift.Equatable {
    let playerSession: GameLiftClientTypes.PlayerSession?
}

extension CreatePlayerSessionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case playerSession = "PlayerSession"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PlayerSession.self, forKey: .playerSession)
        playerSession = playerSessionDecoded
    }
}

extension CreatePlayerSessionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let playerDataMap = playerDataMap {
            var playerDataMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .playerDataMap)
            for (dictKey0, playerDataMap0) in playerDataMap {
                try playerDataMapContainer.encode(playerDataMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let playerIds = playerIds {
            var playerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerIds)
            for nonzeroandmaxstring0 in playerIds {
                try playerIdsContainer.encode(nonzeroandmaxstring0)
            }
        }
    }
}

extension CreatePlayerSessionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreatePlayerSessionsInput: Swift.Equatable {
    /// A unique identifier for the game session to add players to.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Any player data strings for player IDs that are not included in the PlayerIds parameter are ignored.
    public var playerDataMap: [Swift.String:Swift.String]?
    /// List of unique identifiers for the players to be added.
    /// This member is required.
    public var playerIds: [Swift.String]?

    public init (
        gameSessionId: Swift.String? = nil,
        playerDataMap: [Swift.String:Swift.String]? = nil,
        playerIds: [Swift.String]? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.playerDataMap = playerDataMap
        self.playerIds = playerIds
    }
}

struct CreatePlayerSessionsInputBody: Swift.Equatable {
    let gameSessionId: Swift.String?
    let playerIds: [Swift.String]?
    let playerDataMap: [Swift.String:Swift.String]?
}

extension CreatePlayerSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case playerDataMap = "PlayerDataMap"
        case playerIds = "PlayerIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .playerIds)
        var playerIdsDecoded0:[Swift.String]? = nil
        if let playerIdsContainer = playerIdsContainer {
            playerIdsDecoded0 = [Swift.String]()
            for string0 in playerIdsContainer {
                if let string0 = string0 {
                    playerIdsDecoded0?.append(string0)
                }
            }
        }
        playerIds = playerIdsDecoded0
        let playerDataMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .playerDataMap)
        var playerDataMapDecoded0: [Swift.String:Swift.String]? = nil
        if let playerDataMapContainer = playerDataMapContainer {
            playerDataMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, playerdata0) in playerDataMapContainer {
                if let playerdata0 = playerdata0 {
                    playerDataMapDecoded0?[key0] = playerdata0
                }
            }
        }
        playerDataMap = playerDataMapDecoded0
    }
}

extension CreatePlayerSessionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePlayerSessionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GameSessionFullException" : self = .gameSessionFullException(try GameSessionFullException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePlayerSessionsOutputError: Swift.Error, Swift.Equatable {
    case gameSessionFullException(GameSessionFullException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePlayerSessionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePlayerSessionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.playerSessions = output.playerSessions
        } else {
            self.playerSessions = nil
        }
    }
}

public struct CreatePlayerSessionsOutputResponse: Swift.Equatable {
    /// A collection of player session objects created for the added players.
    public var playerSessions: [GameLiftClientTypes.PlayerSession]?

    public init (
        playerSessions: [GameLiftClientTypes.PlayerSession]? = nil
    )
    {
        self.playerSessions = playerSessions
    }
}

struct CreatePlayerSessionsOutputResponseBody: Swift.Equatable {
    let playerSessions: [GameLiftClientTypes.PlayerSession]?
}

extension CreatePlayerSessionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case playerSessions = "PlayerSessions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerSession?].self, forKey: .playerSessions)
        var playerSessionsDecoded0:[GameLiftClientTypes.PlayerSession]? = nil
        if let playerSessionsContainer = playerSessionsContainer {
            playerSessionsDecoded0 = [GameLiftClientTypes.PlayerSession]()
            for structure0 in playerSessionsContainer {
                if let structure0 = structure0 {
                    playerSessionsDecoded0?.append(structure0)
                }
            }
        }
        playerSessions = playerSessionsDecoded0
    }
}

extension CreateScriptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let storageLocation = self.storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let zipFile = self.zipFile {
            try encodeContainer.encode(zipFile.base64EncodedString(), forKey: .zipFile)
        }
    }
}

extension CreateScriptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateScriptInput: Swift.Equatable {
    /// A descriptive label that is associated with a script. Script names do not need to be unique. You can use [UpdateScript](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html) to change this value later.
    public var name: Swift.String?
    /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// A list of labels to assign to the new script resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/gamelift/latest/apireference/API_ListTagsForResource.html) to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?
    /// Version information associated with a build or script. Version strings do not need to be unique. You can use [UpdateScript](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateScript.html) to change this value later.
    public var version: Swift.String?
    /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
    public var zipFile: ClientRuntime.Data?

    public init (
        name: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        version: Swift.String? = nil,
        zipFile: ClientRuntime.Data? = nil
    )
    {
        self.name = name
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
        self.zipFile = zipFile
    }
}

struct CreateScriptInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.String?
    let storageLocation: GameLiftClientTypes.S3Location?
    let zipFile: ClientRuntime.Data?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateScriptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateScriptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateScriptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateScriptOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateScriptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateScriptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct CreateScriptOutputResponse: Swift.Equatable {
    /// The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
    public var script: GameLiftClientTypes.Script?

    public init (
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

struct CreateScriptOutputResponseBody: Swift.Equatable {
    let script: GameLiftClientTypes.Script?
}

extension CreateScriptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case script = "Script"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Script.self, forKey: .script)
        script = scriptDecoded
    }
}

extension CreateVpcPeeringAuthorizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameLiftAwsAccountId = self.gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

extension CreateVpcPeeringAuthorizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateVpcPeeringAuthorizationInput: Swift.Equatable {
    /// A unique identifier for the Amazon Web Services account that you use to manage your GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var gameLiftAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init (
        gameLiftAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct CreateVpcPeeringAuthorizationInputBody: Swift.Equatable {
    let gameLiftAwsAccountId: Swift.String?
    let peerVpcId: Swift.String?
}

extension CreateVpcPeeringAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension CreateVpcPeeringAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcPeeringAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVpcPeeringAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcPeeringAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateVpcPeeringAuthorizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcPeeringAuthorization = output.vpcPeeringAuthorization
        } else {
            self.vpcPeeringAuthorization = nil
        }
    }
}

public struct CreateVpcPeeringAuthorizationOutputResponse: Swift.Equatable {
    /// Details on the requested VPC peering authorization, including expiration.
    public var vpcPeeringAuthorization: GameLiftClientTypes.VpcPeeringAuthorization?

    public init (
        vpcPeeringAuthorization: GameLiftClientTypes.VpcPeeringAuthorization? = nil
    )
    {
        self.vpcPeeringAuthorization = vpcPeeringAuthorization
    }
}

struct CreateVpcPeeringAuthorizationOutputResponseBody: Swift.Equatable {
    let vpcPeeringAuthorization: GameLiftClientTypes.VpcPeeringAuthorization?
}

extension CreateVpcPeeringAuthorizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcPeeringAuthorization = "VpcPeeringAuthorization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringAuthorizationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.VpcPeeringAuthorization.self, forKey: .vpcPeeringAuthorization)
        vpcPeeringAuthorization = vpcPeeringAuthorizationDecoded
    }
}

extension CreateVpcPeeringConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let peerVpcAwsAccountId = self.peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

extension CreateVpcPeeringConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateVpcPeeringConnectionInput: Swift.Equatable {
    /// A unique identifier for the fleet. You can use either the fleet ID or ARN value. This tells Amazon GameLift which GameLift VPC to peer with.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for the Amazon Web Services account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var peerVpcAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        peerVpcAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.peerVpcAwsAccountId = peerVpcAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct CreateVpcPeeringConnectionInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let peerVpcAwsAccountId: Swift.String?
    let peerVpcId: Swift.String?
}

extension CreateVpcPeeringConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension CreateVpcPeeringConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVpcPeeringConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateVpcPeeringConnectionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVpcPeeringConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateVpcPeeringConnectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

extension DeleteAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAliasInput: Swift.Equatable {
    /// A unique identifier of the alias that you want to delete. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init (
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct DeleteAliasInputBody: Swift.Equatable {
    let aliasId: Swift.String?
}

extension DeleteAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension DeleteAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteAliasOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAliasOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteBuildInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

extension DeleteBuildInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBuildInput: Swift.Equatable {
    /// A unique identifier for the build to delete. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init (
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct DeleteBuildInputBody: Swift.Equatable {
    let buildId: Swift.String?
}

extension DeleteBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension DeleteBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBuildOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteBuildOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension DeleteFleetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFleetInput: Swift.Equatable {
    /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DeleteFleetInputBody: Swift.Equatable {
    let fleetId: Swift.String?
}

extension DeleteFleetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DeleteFleetLocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationstringmodel0 in locations {
                try locationsContainer.encode(locationstringmodel0)
            }
        }
    }
}

extension DeleteFleetLocationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteFleetLocationsInput: Swift.Equatable {
    /// A unique identifier for the fleet to delete locations for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The list of fleet locations to delete. Specify locations in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var locations: [Swift.String]?

    public init (
        fleetId: Swift.String? = nil,
        locations: [Swift.String]? = nil
    )
    {
        self.fleetId = fleetId
        self.locations = locations
    }
}

struct DeleteFleetLocationsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let locations: [Swift.String]?
}

extension DeleteFleetLocationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case locations = "Locations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .locations)
        var locationsDecoded0:[Swift.String]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [Swift.String]()
            for string0 in locationsContainer {
                if let string0 = string0 {
                    locationsDecoded0?.append(string0)
                }
            }
        }
        locations = locationsDecoded0
    }
}

extension DeleteFleetLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFleetLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFleetLocationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFleetLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteFleetLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationStates = output.locationStates
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationStates = nil
        }
    }
}

public struct DeleteFleetLocationsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that location attributes are being deleted for.
    public var fleetId: Swift.String?
    /// The remote locations that are being deleted, with each location status set to DELETING.
    public var locationStates: [GameLiftClientTypes.LocationState]?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationStates: [GameLiftClientTypes.LocationState]? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationStates = locationStates
    }
}

struct DeleteFleetLocationsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let locationStates: [GameLiftClientTypes.LocationState]?
}

extension DeleteFleetLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationStates = "LocationStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationStatesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationState?].self, forKey: .locationStates)
        var locationStatesDecoded0:[GameLiftClientTypes.LocationState]? = nil
        if let locationStatesContainer = locationStatesContainer {
            locationStatesDecoded0 = [GameLiftClientTypes.LocationState]()
            for structure0 in locationStatesContainer {
                if let structure0 = structure0 {
                    locationStatesDecoded0?.append(structure0)
                }
            }
        }
        locationStates = locationStatesDecoded0
    }
}

extension DeleteFleetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteFleetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteFleetOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteFleetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteFleetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteOption = "DeleteOption"
        case gameServerGroupName = "GameServerGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteOption = self.deleteOption {
            try encodeContainer.encode(deleteOption.rawValue, forKey: .deleteOption)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
    }
}

extension DeleteGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGameServerGroupInput: Swift.Equatable {
    /// The type of delete to perform. Options include the following:
    ///
    /// * SAFE_DELETE – (default) Terminates the game server group and Amazon EC2 Auto Scaling group only when it has no game servers that are in UTILIZED status.
    ///
    /// * FORCE_DELETE – Terminates the game server group, including all active game servers regardless of their utilization status, and the Amazon EC2 Auto Scaling group.
    ///
    /// * RETAIN – Does a safe delete of the game server group but retains the Amazon EC2 Auto Scaling group as is.
    public var deleteOption: GameLiftClientTypes.GameServerGroupDeleteOption?
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?

    public init (
        deleteOption: GameLiftClientTypes.GameServerGroupDeleteOption? = nil,
        gameServerGroupName: Swift.String? = nil
    )
    {
        self.deleteOption = deleteOption
        self.gameServerGroupName = gameServerGroupName
    }
}

struct DeleteGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let deleteOption: GameLiftClientTypes.GameServerGroupDeleteOption?
}

extension DeleteGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteOption = "DeleteOption"
        case gameServerGroupName = "GameServerGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let deleteOptionDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupDeleteOption.self, forKey: .deleteOption)
        deleteOption = deleteOptionDecoded
    }
}

extension DeleteGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct DeleteGameServerGroupOutputResponse: Swift.Equatable {
    /// An object that describes the deleted game server group resource, with status updated to DELETE_SCHEDULED.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct DeleteGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension DeleteGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension DeleteGameSessionQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteGameSessionQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteGameSessionQueueInput: Swift.Equatable {
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteGameSessionQueueInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteGameSessionQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteGameSessionQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGameSessionQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGameSessionQueueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGameSessionQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteGameSessionQueueOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLocationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationName = "LocationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationName = self.locationName {
            try encodeContainer.encode(locationName, forKey: .locationName)
        }
    }
}

extension DeleteLocationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLocationInput: Swift.Equatable {
    /// The location name of the custom location to be deleted.
    /// This member is required.
    public var locationName: Swift.String?

    public init (
        locationName: Swift.String? = nil
    )
    {
        self.locationName = locationName
    }
}

struct DeleteLocationInputBody: Swift.Equatable {
    let locationName: Swift.String?
}

extension DeleteLocationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationName = "LocationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
    }
}

extension DeleteLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLocationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLocationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMatchmakingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteMatchmakingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMatchmakingConfigurationInput: Swift.Equatable {
    /// A unique identifier for the matchmaking configuration. You can use either the configuration name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteMatchmakingConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteMatchmakingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteMatchmakingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMatchmakingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMatchmakingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMatchmakingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMatchmakingConfigurationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMatchmakingRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteMatchmakingRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMatchmakingRuleSetInput: Swift.Equatable {
    /// A unique identifier for the matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteMatchmakingRuleSetInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteMatchmakingRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteMatchmakingRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMatchmakingRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMatchmakingRuleSetOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMatchmakingRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMatchmakingRuleSetOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteScalingPolicyInput: Swift.Equatable {
    /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
    /// This member is required.
    public var name: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.name = name
    }
}

struct DeleteScalingPolicyInputBody: Swift.Equatable {
    let name: Swift.String?
    let fleetId: Swift.String?
}

extension DeleteScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DeleteScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScalingPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteScriptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

extension DeleteScriptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteScriptInput: Swift.Equatable {
    /// A unique identifier for the Realtime script to delete. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?

    public init (
        scriptId: Swift.String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

struct DeleteScriptInputBody: Swift.Equatable {
    let scriptId: Swift.String?
}

extension DeleteScriptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scriptId = "ScriptId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
    }
}

extension DeleteScriptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScriptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteScriptOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScriptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScriptOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteVpcPeeringAuthorizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameLiftAwsAccountId = self.gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }
}

extension DeleteVpcPeeringAuthorizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteVpcPeeringAuthorizationInput: Swift.Equatable {
    /// A unique identifier for the Amazon Web Services account that you use to manage your GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
    /// This member is required.
    public var gameLiftAwsAccountId: Swift.String?
    /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
    /// This member is required.
    public var peerVpcId: Swift.String?

    public init (
        gameLiftAwsAccountId: Swift.String? = nil,
        peerVpcId: Swift.String? = nil
    )
    {
        self.gameLiftAwsAccountId = gameLiftAwsAccountId
        self.peerVpcId = peerVpcId
    }
}

struct DeleteVpcPeeringAuthorizationInputBody: Swift.Equatable {
    let gameLiftAwsAccountId: Swift.String?
    let peerVpcId: Swift.String?
}

extension DeleteVpcPeeringAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
    }
}

extension DeleteVpcPeeringAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcPeeringAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVpcPeeringAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcPeeringAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVpcPeeringAuthorizationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteVpcPeeringConnectionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let vpcPeeringConnectionId = self.vpcPeeringConnectionId {
            try encodeContainer.encode(vpcPeeringConnectionId, forKey: .vpcPeeringConnectionId)
        }
    }
}

extension DeleteVpcPeeringConnectionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteVpcPeeringConnectionInput: Swift.Equatable {
    /// A unique identifier for the fleet. This fleet specified must match the fleet referenced in the VPC peering connection record. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for a VPC peering connection.
    /// This member is required.
    public var vpcPeeringConnectionId: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        vpcPeeringConnectionId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.vpcPeeringConnectionId = vpcPeeringConnectionId
    }
}

struct DeleteVpcPeeringConnectionInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let vpcPeeringConnectionId: Swift.String?
}

extension DeleteVpcPeeringConnectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
    }
}

extension DeleteVpcPeeringConnectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVpcPeeringConnectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteVpcPeeringConnectionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVpcPeeringConnectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVpcPeeringConnectionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeregisterComputeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension DeregisterComputeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterComputeInput: Swift.Equatable {
    /// The name of the compute resource you want to delete.
    /// This member is required.
    public var computeName: Swift.String?
    /// >A unique identifier for the fleet the compute resource is registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

struct DeregisterComputeInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let computeName: Swift.String?
}

extension DeregisterComputeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
    }
}

extension DeregisterComputeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterComputeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterComputeOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterComputeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterComputeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeregisterGameServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

extension DeregisterGameServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterGameServerInput: Swift.Equatable {
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to deregister.
    /// This member is required.
    public var gameServerId: Swift.String?

    public init (
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct DeregisterGameServerInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let gameServerId: Swift.String?
}

extension DeregisterGameServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
    }
}

extension DeregisterGameServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterGameServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterGameServerOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterGameServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterGameServerOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

extension DescribeAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAliasInput: Swift.Equatable {
    /// The unique identifier for the fleet alias that you want to retrieve. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init (
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct DescribeAliasInputBody: Swift.Equatable {
    let aliasId: Swift.String?
}

extension DescribeAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension DescribeAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeAliasOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct DescribeAliasOutputResponse: Swift.Equatable {
    /// The requested alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init (
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct DescribeAliasOutputResponseBody: Swift.Equatable {
    let alias: GameLiftClientTypes.Alias?
}

extension DescribeAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension DescribeBuildInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

extension DescribeBuildInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeBuildInput: Swift.Equatable {
    /// A unique identifier for the build to retrieve properties for. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init (
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct DescribeBuildInputBody: Swift.Equatable {
    let buildId: Swift.String?
}

extension DescribeBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension DescribeBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeBuildOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

public struct DescribeBuildOutputResponse: Swift.Equatable {
    /// Set of properties describing the requested build.
    public var build: GameLiftClientTypes.Build?

    public init (
        build: GameLiftClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

struct DescribeBuildOutputResponseBody: Swift.Equatable {
    let build: GameLiftClientTypes.Build?
}

extension DescribeBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build = "Build"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Build.self, forKey: .build)
        build = buildDecoded
    }
}

extension DescribeComputeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension DescribeComputeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeComputeInput: Swift.Equatable {
    /// A descriptive label that is associated with the compute resource registered to your fleet.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet the compute is registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

struct DescribeComputeInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let computeName: Swift.String?
}

extension DescribeComputeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
    }
}

extension DescribeComputeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeComputeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeComputeOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeComputeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeComputeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compute = output.compute
        } else {
            self.compute = nil
        }
    }
}

public struct DescribeComputeOutputResponse: Swift.Equatable {
    /// The details of the compute resource you registered to the specified fleet.
    public var compute: GameLiftClientTypes.Compute?

    public init (
        compute: GameLiftClientTypes.Compute? = nil
    )
    {
        self.compute = compute
    }
}

struct DescribeComputeOutputResponseBody: Swift.Equatable {
    let compute: GameLiftClientTypes.Compute?
}

extension DescribeComputeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compute = "Compute"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Compute.self, forKey: .compute)
        compute = computeDecoded
    }
}

extension DescribeEC2InstanceLimitsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2InstanceType = "EC2InstanceType"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2InstanceType = self.ec2InstanceType {
            try encodeContainer.encode(ec2InstanceType.rawValue, forKey: .ec2InstanceType)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension DescribeEC2InstanceLimitsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEC2InstanceLimitsInput: Swift.Equatable {
    /// Name of an Amazon EC2 instance type that is supported in GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Do not specify a value for this parameter to retrieve limits for all instance types.
    public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    /// The name of a remote location to request instance limits for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?

    public init (
        ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
        location: Swift.String? = nil
    )
    {
        self.ec2InstanceType = ec2InstanceType
        self.location = location
    }
}

struct DescribeEC2InstanceLimitsInputBody: Swift.Equatable {
    let ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
    let location: Swift.String?
}

extension DescribeEC2InstanceLimitsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2InstanceType = "EC2InstanceType"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2InstanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .ec2InstanceType)
        ec2InstanceType = ec2InstanceTypeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeEC2InstanceLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEC2InstanceLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEC2InstanceLimitsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEC2InstanceLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEC2InstanceLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ec2InstanceLimits = output.ec2InstanceLimits
        } else {
            self.ec2InstanceLimits = nil
        }
    }
}

public struct DescribeEC2InstanceLimitsOutputResponse: Swift.Equatable {
    /// The maximum number of instances for the specified instance type.
    public var ec2InstanceLimits: [GameLiftClientTypes.EC2InstanceLimit]?

    public init (
        ec2InstanceLimits: [GameLiftClientTypes.EC2InstanceLimit]? = nil
    )
    {
        self.ec2InstanceLimits = ec2InstanceLimits
    }
}

struct DescribeEC2InstanceLimitsOutputResponseBody: Swift.Equatable {
    let ec2InstanceLimits: [GameLiftClientTypes.EC2InstanceLimit]?
}

extension DescribeEC2InstanceLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2InstanceLimits = "EC2InstanceLimits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2InstanceLimitsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.EC2InstanceLimit?].self, forKey: .ec2InstanceLimits)
        var ec2InstanceLimitsDecoded0:[GameLiftClientTypes.EC2InstanceLimit]? = nil
        if let ec2InstanceLimitsContainer = ec2InstanceLimitsContainer {
            ec2InstanceLimitsDecoded0 = [GameLiftClientTypes.EC2InstanceLimit]()
            for structure0 in ec2InstanceLimitsContainer {
                if let structure0 = structure0 {
                    ec2InstanceLimitsDecoded0?.append(structure0)
                }
            }
        }
        ec2InstanceLimits = ec2InstanceLimitsDecoded0
    }
}

extension DescribeFleetAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarn0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarn0)
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFleetAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetAttributesInput: Swift.Equatable {
    /// A list of unique fleet identifiers to retrieve attributes for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init (
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetAttributesInputBody: Swift.Equatable {
    let fleetIds: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFleetAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[Swift.String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [Swift.String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetAttributes = output.fleetAttributes
            self.nextToken = output.nextToken
        } else {
            self.fleetAttributes = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFleetAttributesOutputResponse: Swift.Equatable {
    /// A collection of objects containing attribute metadata for each requested fleet ID. Attribute objects are returned only for fleets that currently exist.
    public var fleetAttributes: [GameLiftClientTypes.FleetAttributes]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        fleetAttributes: [GameLiftClientTypes.FleetAttributes]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetAttributes = fleetAttributes
        self.nextToken = nextToken
    }
}

struct DescribeFleetAttributesOutputResponseBody: Swift.Equatable {
    let fleetAttributes: [GameLiftClientTypes.FleetAttributes]?
    let nextToken: Swift.String?
}

extension DescribeFleetAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetAttributes = "FleetAttributes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetAttributesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetAttributes?].self, forKey: .fleetAttributes)
        var fleetAttributesDecoded0:[GameLiftClientTypes.FleetAttributes]? = nil
        if let fleetAttributesContainer = fleetAttributesContainer {
            fleetAttributesDecoded0 = [GameLiftClientTypes.FleetAttributes]()
            for structure0 in fleetAttributesContainer {
                if let structure0 = structure0 {
                    fleetAttributesDecoded0?.append(structure0)
                }
            }
        }
        fleetAttributes = fleetAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetCapacityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarn0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarn0)
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFleetCapacityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetCapacityInput: Swift.Equatable {
    /// A unique identifier for the fleet to retrieve capacity information for. You can use either the fleet ID or ARN value. Leave this parameter empty to retrieve capacity information for all fleets.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init (
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetCapacityInputBody: Swift.Equatable {
    let fleetIds: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFleetCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[Swift.String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [Swift.String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetCapacityOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetCapacityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetCapacity = output.fleetCapacity
            self.nextToken = output.nextToken
        } else {
            self.fleetCapacity = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFleetCapacityOutputResponse: Swift.Equatable {
    /// A collection of objects that contains capacity information for each requested fleet ID. Capacity objects are returned only for fleets that currently exist.
    public var fleetCapacity: [GameLiftClientTypes.FleetCapacity]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        fleetCapacity: [GameLiftClientTypes.FleetCapacity]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
        self.nextToken = nextToken
    }
}

struct DescribeFleetCapacityOutputResponseBody: Swift.Equatable {
    let fleetCapacity: [GameLiftClientTypes.FleetCapacity]?
    let nextToken: Swift.String?
}

extension DescribeFleetCapacityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetCapacity = "FleetCapacity"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetCapacityContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetCapacity?].self, forKey: .fleetCapacity)
        var fleetCapacityDecoded0:[GameLiftClientTypes.FleetCapacity]? = nil
        if let fleetCapacityContainer = fleetCapacityContainer {
            fleetCapacityDecoded0 = [GameLiftClientTypes.FleetCapacity]()
            for structure0 in fleetCapacityContainer {
                if let structure0 = structure0 {
                    fleetCapacityDecoded0?.append(structure0)
                }
            }
        }
        fleetCapacity = fleetCapacityDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case fleetId = "FleetId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension DescribeFleetEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetEventsInput: Swift.Equatable {
    /// The most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    public var endTime: ClientRuntime.Date?
    /// A unique identifier for the fleet to get event logs for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// The earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
    public var startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.fleetId = fleetId
        self.limit = limit
        self.nextToken = nextToken
        self.startTime = startTime
    }
}

struct DescribeFleetEventsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFleetEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case fleetId = "FleetId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetEventsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFleetEventsOutputResponse: Swift.Equatable {
    /// A collection of objects containing event log entries for the specified fleet.
    public var events: [GameLiftClientTypes.Event]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        events: [GameLiftClientTypes.Event]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct DescribeFleetEventsOutputResponseBody: Swift.Equatable {
    let events: [GameLiftClientTypes.Event]?
    let nextToken: Swift.String?
}

extension DescribeFleetEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Event?].self, forKey: .events)
        var eventsDecoded0:[GameLiftClientTypes.Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [GameLiftClientTypes.Event]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetLocationAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationstringmodel0 in locations {
                try locationsContainer.encode(locationstringmodel0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFleetLocationAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetLocationAttributesInput: Swift.Equatable {
    /// A unique identifier for the fleet to retrieve remote locations for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This limit is not currently enforced.
    public var limit: Swift.Int?
    /// A list of fleet locations to retrieve information for. Specify locations in the form of an Amazon Web Services Region code, such as us-west-2.
    public var locations: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        locations: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.locations = locations
        self.nextToken = nextToken
    }
}

struct DescribeFleetLocationAttributesInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let locations: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFleetLocationAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .locations)
        var locationsDecoded0:[Swift.String]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [Swift.String]()
            for string0 in locationsContainer {
                if let string0 = string0 {
                    locationsDecoded0?.append(string0)
                }
            }
        }
        locations = locationsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetLocationAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetLocationAttributesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetLocationAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.locationAttributes = output.locationAttributes
            self.nextToken = output.nextToken
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.locationAttributes = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFleetLocationAttributesOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that location attributes were requested for.
    public var fleetId: Swift.String?
    /// Location-specific information on the requested fleet's remote locations.
    public var locationAttributes: [GameLiftClientTypes.LocationAttributes]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        locationAttributes: [GameLiftClientTypes.LocationAttributes]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.locationAttributes = locationAttributes
        self.nextToken = nextToken
    }
}

struct DescribeFleetLocationAttributesOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let locationAttributes: [GameLiftClientTypes.LocationAttributes]?
    let nextToken: Swift.String?
}

extension DescribeFleetLocationAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case locationAttributes = "LocationAttributes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationAttributesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationAttributes?].self, forKey: .locationAttributes)
        var locationAttributesDecoded0:[GameLiftClientTypes.LocationAttributes]? = nil
        if let locationAttributesContainer = locationAttributesContainer {
            locationAttributesDecoded0 = [GameLiftClientTypes.LocationAttributes]()
            for structure0 in locationAttributesContainer {
                if let structure0 = structure0 {
                    locationAttributesDecoded0?.append(structure0)
                }
            }
        }
        locationAttributes = locationAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetLocationCapacityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension DescribeFleetLocationCapacityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetLocationCapacityInput: Swift.Equatable {
    /// A unique identifier for the fleet to request location capacity for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to retrieve capacity information for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var location: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetLocationCapacityInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let location: Swift.String?
}

extension DescribeFleetLocationCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetLocationCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetLocationCapacityOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetLocationCapacityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetCapacity = output.fleetCapacity
        } else {
            self.fleetCapacity = nil
        }
    }
}

public struct DescribeFleetLocationCapacityOutputResponse: Swift.Equatable {
    /// Resource capacity information for the requested fleet location. Capacity objects are returned only for fleets and locations that currently exist.
    public var fleetCapacity: GameLiftClientTypes.FleetCapacity?

    public init (
        fleetCapacity: GameLiftClientTypes.FleetCapacity? = nil
    )
    {
        self.fleetCapacity = fleetCapacity
    }
}

struct DescribeFleetLocationCapacityOutputResponseBody: Swift.Equatable {
    let fleetCapacity: GameLiftClientTypes.FleetCapacity?
}

extension DescribeFleetLocationCapacityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetCapacity = "FleetCapacity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetCapacityDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetCapacity.self, forKey: .fleetCapacity)
        fleetCapacity = fleetCapacityDecoded
    }
}

extension DescribeFleetLocationUtilizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension DescribeFleetLocationUtilizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetLocationUtilizationInput: Swift.Equatable {
    /// A unique identifier for the fleet to request location utilization for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to retrieve utilization information for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    /// This member is required.
    public var location: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetLocationUtilizationInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let location: Swift.String?
}

extension DescribeFleetLocationUtilizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetLocationUtilizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetLocationUtilizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetLocationUtilizationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetLocationUtilizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetLocationUtilizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetUtilization = output.fleetUtilization
        } else {
            self.fleetUtilization = nil
        }
    }
}

public struct DescribeFleetLocationUtilizationOutputResponse: Swift.Equatable {
    /// Utilization information for the requested fleet location. Utilization objects are returned only for fleets and locations that currently exist.
    public var fleetUtilization: GameLiftClientTypes.FleetUtilization?

    public init (
        fleetUtilization: GameLiftClientTypes.FleetUtilization? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
    }
}

struct DescribeFleetLocationUtilizationOutputResponseBody: Swift.Equatable {
    let fleetUtilization: GameLiftClientTypes.FleetUtilization?
}

extension DescribeFleetLocationUtilizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetUtilization = "FleetUtilization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetUtilizationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetUtilization.self, forKey: .fleetUtilization)
        fleetUtilization = fleetUtilizationDecoded
    }
}

extension DescribeFleetPortSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension DescribeFleetPortSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetPortSettingsInput: Swift.Equatable {
    /// A unique identifier for the fleet to retrieve port settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A remote location to check for status of port setting updates. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.location = location
    }
}

struct DescribeFleetPortSettingsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let location: Swift.String?
}

extension DescribeFleetPortSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetPortSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetPortSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetPortSettingsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetPortSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetPortSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.inboundPermissions = output.inboundPermissions
            self.location = output.location
            self.updateStatus = output.updateStatus
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.inboundPermissions = nil
            self.location = nil
            self.updateStatus = nil
        }
    }
}

public struct DescribeFleetPortSettingsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was requested.
    public var fleetId: Swift.String?
    /// The port settings for the requested fleet ID.
    public var inboundPermissions: [GameLiftClientTypes.IpPermission]?
    /// The requested fleet location, expressed as an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?
    /// The current status of updates to the fleet's port settings in the requested fleet location. A status of PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
    public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        inboundPermissions: [GameLiftClientTypes.IpPermission]? = nil,
        location: Swift.String? = nil,
        updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.inboundPermissions = inboundPermissions
        self.location = location
        self.updateStatus = updateStatus
    }
}

struct DescribeFleetPortSettingsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let inboundPermissions: [GameLiftClientTypes.IpPermission]?
    let updateStatus: GameLiftClientTypes.LocationUpdateStatus?
    let location: Swift.String?
}

extension DescribeFleetPortSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case inboundPermissions = "InboundPermissions"
        case location = "Location"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let inboundPermissionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.IpPermission?].self, forKey: .inboundPermissions)
        var inboundPermissionsDecoded0:[GameLiftClientTypes.IpPermission]? = nil
        if let inboundPermissionsContainer = inboundPermissionsContainer {
            inboundPermissionsDecoded0 = [GameLiftClientTypes.IpPermission]()
            for structure0 in inboundPermissionsContainer {
                if let structure0 = structure0 {
                    inboundPermissionsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissions = inboundPermissionsDecoded0
        let updateStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeFleetUtilizationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetIds = fleetIds {
            var fleetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fleetIds)
            for fleetidorarn0 in fleetIds {
                try fleetIdsContainer.encode(fleetidorarn0)
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeFleetUtilizationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeFleetUtilizationInput: Swift.Equatable {
    /// A unique identifier for the fleet to retrieve utilization data for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
    public var fleetIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
    public var nextToken: Swift.String?

    public init (
        fleetIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeFleetUtilizationInputBody: Swift.Equatable {
    let fleetIds: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeFleetUtilizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[Swift.String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [Swift.String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeFleetUtilizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFleetUtilizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeFleetUtilizationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFleetUtilizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeFleetUtilizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetUtilization = output.fleetUtilization
            self.nextToken = output.nextToken
        } else {
            self.fleetUtilization = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeFleetUtilizationOutputResponse: Swift.Equatable {
    /// A collection of objects containing utilization information for each requested fleet ID. Utilization objects are returned only for fleets that currently exist.
    public var fleetUtilization: [GameLiftClientTypes.FleetUtilization]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        fleetUtilization: [GameLiftClientTypes.FleetUtilization]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetUtilization = fleetUtilization
        self.nextToken = nextToken
    }
}

struct DescribeFleetUtilizationOutputResponseBody: Swift.Equatable {
    let fleetUtilization: [GameLiftClientTypes.FleetUtilization]?
    let nextToken: Swift.String?
}

extension DescribeFleetUtilizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetUtilization = "FleetUtilization"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetUtilizationContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetUtilization?].self, forKey: .fleetUtilization)
        var fleetUtilizationDecoded0:[GameLiftClientTypes.FleetUtilization]? = nil
        if let fleetUtilizationContainer = fleetUtilizationContainer {
            fleetUtilizationDecoded0 = [GameLiftClientTypes.FleetUtilization]()
            for structure0 in fleetUtilizationContainer {
                if let structure0 = structure0 {
                    fleetUtilizationDecoded0?.append(structure0)
                }
            }
        }
        fleetUtilization = fleetUtilizationDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
    }
}

extension DescribeGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameServerGroupInput: Swift.Equatable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?

    public init (
        gameServerGroupName: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
    }
}

struct DescribeGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
}

extension DescribeGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
    }
}

extension DescribeGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct DescribeGameServerGroupOutputResponse: Swift.Equatable {
    /// An object with the property settings for the requested game server group resource.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct DescribeGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension DescribeGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension DescribeGameServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
    }
}

extension DescribeGameServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameServerInput: Swift.Equatable {
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server information to be retrieved.
    /// This member is required.
    public var gameServerId: Swift.String?

    public init (
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
    }
}

struct DescribeGameServerInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let gameServerId: Swift.String?
}

extension DescribeGameServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
    }
}

extension DescribeGameServerInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case instanceIds = "InstanceIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for gameserverinstanceid0 in instanceIds {
                try instanceIdsContainer.encode(gameserverinstanceid0)
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeGameServerInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameServerInstancesInput: Swift.Equatable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The Amazon EC2 instance IDs that you want to retrieve status on. Amazon EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0. To retrieve all instances in the game server group, leave this parameter empty.
    public var instanceIds: [Swift.String]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        gameServerGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.instanceIds = instanceIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeGameServerInstancesInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let instanceIds: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeGameServerInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case instanceIds = "InstanceIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[Swift.String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [Swift.String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameServerInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameServerInstancesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameServerInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerInstances = output.gameServerInstances
            self.nextToken = output.nextToken
        } else {
            self.gameServerInstances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeGameServerInstancesOutputResponse: Swift.Equatable {
    /// The collection of requested game server instances.
    public var gameServerInstances: [GameLiftClientTypes.GameServerInstance]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameServerInstances: [GameLiftClientTypes.GameServerInstance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerInstances = gameServerInstances
        self.nextToken = nextToken
    }
}

struct DescribeGameServerInstancesOutputResponseBody: Swift.Equatable {
    let gameServerInstances: [GameLiftClientTypes.GameServerInstance]?
    let nextToken: Swift.String?
}

extension DescribeGameServerInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerInstances = "GameServerInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerInstancesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerInstance?].self, forKey: .gameServerInstances)
        var gameServerInstancesDecoded0:[GameLiftClientTypes.GameServerInstance]? = nil
        if let gameServerInstancesContainer = gameServerInstancesContainer {
            gameServerInstancesDecoded0 = [GameLiftClientTypes.GameServerInstance]()
            for structure0 in gameServerInstancesContainer {
                if let structure0 = structure0 {
                    gameServerInstancesDecoded0?.append(structure0)
                }
            }
        }
        gameServerInstances = gameServerInstancesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameServerOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct DescribeGameServerOutputResponse: Swift.Equatable {
    /// Object that describes the requested game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init (
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct DescribeGameServerOutputResponseBody: Swift.Equatable {
    let gameServer: GameLiftClientTypes.GameServer?
}

extension DescribeGameServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

extension DescribeGameSessionDetailsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = self.statusFilter {
            try encodeContainer.encode(statusFilter, forKey: .statusFilter)
        }
    }
}

extension DescribeGameSessionDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameSessionDetailsInput: Swift.Equatable {
    /// A unique identifier for the alias associated with the fleet to retrieve all game sessions for. You can use either the alias ID or ARN value.
    public var aliasId: Swift.String?
    /// A unique identifier for the fleet to retrieve all game sessions active on the fleet. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?
    /// A unique identifier for the game session to retrieve.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A fleet location to get game session details for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory).
    public var statusFilter: Swift.String?

    public init (
        aliasId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeGameSessionDetailsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let gameSessionId: Swift.String?
    let aliasId: Swift.String?
    let location: Swift.String?
    let statusFilter: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeGameSessionDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameSessionDetailsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameSessionDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionDetails = output.gameSessionDetails
            self.nextToken = output.nextToken
        } else {
            self.gameSessionDetails = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeGameSessionDetailsOutputResponse: Swift.Equatable {
    /// A collection of properties for each game session that matches the request.
    public var gameSessionDetails: [GameLiftClientTypes.GameSessionDetail]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameSessionDetails: [GameLiftClientTypes.GameSessionDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessionDetails = gameSessionDetails
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionDetailsOutputResponseBody: Swift.Equatable {
    let gameSessionDetails: [GameLiftClientTypes.GameSessionDetail]?
    let nextToken: Swift.String?
}

extension DescribeGameSessionDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionDetails = "GameSessionDetails"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDetailsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSessionDetail?].self, forKey: .gameSessionDetails)
        var gameSessionDetailsDecoded0:[GameLiftClientTypes.GameSessionDetail]? = nil
        if let gameSessionDetailsContainer = gameSessionDetailsContainer {
            gameSessionDetailsDecoded0 = [GameLiftClientTypes.GameSessionDetail]()
            for structure0 in gameSessionDetailsContainer {
                if let structure0 = structure0 {
                    gameSessionDetailsDecoded0?.append(structure0)
                }
            }
        }
        gameSessionDetails = gameSessionDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionPlacementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case placementId = "PlacementId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let placementId = self.placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
    }
}

extension DescribeGameSessionPlacementInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameSessionPlacementInput: Swift.Equatable {
    /// A unique identifier for a game session placement to retrieve.
    /// This member is required.
    public var placementId: Swift.String?

    public init (
        placementId: Swift.String? = nil
    )
    {
        self.placementId = placementId
    }
}

struct DescribeGameSessionPlacementInputBody: Swift.Equatable {
    let placementId: Swift.String?
}

extension DescribeGameSessionPlacementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case placementId = "PlacementId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementId)
        placementId = placementIdDecoded
    }
}

extension DescribeGameSessionPlacementOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionPlacementOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameSessionPlacementOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionPlacementOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

public struct DescribeGameSessionPlacementOutputResponse: Swift.Equatable {
    /// Object that describes the requested game session placement.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init (
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct DescribeGameSessionPlacementOutputResponseBody: Swift.Equatable {
    let gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?
}

extension DescribeGameSessionPlacementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

extension DescribeGameSessionQueuesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for gamesessionqueuenameorarn0 in names {
                try namesContainer.encode(gamesessionqueuenameorarn0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeGameSessionQueuesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameSessionQueuesInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. You can request up to 50 results.
    public var limit: Swift.Int?
    /// A list of queue names to retrieve information for. You can use either the queue ID or ARN value. To request settings for all queues, leave this parameter empty.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionQueuesInputBody: Swift.Equatable {
    let names: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeGameSessionQueuesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionQueuesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionQueuesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameSessionQueuesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionQueuesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameSessionQueuesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionQueues = output.gameSessionQueues
            self.nextToken = output.nextToken
        } else {
            self.gameSessionQueues = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeGameSessionQueuesOutputResponse: Swift.Equatable {
    /// A collection of objects that describe the requested game session queues.
    public var gameSessionQueues: [GameLiftClientTypes.GameSessionQueue]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameSessionQueues: [GameLiftClientTypes.GameSessionQueue]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessionQueues = gameSessionQueues
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionQueuesOutputResponseBody: Swift.Equatable {
    let gameSessionQueues: [GameLiftClientTypes.GameSessionQueue]?
    let nextToken: Swift.String?
}

extension DescribeGameSessionQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionQueues = "GameSessionQueues"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueuesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSessionQueue?].self, forKey: .gameSessionQueues)
        var gameSessionQueuesDecoded0:[GameLiftClientTypes.GameSessionQueue]? = nil
        if let gameSessionQueuesContainer = gameSessionQueuesContainer {
            gameSessionQueuesDecoded0 = [GameLiftClientTypes.GameSessionQueue]()
            for structure0 in gameSessionQueuesContainer {
                if let structure0 = structure0 {
                    gameSessionQueuesDecoded0?.append(structure0)
                }
            }
        }
        gameSessionQueues = gameSessionQueuesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = self.statusFilter {
            try encodeContainer.encode(statusFilter, forKey: .statusFilter)
        }
    }
}

extension DescribeGameSessionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeGameSessionsInput: Swift.Equatable {
    /// A unique identifier for the alias associated with the fleet to retrieve game sessions for. You can use either the alias ID or ARN value.
    public var aliasId: Swift.String?
    /// A unique identifier for the fleet to retrieve game sessions for. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?
    /// A unique identifier for the game session to retrieve.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A fleet location to get game sessions for. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Game session status to filter results on. You can filter on the following states: ACTIVE, TERMINATED, ACTIVATING, and TERMINATING. The last two are transitory and used for only very brief periods of time.
    public var statusFilter: Swift.String?

    public init (
        aliasId: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.fleetId = fleetId
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeGameSessionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let gameSessionId: Swift.String?
    let aliasId: Swift.String?
    let location: Swift.String?
    let statusFilter: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeGameSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeGameSessionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeGameSessionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeGameSessionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeGameSessionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeGameSessionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessions = output.gameSessions
            self.nextToken = output.nextToken
        } else {
            self.gameSessions = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeGameSessionsOutputResponse: Swift.Equatable {
    /// A collection of properties for each game session that matches the request.
    public var gameSessions: [GameLiftClientTypes.GameSession]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameSessions: [GameLiftClientTypes.GameSession]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

struct DescribeGameSessionsOutputResponseBody: Swift.Equatable {
    let gameSessions: [GameLiftClientTypes.GameSession]?
    let nextToken: Swift.String?
}

extension DescribeGameSessionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessions = "GameSessions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSession?].self, forKey: .gameSessions)
        var gameSessionsDecoded0:[GameLiftClientTypes.GameSession]? = nil
        if let gameSessionsContainer = gameSessionsContainer {
            gameSessionsDecoded0 = [GameLiftClientTypes.GameSession]()
            for structure0 in gameSessionsContainer {
                if let structure0 = structure0 {
                    gameSessionsDecoded0?.append(structure0)
                }
            }
        }
        gameSessions = gameSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeInstancesInput: Swift.Equatable {
    /// A unique identifier for the fleet to retrieve instance information for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
    public var instanceId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The name of a location to retrieve instance information for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
    }
}

struct DescribeInstancesInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let instanceId: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
    let location: Swift.String?
}

extension DescribeInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeInstancesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.nextToken = output.nextToken
        } else {
            self.instances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInstancesOutputResponse: Swift.Equatable {
    /// A collection of objects containing properties for each instance returned.
    public var instances: [GameLiftClientTypes.Instance]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        instances: [GameLiftClientTypes.Instance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
    }
}

struct DescribeInstancesOutputResponseBody: Swift.Equatable {
    let instances: [GameLiftClientTypes.Instance]?
    let nextToken: Swift.String?
}

extension DescribeInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances = "Instances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Instance?].self, forKey: .instances)
        var instancesDecoded0:[GameLiftClientTypes.Instance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [GameLiftClientTypes.Instance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingConfigurationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for matchmakingconfigurationname0 in names {
                try namesContainer.encode(matchmakingconfigurationname0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}

extension DescribeMatchmakingConfigurationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMatchmakingConfigurationsInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is limited to 10.
    public var limit: Swift.Int?
    /// A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.
    public var ruleSetName: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
        self.ruleSetName = ruleSetName
    }
}

struct DescribeMatchmakingConfigurationsInputBody: Swift.Equatable {
    let names: [Swift.String]?
    let ruleSetName: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeMatchmakingConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMatchmakingConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMatchmakingConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurations = output.configurations
            self.nextToken = output.nextToken
        } else {
            self.configurations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeMatchmakingConfigurationsOutputResponse: Swift.Equatable {
    /// A collection of requested matchmaking configurations.
    public var configurations: [GameLiftClientTypes.MatchmakingConfiguration]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        configurations: [GameLiftClientTypes.MatchmakingConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurations = configurations
        self.nextToken = nextToken
    }
}

struct DescribeMatchmakingConfigurationsOutputResponseBody: Swift.Equatable {
    let configurations: [GameLiftClientTypes.MatchmakingConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeMatchmakingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurations = "Configurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.MatchmakingConfiguration?].self, forKey: .configurations)
        var configurationsDecoded0:[GameLiftClientTypes.MatchmakingConfiguration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [GameLiftClientTypes.MatchmakingConfiguration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ticketIds = "TicketIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ticketIds = ticketIds {
            var ticketIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ticketIds)
            for matchmakingidstringmodel0 in ticketIds {
                try ticketIdsContainer.encode(matchmakingidstringmodel0)
            }
        }
    }
}

extension DescribeMatchmakingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMatchmakingInput: Swift.Equatable {
    /// A unique identifier for a matchmaking ticket. You can include up to 10 ID values.
    /// This member is required.
    public var ticketIds: [Swift.String]?

    public init (
        ticketIds: [Swift.String]? = nil
    )
    {
        self.ticketIds = ticketIds
    }
}

struct DescribeMatchmakingInputBody: Swift.Equatable {
    let ticketIds: [Swift.String]?
}

extension DescribeMatchmakingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ticketIds = "TicketIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ticketIds)
        var ticketIdsDecoded0:[Swift.String]? = nil
        if let ticketIdsContainer = ticketIdsContainer {
            ticketIdsDecoded0 = [Swift.String]()
            for string0 in ticketIdsContainer {
                if let string0 = string0 {
                    ticketIdsDecoded0?.append(string0)
                }
            }
        }
        ticketIds = ticketIdsDecoded0
    }
}

extension DescribeMatchmakingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMatchmakingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMatchmakingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ticketList = output.ticketList
        } else {
            self.ticketList = nil
        }
    }
}

public struct DescribeMatchmakingOutputResponse: Swift.Equatable {
    /// A collection of existing matchmaking ticket objects matching the request.
    public var ticketList: [GameLiftClientTypes.MatchmakingTicket]?

    public init (
        ticketList: [GameLiftClientTypes.MatchmakingTicket]? = nil
    )
    {
        self.ticketList = ticketList
    }
}

struct DescribeMatchmakingOutputResponseBody: Swift.Equatable {
    let ticketList: [GameLiftClientTypes.MatchmakingTicket]?
}

extension DescribeMatchmakingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ticketList = "TicketList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketListContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.MatchmakingTicket?].self, forKey: .ticketList)
        var ticketListDecoded0:[GameLiftClientTypes.MatchmakingTicket]? = nil
        if let ticketListContainer = ticketListContainer {
            ticketListDecoded0 = [GameLiftClientTypes.MatchmakingTicket]()
            for structure0 in ticketListContainer {
                if let structure0 = structure0 {
                    ticketListDecoded0?.append(structure0)
                }
            }
        }
        ticketList = ticketListDecoded0
    }
}

extension DescribeMatchmakingRuleSetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for matchmakingrulesetname0 in names {
                try namesContainer.encode(matchmakingrulesetname0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeMatchmakingRuleSetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMatchmakingRuleSetsInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A list of one or more matchmaking rule set names to retrieve details for. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.
    public var names: [Swift.String]?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        names: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.names = names
        self.nextToken = nextToken
    }
}

struct DescribeMatchmakingRuleSetsInputBody: Swift.Equatable {
    let names: [Swift.String]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeMatchmakingRuleSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case names = "Names"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMatchmakingRuleSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMatchmakingRuleSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMatchmakingRuleSetsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMatchmakingRuleSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMatchmakingRuleSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.ruleSets = output.ruleSets
        } else {
            self.nextToken = nil
            self.ruleSets = nil
        }
    }
}

public struct DescribeMatchmakingRuleSetsOutputResponse: Swift.Equatable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of requested matchmaking rule set objects.
    /// This member is required.
    public var ruleSets: [GameLiftClientTypes.MatchmakingRuleSet]?

    public init (
        nextToken: Swift.String? = nil,
        ruleSets: [GameLiftClientTypes.MatchmakingRuleSet]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleSets = ruleSets
    }
}

struct DescribeMatchmakingRuleSetsOutputResponseBody: Swift.Equatable {
    let ruleSets: [GameLiftClientTypes.MatchmakingRuleSet]?
    let nextToken: Swift.String?
}

extension DescribeMatchmakingRuleSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case ruleSets = "RuleSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.MatchmakingRuleSet?].self, forKey: .ruleSets)
        var ruleSetsDecoded0:[GameLiftClientTypes.MatchmakingRuleSet]? = nil
        if let ruleSetsContainer = ruleSetsContainer {
            ruleSetsDecoded0 = [GameLiftClientTypes.MatchmakingRuleSet]()
            for structure0 in ruleSetsContainer {
                if let structure0 = structure0 {
                    ruleSetsDecoded0?.append(structure0)
                }
            }
        }
        ruleSets = ruleSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePlayerSessionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case playerSessionStatusFilter = "PlayerSessionStatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = self.playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
        if let playerSessionStatusFilter = self.playerSessionStatusFilter {
            try encodeContainer.encode(playerSessionStatusFilter, forKey: .playerSessionStatusFilter)
        }
    }
}

extension DescribePlayerSessionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribePlayerSessionsInput: Swift.Equatable {
    /// A unique identifier for the game session to retrieve player sessions for.
    public var gameSessionId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
    public var nextToken: Swift.String?
    /// A unique identifier for a player to retrieve player sessions for.
    public var playerId: Swift.String?
    /// A unique identifier for a player session to retrieve.
    public var playerSessionId: Swift.String?
    /// Player session status to filter results on. Note that when a PlayerSessionId or PlayerId is provided in a DescribePlayerSessions request, then the PlayerSessionStatusFilter has no effect on the response. Possible player session statuses include the following:
    ///
    /// * RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.
    ///
    /// * ACTIVE -- The player has been validated by the server process and is currently connected.
    ///
    /// * COMPLETED -- The player connection has been dropped.
    ///
    /// * TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
    public var playerSessionStatusFilter: Swift.String?

    public init (
        gameSessionId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        playerId: Swift.String? = nil,
        playerSessionId: Swift.String? = nil,
        playerSessionStatusFilter: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.limit = limit
        self.nextToken = nextToken
        self.playerId = playerId
        self.playerSessionId = playerSessionId
        self.playerSessionStatusFilter = playerSessionStatusFilter
    }
}

struct DescribePlayerSessionsInputBody: Swift.Equatable {
    let gameSessionId: Swift.String?
    let playerId: Swift.String?
    let playerSessionId: Swift.String?
    let playerSessionStatusFilter: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribePlayerSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case playerSessionStatusFilter = "PlayerSessionStatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
        let playerSessionStatusFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerSessionStatusFilter)
        playerSessionStatusFilter = playerSessionStatusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePlayerSessionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePlayerSessionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribePlayerSessionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePlayerSessionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribePlayerSessionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.playerSessions = output.playerSessions
        } else {
            self.nextToken = nil
            self.playerSessions = nil
        }
    }
}

public struct DescribePlayerSessionsOutputResponse: Swift.Equatable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of objects containing properties for each player session that matches the request.
    public var playerSessions: [GameLiftClientTypes.PlayerSession]?

    public init (
        nextToken: Swift.String? = nil,
        playerSessions: [GameLiftClientTypes.PlayerSession]? = nil
    )
    {
        self.nextToken = nextToken
        self.playerSessions = playerSessions
    }
}

struct DescribePlayerSessionsOutputResponseBody: Swift.Equatable {
    let playerSessions: [GameLiftClientTypes.PlayerSession]?
    let nextToken: Swift.String?
}

extension DescribePlayerSessionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case playerSessions = "PlayerSessions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerSession?].self, forKey: .playerSessions)
        var playerSessionsDecoded0:[GameLiftClientTypes.PlayerSession]? = nil
        if let playerSessionsContainer = playerSessionsContainer {
            playerSessionsDecoded0 = [GameLiftClientTypes.PlayerSession]()
            for structure0 in playerSessionsContainer {
                if let structure0 = structure0 {
                    playerSessionsDecoded0?.append(structure0)
                }
            }
        }
        playerSessions = playerSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeRuntimeConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension DescribeRuntimeConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeRuntimeConfigurationInput: Swift.Equatable {
    /// A unique identifier for the fleet to get the runtime configuration for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DescribeRuntimeConfigurationInputBody: Swift.Equatable {
    let fleetId: Swift.String?
}

extension DescribeRuntimeConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DescribeRuntimeConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRuntimeConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeRuntimeConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRuntimeConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeRuntimeConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runtimeConfiguration = output.runtimeConfiguration
        } else {
            self.runtimeConfiguration = nil
        }
    }
}

public struct DescribeRuntimeConfigurationOutputResponse: Swift.Equatable {
    /// Instructions that describe how server processes should be launched and maintained on each instance in the fleet.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init (
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct DescribeRuntimeConfigurationOutputResponseBody: Swift.Equatable {
    let runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
}

extension DescribeRuntimeConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

extension DescribeScalingPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = self.statusFilter {
            try encodeContainer.encode(statusFilter.rawValue, forKey: .statusFilter)
        }
    }
}

extension DescribeScalingPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScalingPoliciesInput: Swift.Equatable {
    /// A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.
    ///
    /// * ACTIVE -- The scaling policy is currently in force.
    ///
    /// * UPDATEREQUESTED -- A request to update the scaling policy has been received.
    ///
    /// * UPDATING -- A change is being made to the scaling policy.
    ///
    /// * DELETEREQUESTED -- A request to delete the scaling policy has been received.
    ///
    /// * DELETING -- The scaling policy is being deleted.
    ///
    /// * DELETED -- The scaling policy has been deleted.
    ///
    /// * ERROR -- An error occurred in creating the policy. It should be removed and recreated.
    public var statusFilter: GameLiftClientTypes.ScalingStatusType?

    public init (
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: GameLiftClientTypes.ScalingStatusType? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct DescribeScalingPoliciesInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let statusFilter: GameLiftClientTypes.ScalingStatusType?
    let limit: Swift.Int?
    let nextToken: Swift.String?
    let location: Swift.String?
}

extension DescribeScalingPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let statusFilterDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingStatusType.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension DescribeScalingPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScalingPoliciesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScalingPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

public struct DescribeScalingPoliciesOutputResponse: Swift.Equatable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A collection of objects containing the scaling policies matching the request.
    public var scalingPolicies: [GameLiftClientTypes.ScalingPolicy]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPolicies: [GameLiftClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribeScalingPoliciesOutputResponseBody: Swift.Equatable {
    let scalingPolicies: [GameLiftClientTypes.ScalingPolicy]?
    let nextToken: Swift.String?
}

extension DescribeScalingPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.ScalingPolicy?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[GameLiftClientTypes.ScalingPolicy]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [GameLiftClientTypes.ScalingPolicy]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScriptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

extension DescribeScriptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeScriptInput: Swift.Equatable {
    /// A unique identifier for the Realtime script to retrieve properties for. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?

    public init (
        scriptId: Swift.String? = nil
    )
    {
        self.scriptId = scriptId
    }
}

struct DescribeScriptInputBody: Swift.Equatable {
    let scriptId: Swift.String?
}

extension DescribeScriptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scriptId = "ScriptId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
    }
}

extension DescribeScriptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScriptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeScriptOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScriptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeScriptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct DescribeScriptOutputResponse: Swift.Equatable {
    /// A set of properties describing the requested script.
    public var script: GameLiftClientTypes.Script?

    public init (
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

struct DescribeScriptOutputResponseBody: Swift.Equatable {
    let script: GameLiftClientTypes.Script?
}

extension DescribeScriptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case script = "Script"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Script.self, forKey: .script)
        script = scriptDecoded
    }
}

extension DescribeVpcPeeringAuthorizationsInput: Swift.Encodable {

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode([String:String]())
    }
}

extension DescribeVpcPeeringAuthorizationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeVpcPeeringAuthorizationsInput: Swift.Equatable {

    public init () { }
}

struct DescribeVpcPeeringAuthorizationsInputBody: Swift.Equatable {
}

extension DescribeVpcPeeringAuthorizationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeVpcPeeringAuthorizationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcPeeringAuthorizationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeVpcPeeringAuthorizationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcPeeringAuthorizationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeVpcPeeringAuthorizationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcPeeringAuthorizations = output.vpcPeeringAuthorizations
        } else {
            self.vpcPeeringAuthorizations = nil
        }
    }
}

public struct DescribeVpcPeeringAuthorizationsOutputResponse: Swift.Equatable {
    /// A collection of objects that describe all valid VPC peering operations for the current Amazon Web Services account.
    public var vpcPeeringAuthorizations: [GameLiftClientTypes.VpcPeeringAuthorization]?

    public init (
        vpcPeeringAuthorizations: [GameLiftClientTypes.VpcPeeringAuthorization]? = nil
    )
    {
        self.vpcPeeringAuthorizations = vpcPeeringAuthorizations
    }
}

struct DescribeVpcPeeringAuthorizationsOutputResponseBody: Swift.Equatable {
    let vpcPeeringAuthorizations: [GameLiftClientTypes.VpcPeeringAuthorization]?
}

extension DescribeVpcPeeringAuthorizationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcPeeringAuthorizations = "VpcPeeringAuthorizations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringAuthorizationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.VpcPeeringAuthorization?].self, forKey: .vpcPeeringAuthorizations)
        var vpcPeeringAuthorizationsDecoded0:[GameLiftClientTypes.VpcPeeringAuthorization]? = nil
        if let vpcPeeringAuthorizationsContainer = vpcPeeringAuthorizationsContainer {
            vpcPeeringAuthorizationsDecoded0 = [GameLiftClientTypes.VpcPeeringAuthorization]()
            for structure0 in vpcPeeringAuthorizationsContainer {
                if let structure0 = structure0 {
                    vpcPeeringAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        vpcPeeringAuthorizations = vpcPeeringAuthorizationsDecoded0
    }
}

extension DescribeVpcPeeringConnectionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension DescribeVpcPeeringConnectionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeVpcPeeringConnectionsInput: Swift.Equatable {
    /// A unique identifier for the fleet. You can use either the fleet ID or ARN value.
    public var fleetId: Swift.String?

    public init (
        fleetId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
    }
}

struct DescribeVpcPeeringConnectionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
}

extension DescribeVpcPeeringConnectionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
    }
}

extension DescribeVpcPeeringConnectionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeVpcPeeringConnectionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeVpcPeeringConnectionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeVpcPeeringConnectionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeVpcPeeringConnectionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.vpcPeeringConnections = output.vpcPeeringConnections
        } else {
            self.vpcPeeringConnections = nil
        }
    }
}

public struct DescribeVpcPeeringConnectionsOutputResponse: Swift.Equatable {
    /// A collection of VPC peering connection records that match the request.
    public var vpcPeeringConnections: [GameLiftClientTypes.VpcPeeringConnection]?

    public init (
        vpcPeeringConnections: [GameLiftClientTypes.VpcPeeringConnection]? = nil
    )
    {
        self.vpcPeeringConnections = vpcPeeringConnections
    }
}

struct DescribeVpcPeeringConnectionsOutputResponseBody: Swift.Equatable {
    let vpcPeeringConnections: [GameLiftClientTypes.VpcPeeringConnection]?
}

extension DescribeVpcPeeringConnectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vpcPeeringConnections = "VpcPeeringConnections"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcPeeringConnectionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.VpcPeeringConnection?].self, forKey: .vpcPeeringConnections)
        var vpcPeeringConnectionsDecoded0:[GameLiftClientTypes.VpcPeeringConnection]? = nil
        if let vpcPeeringConnectionsContainer = vpcPeeringConnectionsContainer {
            vpcPeeringConnectionsDecoded0 = [GameLiftClientTypes.VpcPeeringConnection]()
            for structure0 in vpcPeeringConnectionsContainer {
                if let structure0 = structure0 {
                    vpcPeeringConnectionsDecoded0?.append(structure0)
                }
            }
        }
        vpcPeeringConnections = vpcPeeringConnectionsDecoded0
    }
}

extension GameLiftClientTypes.DesiredPlayerSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case playerData = "PlayerData"
        case playerId = "PlayerId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerData = self.playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension GameLiftClientTypes {
    /// Player information for use when creating player sessions using a game session placement request.
    public struct DesiredPlayerSession: Swift.Equatable {
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public var playerData: Swift.String?
        /// A unique identifier for a player to associate with the player session.
        public var playerId: Swift.String?

        public init (
            playerData: Swift.String? = nil,
            playerId: Swift.String? = nil
        )
        {
            self.playerData = playerData
            self.playerId = playerId
        }
    }

}

extension GameLiftClientTypes.EC2InstanceCounts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "ACTIVE"
        case desired = "DESIRED"
        case idle = "IDLE"
        case maximum = "MAXIMUM"
        case minimum = "MINIMUM"
        case pending = "PENDING"
        case terminating = "TERMINATING"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let desired = self.desired {
            try encodeContainer.encode(desired, forKey: .desired)
        }
        if let idle = self.idle {
            try encodeContainer.encode(idle, forKey: .idle)
        }
        if let maximum = self.maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let minimum = self.minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let pending = self.pending {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if let terminating = self.terminating {
            try encodeContainer.encode(terminating, forKey: .terminating)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desired)
        desired = desiredDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximum)
        maximum = maximumDecoded
        let pendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pending)
        pending = pendingDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .active)
        active = activeDecoded
        let idleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idle)
        idle = idleDecoded
        let terminatingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .terminating)
        terminating = terminatingDecoded
    }
}

extension GameLiftClientTypes {
    /// Resource capacity settings. Fleet capacity is measured in Amazon EC2 instances. Pending and terminating counts are non-zero when the fleet capacity is adjusting to a scaling event or if access to resources is temporarily affected.
    public struct EC2InstanceCounts: Swift.Equatable {
        /// Actual number of instances that are ready to host game sessions.
        public var active: Swift.Int?
        /// Ideal number of active instances. GameLift will always try to maintain the desired number of instances. Capacity is scaled up or down by changing the desired instances.
        public var desired: Swift.Int?
        /// Number of active instances that are not currently hosting a game session.
        public var idle: Swift.Int?
        /// The maximum instance count value allowed.
        public var maximum: Swift.Int?
        /// The minimum instance count value allowed.
        public var minimum: Swift.Int?
        /// Number of instances that are starting but not yet active.
        public var pending: Swift.Int?
        /// Number of instances that are no longer active but haven't yet been terminated.
        public var terminating: Swift.Int?

        public init (
            active: Swift.Int? = nil,
            desired: Swift.Int? = nil,
            idle: Swift.Int? = nil,
            maximum: Swift.Int? = nil,
            minimum: Swift.Int? = nil,
            pending: Swift.Int? = nil,
            terminating: Swift.Int? = nil
        )
        {
            self.active = active
            self.desired = desired
            self.idle = idle
            self.maximum = maximum
            self.minimum = minimum
            self.pending = pending
            self.terminating = terminating
        }
    }

}

extension GameLiftClientTypes.EC2InstanceLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentInstances = "CurrentInstances"
        case ec2InstanceType = "EC2InstanceType"
        case instanceLimit = "InstanceLimit"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentInstances = self.currentInstances {
            try encodeContainer.encode(currentInstances, forKey: .currentInstances)
        }
        if let ec2InstanceType = self.ec2InstanceType {
            try encodeContainer.encode(ec2InstanceType.rawValue, forKey: .ec2InstanceType)
        }
        if let instanceLimit = self.instanceLimit {
            try encodeContainer.encode(instanceLimit, forKey: .instanceLimit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2InstanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .ec2InstanceType)
        ec2InstanceType = ec2InstanceTypeDecoded
        let currentInstancesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentInstances)
        currentInstances = currentInstancesDecoded
        let instanceLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceLimit)
        instanceLimit = instanceLimitDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// The GameLift service limits for an Amazon EC2 instance type and current utilization. GameLift allows Amazon Web Services accounts a maximum number of instances, per instance type, per Amazon Web Services Region or location, for use with GameLift. You can request an limit increase for your account by using the Service limits page in the GameLift console.
    public struct EC2InstanceLimit: Swift.Equatable {
        /// The number of instances for the specified type and location that are currently being used by the Amazon Web Services account.
        public var currentInstances: Swift.Int?
        /// The name of an Amazon EC2 instance type. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions.
        public var ec2InstanceType: GameLiftClientTypes.EC2InstanceType?
        /// The number of instances that is allowed for the specified instance type and location.
        public var instanceLimit: Swift.Int?
        /// An Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?

        public init (
            currentInstances: Swift.Int? = nil,
            ec2InstanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            instanceLimit: Swift.Int? = nil,
            location: Swift.String? = nil
        )
        {
            self.currentInstances = currentInstances
            self.ec2InstanceType = ec2InstanceType
            self.instanceLimit = instanceLimit
            self.location = location
        }
    }

}

extension GameLiftClientTypes {
    public enum EC2InstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case c32xlarge
        case c34xlarge
        case c38xlarge
        case c3Large
        case c3Xlarge
        case c42xlarge
        case c44xlarge
        case c48xlarge
        case c4Large
        case c4Xlarge
        case c512xlarge
        case c518xlarge
        case c524xlarge
        case c52xlarge
        case c54xlarge
        case c59xlarge
        case c5Large
        case c5Xlarge
        case c5a12xlarge
        case c5a16xlarge
        case c5a24xlarge
        case c5a2xlarge
        case c5a4xlarge
        case c5a8xlarge
        case c5aLarge
        case c5aXlarge
        case c5d12xlarge
        case c5d18xlarge
        case c5d24xlarge
        case c5d2xlarge
        case c5d4xlarge
        case c5d9xlarge
        case c5dLarge
        case c5dXlarge
        case c6a12xlarge
        case c6a16xlarge
        case c6a24xlarge
        case c6a2xlarge
        case c6a4xlarge
        case c6a8xlarge
        case c6aLarge
        case c6aXlarge
        case c6i12xlarge
        case c6i16xlarge
        case c6i24xlarge
        case c6i2xlarge
        case c6i4xlarge
        case c6i8xlarge
        case c6iLarge
        case c6iXlarge
        case m32xlarge
        case m3Large
        case m3Medium
        case m3Xlarge
        case m410xlarge
        case m42xlarge
        case m44xlarge
        case m4Large
        case m4Xlarge
        case m512xlarge
        case m516xlarge
        case m524xlarge
        case m52xlarge
        case m54xlarge
        case m58xlarge
        case m5Large
        case m5Xlarge
        case m5a12xlarge
        case m5a16xlarge
        case m5a24xlarge
        case m5a2xlarge
        case m5a4xlarge
        case m5a8xlarge
        case m5aLarge
        case m5aXlarge
        case r32xlarge
        case r34xlarge
        case r38xlarge
        case r3Large
        case r3Xlarge
        case r416xlarge
        case r42xlarge
        case r44xlarge
        case r48xlarge
        case r4Large
        case r4Xlarge
        case r512xlarge
        case r516xlarge
        case r524xlarge
        case r52xlarge
        case r54xlarge
        case r58xlarge
        case r5Large
        case r5Xlarge
        case r5a12xlarge
        case r5a16xlarge
        case r5a24xlarge
        case r5a2xlarge
        case r5a4xlarge
        case r5a8xlarge
        case r5aLarge
        case r5aXlarge
        case r5d12xlarge
        case r5d16xlarge
        case r5d24xlarge
        case r5d2xlarge
        case r5d4xlarge
        case r5d8xlarge
        case r5dLarge
        case r5dXlarge
        case t2Large
        case t2Medium
        case t2Micro
        case t2Small
        case sdkUnknown(Swift.String)

        public static var allCases: [EC2InstanceType] {
            return [
                .c32xlarge,
                .c34xlarge,
                .c38xlarge,
                .c3Large,
                .c3Xlarge,
                .c42xlarge,
                .c44xlarge,
                .c48xlarge,
                .c4Large,
                .c4Xlarge,
                .c512xlarge,
                .c518xlarge,
                .c524xlarge,
                .c52xlarge,
                .c54xlarge,
                .c59xlarge,
                .c5Large,
                .c5Xlarge,
                .c5a12xlarge,
                .c5a16xlarge,
                .c5a24xlarge,
                .c5a2xlarge,
                .c5a4xlarge,
                .c5a8xlarge,
                .c5aLarge,
                .c5aXlarge,
                .c5d12xlarge,
                .c5d18xlarge,
                .c5d24xlarge,
                .c5d2xlarge,
                .c5d4xlarge,
                .c5d9xlarge,
                .c5dLarge,
                .c5dXlarge,
                .c6a12xlarge,
                .c6a16xlarge,
                .c6a24xlarge,
                .c6a2xlarge,
                .c6a4xlarge,
                .c6a8xlarge,
                .c6aLarge,
                .c6aXlarge,
                .c6i12xlarge,
                .c6i16xlarge,
                .c6i24xlarge,
                .c6i2xlarge,
                .c6i4xlarge,
                .c6i8xlarge,
                .c6iLarge,
                .c6iXlarge,
                .m32xlarge,
                .m3Large,
                .m3Medium,
                .m3Xlarge,
                .m410xlarge,
                .m42xlarge,
                .m44xlarge,
                .m4Large,
                .m4Xlarge,
                .m512xlarge,
                .m516xlarge,
                .m524xlarge,
                .m52xlarge,
                .m54xlarge,
                .m58xlarge,
                .m5Large,
                .m5Xlarge,
                .m5a12xlarge,
                .m5a16xlarge,
                .m5a24xlarge,
                .m5a2xlarge,
                .m5a4xlarge,
                .m5a8xlarge,
                .m5aLarge,
                .m5aXlarge,
                .r32xlarge,
                .r34xlarge,
                .r38xlarge,
                .r3Large,
                .r3Xlarge,
                .r416xlarge,
                .r42xlarge,
                .r44xlarge,
                .r48xlarge,
                .r4Large,
                .r4Xlarge,
                .r512xlarge,
                .r516xlarge,
                .r524xlarge,
                .r52xlarge,
                .r54xlarge,
                .r58xlarge,
                .r5Large,
                .r5Xlarge,
                .r5a12xlarge,
                .r5a16xlarge,
                .r5a24xlarge,
                .r5a2xlarge,
                .r5a4xlarge,
                .r5a8xlarge,
                .r5aLarge,
                .r5aXlarge,
                .r5d12xlarge,
                .r5d16xlarge,
                .r5d24xlarge,
                .r5d2xlarge,
                .r5d4xlarge,
                .r5d8xlarge,
                .r5dLarge,
                .r5dXlarge,
                .t2Large,
                .t2Medium,
                .t2Micro,
                .t2Small,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .c32xlarge: return "c3.2xlarge"
            case .c34xlarge: return "c3.4xlarge"
            case .c38xlarge: return "c3.8xlarge"
            case .c3Large: return "c3.large"
            case .c3Xlarge: return "c3.xlarge"
            case .c42xlarge: return "c4.2xlarge"
            case .c44xlarge: return "c4.4xlarge"
            case .c48xlarge: return "c4.8xlarge"
            case .c4Large: return "c4.large"
            case .c4Xlarge: return "c4.xlarge"
            case .c512xlarge: return "c5.12xlarge"
            case .c518xlarge: return "c5.18xlarge"
            case .c524xlarge: return "c5.24xlarge"
            case .c52xlarge: return "c5.2xlarge"
            case .c54xlarge: return "c5.4xlarge"
            case .c59xlarge: return "c5.9xlarge"
            case .c5Large: return "c5.large"
            case .c5Xlarge: return "c5.xlarge"
            case .c5a12xlarge: return "c5a.12xlarge"
            case .c5a16xlarge: return "c5a.16xlarge"
            case .c5a24xlarge: return "c5a.24xlarge"
            case .c5a2xlarge: return "c5a.2xlarge"
            case .c5a4xlarge: return "c5a.4xlarge"
            case .c5a8xlarge: return "c5a.8xlarge"
            case .c5aLarge: return "c5a.large"
            case .c5aXlarge: return "c5a.xlarge"
            case .c5d12xlarge: return "c5d.12xlarge"
            case .c5d18xlarge: return "c5d.18xlarge"
            case .c5d24xlarge: return "c5d.24xlarge"
            case .c5d2xlarge: return "c5d.2xlarge"
            case .c5d4xlarge: return "c5d.4xlarge"
            case .c5d9xlarge: return "c5d.9xlarge"
            case .c5dLarge: return "c5d.large"
            case .c5dXlarge: return "c5d.xlarge"
            case .c6a12xlarge: return "c6a.12xlarge"
            case .c6a16xlarge: return "c6a.16xlarge"
            case .c6a24xlarge: return "c6a.24xlarge"
            case .c6a2xlarge: return "c6a.2xlarge"
            case .c6a4xlarge: return "c6a.4xlarge"
            case .c6a8xlarge: return "c6a.8xlarge"
            case .c6aLarge: return "c6a.large"
            case .c6aXlarge: return "c6a.xlarge"
            case .c6i12xlarge: return "c6i.12xlarge"
            case .c6i16xlarge: return "c6i.16xlarge"
            case .c6i24xlarge: return "c6i.24xlarge"
            case .c6i2xlarge: return "c6i.2xlarge"
            case .c6i4xlarge: return "c6i.4xlarge"
            case .c6i8xlarge: return "c6i.8xlarge"
            case .c6iLarge: return "c6i.large"
            case .c6iXlarge: return "c6i.xlarge"
            case .m32xlarge: return "m3.2xlarge"
            case .m3Large: return "m3.large"
            case .m3Medium: return "m3.medium"
            case .m3Xlarge: return "m3.xlarge"
            case .m410xlarge: return "m4.10xlarge"
            case .m42xlarge: return "m4.2xlarge"
            case .m44xlarge: return "m4.4xlarge"
            case .m4Large: return "m4.large"
            case .m4Xlarge: return "m4.xlarge"
            case .m512xlarge: return "m5.12xlarge"
            case .m516xlarge: return "m5.16xlarge"
            case .m524xlarge: return "m5.24xlarge"
            case .m52xlarge: return "m5.2xlarge"
            case .m54xlarge: return "m5.4xlarge"
            case .m58xlarge: return "m5.8xlarge"
            case .m5Large: return "m5.large"
            case .m5Xlarge: return "m5.xlarge"
            case .m5a12xlarge: return "m5a.12xlarge"
            case .m5a16xlarge: return "m5a.16xlarge"
            case .m5a24xlarge: return "m5a.24xlarge"
            case .m5a2xlarge: return "m5a.2xlarge"
            case .m5a4xlarge: return "m5a.4xlarge"
            case .m5a8xlarge: return "m5a.8xlarge"
            case .m5aLarge: return "m5a.large"
            case .m5aXlarge: return "m5a.xlarge"
            case .r32xlarge: return "r3.2xlarge"
            case .r34xlarge: return "r3.4xlarge"
            case .r38xlarge: return "r3.8xlarge"
            case .r3Large: return "r3.large"
            case .r3Xlarge: return "r3.xlarge"
            case .r416xlarge: return "r4.16xlarge"
            case .r42xlarge: return "r4.2xlarge"
            case .r44xlarge: return "r4.4xlarge"
            case .r48xlarge: return "r4.8xlarge"
            case .r4Large: return "r4.large"
            case .r4Xlarge: return "r4.xlarge"
            case .r512xlarge: return "r5.12xlarge"
            case .r516xlarge: return "r5.16xlarge"
            case .r524xlarge: return "r5.24xlarge"
            case .r52xlarge: return "r5.2xlarge"
            case .r54xlarge: return "r5.4xlarge"
            case .r58xlarge: return "r5.8xlarge"
            case .r5Large: return "r5.large"
            case .r5Xlarge: return "r5.xlarge"
            case .r5a12xlarge: return "r5a.12xlarge"
            case .r5a16xlarge: return "r5a.16xlarge"
            case .r5a24xlarge: return "r5a.24xlarge"
            case .r5a2xlarge: return "r5a.2xlarge"
            case .r5a4xlarge: return "r5a.4xlarge"
            case .r5a8xlarge: return "r5a.8xlarge"
            case .r5aLarge: return "r5a.large"
            case .r5aXlarge: return "r5a.xlarge"
            case .r5d12xlarge: return "r5d.12xlarge"
            case .r5d16xlarge: return "r5d.16xlarge"
            case .r5d24xlarge: return "r5d.24xlarge"
            case .r5d2xlarge: return "r5d.2xlarge"
            case .r5d4xlarge: return "r5d.4xlarge"
            case .r5d8xlarge: return "r5d.8xlarge"
            case .r5dLarge: return "r5d.large"
            case .r5dXlarge: return "r5d.xlarge"
            case .t2Large: return "t2.large"
            case .t2Medium: return "t2.medium"
            case .t2Micro: return "t2.micro"
            case .t2Small: return "t2.small"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EC2InstanceType(rawValue: rawValue) ?? EC2InstanceType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventCode = "EventCode"
        case eventId = "EventId"
        case eventTime = "EventTime"
        case message = "Message"
        case preSignedLogUrl = "PreSignedLogUrl"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventCode = self.eventCode {
            try encodeContainer.encode(eventCode.rawValue, forKey: .eventCode)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTime = self.eventTime {
            try encodeContainer.encodeTimestamp(eventTime, format: .epochSeconds, forKey: .eventTime)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let preSignedLogUrl = self.preSignedLogUrl {
            try encodeContainer.encode(preSignedLogUrl, forKey: .preSignedLogUrl)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let eventCodeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EventCode.self, forKey: .eventCode)
        eventCode = eventCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let eventTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .eventTime)
        eventTime = eventTimeDecoded
        let preSignedLogUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignedLogUrl)
        preSignedLogUrl = preSignedLogUrlDecoded
    }
}

extension GameLiftClientTypes {
    /// Log entry describing an event that involves GameLift resources (such as a fleet). In addition to tracking activity, event codes and messages can provide additional information for troubleshooting and debugging problems.
    public struct Event: Swift.Equatable {
        /// The type of event being logged. Fleet state transition events:
        ///
        /// * FLEET_CREATED -- A fleet resource was successfully created with a status of NEW. Event messaging includes the fleet ID.
        ///
        /// * FLEET_STATE_DOWNLOADING -- Fleet status changed from NEW to DOWNLOADING. The compressed build has started downloading to a fleet instance for installation.
        ///
        /// * FLEET_STATE_VALIDATING -- Fleet status changed from DOWNLOADING to VALIDATING. GameLift has successfully downloaded the build and is now validating the build files.
        ///
        /// * FLEET_STATE_BUILDING -- Fleet status changed from VALIDATING to BUILDING. GameLift has successfully verified the build files and is now running the installation scripts.
        ///
        /// * FLEET_STATE_ACTIVATING -- Fleet status changed from BUILDING to ACTIVATING. GameLift is trying to launch an instance and test the connectivity between the build and the GameLift Service via the Server SDK.
        ///
        /// * FLEET_STATE_ACTIVE -- The fleet's status changed from ACTIVATING to ACTIVE. The fleet is now ready to host game sessions.
        ///
        /// * FLEET_STATE_ERROR -- The Fleet's status changed to ERROR. Describe the fleet event message for more details.
        ///
        ///
        /// Fleet creation events (ordered by fleet creation activity):
        ///
        /// * FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet instance.
        ///
        /// * FLEET_CREATION_EXTRACTING_BUILD -- The game server build was successfully downloaded to an instance, and the build files are now being extracted from the uploaded build and saved to an instance. Failure at this stage prevents a fleet from moving to ACTIVE status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_CREATION_RUNNING_INSTALLER -- The game server build files were successfully extracted, and the GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to ACTIVE status. Logs for this stage list the installation steps and whether or not the install completed successfully. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful, and the GameLift is now verifying that the game server launch paths, which are specified in the fleet's runtime configuration, exist. If any listed launch path exists, GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to ACTIVE status. Logs for this stage list the launch paths in the runtime configuration and indicate whether each is found. Access the logs by using the URL in PreSignedLogUrl.
        ///
        /// * FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the runtime configuration failed because the executable specified in a launch path does not exist on the instance.
        ///
        /// * FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the runtime configuration failed because the executable specified in a launch path failed to run on the fleet instance.
        ///
        /// * FLEET_VALIDATION_TIMED_OUT -- Validation of the fleet at the end of creation timed out. Try fleet creation again.
        ///
        /// * FLEET_ACTIVATION_FAILED -- The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. For more information, see [Debug Fleet Creation Issues](https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-creating-debug.html#fleets-creating-debug-creation).
        ///
        /// * FLEET_ACTIVATION_FAILED_NO_INSTANCES -- Fleet creation was not able to obtain any instances based on the input fleet attributes. Try again at a different time or choose a different combination of fleet attributes such as fleet type, instance type, etc.
        ///
        /// * FLEET_INITIALIZATION_FAILED -- A generic exception occurred during fleet creation. Describe the fleet event message for more details.
        ///
        ///
        /// VPC peering events:
        ///
        /// * FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been established between the VPC for an GameLift fleet and a VPC in your Amazon Web Services account.
        ///
        /// * FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed. Event details and status information provide additional detail. A common reason for peering failure is that the two VPCs have overlapping CIDR blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in your Amazon Web Services account. For more information on VPC peering failures, see [https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html)
        ///
        /// * FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully deleted.
        ///
        ///
        /// Spot instance events:
        ///
        /// * INSTANCE_INTERRUPTED -- A spot instance was interrupted by EC2 with a two-minute notification.
        ///
        ///
        /// Server process events:
        ///
        /// * SERVER_PROCESS_INVALID_PATH -- The game server executable or script could not be found based on the Fleet runtime configuration. Check that the launch path is correct based on the operating system of the Fleet.
        ///
        /// * SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT -- The server process did not call InitSDK() within the time expected. Check your game session log to see why InitSDK() was not called in time.
        ///
        /// * SERVER_PROCESS_PROCESS_READY_TIMEOUT -- The server process did not call ProcessReady() within the time expected after calling InitSDK(). Check your game session log to see why ProcessReady() was not called in time.
        ///
        /// * SERVER_PROCESS_CRASHED -- The server process exited without calling ProcessEnding(). Check your game session log to see why ProcessEnding() was not called.
        ///
        /// * SERVER_PROCESS_TERMINATED_UNHEALTHY -- The server process did not report a valid health check for too long and was therefore terminated by GameLift. Check your game session log to see if the thread became stuck processing a synchronous task for too long.
        ///
        /// * SERVER_PROCESS_FORCE_TERMINATED -- The server process did not exit cleanly after OnProcessTerminate() was sent within the time expected. Check your game session log to see why termination took longer than expected.
        ///
        /// * SERVER_PROCESS_PROCESS_EXIT_TIMEOUT -- The server process did not exit cleanly within the time expected after calling ProcessEnding(). Check your game session log to see why termination took longer than expected.
        ///
        ///
        /// Game session events:
        ///
        /// * GAME_SESSION_ACTIVATION_TIMEOUT -- GameSession failed to activate within the expected time. Check your game session log to see why ActivateGameSession() took longer to complete than expected.
        ///
        ///
        /// Other fleet events:
        ///
        /// * FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.
        ///
        /// * FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting.
        ///
        /// * FLEET_DELETED -- A request to delete a fleet was initiated.
        ///
        /// * GENERIC_EVENT -- An unspecified event has occurred.
        public var eventCode: GameLiftClientTypes.EventCode?
        /// A unique identifier for a fleet event.
        public var eventId: Swift.String?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var eventTime: ClientRuntime.Date?
        /// Additional information related to the event.
        public var message: Swift.String?
        /// Location of stored logs with additional detail that is related to the event. This is useful for debugging issues. The URL is valid for 15 minutes. You can also access fleet creation logs through the GameLift console.
        public var preSignedLogUrl: Swift.String?
        /// A unique identifier for an event resource, such as a fleet ID.
        public var resourceId: Swift.String?

        public init (
            eventCode: GameLiftClientTypes.EventCode? = nil,
            eventId: Swift.String? = nil,
            eventTime: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            preSignedLogUrl: Swift.String? = nil,
            resourceId: Swift.String? = nil
        )
        {
            self.eventCode = eventCode
            self.eventId = eventId
            self.eventTime = eventTime
            self.message = message
            self.preSignedLogUrl = preSignedLogUrl
            self.resourceId = resourceId
        }
    }

}

extension GameLiftClientTypes {
    public enum EventCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fleetActivationFailed
        case fleetActivationFailedNoInstances
        case fleetBinaryDownloadFailed
        case fleetCreated
        case fleetCreationExtractingBuild
        case fleetCreationRunningInstaller
        case fleetCreationValidatingRuntimeConfig
        case fleetDeleted
        case fleetInitializationFailed
        case fleetNewGameSessionProtectionPolicyUpdated
        case fleetScalingEvent
        case fleetStateActivating
        case fleetStateActive
        case fleetStateBuilding
        case fleetStateDownloading
        case fleetStateError
        case fleetStateValidating
        case fleetValidationExecutableRuntimeFailure
        case fleetValidationLaunchPathNotFound
        case fleetValidationTimedOut
        case fleetVpcPeeringDeleted
        case fleetVpcPeeringFailed
        case fleetVpcPeeringSucceeded
        case gameSessionActivationTimeout
        case genericEvent
        case instanceInterrupted
        case instanceRecycled
        case serverProcessCrashed
        case serverProcessForceTerminated
        case serverProcessInvalidPath
        case serverProcessProcessExitTimeout
        case serverProcessProcessReadyTimeout
        case serverProcessSdkInitializationTimeout
        case serverProcessTerminatedUnhealthy
        case sdkUnknown(Swift.String)

        public static var allCases: [EventCode] {
            return [
                .fleetActivationFailed,
                .fleetActivationFailedNoInstances,
                .fleetBinaryDownloadFailed,
                .fleetCreated,
                .fleetCreationExtractingBuild,
                .fleetCreationRunningInstaller,
                .fleetCreationValidatingRuntimeConfig,
                .fleetDeleted,
                .fleetInitializationFailed,
                .fleetNewGameSessionProtectionPolicyUpdated,
                .fleetScalingEvent,
                .fleetStateActivating,
                .fleetStateActive,
                .fleetStateBuilding,
                .fleetStateDownloading,
                .fleetStateError,
                .fleetStateValidating,
                .fleetValidationExecutableRuntimeFailure,
                .fleetValidationLaunchPathNotFound,
                .fleetValidationTimedOut,
                .fleetVpcPeeringDeleted,
                .fleetVpcPeeringFailed,
                .fleetVpcPeeringSucceeded,
                .gameSessionActivationTimeout,
                .genericEvent,
                .instanceInterrupted,
                .instanceRecycled,
                .serverProcessCrashed,
                .serverProcessForceTerminated,
                .serverProcessInvalidPath,
                .serverProcessProcessExitTimeout,
                .serverProcessProcessReadyTimeout,
                .serverProcessSdkInitializationTimeout,
                .serverProcessTerminatedUnhealthy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fleetActivationFailed: return "FLEET_ACTIVATION_FAILED"
            case .fleetActivationFailedNoInstances: return "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
            case .fleetBinaryDownloadFailed: return "FLEET_BINARY_DOWNLOAD_FAILED"
            case .fleetCreated: return "FLEET_CREATED"
            case .fleetCreationExtractingBuild: return "FLEET_CREATION_EXTRACTING_BUILD"
            case .fleetCreationRunningInstaller: return "FLEET_CREATION_RUNNING_INSTALLER"
            case .fleetCreationValidatingRuntimeConfig: return "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
            case .fleetDeleted: return "FLEET_DELETED"
            case .fleetInitializationFailed: return "FLEET_INITIALIZATION_FAILED"
            case .fleetNewGameSessionProtectionPolicyUpdated: return "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
            case .fleetScalingEvent: return "FLEET_SCALING_EVENT"
            case .fleetStateActivating: return "FLEET_STATE_ACTIVATING"
            case .fleetStateActive: return "FLEET_STATE_ACTIVE"
            case .fleetStateBuilding: return "FLEET_STATE_BUILDING"
            case .fleetStateDownloading: return "FLEET_STATE_DOWNLOADING"
            case .fleetStateError: return "FLEET_STATE_ERROR"
            case .fleetStateValidating: return "FLEET_STATE_VALIDATING"
            case .fleetValidationExecutableRuntimeFailure: return "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
            case .fleetValidationLaunchPathNotFound: return "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
            case .fleetValidationTimedOut: return "FLEET_VALIDATION_TIMED_OUT"
            case .fleetVpcPeeringDeleted: return "FLEET_VPC_PEERING_DELETED"
            case .fleetVpcPeeringFailed: return "FLEET_VPC_PEERING_FAILED"
            case .fleetVpcPeeringSucceeded: return "FLEET_VPC_PEERING_SUCCEEDED"
            case .gameSessionActivationTimeout: return "GAME_SESSION_ACTIVATION_TIMEOUT"
            case .genericEvent: return "GENERIC_EVENT"
            case .instanceInterrupted: return "INSTANCE_INTERRUPTED"
            case .instanceRecycled: return "INSTANCE_RECYCLED"
            case .serverProcessCrashed: return "SERVER_PROCESS_CRASHED"
            case .serverProcessForceTerminated: return "SERVER_PROCESS_FORCE_TERMINATED"
            case .serverProcessInvalidPath: return "SERVER_PROCESS_INVALID_PATH"
            case .serverProcessProcessExitTimeout: return "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
            case .serverProcessProcessReadyTimeout: return "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
            case .serverProcessSdkInitializationTimeout: return "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
            case .serverProcessTerminatedUnhealthy: return "SERVER_PROCESS_TERMINATED_UNHEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventCode(rawValue: rawValue) ?? EventCode.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.FilterConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedLocations = "AllowedLocations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedLocations = allowedLocations {
            var allowedLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedLocations)
            for locationstringmodel0 in allowedLocations {
                try allowedLocationsContainer.encode(locationstringmodel0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedLocationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedLocations)
        var allowedLocationsDecoded0:[Swift.String]? = nil
        if let allowedLocationsContainer = allowedLocationsContainer {
            allowedLocationsDecoded0 = [Swift.String]()
            for string0 in allowedLocationsContainer {
                if let string0 = string0 {
                    allowedLocationsDecoded0?.append(string0)
                }
            }
        }
        allowedLocations = allowedLocationsDecoded0
    }
}

extension GameLiftClientTypes {
    /// A list of fleet locations where a game session queue can place new game sessions. You can use a filter to temporarily turn off placements for specific locations. For queues that have multi-location fleets, you can use a filter configuration allow placement with some, but not all of these locations.
    public struct FilterConfiguration: Swift.Equatable {
        /// A list of locations to allow game session placement in, in the form of Amazon Web Services Region codes such as us-west-2.
        public var allowedLocations: [Swift.String]?

        public init (
            allowedLocations: [Swift.String]? = nil
        )
        {
            self.allowedLocations = allowedLocations
        }
    }

}

extension GameLiftClientTypes {
    public enum FleetAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoscaling
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetAction] {
            return [
                .autoscaling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "AUTO_SCALING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FleetAction(rawValue: rawValue) ?? FleetAction.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.FleetAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anywhereConfiguration = "AnywhereConfiguration"
        case buildArn = "BuildArn"
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case computeType = "ComputeType"
        case creationTime = "CreationTime"
        case description = "Description"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case instanceType = "InstanceType"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case operatingSystem = "OperatingSystem"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case scriptArn = "ScriptArn"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case status = "Status"
        case stoppedActions = "StoppedActions"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anywhereConfiguration = self.anywhereConfiguration {
            try encodeContainer.encode(anywhereConfiguration, forKey: .anywhereConfiguration)
        }
        if let buildArn = self.buildArn {
            try encodeContainer.encode(buildArn, forKey: .buildArn)
        }
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = self.certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let computeType = self.computeType {
            try encodeContainer.encode(computeType.rawValue, forKey: .computeType)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let fleetType = self.fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = self.instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for nonzeroandmaxstring0 in logPaths {
                try logPathsContainer.encode(nonzeroandmaxstring0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgroup0 in metricGroups {
                try metricGroupsContainer.encode(metricgroup0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = self.newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let resourceCreationLimitPolicy = self.resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let scriptArn = self.scriptArn {
            try encodeContainer.encode(scriptArn, forKey: .scriptArn)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = self.serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = self.serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stoppedActions = stoppedActions {
            var stoppedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stoppedActions)
            for fleetaction0 in stoppedActions {
                try stoppedActionsContainer.encode(fleetaction0.rawValue)
            }
        }
        if let terminationTime = self.terminationTime {
            try encodeContainer.encodeTimestamp(terminationTime, format: .epochSeconds, forKey: .terminationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let fleetTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetType.self, forKey: .fleetType)
        fleetType = fleetTypeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetStatus.self, forKey: .status)
        status = statusDecoded
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let buildArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildArn)
        buildArn = buildArnDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let scriptArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptArn)
        scriptArn = scriptArnDecoded
        let serverLaunchPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverLaunchPath)
        serverLaunchPath = serverLaunchPathDecoded
        let serverLaunchParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverLaunchParameters)
        serverLaunchParameters = serverLaunchParametersDecoded
        let logPathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logPaths)
        var logPathsDecoded0:[Swift.String]? = nil
        if let logPathsContainer = logPathsContainer {
            logPathsDecoded0 = [Swift.String]()
            for string0 in logPathsContainer {
                if let string0 = string0 {
                    logPathsDecoded0?.append(string0)
                }
            }
        }
        logPaths = logPathsDecoded0
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[Swift.String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [Swift.String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
        let stoppedActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetAction?].self, forKey: .stoppedActions)
        var stoppedActionsDecoded0:[GameLiftClientTypes.FleetAction]? = nil
        if let stoppedActionsContainer = stoppedActionsContainer {
            stoppedActionsDecoded0 = [GameLiftClientTypes.FleetAction]()
            for enum0 in stoppedActionsContainer {
                if let enum0 = enum0 {
                    stoppedActionsDecoded0?.append(enum0)
                }
            }
        }
        stoppedActions = stoppedActionsDecoded0
        let instanceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRoleArn)
        instanceRoleArn = instanceRoleArnDecoded
        let certificateConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.CertificateConfiguration.self, forKey: .certificateConfiguration)
        certificateConfiguration = certificateConfigurationDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let anywhereConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AnywhereConfiguration.self, forKey: .anywhereConfiguration)
        anywhereConfiguration = anywhereConfigurationDecoded
    }
}

extension GameLiftClientTypes {
    /// Describes a GameLift fleet of game hosting resources. Related actions
    public struct FleetAttributes: Swift.Equatable {
        /// GameLift Anywhere configuration options for your Anywhere fleets.
        public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift build resource that is deployed on instances in this fleet. In a GameLift build ARN, the resource ID matches the BuildId value.
        public var buildArn: Swift.String?
        /// A unique identifier for the build resource that is deployed on instances in this fleet.
        public var buildId: Swift.String?
        /// Determines whether a TLS/SSL certificate is generated for a fleet. This feature must be enabled when creating the fleet. All instances in a fleet share the same certificate. The certificate can be retrieved by calling the [GameLift Server SDK](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-serversdk.html) operation GetInstanceCertificate.
        public var certificateConfiguration: GameLiftClientTypes.CertificateConfiguration?
        /// The type of compute resource used to host your game servers. You can use your own compute resources with GameLift Anywhere or use Amazon EC2 instances with managed GameLift.
        public var computeType: GameLiftClientTypes.ComputeType?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A human-readable description of the fleet.
        public var description: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift fleet ARN, the resource ID matches the FleetId value.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet.
        public var fleetId: Swift.String?
        /// Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to ON_DEMAND. Learn more about when to use [ On-Demand versus Spot Instances](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-ec2-instances.html#gamelift-ec2-instances-spot). This property cannot be changed after the fleet is created.
        public var fleetType: GameLiftClientTypes.FleetType?
        /// A unique identifier for an IAM role that manages access to your Amazon Web Services services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN by using the [IAM dashboard](https://console.aws.amazon.com/iam/) in the Amazon Web Services Management Console. Learn more about using on-box credentials for your game servers at [ Access external resources from a game server](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-resources.html).
        public var instanceRoleArn: Swift.String?
        /// The Amazon EC2 instance type that determines the computing resources of each instance in the fleet. Instance type defines the CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions.
        public var instanceType: GameLiftClientTypes.EC2InstanceType?
        /// This parameter is no longer used. Game session log paths are now defined using the GameLift server API ProcessReady()logParameters. See more information in the [Server API Reference](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api-ref.html#gamelift-sdk-server-api-ref-dataypes-process).
        public var logPaths: [Swift.String]?
        /// Name of a metric group that metrics for this fleet are added to. In Amazon CloudWatch, you can view aggregated metrics for fleets that are in a metric group. A fleet can be included in only one metric group at a time.
        public var metricGroups: [Swift.String]?
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public var name: Swift.String?
        /// The type of game session protection to set on all new instances that are started in the fleet.
        ///
        /// * NoProtection -- The game session can be terminated during a scale-down event.
        ///
        /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
        /// The operating system of the fleet's computing resources. A fleet's operating system is determined by the OS of the build or script that is deployed on this fleet.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
        public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift script resource that is deployed on instances in this fleet. In a GameLift script ARN, the resource ID matches the ScriptId value.
        public var scriptArn: Swift.String?
        /// A unique identifier for the Realtime script resource that is deployed on instances in this fleet.
        public var scriptId: Swift.String?
        /// This parameter is no longer used. Server launch parameters are now defined using the fleet's runtime configuration . Requests that use this parameter instead continue to be valid.
        public var serverLaunchParameters: Swift.String?
        /// This parameter is no longer used. Server launch paths are now defined using the fleet's [RuntimeConfiguration](https://docs.aws.amazon.com/gamelift/latest/apireference/RuntimeConfiguration.html) . Requests that use this parameter instead continue to be valid.
        public var serverLaunchPath: Swift.String?
        /// Current status of the fleet. Possible fleet statuses include the following:
        ///
        /// * NEW -- A new fleet has been defined and desired instances is set to 1.
        ///
        /// * DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- GameLift is setting up the new fleet, creating new instances with the game build or Realtime script and starting server processes.
        ///
        /// * ACTIVE -- Hosts can now accept game sessions.
        ///
        /// * ERROR -- An error occurred when downloading, validating, building, or activating the fleet.
        ///
        /// * DELETING -- Hosts are responding to a delete fleet request.
        ///
        /// * TERMINATED -- The fleet no longer exists.
        public var status: GameLiftClientTypes.FleetStatus?
        /// A list of fleet activity that has been suspended using [StopFleetActions](https://docs.aws.amazon.com/gamelift/latest/apireference/API_StopFleetActions.html) . This includes fleet auto-scaling.
        public var stoppedActions: [GameLiftClientTypes.FleetAction]?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: ClientRuntime.Date?

        public init (
            anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
            buildArn: Swift.String? = nil,
            buildId: Swift.String? = nil,
            certificateConfiguration: GameLiftClientTypes.CertificateConfiguration? = nil,
            computeType: GameLiftClientTypes.ComputeType? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            fleetType: GameLiftClientTypes.FleetType? = nil,
            instanceRoleArn: Swift.String? = nil,
            instanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            logPaths: [Swift.String]? = nil,
            metricGroups: [Swift.String]? = nil,
            name: Swift.String? = nil,
            newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil,
            scriptArn: Swift.String? = nil,
            scriptId: Swift.String? = nil,
            serverLaunchParameters: Swift.String? = nil,
            serverLaunchPath: Swift.String? = nil,
            status: GameLiftClientTypes.FleetStatus? = nil,
            stoppedActions: [GameLiftClientTypes.FleetAction]? = nil,
            terminationTime: ClientRuntime.Date? = nil
        )
        {
            self.anywhereConfiguration = anywhereConfiguration
            self.buildArn = buildArn
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.computeType = computeType
            self.creationTime = creationTime
            self.description = description
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.instanceType = instanceType
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.operatingSystem = operatingSystem
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
            self.status = status
            self.stoppedActions = stoppedActions
            self.terminationTime = terminationTime
        }
    }

}

extension GameLiftClientTypes.FleetCapacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case instanceCounts = "InstanceCounts"
        case instanceType = "InstanceType"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceCounts = self.instanceCounts {
            try encodeContainer.encode(instanceCounts, forKey: .instanceCounts)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountsDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceCounts.self, forKey: .instanceCounts)
        instanceCounts = instanceCountsDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region. Related actions [DescribeFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetCapacity.html) | [DescribeFleetLocationCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetLocationCapacity.html) | [UpdateFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateFleetCapacity.html)
    public struct FleetCapacity: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet associated with the location.
        public var fleetId: Swift.String?
        /// Resource capacity settings. Fleet capacity is measured in Amazon EC2 instances. Pending and terminating counts are non-zero when the fleet capacity is adjusting to a scaling event or if access to resources is temporarily affected.
        public var instanceCounts: GameLiftClientTypes.EC2InstanceCounts?
        /// The Amazon EC2 instance type that is used for all instances in a fleet. The instance type determines the computing resources in use, including CPU, memory, storage, and networking capacity. See [Amazon Elastic Compute Cloud Instance Types](http://aws.amazon.com/ec2/instance-types/) for detailed descriptions.
        public var instanceType: GameLiftClientTypes.EC2InstanceType?
        /// The fleet location for the instance count information, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?

        public init (
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            instanceCounts: GameLiftClientTypes.EC2InstanceCounts? = nil,
            instanceType: GameLiftClientTypes.EC2InstanceType? = nil,
            location: Swift.String? = nil
        )
        {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
            self.instanceType = instanceType
            self.location = location
        }
    }

}

extension FleetCapacityExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: FleetCapacityExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified fleet has no available instances to fulfill a CreateGameSession request. Clients can retry such requests immediately or after a waiting period.
public struct FleetCapacityExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct FleetCapacityExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension FleetCapacityExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes {
    public enum FleetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case building
        case deleting
        case downloading
        case error
        case new
        case notFound
        case terminated
        case validating
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetStatus] {
            return [
                .activating,
                .active,
                .building,
                .deleting,
                .downloading,
                .error,
                .new,
                .notFound,
                .terminated,
                .validating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .building: return "BUILDING"
            case .deleting: return "DELETING"
            case .downloading: return "DOWNLOADING"
            case .error: return "ERROR"
            case .new: return "NEW"
            case .notFound: return "NOT_FOUND"
            case .terminated: return "TERMINATED"
            case .validating: return "VALIDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FleetStatus(rawValue: rawValue) ?? FleetStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum FleetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ondemand
        case spot
        case sdkUnknown(Swift.String)

        public static var allCases: [FleetType] {
            return [
                .ondemand,
                .spot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ondemand: return "ON_DEMAND"
            case .spot: return "SPOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FleetType(rawValue: rawValue) ?? FleetType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.FleetUtilization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeGameSessionCount = "ActiveGameSessionCount"
        case activeServerProcessCount = "ActiveServerProcessCount"
        case currentPlayerSessionCount = "CurrentPlayerSessionCount"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeGameSessionCount = self.activeGameSessionCount {
            try encodeContainer.encode(activeGameSessionCount, forKey: .activeGameSessionCount)
        }
        if let activeServerProcessCount = self.activeServerProcessCount {
            try encodeContainer.encode(activeServerProcessCount, forKey: .activeServerProcessCount)
        }
        if let currentPlayerSessionCount = self.currentPlayerSessionCount {
            try encodeContainer.encode(currentPlayerSessionCount, forKey: .currentPlayerSessionCount)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let activeServerProcessCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeServerProcessCount)
        activeServerProcessCount = activeServerProcessCountDecoded
        let activeGameSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeGameSessionCount)
        activeGameSessionCount = activeGameSessionCountDecoded
        let currentPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentPlayerSessionCount)
        currentPlayerSessionCount = currentPlayerSessionCountDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// Current resource utilization statistics in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region. Related actions
    public struct FleetUtilization: Swift.Equatable {
        /// The number of active game sessions that are currently being hosted across all instances in the fleet location.
        public var activeGameSessionCount: Swift.Int?
        /// The number of server processes in ACTIVE status that are currently running across all instances in the fleet location.
        public var activeServerProcessCount: Swift.Int?
        /// The number of active player sessions that are currently being hosted across all instances in the fleet location.
        public var currentPlayerSessionCount: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet associated with the location.
        public var fleetId: Swift.String?
        /// The fleet location for the fleet utilization information, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?
        /// The maximum number of players allowed across all game sessions that are currently being hosted across all instances in the fleet location.
        public var maximumPlayerSessionCount: Swift.Int?

        public init (
            activeGameSessionCount: Swift.Int? = nil,
            activeServerProcessCount: Swift.Int? = nil,
            currentPlayerSessionCount: Swift.Int? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            location: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil
        )
        {
            self.activeGameSessionCount = activeGameSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }
    }

}

extension GameLiftClientTypes {
    public enum FlexMatchMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standalone
        case withQueue
        case sdkUnknown(Swift.String)

        public static var allCases: [FlexMatchMode] {
            return [
                .standalone,
                .withQueue,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standalone: return "STANDALONE"
            case .withQueue: return "WITH_QUEUE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FlexMatchMode(rawValue: rawValue) ?? FlexMatchMode.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension GameLiftClientTypes {
    /// Set of key-value pairs that contain information about a game session. When included in a game session request, these properties communicate details to be used when setting up the new game session. For example, a game property might specify a game mode, level, or map. Game properties are passed to the game server process when initiating a new game session. For more information, see the [ GameLift Developer Guide](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-client-api.html#gamelift-sdk-client-api-create).
    public struct GameProperty: Swift.Equatable {
        /// The game property identifier.
        /// This member is required.
        public var key: Swift.String?
        /// The game property value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension GameLiftClientTypes.GameServer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case claimStatus = "ClaimStatus"
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
        case lastClaimTime = "LastClaimTime"
        case lastHealthCheckTime = "LastHealthCheckTime"
        case registrationTime = "RegistrationTime"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let claimStatus = self.claimStatus {
            try encodeContainer.encode(claimStatus.rawValue, forKey: .claimStatus)
        }
        if let connectionInfo = self.connectionInfo {
            try encodeContainer.encode(connectionInfo, forKey: .connectionInfo)
        }
        if let gameServerData = self.gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupArn = self.gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let lastClaimTime = self.lastClaimTime {
            try encodeContainer.encodeTimestamp(lastClaimTime, format: .epochSeconds, forKey: .lastClaimTime)
        }
        if let lastHealthCheckTime = self.lastHealthCheckTime {
            try encodeContainer.encodeTimestamp(lastHealthCheckTime, format: .epochSeconds, forKey: .lastHealthCheckTime)
        }
        if let registrationTime = self.registrationTime {
            try encodeContainer.encodeTimestamp(registrationTime, format: .epochSeconds, forKey: .registrationTime)
        }
        if let utilizationStatus = self.utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let connectionInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionInfo)
        connectionInfo = connectionInfoDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
        let claimStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerClaimStatus.self, forKey: .claimStatus)
        claimStatus = claimStatusDecoded
        let utilizationStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerUtilizationStatus.self, forKey: .utilizationStatus)
        utilizationStatus = utilizationStatusDecoded
        let registrationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let lastClaimTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastClaimTime)
        lastClaimTime = lastClaimTimeDecoded
        let lastHealthCheckTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastHealthCheckTime)
        lastHealthCheckTime = lastHealthCheckTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Properties describing a game server that is running on an instance in a game server group. A game server is created by a successful call to RegisterGameServer and deleted by calling DeregisterGameServer. A game server is claimed to host a game session by calling ClaimGameServer.
    public struct GameServer: Swift.Equatable {
        /// Indicates when an available game server has been reserved for gameplay but has not yet started hosting a game. Once it is claimed, the game server remains in CLAIMED status for a maximum of one minute. During this time, game clients connect to the game server to start the game and trigger the game server to update its utilization status. After one minute, the game server claim status reverts to null.
        public var claimStatus: GameLiftClientTypes.GameServerClaimStatus?
        /// The port and IP address that must be used to establish a client connection to the game server.
        public var connectionInfo: Swift.String?
        /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
        public var gameServerData: Swift.String?
        /// The ARN identifier for the game server group where the game server is located.
        public var gameServerGroupArn: Swift.String?
        /// A unique identifier for the game server group where the game server is running.
        public var gameServerGroupName: Swift.String?
        /// A custom string that uniquely identifies the game server. Game server IDs are developer-defined and are unique across all game server groups in an Amazon Web Services account.
        public var gameServerId: Swift.String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
        public var instanceId: Swift.String?
        /// Timestamp that indicates the last time the game server was claimed. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). This value is used to calculate when a claimed game server's status should revert to null.
        public var lastClaimTime: ClientRuntime.Date?
        /// Timestamp that indicates the last time the game server was updated with health status. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). After game server registration, this property is only changed when a game server update specifies a health check value.
        public var lastHealthCheckTime: ClientRuntime.Date?
        /// Timestamp that indicates when the game server registered. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var registrationTime: ClientRuntime.Date?
        /// Indicates whether the game server is currently available for new games or is busy. Possible statuses include:
        ///
        /// * AVAILABLE - The game server is available to be claimed. A game server that has been claimed remains in this status until it reports game hosting activity.
        ///
        /// * UTILIZED - The game server is currently hosting a game session with players.
        public var utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?

        public init (
            claimStatus: GameLiftClientTypes.GameServerClaimStatus? = nil,
            connectionInfo: Swift.String? = nil,
            gameServerData: Swift.String? = nil,
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            gameServerId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            lastClaimTime: ClientRuntime.Date? = nil,
            lastHealthCheckTime: ClientRuntime.Date? = nil,
            registrationTime: ClientRuntime.Date? = nil,
            utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus? = nil
        )
        {
            self.claimStatus = claimStatus
            self.connectionInfo = connectionInfo
            self.gameServerData = gameServerData
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.instanceId = instanceId
            self.lastClaimTime = lastClaimTime
            self.lastHealthCheckTime = lastHealthCheckTime
            self.registrationTime = registrationTime
            self.utilizationStatus = utilizationStatus
        }
    }

}

extension GameLiftClientTypes {
    public enum GameServerClaimStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case claimed
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerClaimStatus] {
            return [
                .claimed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .claimed: return "CLAIMED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerClaimStatus(rawValue: rawValue) ?? GameServerClaimStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameServerGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupArn = "AutoScalingGroupArn"
        case balancingStrategy = "BalancingStrategy"
        case creationTime = "CreationTime"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case lastUpdatedTime = "LastUpdatedTime"
        case roleArn = "RoleArn"
        case status = "Status"
        case statusReason = "StatusReason"
        case suspendedActions = "SuspendedActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroupArn = self.autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let balancingStrategy = self.balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let gameServerGroupArn = self.gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = self.gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinition0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinition0)
            }
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encodeTimestamp(lastUpdatedTime, format: .epochSeconds, forKey: .lastUpdatedTime)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let suspendedActions = suspendedActions {
            var suspendedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suspendedActions)
            for gameservergroupaction0 in suspendedActions {
                try suspendedActionsContainer.encode(gameservergroupaction0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[GameLiftClientTypes.InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [GameLiftClientTypes.InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let suspendedActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerGroupAction?].self, forKey: .suspendedActions)
        var suspendedActionsDecoded0:[GameLiftClientTypes.GameServerGroupAction]? = nil
        if let suspendedActionsContainer = suspendedActionsContainer {
            suspendedActionsDecoded0 = [GameLiftClientTypes.GameServerGroupAction]()
            for enum0 in suspendedActionsContainer {
                if let enum0 = enum0 {
                    suspendedActionsDecoded0?.append(enum0)
                }
            }
        }
        suspendedActions = suspendedActionsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Properties that describe a game server group resource. A game server group manages certain properties related to a corresponding Amazon EC2 Auto Scaling group. A game server group is created by a successful call to CreateGameServerGroup and deleted by calling DeleteGameServerGroup. Game server group activity can be temporarily suspended and resumed by calling SuspendGameServerGroup and ResumeGameServerGroup, respectively.
    public struct GameServerGroup: Swift.Equatable {
        /// A generated unique ID for the Amazon EC2 Auto Scaling group that is associated with this game server group.
        public var autoScalingGroupArn: Swift.String?
        /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
        ///
        /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
        ///
        /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
        ///
        /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
        public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A generated unique ID for the game server group.
        public var gameServerGroupArn: Swift.String?
        /// A developer-defined identifier for the game server group. The name is unique for each Region in each Amazon Web Services account.
        public var gameServerGroupName: Swift.String?
        /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status.
        public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
        /// The set of Amazon EC2 instance types that GameLift FleetIQ can use when balancing and automatically scaling instances in the corresponding Auto Scaling group.
        public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
        /// A timestamp that indicates when this game server group was last updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
        public var roleArn: Swift.String?
        /// The current status of the game server group. Possible statuses include:
        ///
        /// * NEW - GameLift FleetIQ has validated the CreateGameServerGroup() request.
        ///
        /// * ACTIVATING - GameLift FleetIQ is setting up a game server group, which includes creating an Auto Scaling group in your Amazon Web Services account.
        ///
        /// * ACTIVE - The game server group has been successfully created.
        ///
        /// * DELETE_SCHEDULED - A request to delete the game server group has been received.
        ///
        /// * DELETING - GameLift FleetIQ has received a valid DeleteGameServerGroup() request and is processing it. GameLift FleetIQ must first complete and release hosts before it deletes the Auto Scaling group and the game server group.
        ///
        /// * DELETED - The game server group has been successfully deleted.
        ///
        /// * ERROR - The asynchronous processes of activating or deleting a game server group has failed, resulting in an error state.
        public var status: GameLiftClientTypes.GameServerGroupStatus?
        /// Additional information about the current game server group status. This information might provide additional insight on groups that are in ERROR status.
        public var statusReason: Swift.String?
        /// A list of activities that are currently suspended for this game server group. If this property is empty, all activities are occurring.
        public var suspendedActions: [GameLiftClientTypes.GameServerGroupAction]?

        public init (
            autoScalingGroupArn: Swift.String? = nil,
            balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
            creationTime: ClientRuntime.Date? = nil,
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
            instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            roleArn: Swift.String? = nil,
            status: GameLiftClientTypes.GameServerGroupStatus? = nil,
            statusReason: Swift.String? = nil,
            suspendedActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
        )
        {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.balancingStrategy = balancingStrategy
            self.creationTime = creationTime
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerProtectionPolicy = gameServerProtectionPolicy
            self.instanceDefinitions = instanceDefinitions
            self.lastUpdatedTime = lastUpdatedTime
            self.roleArn = roleArn
            self.status = status
            self.statusReason = statusReason
            self.suspendedActions = suspendedActions
        }
    }

}

extension GameLiftClientTypes {
    public enum GameServerGroupAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case replaceInstanceTypes
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupAction] {
            return [
                .replaceInstanceTypes,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .replaceInstanceTypes: return "REPLACE_INSTANCE_TYPES"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerGroupAction(rawValue: rawValue) ?? GameServerGroupAction.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameServerGroupAutoScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedInstanceWarmup = self.estimatedInstanceWarmup {
            try encodeContainer.encode(estimatedInstanceWarmup, forKey: .estimatedInstanceWarmup)
        }
        if let targetTrackingConfiguration = self.targetTrackingConfiguration {
            try encodeContainer.encode(targetTrackingConfiguration, forKey: .targetTrackingConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Configuration settings for intelligent automatic scaling that uses target tracking. These settings are used to add an Auto Scaling policy when creating the corresponding Auto Scaling group. After the Auto Scaling group is created, all updates to Auto Scaling policies, including changing this policy and adding or removing other policies, is done directly on the Auto Scaling group.
    public struct GameServerGroupAutoScalingPolicy: Swift.Equatable {
        /// Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ. Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up, because it avoids prematurely starting new instances.
        public var estimatedInstanceWarmup: Swift.Int?
        /// Settings for a target-based scaling policy applied to Auto Scaling group. These settings are used to create a target-based policy that tracks the GameLift FleetIQ metric "PercentUtilizedGameServers" and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
        /// This member is required.
        public var targetTrackingConfiguration: GameLiftClientTypes.TargetTrackingConfiguration?

        public init (
            estimatedInstanceWarmup: Swift.Int? = nil,
            targetTrackingConfiguration: GameLiftClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }

}

extension GameLiftClientTypes {
    public enum GameServerGroupDeleteOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forceDelete
        case retain
        case safeDelete
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupDeleteOption] {
            return [
                .forceDelete,
                .retain,
                .safeDelete,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forceDelete: return "FORCE_DELETE"
            case .retain: return "RETAIN"
            case .safeDelete: return "SAFE_DELETE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerGroupDeleteOption(rawValue: rawValue) ?? GameServerGroupDeleteOption.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameServerGroupInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case c42xlarge
        case c44xlarge
        case c48xlarge
        case c4Large
        case c4Xlarge
        case c512xlarge
        case c518xlarge
        case c524xlarge
        case c52xlarge
        case c54xlarge
        case c59xlarge
        case c5Large
        case c5Xlarge
        case c5a12xlarge
        case c5a16xlarge
        case c5a24xlarge
        case c5a2xlarge
        case c5a4xlarge
        case c5a8xlarge
        case c5aLarge
        case c5aXlarge
        case c6g12xlarge
        case c6g16xlarge
        case c6g2xlarge
        case c6g4xlarge
        case c6g8xlarge
        case c6gLarge
        case c6gMedium
        case c6gXlarge
        case m410xlarge
        case m42xlarge
        case m44xlarge
        case m4Large
        case m4Xlarge
        case m512xlarge
        case m516xlarge
        case m524xlarge
        case m52xlarge
        case m54xlarge
        case m58xlarge
        case m5Large
        case m5Xlarge
        case m5a12xlarge
        case m5a16xlarge
        case m5a24xlarge
        case m5a2xlarge
        case m5a4xlarge
        case m5a8xlarge
        case m5aLarge
        case m5aXlarge
        case m6g12xlarge
        case m6g16xlarge
        case m6g2xlarge
        case m6g4xlarge
        case m6g8xlarge
        case m6gLarge
        case m6gMedium
        case m6gXlarge
        case r416xlarge
        case r42xlarge
        case r44xlarge
        case r48xlarge
        case r4Large
        case r4Xlarge
        case r512xlarge
        case r516xlarge
        case r524xlarge
        case r52xlarge
        case r54xlarge
        case r58xlarge
        case r5Large
        case r5Xlarge
        case r5a12xlarge
        case r5a16xlarge
        case r5a24xlarge
        case r5a2xlarge
        case r5a4xlarge
        case r5a8xlarge
        case r5aLarge
        case r5aXlarge
        case r6g12xlarge
        case r6g16xlarge
        case r6g2xlarge
        case r6g4xlarge
        case r6g8xlarge
        case r6gLarge
        case r6gMedium
        case r6gXlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupInstanceType] {
            return [
                .c42xlarge,
                .c44xlarge,
                .c48xlarge,
                .c4Large,
                .c4Xlarge,
                .c512xlarge,
                .c518xlarge,
                .c524xlarge,
                .c52xlarge,
                .c54xlarge,
                .c59xlarge,
                .c5Large,
                .c5Xlarge,
                .c5a12xlarge,
                .c5a16xlarge,
                .c5a24xlarge,
                .c5a2xlarge,
                .c5a4xlarge,
                .c5a8xlarge,
                .c5aLarge,
                .c5aXlarge,
                .c6g12xlarge,
                .c6g16xlarge,
                .c6g2xlarge,
                .c6g4xlarge,
                .c6g8xlarge,
                .c6gLarge,
                .c6gMedium,
                .c6gXlarge,
                .m410xlarge,
                .m42xlarge,
                .m44xlarge,
                .m4Large,
                .m4Xlarge,
                .m512xlarge,
                .m516xlarge,
                .m524xlarge,
                .m52xlarge,
                .m54xlarge,
                .m58xlarge,
                .m5Large,
                .m5Xlarge,
                .m5a12xlarge,
                .m5a16xlarge,
                .m5a24xlarge,
                .m5a2xlarge,
                .m5a4xlarge,
                .m5a8xlarge,
                .m5aLarge,
                .m5aXlarge,
                .m6g12xlarge,
                .m6g16xlarge,
                .m6g2xlarge,
                .m6g4xlarge,
                .m6g8xlarge,
                .m6gLarge,
                .m6gMedium,
                .m6gXlarge,
                .r416xlarge,
                .r42xlarge,
                .r44xlarge,
                .r48xlarge,
                .r4Large,
                .r4Xlarge,
                .r512xlarge,
                .r516xlarge,
                .r524xlarge,
                .r52xlarge,
                .r54xlarge,
                .r58xlarge,
                .r5Large,
                .r5Xlarge,
                .r5a12xlarge,
                .r5a16xlarge,
                .r5a24xlarge,
                .r5a2xlarge,
                .r5a4xlarge,
                .r5a8xlarge,
                .r5aLarge,
                .r5aXlarge,
                .r6g12xlarge,
                .r6g16xlarge,
                .r6g2xlarge,
                .r6g4xlarge,
                .r6g8xlarge,
                .r6gLarge,
                .r6gMedium,
                .r6gXlarge,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .c42xlarge: return "c4.2xlarge"
            case .c44xlarge: return "c4.4xlarge"
            case .c48xlarge: return "c4.8xlarge"
            case .c4Large: return "c4.large"
            case .c4Xlarge: return "c4.xlarge"
            case .c512xlarge: return "c5.12xlarge"
            case .c518xlarge: return "c5.18xlarge"
            case .c524xlarge: return "c5.24xlarge"
            case .c52xlarge: return "c5.2xlarge"
            case .c54xlarge: return "c5.4xlarge"
            case .c59xlarge: return "c5.9xlarge"
            case .c5Large: return "c5.large"
            case .c5Xlarge: return "c5.xlarge"
            case .c5a12xlarge: return "c5a.12xlarge"
            case .c5a16xlarge: return "c5a.16xlarge"
            case .c5a24xlarge: return "c5a.24xlarge"
            case .c5a2xlarge: return "c5a.2xlarge"
            case .c5a4xlarge: return "c5a.4xlarge"
            case .c5a8xlarge: return "c5a.8xlarge"
            case .c5aLarge: return "c5a.large"
            case .c5aXlarge: return "c5a.xlarge"
            case .c6g12xlarge: return "c6g.12xlarge"
            case .c6g16xlarge: return "c6g.16xlarge"
            case .c6g2xlarge: return "c6g.2xlarge"
            case .c6g4xlarge: return "c6g.4xlarge"
            case .c6g8xlarge: return "c6g.8xlarge"
            case .c6gLarge: return "c6g.large"
            case .c6gMedium: return "c6g.medium"
            case .c6gXlarge: return "c6g.xlarge"
            case .m410xlarge: return "m4.10xlarge"
            case .m42xlarge: return "m4.2xlarge"
            case .m44xlarge: return "m4.4xlarge"
            case .m4Large: return "m4.large"
            case .m4Xlarge: return "m4.xlarge"
            case .m512xlarge: return "m5.12xlarge"
            case .m516xlarge: return "m5.16xlarge"
            case .m524xlarge: return "m5.24xlarge"
            case .m52xlarge: return "m5.2xlarge"
            case .m54xlarge: return "m5.4xlarge"
            case .m58xlarge: return "m5.8xlarge"
            case .m5Large: return "m5.large"
            case .m5Xlarge: return "m5.xlarge"
            case .m5a12xlarge: return "m5a.12xlarge"
            case .m5a16xlarge: return "m5a.16xlarge"
            case .m5a24xlarge: return "m5a.24xlarge"
            case .m5a2xlarge: return "m5a.2xlarge"
            case .m5a4xlarge: return "m5a.4xlarge"
            case .m5a8xlarge: return "m5a.8xlarge"
            case .m5aLarge: return "m5a.large"
            case .m5aXlarge: return "m5a.xlarge"
            case .m6g12xlarge: return "m6g.12xlarge"
            case .m6g16xlarge: return "m6g.16xlarge"
            case .m6g2xlarge: return "m6g.2xlarge"
            case .m6g4xlarge: return "m6g.4xlarge"
            case .m6g8xlarge: return "m6g.8xlarge"
            case .m6gLarge: return "m6g.large"
            case .m6gMedium: return "m6g.medium"
            case .m6gXlarge: return "m6g.xlarge"
            case .r416xlarge: return "r4.16xlarge"
            case .r42xlarge: return "r4.2xlarge"
            case .r44xlarge: return "r4.4xlarge"
            case .r48xlarge: return "r4.8xlarge"
            case .r4Large: return "r4.large"
            case .r4Xlarge: return "r4.xlarge"
            case .r512xlarge: return "r5.12xlarge"
            case .r516xlarge: return "r5.16xlarge"
            case .r524xlarge: return "r5.24xlarge"
            case .r52xlarge: return "r5.2xlarge"
            case .r54xlarge: return "r5.4xlarge"
            case .r58xlarge: return "r5.8xlarge"
            case .r5Large: return "r5.large"
            case .r5Xlarge: return "r5.xlarge"
            case .r5a12xlarge: return "r5a.12xlarge"
            case .r5a16xlarge: return "r5a.16xlarge"
            case .r5a24xlarge: return "r5a.24xlarge"
            case .r5a2xlarge: return "r5a.2xlarge"
            case .r5a4xlarge: return "r5a.4xlarge"
            case .r5a8xlarge: return "r5a.8xlarge"
            case .r5aLarge: return "r5a.large"
            case .r5aXlarge: return "r5a.xlarge"
            case .r6g12xlarge: return "r6g.12xlarge"
            case .r6g16xlarge: return "r6g.16xlarge"
            case .r6g2xlarge: return "r6g.2xlarge"
            case .r6g4xlarge: return "r6g.4xlarge"
            case .r6g8xlarge: return "r6g.8xlarge"
            case .r6gLarge: return "r6g.large"
            case .r6gMedium: return "r6g.medium"
            case .r6gXlarge: return "r6g.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerGroupInstanceType(rawValue: rawValue) ?? GameServerGroupInstanceType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameServerGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case deleted
        case deleteScheduled
        case deleting
        case error
        case new
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerGroupStatus] {
            return [
                .activating,
                .active,
                .deleted,
                .deleteScheduled,
                .deleting,
                .error,
                .new,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleteScheduled: return "DELETE_SCHEDULED"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .new: return "NEW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerGroupStatus(rawValue: rawValue) ?? GameServerGroupStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameServerHealthCheck: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case healthy
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerHealthCheck] {
            return [
                .healthy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .healthy: return "HEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerHealthCheck(rawValue: rawValue) ?? GameServerHealthCheck.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameServerInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case instanceId = "InstanceId"
        case instanceStatus = "InstanceStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupArn = self.gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceStatus = self.instanceStatus {
            try encodeContainer.encode(instanceStatus.rawValue, forKey: .instanceStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerInstanceStatus.self, forKey: .instanceStatus)
        instanceStatus = instanceStatusDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Additional properties, including status, that describe an EC2 instance in a game server group. Instance configurations are set with game server group properties (see DescribeGameServerGroup and with the EC2 launch template that was used when creating the game server group. Retrieve game server instances for a game server group by calling DescribeGameServerInstances.
    public struct GameServerInstance: Swift.Equatable {
        /// A generated unique identifier for the game server group that includes the game server instance.
        public var gameServerGroupArn: Swift.String?
        /// A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each Amazon Web Services account.
        public var gameServerGroupName: Swift.String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
        public var instanceId: Swift.String?
        /// Current status of the game server instance
        public var instanceStatus: GameLiftClientTypes.GameServerInstanceStatus?

        public init (
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceStatus: GameLiftClientTypes.GameServerInstanceStatus? = nil
        )
        {
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.instanceId = instanceId
            self.instanceStatus = instanceStatus
        }
    }

}

extension GameLiftClientTypes {
    public enum GameServerInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case draining
        case spotTerminating
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerInstanceStatus] {
            return [
                .active,
                .draining,
                .spotTerminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .draining: return "DRAINING"
            case .spotTerminating: return "SPOT_TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerInstanceStatus(rawValue: rawValue) ?? GameServerInstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameServerProtectionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullProtection
        case noProtection
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerProtectionPolicy] {
            return [
                .fullProtection,
                .noProtection,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullProtection: return "FULL_PROTECTION"
            case .noProtection: return "NO_PROTECTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerProtectionPolicy(rawValue: rawValue) ?? GameServerProtectionPolicy.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameServerUtilizationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case utilized
        case sdkUnknown(Swift.String)

        public static var allCases: [GameServerUtilizationStatus] {
            return [
                .available,
                .utilized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .utilized: return "UTILIZED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameServerUtilizationStatus(rawValue: rawValue) ?? GameServerUtilizationStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case creatorId = "CreatorId"
        case currentPlayerSessionCount = "CurrentPlayerSessionCount"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case location = "Location"
        case matchmakerData = "MatchmakerData"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case port = "Port"
        case status = "Status"
        case statusReason = "StatusReason"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let creatorId = self.creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let currentPlayerSessionCount = self.currentPlayerSessionCount {
            try encodeContainer.encode(currentPlayerSessionCount, forKey: .currentPlayerSessionCount)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let matchmakerData = self.matchmakerData {
            try encodeContainer.encode(matchmakerData, forKey: .matchmakerData)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playerSessionCreationPolicy = self.playerSessionCreationPolicy {
            try encodeContainer.encode(playerSessionCreationPolicy.rawValue, forKey: .playerSessionCreationPolicy)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let terminationTime = self.terminationTime {
            try encodeContainer.encodeTimestamp(terminationTime, format: .epochSeconds, forKey: .terminationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let currentPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentPlayerSessionCount)
        currentPlayerSessionCount = currentPlayerSessionCountDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let playerSessionCreationPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PlayerSessionCreationPolicy.self, forKey: .playerSessionCreationPolicy)
        playerSessionCreationPolicy = playerSessionCreationPolicyDecoded
        let creatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let matchmakerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .matchmakerData)
        matchmakerData = matchmakerDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// Properties describing a game session. A game session in ACTIVE status can host players. When a game session ends, its status is set to TERMINATED. Once the session ends, the game session object is retained for 30 days. This means you can reuse idempotency token values after this time. Game session logs are retained for 14 days. [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct GameSession: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public var creatorId: Swift.String?
        /// Number of players currently in the game session.
        public var currentPlayerSessionCount: Swift.Int?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that this game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the game session is running on.
        public var fleetId: Swift.String?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. A game session ARN has the following format: arn:aws:gamelift:::gamesession//.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// The fleet location where the game session is running. This value might specify the fleet's home Region or a remote location. Location is expressed as an Amazon Web Services Region code such as us-west-2.
        public var location: Swift.String?
        /// Information about the matchmaking process that was used to create the game session. It is in JSON syntax, formatted as a string. In addition the matchmaking configuration used, it contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data). Matchmaker data is useful when requesting match backfills, and is updated whenever new players are added during a successful backfill (see [StartMatchBackfill](https://docs.aws.amazon.com/gamelift/latest/apireference/API_StartMatchBackfill.html)).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var name: Swift.String?
        /// Indicates whether or not the game session is accepting new players.
        public var playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public var status: GameLiftClientTypes.GameSessionStatus?
        /// Provides additional information about game session status. INTERRUPTED indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.
        public var statusReason: GameLiftClientTypes.GameSessionStatusReason?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            creatorId: Swift.String? = nil,
            currentPlayerSessionCount: Swift.Int? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.GameSessionStatus? = nil,
            statusReason: GameLiftClientTypes.GameSessionStatusReason? = nil,
            terminationTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.creatorId = creatorId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.location = location
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.port = port
            self.status = status
            self.statusReason = statusReason
            self.terminationTime = terminationTime
        }
    }

}

extension GameLiftClientTypes.GameSessionConnectionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsName = "DnsName"
        case gameSessionArn = "GameSessionArn"
        case ipAddress = "IpAddress"
        case matchedPlayerSessions = "MatchedPlayerSessions"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let gameSessionArn = self.gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let matchedPlayerSessions = matchedPlayerSessions {
            var matchedPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchedPlayerSessions)
            for matchedplayersession0 in matchedPlayerSessions {
                try matchedPlayerSessionsContainer.encode(matchedplayersession0)
            }
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let matchedPlayerSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.MatchedPlayerSession?].self, forKey: .matchedPlayerSessions)
        var matchedPlayerSessionsDecoded0:[GameLiftClientTypes.MatchedPlayerSession]? = nil
        if let matchedPlayerSessionsContainer = matchedPlayerSessionsContainer {
            matchedPlayerSessionsDecoded0 = [GameLiftClientTypes.MatchedPlayerSession]()
            for structure0 in matchedPlayerSessionsContainer {
                if let structure0 = structure0 {
                    matchedPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        matchedPlayerSessions = matchedPlayerSessionsDecoded0
    }
}

extension GameLiftClientTypes {
    /// Connection information for a new game session that is created in response to a start matchmaking request. Once a match is made, the FlexMatch engine creates a new game session for it. This information, including the game session endpoint and player sessions for each player in the original matchmaking request, is added to the matchmaking ticket.
    public struct GameSessionConnectionInfo: Swift.Equatable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// A unique identifier for the game session. Use the game session ID.
        public var gameSessionArn: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// A collection of player session IDs, one for each player ID that was included in the original matchmaking request.
        public var matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?

        public init (
            dnsName: Swift.String? = nil,
            gameSessionArn: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]? = nil,
            port: Swift.Int? = nil
        )
        {
            self.dnsName = dnsName
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.matchedPlayerSessions = matchedPlayerSessions
            self.port = port
        }
    }

}

extension GameLiftClientTypes.GameSessionDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSession = "GameSession"
        case protectionPolicy = "ProtectionPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSession = self.gameSession {
            try encodeContainer.encode(gameSession, forKey: .gameSession)
        }
        if let protectionPolicy = self.protectionPolicy {
            try encodeContainer.encode(protectionPolicy.rawValue, forKey: .protectionPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
        let protectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .protectionPolicy)
        protectionPolicy = protectionPolicyDecoded
    }
}

extension GameLiftClientTypes {
    /// A game session's properties plus the protection policy currently in force.
    public struct GameSessionDetail: Swift.Equatable {
        /// Object that describes a game session.
        public var gameSession: GameLiftClientTypes.GameSession?
        /// Current status of protection for the game session.
        ///
        /// * NoProtection -- The game session can be terminated during a scale-down event.
        ///
        /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public var protectionPolicy: GameLiftClientTypes.ProtectionPolicy?

        public init (
            gameSession: GameLiftClientTypes.GameSession? = nil,
            protectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil
        )
        {
            self.gameSession = gameSession
            self.protectionPolicy = protectionPolicy
        }
    }

}

extension GameSessionFullException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GameSessionFullExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The game instance is currently full and cannot allow the requested player(s) to join. Clients can retry such requests immediately or after a waiting period.
public struct GameSessionFullException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GameSessionFullExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GameSessionFullExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes.GameSessionPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsName = "DnsName"
        case endTime = "EndTime"
        case gameProperties = "GameProperties"
        case gameSessionArn = "GameSessionArn"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case gameSessionRegion = "GameSessionRegion"
        case ipAddress = "IpAddress"
        case matchmakerData = "MatchmakerData"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placedPlayerSessions = "PlacedPlayerSessions"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
        case port = "Port"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionArn = self.gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let gameSessionName = self.gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = self.gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let gameSessionRegion = self.gameSessionRegion {
            try encodeContainer.encode(gameSessionRegion, forKey: .gameSessionRegion)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let matchmakerData = self.matchmakerData {
            try encodeContainer.encode(matchmakerData, forKey: .matchmakerData)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placedPlayerSessions = placedPlayerSessions {
            var placedPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placedPlayerSessions)
            for placedplayersession0 in placedPlayerSessions {
                try placedPlayerSessionsContainer.encode(placedplayersession0)
            }
        }
        if let placementId = self.placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatency0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatency0)
            }
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementId)
        placementId = placementIdDecoded
        let gameSessionQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionQueueName)
        gameSessionQueueName = gameSessionQueueNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionPlacementState.self, forKey: .status)
        status = statusDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let gameSessionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionName)
        gameSessionName = gameSessionNameDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let gameSessionRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionRegion)
        gameSessionRegion = gameSessionRegionDecoded
        let playerLatenciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerLatency?].self, forKey: .playerLatencies)
        var playerLatenciesDecoded0:[GameLiftClientTypes.PlayerLatency]? = nil
        if let playerLatenciesContainer = playerLatenciesContainer {
            playerLatenciesDecoded0 = [GameLiftClientTypes.PlayerLatency]()
            for structure0 in playerLatenciesContainer {
                if let structure0 = structure0 {
                    playerLatenciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencies = playerLatenciesDecoded0
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let placedPlayerSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlacedPlayerSession?].self, forKey: .placedPlayerSessions)
        var placedPlayerSessionsDecoded0:[GameLiftClientTypes.PlacedPlayerSession]? = nil
        if let placedPlayerSessionsContainer = placedPlayerSessionsContainer {
            placedPlayerSessionsDecoded0 = [GameLiftClientTypes.PlacedPlayerSession]()
            for structure0 in placedPlayerSessionsContainer {
                if let structure0 = structure0 {
                    placedPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        placedPlayerSessions = placedPlayerSessionsDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let matchmakerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .matchmakerData)
        matchmakerData = matchmakerDataDecoded
    }
}

extension GameLiftClientTypes {
    /// This object includes the full details of the original request plus the current status and start/end time stamps.
    public struct GameSessionPlacement: Swift.Equatable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public var endTime: ClientRuntime.Date?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is FULFILLED). This identifier is unique across all Regions. You can use this value as a GameSessionId value as needed.
        public var gameSessionArn: Swift.String?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. This value is set once the new game session is placed (placement status is FULFILLED).
        public var gameSessionId: Swift.String?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var gameSessionName: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var gameSessionQueueName: Swift.String?
        /// Name of the Region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is FULFILLED).
        public var gameSessionRegion: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public var ipAddress: Swift.String?
        /// Information on the matchmaking process for this game. Data is in JSON syntax, formatted as a string. It identifies the matchmaking configuration used to create the match, and contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is FULFILLED). This information includes the player ID (as provided in the placement request) and the corresponding player session ID.
        public var placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]?
        /// A unique identifier for a game session placement.
        public var placementId: Swift.String?
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to Amazon Web Services Regions.
        public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public var port: Swift.Int?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var startTime: ClientRuntime.Date?
        /// Current status of the game session placement request.
        ///
        /// * PENDING -- The placement request is currently in the queue waiting to be processed.
        ///
        /// * FULFILLED -- A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.
        ///
        /// * CANCELLED -- The placement request was canceled.
        ///
        /// * TIMED_OUT -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.
        ///
        /// * FAILED -- GameLift is not able to complete the process of placing the game session. Common reasons are the game session terminated before the placement process was completed, or an unexpected internal error.
        public var status: GameLiftClientTypes.GameSessionPlacementState?

        public init (
            dnsName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionArn: Swift.String? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            gameSessionName: Swift.String? = nil,
            gameSessionQueueName: Swift.String? = nil,
            gameSessionRegion: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]? = nil,
            placementId: Swift.String? = nil,
            playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil,
            port: Swift.Int? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: GameLiftClientTypes.GameSessionPlacementState? = nil
        )
        {
            self.dnsName = dnsName
            self.endTime = endTime
            self.gameProperties = gameProperties
            self.gameSessionArn = gameSessionArn
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.gameSessionRegion = gameSessionRegion
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placedPlayerSessions = placedPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.port = port
            self.startTime = startTime
            self.status = status
        }
    }

}

extension GameLiftClientTypes {
    public enum GameSessionPlacementState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case fulfilled
        case pending
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionPlacementState] {
            return [
                .cancelled,
                .failed,
                .fulfilled,
                .pending,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .fulfilled: return "FULFILLED"
            case .pending: return "PENDING"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameSessionPlacementState(rawValue: rawValue) ?? GameSessionPlacementState.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.GameSessionQueue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case gameSessionQueueArn = "GameSessionQueueArn"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestination0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestination0)
            }
        }
        if let filterConfiguration = self.filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let gameSessionQueueArn = self.gameSessionQueueArn {
            try encodeContainer.encode(gameSessionQueueArn, forKey: .gameSessionQueueArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicy0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicy0)
            }
        }
        if let priorityConfiguration = self.priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let gameSessionQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionQueueArn)
        gameSessionQueueArn = gameSessionQueueArnDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[GameLiftClientTypes.PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [GameLiftClientTypes.PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameLiftClientTypes.GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameLiftClientTypes.GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}

extension GameLiftClientTypes {
    /// Configuration for a game session placement mechanism that processes requests for new game sessions. A queue can be used on its own or as part of a matchmaking solution.
    public struct GameSessionQueue: Swift.Equatable {
        /// Information that is added to all events that are related to this game session queue.
        public var customEventData: Swift.String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
        public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location.
        public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. In a GameLift game session queue ARN, the resource ID matches the Name value.
        public var gameSessionQueueArn: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
        public var notificationTarget: Swift.String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
        public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process.
        public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public var timeoutInSeconds: Swift.Int?

        public init (
            customEventData: Swift.String? = nil,
            destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
            filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
            gameSessionQueueArn: Swift.String? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
            priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}

extension GameLiftClientTypes.GameSessionQueueDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension GameLiftClientTypes {
    /// A fleet or alias designated in a game session queue. Queues fulfill requests for new game sessions by placing a new game session on any of the queue's destinations.
    public struct GameSessionQueueDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that is assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a Region name, provide a unique identifier across all Regions.
        public var destinationArn: Swift.String?

        public init (
            destinationArn: Swift.String? = nil
        )
        {
            self.destinationArn = destinationArn
        }
    }

}

extension GameLiftClientTypes {
    public enum GameSessionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activating
        case active
        case error
        case terminated
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionStatus] {
            return [
                .activating,
                .active,
                .error,
                .terminated,
                .terminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activating: return "ACTIVATING"
            case .active: return "ACTIVE"
            case .error: return "ERROR"
            case .terminated: return "TERMINATED"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameSessionStatus(rawValue: rawValue) ?? GameSessionStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum GameSessionStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case interrupted
        case sdkUnknown(Swift.String)

        public static var allCases: [GameSessionStatusReason] {
            return [
                .interrupted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .interrupted: return "INTERRUPTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GameSessionStatusReason(rawValue: rawValue) ?? GameSessionStatusReason.sdkUnknown(rawValue)
        }
    }
}

extension GetComputeAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension GetComputeAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetComputeAccessInput: Swift.Equatable {
    /// The name of the compute resource you are requesting credentials for.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet that the compute resource is registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

struct GetComputeAccessInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let computeName: Swift.String?
}

extension GetComputeAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
    }
}

extension GetComputeAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComputeAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetComputeAccessOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComputeAccessOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComputeAccessOutputResponse(computeArn: \(Swift.String(describing: computeArn)), computeName: \(Swift.String(describing: computeName)), fleetArn: \(Swift.String(describing: fleetArn)), fleetId: \(Swift.String(describing: fleetId)), credentials: \"CONTENT_REDACTED\")"}
}

extension GetComputeAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetComputeAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeArn = output.computeArn
            self.computeName = output.computeName
            self.credentials = output.credentials
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.computeArn = nil
            self.computeName = nil
            self.credentials = nil
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct GetComputeAccessOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var computeArn: Swift.String?
    /// The name of the compute resource you requested credentials for.
    public var computeName: Swift.String?
    /// The access credentials for the compute resource.
    public var credentials: GameLiftClientTypes.AwsCredentials?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// The fleet ID of compute resource.
    public var fleetId: Swift.String?

    public init (
        computeArn: Swift.String? = nil,
        computeName: Swift.String? = nil,
        credentials: GameLiftClientTypes.AwsCredentials? = nil,
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeArn = computeArn
        self.computeName = computeName
        self.credentials = credentials
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct GetComputeAccessOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let computeName: Swift.String?
    let computeArn: Swift.String?
    let credentials: GameLiftClientTypes.AwsCredentials?
}

extension GetComputeAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeArn = "ComputeArn"
        case computeName = "ComputeName"
        case credentials = "Credentials"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
        let computeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeArn)
        computeArn = computeArnDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AwsCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension GetComputeAuthTokenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
    }
}

extension GetComputeAuthTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetComputeAuthTokenInput: Swift.Equatable {
    /// The name of the compute resource you are requesting the authorization token for.
    /// This member is required.
    public var computeName: Swift.String?
    /// A unique identifier for the fleet that the compute is registered to.
    /// This member is required.
    public var fleetId: Swift.String?

    public init (
        computeName: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.computeName = computeName
        self.fleetId = fleetId
    }
}

struct GetComputeAuthTokenInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let computeName: Swift.String?
}

extension GetComputeAuthTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeName = "ComputeName"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
    }
}

extension GetComputeAuthTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComputeAuthTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetComputeAuthTokenOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComputeAuthTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetComputeAuthTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.authToken = output.authToken
            self.computeArn = output.computeArn
            self.computeName = output.computeName
            self.expirationTimestamp = output.expirationTimestamp
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.authToken = nil
            self.computeArn = nil
            self.computeName = nil
            self.expirationTimestamp = nil
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct GetComputeAuthTokenOutputResponse: Swift.Equatable {
    /// The authorization token that your game server uses to authenticate with GameLift.
    public var authToken: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift compute resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::compute/compute-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912
    public var computeArn: Swift.String?
    /// The name of the compute resource you are requesting the authorization token for.
    public var computeName: Swift.String?
    /// The amount of time until the authorization token is no longer valid. To continue using the compute resource for game server hosting, renew the authorization token by using this operation again.
    public var expirationTimestamp: ClientRuntime.Date?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that the compute is registered to.
    public var fleetId: Swift.String?

    public init (
        authToken: Swift.String? = nil,
        computeArn: Swift.String? = nil,
        computeName: Swift.String? = nil,
        expirationTimestamp: ClientRuntime.Date? = nil,
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.authToken = authToken
        self.computeArn = computeArn
        self.computeName = computeName
        self.expirationTimestamp = expirationTimestamp
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct GetComputeAuthTokenOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let computeName: Swift.String?
    let computeArn: Swift.String?
    let authToken: Swift.String?
    let expirationTimestamp: ClientRuntime.Date?
}

extension GetComputeAuthTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authToken = "AuthToken"
        case computeArn = "ComputeArn"
        case computeName = "ComputeName"
        case expirationTimestamp = "ExpirationTimestamp"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
        let computeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeArn)
        computeArn = computeArnDecoded
        let authTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authToken)
        authToken = authTokenDecoded
        let expirationTimestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expirationTimestamp)
        expirationTimestamp = expirationTimestampDecoded
    }
}

extension GetGameSessionLogUrlInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
    }
}

extension GetGameSessionLogUrlInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetGameSessionLogUrlInput: Swift.Equatable {
    /// A unique identifier for the game session to get logs for.
    /// This member is required.
    public var gameSessionId: Swift.String?

    public init (
        gameSessionId: Swift.String? = nil
    )
    {
        self.gameSessionId = gameSessionId
    }
}

struct GetGameSessionLogUrlInputBody: Swift.Equatable {
    let gameSessionId: Swift.String?
}

extension GetGameSessionLogUrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
    }
}

extension GetGameSessionLogUrlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetGameSessionLogUrlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetGameSessionLogUrlOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGameSessionLogUrlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetGameSessionLogUrlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.preSignedUrl = output.preSignedUrl
        } else {
            self.preSignedUrl = nil
        }
    }
}

public struct GetGameSessionLogUrlOutputResponse: Swift.Equatable {
    /// Location of the requested game session logs, available for download. This URL is valid for 15 minutes, after which S3 will reject any download request using this URL. You can request a new URL any time within the 14-day period that the logs are retained.
    public var preSignedUrl: Swift.String?

    public init (
        preSignedUrl: Swift.String? = nil
    )
    {
        self.preSignedUrl = preSignedUrl
    }
}

struct GetGameSessionLogUrlOutputResponseBody: Swift.Equatable {
    let preSignedUrl: Swift.String?
}

extension GetGameSessionLogUrlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case preSignedUrl = "PreSignedUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let preSignedUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preSignedUrl)
        preSignedUrl = preSignedUrlDecoded
    }
}

extension GetInstanceAccessInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

extension GetInstanceAccessInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetInstanceAccessInput: Swift.Equatable {
    /// A unique identifier for the fleet that contains the instance you want access to. You can use either the fleet ID or ARN value. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A unique identifier for the instance you want to get access to. You can access an instance in any status.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.instanceId = instanceId
    }
}

struct GetInstanceAccessInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let instanceId: Swift.String?
}

extension GetInstanceAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension GetInstanceAccessOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInstanceAccessOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetInstanceAccessOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInstanceAccessOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetInstanceAccessOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceAccess = output.instanceAccess
        } else {
            self.instanceAccess = nil
        }
    }
}

public struct GetInstanceAccessOutputResponse: Swift.Equatable {
    /// The connection information for a fleet instance, including IP address and access credentials.
    public var instanceAccess: GameLiftClientTypes.InstanceAccess?

    public init (
        instanceAccess: GameLiftClientTypes.InstanceAccess? = nil
    )
    {
        self.instanceAccess = instanceAccess
    }
}

struct GetInstanceAccessOutputResponseBody: Swift.Equatable {
    let instanceAccess: GameLiftClientTypes.InstanceAccess?
}

extension GetInstanceAccessOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceAccess = "InstanceAccess"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceAccessDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.InstanceAccess.self, forKey: .instanceAccess)
        instanceAccess = instanceAccessDecoded
    }
}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A game session with this custom ID string already exists in this fleet. Resolve this conflict before retrying this request.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case ipAddress = "IpAddress"
        case location = "Location"
        case operatingSystem = "OperatingSystem"
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.EC2InstanceType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents an EC2 instance of virtual computing resources that hosts one or more game servers. In GameLift, a fleet can contain zero or more instances. Related actions
    public struct Instance: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the instance is in.
        public var fleetId: Swift.String?
        /// A unique identifier for the instance.
        public var instanceId: Swift.String?
        /// IP address that is assigned to the instance.
        public var ipAddress: Swift.String?
        /// The fleet location of the instance, expressed as an Amazon Web Services Region code, such as us-west-2.
        public var location: Swift.String?
        /// Operating system that is running on this instance.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?
        /// Current status of the instance. Possible statuses include the following:
        ///
        /// * PENDING -- The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration.
        ///
        /// * ACTIVE -- The instance has been successfully created and at least one server process has successfully launched and reported back to GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.
        ///
        /// * TERMINATING -- The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.
        public var status: GameLiftClientTypes.InstanceStatus?
        /// Amazon EC2 instance type that defines the computing resources of this instance.
        public var type: GameLiftClientTypes.EC2InstanceType?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil,
            status: GameLiftClientTypes.InstanceStatus? = nil,
            type: GameLiftClientTypes.EC2InstanceType? = nil
        )
        {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.location = location
            self.operatingSystem = operatingSystem
            self.status = status
            self.type = type
        }
    }

}

extension GameLiftClientTypes.InstanceAccess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
        case fleetId = "FleetId"
        case instanceId = "InstanceId"
        case ipAddress = "IpAddress"
        case operatingSystem = "OperatingSystem"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem.rawValue, forKey: .operatingSystem)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.InstanceCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

extension GameLiftClientTypes.InstanceAccess: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceAccess(fleetId: \(Swift.String(describing: fleetId)), instanceId: \(Swift.String(describing: instanceId)), ipAddress: \(Swift.String(describing: ipAddress)), operatingSystem: \(Swift.String(describing: operatingSystem)), credentials: \"CONTENT_REDACTED\")"}
}

extension GameLiftClientTypes {
    /// Information required to remotely connect to a fleet instance.
    public struct InstanceAccess: Swift.Equatable {
        /// Credentials required to access the instance.
        public var credentials: GameLiftClientTypes.InstanceCredentials?
        /// A unique identifier for the fleet containing the instance being accessed.
        public var fleetId: Swift.String?
        /// A unique identifier for the instance being accessed.
        public var instanceId: Swift.String?
        /// IP address that is assigned to the instance.
        public var ipAddress: Swift.String?
        /// Operating system that is running on the instance.
        public var operatingSystem: GameLiftClientTypes.OperatingSystem?

        public init (
            credentials: GameLiftClientTypes.InstanceCredentials? = nil,
            fleetId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            operatingSystem: GameLiftClientTypes.OperatingSystem? = nil
        )
        {
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
        }
    }

}

extension GameLiftClientTypes.InstanceCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case secret = "Secret"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secret = self.secret {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let secretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secret)
        secret = secretDecoded
    }
}

extension GameLiftClientTypes.InstanceCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension GameLiftClientTypes {
    /// Set of credentials required to remotely access a fleet instance.
    public struct InstanceCredentials: Swift.Equatable {
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        public var secret: Swift.String?
        /// User login string.
        public var userName: Swift.String?

        public init (
            secret: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.secret = secret
            self.userName = userName
        }
    }

}

extension GameLiftClientTypes.InstanceDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType = "InstanceType"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let weightedCapacity = self.weightedCapacity {
            try encodeContainer.encode(weightedCapacity, forKey: .weightedCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. An allowed instance type for a game server group. All game server groups must have at least two instance types defined for it. GameLift FleetIQ periodically evaluates each defined instance type for viability. It then updates the Auto Scaling group with the list of viable instance types.
    public struct InstanceDefinition: Swift.Equatable {
        /// An Amazon EC2 instance type designation.
        /// This member is required.
        public var instanceType: GameLiftClientTypes.GameServerGroupInstanceType?
        /// Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group. Instance weights are used by GameLift FleetIQ to calculate the instance type's cost per unit hour and better identify the most cost-effective options. For detailed information on weighting instance capacity, see [Instance Weighting](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon Elastic Compute Cloud Auto Scaling User Guide. Default value is "1".
        public var weightedCapacity: Swift.String?

        public init (
            instanceType: GameLiftClientTypes.GameServerGroupInstanceType? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension GameLiftClientTypes {
    public enum InstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case pending
        case terminating
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStatus] {
            return [
                .active,
                .pending,
                .terminating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .pending: return "PENDING"
            case .terminating: return "TERMINATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceStatus(rawValue: rawValue) ?? InstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension InternalServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service encountered an unrecoverable internal failure while processing the request. Clients can retry such requests immediately or after a waiting period.
public struct InternalServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFleetStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidFleetStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would cause a conflict with the current state of a resource associated with the request and/or the fleet. Resolve the conflict before retrying.
public struct InvalidFleetStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFleetStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidFleetStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGameSessionStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidGameSessionStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would cause a conflict with the current state of a resource associated with the request and/or the game instance. Resolve the conflict before retrying.
public struct InvalidGameSessionStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGameSessionStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGameSessionStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more parameter values in the request are invalid. Correct the invalid parameter values before retrying.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes.IpPermission: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromPort = "FromPort"
        case ipRange = "IpRange"
        case `protocol` = "Protocol"
        case toPort = "ToPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromPort = self.fromPort {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipRange = self.ipRange {
            try encodeContainer.encode(ipRange, forKey: .ipRange)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let toPort = self.toPort {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let ipRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipRange)
        ipRange = ipRangeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.IpProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension GameLiftClientTypes {
    /// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an instance in a fleet. New game sessions are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. Fleets with custom game builds must have permissions explicitly set. For Realtime Servers fleets, GameLift automatically opens two port ranges, one for TCP messaging and one for UDP.
    public struct IpPermission: Swift.Equatable {
        /// A starting value for a range of allowed port numbers. For fleets using Windows and Linux builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var fromPort: Swift.Int?
        /// A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        /// This member is required.
        public var ipRange: Swift.String?
        /// The network communication protocol used by the fleet.
        /// This member is required.
        public var `protocol`: GameLiftClientTypes.IpProtocol?
        /// An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort. For fleets using Windows and Linux builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var toPort: Swift.Int?

        public init (
            fromPort: Swift.Int? = nil,
            ipRange: Swift.String? = nil,
            `protocol`: GameLiftClientTypes.IpProtocol? = nil,
            toPort: Swift.Int? = nil
        )
        {
            self.fromPort = fromPort
            self.ipRange = ipRange
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }

}

extension GameLiftClientTypes {
    public enum IpProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case tcp
        case udp
        case sdkUnknown(Swift.String)

        public static var allCases: [IpProtocol] {
            return [
                .tcp,
                .udp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .tcp: return "TCP"
            case .udp: return "UDP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpProtocol(rawValue: rawValue) ?? IpProtocol.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.LaunchTemplateSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchTemplateId = self.launchTemplateId {
            try encodeContainer.encode(launchTemplateId, forKey: .launchTemplateId)
        }
        if let launchTemplateName = self.launchTemplateName {
            try encodeContainer.encode(launchTemplateName, forKey: .launchTemplateName)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. An Amazon Elastic Compute Cloud launch template that contains configuration settings and game server code to be deployed to all instances in a game server group. The launch template is specified when creating a new game server group.
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// A unique identifier for an existing Amazon EC2 launch template.
        public var launchTemplateId: Swift.String?
        /// A readable identifier for an existing Amazon EC2 launch template.
        public var launchTemplateName: Swift.String?
        /// The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.
        public var version: Swift.String?

        public init (
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation would cause the resource to exceed the allowed service limit. Resolve the issue before retrying.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAliasesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextToken = "NextToken"
        case routingStrategyType = "RoutingStrategyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let routingStrategyType = self.routingStrategyType {
            try encodeContainer.encode(routingStrategyType.rawValue, forKey: .routingStrategyType)
        }
    }
}

extension ListAliasesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAliasesInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    public var name: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// The routing type to filter results on. Use this parameter to retrieve only aliases with a certain routing type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:
    ///
    /// * SIMPLE -- The alias resolves to one specific fleet. Use this type when routing to active fleets.
    ///
    /// * TERMINAL -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the [RoutingStrategy](https://docs.aws.amazon.com/gamelift/latest/apireference/API_RoutingStrategy.html) message embedded.
    public var routingStrategyType: GameLiftClientTypes.RoutingStrategyType?

    public init (
        limit: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        routingStrategyType: GameLiftClientTypes.RoutingStrategyType? = nil
    )
    {
        self.limit = limit
        self.name = name
        self.nextToken = nextToken
        self.routingStrategyType = routingStrategyType
    }
}

struct ListAliasesInputBody: Swift.Equatable {
    let routingStrategyType: GameLiftClientTypes.RoutingStrategyType?
    let name: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListAliasesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case name = "Name"
        case nextToken = "NextToken"
        case routingStrategyType = "RoutingStrategyType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingStrategyTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RoutingStrategyType.self, forKey: .routingStrategyType)
        routingStrategyType = routingStrategyTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAliasesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAliasesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListAliasesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAliasesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListAliasesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aliases = output.aliases
            self.nextToken = output.nextToken
        } else {
            self.aliases = nil
            self.nextToken = nil
        }
    }
}

public struct ListAliasesOutputResponse: Swift.Equatable {
    /// A collection of alias resources that match the request parameters.
    public var aliases: [GameLiftClientTypes.Alias]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        aliases: [GameLiftClientTypes.Alias]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aliases = aliases
        self.nextToken = nextToken
    }
}

struct ListAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [GameLiftClientTypes.Alias]?
    let nextToken: Swift.String?
}

extension ListAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Alias?].self, forKey: .aliases)
        var aliasesDecoded0:[GameLiftClientTypes.Alias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [GameLiftClientTypes.Alias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension ListBuildsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListBuildsInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:
    ///
    /// * INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.
    ///
    /// * READY -- The game build has been successfully uploaded. You can now create new fleets for this build.
    ///
    /// * FAILED -- The game build upload failed. You cannot create new fleets for this build.
    public var status: GameLiftClientTypes.BuildStatus?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: GameLiftClientTypes.BuildStatus? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListBuildsInputBody: Swift.Equatable {
    let status: GameLiftClientTypes.BuildStatus?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListBuildsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BuildStatus.self, forKey: .status)
        status = statusDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListBuildsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListBuildsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListBuildsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListBuildsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListBuildsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.builds = output.builds
            self.nextToken = output.nextToken
        } else {
            self.builds = nil
            self.nextToken = nil
        }
    }
}

public struct ListBuildsOutputResponse: Swift.Equatable {
    /// A collection of build resources that match the request.
    public var builds: [GameLiftClientTypes.Build]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        builds: [GameLiftClientTypes.Build]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.builds = builds
        self.nextToken = nextToken
    }
}

struct ListBuildsOutputResponseBody: Swift.Equatable {
    let builds: [GameLiftClientTypes.Build]?
    let nextToken: Swift.String?
}

extension ListBuildsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case builds = "Builds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Build?].self, forKey: .builds)
        var buildsDecoded0:[GameLiftClientTypes.Build]? = nil
        if let buildsContainer = buildsContainer {
            buildsDecoded0 = [GameLiftClientTypes.Build]()
            for structure0 in buildsContainer {
                if let structure0 = structure0 {
                    buildsDecoded0?.append(structure0)
                }
            }
        }
        builds = buildsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListComputeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListComputeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListComputeInput: Swift.Equatable {
    /// A unique identifier for the fleet the compute resources are registered to.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The name of the custom location that the compute resources are assigned to.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
    }
}

struct ListComputeInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let location: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListComputeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListComputeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListComputeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListComputeOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListComputeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListComputeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeList = output.computeList
            self.nextToken = output.nextToken
        } else {
            self.computeList = nil
            self.nextToken = nil
        }
    }
}

public struct ListComputeOutputResponse: Swift.Equatable {
    /// A list of compute resources registered to the fleet you specified.
    public var computeList: [GameLiftClientTypes.Compute]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        computeList: [GameLiftClientTypes.Compute]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.computeList = computeList
        self.nextToken = nextToken
    }
}

struct ListComputeOutputResponseBody: Swift.Equatable {
    let computeList: [GameLiftClientTypes.Compute]?
    let nextToken: Swift.String?
}

extension ListComputeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeList = "ComputeList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeListContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Compute?].self, forKey: .computeList)
        var computeListDecoded0:[GameLiftClientTypes.Compute]? = nil
        if let computeListContainer = computeListContainer {
            computeListDecoded0 = [GameLiftClientTypes.Compute]()
            for structure0 in computeListContainer {
                if let structure0 = structure0 {
                    computeListDecoded0?.append(structure0)
                }
            }
        }
        computeList = computeListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFleetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case scriptId = "ScriptId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
    }
}

extension ListFleetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListFleetsInput: Swift.Equatable {
    /// A unique identifier for the build to request fleets for. Use this parameter to return only fleets using a specified build. Use either the build ID or ARN value.
    public var buildId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// A unique identifier for the Realtime script to request fleets for. Use this parameter to return only fleets using a specified script. Use either the script ID or ARN value.
    public var scriptId: Swift.String?

    public init (
        buildId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scriptId: Swift.String? = nil
    )
    {
        self.buildId = buildId
        self.limit = limit
        self.nextToken = nextToken
        self.scriptId = scriptId
    }
}

struct ListFleetsInputBody: Swift.Equatable {
    let buildId: Swift.String?
    let scriptId: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListFleetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case scriptId = "ScriptId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListFleetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListFleetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListFleetsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListFleetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListFleetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetIds = output.fleetIds
            self.nextToken = output.nextToken
        } else {
            self.fleetIds = nil
            self.nextToken = nil
        }
    }
}

public struct ListFleetsOutputResponse: Swift.Equatable {
    /// A set of fleet IDs that match the list request.
    public var fleetIds: [Swift.String]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        fleetIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.fleetIds = fleetIds
        self.nextToken = nextToken
    }
}

struct ListFleetsOutputResponseBody: Swift.Equatable {
    let fleetIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListFleetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetIds = "FleetIds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fleetIds)
        var fleetIdsDecoded0:[Swift.String]? = nil
        if let fleetIdsContainer = fleetIdsContainer {
            fleetIdsDecoded0 = [Swift.String]()
            for string0 in fleetIdsContainer {
                if let string0 = string0 {
                    fleetIdsDecoded0?.append(string0)
                }
            }
        }
        fleetIds = fleetIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServerGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListGameServerGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGameServerGroupsInput: Swift.Equatable {
    /// The game server groups' limit.
    public var limit: Swift.Int?
    /// Specify the pagination token from a previous request to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListGameServerGroupsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListGameServerGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServerGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGameServerGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGameServerGroupsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGameServerGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGameServerGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroups = output.gameServerGroups
            self.nextToken = output.nextToken
        } else {
            self.gameServerGroups = nil
            self.nextToken = nil
        }
    }
}

public struct ListGameServerGroupsOutputResponse: Swift.Equatable {
    /// The game server groups' game server groups.
    public var gameServerGroups: [GameLiftClientTypes.GameServerGroup]?
    /// Specify the pagination token from a previous request to retrieve the next page of results.
    public var nextToken: Swift.String?

    public init (
        gameServerGroups: [GameLiftClientTypes.GameServerGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServerGroups = gameServerGroups
        self.nextToken = nextToken
    }
}

struct ListGameServerGroupsOutputResponseBody: Swift.Equatable {
    let gameServerGroups: [GameLiftClientTypes.GameServerGroup]?
    let nextToken: Swift.String?
}

extension ListGameServerGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroups = "GameServerGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerGroup?].self, forKey: .gameServerGroups)
        var gameServerGroupsDecoded0:[GameLiftClientTypes.GameServerGroup]? = nil
        if let gameServerGroupsContainer = gameServerGroupsContainer {
            gameServerGroupsDecoded0 = [GameLiftClientTypes.GameServerGroup]()
            for structure0 in gameServerGroupsContainer {
                if let structure0 = structure0 {
                    gameServerGroupsDecoded0?.append(structure0)
                }
            }
        }
        gameServerGroups = gameServerGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListGameServersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListGameServersInput: Swift.Equatable {
    /// An identifier for the game server group to retrieve a list of game servers from. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Indicates how to sort the returned data based on game server registration timestamp. Use ASCENDING to retrieve oldest game servers first, or use DESCENDING to retrieve newest game servers first. If this parameter is left empty, game servers are returned in no particular order.
    public var sortOrder: GameLiftClientTypes.SortOrder?

    public init (
        gameServerGroupName: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: GameLiftClientTypes.SortOrder? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.limit = limit
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

struct ListGameServersInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let sortOrder: GameLiftClientTypes.SortOrder?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListGameServersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGameServersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGameServersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGameServersOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGameServersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGameServersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServers = output.gameServers
            self.nextToken = output.nextToken
        } else {
            self.gameServers = nil
            self.nextToken = nil
        }
    }
}

public struct ListGameServersOutputResponse: Swift.Equatable {
    /// A collection of game server objects that match the request.
    public var gameServers: [GameLiftClientTypes.GameServer]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameServers: [GameLiftClientTypes.GameServer]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameServers = gameServers
        self.nextToken = nextToken
    }
}

struct ListGameServersOutputResponseBody: Swift.Equatable {
    let gameServers: [GameLiftClientTypes.GameServer]?
    let nextToken: Swift.String?
}

extension ListGameServersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServers = "GameServers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServer?].self, forKey: .gameServers)
        var gameServersDecoded0:[GameLiftClientTypes.GameServer]? = nil
        if let gameServersContainer = gameServersContainer {
            gameServersDecoded0 = [GameLiftClientTypes.GameServer]()
            for structure0 in gameServersContainer {
                if let structure0 = structure0 {
                    gameServersDecoded0?.append(structure0)
                }
            }
        }
        gameServers = gameServersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for locationfilter0 in filters {
                try filtersContainer.encode(locationfilter0.rawValue)
            }
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLocationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLocationsInput: Swift.Equatable {
    /// Filters the list for AWS or CUSTOM locations.
    public var filters: [GameLiftClientTypes.LocationFilter]?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        filters: [GameLiftClientTypes.LocationFilter]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListLocationsInputBody: Swift.Equatable {
    let filters: [GameLiftClientTypes.LocationFilter]?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListLocationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationFilter?].self, forKey: .filters)
        var filtersDecoded0:[GameLiftClientTypes.LocationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [GameLiftClientTypes.LocationFilter]()
            for enum0 in filtersContainer {
                if let enum0 = enum0 {
                    filtersDecoded0?.append(enum0)
                }
            }
        }
        filters = filtersDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListLocationsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locations = output.locations
            self.nextToken = output.nextToken
        } else {
            self.locations = nil
            self.nextToken = nil
        }
    }
}

public struct ListLocationsOutputResponse: Swift.Equatable {
    /// A collection of locations.
    public var locations: [GameLiftClientTypes.LocationModel]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        locations: [GameLiftClientTypes.LocationModel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.locations = locations
        self.nextToken = nextToken
    }
}

struct ListLocationsOutputResponseBody: Swift.Equatable {
    let locations: [GameLiftClientTypes.LocationModel]?
    let nextToken: Swift.String?
}

extension ListLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.LocationModel?].self, forKey: .locations)
        var locationsDecoded0:[GameLiftClientTypes.LocationModel]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [GameLiftClientTypes.LocationModel]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListScriptsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListScriptsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListScriptsInput: Swift.Equatable {
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListScriptsInputBody: Swift.Equatable {
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListScriptsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListScriptsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListScriptsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListScriptsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListScriptsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListScriptsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scripts = output.scripts
        } else {
            self.nextToken = nil
            self.scripts = nil
        }
    }
}

public struct ListScriptsOutputResponse: Swift.Equatable {
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?
    /// A set of properties describing the requested script.
    public var scripts: [GameLiftClientTypes.Script]?

    public init (
        nextToken: Swift.String? = nil,
        scripts: [GameLiftClientTypes.Script]? = nil
    )
    {
        self.nextToken = nextToken
        self.scripts = scripts
    }
}

struct ListScriptsOutputResponseBody: Swift.Equatable {
    let scripts: [GameLiftClientTypes.Script]?
    let nextToken: Swift.String?
}

extension ListScriptsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scripts = "Scripts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Script?].self, forKey: .scripts)
        var scriptsDecoded0:[GameLiftClientTypes.Script]? = nil
        if let scriptsContainer = scriptsContainer {
            scriptsDecoded0 = [GameLiftClientTypes.Script]()
            for structure0 in scriptsContainer {
                if let structure0 = structure0 {
                    scriptsDecoded0?.append(structure0)
                }
            }
        }
        scripts = scriptsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to and uniquely identifies the GameLift resource that you want to retrieve tags for. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init (
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The collection of tags that have been assigned to the specified resource.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [GameLiftClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension GameLiftClientTypes.LocationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationState = "LocationState"
        case stoppedActions = "StoppedActions"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationState = self.locationState {
            try encodeContainer.encode(locationState, forKey: .locationState)
        }
        if let stoppedActions = stoppedActions {
            var stoppedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stoppedActions)
            for fleetaction0 in stoppedActions {
                try stoppedActionsContainer.encode(fleetaction0.rawValue)
            }
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationStateDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationState.self, forKey: .locationState)
        locationState = locationStateDecoded
        let stoppedActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetAction?].self, forKey: .stoppedActions)
        var stoppedActionsDecoded0:[GameLiftClientTypes.FleetAction]? = nil
        if let stoppedActionsContainer = stoppedActionsContainer {
            stoppedActionsDecoded0 = [GameLiftClientTypes.FleetAction]()
            for enum0 in stoppedActionsContainer {
                if let enum0 = enum0 {
                    stoppedActionsDecoded0?.append(enum0)
                }
            }
        }
        stoppedActions = stoppedActionsDecoded0
        let updateStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
    }
}

extension GameLiftClientTypes {
    /// Details about a location in a multi-location fleet.
    public struct LocationAttributes: Swift.Equatable {
        /// A fleet location and its current life-cycle state.
        public var locationState: GameLiftClientTypes.LocationState?
        /// A list of fleet actions that have been suspended in the fleet location.
        public var stoppedActions: [GameLiftClientTypes.FleetAction]?
        /// The status of fleet activity updates to the location. The status PENDING_UPDATE indicates that StopFleetActions or StartFleetActions has been requested but the update has not yet been completed for the location.
        public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

        public init (
            locationState: GameLiftClientTypes.LocationState? = nil,
            stoppedActions: [GameLiftClientTypes.FleetAction]? = nil,
            updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
        )
        {
            self.locationState = locationState
            self.stoppedActions = stoppedActions
            self.updateStatus = updateStatus
        }
    }

}

extension GameLiftClientTypes.LocationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// A remote location where a multi-location fleet can deploy EC2 instances for game hosting.
    public struct LocationConfiguration: Swift.Equatable {
        /// An Amazon Web Services Region code, such as us-west-2.
        /// This member is required.
        public var location: Swift.String?

        public init (
            location: Swift.String? = nil
        )
        {
            self.location = location
        }
    }

}

extension GameLiftClientTypes {
    public enum LocationFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case custom
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationFilter] {
            return [
                .aws,
                .custom,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .custom: return "CUSTOM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocationFilter(rawValue: rawValue) ?? LocationFilter.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.LocationModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case locationName = "LocationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let locationName = self.locationName {
            try encodeContainer.encode(locationName, forKey: .locationName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension GameLiftClientTypes {
    /// Properties of a location
    public struct LocationModel: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift location resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::location/location-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var locationArn: Swift.String?
        /// The location's name.
        public var locationName: Swift.String?

        public init (
            locationArn: Swift.String? = nil,
            locationName: Swift.String? = nil
        )
        {
            self.locationArn = locationArn
            self.locationName = locationName
        }
    }

}

extension GameLiftClientTypes.LocationState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location = "Location"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FleetStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension GameLiftClientTypes {
    /// A fleet location and its life-cycle state. A location state object might be used to describe a fleet's remote location or home Region. Life-cycle state tracks the progress of launching the first instance in a new location and preparing it for game hosting, and then removing all instances and deleting the location from the fleet.
    ///
    /// * NEW -- A new fleet location has been defined and desired instances is set to 1.
    ///
    /// * DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- GameLift is setting up the new fleet location, creating new instances with the game build or Realtime script and starting server processes.
    ///
    /// * ACTIVE -- Hosts can now accept game sessions.
    ///
    /// * ERROR -- An error occurred when downloading, validating, building, or activating the fleet location.
    ///
    /// * DELETING -- Hosts are responding to a delete fleet location request.
    ///
    /// * TERMINATED -- The fleet location no longer exists.
    ///
    /// * NOT_FOUND -- The fleet location was not found. This could be because the custom location was removed or not created.
    public struct LocationState: Swift.Equatable {
        /// The fleet location, expressed as an Amazon Web Services Region code such as us-west-2.
        public var location: Swift.String?
        /// The life-cycle status of a fleet location.
        public var status: GameLiftClientTypes.FleetStatus?

        public init (
            location: Swift.String? = nil,
            status: GameLiftClientTypes.FleetStatus? = nil
        )
        {
            self.location = location
            self.status = status
        }
    }

}

extension GameLiftClientTypes {
    public enum LocationUpdateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pendingUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationUpdateStatus] {
            return [
                .pendingUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pendingUpdate: return "PENDING_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocationUpdateStatus(rawValue: rawValue) ?? LocationUpdateStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.MatchedPlayerSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = self.playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents a new player session that is created as a result of a successful FlexMatch match. A successful match automatically creates new player sessions for every player ID in the original matchmaking request. When players connect to the match's game session, they must include both player ID and player session ID in order to claim their assigned player slot.
    public struct MatchedPlayerSession: Swift.Equatable {
        /// A unique identifier for a player
        public var playerId: Swift.String?
        /// A unique identifier for a player session
        public var playerSessionId: Swift.String?

        public init (
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil
        )
        {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }
    }

}

extension GameLiftClientTypes.MatchmakingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case configurationArn = "ConfigurationArn"
        case creationTime = "CreationTime"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetArn = "RuleSetArn"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = self.acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = self.acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = self.additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = self.backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let configurationArn = self.configurationArn {
            try encodeContainer.encode(configurationArn, forKey: .configurationArn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = self.flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for arnstringmodel0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(arnstringmodel0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = self.requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetArn = self.ruleSetArn {
            try encodeContainer.encode(ruleSetArn, forKey: .ruleSetArn)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let configurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[Swift.String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [Swift.String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetArn)
        ruleSetArn = ruleSetArnDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}

extension GameLiftClientTypes {
    /// Guidelines for use with FlexMatch to match players into games. All matchmaking requests must specify a matchmaking configuration.
    public struct MatchmakingConfiguration: Swift.Equatable {
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. When this option is enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public var acceptanceRequired: Swift.Bool?
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public var acceptanceTimeoutSeconds: Swift.Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var additionalPlayerCount: Swift.Int?
        /// The method used to backfill game sessions created with this matchmaking configuration. MANUAL indicates that the game makes backfill requests or does not use the match backfill feature. AUTOMATIC indicates that GameLift creates backfill requests whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [Backfill existing games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public var backfillMode: GameLiftClientTypes.BackfillMode?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingconfiguration/. In a GameLift configuration ARN, the resource ID matches the Name value.
        public var configurationArn: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// Information to attach to all events related to the matchmaking configuration.
        public var customEventData: Swift.String?
        /// A descriptive label that is associated with matchmaking configuration.
        public var description: Swift.String?
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
        ///
        /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
        ///
        /// * WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
        public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameSessionData: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. This property is not set when FlexMatchMode is set to STANDALONE.
        public var gameSessionQueueArns: [Swift.String]?
        /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        public var notificationTarget: Swift.String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public var requestTimeoutSeconds: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift matchmaking rule set resource that this configuration uses.
        public var ruleSetArn: Swift.String?
        /// A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public var ruleSetName: Swift.String?

        public init (
            acceptanceRequired: Swift.Bool? = nil,
            acceptanceTimeoutSeconds: Swift.Int? = nil,
            additionalPlayerCount: Swift.Int? = nil,
            backfillMode: GameLiftClientTypes.BackfillMode? = nil,
            configurationArn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            customEventData: Swift.String? = nil,
            description: Swift.String? = nil,
            flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionQueueArns: [Swift.String]? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            requestTimeoutSeconds: Swift.Int? = nil,
            ruleSetArn: Swift.String? = nil,
            ruleSetName: Swift.String? = nil
        )
        {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.configurationArn = configurationArn
            self.creationTime = creationTime
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetArn = ruleSetArn
            self.ruleSetName = ruleSetName
        }
    }

}

extension GameLiftClientTypes {
    public enum MatchmakingConfigurationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case completed
        case failed
        case placing
        case queued
        case requiresAcceptance
        case searching
        case timedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [MatchmakingConfigurationStatus] {
            return [
                .cancelled,
                .completed,
                .failed,
                .placing,
                .queued,
                .requiresAcceptance,
                .searching,
                .timedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .placing: return "PLACING"
            case .queued: return "QUEUED"
            case .requiresAcceptance: return "REQUIRES_ACCEPTANCE"
            case .searching: return "SEARCHING"
            case .timedOut: return "TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MatchmakingConfigurationStatus(rawValue: rawValue) ?? MatchmakingConfigurationStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.MatchmakingRuleSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case ruleSetArn = "RuleSetArn"
        case ruleSetBody = "RuleSetBody"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let ruleSetArn = self.ruleSetArn {
            try encodeContainer.encode(ruleSetArn, forKey: .ruleSetArn)
        }
        if let ruleSetBody = self.ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetArn)
        ruleSetArn = ruleSetArnDecoded
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// Set of rule statements, used with FlexMatch, that determine how to build your player matches. Each rule set describes a type of group to be created and defines the parameters for acceptable player matches. A rule set may define the following elements for a match. For detailed information and examples showing how to construct a rule set, see [Build a FlexMatch rule set](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-rulesets.html).
    ///
    /// * Teams -- Required. A rule set must define one or multiple teams for the match and set minimum and maximum team sizes. For example, a rule set might describe a 4x4 match that requires all eight slots to be filled.
    ///
    /// * Player attributes -- Optional. These attributes specify a set of player characteristics to evaluate when looking for a match. Matchmaking requests that use a rule set with player attributes must provide the corresponding attribute values. For example, an attribute might specify a player's skill or level.
    ///
    /// * Rules -- Optional. Rules define how to evaluate potential players for a match based on player attributes. A rule might specify minimum requirements for individual players, teams, or entire matches. For example, a rule might require each player to meet a certain skill level, each team to have at least one player in a certain role, or the match to have a minimum average skill level. or may describe an entire group--such as all teams must be evenly matched or have at least one player in a certain role.
    ///
    /// * Expansions -- Optional. Expansions allow you to relax the rules after a period of time when no acceptable matches are found. This feature lets you balance getting players into games in a reasonable amount of time instead of making them wait indefinitely for the best possible match. For example, you might use an expansion to increase the maximum skill variance between players after 30 seconds.
    public struct MatchmakingRuleSet: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift matchmaking rule set resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingruleset/. In a GameLift rule set ARN, the resource ID matches the RuleSetName value.
        public var ruleSetArn: Swift.String?
        /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        /// This member is required.
        public var ruleSetBody: Swift.String?
        /// A unique identifier for the matchmaking rule set
        public var ruleSetName: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            ruleSetArn: Swift.String? = nil,
            ruleSetBody: Swift.String? = nil,
            ruleSetName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.ruleSetArn = ruleSetArn
            self.ruleSetBody = ruleSetBody
            self.ruleSetName = ruleSetName
        }
    }

}

extension GameLiftClientTypes.MatchmakingTicket: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationArn = "ConfigurationArn"
        case configurationName = "ConfigurationName"
        case endTime = "EndTime"
        case estimatedWaitTime = "EstimatedWaitTime"
        case gameSessionConnectionInfo = "GameSessionConnectionInfo"
        case players = "Players"
        case startTime = "StartTime"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case statusReason = "StatusReason"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationArn = self.configurationArn {
            try encodeContainer.encode(configurationArn, forKey: .configurationArn)
        }
        if let configurationName = self.configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let estimatedWaitTime = self.estimatedWaitTime {
            try encodeContainer.encode(estimatedWaitTime, forKey: .estimatedWaitTime)
        }
        if let gameSessionConnectionInfo = self.gameSessionConnectionInfo {
            try encodeContainer.encode(gameSessionConnectionInfo, forKey: .gameSessionConnectionInfo)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for player0 in players {
                try playersContainer.encode(player0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let ticketId = self.ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let configurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let playersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Player?].self, forKey: .players)
        var playersDecoded0:[GameLiftClientTypes.Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [GameLiftClientTypes.Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
        let gameSessionConnectionInfoDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionConnectionInfo.self, forKey: .gameSessionConnectionInfo)
        gameSessionConnectionInfo = gameSessionConnectionInfoDecoded
        let estimatedWaitTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedWaitTime)
        estimatedWaitTime = estimatedWaitTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// Ticket generated to track the progress of a matchmaking request. Each ticket is uniquely identified by a ticket ID, supplied by the requester, when creating a matchmaking request.
    public struct MatchmakingTicket: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift matchmaking configuration resource that is used with this ticket.
        public var configurationArn: Swift.String?
        /// Name of the matchmaking configuration that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.
        public var configurationName: Swift.String?
        /// Time stamp indicating when the matchmaking request stopped being processed due to successful completion, timeout, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var endTime: ClientRuntime.Date?
        /// Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.
        public var estimatedWaitTime: Swift.Int?
        /// Connection information for a new game session. Once a match is made, the FlexMatch engine creates a new game session for it. This information is added to the matchmaking ticket, which you can be retrieve by calling [DescribeMatchmaking](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeMatchmaking.html) .
        public var gameSessionConnectionInfo: GameLiftClientTypes.GameSessionConnectionInfo?
        /// A set of Player objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status COMPLETED, the Player objects include the team the players were assigned to in the resulting match.
        public var players: [GameLiftClientTypes.Player]?
        /// Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var startTime: ClientRuntime.Date?
        /// Current status of the matchmaking request.
        ///
        /// * QUEUED -- The matchmaking request has been received and is currently waiting to be processed.
        ///
        /// * SEARCHING -- The matchmaking request is currently being processed.
        ///
        /// * REQUIRES_ACCEPTANCE -- A match has been proposed and the players must accept the match. This status is used only with requests that use a matchmaking configuration with a player acceptance requirement.
        ///
        /// * PLACING -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match.
        ///
        /// * COMPLETED -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players.
        ///
        /// * FAILED -- The matchmaking request was not completed.
        ///
        /// * CANCELLED -- The matchmaking request was canceled. This may be the result of a StopMatchmaking operation or a proposed match that one or more players failed to accept.
        ///
        /// * TIMED_OUT -- The matchmaking request was not successful within the duration specified in the matchmaking configuration.
        ///
        ///
        /// Matchmaking requests that fail to successfully complete (statuses FAILED, CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket IDs.
        public var status: GameLiftClientTypes.MatchmakingConfigurationStatus?
        /// Additional information about the current status.
        public var statusMessage: Swift.String?
        /// Code to explain the current status. For example, a status reason may indicate when a ticket has returned to SEARCHING status after a proposed match fails to receive player acceptances.
        public var statusReason: Swift.String?
        /// A unique identifier for a matchmaking ticket.
        public var ticketId: Swift.String?

        public init (
            configurationArn: Swift.String? = nil,
            configurationName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            estimatedWaitTime: Swift.Int? = nil,
            gameSessionConnectionInfo: GameLiftClientTypes.GameSessionConnectionInfo? = nil,
            players: [GameLiftClientTypes.Player]? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: GameLiftClientTypes.MatchmakingConfigurationStatus? = nil,
            statusMessage: Swift.String? = nil,
            statusReason: Swift.String? = nil,
            ticketId: Swift.String? = nil
        )
        {
            self.configurationArn = configurationArn
            self.configurationName = configurationName
            self.endTime = endTime
            self.estimatedWaitTime = estimatedWaitTime
            self.gameSessionConnectionInfo = gameSessionConnectionInfo
            self.players = players
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
            self.statusReason = statusReason
            self.ticketId = ticketId
        }
    }

}

extension GameLiftClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activatinggamesessions
        case activegamesessions
        case activeinstances
        case availablegamesessions
        case availableplayersessions
        case concurrentactivatablegamesessions
        case currentplayersessions
        case idleinstances
        case percentavailablegamesessions
        case percentidleinstances
        case queuedepth
        case waittime
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .activatinggamesessions,
                .activegamesessions,
                .activeinstances,
                .availablegamesessions,
                .availableplayersessions,
                .concurrentactivatablegamesessions,
                .currentplayersessions,
                .idleinstances,
                .percentavailablegamesessions,
                .percentidleinstances,
                .queuedepth,
                .waittime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activatinggamesessions: return "ActivatingGameSessions"
            case .activegamesessions: return "ActiveGameSessions"
            case .activeinstances: return "ActiveInstances"
            case .availablegamesessions: return "AvailableGameSessions"
            case .availableplayersessions: return "AvailablePlayerSessions"
            case .concurrentactivatablegamesessions: return "ConcurrentActivatableGameSessions"
            case .currentplayersessions: return "CurrentPlayerSessions"
            case .idleinstances: return "IdleInstances"
            case .percentavailablegamesessions: return "PercentAvailableGameSessions"
            case .percentidleinstances: return "PercentIdleInstances"
            case .queuedepth: return "QueueDepth"
            case .waittime: return "WaitTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// THe requested resources was not found. The resource was either not created yet or deleted.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes {
    public enum OperatingSystem: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonLinux
        case amazonLinux2
        case windows2012
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatingSystem] {
            return [
                .amazonLinux,
                .amazonLinux2,
                .windows2012,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonLinux: return "AMAZON_LINUX"
            case .amazonLinux2: return "AMAZON_LINUX_2"
            case .windows2012: return "WINDOWS_2012"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperatingSystem(rawValue: rawValue) ?? OperatingSystem.sdkUnknown(rawValue)
        }
    }
}

extension OutOfCapacityException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OutOfCapacityExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified game server group has no available game servers to fulfill a ClaimGameServer request. Clients can retry such requests immediately or after a waiting period.
public struct OutOfCapacityException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OutOfCapacityExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OutOfCapacityExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes.PlacedPlayerSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = self.playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
    }
}

extension GameLiftClientTypes {
    /// Information about a player session. This object contains only the player ID and player session ID. To retrieve full details on a player session, call [DescribePlayerSessions](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribePlayerSessions.html) with the player session ID.
    public struct PlacedPlayerSession: Swift.Equatable {
        /// A unique identifier for a player that is associated with this player session.
        public var playerId: Swift.String?
        /// A unique identifier for a player session.
        public var playerSessionId: Swift.String?

        public init (
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil
        )
        {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }
    }

}

extension GameLiftClientTypes.Player: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latencyInMs = "LatencyInMs"
        case playerAttributes = "PlayerAttributes"
        case playerId = "PlayerId"
        case team = "Team"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let latencyInMs = latencyInMs {
            var latencyInMsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .latencyInMs)
            for (dictKey0, latencyMap0) in latencyInMs {
                try latencyInMsContainer.encode(latencyMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let playerAttributes = playerAttributes {
            var playerAttributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .playerAttributes)
            for (dictKey0, playerAttributeMap0) in playerAttributes {
                try playerAttributesContainer.encode(playerAttributeMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let team = self.team {
            try encodeContainer.encode(team, forKey: .team)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let playerAttributesContainer = try containerValues.decodeIfPresent([Swift.String: GameLiftClientTypes.AttributeValue?].self, forKey: .playerAttributes)
        var playerAttributesDecoded0: [Swift.String:GameLiftClientTypes.AttributeValue]? = nil
        if let playerAttributesContainer = playerAttributesContainer {
            playerAttributesDecoded0 = [Swift.String:GameLiftClientTypes.AttributeValue]()
            for (key0, attributevalue0) in playerAttributesContainer {
                if let attributevalue0 = attributevalue0 {
                    playerAttributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        playerAttributes = playerAttributesDecoded0
        let teamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .team)
        team = teamDecoded
        let latencyInMsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .latencyInMs)
        var latencyInMsDecoded0: [Swift.String:Swift.Int]? = nil
        if let latencyInMsContainer = latencyInMsContainer {
            latencyInMsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, positiveinteger0) in latencyInMsContainer {
                if let positiveinteger0 = positiveinteger0 {
                    latencyInMsDecoded0?[key0] = positiveinteger0
                }
            }
        }
        latencyInMs = latencyInMsDecoded0
    }
}

extension GameLiftClientTypes {
    /// Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed.
    public struct Player: Swift.Equatable {
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions. If this property is present, FlexMatch considers placing the match only in Regions for which latency is reported. If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no Regions are available to the player and the ticket is not matchable.
        public var latencyInMs: [Swift.String:Swift.Int]?
        /// A collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the playerAttributes used in a matchmaking rule set. Example: "PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}. You can provide up to 10 PlayerAttributes.
        public var playerAttributes: [Swift.String:GameLiftClientTypes.AttributeValue]?
        /// A unique identifier for a player
        public var playerId: Swift.String?
        /// Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
        public var team: Swift.String?

        public init (
            latencyInMs: [Swift.String:Swift.Int]? = nil,
            playerAttributes: [Swift.String:GameLiftClientTypes.AttributeValue]? = nil,
            playerId: Swift.String? = nil,
            team: Swift.String? = nil
        )
        {
            self.latencyInMs = latencyInMs
            self.playerAttributes = playerAttributes
            self.playerId = playerId
            self.team = team
        }
    }

}

extension GameLiftClientTypes.PlayerLatency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case latencyInMilliseconds = "LatencyInMilliseconds"
        case playerId = "PlayerId"
        case regionIdentifier = "RegionIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if latencyInMilliseconds != 0.0 {
            try encodeContainer.encode(latencyInMilliseconds, forKey: .latencyInMilliseconds)
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let regionIdentifier = self.regionIdentifier {
            try encodeContainer.encode(regionIdentifier, forKey: .regionIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let regionIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionIdentifier)
        regionIdentifier = regionIdentifierDecoded
        let latencyInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .latencyInMilliseconds) ?? 0.0
        latencyInMilliseconds = latencyInMillisecondsDecoded
    }
}

extension GameLiftClientTypes {
    /// Regional latency information for a player, used when requesting a new game session. This value indicates the amount of time lag that exists when the player is connected to a fleet in the specified Region. The relative difference between a player's latency values for multiple Regions are used to determine which fleets are best suited to place a new game session for the player.
    public struct PlayerLatency: Swift.Equatable {
        /// Amount of time that represents the time lag experienced by the player when connected to the specified Region.
        public var latencyInMilliseconds: Swift.Float
        /// A unique identifier for a player associated with the latency data.
        public var playerId: Swift.String?
        /// Name of the Region that is associated with the latency value.
        public var regionIdentifier: Swift.String?

        public init (
            latencyInMilliseconds: Swift.Float = 0.0,
            playerId: Swift.String? = nil,
            regionIdentifier: Swift.String? = nil
        )
        {
            self.latencyInMilliseconds = latencyInMilliseconds
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
        }
    }

}

extension GameLiftClientTypes.PlayerLatencyPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
        case policyDurationSeconds = "PolicyDurationSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maximumIndividualPlayerLatencyMilliseconds = self.maximumIndividualPlayerLatencyMilliseconds {
            try encodeContainer.encode(maximumIndividualPlayerLatencyMilliseconds, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        }
        if let policyDurationSeconds = self.policyDurationSeconds {
            try encodeContainer.encode(policyDurationSeconds, forKey: .policyDurationSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumIndividualPlayerLatencyMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumIndividualPlayerLatencyMilliseconds)
        maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMillisecondsDecoded
        let policyDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .policyDurationSeconds)
        policyDurationSeconds = policyDurationSecondsDecoded
    }
}

extension GameLiftClientTypes {
    /// Sets a latency cap for individual players when placing a game session. With a latency policy in force, a game session cannot be placed in a fleet location where a player reports latency higher than the cap. Latency policies are used only with placement request that provide player latency information. Player latency policies can be stacked to gradually relax latency requirements over time.
    public struct PlayerLatencyPolicy: Swift.Equatable {
        /// The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
        public var maximumIndividualPlayerLatencyMilliseconds: Swift.Int?
        /// The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
        public var policyDurationSeconds: Swift.Int?

        public init (
            maximumIndividualPlayerLatencyMilliseconds: Swift.Int? = nil,
            policyDurationSeconds: Swift.Int? = nil
        )
        {
            self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
            self.policyDurationSeconds = policyDurationSeconds
        }
    }

}

extension GameLiftClientTypes.PlayerSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dnsName = "DnsName"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameSessionId = "GameSessionId"
        case ipAddress = "IpAddress"
        case playerData = "PlayerData"
        case playerId = "PlayerId"
        case playerSessionId = "PlayerSessionId"
        case port = "Port"
        case status = "Status"
        case terminationTime = "TerminationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let playerData = self.playerData {
            try encodeContainer.encode(playerData, forKey: .playerData)
        }
        if let playerId = self.playerId {
            try encodeContainer.encode(playerId, forKey: .playerId)
        }
        if let playerSessionId = self.playerSessionId {
            try encodeContainer.encode(playerSessionId, forKey: .playerSessionId)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let terminationTime = self.terminationTime {
            try encodeContainer.encodeTimestamp(terminationTime, format: .epochSeconds, forKey: .terminationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let playerSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerSessionId)
        playerSessionId = playerSessionIdDecoded
        let playerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerId)
        playerId = playerIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let terminationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .terminationTime)
        terminationTime = terminationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PlayerSessionStatus.self, forKey: .status)
        status = statusDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let playerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playerData)
        playerData = playerDataDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents a player session. Player sessions are created either for a specific game session, or as part of a game session placement or matchmaking request. A player session can represents a reserved player slot in a game session (when status is RESERVED) or actual player activity in a game session (when status is ACTIVE). A player session object, including player data, is automatically passed to a game session when the player connects to the game session and is validated. After the game session ends, player sessions information is retained for 30 days and then removed. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct PlayerSession: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that the player's game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the player's game session is running on.
        public var fleetId: Swift.String?
        /// A unique identifier for the game session that the player session is connected to.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public var playerData: Swift.String?
        /// A unique identifier for a player that is associated with this player session.
        public var playerId: Swift.String?
        /// A unique identifier for a player session.
        public var playerSessionId: Swift.String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the player session. Possible player session statuses include the following:
        ///
        /// * RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.
        ///
        /// * ACTIVE -- The player has been validated by the server process and is currently connected.
        ///
        /// * COMPLETED -- The player connection has been dropped.
        ///
        /// * TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
        public var status: GameLiftClientTypes.PlayerSessionStatus?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            playerData: Swift.String? = nil,
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.PlayerSessionStatus? = nil,
            terminationTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.port = port
            self.status = status
            self.terminationTime = terminationTime
        }
    }

}

extension GameLiftClientTypes {
    public enum PlayerSessionCreationPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case acceptAll
        case denyAll
        case sdkUnknown(Swift.String)

        public static var allCases: [PlayerSessionCreationPolicy] {
            return [
                .acceptAll,
                .denyAll,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .acceptAll: return "ACCEPT_ALL"
            case .denyAll: return "DENY_ALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlayerSessionCreationPolicy(rawValue: rawValue) ?? PlayerSessionCreationPolicy.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum PlayerSessionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case completed
        case reserved
        case timedout
        case sdkUnknown(Swift.String)

        public static var allCases: [PlayerSessionStatus] {
            return [
                .active,
                .completed,
                .reserved,
                .timedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .completed: return "COMPLETED"
            case .reserved: return "RESERVED"
            case .timedout: return "TIMEDOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlayerSessionStatus(rawValue: rawValue) ?? PlayerSessionStatus.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rulebased
        case targetbased
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .rulebased,
                .targetbased,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rulebased: return "RuleBased"
            case .targetbased: return "TargetBased"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.PriorityConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationOrder = "LocationOrder"
        case priorityOrder = "PriorityOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationOrder = locationOrder {
            var locationOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locationOrder)
            for locationstringmodel0 in locationOrder {
                try locationOrderContainer.encode(locationstringmodel0)
            }
        }
        if let priorityOrder = priorityOrder {
            var priorityOrderContainer = encodeContainer.nestedUnkeyedContainer(forKey: .priorityOrder)
            for prioritytype0 in priorityOrder {
                try priorityOrderContainer.encode(prioritytype0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityOrderContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PriorityType?].self, forKey: .priorityOrder)
        var priorityOrderDecoded0:[GameLiftClientTypes.PriorityType]? = nil
        if let priorityOrderContainer = priorityOrderContainer {
            priorityOrderDecoded0 = [GameLiftClientTypes.PriorityType]()
            for enum0 in priorityOrderContainer {
                if let enum0 = enum0 {
                    priorityOrderDecoded0?.append(enum0)
                }
            }
        }
        priorityOrder = priorityOrderDecoded0
        let locationOrderContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .locationOrder)
        var locationOrderDecoded0:[Swift.String]? = nil
        if let locationOrderContainer = locationOrderContainer {
            locationOrderDecoded0 = [Swift.String]()
            for string0 in locationOrderContainer {
                if let string0 = string0 {
                    locationOrderDecoded0?.append(string0)
                }
            }
        }
        locationOrder = locationOrderDecoded0
    }
}

extension GameLiftClientTypes {
    /// Custom prioritization settings for use by a game session queue when placing new game sessions with available game servers. When defined, this configuration replaces the default FleetIQ prioritization process, which is as follows:
    ///
    /// * If player latency data is included in a game session request, destinations and locations are prioritized first based on lowest average latency (1), then on lowest hosting cost (2), then on destination list order (3), and finally on location (alphabetical) (4). This approach ensures that the queue's top priority is to place game sessions where average player latency is lowest, and--if latency is the same--where the hosting cost is less, etc.
    ///
    /// * If player latency data is not included, destinations and locations are prioritized first on destination list order (1), and then on location (alphabetical) (2). This approach ensures that the queue's top priority is to place game sessions on the first destination fleet listed. If that fleet has multiple locations, the game session is placed on the first location (when listed alphabetically).
    ///
    ///
    /// Changing the priority order will affect how game sessions are placed.
    public struct PriorityConfiguration: Swift.Equatable {
        /// The prioritization order to use for fleet locations, when the PriorityOrder property includes LOCATION. Locations are identified by Amazon Web Services Region codes such as us-west-2. Each location can only be listed once.
        public var locationOrder: [Swift.String]?
        /// The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.
        ///
        /// * LATENCY -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest.
        ///
        /// * COST -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.
        ///
        /// * DESTINATION -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.
        ///
        /// * LOCATION -- FleetIQ prioritizes based on the provided order of locations, as defined in LocationOrder.
        public var priorityOrder: [GameLiftClientTypes.PriorityType]?

        public init (
            locationOrder: [Swift.String]? = nil,
            priorityOrder: [GameLiftClientTypes.PriorityType]? = nil
        )
        {
            self.locationOrder = locationOrder
            self.priorityOrder = priorityOrder
        }
    }

}

extension GameLiftClientTypes {
    public enum PriorityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cost
        case destination
        case latency
        case location
        case sdkUnknown(Swift.String)

        public static var allCases: [PriorityType] {
            return [
                .cost,
                .destination,
                .latency,
                .location,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cost: return "COST"
            case .destination: return "DESTINATION"
            case .latency: return "LATENCY"
            case .location: return "LOCATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PriorityType(rawValue: rawValue) ?? PriorityType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes {
    public enum ProtectionPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullprotection
        case noprotection
        case sdkUnknown(Swift.String)

        public static var allCases: [ProtectionPolicy] {
            return [
                .fullprotection,
                .noprotection,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullprotection: return "FullProtection"
            case .noprotection: return "NoProtection"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProtectionPolicy(rawValue: rawValue) ?? ProtectionPolicy.sdkUnknown(rawValue)
        }
    }
}

extension PutScalingPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = self.scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let targetConfiguration = self.targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }
}

extension PutScalingPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutScalingPolicyInput: Swift.Equatable {
    /// Comparison operator to use when measuring the metric against the threshold value.
    public var comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
    /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
    public var evaluationPeriods: Swift.Int?
    /// A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.
    /// This member is required.
    public var fleetId: Swift.String?
    /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).
    ///
    /// * ActivatingGameSessions -- Game sessions in the process of being created.
    ///
    /// * ActiveGameSessions -- Game sessions that are currently running.
    ///
    /// * ActiveInstances -- Fleet instances that are currently running at least one game session.
    ///
    /// * AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.
    ///
    /// * AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.
    ///
    /// * CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.
    ///
    /// * IdleInstances -- Active instances that are currently hosting zero game sessions.
    ///
    /// * PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.
    ///
    /// * PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.
    ///
    /// * QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    ///
    /// * WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    /// This member is required.
    public var metricName: GameLiftClientTypes.MetricName?
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
    /// This member is required.
    public var name: Swift.String?
    /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
    public var policyType: GameLiftClientTypes.PolicyType?
    /// Amount of adjustment to make, based on the scaling adjustment type.
    public var scalingAdjustment: Swift.Int
    /// The type of adjustment to make to a fleet's instance count:
    ///
    /// * ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.
    ///
    /// * ExactCapacity -- set the instance count to the scaling adjustment value.
    ///
    /// * PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.
    public var scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
    /// An object that contains settings for a target-based scaling policy.
    public var targetConfiguration: GameLiftClientTypes.TargetConfiguration?
    /// Metric value used to trigger a scaling event.
    public var threshold: Swift.Double

    public init (
        comparisonOperator: GameLiftClientTypes.ComparisonOperatorType? = nil,
        evaluationPeriods: Swift.Int? = nil,
        fleetId: Swift.String? = nil,
        metricName: GameLiftClientTypes.MetricName? = nil,
        name: Swift.String? = nil,
        policyType: GameLiftClientTypes.PolicyType? = nil,
        scalingAdjustment: Swift.Int = 0,
        scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType? = nil,
        targetConfiguration: GameLiftClientTypes.TargetConfiguration? = nil,
        threshold: Swift.Double = 0.0
    )
    {
        self.comparisonOperator = comparisonOperator
        self.evaluationPeriods = evaluationPeriods
        self.fleetId = fleetId
        self.metricName = metricName
        self.name = name
        self.policyType = policyType
        self.scalingAdjustment = scalingAdjustment
        self.scalingAdjustmentType = scalingAdjustmentType
        self.targetConfiguration = targetConfiguration
        self.threshold = threshold
    }
}

struct PutScalingPolicyInputBody: Swift.Equatable {
    let name: Swift.String?
    let fleetId: Swift.String?
    let scalingAdjustment: Swift.Int
    let scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
    let threshold: Swift.Double
    let comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
    let evaluationPeriods: Swift.Int?
    let metricName: GameLiftClientTypes.MetricName?
    let policyType: GameLiftClientTypes.PolicyType?
    let targetConfiguration: GameLiftClientTypes.TargetConfiguration?
}

extension PutScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetId = "FleetId"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment) ?? 0
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold) ?? 0.0
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
    }
}

extension PutScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.name = output.name
        } else {
            self.name = nil
        }
    }
}

public struct PutScalingPolicyOutputResponse: Swift.Equatable {
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct PutScalingPolicyOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
}

extension PutScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension RegisterComputeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePath = "CertificatePath"
        case computeName = "ComputeName"
        case dnsName = "DnsName"
        case fleetId = "FleetId"
        case ipAddress = "IpAddress"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificatePath = self.certificatePath {
            try encodeContainer.encode(certificatePath, forKey: .certificatePath)
        }
        if let computeName = self.computeName {
            try encodeContainer.encode(computeName, forKey: .computeName)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension RegisterComputeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterComputeInput: Swift.Equatable {
    /// The path to the TLS certificate on your compute resource. The path and certificate are not validated by GameLift.
    public var certificatePath: Swift.String?
    /// A descriptive label that is associated with the compute resource registered to your fleet.
    /// This member is required.
    public var computeName: Swift.String?
    /// The DNS name of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.
    public var dnsName: Swift.String?
    /// A unique identifier for the fleet to register the compute to. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The IP address of the compute resource. GameLift requires the DNS name or IP address to manage your compute resource.
    public var ipAddress: Swift.String?
    /// The name of the custom location you added to the fleet you are registering this compute resource to.
    public var location: Swift.String?

    public init (
        certificatePath: Swift.String? = nil,
        computeName: Swift.String? = nil,
        dnsName: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        ipAddress: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.certificatePath = certificatePath
        self.computeName = computeName
        self.dnsName = dnsName
        self.fleetId = fleetId
        self.ipAddress = ipAddress
        self.location = location
    }
}

struct RegisterComputeInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let computeName: Swift.String?
    let certificatePath: Swift.String?
    let dnsName: Swift.String?
    let ipAddress: Swift.String?
    let location: Swift.String?
}

extension RegisterComputeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePath = "CertificatePath"
        case computeName = "ComputeName"
        case dnsName = "DnsName"
        case fleetId = "FleetId"
        case ipAddress = "IpAddress"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let computeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computeName)
        computeName = computeNameDecoded
        let certificatePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePath)
        certificatePath = certificatePathDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension RegisterComputeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterComputeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterComputeOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterComputeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterComputeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.compute = output.compute
        } else {
            self.compute = nil
        }
    }
}

public struct RegisterComputeOutputResponse: Swift.Equatable {
    /// The details of the compute resource you registered to the specified fleet.
    public var compute: GameLiftClientTypes.Compute?

    public init (
        compute: GameLiftClientTypes.Compute? = nil
    )
    {
        self.compute = compute
    }
}

struct RegisterComputeOutputResponseBody: Swift.Equatable {
    let compute: GameLiftClientTypes.Compute?
}

extension RegisterComputeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compute = "Compute"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Compute.self, forKey: .compute)
        compute = computeDecoded
    }
}

extension RegisterGameServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionInfo = self.connectionInfo {
            try encodeContainer.encode(connectionInfo, forKey: .connectionInfo)
        }
        if let gameServerData = self.gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

extension RegisterGameServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterGameServerInput: Swift.Equatable {
    /// Information that is needed to make inbound client connections to the game server. This might include the IP address and port, DNS name, and other information.
    public var connectionInfo: Swift.String?
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to register. Game server IDs are developer-defined and must be unique across all game server groups in your Amazon Web Services account.
    /// This member is required.
    public var gameServerId: Swift.String?
    /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        connectionInfo: Swift.String? = nil,
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.connectionInfo = connectionInfo
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.instanceId = instanceId
    }
}

struct RegisterGameServerInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let gameServerId: Swift.String?
    let instanceId: Swift.String?
    let connectionInfo: Swift.String?
    let gameServerData: Swift.String?
}

extension RegisterGameServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let connectionInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionInfo)
        connectionInfo = connectionInfoDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
    }
}

extension RegisterGameServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterGameServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterGameServerOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterGameServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RegisterGameServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct RegisterGameServerOutputResponse: Swift.Equatable {
    /// Object that describes the newly registered game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init (
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct RegisterGameServerOutputResponseBody: Swift.Equatable {
    let gameServer: GameLiftClientTypes.GameServer?
}

extension RegisterGameServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

extension RequestUploadCredentialsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
    }
}

extension RequestUploadCredentialsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RequestUploadCredentialsInput: Swift.Equatable {
    /// A unique identifier for the build to get credentials for. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?

    public init (
        buildId: Swift.String? = nil
    )
    {
        self.buildId = buildId
    }
}

struct RequestUploadCredentialsInputBody: Swift.Equatable {
    let buildId: Swift.String?
}

extension RequestUploadCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
    }
}

extension RequestUploadCredentialsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RequestUploadCredentialsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RequestUploadCredentialsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestUploadCredentialsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestUploadCredentialsOutputResponse(storageLocation: \(Swift.String(describing: storageLocation)), uploadCredentials: \"CONTENT_REDACTED\")"}
}

extension RequestUploadCredentialsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RequestUploadCredentialsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storageLocation = output.storageLocation
            self.uploadCredentials = output.uploadCredentials
        } else {
            self.storageLocation = nil
            self.uploadCredentials = nil
        }
    }
}

public struct RequestUploadCredentialsOutputResponse: Swift.Equatable {
    /// Amazon S3 path and key, identifying where the game build files are stored.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// Amazon Web Services credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
    public var uploadCredentials: GameLiftClientTypes.AwsCredentials?

    public init (
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        uploadCredentials: GameLiftClientTypes.AwsCredentials? = nil
    )
    {
        self.storageLocation = storageLocation
        self.uploadCredentials = uploadCredentials
    }
}

struct RequestUploadCredentialsOutputResponseBody: Swift.Equatable {
    let uploadCredentials: GameLiftClientTypes.AwsCredentials?
    let storageLocation: GameLiftClientTypes.S3Location?
}

extension RequestUploadCredentialsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageLocation = "StorageLocation"
        case uploadCredentials = "UploadCredentials"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadCredentialsDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AwsCredentials.self, forKey: .uploadCredentials)
        uploadCredentials = uploadCredentialsDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

extension ResolveAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
    }
}

extension ResolveAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResolveAliasInput: Swift.Equatable {
    /// The unique identifier of the alias that you want to retrieve a fleet ID for. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?

    public init (
        aliasId: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
    }
}

struct ResolveAliasInputBody: Swift.Equatable {
    let aliasId: Swift.String?
}

extension ResolveAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
    }
}

extension ResolveAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResolveAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ResolveAliasOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResolveAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResolveAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct ResolveAliasOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet resource that this alias points to.
    public var fleetArn: Swift.String?
    /// The fleet identifier that the alias is pointing to.
    public var fleetId: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct ResolveAliasOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
}

extension ResolveAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension GameLiftClientTypes.ResourceCreationLimitPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newGameSessionsPerCreator = "NewGameSessionsPerCreator"
        case policyPeriodInMinutes = "PolicyPeriodInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let newGameSessionsPerCreator = self.newGameSessionsPerCreator {
            try encodeContainer.encode(newGameSessionsPerCreator, forKey: .newGameSessionsPerCreator)
        }
        if let policyPeriodInMinutes = self.policyPeriodInMinutes {
            try encodeContainer.encode(policyPeriodInMinutes, forKey: .policyPeriodInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let newGameSessionsPerCreatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .newGameSessionsPerCreator)
        newGameSessionsPerCreator = newGameSessionsPerCreatorDecoded
        let policyPeriodInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .policyPeriodInMinutes)
        policyPeriodInMinutes = policyPeriodInMinutesDecoded
    }
}

extension GameLiftClientTypes {
    /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
    public struct ResourceCreationLimitPolicy: Swift.Equatable {
        /// A policy that puts limits on the number of game sessions that a player can create within a specified span of time. With this policy, you can control players' ability to consume available resources. The policy is evaluated when a player tries to create a new game session. On receiving a CreateGameSession request, GameLift checks that the player (identified by CreatorId) has created fewer than game session limit in the specified time period.
        public var newGameSessionsPerCreator: Swift.Int?
        /// The time span used in evaluating the resource creation limit policy.
        public var policyPeriodInMinutes: Swift.Int?

        public init (
            newGameSessionsPerCreator: Swift.Int? = nil,
            policyPeriodInMinutes: Swift.Int? = nil
        )
        {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }
    }

}

extension ResumeGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case resumeActions = "ResumeActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let resumeActions = resumeActions {
            var resumeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resumeActions)
            for gameservergroupaction0 in resumeActions {
                try resumeActionsContainer.encode(gameservergroupaction0.rawValue)
            }
        }
    }
}

extension ResumeGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ResumeGameServerGroupInput: Swift.Equatable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The activity to resume for this game server group.
    /// This member is required.
    public var resumeActions: [GameLiftClientTypes.GameServerGroupAction]?

    public init (
        gameServerGroupName: Swift.String? = nil,
        resumeActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.resumeActions = resumeActions
    }
}

struct ResumeGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let resumeActions: [GameLiftClientTypes.GameServerGroupAction]?
}

extension ResumeGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case resumeActions = "ResumeActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let resumeActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerGroupAction?].self, forKey: .resumeActions)
        var resumeActionsDecoded0:[GameLiftClientTypes.GameServerGroupAction]? = nil
        if let resumeActionsContainer = resumeActionsContainer {
            resumeActionsDecoded0 = [GameLiftClientTypes.GameServerGroupAction]()
            for enum0 in resumeActionsContainer {
                if let enum0 = enum0 {
                    resumeActionsDecoded0?.append(enum0)
                }
            }
        }
        resumeActions = resumeActionsDecoded0
    }
}

extension ResumeGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResumeGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ResumeGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResumeGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct ResumeGameServerGroupOutputResponse: Swift.Equatable {
    /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the resumed activity.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct ResumeGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension ResumeGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension GameLiftClientTypes.RoutingStrategy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case message = "Message"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RoutingStrategyType.self, forKey: .type)
        type = typeDecoded
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes {
    /// The routing configuration for a fleet alias. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct RoutingStrategy: Swift.Equatable {
        /// A unique identifier for the fleet that the alias points to. This value is the fleet ID, not the fleet ARN.
        public var fleetId: Swift.String?
        /// The message text to be used with a terminal routing strategy.
        public var message: Swift.String?
        /// The type of routing strategy for the alias. Possible routing types include the following:
        ///
        /// * SIMPLE - The alias resolves to one specific fleet. Use this type when routing to active fleets.
        ///
        /// * TERMINAL - The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the message embedded.
        public var type: GameLiftClientTypes.RoutingStrategyType?

        public init (
            fleetId: Swift.String? = nil,
            message: Swift.String? = nil,
            type: GameLiftClientTypes.RoutingStrategyType? = nil
        )
        {
            self.fleetId = fleetId
            self.message = message
            self.type = type
        }
    }

}

extension GameLiftClientTypes {
    public enum RoutingStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case simple
        case terminal
        case sdkUnknown(Swift.String)

        public static var allCases: [RoutingStrategyType] {
            return [
                .simple,
                .terminal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .simple: return "SIMPLE"
            case .terminal: return "TERMINAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RoutingStrategyType(rawValue: rawValue) ?? RoutingStrategyType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.RuntimeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionActivationTimeoutSeconds = "GameSessionActivationTimeoutSeconds"
        case maxConcurrentGameSessionActivations = "MaxConcurrentGameSessionActivations"
        case serverProcesses = "ServerProcesses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionActivationTimeoutSeconds = self.gameSessionActivationTimeoutSeconds {
            try encodeContainer.encode(gameSessionActivationTimeoutSeconds, forKey: .gameSessionActivationTimeoutSeconds)
        }
        if let maxConcurrentGameSessionActivations = self.maxConcurrentGameSessionActivations {
            try encodeContainer.encode(maxConcurrentGameSessionActivations, forKey: .maxConcurrentGameSessionActivations)
        }
        if let serverProcesses = serverProcesses {
            var serverProcessesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serverProcesses)
            for serverprocess0 in serverProcesses {
                try serverProcessesContainer.encode(serverprocess0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverProcessesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.ServerProcess?].self, forKey: .serverProcesses)
        var serverProcessesDecoded0:[GameLiftClientTypes.ServerProcess]? = nil
        if let serverProcessesContainer = serverProcessesContainer {
            serverProcessesDecoded0 = [GameLiftClientTypes.ServerProcess]()
            for structure0 in serverProcessesContainer {
                if let structure0 = structure0 {
                    serverProcessesDecoded0?.append(structure0)
                }
            }
        }
        serverProcesses = serverProcessesDecoded0
        let maxConcurrentGameSessionActivationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentGameSessionActivations)
        maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivationsDecoded
        let gameSessionActivationTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gameSessionActivationTimeoutSeconds)
        gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSecondsDecoded
    }
}

extension GameLiftClientTypes {
    /// A collection of server process configurations that describe the set of processes to run on each instance in a fleet. Server processes run either an executable in a custom game build or a Realtime Servers script. GameLift launches the configured processes, manages their life cycle, and replaces them as needed. Each instance checks regularly for an updated runtime configuration. A GameLift instance is limited to 50 processes running concurrently. To calculate the total number of processes in a runtime configuration, add the values of the ConcurrentExecutions parameter for each server process. Learn more about [ Running Multiple Processes on a Fleet](https://docs.aws.amazon.com/gamelift/latest/developerguide/fleets-multiprocess.html).
    public struct RuntimeConfiguration: Swift.Equatable {
        /// The maximum amount of time (in seconds) allowed to launch a new game session and have it report ready to host players. During this time, the game session is in status ACTIVATING. If the game session does not become active before the timeout, it is ended and the game session status is changed to TERMINATED.
        public var gameSessionActivationTimeoutSeconds: Swift.Int?
        /// The number of game sessions in status ACTIVATING to allow on an instance. This setting limits the instance resources that can be used for new game activations at any one time.
        public var maxConcurrentGameSessionActivations: Swift.Int?
        /// A collection of server process configurations that identify what server processes to run on each instance in a fleet.
        public var serverProcesses: [GameLiftClientTypes.ServerProcess]?

        public init (
            gameSessionActivationTimeoutSeconds: Swift.Int? = nil,
            maxConcurrentGameSessionActivations: Swift.Int? = nil,
            serverProcesses: [GameLiftClientTypes.ServerProcess]? = nil
        )
        {
            self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
            self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
            self.serverProcesses = serverProcesses
        }
    }

}

extension GameLiftClientTypes.S3Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
        case objectVersion = "ObjectVersion"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let objectVersion = self.objectVersion {
            try encodeContainer.encode(objectVersion, forKey: .objectVersion)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let objectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectVersion)
        objectVersion = objectVersionDecoded
    }
}

extension GameLiftClientTypes {
    /// The location in Amazon S3 where build or script files are stored for access by Amazon GameLift.
    public struct S3Location: Swift.Equatable {
        /// An Amazon S3 bucket identifier. Thename of the S3 bucket. GameLift doesn't support uploading from Amazon S3 buckets with names that contain a dot (.).
        public var bucket: Swift.String?
        /// The name of the zip file that contains the build files or script files.
        public var key: Swift.String?
        /// The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from an S3 bucket that you own. Use this parameter to specify a specific version of the file. If not set, the latest version of the file is retrieved.
        public var objectVersion: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access the S3 bucket.
        public var roleArn: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            objectVersion: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.objectVersion = objectVersion
            self.roleArn = roleArn
        }
    }

}

extension GameLiftClientTypes {
    public enum ScalingAdjustmentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case changeincapacity
        case exactcapacity
        case percentchangeincapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingAdjustmentType] {
            return [
                .changeincapacity,
                .exactcapacity,
                .percentchangeincapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .changeincapacity: return "ChangeInCapacity"
            case .exactcapacity: return "ExactCapacity"
            case .percentchangeincapacity: return "PercentChangeInCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingAdjustmentType(rawValue: rawValue) ?? ScalingAdjustmentType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.ScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case status = "Status"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = self.scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetConfiguration = self.targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingStatusType.self, forKey: .status)
        status = statusDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment) ?? 0
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold) ?? 0.0
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension GameLiftClientTypes {
    /// Rule that controls how a fleet is scaled. Scaling policies are uniquely identified by the combination of name and fleet ID.
    public struct ScalingPolicy: Swift.Equatable {
        /// Comparison operator to use when measuring a metric against the threshold value.
        public var comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public var evaluationPeriods: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that is associated with this scaling policy.
        public var fleetId: Swift.String?
        /// The fleet location.
        public var location: Swift.String?
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).
        ///
        /// * ActivatingGameSessions -- Game sessions in the process of being created.
        ///
        /// * ActiveGameSessions -- Game sessions that are currently running.
        ///
        /// * ActiveInstances -- Fleet instances that are currently running at least one game session.
        ///
        /// * AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.
        ///
        /// * AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.
        ///
        /// * CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.
        ///
        /// * IdleInstances -- Active instances that are currently hosting zero game sessions.
        ///
        /// * PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.
        ///
        /// * PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.
        ///
        /// * QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        ///
        /// * WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        public var metricName: GameLiftClientTypes.MetricName?
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
        public var name: Swift.String?
        /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public var policyType: GameLiftClientTypes.PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public var scalingAdjustment: Swift.Int
        /// The type of adjustment to make to a fleet's instance count.
        ///
        /// * ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.
        ///
        /// * ExactCapacity -- set the instance count to the scaling adjustment value.
        ///
        /// * PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.
        public var scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
        /// Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets. If the policy is suspended for a fleet, the policy status does not change.
        ///
        /// * ACTIVE -- The scaling policy can be used for auto-scaling a fleet.
        ///
        /// * UPDATE_REQUESTED -- A request to update the scaling policy has been received.
        ///
        /// * UPDATING -- A change is being made to the scaling policy.
        ///
        /// * DELETE_REQUESTED -- A request to delete the scaling policy has been received.
        ///
        /// * DELETING -- The scaling policy is being deleted.
        ///
        /// * DELETED -- The scaling policy has been deleted.
        ///
        /// * ERROR -- An error occurred in creating the policy. It should be removed and recreated.
        public var status: GameLiftClientTypes.ScalingStatusType?
        /// An object that contains settings for a target-based scaling policy.
        public var targetConfiguration: GameLiftClientTypes.TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public var threshold: Swift.Double
        /// The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
        public var updateStatus: GameLiftClientTypes.LocationUpdateStatus?

        public init (
            comparisonOperator: GameLiftClientTypes.ComparisonOperatorType? = nil,
            evaluationPeriods: Swift.Int? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            location: Swift.String? = nil,
            metricName: GameLiftClientTypes.MetricName? = nil,
            name: Swift.String? = nil,
            policyType: GameLiftClientTypes.PolicyType? = nil,
            scalingAdjustment: Swift.Int = 0,
            scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType? = nil,
            status: GameLiftClientTypes.ScalingStatusType? = nil,
            targetConfiguration: GameLiftClientTypes.TargetConfiguration? = nil,
            threshold: Swift.Double = 0.0,
            updateStatus: GameLiftClientTypes.LocationUpdateStatus? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.status = status
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
            self.updateStatus = updateStatus
        }
    }

}

extension GameLiftClientTypes {
    public enum ScalingStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case deleteRequested
        case deleting
        case error
        case updateRequested
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingStatusType] {
            return [
                .active,
                .deleted,
                .deleteRequested,
                .deleting,
                .error,
                .updateRequested,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case .deleteRequested: return "DELETE_REQUESTED"
            case .deleting: return "DELETING"
            case .error: return "ERROR"
            case .updateRequested: return "UPDATE_REQUESTED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingStatusType(rawValue: rawValue) ?? ScalingStatusType.sdkUnknown(rawValue)
        }
    }
}

extension GameLiftClientTypes.Script: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case name = "Name"
        case scriptArn = "ScriptArn"
        case scriptId = "ScriptId"
        case sizeOnDisk = "SizeOnDisk"
        case storageLocation = "StorageLocation"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptArn = self.scriptArn {
            try encodeContainer.encode(scriptArn, forKey: .scriptArn)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let sizeOnDisk = self.sizeOnDisk {
            try encodeContainer.encode(sizeOnDisk, forKey: .sizeOnDisk)
        }
        if let storageLocation = self.storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let scriptArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptArn)
        scriptArn = scriptArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let sizeOnDiskDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeOnDisk)
        sizeOnDisk = sizeOnDiskDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
    }
}

extension GameLiftClientTypes {
    /// Properties describing a Realtime script. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Script: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A descriptive label that is associated with a script. Script names do not need to be unique.
        public var name: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the ScriptId value.
        public var scriptArn: Swift.String?
        /// A unique identifier for the Realtime script
        public var scriptId: Swift.String?
        /// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
        public var sizeOnDisk: Swift.Int?
        /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
        public var storageLocation: GameLiftClientTypes.S3Location?
        /// Version information associated with a build or script. Version strings do not need to be unique.
        public var version: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            scriptArn: Swift.String? = nil,
            scriptId: Swift.String? = nil,
            sizeOnDisk: Swift.Int? = nil,
            storageLocation: GameLiftClientTypes.S3Location? = nil,
            version: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.name = name
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.sizeOnDisk = sizeOnDisk
            self.storageLocation = storageLocation
            self.version = version
        }
    }

}

extension SearchGameSessionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let filterExpression = self.filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortExpression = self.sortExpression {
            try encodeContainer.encode(sortExpression, forKey: .sortExpression)
        }
    }
}

extension SearchGameSessionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SearchGameSessionsInput: Swift.Equatable {
    /// A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var aliasId: Swift.String?
    /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:
    ///
    /// * Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.
    ///
    /// * Comparator -- Valid comparators are: =, <>, <, >, <=, >=.
    ///
    /// * Value -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and <>. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".
    ///
    ///
    /// To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:
    ///
    /// * =, <>, <, >, <=, >=
    ///
    /// * Parentheses
    ///
    /// * NOT
    ///
    /// * AND
    ///
    /// * OR
    ///
    ///
    /// For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions>=10 AND hasAvailablePlayerSessions=true".
    public var filterExpression: Swift.String?
    /// A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20.
    public var limit: Swift.Int?
    /// A fleet location to search for game sessions. You can specify a fleet's home Region or a remote location. Use the Amazon Web Services Region code format, such as us-west-2.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:
    ///
    /// * Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.
    ///
    /// * Order -- Valid sort orders are ASC (ascending) and DESC (descending).
    ///
    ///
    /// For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
    public var sortExpression: Swift.String?

    public init (
        aliasId: Swift.String? = nil,
        filterExpression: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortExpression: Swift.String? = nil
    )
    {
        self.aliasId = aliasId
        self.filterExpression = filterExpression
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.sortExpression = sortExpression
    }
}

struct SearchGameSessionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let aliasId: Swift.String?
    let location: Swift.String?
    let filterExpression: Swift.String?
    let sortExpression: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension SearchGameSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let sortExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sortExpression)
        sortExpression = sortExpressionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SearchGameSessionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchGameSessionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TerminalRoutingStrategyException" : self = .terminalRoutingStrategyException(try TerminalRoutingStrategyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SearchGameSessionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case terminalRoutingStrategyException(TerminalRoutingStrategyException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchGameSessionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SearchGameSessionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessions = output.gameSessions
            self.nextToken = output.nextToken
        } else {
            self.gameSessions = nil
            self.nextToken = nil
        }
    }
}

public struct SearchGameSessionsOutputResponse: Swift.Equatable {
    /// A collection of objects containing game session properties for each session that matches the request.
    public var gameSessions: [GameLiftClientTypes.GameSession]?
    /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
    public var nextToken: Swift.String?

    public init (
        gameSessions: [GameLiftClientTypes.GameSession]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.gameSessions = gameSessions
        self.nextToken = nextToken
    }
}

struct SearchGameSessionsOutputResponseBody: Swift.Equatable {
    let gameSessions: [GameLiftClientTypes.GameSession]?
    let nextToken: Swift.String?
}

extension SearchGameSessionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessions = "GameSessions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSession?].self, forKey: .gameSessions)
        var gameSessionsDecoded0:[GameLiftClientTypes.GameSession]? = nil
        if let gameSessionsContainer = gameSessionsContainer {
            gameSessionsDecoded0 = [GameLiftClientTypes.GameSession]()
            for structure0 in gameSessionsContainer {
                if let structure0 = structure0 {
                    gameSessionsDecoded0?.append(structure0)
                }
            }
        }
        gameSessions = gameSessionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GameLiftClientTypes.ServerProcess: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case concurrentExecutions = "ConcurrentExecutions"
        case launchPath = "LaunchPath"
        case parameters = "Parameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let concurrentExecutions = self.concurrentExecutions {
            try encodeContainer.encode(concurrentExecutions, forKey: .concurrentExecutions)
        }
        if let launchPath = self.launchPath {
            try encodeContainer.encode(launchPath, forKey: .launchPath)
        }
        if let parameters = self.parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchPath)
        launchPath = launchPathDecoded
        let parametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameters)
        parameters = parametersDecoded
        let concurrentExecutionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .concurrentExecutions)
        concurrentExecutions = concurrentExecutionsDecoded
    }
}

extension GameLiftClientTypes {
    /// A set of instructions for launching server processes on each instance in a fleet. Server processes run either an executable in a custom game build or a Realtime Servers script. Server process configurations are part of a fleet's runtime configuration.
    public struct ServerProcess: Swift.Equatable {
        /// The number of server processes using this configuration that run concurrently on each instance.
        /// This member is required.
        public var concurrentExecutions: Swift.Int?
        /// The location of a game build executable or the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:
        ///
        /// * Windows (custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"
        ///
        /// * Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
        /// This member is required.
        public var launchPath: Swift.String?
        /// An optional list of parameters to pass to the server executable or Realtime script on launch.
        public var parameters: Swift.String?

        public init (
            concurrentExecutions: Swift.Int? = nil,
            launchPath: Swift.String? = nil,
            parameters: Swift.String? = nil
        )
        {
            self.concurrentExecutions = concurrentExecutions
            self.launchPath = launchPath
            self.parameters = parameters
        }
    }

}

extension GameLiftClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension StartFleetActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for fleetaction0 in actions {
                try actionsContainer.encode(fleetaction0.rawValue)
            }
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension StartFleetActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartFleetActionsInput: Swift.Equatable {
    /// List of actions to restart on the fleet.
    /// This member is required.
    public var actions: [GameLiftClientTypes.FleetAction]?
    /// A unique identifier for the fleet to restart actions on. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to restart fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init (
        actions: [GameLiftClientTypes.FleetAction]? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

struct StartFleetActionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let actions: [GameLiftClientTypes.FleetAction]?
    let location: Swift.String?
}

extension StartFleetActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetAction?].self, forKey: .actions)
        var actionsDecoded0:[GameLiftClientTypes.FleetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GameLiftClientTypes.FleetAction]()
            for enum0 in actionsContainer {
                if let enum0 = enum0 {
                    actionsDecoded0?.append(enum0)
                }
            }
        }
        actions = actionsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension StartFleetActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartFleetActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartFleetActionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartFleetActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartFleetActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct StartFleetActionsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet to restart actions on.
    public var fleetId: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct StartFleetActionsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
}

extension StartFleetActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension StartGameSessionPlacementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredPlayerSessions = desiredPlayerSessions {
            var desiredPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredPlayerSessions)
            for desiredplayersession0 in desiredPlayerSessions {
                try desiredPlayerSessionsContainer.encode(desiredplayersession0)
            }
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionName = self.gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = self.gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placementId = self.placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatency0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatency0)
            }
        }
    }
}

extension StartGameSessionPlacementInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartGameSessionPlacementInput: Swift.Equatable {
    /// Set of information on each player to create a player session for.
    public var desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the GameSession object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameSessionData: Swift.String?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var gameSessionName: Swift.String?
    /// Name of the queue to use to place the new game session. You can use either the queue name or ARN value.
    /// This member is required.
    public var gameSessionQueueName: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    /// This member is required.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all Regions and cannot be reused.
    /// This member is required.
    public var placementId: Swift.String?
    /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to Amazon Web Services Regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players.
    public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?

    public init (
        desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionName: Swift.String? = nil,
        gameSessionQueueName: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        placementId: Swift.String? = nil,
        playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil
    )
    {
        self.desiredPlayerSessions = desiredPlayerSessions
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placementId = placementId
        self.playerLatencies = playerLatencies
    }
}

struct StartGameSessionPlacementInputBody: Swift.Equatable {
    let placementId: Swift.String?
    let gameSessionQueueName: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let maximumPlayerSessionCount: Swift.Int?
    let gameSessionName: Swift.String?
    let playerLatencies: [GameLiftClientTypes.PlayerLatency]?
    let desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]?
    let gameSessionData: Swift.String?
}

extension StartGameSessionPlacementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementId)
        placementId = placementIdDecoded
        let gameSessionQueueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionQueueName)
        gameSessionQueueName = gameSessionQueueNameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let gameSessionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionName)
        gameSessionName = gameSessionNameDecoded
        let playerLatenciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerLatency?].self, forKey: .playerLatencies)
        var playerLatenciesDecoded0:[GameLiftClientTypes.PlayerLatency]? = nil
        if let playerLatenciesContainer = playerLatenciesContainer {
            playerLatenciesDecoded0 = [GameLiftClientTypes.PlayerLatency]()
            for structure0 in playerLatenciesContainer {
                if let structure0 = structure0 {
                    playerLatenciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencies = playerLatenciesDecoded0
        let desiredPlayerSessionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.DesiredPlayerSession?].self, forKey: .desiredPlayerSessions)
        var desiredPlayerSessionsDecoded0:[GameLiftClientTypes.DesiredPlayerSession]? = nil
        if let desiredPlayerSessionsContainer = desiredPlayerSessionsContainer {
            desiredPlayerSessionsDecoded0 = [GameLiftClientTypes.DesiredPlayerSession]()
            for structure0 in desiredPlayerSessionsContainer {
                if let structure0 = structure0 {
                    desiredPlayerSessionsDecoded0?.append(structure0)
                }
            }
        }
        desiredPlayerSessions = desiredPlayerSessionsDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
    }
}

extension StartGameSessionPlacementOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartGameSessionPlacementOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartGameSessionPlacementOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartGameSessionPlacementOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

public struct StartGameSessionPlacementOutputResponse: Swift.Equatable {
    /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init (
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct StartGameSessionPlacementOutputResponseBody: Swift.Equatable {
    let gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?
}

extension StartGameSessionPlacementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

extension StartMatchBackfillInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationName = self.configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let gameSessionArn = self.gameSessionArn {
            try encodeContainer.encode(gameSessionArn, forKey: .gameSessionArn)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for player0 in players {
                try playersContainer.encode(player0)
            }
        }
        if let ticketId = self.ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

extension StartMatchBackfillInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMatchBackfillInput: Swift.Equatable {
    /// Name of the matchmaker to use for this request. You can use either the configuration name or ARN value. The ARN of the matchmaker that was used with the original game session is listed in the GameSession object, MatchmakerData property.
    /// This member is required.
    public var configurationName: Swift.String?
    /// A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking solution, this parameter is not needed.
    public var gameSessionArn: Swift.String?
    /// Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game. You can include up to 199 Players in a StartMatchBackfill request.
    ///
    /// * PlayerID, PlayerAttributes, Team -- This information is maintained in the GameSession object, MatchmakerData property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see [ Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data). The backfill request must specify the team membership for every player. Do not specify team if you are not using backfill.
    ///
    /// * LatencyInMs -- If the matchmaker uses player latency, include a latency value, in milliseconds, for the Region that the game session is currently in. Do not include latency values for any other Region.
    /// This member is required.
    public var players: [GameLiftClientTypes.Player]?
    /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.
    public var ticketId: Swift.String?

    public init (
        configurationName: Swift.String? = nil,
        gameSessionArn: Swift.String? = nil,
        players: [GameLiftClientTypes.Player]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.configurationName = configurationName
        self.gameSessionArn = gameSessionArn
        self.players = players
        self.ticketId = ticketId
    }
}

struct StartMatchBackfillInputBody: Swift.Equatable {
    let ticketId: Swift.String?
    let configurationName: Swift.String?
    let gameSessionArn: Swift.String?
    let players: [GameLiftClientTypes.Player]?
}

extension StartMatchBackfillInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let playersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Player?].self, forKey: .players)
        var playersDecoded0:[GameLiftClientTypes.Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [GameLiftClientTypes.Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
    }
}

extension StartMatchBackfillOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMatchBackfillOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartMatchBackfillOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMatchBackfillOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartMatchBackfillOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.matchmakingTicket = output.matchmakingTicket
        } else {
            self.matchmakingTicket = nil
        }
    }
}

public struct StartMatchBackfillOutputResponse: Swift.Equatable {
    /// Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.
    public var matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?

    public init (
        matchmakingTicket: GameLiftClientTypes.MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

struct StartMatchBackfillOutputResponseBody: Swift.Equatable {
    let matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?
}

extension StartMatchBackfillOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchmakingTicket = "MatchmakingTicket"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchmakingTicketDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingTicket.self, forKey: .matchmakingTicket)
        matchmakingTicket = matchmakingTicketDecoded
    }
}

extension StartMatchmakingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationName = "ConfigurationName"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationName = self.configurationName {
            try encodeContainer.encode(configurationName, forKey: .configurationName)
        }
        if let players = players {
            var playersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .players)
            for player0 in players {
                try playersContainer.encode(player0)
            }
        }
        if let ticketId = self.ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

extension StartMatchmakingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartMatchmakingInput: Swift.Equatable {
    /// Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value.
    /// This member is required.
    public var configurationName: Swift.String?
    /// Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, Player objects contain the name of the team the player is assigned to. You can include up to 10 Players in a StartMatchmaking request.
    /// This member is required.
    public var players: [GameLiftClientTypes.Player]?
    /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.
    public var ticketId: Swift.String?

    public init (
        configurationName: Swift.String? = nil,
        players: [GameLiftClientTypes.Player]? = nil,
        ticketId: Swift.String? = nil
    )
    {
        self.configurationName = configurationName
        self.players = players
        self.ticketId = ticketId
    }
}

struct StartMatchmakingInputBody: Swift.Equatable {
    let ticketId: Swift.String?
    let configurationName: Swift.String?
    let players: [GameLiftClientTypes.Player]?
}

extension StartMatchmakingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationName = "ConfigurationName"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let playersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Player?].self, forKey: .players)
        var playersDecoded0:[GameLiftClientTypes.Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [GameLiftClientTypes.Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
    }
}

extension StartMatchmakingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMatchmakingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartMatchmakingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMatchmakingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartMatchmakingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.matchmakingTicket = output.matchmakingTicket
        } else {
            self.matchmakingTicket = nil
        }
    }
}

public struct StartMatchmakingOutputResponse: Swift.Equatable {
    /// Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.
    public var matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?

    public init (
        matchmakingTicket: GameLiftClientTypes.MatchmakingTicket? = nil
    )
    {
        self.matchmakingTicket = matchmakingTicket
    }
}

struct StartMatchmakingOutputResponseBody: Swift.Equatable {
    let matchmakingTicket: GameLiftClientTypes.MatchmakingTicket?
}

extension StartMatchmakingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchmakingTicket = "MatchmakingTicket"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchmakingTicketDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingTicket.self, forKey: .matchmakingTicket)
        matchmakingTicket = matchmakingTicketDecoded
    }
}

extension StopFleetActionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for fleetaction0 in actions {
                try actionsContainer.encode(fleetaction0.rawValue)
            }
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
    }
}

extension StopFleetActionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopFleetActionsInput: Swift.Equatable {
    /// List of actions to suspend on the fleet.
    /// This member is required.
    public var actions: [GameLiftClientTypes.FleetAction]?
    /// A unique identifier for the fleet to stop actions on. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The fleet location to stop fleet actions for. Specify a location in the form of an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init (
        actions: [GameLiftClientTypes.FleetAction]? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.actions = actions
        self.fleetId = fleetId
        self.location = location
    }
}

struct StopFleetActionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let actions: [GameLiftClientTypes.FleetAction]?
    let location: Swift.String?
}

extension StopFleetActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.FleetAction?].self, forKey: .actions)
        var actionsDecoded0:[GameLiftClientTypes.FleetAction]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GameLiftClientTypes.FleetAction]()
            for enum0 in actionsContainer {
                if let enum0 = enum0 {
                    actionsDecoded0?.append(enum0)
                }
            }
        }
        actions = actionsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension StopFleetActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopFleetActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopFleetActionsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopFleetActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopFleetActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct StopFleetActionsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet to stop actions on.
    public var fleetId: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct StopFleetActionsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
}

extension StopFleetActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension StopGameSessionPlacementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case placementId = "PlacementId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let placementId = self.placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
    }
}

extension StopGameSessionPlacementInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopGameSessionPlacementInput: Swift.Equatable {
    /// A unique identifier for a game session placement to stop.
    /// This member is required.
    public var placementId: Swift.String?

    public init (
        placementId: Swift.String? = nil
    )
    {
        self.placementId = placementId
    }
}

struct StopGameSessionPlacementInputBody: Swift.Equatable {
    let placementId: Swift.String?
}

extension StopGameSessionPlacementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case placementId = "PlacementId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementId)
        placementId = placementIdDecoded
    }
}

extension StopGameSessionPlacementOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopGameSessionPlacementOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopGameSessionPlacementOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopGameSessionPlacementOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopGameSessionPlacementOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionPlacement = output.gameSessionPlacement
        } else {
            self.gameSessionPlacement = nil
        }
    }
}

public struct StopGameSessionPlacementOutputResponse: Swift.Equatable {
    /// Object that describes the canceled game session placement, with CANCELLED status and an end time stamp.
    public var gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?

    public init (
        gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement? = nil
    )
    {
        self.gameSessionPlacement = gameSessionPlacement
    }
}

struct StopGameSessionPlacementOutputResponseBody: Swift.Equatable {
    let gameSessionPlacement: GameLiftClientTypes.GameSessionPlacement?
}

extension StopGameSessionPlacementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionPlacement = "GameSessionPlacement"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionPlacementDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionPlacement.self, forKey: .gameSessionPlacement)
        gameSessionPlacement = gameSessionPlacementDecoded
    }
}

extension StopMatchmakingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ticketId = "TicketId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ticketId = self.ticketId {
            try encodeContainer.encode(ticketId, forKey: .ticketId)
        }
    }
}

extension StopMatchmakingInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopMatchmakingInput: Swift.Equatable {
    /// A unique identifier for a matchmaking ticket.
    /// This member is required.
    public var ticketId: Swift.String?

    public init (
        ticketId: Swift.String? = nil
    )
    {
        self.ticketId = ticketId
    }
}

struct StopMatchmakingInputBody: Swift.Equatable {
    let ticketId: Swift.String?
}

extension StopMatchmakingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ticketId = "TicketId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
    }
}

extension StopMatchmakingOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopMatchmakingOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopMatchmakingOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopMatchmakingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopMatchmakingOutputResponse: Swift.Equatable {

    public init () { }
}

extension SuspendGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case suspendActions = "SuspendActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let suspendActions = suspendActions {
            var suspendActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suspendActions)
            for gameservergroupaction0 in suspendActions {
                try suspendActionsContainer.encode(gameservergroupaction0.rawValue)
            }
        }
    }
}

extension SuspendGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SuspendGameServerGroupInput: Swift.Equatable {
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// The activity to suspend for this game server group.
    /// This member is required.
    public var suspendActions: [GameLiftClientTypes.GameServerGroupAction]?

    public init (
        gameServerGroupName: Swift.String? = nil,
        suspendActions: [GameLiftClientTypes.GameServerGroupAction]? = nil
    )
    {
        self.gameServerGroupName = gameServerGroupName
        self.suspendActions = suspendActions
    }
}

struct SuspendGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let suspendActions: [GameLiftClientTypes.GameServerGroupAction]?
}

extension SuspendGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroupName = "GameServerGroupName"
        case suspendActions = "SuspendActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let suspendActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerGroupAction?].self, forKey: .suspendActions)
        var suspendActionsDecoded0:[GameLiftClientTypes.GameServerGroupAction]? = nil
        if let suspendActionsContainer = suspendActionsContainer {
            suspendActionsDecoded0 = [GameLiftClientTypes.GameServerGroupAction]()
            for enum0 in suspendActionsContainer {
                if let enum0 = enum0 {
                    suspendActionsDecoded0?.append(enum0)
                }
            }
        }
        suspendActions = suspendActionsDecoded0
    }
}

extension SuspendGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SuspendGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SuspendGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: SuspendGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct SuspendGameServerGroupOutputResponse: Swift.Equatable {
    /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the suspended activity.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct SuspendGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension SuspendGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension GameLiftClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension GameLiftClientTypes {
    /// A label that can be assigned to a GameLift resource. Learn more [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference [ Amazon Web Services Tagging Strategies](http://aws.amazon.com/answers/account-management/aws-tagging-strategies/) Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct Tag: Swift.Equatable {
        /// The key for a developer-defined key:value pair for tagging an Amazon Web Services resource.
        /// This member is required.
        public var key: Swift.String?
        /// The value for a developer-defined key:value pair for tagging an Amazon Web Services resource.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to and uniquely identifies the GameLift resource that you want to assign tags to. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of one or more tags to assign to the specified GameLift resource. Tags are developer-defined and structured as key-value pairs. The maximum tag limit may be lower than stated. See [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) for actual tagging limits.
    /// This member is required.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        resourceARN: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tags: [GameLiftClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension TaggingFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TaggingFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested tagging operation did not succeed. This may be due to invalid tag format or the maximum tag limit may have been exceeded. Resolve the issue before retrying.
public struct TaggingFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TaggingFailedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TaggingFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes.TargetConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if targetValue != 0.0 {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue) ?? 0.0
        targetValue = targetValueDecoded
    }
}

extension GameLiftClientTypes {
    /// Settings for a target-based scaling policy. A target-based policy tracks a particular fleet metric specifies a target value for the metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so that the metric returns to the target value. The target configuration specifies settings as needed for the target based policy, including the target value.
    public struct TargetConfiguration: Swift.Equatable {
        /// Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
        /// This member is required.
        public var targetValue: Swift.Double

        public init (
            targetValue: Swift.Double = 0.0
        )
        {
            self.targetValue = targetValue
        }
    }

}

extension GameLiftClientTypes.TargetTrackingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetValue = self.targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Settings for a target-based scaling policy as part of a [GameServerGroupAutoScalingPolicy](https://docs.aws.amazon.com/gamelift/latest/apireference/API_GameServerGroupAutoScalingPolicy.html) . These settings are used to create a target-based policy that tracks the GameLift FleetIQ metric "PercentUtilizedGameServers" and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
    public struct TargetTrackingConfiguration: Swift.Equatable {
        /// Desired value to use with a game server group target-based scaling policy.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            targetValue: Swift.Double? = nil
        )
        {
            self.targetValue = targetValue
        }
    }

}

extension TerminalRoutingStrategyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TerminalRoutingStrategyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service is unable to resolve the routing for a particular alias because it has a terminal RoutingStrategy associated with it. The message returned in this exception is the message defined in the routing strategy itself. Such requests should only be retried if the routing strategy for the specified alias is modified.
public struct TerminalRoutingStrategyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TerminalRoutingStrategyExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TerminalRoutingStrategyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnauthorizedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnauthorizedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The client failed authentication. Clients should not retry such requests.
public struct UnauthorizedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnauthorizedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnauthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedRegionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedRegionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested operation is not supported in the Region specified.
public struct UnsupportedRegionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedRegionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedRegionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to and uniquely identifies the GameLift resource that you want to remove tags from. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of one or more tag keys to remove from the specified GameLift resource. An Amazon Web Services resource can have only one tag with a specific tag key, so specifying the tag key identifies which tag to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceARN: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceARN = "ResourceARN"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaggingFailedException" : self = .taggingFailedException(try TaggingFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case taggingFailedException(TaggingFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateAliasInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliasId = self.aliasId {
            try encodeContainer.encode(aliasId, forKey: .aliasId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingStrategy = self.routingStrategy {
            try encodeContainer.encode(routingStrategy, forKey: .routingStrategy)
        }
    }
}

extension UpdateAliasInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAliasInput: Swift.Equatable {
    /// A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.
    /// This member is required.
    public var aliasId: Swift.String?
    /// A human-readable description of the alias.
    public var description: Swift.String?
    /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
    public var name: Swift.String?
    /// The routing configuration, including routing type and fleet target, for the alias.
    public var routingStrategy: GameLiftClientTypes.RoutingStrategy?

    public init (
        aliasId: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        routingStrategy: GameLiftClientTypes.RoutingStrategy? = nil
    )
    {
        self.aliasId = aliasId
        self.description = description
        self.name = name
        self.routingStrategy = routingStrategy
    }
}

struct UpdateAliasInputBody: Swift.Equatable {
    let aliasId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let routingStrategy: GameLiftClientTypes.RoutingStrategy?
}

extension UpdateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case description = "Description"
        case name = "Name"
        case routingStrategy = "RoutingStrategy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let routingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RoutingStrategy.self, forKey: .routingStrategy)
        routingStrategy = routingStrategyDecoded
    }
}

extension UpdateAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateAliasOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
        } else {
            self.alias = nil
        }
    }
}

public struct UpdateAliasOutputResponse: Swift.Equatable {
    /// The updated alias resource.
    public var alias: GameLiftClientTypes.Alias?

    public init (
        alias: GameLiftClientTypes.Alias? = nil
    )
    {
        self.alias = alias
    }
}

struct UpdateAliasOutputResponseBody: Swift.Equatable {
    let alias: GameLiftClientTypes.Alias?
}

extension UpdateAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Alias.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension UpdateBuildInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension UpdateBuildInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateBuildInput: Swift.Equatable {
    /// A unique identifier for the build to update. You can use either the build ID or ARN value.
    /// This member is required.
    public var buildId: Swift.String?
    /// A descriptive label associated with a build. Build names do not need to be unique.
    public var name: Swift.String?
    /// Version information associated with a build or script. Version strings do not need to be unique.
    public var version: Swift.String?

    public init (
        buildId: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.buildId = buildId
        self.name = name
        self.version = version
    }
}

struct UpdateBuildInputBody: Swift.Equatable {
    let buildId: Swift.String?
    let name: Swift.String?
    let version: Swift.String?
}

extension UpdateBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
        case name = "Name"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildId)
        buildId = buildIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension UpdateBuildOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBuildOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateBuildOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBuildOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateBuildOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.build = output.build
        } else {
            self.build = nil
        }
    }
}

public struct UpdateBuildOutputResponse: Swift.Equatable {
    /// The updated build resource.
    public var build: GameLiftClientTypes.Build?

    public init (
        build: GameLiftClientTypes.Build? = nil
    )
    {
        self.build = build
    }
}

struct UpdateBuildOutputResponseBody: Swift.Equatable {
    let build: GameLiftClientTypes.Build?
}

extension UpdateBuildOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case build = "Build"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let buildDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Build.self, forKey: .build)
        build = buildDecoded
    }
}

extension UpdateFleetAttributesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anywhereConfiguration = "AnywhereConfiguration"
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anywhereConfiguration = self.anywhereConfiguration {
            try encodeContainer.encode(anywhereConfiguration, forKey: .anywhereConfiguration)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgroup0 in metricGroups {
                try metricGroupsContainer.encode(metricgroup0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = self.newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let resourceCreationLimitPolicy = self.resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
    }
}

extension UpdateFleetAttributesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFleetAttributesInput: Swift.Equatable {
    /// GameLift Anywhere configuration options.
    public var anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
    /// A human-readable description of a fleet.
    public var description: Swift.String?
    /// A unique identifier for the fleet to update attribute metadata for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The name of a metric group to add this fleet to. Use a metric group in Amazon CloudWatch to aggregate the metrics from multiple fleets. Provide an existing metric group name, or create a new metric group by providing a new name. A fleet can only be in one metric group at a time.
    public var metricGroups: [Swift.String]?
    /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
    public var name: Swift.String?
    /// The game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using [UpdateGameSession](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateGameSession.html) .
    ///
    /// * NoProtection -- The game session can be terminated during a scale-down event.
    ///
    /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
    public var newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    /// Policy settings that limit the number of game sessions an individual player can create over a span of time.
    public var resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?

    public init (
        anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration? = nil,
        description: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        metricGroups: [Swift.String]? = nil,
        name: Swift.String? = nil,
        newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil,
        resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy? = nil
    )
    {
        self.anywhereConfiguration = anywhereConfiguration
        self.description = description
        self.fleetId = fleetId
        self.metricGroups = metricGroups
        self.name = name
        self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
    }
}

struct UpdateFleetAttributesInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    let resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
    let metricGroups: [Swift.String]?
    let anywhereConfiguration: GameLiftClientTypes.AnywhereConfiguration?
}

extension UpdateFleetAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anywhereConfiguration = "AnywhereConfiguration"
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[Swift.String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [Swift.String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
        let anywhereConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.AnywhereConfiguration.self, forKey: .anywhereConfiguration)
        anywhereConfiguration = anywhereConfigurationDecoded
    }
}

extension UpdateFleetAttributesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetAttributesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFleetAttributesOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetAttributesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFleetAttributesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct UpdateFleetAttributesOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct UpdateFleetAttributesOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
}

extension UpdateFleetAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension UpdateFleetCapacityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredInstances = "DesiredInstances"
        case fleetId = "FleetId"
        case location = "Location"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredInstances = self.desiredInstances {
            try encodeContainer.encode(desiredInstances, forKey: .desiredInstances)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let maxSize = self.maxSize {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if let minSize = self.minSize {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }
}

extension UpdateFleetCapacityInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFleetCapacityInput: Swift.Equatable {
    /// The number of Amazon EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.
    public var desiredInstances: Swift.Int?
    /// A unique identifier for the fleet to update capacity settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The name of a remote location to update fleet capacity settings for, in the form of an Amazon Web Services Region code such as us-west-2.
    public var location: Swift.String?
    /// The maximum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 1.
    public var maxSize: Swift.Int?
    /// The minimum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 0.
    public var minSize: Swift.Int?

    public init (
        desiredInstances: Swift.Int? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil
    )
    {
        self.desiredInstances = desiredInstances
        self.fleetId = fleetId
        self.location = location
        self.maxSize = maxSize
        self.minSize = minSize
    }
}

struct UpdateFleetCapacityInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let desiredInstances: Swift.Int?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let location: Swift.String?
}

extension UpdateFleetCapacityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredInstances = "DesiredInstances"
        case fleetId = "FleetId"
        case location = "Location"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let desiredInstancesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInstances)
        desiredInstances = desiredInstancesDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension UpdateFleetCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFleetCapacityOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFleetCapacityOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
            self.location = output.location
        } else {
            self.fleetArn = nil
            self.fleetId = nil
            self.location = nil
        }
    }
}

public struct UpdateFleetCapacityOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?
    /// The remote location being updated, expressed as an Amazon Web Services Region code, such as us-west-2.
    public var location: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil,
        location: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
        self.location = location
    }
}

struct UpdateFleetCapacityOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let location: Swift.String?
}

extension UpdateFleetCapacityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}

extension UpdateFleetPortSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
        case inboundPermissionRevocations = "InboundPermissionRevocations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let inboundPermissionAuthorizations = inboundPermissionAuthorizations {
            var inboundPermissionAuthorizationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inboundPermissionAuthorizations)
            for ippermission0 in inboundPermissionAuthorizations {
                try inboundPermissionAuthorizationsContainer.encode(ippermission0)
            }
        }
        if let inboundPermissionRevocations = inboundPermissionRevocations {
            var inboundPermissionRevocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inboundPermissionRevocations)
            for ippermission0 in inboundPermissionRevocations {
                try inboundPermissionRevocationsContainer.encode(ippermission0)
            }
        }
    }
}

extension UpdateFleetPortSettingsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateFleetPortSettingsInput: Swift.Equatable {
    /// A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// A collection of port settings to be added to the fleet resource.
    public var inboundPermissionAuthorizations: [GameLiftClientTypes.IpPermission]?
    /// A collection of port settings to be removed from the fleet resource.
    public var inboundPermissionRevocations: [GameLiftClientTypes.IpPermission]?

    public init (
        fleetId: Swift.String? = nil,
        inboundPermissionAuthorizations: [GameLiftClientTypes.IpPermission]? = nil,
        inboundPermissionRevocations: [GameLiftClientTypes.IpPermission]? = nil
    )
    {
        self.fleetId = fleetId
        self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
        self.inboundPermissionRevocations = inboundPermissionRevocations
    }
}

struct UpdateFleetPortSettingsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let inboundPermissionAuthorizations: [GameLiftClientTypes.IpPermission]?
    let inboundPermissionRevocations: [GameLiftClientTypes.IpPermission]?
}

extension UpdateFleetPortSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
        case inboundPermissionRevocations = "InboundPermissionRevocations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let inboundPermissionAuthorizationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.IpPermission?].self, forKey: .inboundPermissionAuthorizations)
        var inboundPermissionAuthorizationsDecoded0:[GameLiftClientTypes.IpPermission]? = nil
        if let inboundPermissionAuthorizationsContainer = inboundPermissionAuthorizationsContainer {
            inboundPermissionAuthorizationsDecoded0 = [GameLiftClientTypes.IpPermission]()
            for structure0 in inboundPermissionAuthorizationsContainer {
                if let structure0 = structure0 {
                    inboundPermissionAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissionAuthorizations = inboundPermissionAuthorizationsDecoded0
        let inboundPermissionRevocationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.IpPermission?].self, forKey: .inboundPermissionRevocations)
        var inboundPermissionRevocationsDecoded0:[GameLiftClientTypes.IpPermission]? = nil
        if let inboundPermissionRevocationsContainer = inboundPermissionRevocationsContainer {
            inboundPermissionRevocationsDecoded0 = [GameLiftClientTypes.IpPermission]()
            for structure0 in inboundPermissionRevocationsContainer {
                if let structure0 = structure0 {
                    inboundPermissionRevocationsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissionRevocations = inboundPermissionRevocationsDecoded0
    }
}

extension UpdateFleetPortSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFleetPortSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateFleetPortSettingsOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFleetPortSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateFleetPortSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.fleetArn = output.fleetArn
            self.fleetId = output.fleetId
        } else {
            self.fleetArn = nil
            self.fleetId = nil
        }
    }
}

public struct UpdateFleetPortSettingsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
    public var fleetArn: Swift.String?
    /// A unique identifier for the fleet that was updated.
    public var fleetId: Swift.String?

    public init (
        fleetArn: Swift.String? = nil,
        fleetId: Swift.String? = nil
    )
    {
        self.fleetArn = fleetArn
        self.fleetId = fleetId
    }
}

struct UpdateFleetPortSettingsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
}

extension UpdateFleetPortSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
    }
}

extension UpdateGameServerGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let balancingStrategy = self.balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = self.gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinition0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinition0)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension UpdateGameServerGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGameServerGroupInput: Swift.Equatable {
    /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:
    ///
    /// * SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.
    ///
    /// * SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.
    ///
    /// * ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
    public var balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    /// A unique identifier for the game server group. Use either the name or ARN value.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A flag that indicates whether instances in the game server group are protected from early termination. Unprotected instances that have active game servers running might be terminated during a scale-down event, causing players to be dropped from the game. Protected instances cannot be terminated while there are active game servers running except in the event of a forced game server group deletion (see ). An exception to this is with Spot Instances, which can be terminated by Amazon Web Services regardless of protection status. This property is set to NO_PROTECTION by default.
    public var gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    /// An updated list of Amazon EC2 instance types to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for the game server group. For more information on instance types, see [EC2 Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see [ Instance Weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) for an IAM role that allows Amazon GameLift to access your Amazon EC2 Auto Scaling groups.
    public var roleArn: Swift.String?

    public init (
        balancingStrategy: GameLiftClientTypes.BalancingStrategy? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy? = nil,
        instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.balancingStrategy = balancingStrategy
        self.gameServerGroupName = gameServerGroupName
        self.gameServerProtectionPolicy = gameServerProtectionPolicy
        self.instanceDefinitions = instanceDefinitions
        self.roleArn = roleArn
    }
}

struct UpdateGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let roleArn: Swift.String?
    let instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    let gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    let balancingStrategy: GameLiftClientTypes.BalancingStrategy?
}

extension UpdateGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[GameLiftClientTypes.InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [GameLiftClientTypes.InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
    }
}

extension UpdateGameServerGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameServerGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGameServerGroupOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameServerGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGameServerGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServerGroup = output.gameServerGroup
        } else {
            self.gameServerGroup = nil
        }
    }
}

public struct UpdateGameServerGroupOutputResponse: Swift.Equatable {
    /// An object that describes the game server group resource with updated properties.
    public var gameServerGroup: GameLiftClientTypes.GameServerGroup?

    public init (
        gameServerGroup: GameLiftClientTypes.GameServerGroup? = nil
    )
    {
        self.gameServerGroup = gameServerGroup
    }
}

struct UpdateGameServerGroupOutputResponseBody: Swift.Equatable {
    let gameServerGroup: GameLiftClientTypes.GameServerGroup?
}

extension UpdateGameServerGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerGroup = "GameServerGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroup.self, forKey: .gameServerGroup)
        gameServerGroup = gameServerGroupDecoded
    }
}

extension UpdateGameServerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case healthCheck = "HealthCheck"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameServerData = self.gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck.rawValue, forKey: .healthCheck)
        }
        if let utilizationStatus = self.utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }
}

extension UpdateGameServerInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGameServerInput: Swift.Equatable {
    /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers.
    public var gameServerData: Swift.String?
    /// A unique identifier for the game server group where the game server is running.
    /// This member is required.
    public var gameServerGroupName: Swift.String?
    /// A custom string that uniquely identifies the game server to update.
    /// This member is required.
    public var gameServerId: Swift.String?
    /// Indicates health status of the game server. A request that includes this parameter updates the game server's LastHealthCheckTime timestamp.
    public var healthCheck: GameLiftClientTypes.GameServerHealthCheck?
    /// Indicates whether the game server is available or is currently hosting gameplay.
    public var utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?

    public init (
        gameServerData: Swift.String? = nil,
        gameServerGroupName: Swift.String? = nil,
        gameServerId: Swift.String? = nil,
        healthCheck: GameLiftClientTypes.GameServerHealthCheck? = nil,
        utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus? = nil
    )
    {
        self.gameServerData = gameServerData
        self.gameServerGroupName = gameServerGroupName
        self.gameServerId = gameServerId
        self.healthCheck = healthCheck
        self.utilizationStatus = utilizationStatus
    }
}

struct UpdateGameServerInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let gameServerId: Swift.String?
    let gameServerData: Swift.String?
    let utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?
    let healthCheck: GameLiftClientTypes.GameServerHealthCheck?
}

extension UpdateGameServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServerData = "GameServerData"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case healthCheck = "HealthCheck"
        case utilizationStatus = "UtilizationStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
        let utilizationStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerUtilizationStatus.self, forKey: .utilizationStatus)
        utilizationStatus = utilizationStatusDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerHealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension UpdateGameServerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameServerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGameServerOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameServerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGameServerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameServer = output.gameServer
        } else {
            self.gameServer = nil
        }
    }
}

public struct UpdateGameServerOutputResponse: Swift.Equatable {
    /// Object that describes the newly updated game server.
    public var gameServer: GameLiftClientTypes.GameServer?

    public init (
        gameServer: GameLiftClientTypes.GameServer? = nil
    )
    {
        self.gameServer = gameServer
    }
}

struct UpdateGameServerOutputResponseBody: Swift.Equatable {
    let gameServer: GameLiftClientTypes.GameServer?
}

extension UpdateGameServerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameServer = "GameServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServer.self, forKey: .gameServer)
        gameServer = gameServerDecoded
    }
}

extension UpdateGameSessionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case protectionPolicy = "ProtectionPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gameSessionId = self.gameSessionId {
            try encodeContainer.encode(gameSessionId, forKey: .gameSessionId)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playerSessionCreationPolicy = self.playerSessionCreationPolicy {
            try encodeContainer.encode(playerSessionCreationPolicy.rawValue, forKey: .playerSessionCreationPolicy)
        }
        if let protectionPolicy = self.protectionPolicy {
            try encodeContainer.encode(protectionPolicy.rawValue, forKey: .protectionPolicy)
        }
    }
}

extension UpdateGameSessionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGameSessionInput: Swift.Equatable {
    /// A unique identifier for the game session to update.
    /// This member is required.
    public var gameSessionId: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var name: Swift.String?
    /// A policy that determines whether the game session is accepting new players.
    public var playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
    /// Game session protection policy to apply to this game session only.
    ///
    /// * NoProtection -- The game session can be terminated during a scale-down event.
    ///
    /// * FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
    public var protectionPolicy: GameLiftClientTypes.ProtectionPolicy?

    public init (
        gameSessionId: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        name: Swift.String? = nil,
        playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy? = nil,
        protectionPolicy: GameLiftClientTypes.ProtectionPolicy? = nil
    )
    {
        self.gameSessionId = gameSessionId
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.name = name
        self.playerSessionCreationPolicy = playerSessionCreationPolicy
        self.protectionPolicy = protectionPolicy
    }
}

struct UpdateGameSessionInputBody: Swift.Equatable {
    let gameSessionId: Swift.String?
    let maximumPlayerSessionCount: Swift.Int?
    let name: Swift.String?
    let playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
    let protectionPolicy: GameLiftClientTypes.ProtectionPolicy?
}

extension UpdateGameSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionId = "GameSessionId"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
        case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
        case protectionPolicy = "ProtectionPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let playerSessionCreationPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PlayerSessionCreationPolicy.self, forKey: .playerSessionCreationPolicy)
        playerSessionCreationPolicy = playerSessionCreationPolicyDecoded
        let protectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .protectionPolicy)
        protectionPolicy = protectionPolicyDecoded
    }
}

extension UpdateGameSessionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameSessionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGameSessionStatusException" : self = .invalidGameSessionStatusException(try InvalidGameSessionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGameSessionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case internalServiceException(InternalServiceException)
    case invalidGameSessionStatusException(InvalidGameSessionStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameSessionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGameSessionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSession = output.gameSession
        } else {
            self.gameSession = nil
        }
    }
}

public struct UpdateGameSessionOutputResponse: Swift.Equatable {
    /// The updated game session properties.
    public var gameSession: GameLiftClientTypes.GameSession?

    public init (
        gameSession: GameLiftClientTypes.GameSession? = nil
    )
    {
        self.gameSession = gameSession
    }
}

struct UpdateGameSessionOutputResponseBody: Swift.Equatable {
    let gameSession: GameLiftClientTypes.GameSession?
}

extension UpdateGameSessionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSession = "GameSession"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSession.self, forKey: .gameSession)
        gameSession = gameSessionDecoded
    }
}

extension UpdateGameSessionQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestination0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestination0)
            }
        }
        if let filterConfiguration = self.filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicy0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicy0)
            }
        }
        if let priorityConfiguration = self.priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}

extension UpdateGameSessionQueueInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateGameSessionQueueInput: Swift.Equatable {
    /// Information to be added to all events that are related to this game session queue.
    public var customEventData: Swift.String?
    /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.
    public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.
    public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
    public var notificationTarget: Swift.String?
    /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of policies.
    public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.
    public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
    public var timeoutInSeconds: Swift.Int?

    public init (
        customEventData: Swift.String? = nil,
        destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
        filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
        priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
        timeoutInSeconds: Swift.Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}

struct UpdateGameSessionQueueInputBody: Swift.Equatable {
    let name: Swift.String?
    let timeoutInSeconds: Swift.Int?
    let playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    let destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    let filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    let priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    let customEventData: Swift.String?
    let notificationTarget: Swift.String?
}

extension UpdateGameSessionQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
        let playerLatencyPoliciesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.PlayerLatencyPolicy?].self, forKey: .playerLatencyPolicies)
        var playerLatencyPoliciesDecoded0:[GameLiftClientTypes.PlayerLatencyPolicy]? = nil
        if let playerLatencyPoliciesContainer = playerLatencyPoliciesContainer {
            playerLatencyPoliciesDecoded0 = [GameLiftClientTypes.PlayerLatencyPolicy]()
            for structure0 in playerLatencyPoliciesContainer {
                if let structure0 = structure0 {
                    playerLatencyPoliciesDecoded0?.append(structure0)
                }
            }
        }
        playerLatencyPolicies = playerLatencyPoliciesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameSessionQueueDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[GameLiftClientTypes.GameSessionQueueDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [GameLiftClientTypes.GameSessionQueueDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let filterConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FilterConfiguration.self, forKey: .filterConfiguration)
        filterConfiguration = filterConfigurationDecoded
        let priorityConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PriorityConfiguration.self, forKey: .priorityConfiguration)
        priorityConfiguration = priorityConfigurationDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
    }
}

extension UpdateGameSessionQueueOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateGameSessionQueueOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateGameSessionQueueOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateGameSessionQueueOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateGameSessionQueueOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.gameSessionQueue = output.gameSessionQueue
        } else {
            self.gameSessionQueue = nil
        }
    }
}

public struct UpdateGameSessionQueueOutputResponse: Swift.Equatable {
    /// An object that describes the newly updated game session queue.
    public var gameSessionQueue: GameLiftClientTypes.GameSessionQueue?

    public init (
        gameSessionQueue: GameLiftClientTypes.GameSessionQueue? = nil
    )
    {
        self.gameSessionQueue = gameSessionQueue
    }
}

struct UpdateGameSessionQueueOutputResponseBody: Swift.Equatable {
    let gameSessionQueue: GameLiftClientTypes.GameSessionQueue?
}

extension UpdateGameSessionQueueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gameSessionQueue = "GameSessionQueue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameSessionQueueDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameSessionQueue.self, forKey: .gameSessionQueue)
        gameSessionQueue = gameSessionQueueDecoded
    }
}

extension UpdateMatchmakingConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = self.acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = self.acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = self.additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = self.backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = self.flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gameproperty0 in gameProperties {
                try gamePropertiesContainer.encode(gameproperty0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for arnstringmodel0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(arnstringmodel0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = self.requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }
}

extension UpdateMatchmakingConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateMatchmakingConfigurationInput: Swift.Equatable {
    /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
    public var acceptanceRequired: Swift.Bool?
    /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
    public var acceptanceTimeoutSeconds: Swift.Int?
    /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var additionalPlayerCount: Swift.Int?
    /// The method that is used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a match backfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [Backfill Existing Games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
    public var backfillMode: GameLiftClientTypes.BackfillMode?
    /// Information to add to all events related to the matchmaking configuration.
    public var customEventData: Swift.String?
    /// A description for the matchmaking configuration.
    public var description: Swift.String?
    /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
    ///
    /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
    ///
    /// * WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
    public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the game session that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameSessionData: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
    public var gameSessionQueueArns: [Swift.String]?
    /// A unique identifier for the matchmaking configuration to update. You can use either the configuration name or ARN value.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive matchmaking notifications. See [ Setting up notifications for matchmaking](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html) for more information.
    public var notificationTarget: Swift.String?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
    public var requestTimeoutSeconds: Swift.Int?
    /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
    public var ruleSetName: Swift.String?

    public init (
        acceptanceRequired: Swift.Bool? = nil,
        acceptanceTimeoutSeconds: Swift.Int? = nil,
        additionalPlayerCount: Swift.Int? = nil,
        backfillMode: GameLiftClientTypes.BackfillMode? = nil,
        customEventData: Swift.String? = nil,
        description: Swift.String? = nil,
        flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionQueueArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        requestTimeoutSeconds: Swift.Int? = nil,
        ruleSetName: Swift.String? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
    }
}

struct UpdateMatchmakingConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let gameSessionQueueArns: [Swift.String]?
    let requestTimeoutSeconds: Swift.Int?
    let acceptanceTimeoutSeconds: Swift.Int?
    let acceptanceRequired: Swift.Bool?
    let ruleSetName: Swift.String?
    let notificationTarget: Swift.String?
    let additionalPlayerCount: Swift.Int?
    let customEventData: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let gameSessionData: Swift.String?
    let backfillMode: GameLiftClientTypes.BackfillMode?
    let flexMatchMode: GameLiftClientTypes.FlexMatchMode?
}

extension UpdateMatchmakingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[Swift.String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [Swift.String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}

extension UpdateMatchmakingConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMatchmakingConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMatchmakingConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMatchmakingConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateMatchmakingConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configuration = output.configuration
        } else {
            self.configuration = nil
        }
    }
}

public struct UpdateMatchmakingConfigurationOutputResponse: Swift.Equatable {
    /// The updated matchmaking configuration.
    public var configuration: GameLiftClientTypes.MatchmakingConfiguration?

    public init (
        configuration: GameLiftClientTypes.MatchmakingConfiguration? = nil
    )
    {
        self.configuration = configuration
    }
}

struct UpdateMatchmakingConfigurationOutputResponseBody: Swift.Equatable {
    let configuration: GameLiftClientTypes.MatchmakingConfiguration?
}

extension UpdateMatchmakingConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MatchmakingConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}

extension UpdateRuntimeConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let runtimeConfiguration = self.runtimeConfiguration {
            try encodeContainer.encode(runtimeConfiguration, forKey: .runtimeConfiguration)
        }
    }
}

extension UpdateRuntimeConfigurationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateRuntimeConfigurationInput: Swift.Equatable {
    /// A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// Instructions for alaunching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.
    /// This member is required.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init (
        fleetId: Swift.String? = nil,
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.fleetId = fleetId
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct UpdateRuntimeConfigurationInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
}

extension UpdateRuntimeConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetId = "FleetId"
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

extension UpdateRuntimeConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRuntimeConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFleetStatusException" : self = .invalidFleetStatusException(try InvalidFleetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateRuntimeConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidFleetStatusException(InvalidFleetStatusException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRuntimeConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateRuntimeConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.runtimeConfiguration = output.runtimeConfiguration
        } else {
            self.runtimeConfiguration = nil
        }
    }
}

public struct UpdateRuntimeConfigurationOutputResponse: Swift.Equatable {
    /// The runtime configuration currently in use by all instances in the fleet. If the update was successful, all property changes are shown.
    public var runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?

    public init (
        runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration? = nil
    )
    {
        self.runtimeConfiguration = runtimeConfiguration
    }
}

struct UpdateRuntimeConfigurationOutputResponseBody: Swift.Equatable {
    let runtimeConfiguration: GameLiftClientTypes.RuntimeConfiguration?
}

extension UpdateRuntimeConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case runtimeConfiguration = "RuntimeConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runtimeConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.RuntimeConfiguration.self, forKey: .runtimeConfiguration)
        runtimeConfiguration = runtimeConfigurationDecoded
    }
}

extension UpdateScriptInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scriptId = "ScriptId"
        case storageLocation = "StorageLocation"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let storageLocation = self.storageLocation {
            try encodeContainer.encode(storageLocation, forKey: .storageLocation)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let zipFile = self.zipFile {
            try encodeContainer.encode(zipFile.base64EncodedString(), forKey: .zipFile)
        }
    }
}

extension UpdateScriptInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateScriptInput: Swift.Equatable {
    /// A descriptive label that is associated with a script. Script names do not need to be unique.
    public var name: Swift.String?
    /// A unique identifier for the Realtime script to update. You can use either the script ID or ARN value.
    /// This member is required.
    public var scriptId: Swift.String?
    /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// Version information associated with a build or script. Version strings do not need to be unique.
    public var version: Swift.String?
    /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
    public var zipFile: ClientRuntime.Data?

    public init (
        name: Swift.String? = nil,
        scriptId: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        version: Swift.String? = nil,
        zipFile: ClientRuntime.Data? = nil
    )
    {
        self.name = name
        self.scriptId = scriptId
        self.storageLocation = storageLocation
        self.version = version
        self.zipFile = zipFile
    }
}

struct UpdateScriptInputBody: Swift.Equatable {
    let scriptId: Swift.String?
    let name: Swift.String?
    let version: Swift.String?
    let storageLocation: GameLiftClientTypes.S3Location?
    let zipFile: ClientRuntime.Data?
}

extension UpdateScriptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case scriptId = "ScriptId"
        case storageLocation = "StorageLocation"
        case version = "Version"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptId)
        scriptId = scriptIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
    }
}

extension UpdateScriptOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateScriptOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnauthorizedException" : self = .unauthorizedException(try UnauthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateScriptOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case notFoundException(NotFoundException)
    case unauthorizedException(UnauthorizedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateScriptOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateScriptOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.script = output.script
        } else {
            self.script = nil
        }
    }
}

public struct UpdateScriptOutputResponse: Swift.Equatable {
    /// The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
    public var script: GameLiftClientTypes.Script?

    public init (
        script: GameLiftClientTypes.Script? = nil
    )
    {
        self.script = script
    }
}

struct UpdateScriptOutputResponseBody: Swift.Equatable {
    let script: GameLiftClientTypes.Script?
}

extension UpdateScriptOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case script = "Script"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scriptDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.Script.self, forKey: .script)
        script = scriptDecoded
    }
}

extension ValidateMatchmakingRuleSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetBody = "RuleSetBody"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleSetBody = self.ruleSetBody {
            try encodeContainer.encode(ruleSetBody, forKey: .ruleSetBody)
        }
    }
}

extension ValidateMatchmakingRuleSetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ValidateMatchmakingRuleSetInput: Swift.Equatable {
    /// A collection of matchmaking rules to validate, formatted as a JSON string.
    /// This member is required.
    public var ruleSetBody: Swift.String?

    public init (
        ruleSetBody: Swift.String? = nil
    )
    {
        self.ruleSetBody = ruleSetBody
    }
}

struct ValidateMatchmakingRuleSetInputBody: Swift.Equatable {
    let ruleSetBody: Swift.String?
}

extension ValidateMatchmakingRuleSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleSetBody = "RuleSetBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleSetBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetBody)
        ruleSetBody = ruleSetBodyDecoded
    }
}

extension ValidateMatchmakingRuleSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ValidateMatchmakingRuleSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedRegionException" : self = .unsupportedRegionException(try UnsupportedRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ValidateMatchmakingRuleSetOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case invalidRequestException(InvalidRequestException)
    case unsupportedRegionException(UnsupportedRegionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateMatchmakingRuleSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidateMatchmakingRuleSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.valid = output.valid
        } else {
            self.valid = nil
        }
    }
}

public struct ValidateMatchmakingRuleSetOutputResponse: Swift.Equatable {
    /// A response indicating whether the rule set is valid.
    public var valid: Swift.Bool?

    public init (
        valid: Swift.Bool? = nil
    )
    {
        self.valid = valid
    }
}

struct ValidateMatchmakingRuleSetOutputResponseBody: Swift.Equatable {
    let valid: Swift.Bool?
}

extension ValidateMatchmakingRuleSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case valid = "Valid"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .valid)
        valid = validDecoded
    }
}

extension GameLiftClientTypes.VpcPeeringAuthorization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case expirationTime = "ExpirationTime"
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encodeTimestamp(creationTime, format: .epochSeconds, forKey: .creationTime)
        }
        if let expirationTime = self.expirationTime {
            try encodeContainer.encodeTimestamp(expirationTime, format: .epochSeconds, forKey: .expirationTime)
        }
        if let gameLiftAwsAccountId = self.gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcAwsAccountId = self.peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let expirationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents an authorization for a VPC peering connection between the VPC for an Amazon GameLift fleet and another VPC on an account you have access to. This authorization must exist and be valid for the peering connection to be established. Authorizations are valid for 24 hours after they are issued. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct VpcPeeringAuthorization: Swift.Equatable {
        /// Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// Time stamp indicating when this authorization expires (24 hours after issuance). Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var expirationTime: ClientRuntime.Date?
        /// A unique identifier for the Amazon Web Services account that you use to manage your GameLift fleet. You can find your Account ID in the Amazon Web Services Management Console under account settings.
        public var gameLiftAwsAccountId: Swift.String?
        /// The authorization's peer VPC Amazon Web Services account ID.
        public var peerVpcAwsAccountId: Swift.String?
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
        public var peerVpcId: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            expirationTime: ClientRuntime.Date? = nil,
            gameLiftAwsAccountId: Swift.String? = nil,
            peerVpcAwsAccountId: Swift.String? = nil,
            peerVpcId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }
    }

}

extension GameLiftClientTypes.VpcPeeringConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case gameLiftVpcId = "GameLiftVpcId"
        case ipV4CidrBlock = "IpV4CidrBlock"
        case peerVpcId = "PeerVpcId"
        case status = "Status"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let gameLiftVpcId = self.gameLiftVpcId {
            try encodeContainer.encode(gameLiftVpcId, forKey: .gameLiftVpcId)
        }
        if let ipV4CidrBlock = self.ipV4CidrBlock {
            try encodeContainer.encode(ipV4CidrBlock, forKey: .ipV4CidrBlock)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let vpcPeeringConnectionId = self.vpcPeeringConnectionId {
            try encodeContainer.encode(vpcPeeringConnectionId, forKey: .vpcPeeringConnectionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let ipV4CidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipV4CidrBlock)
        ipV4CidrBlock = ipV4CidrBlockDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.VpcPeeringConnectionStatus.self, forKey: .status)
        status = statusDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let gameLiftVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftVpcId)
        gameLiftVpcId = gameLiftVpcIdDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents a peering connection between a VPC on one of your Amazon Web Services accounts and the VPC for your Amazon GameLift fleets. This record may be for an active peering connection or a pending connection that has not yet been established. Related actions [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct VpcPeeringConnection: Swift.Equatable {
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet resource for this connection.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.
        public var fleetId: Swift.String?
        /// A unique identifier for the VPC that contains the Amazon GameLift fleet for this connection. This VPC is managed by Amazon GameLift and does not appear in your Amazon Web Services account.
        public var gameLiftVpcId: Swift.String?
        /// CIDR block of IPv4 addresses assigned to the VPC peering connection for the GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these blocks cannot overlap or the peering connection cannot be created.
        public var ipV4CidrBlock: Swift.String?
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the [VPC Dashboard](https://console.aws.amazon.com/vpc/) in the Amazon Web Services Management Console. Learn more about VPC peering in [VPC Peering with GameLift Fleets](https://docs.aws.amazon.com/gamelift/latest/developerguide/vpc-peering.html).
        public var peerVpcId: Swift.String?
        /// The status information about the connection. Status indicates if a connection is pending, successful, or failed.
        public var status: GameLiftClientTypes.VpcPeeringConnectionStatus?
        /// A unique identifier that is automatically assigned to the connection record. This ID is referenced in VPC peering connection events, and is used when deleting a connection.
        public var vpcPeeringConnectionId: Swift.String?

        public init (
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameLiftVpcId: Swift.String? = nil,
            ipV4CidrBlock: Swift.String? = nil,
            peerVpcId: Swift.String? = nil,
            status: GameLiftClientTypes.VpcPeeringConnectionStatus? = nil,
            vpcPeeringConnectionId: Swift.String? = nil
        )
        {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameLiftVpcId = gameLiftVpcId
            self.ipV4CidrBlock = ipV4CidrBlock
            self.peerVpcId = peerVpcId
            self.status = status
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }
    }

}

extension GameLiftClientTypes.VpcPeeringConnectionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GameLiftClientTypes {
    /// Represents status information for a VPC peering connection. Status codes and messages are provided from EC2 (see [VpcPeeringConnectionStateReason](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpcPeeringConnectionStateReason.html)). Connection status information is also communicated as a fleet event.
    public struct VpcPeeringConnectionStatus: Swift.Equatable {
        /// Code indicating the status of a VPC peering connection.
        public var code: Swift.String?
        /// Additional messaging associated with the connection status.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}
