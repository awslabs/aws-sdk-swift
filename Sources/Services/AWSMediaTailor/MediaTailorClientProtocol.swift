// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the [AWS Elemental MediaTailor User Guide](https://docs.aws.amazon.com/mediatailor/latest/ug/). Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).
public protocol MediaTailorClientProtocol {
    /// Configures Amazon CloudWatch log settings for a channel.
    ///
    /// - Parameter ConfigureLogsForChannelInput : [no documentation found]
    ///
    /// - Returns: `ConfigureLogsForChannelOutputResponse` : [no documentation found]
    func configureLogsForChannel(input: ConfigureLogsForChannelInput) async throws -> ConfigureLogsForChannelOutputResponse
    /// Amazon CloudWatch log settings for a playback configuration.
    ///
    /// - Parameter ConfigureLogsForPlaybackConfigurationInput : Configures Amazon CloudWatch log settings for a playback configuration.
    ///
    /// - Returns: `ConfigureLogsForPlaybackConfigurationOutputResponse` : [no documentation found]
    func configureLogsForPlaybackConfiguration(input: ConfigureLogsForPlaybackConfigurationInput) async throws -> ConfigureLogsForPlaybackConfigurationOutputResponse
    /// Creates a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter CreateChannelInput : [no documentation found]
    ///
    /// - Returns: `CreateChannelOutputResponse` : [no documentation found]
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    /// The live source configuration.
    ///
    /// - Parameter CreateLiveSourceInput : [no documentation found]
    ///
    /// - Returns: `CreateLiveSourceOutputResponse` : [no documentation found]
    func createLiveSource(input: CreateLiveSourceInput) async throws -> CreateLiveSourceOutputResponse
    /// Creates a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see [Using ad prefetching](https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html) in the MediaTailor User Guide.
    ///
    /// - Parameter CreatePrefetchScheduleInput : [no documentation found]
    ///
    /// - Returns: `CreatePrefetchScheduleOutputResponse` : [no documentation found]
    func createPrefetchSchedule(input: CreatePrefetchScheduleInput) async throws -> CreatePrefetchScheduleOutputResponse
    /// Creates a program within a channel. For information about programs, see [Working with programs](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html) in the MediaTailor User Guide.
    ///
    /// - Parameter CreateProgramInput : [no documentation found]
    ///
    /// - Returns: `CreateProgramOutputResponse` : [no documentation found]
    func createProgram(input: CreateProgramInput) async throws -> CreateProgramOutputResponse
    /// Creates a source location. A source location is a container for sources. For more information about source locations, see [Working with source locations](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html) in the MediaTailor User Guide.
    ///
    /// - Parameter CreateSourceLocationInput : [no documentation found]
    ///
    /// - Returns: `CreateSourceLocationOutputResponse` : [no documentation found]
    func createSourceLocation(input: CreateSourceLocationInput) async throws -> CreateSourceLocationOutputResponse
    /// The VOD source configuration parameters.
    ///
    /// - Parameter CreateVodSourceInput : [no documentation found]
    ///
    /// - Returns: `CreateVodSourceOutputResponse` : [no documentation found]
    func createVodSource(input: CreateVodSourceInput) async throws -> CreateVodSourceOutputResponse
    /// Deletes a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DeleteChannelInput : [no documentation found]
    ///
    /// - Returns: `DeleteChannelOutputResponse` : [no documentation found]
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    /// The channel policy to delete.
    ///
    /// - Parameter DeleteChannelPolicyInput : [no documentation found]
    ///
    /// - Returns: `DeleteChannelPolicyOutputResponse` : [no documentation found]
    func deleteChannelPolicy(input: DeleteChannelPolicyInput) async throws -> DeleteChannelPolicyOutputResponse
    /// The live source to delete.
    ///
    /// - Parameter DeleteLiveSourceInput : [no documentation found]
    ///
    /// - Returns: `DeleteLiveSourceOutputResponse` : [no documentation found]
    func deleteLiveSource(input: DeleteLiveSourceInput) async throws -> DeleteLiveSourceOutputResponse
    /// Deletes a playback configuration. For information about MediaTailor configurations, see [Working with configurations in AWS Elemental MediaTailor](https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html).
    ///
    /// - Parameter DeletePlaybackConfigurationInput : [no documentation found]
    ///
    /// - Returns: `DeletePlaybackConfigurationOutputResponse` : [no documentation found]
    func deletePlaybackConfiguration(input: DeletePlaybackConfigurationInput) async throws -> DeletePlaybackConfigurationOutputResponse
    /// Deletes a prefetch schedule for a specific playback configuration. If you call DeletePrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code. For more information about ad prefetching, see [Using ad prefetching](https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DeletePrefetchScheduleInput : [no documentation found]
    ///
    /// - Returns: `DeletePrefetchScheduleOutputResponse` : [no documentation found]
    func deletePrefetchSchedule(input: DeletePrefetchScheduleInput) async throws -> DeletePrefetchScheduleOutputResponse
    /// Deletes a program within a channel. For information about programs, see [Working with programs](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DeleteProgramInput : [no documentation found]
    ///
    /// - Returns: `DeleteProgramOutputResponse` : [no documentation found]
    func deleteProgram(input: DeleteProgramInput) async throws -> DeleteProgramOutputResponse
    /// Deletes a source location. A source location is a container for sources. For more information about source locations, see [Working with source locations](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DeleteSourceLocationInput : [no documentation found]
    ///
    /// - Returns: `DeleteSourceLocationOutputResponse` : [no documentation found]
    func deleteSourceLocation(input: DeleteSourceLocationInput) async throws -> DeleteSourceLocationOutputResponse
    /// The video on demand (VOD) source to delete.
    ///
    /// - Parameter DeleteVodSourceInput : [no documentation found]
    ///
    /// - Returns: `DeleteVodSourceOutputResponse` : [no documentation found]
    func deleteVodSource(input: DeleteVodSourceInput) async throws -> DeleteVodSourceOutputResponse
    /// Describes a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DescribeChannelInput : [no documentation found]
    ///
    /// - Returns: `DescribeChannelOutputResponse` : [no documentation found]
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    /// The live source to describe.
    ///
    /// - Parameter DescribeLiveSourceInput : [no documentation found]
    ///
    /// - Returns: `DescribeLiveSourceOutputResponse` : [no documentation found]
    func describeLiveSource(input: DescribeLiveSourceInput) async throws -> DescribeLiveSourceOutputResponse
    /// Describes a program within a channel. For information about programs, see [Working with programs](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-programs.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DescribeProgramInput : [no documentation found]
    ///
    /// - Returns: `DescribeProgramOutputResponse` : [no documentation found]
    func describeProgram(input: DescribeProgramInput) async throws -> DescribeProgramOutputResponse
    /// Describes a source location. A source location is a container for sources. For more information about source locations, see [Working with source locations](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html) in the MediaTailor User Guide.
    ///
    /// - Parameter DescribeSourceLocationInput : [no documentation found]
    ///
    /// - Returns: `DescribeSourceLocationOutputResponse` : [no documentation found]
    func describeSourceLocation(input: DescribeSourceLocationInput) async throws -> DescribeSourceLocationOutputResponse
    /// Provides details about a specific video on demand (VOD) source in a specific source location.
    ///
    /// - Parameter DescribeVodSourceInput : [no documentation found]
    ///
    /// - Returns: `DescribeVodSourceOutputResponse` : [no documentation found]
    func describeVodSource(input: DescribeVodSourceInput) async throws -> DescribeVodSourceOutputResponse
    /// Returns the channel's IAM policy. IAM policies are used to control access to your channel.
    ///
    /// - Parameter GetChannelPolicyInput : [no documentation found]
    ///
    /// - Returns: `GetChannelPolicyOutputResponse` : [no documentation found]
    func getChannelPolicy(input: GetChannelPolicyInput) async throws -> GetChannelPolicyOutputResponse
    /// Retrieves information about your channel's schedule.
    ///
    /// - Parameter GetChannelScheduleInput : [no documentation found]
    ///
    /// - Returns: `GetChannelScheduleOutputResponse` : [no documentation found]
    func getChannelSchedule(input: GetChannelScheduleInput) async throws -> GetChannelScheduleOutputResponse
    /// Retrieves a playback configuration. For information about MediaTailor configurations, see [Working with configurations in AWS Elemental MediaTailor](https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html).
    ///
    /// - Parameter GetPlaybackConfigurationInput : [no documentation found]
    ///
    /// - Returns: `GetPlaybackConfigurationOutputResponse` : [no documentation found]
    func getPlaybackConfiguration(input: GetPlaybackConfigurationInput) async throws -> GetPlaybackConfigurationOutputResponse
    /// Retrieves a prefetch schedule for a playback configuration. A prefetch schedule allows you to tell MediaTailor to fetch and prepare certain ads before an ad break happens. For more information about ad prefetching, see [Using ad prefetching](https://docs.aws.amazon.com/mediatailor/latest/ug/prefetching-ads.html) in the MediaTailor User Guide.
    ///
    /// - Parameter GetPrefetchScheduleInput : [no documentation found]
    ///
    /// - Returns: `GetPrefetchScheduleOutputResponse` : [no documentation found]
    func getPrefetchSchedule(input: GetPrefetchScheduleInput) async throws -> GetPrefetchScheduleOutputResponse
    /// Lists the alerts that are associated with a MediaTailor channel assembly resource.
    ///
    /// - Parameter ListAlertsInput : [no documentation found]
    ///
    /// - Returns: `ListAlertsOutputResponse` : [no documentation found]
    func listAlerts(input: ListAlertsInput) async throws -> ListAlertsOutputResponse
    /// Retrieves information about the channels that are associated with the current AWS account.
    ///
    /// - Parameter ListChannelsInput : [no documentation found]
    ///
    /// - Returns: `ListChannelsOutputResponse` : [no documentation found]
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    /// Lists the live sources contained in a source location. A source represents a piece of content.
    ///
    /// - Parameter ListLiveSourcesInput : [no documentation found]
    ///
    /// - Returns: `ListLiveSourcesOutputResponse` : [no documentation found]
    func listLiveSources(input: ListLiveSourcesInput) async throws -> ListLiveSourcesOutputResponse
    /// Retrieves existing playback configurations. For information about MediaTailor configurations, see [Working with Configurations in AWS Elemental MediaTailor](https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html).
    ///
    /// - Parameter ListPlaybackConfigurationsInput : [no documentation found]
    ///
    /// - Returns: `ListPlaybackConfigurationsOutputResponse` : [no documentation found]
    func listPlaybackConfigurations(input: ListPlaybackConfigurationsInput) async throws -> ListPlaybackConfigurationsOutputResponse
    /// Lists the prefetch schedules for a playback configuration.
    ///
    /// - Parameter ListPrefetchSchedulesInput : [no documentation found]
    ///
    /// - Returns: `ListPrefetchSchedulesOutputResponse` : [no documentation found]
    func listPrefetchSchedules(input: ListPrefetchSchedulesInput) async throws -> ListPrefetchSchedulesOutputResponse
    /// Lists the source locations for a channel. A source location defines the host server URL, and contains a list of sources.
    ///
    /// - Parameter ListSourceLocationsInput : [no documentation found]
    ///
    /// - Returns: `ListSourceLocationsOutputResponse` : [no documentation found]
    func listSourceLocations(input: ListSourceLocationsInput) async throws -> ListSourceLocationsOutputResponse
    /// A list of tags that are associated with this resource. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see [Tagging AWS Elemental MediaTailor Resources](https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html).
    ///
    /// - Parameter ListTagsForResourceInput : [no documentation found]
    ///
    /// - Returns: `ListTagsForResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BadRequestException` : A request contains unexpected data.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Lists the VOD sources contained in a source location. A source represents a piece of content.
    ///
    /// - Parameter ListVodSourcesInput : [no documentation found]
    ///
    /// - Returns: `ListVodSourcesOutputResponse` : [no documentation found]
    func listVodSources(input: ListVodSourcesInput) async throws -> ListVodSourcesOutputResponse
    /// Creates an IAM policy for the channel. IAM policies are used to control access to your channel.
    ///
    /// - Parameter PutChannelPolicyInput : [no documentation found]
    ///
    /// - Returns: `PutChannelPolicyOutputResponse` : [no documentation found]
    func putChannelPolicy(input: PutChannelPolicyInput) async throws -> PutChannelPolicyOutputResponse
    /// Creates a playback configuration. For information about MediaTailor configurations, see [Working with configurations in AWS Elemental MediaTailor](https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html).
    ///
    /// - Parameter PutPlaybackConfigurationInput : [no documentation found]
    ///
    /// - Returns: `PutPlaybackConfigurationOutputResponse` : [no documentation found]
    func putPlaybackConfiguration(input: PutPlaybackConfigurationInput) async throws -> PutPlaybackConfigurationOutputResponse
    /// Starts a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter StartChannelInput : [no documentation found]
    ///
    /// - Returns: `StartChannelOutputResponse` : [no documentation found]
    func startChannel(input: StartChannelInput) async throws -> StartChannelOutputResponse
    /// Stops a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter StopChannelInput : [no documentation found]
    ///
    /// - Returns: `StopChannelOutputResponse` : [no documentation found]
    func stopChannel(input: StopChannelInput) async throws -> StopChannelOutputResponse
    /// The resource to tag. Tags are key-value pairs that you can associate with Amazon resources to help with organization, access control, and cost tracking. For more information, see [Tagging AWS Elemental MediaTailor Resources](https://docs.aws.amazon.com/mediatailor/latest/ug/tagging.html).
    ///
    /// - Parameter TagResourceInput : [no documentation found]
    ///
    /// - Returns: `TagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BadRequestException` : A request contains unexpected data.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// The resource to untag.
    ///
    /// - Parameter UntagResourceInput : [no documentation found]
    ///
    /// - Returns: `UntagResourceOutputResponse` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `BadRequestException` : A request contains unexpected data.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates a channel. For information about MediaTailor channels, see [Working with channels](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-channels.html) in the MediaTailor User Guide.
    ///
    /// - Parameter UpdateChannelInput : [no documentation found]
    ///
    /// - Returns: `UpdateChannelOutputResponse` : [no documentation found]
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    /// Updates a live source's configuration.
    ///
    /// - Parameter UpdateLiveSourceInput : [no documentation found]
    ///
    /// - Returns: `UpdateLiveSourceOutputResponse` : [no documentation found]
    func updateLiveSource(input: UpdateLiveSourceInput) async throws -> UpdateLiveSourceOutputResponse
    /// Updates a program within a channel.
    ///
    /// - Parameter UpdateProgramInput : [no documentation found]
    ///
    /// - Returns: `UpdateProgramOutputResponse` : [no documentation found]
    func updateProgram(input: UpdateProgramInput) async throws -> UpdateProgramOutputResponse
    /// Updates a source location. A source location is a container for sources. For more information about source locations, see [Working with source locations](https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-source-locations.html) in the MediaTailor User Guide.
    ///
    /// - Parameter UpdateSourceLocationInput : [no documentation found]
    ///
    /// - Returns: `UpdateSourceLocationOutputResponse` : [no documentation found]
    func updateSourceLocation(input: UpdateSourceLocationInput) async throws -> UpdateSourceLocationOutputResponse
    /// Updates a VOD source's configuration.
    ///
    /// - Parameter UpdateVodSourceInput : [no documentation found]
    ///
    /// - Returns: `UpdateVodSourceOutputResponse` : [no documentation found]
    func updateVodSource(input: UpdateVodSourceInput) async throws -> UpdateVodSourceOutputResponse
}

public enum MediaTailorClientTypes {}
