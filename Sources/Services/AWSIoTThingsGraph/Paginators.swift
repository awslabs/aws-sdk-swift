// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTThingsGraphClient {
    /// Paginate over `[GetFlowTemplateRevisionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetFlowTemplateRevisionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetFlowTemplateRevisionsOutput`
    public func getFlowTemplateRevisionsPaginated(input: GetFlowTemplateRevisionsInput) -> ClientRuntime.PaginatorSequence<GetFlowTemplateRevisionsInput, GetFlowTemplateRevisionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetFlowTemplateRevisionsInput, GetFlowTemplateRevisionsOutput>(input: input, inputKey: \GetFlowTemplateRevisionsInput.nextToken, outputKey: \GetFlowTemplateRevisionsOutput.nextToken, paginationFunction: self.getFlowTemplateRevisions(input:))
=======
        return ClientRuntime.PaginatorSequence<GetFlowTemplateRevisionsInput, GetFlowTemplateRevisionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getFlowTemplateRevisions(input:))
>>>>>>> main
    }
}

extension GetFlowTemplateRevisionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetFlowTemplateRevisionsInput {
        return GetFlowTemplateRevisionsInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetFlowTemplateRevisionsInput, Output == GetFlowTemplateRevisionsOutput {
=======
extension PaginatorSequence where OperationStackInput == GetFlowTemplateRevisionsInput, OperationStackOutput == GetFlowTemplateRevisionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getFlowTemplateRevisionsPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[GetSystemTemplateRevisionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[GetSystemTemplateRevisionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `GetSystemTemplateRevisionsOutput`
    public func getSystemTemplateRevisionsPaginated(input: GetSystemTemplateRevisionsInput) -> ClientRuntime.PaginatorSequence<GetSystemTemplateRevisionsInput, GetSystemTemplateRevisionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<GetSystemTemplateRevisionsInput, GetSystemTemplateRevisionsOutput>(input: input, inputKey: \GetSystemTemplateRevisionsInput.nextToken, outputKey: \GetSystemTemplateRevisionsOutput.nextToken, paginationFunction: self.getSystemTemplateRevisions(input:))
=======
        return ClientRuntime.PaginatorSequence<GetSystemTemplateRevisionsInput, GetSystemTemplateRevisionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.getSystemTemplateRevisions(input:))
>>>>>>> main
    }
}

extension GetSystemTemplateRevisionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetSystemTemplateRevisionsInput {
        return GetSystemTemplateRevisionsInput(
            id: self.id,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == GetSystemTemplateRevisionsInput, Output == GetSystemTemplateRevisionsOutput {
=======
extension PaginatorSequence where OperationStackInput == GetSystemTemplateRevisionsInput, OperationStackOutput == GetSystemTemplateRevisionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `getSystemTemplateRevisionsPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[ListFlowExecutionMessagesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListFlowExecutionMessagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListFlowExecutionMessagesOutput`
    public func listFlowExecutionMessagesPaginated(input: ListFlowExecutionMessagesInput) -> ClientRuntime.PaginatorSequence<ListFlowExecutionMessagesInput, ListFlowExecutionMessagesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListFlowExecutionMessagesInput, ListFlowExecutionMessagesOutput>(input: input, inputKey: \ListFlowExecutionMessagesInput.nextToken, outputKey: \ListFlowExecutionMessagesOutput.nextToken, paginationFunction: self.listFlowExecutionMessages(input:))
=======
        return ClientRuntime.PaginatorSequence<ListFlowExecutionMessagesInput, ListFlowExecutionMessagesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listFlowExecutionMessages(input:))
>>>>>>> main
    }
}

extension ListFlowExecutionMessagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFlowExecutionMessagesInput {
        return ListFlowExecutionMessagesInput(
            flowExecutionId: self.flowExecutionId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListFlowExecutionMessagesInput, Output == ListFlowExecutionMessagesOutput {
=======
extension PaginatorSequence where OperationStackInput == ListFlowExecutionMessagesInput, OperationStackOutput == ListFlowExecutionMessagesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listFlowExecutionMessagesPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.FlowExecutionMessage]`
    /// - Returns: `[IoTThingsGraphClientTypes.FlowExecutionMessage]`
    public func messages() async throws -> [IoTThingsGraphClientTypes.FlowExecutionMessage] {
        return try await self.asyncCompactMap { item in item.messages }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[ListTagsForResourceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutput`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutput.nextToken, paginationFunction: self.listTagsForResource(input:))
=======
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTagsForResource(input:))
>>>>>>> main
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutput {
=======
extension PaginatorSequence where OperationStackInput == ListTagsForResourceInput, OperationStackOutput == ListTagsForResourceOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.Tag]`
    /// - Returns: `[IoTThingsGraphClientTypes.Tag]`
    public func tags() async throws -> [IoTThingsGraphClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchEntitiesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchEntitiesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchEntitiesOutput`
    public func searchEntitiesPaginated(input: SearchEntitiesInput) -> ClientRuntime.PaginatorSequence<SearchEntitiesInput, SearchEntitiesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchEntitiesInput, SearchEntitiesOutput>(input: input, inputKey: \SearchEntitiesInput.nextToken, outputKey: \SearchEntitiesOutput.nextToken, paginationFunction: self.searchEntities(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchEntitiesInput, SearchEntitiesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchEntities(input:))
>>>>>>> main
    }
}

extension SearchEntitiesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchEntitiesInput {
        return SearchEntitiesInput(
            entityTypes: self.entityTypes,
            filters: self.filters,
            maxResults: self.maxResults,
            namespaceVersion: self.namespaceVersion,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchEntitiesInput, Output == SearchEntitiesOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchEntitiesInput, OperationStackOutput == SearchEntitiesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchEntitiesPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.EntityDescription]`
    /// - Returns: `[IoTThingsGraphClientTypes.EntityDescription]`
    public func descriptions() async throws -> [IoTThingsGraphClientTypes.EntityDescription] {
        return try await self.asyncCompactMap { item in item.descriptions }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchFlowExecutionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchFlowExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchFlowExecutionsOutput`
    public func searchFlowExecutionsPaginated(input: SearchFlowExecutionsInput) -> ClientRuntime.PaginatorSequence<SearchFlowExecutionsInput, SearchFlowExecutionsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchFlowExecutionsInput, SearchFlowExecutionsOutput>(input: input, inputKey: \SearchFlowExecutionsInput.nextToken, outputKey: \SearchFlowExecutionsOutput.nextToken, paginationFunction: self.searchFlowExecutions(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchFlowExecutionsInput, SearchFlowExecutionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchFlowExecutions(input:))
>>>>>>> main
    }
}

extension SearchFlowExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchFlowExecutionsInput {
        return SearchFlowExecutionsInput(
            endTime: self.endTime,
            flowExecutionId: self.flowExecutionId,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime,
            systemInstanceId: self.systemInstanceId
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchFlowExecutionsInput, Output == SearchFlowExecutionsOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchFlowExecutionsInput, OperationStackOutput == SearchFlowExecutionsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchFlowExecutionsPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.FlowExecutionSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.FlowExecutionSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowExecutionSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchFlowTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchFlowTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchFlowTemplatesOutput`
    public func searchFlowTemplatesPaginated(input: SearchFlowTemplatesInput) -> ClientRuntime.PaginatorSequence<SearchFlowTemplatesInput, SearchFlowTemplatesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchFlowTemplatesInput, SearchFlowTemplatesOutput>(input: input, inputKey: \SearchFlowTemplatesInput.nextToken, outputKey: \SearchFlowTemplatesOutput.nextToken, paginationFunction: self.searchFlowTemplates(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchFlowTemplatesInput, SearchFlowTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchFlowTemplates(input:))
>>>>>>> main
    }
}

extension SearchFlowTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchFlowTemplatesInput {
        return SearchFlowTemplatesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchFlowTemplatesInput, Output == SearchFlowTemplatesOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchFlowTemplatesInput, OperationStackOutput == SearchFlowTemplatesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchFlowTemplatesPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.FlowTemplateSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.FlowTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchSystemInstancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchSystemInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchSystemInstancesOutput`
    public func searchSystemInstancesPaginated(input: SearchSystemInstancesInput) -> ClientRuntime.PaginatorSequence<SearchSystemInstancesInput, SearchSystemInstancesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchSystemInstancesInput, SearchSystemInstancesOutput>(input: input, inputKey: \SearchSystemInstancesInput.nextToken, outputKey: \SearchSystemInstancesOutput.nextToken, paginationFunction: self.searchSystemInstances(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchSystemInstancesInput, SearchSystemInstancesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchSystemInstances(input:))
>>>>>>> main
    }
}

extension SearchSystemInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchSystemInstancesInput {
        return SearchSystemInstancesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchSystemInstancesInput, Output == SearchSystemInstancesOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchSystemInstancesInput, OperationStackOutput == SearchSystemInstancesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchSystemInstancesPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.SystemInstanceSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.SystemInstanceSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemInstanceSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchSystemTemplatesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchSystemTemplatesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchSystemTemplatesOutput`
    public func searchSystemTemplatesPaginated(input: SearchSystemTemplatesInput) -> ClientRuntime.PaginatorSequence<SearchSystemTemplatesInput, SearchSystemTemplatesOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchSystemTemplatesInput, SearchSystemTemplatesOutput>(input: input, inputKey: \SearchSystemTemplatesInput.nextToken, outputKey: \SearchSystemTemplatesOutput.nextToken, paginationFunction: self.searchSystemTemplates(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchSystemTemplatesInput, SearchSystemTemplatesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchSystemTemplates(input:))
>>>>>>> main
    }
}

extension SearchSystemTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchSystemTemplatesInput {
        return SearchSystemTemplatesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchSystemTemplatesInput, Output == SearchSystemTemplatesOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchSystemTemplatesInput, OperationStackOutput == SearchSystemTemplatesOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchSystemTemplatesPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
    /// - Returns: `[IoTThingsGraphClientTypes.SystemTemplateSummary]`
    public func summaries() async throws -> [IoTThingsGraphClientTypes.SystemTemplateSummary] {
        return try await self.asyncCompactMap { item in item.summaries }
    }
}
extension IoTThingsGraphClient {
    /// Paginate over `[SearchThingsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[SearchThingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `SearchThingsOutput`
    public func searchThingsPaginated(input: SearchThingsInput) -> ClientRuntime.PaginatorSequence<SearchThingsInput, SearchThingsOutput> {
<<<<<<< HEAD
        return ClientRuntime.PaginatorSequence<SearchThingsInput, SearchThingsOutput>(input: input, inputKey: \SearchThingsInput.nextToken, outputKey: \SearchThingsOutput.nextToken, paginationFunction: self.searchThings(input:))
=======
        return ClientRuntime.PaginatorSequence<SearchThingsInput, SearchThingsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.searchThings(input:))
>>>>>>> main
    }
}

extension SearchThingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> SearchThingsInput {
        return SearchThingsInput(
            entityId: self.entityId,
            maxResults: self.maxResults,
            namespaceVersion: self.namespaceVersion,
            nextToken: token
        )}
}

<<<<<<< HEAD
extension PaginatorSequence where Input == SearchThingsInput, Output == SearchThingsOutput {
=======
extension PaginatorSequence where OperationStackInput == SearchThingsInput, OperationStackOutput == SearchThingsOutput {
>>>>>>> main
    /// This paginator transforms the `AsyncSequence` returned by `searchThingsPaginated`
    /// to access the nested member `[IoTThingsGraphClientTypes.Thing]`
    /// - Returns: `[IoTThingsGraphClientTypes.Thing]`
    public func things() async throws -> [IoTThingsGraphClientTypes.Thing] {
        return try await self.asyncCompactMap { item in item.things }
    }
}
