//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct DeleteCustomActionTypeOutput {

    public init() { }
}

public struct DeletePipelineOutput {

    public init() { }
}

public struct DisableStageTransitionOutput {

    public init() { }
}

public struct EnableStageTransitionOutput {

    public init() { }
}

public struct OverrideStageConditionOutput {

    public init() { }
}

public struct PutJobFailureResultOutput {

    public init() { }
}

public struct PutJobSuccessResultOutput {

    public init() { }
}

public struct PutThirdPartyJobFailureResultOutput {

    public init() { }
}

public struct PutThirdPartyJobSuccessResultOutput {

    public init() { }
}

public struct UpdateActionTypeOutput {

    public init() { }
}

/// The nonce was specified in an invalid format.
public struct InvalidNonceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNonceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The job was specified in an invalid format or cannot be found.
public struct JobNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "JobNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The validation was specified in an invalid format.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of an AcknowledgeJob action.
public struct AcknowledgeJobInput {
    /// The unique system-generated ID of the job for which you want to confirm receipt.
    /// This member is required.
    public var jobId: Swift.String?
    /// A system-generated random number that CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the [PollForJobs] request that returned this job.
    /// This member is required.
    public var nonce: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        nonce: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.nonce = nonce
    }
}

extension CodePipelineClientTypes {

    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case dispatched
        case failed
        case inprogress
        case queued
        case succeeded
        case timedout
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .created,
                .dispatched,
                .failed,
                .inprogress,
                .queued,
                .succeeded,
                .timedout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .dispatched: return "Dispatched"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .queued: return "Queued"
            case .succeeded: return "Succeeded"
            case .timedout: return "TimedOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the output of an AcknowledgeJob action.
public struct AcknowledgeJobOutput {
    /// Whether the job worker has received the specified job.
    public var status: CodePipelineClientTypes.JobStatus?

    public init(
        status: CodePipelineClientTypes.JobStatus? = nil
    )
    {
        self.status = status
    }
}

/// The client token was specified in an invalid format
public struct InvalidClientTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidClientTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of an AcknowledgeThirdPartyJob action.
public struct AcknowledgeThirdPartyJobInput {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The unique system-generated ID of the job.
    /// This member is required.
    public var jobId: Swift.String?
    /// A system-generated random number that CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a [GetThirdPartyJobDetails] request.
    /// This member is required.
    public var nonce: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        jobId: Swift.String? = nil,
        nonce: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.jobId = jobId
        self.nonce = nonce
    }
}

/// Represents the output of an AcknowledgeThirdPartyJob action.
public struct AcknowledgeThirdPartyJobOutput {
    /// The status information for the third party job, if any.
    public var status: CodePipelineClientTypes.JobStatus?

    public init(
        status: CodePipelineClientTypes.JobStatus? = nil
    )
    {
        self.status = status
    }
}

extension CodePipelineClientTypes {

    public enum ActionCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approval
        case build
        case deploy
        case invoke
        case source
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionCategory] {
            return [
                .approval,
                .build,
                .deploy,
                .invoke,
                .source,
                .test
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approval: return "Approval"
            case .build: return "Build"
            case .deploy: return "Deploy"
            case .invoke: return "Invoke"
            case .source: return "Source"
            case .test: return "Test"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action configuration.
    public struct ActionConfiguration {
        /// The configuration data for the action.
        public var configuration: [Swift.String: Swift.String]?

        public init(
            configuration: [Swift.String: Swift.String]? = nil
        )
        {
            self.configuration = configuration
        }
    }

}

extension CodePipelineClientTypes {

    public enum ActionConfigurationPropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case boolean
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionConfigurationPropertyType] {
            return [
                .boolean,
                .number,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action configuration property.
    public struct ActionConfigurationProperty {
        /// The description of the action configuration property that is displayed to users.
        public var description: Swift.String?
        /// Whether the configuration property is a key.
        /// This member is required.
        public var key: Swift.Bool
        /// The name of the action configuration property.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret. If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
        public var queryable: Swift.Bool
        /// Whether the configuration property is a required value.
        /// This member is required.
        public var `required`: Swift.Bool
        /// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs. When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.
        /// This member is required.
        public var secret: Swift.Bool
        /// The type of the configuration property.
        public var type: CodePipelineClientTypes.ActionConfigurationPropertyType?

        public init(
            description: Swift.String? = nil,
            key: Swift.Bool = false,
            name: Swift.String? = nil,
            queryable: Swift.Bool = false,
            `required`: Swift.Bool = false,
            secret: Swift.Bool = false,
            type: CodePipelineClientTypes.ActionConfigurationPropertyType? = nil
        )
        {
            self.description = description
            self.key = key
            self.name = name
            self.queryable = queryable
            self.`required` = `required`
            self.secret = secret
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents the context of an action in the stage of a pipeline to a job worker.
    public struct ActionContext {
        /// The system-generated unique ID that corresponds to an action's execution.
        public var actionExecutionId: Swift.String?
        /// The name of the action in the context of a job.
        public var name: Swift.String?

        public init(
            actionExecutionId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.name = name
        }
    }

}

extension CodePipelineClientTypes {

    public enum ActionOwner: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case custom
        case thirdparty
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionOwner] {
            return [
                .aws,
                .custom,
                .thirdparty
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .custom: return "Custom"
            case .thirdparty: return "ThirdParty"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action type.
    public struct ActionTypeId {
        /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values.
        ///
        /// * Source
        ///
        /// * Build
        ///
        /// * Test
        ///
        /// * Deploy
        ///
        /// * Invoke
        ///
        /// * Approval
        /// This member is required.
        public var category: CodePipelineClientTypes.ActionCategory?
        /// The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom. For more information, see [Valid Action Types and Providers in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers).
        /// This member is required.
        public var owner: CodePipelineClientTypes.ActionOwner?
        /// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy. For more information, see [Valid Action Types and Providers in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers).
        /// This member is required.
        public var provider: Swift.String?
        /// A string that describes the action version.
        /// This member is required.
        public var version: Swift.String?

        public init(
            category: CodePipelineClientTypes.ActionCategory? = nil,
            owner: CodePipelineClientTypes.ActionOwner? = nil,
            provider: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.category = category
            self.owner = owner
            self.provider = provider
            self.version = version
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about an artifact to be worked on, such as a test or build artifact.
    public struct InputArtifact {
        /// The name of the artifact to be worked on (for example, "My App"). Artifacts are the files that are worked on by actions in the pipeline. See the action configuration for each action for details about artifact parameters. For example, the S3 source action input artifact is a file name (or file path), and the files are generally provided as a ZIP file. Example artifact name: SampleApp_Windows.zip The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the output of an action.
    public struct OutputArtifact {
        /// The name of the output of an artifact, such as "My App". The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions. Output artifact names must be unique within a pipeline.
        /// This member is required.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about an action declaration.
    public struct ActionDeclaration {
        /// Specifies the action type and the provider of the action.
        /// This member is required.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// The action's configuration. These are key-value pairs that specify input values for an action. For more information, see [Action Structure Requirements in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements). For the list of configuration properties for the CloudFormation action type in CodePipeline, see [Configuration Properties Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html) in the CloudFormation User Guide. For template snippets with examples, see [Using Parameter Override Functions with CodePipeline Pipelines](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html) in the CloudFormation User Guide. The values can be represented in either JSON or YAML format. For example, the JSON configuration item format is as follows: JSON: "Configuration" : { Key : Value },
        public var configuration: [Swift.String: Swift.String]?
        /// The name or ID of the artifact consumed by the action, such as a test or build artifact.
        public var inputArtifacts: [CodePipelineClientTypes.InputArtifact]?
        /// The action declaration's name.
        /// This member is required.
        public var name: Swift.String?
        /// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
        public var namespace: Swift.String?
        /// The name or ID of the result of the action declaration, such as a test or build artifact.
        public var outputArtifacts: [CodePipelineClientTypes.OutputArtifact]?
        /// The action declaration's Amazon Web Services Region, such as us-east-1.
        public var region: Swift.String?
        /// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
        public var roleArn: Swift.String?
        /// The order in which actions are run.
        public var runOrder: Swift.Int?
        /// A timeout duration in minutes that can be applied against the ActionType’s default timeout value specified in [Quotas for CodePipeline ](https://docs.aws.amazon.com/codepipeline/latest/userguide/limits.html). This attribute is available only to the manual approval ActionType.
        public var timeoutInMinutes: Swift.Int?

        public init(
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            configuration: [Swift.String: Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.InputArtifact]? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            outputArtifacts: [CodePipelineClientTypes.OutputArtifact]? = nil,
            region: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            runOrder: Swift.Int? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.actionTypeId = actionTypeId
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.name = name
            self.namespace = namespace
            self.outputArtifacts = outputArtifacts
            self.region = region
            self.roleArn = roleArn
            self.runOrder = runOrder
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about an error in CodePipeline.
    public struct ErrorDetails {
        /// The system ID or number code of the error.
        public var code: Swift.String?
        /// The text of the error message.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CodePipelineClientTypes {

    public enum ActionExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case abandoned
        case failed
        case inprogress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionExecutionStatus] {
            return [
                .abandoned,
                .failed,
                .inprogress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .abandoned: return "Abandoned"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the run of an action.
    public struct ActionExecution {
        /// ID of the workflow action execution in the current stage. Use the [GetPipelineState] action to retrieve the current action execution details of the current stage. For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.
        public var actionExecutionId: Swift.String?
        /// The details of an error returned by a URL external to Amazon Web Services.
        public var errorDetails: CodePipelineClientTypes.ErrorDetails?
        /// The external ID of the run of the action.
        public var externalExecutionId: Swift.String?
        /// The URL of a resource external to Amazon Web Services that is used when running the action (for example, an external repository URL).
        public var externalExecutionUrl: Swift.String?
        /// The last status change of the action.
        public var lastStatusChange: Foundation.Date?
        /// The ARN of the user who last changed the pipeline.
        public var lastUpdatedBy: Swift.String?
        /// A percentage of completeness of the action as it runs.
        public var percentComplete: Swift.Int?
        /// The status of the action, or for a completed action, the last status of the action.
        public var status: CodePipelineClientTypes.ActionExecutionStatus?
        /// A summary of the run of the action.
        public var summary: Swift.String?
        /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the GetPipelineState command. It is used to validate that the approval request corresponding to this token is still valid.
        public var token: Swift.String?

        public init(
            actionExecutionId: Swift.String? = nil,
            errorDetails: CodePipelineClientTypes.ErrorDetails? = nil,
            externalExecutionId: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil,
            lastStatusChange: Foundation.Date? = nil,
            lastUpdatedBy: Swift.String? = nil,
            percentComplete: Swift.Int? = nil,
            status: CodePipelineClientTypes.ActionExecutionStatus? = nil,
            summary: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.errorDetails = errorDetails
            self.externalExecutionId = externalExecutionId
            self.externalExecutionUrl = externalExecutionUrl
            self.lastStatusChange = lastStatusChange
            self.lastUpdatedBy = lastUpdatedBy
            self.percentComplete = percentComplete
            self.status = status
            self.summary = summary
            self.token = token
        }
    }

}

extension CodePipelineClientTypes {
    /// The Amazon S3 artifact location for an action's artifacts.
    public struct S3Location {
        /// The Amazon S3 artifact bucket for an action's artifacts.
        public var bucket: Swift.String?
        /// The artifact name.
        public var key: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension CodePipelineClientTypes {
    /// Artifact details for the action execution, such as the artifact location.
    public struct ArtifactDetail {
        /// The artifact object name for the action execution.
        public var name: Swift.String?
        /// The Amazon S3 artifact location for the action execution.
        public var s3location: CodePipelineClientTypes.S3Location?

        public init(
            name: Swift.String? = nil,
            s3location: CodePipelineClientTypes.S3Location? = nil
        )
        {
            self.name = name
            self.s3location = s3location
        }
    }

}

extension CodePipelineClientTypes {
    /// Input information used for an action execution.
    public struct ActionExecutionInput {
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Configuration data for an action execution.
        public var configuration: [Swift.String: Swift.String]?
        /// Details of input artifacts of the action that correspond to the action execution.
        public var inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]?
        /// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
        public var namespace: Swift.String?
        /// The Amazon Web Services Region for the action, such as us-east-1.
        public var region: Swift.String?
        /// Configuration data for an action execution with all variable references replaced with their real values for the execution.
        public var resolvedConfiguration: [Swift.String: Swift.String]?
        /// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
        public var roleArn: Swift.String?

        public init(
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            configuration: [Swift.String: Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]? = nil,
            namespace: Swift.String? = nil,
            region: Swift.String? = nil,
            resolvedConfiguration: [Swift.String: Swift.String]? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.actionTypeId = actionTypeId
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.namespace = namespace
            self.region = region
            self.resolvedConfiguration = resolvedConfiguration
            self.roleArn = roleArn
        }
    }

}

extension CodePipelineClientTypes {
    /// Execution result information, such as the external execution ID.
    public struct ActionExecutionResult {
        /// Represents information about an error in CodePipeline.
        public var errorDetails: CodePipelineClientTypes.ErrorDetails?
        /// The action provider's external ID for the action execution.
        public var externalExecutionId: Swift.String?
        /// The action provider's summary for the action execution.
        public var externalExecutionSummary: Swift.String?
        /// The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the action.
        public var externalExecutionUrl: Swift.String?

        public init(
            errorDetails: CodePipelineClientTypes.ErrorDetails? = nil,
            externalExecutionId: Swift.String? = nil,
            externalExecutionSummary: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil
        )
        {
            self.errorDetails = errorDetails
            self.externalExecutionId = externalExecutionId
            self.externalExecutionSummary = externalExecutionSummary
            self.externalExecutionUrl = externalExecutionUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// Output details listed for an action execution, such as the action execution result.
    public struct ActionExecutionOutput {
        /// Execution result information listed in the output details for an action execution.
        public var executionResult: CodePipelineClientTypes.ActionExecutionResult?
        /// Details of output artifacts of the action that correspond to the action execution.
        public var outputArtifacts: [CodePipelineClientTypes.ArtifactDetail]?
        /// The outputVariables field shows the key-value pairs that were output as part of that execution.
        public var outputVariables: [Swift.String: Swift.String]?

        public init(
            executionResult: CodePipelineClientTypes.ActionExecutionResult? = nil,
            outputArtifacts: [CodePipelineClientTypes.ArtifactDetail]? = nil,
            outputVariables: [Swift.String: Swift.String]? = nil
        )
        {
            self.executionResult = executionResult
            self.outputArtifacts = outputArtifacts
            self.outputVariables = outputVariables
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about an execution of an action, including the action execution ID, and the name, version, and timing of the action.
    public struct ActionExecutionDetail {
        /// The action execution ID.
        public var actionExecutionId: Swift.String?
        /// The name of the action.
        public var actionName: Swift.String?
        /// Input details for the action execution, such as role ARN, Region, and input artifacts.
        public var input: CodePipelineClientTypes.ActionExecutionInput?
        /// The last update time of the action execution.
        public var lastUpdateTime: Foundation.Date?
        /// Output details for the action execution, such as the action execution result.
        public var output: CodePipelineClientTypes.ActionExecutionOutput?
        /// The pipeline execution ID for the action execution.
        public var pipelineExecutionId: Swift.String?
        /// The version of the pipeline where the action was run.
        public var pipelineVersion: Swift.Int?
        /// The name of the stage that contains the action.
        public var stageName: Swift.String?
        /// The start time of the action execution.
        public var startTime: Foundation.Date?
        /// The status of the action execution. Status categories are InProgress, Succeeded, and Failed.
        public var status: CodePipelineClientTypes.ActionExecutionStatus?
        /// The ARN of the user who changed the pipeline execution details.
        public var updatedBy: Swift.String?

        public init(
            actionExecutionId: Swift.String? = nil,
            actionName: Swift.String? = nil,
            input: CodePipelineClientTypes.ActionExecutionInput? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            output: CodePipelineClientTypes.ActionExecutionOutput? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineVersion: Swift.Int? = nil,
            stageName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            status: CodePipelineClientTypes.ActionExecutionStatus? = nil,
            updatedBy: Swift.String? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.actionName = actionName
            self.input = input
            self.lastUpdateTime = lastUpdateTime
            self.output = output
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineVersion = pipelineVersion
            self.stageName = stageName
            self.startTime = startTime
            self.status = status
            self.updatedBy = updatedBy
        }
    }

}

extension CodePipelineClientTypes {

    public enum StartTimeRange: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case latest
        case sdkUnknown(Swift.String)

        public static var allCases: [StartTimeRange] {
            return [
                .all,
                .latest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .latest: return "Latest"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The field that specifies to filter on the latest execution in the pipeline. Filtering on the latest execution is available for executions run on or after February 08, 2024.
    public struct LatestInPipelineExecutionFilter {
        /// The execution ID for the latest execution in the pipeline.
        /// This member is required.
        public var pipelineExecutionId: Swift.String?
        /// The start time to filter on for the latest execution in the pipeline. Valid options:
        ///
        /// * All
        ///
        /// * Latest
        /// This member is required.
        public var startTimeRange: CodePipelineClientTypes.StartTimeRange?

        public init(
            pipelineExecutionId: Swift.String? = nil,
            startTimeRange: CodePipelineClientTypes.StartTimeRange? = nil
        )
        {
            self.pipelineExecutionId = pipelineExecutionId
            self.startTimeRange = startTimeRange
        }
    }

}

extension CodePipelineClientTypes {
    /// Filter values for the action execution.
    public struct ActionExecutionFilter {
        /// The latest execution in the pipeline. Filtering on the latest execution is available for executions run on or after February 08, 2024.
        public var latestInPipelineExecution: CodePipelineClientTypes.LatestInPipelineExecutionFilter?
        /// The pipeline execution ID used to filter action execution history.
        public var pipelineExecutionId: Swift.String?

        public init(
            latestInPipelineExecution: CodePipelineClientTypes.LatestInPipelineExecutionFilter? = nil,
            pipelineExecutionId: Swift.String? = nil
        )
        {
            self.latestInPipelineExecution = latestInPipelineExecution
            self.pipelineExecutionId = pipelineExecutionId
        }
    }

}

/// The specified action cannot be found.
public struct ActionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ActionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the version (or revision) of an action.
    public struct ActionRevision {
        /// The date and time when the most recent version of the action was created, in timestamp format.
        /// This member is required.
        public var created: Foundation.Date?
        /// The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).
        /// This member is required.
        public var revisionChangeId: Swift.String?
        /// The system-generated unique ID that identifies the revision number of the action.
        /// This member is required.
        public var revisionId: Swift.String?

        public init(
            created: Foundation.Date? = nil,
            revisionChangeId: Swift.String? = nil,
            revisionId: Swift.String? = nil
        )
        {
            self.created = created
            self.revisionChangeId = revisionChangeId
            self.revisionId = revisionId
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the state of an action.
    public struct ActionState {
        /// The name of the action.
        public var actionName: Swift.String?
        /// Represents information about the version (or revision) of an action.
        public var currentRevision: CodePipelineClientTypes.ActionRevision?
        /// A URL link for more information about the state of the action, such as a deployment group details page.
        public var entityUrl: Swift.String?
        /// Represents information about the run of an action.
        public var latestExecution: CodePipelineClientTypes.ActionExecution?
        /// A URL link for more information about the revision, such as a commit details page.
        public var revisionUrl: Swift.String?

        public init(
            actionName: Swift.String? = nil,
            currentRevision: CodePipelineClientTypes.ActionRevision? = nil,
            entityUrl: Swift.String? = nil,
            latestExecution: CodePipelineClientTypes.ActionExecution? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.currentRevision = currentRevision
            self.entityUrl = entityUrl
            self.latestExecution = latestExecution
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about the details of an artifact.
    public struct ArtifactDetails {
        /// The maximum number of artifacts allowed for the action type.
        /// This member is required.
        public var maximumCount: Swift.Int
        /// The minimum number of artifacts allowed for the action type.
        /// This member is required.
        public var minimumCount: Swift.Int

        public init(
            maximumCount: Swift.Int = 0,
            minimumCount: Swift.Int = 0
        )
        {
            self.maximumCount = maximumCount
            self.minimumCount = minimumCount
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about the settings for an action type.
    public struct ActionTypeSettings {
        /// The URL returned to the CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for a CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
        public var entityUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for CodeDeploy. This link is shown on the pipeline view page in the CodePipeline console and provides a link to the execution entity of the external action.
        public var executionUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: Swift.String?
        /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
        public var thirdPartyConfigurationUrl: Swift.String?

        public init(
            entityUrlTemplate: Swift.String? = nil,
            executionUrlTemplate: Swift.String? = nil,
            revisionUrlTemplate: Swift.String? = nil,
            thirdPartyConfigurationUrl: Swift.String? = nil
        )
        {
            self.entityUrlTemplate = entityUrlTemplate
            self.executionUrlTemplate = executionUrlTemplate
            self.revisionUrlTemplate = revisionUrlTemplate
            self.thirdPartyConfigurationUrl = thirdPartyConfigurationUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about the details of an action type.
    public struct ActionType {
        /// The configuration properties for the action type.
        public var actionConfigurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]?
        /// Represents information about an action type.
        /// This member is required.
        public var id: CodePipelineClientTypes.ActionTypeId?
        /// The details of the input artifact for the action, such as its commit ID.
        /// This member is required.
        public var inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
        /// The details of the output artifact of the action, such as its commit ID.
        /// This member is required.
        public var outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
        /// The settings for the action type.
        public var settings: CodePipelineClientTypes.ActionTypeSettings?

        public init(
            actionConfigurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]? = nil,
            id: CodePipelineClientTypes.ActionTypeId? = nil,
            inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
            outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
            settings: CodePipelineClientTypes.ActionTypeSettings? = nil
        )
        {
            self.actionConfigurationProperties = actionConfigurationProperties
            self.id = id
            self.inputArtifactDetails = inputArtifactDetails
            self.outputArtifactDetails = outputArtifactDetails
            self.settings = settings
        }
    }

}

extension CodePipelineClientTypes {
    /// Information about parameters for artifacts associated with the action type, such as the minimum and maximum artifacts allowed.
    public struct ActionTypeArtifactDetails {
        /// The maximum number of artifacts that can be used with the actiontype. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of source.
        /// This member is required.
        public var maximumCount: Swift.Int
        /// The minimum number of artifacts that can be used with the action type. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of source.
        /// This member is required.
        public var minimumCount: Swift.Int

        public init(
            maximumCount: Swift.Int = 0,
            minimumCount: Swift.Int = 0
        )
        {
            self.maximumCount = maximumCount
            self.minimumCount = minimumCount
        }
    }

}

extension CodePipelineClientTypes {
    /// Details about the polling configuration for the JobWorker action engine, or executor.
    public struct JobWorkerExecutorConfiguration {
        /// The accounts in which the job worker is configured and might poll for jobs as part of the action execution.
        public var pollingAccounts: [Swift.String]?
        /// The service Principals in which the job worker is configured and might poll for jobs as part of the action execution.
        public var pollingServicePrincipals: [Swift.String]?

        public init(
            pollingAccounts: [Swift.String]? = nil,
            pollingServicePrincipals: [Swift.String]? = nil
        )
        {
            self.pollingAccounts = pollingAccounts
            self.pollingServicePrincipals = pollingServicePrincipals
        }
    }

}

extension CodePipelineClientTypes {
    /// Details about the configuration for the Lambda action engine, or executor.
    public struct LambdaExecutorConfiguration {
        /// The ARN of the Lambda function used by the action engine.
        /// This member is required.
        public var lambdaFunctionArn: Swift.String?

        public init(
            lambdaFunctionArn: Swift.String? = nil
        )
        {
            self.lambdaFunctionArn = lambdaFunctionArn
        }
    }

}

extension CodePipelineClientTypes {
    /// The action engine, or executor, related to the supported integration model used to create and update the action type. The available executor types are Lambda and JobWorker.
    public struct ExecutorConfiguration {
        /// Details about the JobWorker executor of the action type.
        public var jobWorkerExecutorConfiguration: CodePipelineClientTypes.JobWorkerExecutorConfiguration?
        /// Details about the Lambda executor of the action type.
        public var lambdaExecutorConfiguration: CodePipelineClientTypes.LambdaExecutorConfiguration?

        public init(
            jobWorkerExecutorConfiguration: CodePipelineClientTypes.JobWorkerExecutorConfiguration? = nil,
            lambdaExecutorConfiguration: CodePipelineClientTypes.LambdaExecutorConfiguration? = nil
        )
        {
            self.jobWorkerExecutorConfiguration = jobWorkerExecutorConfiguration
            self.lambdaExecutorConfiguration = lambdaExecutorConfiguration
        }
    }

}

extension CodePipelineClientTypes {

    public enum ExecutorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case jobworker
        case lambda
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutorType] {
            return [
                .jobworker,
                .lambda
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .jobworker: return "JobWorker"
            case .lambda: return "Lambda"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The action engine, or executor, for an action type created for a provider, where the action is to be used by customers of the provider. The action engine is associated with the model used to create and update the action, such as the Lambda integration model.
    public struct ActionTypeExecutor {
        /// The action configuration properties for the action type. These properties are specified in the action definition when the action type is created.
        /// This member is required.
        public var configuration: CodePipelineClientTypes.ExecutorConfiguration?
        /// The timeout in seconds for the job. An action execution can have multiple jobs. This is the timeout for a single job, not the entire action execution.
        public var jobTimeout: Swift.Int?
        /// The policy statement that specifies the permissions in the CodePipeline customer account that are needed to successfully run an action. To grant permission to another account, specify the account ID as the Principal, a domain-style identifier defined by the service, for example codepipeline.amazonaws.com. The size of the passed JSON policy document cannot exceed 2048 characters.
        public var policyStatementsTemplate: Swift.String?
        /// The integration model used to create and update the action type, Lambda or JobWorker.
        /// This member is required.
        public var type: CodePipelineClientTypes.ExecutorType?

        public init(
            configuration: CodePipelineClientTypes.ExecutorConfiguration? = nil,
            jobTimeout: Swift.Int? = nil,
            policyStatementsTemplate: Swift.String? = nil,
            type: CodePipelineClientTypes.ExecutorType? = nil
        )
        {
            self.configuration = configuration
            self.jobTimeout = jobTimeout
            self.policyStatementsTemplate = policyStatementsTemplate
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Specifies the category, owner, provider, and version of the action type.
    public struct ActionTypeIdentifier {
        /// Defines what kind of action can be taken in the stage, one of the following:
        ///
        /// * Source
        ///
        /// * Build
        ///
        /// * Test
        ///
        /// * Deploy
        ///
        /// * Approval
        ///
        /// * Invoke
        /// This member is required.
        public var category: CodePipelineClientTypes.ActionCategory?
        /// The creator of the action type being called: AWS or ThirdParty.
        /// This member is required.
        public var owner: Swift.String?
        /// The provider of the action type being called. The provider name is supplied when the action type is created.
        /// This member is required.
        public var provider: Swift.String?
        /// A string that describes the action type version.
        /// This member is required.
        public var version: Swift.String?

        public init(
            category: CodePipelineClientTypes.ActionCategory? = nil,
            owner: Swift.String? = nil,
            provider: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.category = category
            self.owner = owner
            self.provider = provider
            self.version = version
        }
    }

}

extension CodePipelineClientTypes {
    /// Details identifying the users with permissions to use the action type.
    public struct ActionTypePermissions {
        /// A list of Amazon Web Services account IDs with access to use the action type in their pipelines.
        /// This member is required.
        public var allowedAccounts: [Swift.String]?

        public init(
            allowedAccounts: [Swift.String]? = nil
        )
        {
            self.allowedAccounts = allowedAccounts
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about each property specified in the action configuration, such as the description and key name that display for the customer using the action type.
    public struct ActionTypeProperty {
        /// The description of the property that is displayed to users.
        public var description: Swift.String?
        /// Whether the configuration property is a key.
        /// This member is required.
        public var key: Swift.Bool
        /// The property name that is displayed to users.
        /// This member is required.
        public var name: Swift.String?
        /// Whether to omit the field value entered by the customer in the log. If true, the value is not saved in CloudTrail logs for the action execution.
        /// This member is required.
        public var noEcho: Swift.Bool
        /// Whether the configuration property is an optional value.
        /// This member is required.
        public var `optional`: Swift.Bool
        /// Indicates that the property is used with polling. An action type can have up to one queryable property. If it has one, that property must be both required and not secret.
        public var queryable: Swift.Bool

        public init(
            description: Swift.String? = nil,
            key: Swift.Bool = false,
            name: Swift.String? = nil,
            noEcho: Swift.Bool = false,
            `optional`: Swift.Bool = false,
            queryable: Swift.Bool = false
        )
        {
            self.description = description
            self.key = key
            self.name = name
            self.noEcho = noEcho
            self.`optional` = `optional`
            self.queryable = queryable
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about URLs for web pages that display to customers as links on the pipeline view, such as an external configuration page for the action type.
    public struct ActionTypeUrls {
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can configure the external action.
        public var configurationUrl: Swift.String?
        /// The URL returned to the CodePipeline console that provides a deep link to the resources of the external system, such as a status page. This link is provided as part of the action display in the pipeline.
        public var entityUrlTemplate: Swift.String?
        /// The link to an execution page for the action type in progress. For example, for a CodeDeploy action, this link is shown on the pipeline view page in the CodePipeline console, and it links to a CodeDeploy status page.
        public var executionUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: Swift.String?

        public init(
            configurationUrl: Swift.String? = nil,
            entityUrlTemplate: Swift.String? = nil,
            executionUrlTemplate: Swift.String? = nil,
            revisionUrlTemplate: Swift.String? = nil
        )
        {
            self.configurationUrl = configurationUrl
            self.entityUrlTemplate = entityUrlTemplate
            self.executionUrlTemplate = executionUrlTemplate
            self.revisionUrlTemplate = revisionUrlTemplate
        }
    }

}

extension CodePipelineClientTypes {
    /// The parameters for the action type definition that are provided when the action type is created or updated.
    public struct ActionTypeDeclaration {
        /// The description for the action type to be updated.
        public var description: Swift.String?
        /// Information about the executor for an action type that was created with any supported integration model.
        /// This member is required.
        public var executor: CodePipelineClientTypes.ActionTypeExecutor?
        /// The action category, owner, provider, and version of the action type to be updated.
        /// This member is required.
        public var id: CodePipelineClientTypes.ActionTypeIdentifier?
        /// Details for the artifacts, such as application files, to be worked on by the action. For example, the minimum and maximum number of input artifacts allowed.
        /// This member is required.
        public var inputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails?
        /// Details for the output artifacts, such as a built application, that are the result of the action. For example, the minimum and maximum number of output artifacts allowed.
        /// This member is required.
        public var outputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails?
        /// Details identifying the accounts with permissions to use the action type.
        public var permissions: CodePipelineClientTypes.ActionTypePermissions?
        /// The properties of the action type to be updated.
        public var properties: [CodePipelineClientTypes.ActionTypeProperty]?
        /// The links associated with the action type to be updated.
        public var urls: CodePipelineClientTypes.ActionTypeUrls?

        public init(
            description: Swift.String? = nil,
            executor: CodePipelineClientTypes.ActionTypeExecutor? = nil,
            id: CodePipelineClientTypes.ActionTypeIdentifier? = nil,
            inputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails? = nil,
            outputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails? = nil,
            permissions: CodePipelineClientTypes.ActionTypePermissions? = nil,
            properties: [CodePipelineClientTypes.ActionTypeProperty]? = nil,
            urls: CodePipelineClientTypes.ActionTypeUrls? = nil
        )
        {
            self.description = description
            self.executor = executor
            self.id = id
            self.inputArtifactDetails = inputArtifactDetails
            self.outputArtifactDetails = outputArtifactDetails
            self.permissions = permissions
            self.properties = properties
            self.urls = urls
        }
    }

}

/// The specified action type cannot be found.
public struct ActionTypeNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ActionTypeNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The approval action has already been approved or rejected.
public struct ApprovalAlreadyCompletedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ApprovalAlreadyCompletedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum ApprovalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ApprovalStatus] {
            return [
                .approved,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .rejected: return "Rejected"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the result of an approval request.
    public struct ApprovalResult {
        /// The response submitted by a reviewer assigned to an approval action request.
        /// This member is required.
        public var status: CodePipelineClientTypes.ApprovalStatus?
        /// The summary of the current status of the approval request.
        /// This member is required.
        public var summary: Swift.String?

        public init(
            status: CodePipelineClientTypes.ApprovalStatus? = nil,
            summary: Swift.String? = nil
        )
        {
            self.status = status
            self.summary = summary
        }
    }

}

extension CodePipelineClientTypes {
    /// The location of the S3 bucket that contains a revision.
    public struct S3ArtifactLocation {
        /// The name of the S3 bucket.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The key of the object in the S3 bucket, which uniquely identifies the object in the bucket.
        /// This member is required.
        public var objectKey: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            objectKey: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }
    }

}

extension CodePipelineClientTypes {

    public enum ArtifactLocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactLocationType] {
            return [
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the location of an artifact.
    public struct ArtifactLocation {
        /// The S3 bucket that contains the artifact.
        public var s3Location: CodePipelineClientTypes.S3ArtifactLocation?
        /// The type of artifact in the location.
        public var type: CodePipelineClientTypes.ArtifactLocationType?

        public init(
            s3Location: CodePipelineClientTypes.S3ArtifactLocation? = nil,
            type: CodePipelineClientTypes.ArtifactLocationType? = nil
        )
        {
            self.s3Location = s3Location
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Artifacts are the files that are worked on by actions in the pipeline. See the action configuration for each action for details about artifact parameters. For example, the S3 source action artifact is a file name (or file path), and the files are generally provided as a ZIP file. Example artifact name: SampleApp_Windows.zip
    public struct Artifact {
        /// The location of an artifact.
        public var location: CodePipelineClientTypes.ArtifactLocation?
        /// The artifact's name.
        public var name: Swift.String?
        /// The artifact's revision ID. Depending on the type of object, this could be a commit ID (GitHub) or a revision ID (Amazon S3).
        public var revision: Swift.String?

        public init(
            location: CodePipelineClientTypes.ArtifactLocation? = nil,
            name: Swift.String? = nil,
            revision: Swift.String? = nil
        )
        {
            self.location = location
            self.name = name
            self.revision = revision
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents revision details of an artifact.
    public struct ArtifactRevision {
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: Foundation.Date?
        /// The name of an artifact. This name might be system-generated, such as "MyApp", or defined by the user when an action is created.
        public var name: Swift.String?
        /// An additional identifier for a revision, such as a commit date or, for artifacts stored in Amazon S3 buckets, the ETag value.
        public var revisionChangeIdentifier: Swift.String?
        /// The revision ID of the artifact.
        public var revisionId: Swift.String?
        /// Summary information about the most recent revision of the artifact. For GitHub and CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a codepipeline-artifact-revision-summary key specified in the object metadata.
        public var revisionSummary: Swift.String?
        /// The commit ID for the artifact revision. For artifacts stored in GitHub or CodeCommit repositories, the commit ID is linked to a commit details page.
        public var revisionUrl: Swift.String?

        public init(
            created: Foundation.Date? = nil,
            name: Swift.String? = nil,
            revisionChangeIdentifier: Swift.String? = nil,
            revisionId: Swift.String? = nil,
            revisionSummary: Swift.String? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.created = created
            self.name = name
            self.revisionChangeIdentifier = revisionChangeIdentifier
            self.revisionId = revisionId
            self.revisionSummary = revisionSummary
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes {

    public enum EncryptionKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionKeyType] {
            return [
                .kms
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the key used to encrypt data in the artifact store, such as an Amazon Web Services Key Management Service (Key Management Service) key.
    public struct EncryptionKey {
        /// The ID used to identify the key. For an Amazon Web Services KMS key, you can use the key ID, the key ARN, or the alias ARN. Aliases are recognized only in the account that created the KMS key. For cross-account actions, you can only use the key ID or key ARN to identify the key. Cross-account actions involve using the role from the other account (AccountB), so specifying the key ID will use the key from the other account (AccountB).
        /// This member is required.
        public var id: Swift.String?
        /// The type of encryption key, such as an Amazon Web Services KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.
        /// This member is required.
        public var type: CodePipelineClientTypes.EncryptionKeyType?

        public init(
            id: Swift.String? = nil,
            type: CodePipelineClientTypes.EncryptionKeyType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {

    public enum ArtifactStoreType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactStoreType] {
            return [
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The S3 bucket where artifacts for the pipeline are stored. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
    public struct ArtifactStore {
        /// The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts.
        /// This member is required.
        public var location: Swift.String?
        /// The type of the artifact store, such as S3.
        /// This member is required.
        public var type: CodePipelineClientTypes.ArtifactStoreType?

        public init(
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            location: Swift.String? = nil,
            type: CodePipelineClientTypes.ArtifactStoreType? = nil
        )
        {
            self.encryptionKey = encryptionKey
            self.location = location
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents an Amazon Web Services session credentials object. These credentials are temporary credentials that are issued by Amazon Web Services Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in CodePipeline.
    public struct AWSSessionCredentials {
        /// The access key for the session.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// The secret access key for the session.
        /// This member is required.
        public var secretAccessKey: Swift.String?
        /// The token for the session.
        /// This member is required.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension CodePipelineClientTypes.AWSSessionCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension CodePipelineClientTypes {

    public enum Result: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fail
        case rollback
        case sdkUnknown(Swift.String)

        public static var allCases: [Result] {
            return [
                .fail,
                .rollback
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fail: return "FAIL"
            case .rollback: return "ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {

    public enum RuleCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rule
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleCategory] {
            return [
                .rule
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rule: return "Rule"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {

    public enum RuleOwner: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleOwner] {
            return [
                .aws
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
    public struct RuleTypeId {
        /// A category defines what kind of rule can be run in the stage, and constrains the provider type for the rule. The valid category is Rule.
        /// This member is required.
        public var category: CodePipelineClientTypes.RuleCategory?
        /// The creator of the rule being called. The valid value for the Owner field in the rule category is AWS.
        public var owner: CodePipelineClientTypes.RuleOwner?
        /// The rule provider, such as the DeploymentWindow rule.
        /// This member is required.
        public var provider: Swift.String?
        /// A string that describes the rule version.
        public var version: Swift.String?

        public init(
            category: CodePipelineClientTypes.RuleCategory? = nil,
            owner: CodePipelineClientTypes.RuleOwner? = nil,
            provider: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.category = category
            self.owner = owner
            self.provider = provider
            self.version = version
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the rule to be created for an associated condition. An example would be creating a new rule for an entry condition, such as a rule that checks for a test result before allowing the run to enter the deployment stage.
    public struct RuleDeclaration {
        /// The action configuration fields for the rule.
        public var configuration: [Swift.String: Swift.String]?
        /// The input artifacts fields for the rule, such as specifying an input file for the rule.
        public var inputArtifacts: [CodePipelineClientTypes.InputArtifact]?
        /// The name of the rule that is created for the condition, such as CheckAllResults.
        /// This member is required.
        public var name: Swift.String?
        /// The Region for the condition associated with the rule.
        public var region: Swift.String?
        /// The pipeline role ARN associated with the rule.
        public var roleArn: Swift.String?
        /// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
        /// This member is required.
        public var ruleTypeId: CodePipelineClientTypes.RuleTypeId?
        /// The action timeout for the rule.
        public var timeoutInMinutes: Swift.Int?

        public init(
            configuration: [Swift.String: Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.InputArtifact]? = nil,
            name: Swift.String? = nil,
            region: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            ruleTypeId: CodePipelineClientTypes.RuleTypeId? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.name = name
            self.region = region
            self.roleArn = roleArn
            self.ruleTypeId = ruleTypeId
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension CodePipelineClientTypes {
    /// The condition for the stage. A condition is made up of the rules and the result for the condition.
    public struct Condition {
        /// The action to be done when the condition is met. For example, rolling back an execution for a failure condition.
        public var result: CodePipelineClientTypes.Result?
        /// The rules that make up the condition.
        public var rules: [CodePipelineClientTypes.RuleDeclaration]?

        public init(
            result: CodePipelineClientTypes.Result? = nil,
            rules: [CodePipelineClientTypes.RuleDeclaration]? = nil
        )
        {
            self.result = result
            self.rules = rules
        }
    }

}

extension CodePipelineClientTypes {
    /// The conditions for making checks for entry to a stage.
    public struct BeforeEntryConditions {
        /// The conditions that are configured as entry conditions.
        /// This member is required.
        public var conditions: [CodePipelineClientTypes.Condition]?

        public init(
            conditions: [CodePipelineClientTypes.Condition]? = nil
        )
        {
            self.conditions = conditions
        }
    }

}

extension CodePipelineClientTypes {

    public enum BlockerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case schedule
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockerType] {
            return [
                .schedule
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .schedule: return "Schedule"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Reserved for future use.
    public struct BlockerDeclaration {
        /// Reserved for future use.
        /// This member is required.
        public var name: Swift.String?
        /// Reserved for future use.
        /// This member is required.
        public var type: CodePipelineClientTypes.BlockerType?

        public init(
            name: Swift.String? = nil,
            type: CodePipelineClientTypes.BlockerType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

/// Unable to modify the tag due to a simultaneous update request.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource tags are invalid.
public struct InvalidTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of pipelines associated with the Amazon Web Services account has exceeded the limit allowed for the account.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tags limit for a resource has been exceeded.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {
    /// A tag is a key-value pair that is used to manage the resource.
    public struct Tag {
        /// The tag's key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag's value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

/// Represents the input of a CreateCustomActionType operation.
public struct CreateCustomActionTypeInput {
    /// The category of the custom action, such as a build action or a test action.
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The configuration properties for the custom action. You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see [Create a Custom Action for a Pipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html).
    public var configurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]?
    /// The details of the input artifact for the action, such as its commit ID.
    /// This member is required.
    public var inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    /// The details of the output artifact of the action, such as its commit ID.
    /// This member is required.
    public var outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    /// The provider of the service used in the custom action, such as CodeDeploy.
    /// This member is required.
    public var provider: Swift.String?
    /// URLs that provide users information about this custom action.
    public var settings: CodePipelineClientTypes.ActionTypeSettings?
    /// The tags for the custom action.
    public var tags: [CodePipelineClientTypes.Tag]?
    /// The version identifier of the custom action.
    /// This member is required.
    public var version: Swift.String?

    public init(
        category: CodePipelineClientTypes.ActionCategory? = nil,
        configurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]? = nil,
        inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
        outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
        provider: Swift.String? = nil,
        settings: CodePipelineClientTypes.ActionTypeSettings? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.configurationProperties = configurationProperties
        self.inputArtifactDetails = inputArtifactDetails
        self.outputArtifactDetails = outputArtifactDetails
        self.provider = provider
        self.settings = settings
        self.tags = tags
        self.version = version
    }
}

/// Represents the output of a CreateCustomActionType operation.
public struct CreateCustomActionTypeOutput {
    /// Returns information about the details of an action type.
    /// This member is required.
    public var actionType: CodePipelineClientTypes.ActionType?
    /// Specifies the tags applied to the custom action.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init(
        actionType: CodePipelineClientTypes.ActionType? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.actionType = actionType
        self.tags = tags
    }
}

/// The action declaration was specified in an invalid format.
public struct InvalidActionDeclarationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidActionDeclarationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Reserved for future use.
public struct InvalidBlockerDeclarationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidBlockerDeclarationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The stage declaration was specified in an invalid format.
public struct InvalidStageDeclarationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStageDeclarationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The structure was specified in an invalid format.
public struct InvalidStructureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidStructureException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified pipeline name is already in use.
public struct PipelineNameInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineNameInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum ExecutionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case parallel
        case queued
        case superseded
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionMode] {
            return [
                .parallel,
                .queued,
                .superseded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .parallel: return "PARALLEL"
            case .queued: return "QUEUED"
            case .superseded: return "SUPERSEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {

    public enum PipelineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v1
        case v2
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineType] {
            return [
                .v1,
                .v2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V1"
            case .v2: return "V2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The configuration that specifies the result, such as rollback, to occur upon stage failure.
    public struct FailureConditions {
        /// The conditions that are configured as failure conditions.
        public var conditions: [CodePipelineClientTypes.Condition]?
        /// The specified result for when the failure conditions are met, such as rolling back the stage.
        public var result: CodePipelineClientTypes.Result?

        public init(
            conditions: [CodePipelineClientTypes.Condition]? = nil,
            result: CodePipelineClientTypes.Result? = nil
        )
        {
            self.conditions = conditions
            self.result = result
        }
    }

}

extension CodePipelineClientTypes {
    /// The conditions for making checks that, if met, succeed a stage.
    public struct SuccessConditions {
        /// The conditions that are success conditions.
        /// This member is required.
        public var conditions: [CodePipelineClientTypes.Condition]?

        public init(
            conditions: [CodePipelineClientTypes.Condition]? = nil
        )
        {
            self.conditions = conditions
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about a stage and its definition.
    public struct StageDeclaration {
        /// The actions included in a stage.
        /// This member is required.
        public var actions: [CodePipelineClientTypes.ActionDeclaration]?
        /// The method to use when a stage allows entry. For example, configuring this field for conditions will allow entry to the stage when the conditions are met.
        public var beforeEntry: CodePipelineClientTypes.BeforeEntryConditions?
        /// Reserved for future use.
        public var blockers: [CodePipelineClientTypes.BlockerDeclaration]?
        /// The name of the stage.
        /// This member is required.
        public var name: Swift.String?
        /// The method to use when a stage has not completed successfully. For example, configuring this field for rollback will roll back a failed stage automatically to the last successful pipeline execution in the stage.
        public var onFailure: CodePipelineClientTypes.FailureConditions?
        /// The method to use when a stage has succeeded. For example, configuring this field for conditions will allow the stage to succeed when the conditions are met.
        public var onSuccess: CodePipelineClientTypes.SuccessConditions?

        public init(
            actions: [CodePipelineClientTypes.ActionDeclaration]? = nil,
            beforeEntry: CodePipelineClientTypes.BeforeEntryConditions? = nil,
            blockers: [CodePipelineClientTypes.BlockerDeclaration]? = nil,
            name: Swift.String? = nil,
            onFailure: CodePipelineClientTypes.FailureConditions? = nil,
            onSuccess: CodePipelineClientTypes.SuccessConditions? = nil
        )
        {
            self.actions = actions
            self.beforeEntry = beforeEntry
            self.blockers = blockers
            self.name = name
            self.onFailure = onFailure
            self.onSuccess = onSuccess
        }
    }

}

extension CodePipelineClientTypes {
    /// The Git repository branches specified as filter criteria to start the pipeline.
    public struct GitBranchFilterCriteria {
        /// The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.
        public var excludes: [Swift.String]?
        /// The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.
        public var includes: [Swift.String]?

        public init(
            excludes: [Swift.String]? = nil,
            includes: [Swift.String]? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension CodePipelineClientTypes {

    public enum GitPullRequestEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case closed
        case `open`
        case updated
        case sdkUnknown(Swift.String)

        public static var allCases: [GitPullRequestEventType] {
            return [
                .closed,
                .open,
                .updated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .open: return "OPEN"
            case .updated: return "UPDATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The Git repository file paths specified as filter criteria to start the pipeline.
    public struct GitFilePathFilterCriteria {
        /// The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.
        public var excludes: [Swift.String]?
        /// The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.
        public var includes: [Swift.String]?

        public init(
            excludes: [Swift.String]? = nil,
            includes: [Swift.String]? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension CodePipelineClientTypes {
    /// The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.
    public struct GitPullRequestFilter {
        /// The field that specifies to filter on branches for the pull request trigger configuration.
        public var branches: CodePipelineClientTypes.GitBranchFilterCriteria?
        /// The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.
        public var events: [CodePipelineClientTypes.GitPullRequestEventType]?
        /// The field that specifies to filter on file paths for the pull request trigger configuration.
        public var filePaths: CodePipelineClientTypes.GitFilePathFilterCriteria?

        public init(
            branches: CodePipelineClientTypes.GitBranchFilterCriteria? = nil,
            events: [CodePipelineClientTypes.GitPullRequestEventType]? = nil,
            filePaths: CodePipelineClientTypes.GitFilePathFilterCriteria? = nil
        )
        {
            self.branches = branches
            self.events = events
            self.filePaths = filePaths
        }
    }

}

extension CodePipelineClientTypes {
    /// The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.
    public struct GitTagFilterCriteria {
        /// The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
        public var excludes: [Swift.String]?
        /// The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
        public var includes: [Swift.String]?

        public init(
            excludes: [Swift.String]? = nil,
            includes: [Swift.String]? = nil
        )
        {
            self.excludes = excludes
            self.includes = includes
        }
    }

}

extension CodePipelineClientTypes {
    /// The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.
    public struct GitPushFilter {
        /// The field that specifies to filter on branches for the push trigger configuration.
        public var branches: CodePipelineClientTypes.GitBranchFilterCriteria?
        /// The field that specifies to filter on file paths for the push trigger configuration.
        public var filePaths: CodePipelineClientTypes.GitFilePathFilterCriteria?
        /// The field that contains the details for the Git tags trigger configuration.
        public var tags: CodePipelineClientTypes.GitTagFilterCriteria?

        public init(
            branches: CodePipelineClientTypes.GitBranchFilterCriteria? = nil,
            filePaths: CodePipelineClientTypes.GitFilePathFilterCriteria? = nil,
            tags: CodePipelineClientTypes.GitTagFilterCriteria? = nil
        )
        {
            self.branches = branches
            self.filePaths = filePaths
            self.tags = tags
        }
    }

}

extension CodePipelineClientTypes {
    /// A type of trigger configuration for Git-based source actions. You can specify the Git configuration trigger type for all third-party Git-based source actions that are supported by the CodeStarSourceConnection action type.
    public struct GitConfiguration {
        /// The field where the repository event that will start the pipeline is specified as pull requests.
        public var pullRequest: [CodePipelineClientTypes.GitPullRequestFilter]?
        /// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.
        public var push: [CodePipelineClientTypes.GitPushFilter]?
        /// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only. You can only specify one trigger configuration per source action.
        /// This member is required.
        public var sourceActionName: Swift.String?

        public init(
            pullRequest: [CodePipelineClientTypes.GitPullRequestFilter]? = nil,
            push: [CodePipelineClientTypes.GitPushFilter]? = nil,
            sourceActionName: Swift.String? = nil
        )
        {
            self.pullRequest = pullRequest
            self.push = push
            self.sourceActionName = sourceActionName
        }
    }

}

extension CodePipelineClientTypes {

    public enum PipelineTriggerProviderType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codestarsourceconnection
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineTriggerProviderType] {
            return [
                .codestarsourceconnection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codestarsourceconnection: return "CodeStarSourceConnection"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger. This is only supported for the CodeStarSourceConnection action type. When a trigger configuration is specified, default change detection for repository and branch commits is disabled.
    public struct PipelineTriggerDeclaration {
        /// Provides the filter criteria and the source stage for the repository event that starts the pipeline, such as Git tags.
        /// This member is required.
        public var gitConfiguration: CodePipelineClientTypes.GitConfiguration?
        /// The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.
        /// This member is required.
        public var providerType: CodePipelineClientTypes.PipelineTriggerProviderType?

        public init(
            gitConfiguration: CodePipelineClientTypes.GitConfiguration? = nil,
            providerType: CodePipelineClientTypes.PipelineTriggerProviderType? = nil
        )
        {
            self.gitConfiguration = gitConfiguration
            self.providerType = providerType
        }
    }

}

extension CodePipelineClientTypes {
    /// A variable declared at the pipeline level.
    public struct PipelineVariableDeclaration {
        /// The value of a pipeline-level variable.
        public var defaultValue: Swift.String?
        /// The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.
        public var description: Swift.String?
        /// The name of a pipeline-level variable.
        /// This member is required.
        public var name: Swift.String?

        public init(
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.name = name
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public struct PipelineDeclaration {
        /// Represents information about the S3 bucket where artifacts are stored for the pipeline. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
        public var artifactStore: CodePipelineClientTypes.ArtifactStore?
        /// A mapping of artifactStore objects and their corresponding Amazon Web Services Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
        public var artifactStores: [Swift.String: CodePipelineClientTypes.ArtifactStore]?
        /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
        public var executionMode: CodePipelineClientTypes.ExecutionMode?
        /// The name of the pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
        ///
        /// * V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.
        ///
        /// * V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.
        ///
        ///
        /// Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs. For information about pricing for CodePipeline, see [Pricing](http://aws.amazon.com/codepipeline/pricing/). For information about which type of pipeline to choose, see [What type of pipeline is right for me?](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html).
        public var pipelineType: CodePipelineClientTypes.PipelineType?
        /// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The stage in which to perform the action.
        /// This member is required.
        public var stages: [CodePipelineClientTypes.StageDeclaration]?
        /// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline. When a trigger configuration is specified, default change detection for repository and branch commits is disabled.
        public var triggers: [CodePipelineClientTypes.PipelineTriggerDeclaration]?
        /// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
        public var variables: [CodePipelineClientTypes.PipelineVariableDeclaration]?
        /// The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.
        public var version: Swift.Int?

        public init(
            artifactStore: CodePipelineClientTypes.ArtifactStore? = nil,
            artifactStores: [Swift.String: CodePipelineClientTypes.ArtifactStore]? = nil,
            executionMode: CodePipelineClientTypes.ExecutionMode? = nil,
            name: Swift.String? = nil,
            pipelineType: CodePipelineClientTypes.PipelineType? = nil,
            roleArn: Swift.String? = nil,
            stages: [CodePipelineClientTypes.StageDeclaration]? = nil,
            triggers: [CodePipelineClientTypes.PipelineTriggerDeclaration]? = nil,
            variables: [CodePipelineClientTypes.PipelineVariableDeclaration]? = nil,
            version: Swift.Int? = nil
        )
        {
            self.artifactStore = artifactStore
            self.artifactStores = artifactStores
            self.executionMode = executionMode
            self.name = name
            self.pipelineType = pipelineType
            self.roleArn = roleArn
            self.stages = stages
            self.triggers = triggers
            self.variables = variables
            self.version = version
        }
    }

}

/// Represents the input of a CreatePipeline action.
public struct CreatePipelineInput {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    /// This member is required.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?
    /// The tags for the pipeline.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init(
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.pipeline = pipeline
        self.tags = tags
    }
}

/// Represents the output of a CreatePipeline action.
public struct CreatePipelineOutput {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?
    /// Specifies the tags applied to the pipeline.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init(
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.pipeline = pipeline
        self.tags = tags
    }
}

/// Represents the input of a DeleteCustomActionType operation. The custom action will be marked as deleted.
public struct DeleteCustomActionTypeInput {
    /// The category of the custom action that you want to delete, such as source or deploy.
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The provider of the service used in the custom action, such as CodeDeploy.
    /// This member is required.
    public var provider: Swift.String?
    /// The version of the custom action to delete.
    /// This member is required.
    public var version: Swift.String?

    public init(
        category: CodePipelineClientTypes.ActionCategory? = nil,
        provider: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.provider = provider
        self.version = version
    }
}

/// Represents the input of a DeletePipeline action.
public struct DeletePipelineInput {
    /// The name of the pipeline to be deleted.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteWebhookInput {
    /// The name of the webhook you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteWebhookOutput {

    public init() { }
}

/// The specified webhook was entered in an invalid format or cannot be found.
public struct WebhookNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "WebhookNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init() { }
}

public struct DeregisterWebhookWithThirdPartyInput {
    /// The name of the webhook you want to deregister.
    public var webhookName: Swift.String?

    public init(
        webhookName: Swift.String? = nil
    )
    {
        self.webhookName = webhookName
    }
}

public struct DeregisterWebhookWithThirdPartyOutput {

    public init() { }
}

/// The pipeline was specified in an invalid format or cannot be found.
public struct PipelineNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The stage was specified in an invalid format or cannot be found.
public struct StageNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StageNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum StageTransitionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inbound
        case outbound
        case sdkUnknown(Swift.String)

        public static var allCases: [StageTransitionType] {
            return [
                .inbound,
                .outbound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inbound: return "Inbound"
            case .outbound: return "Outbound"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a DisableStageTransition action.
public struct DisableStageTransitionInput {
    /// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
    /// This member is required.
    public var reason: Swift.String?
    /// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
    /// This member is required.
    public var stageName: Swift.String?
    /// Specifies whether artifacts are prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).
    /// This member is required.
    public var transitionType: CodePipelineClientTypes.StageTransitionType?

    public init(
        pipelineName: Swift.String? = nil,
        reason: Swift.String? = nil,
        stageName: Swift.String? = nil,
        transitionType: CodePipelineClientTypes.StageTransitionType? = nil
    )
    {
        self.pipelineName = pipelineName
        self.reason = reason
        self.stageName = stageName
        self.transitionType = transitionType
    }
}

/// Represents the input of an EnableStageTransition action.
public struct EnableStageTransitionInput {
    /// The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).
    /// This member is required.
    public var stageName: Swift.String?
    /// Specifies whether artifacts are allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already processed artifacts are allowed to transition to the next stage (outbound).
    /// This member is required.
    public var transitionType: CodePipelineClientTypes.StageTransitionType?

    public init(
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil,
        transitionType: CodePipelineClientTypes.StageTransitionType? = nil
    )
    {
        self.pipelineName = pipelineName
        self.stageName = stageName
        self.transitionType = transitionType
    }
}

public struct GetActionTypeInput {
    /// Defines what kind of action can be taken in the stage. The following are the valid values:
    ///
    /// * Source
    ///
    /// * Build
    ///
    /// * Test
    ///
    /// * Deploy
    ///
    /// * Approval
    ///
    /// * Invoke
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The creator of an action type that was created with any supported integration model. There are two valid values: AWS and ThirdParty.
    /// This member is required.
    public var owner: Swift.String?
    /// The provider of the action type being called. The provider name is specified when the action type is created.
    /// This member is required.
    public var provider: Swift.String?
    /// A string that describes the action type version.
    /// This member is required.
    public var version: Swift.String?

    public init(
        category: CodePipelineClientTypes.ActionCategory? = nil,
        owner: Swift.String? = nil,
        provider: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.owner = owner
        self.provider = provider
        self.version = version
    }
}

public struct GetActionTypeOutput {
    /// The action type information for the requested action type, such as the action type ID.
    public var actionType: CodePipelineClientTypes.ActionTypeDeclaration?

    public init(
        actionType: CodePipelineClientTypes.ActionTypeDeclaration? = nil
    )
    {
        self.actionType = actionType
    }
}

/// Represents the input of a GetJobDetails action.
public struct GetJobDetailsInput {
    /// The unique system-generated ID for the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a stage to a job worker.
    public struct StageContext {
        /// The name of the stage.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about a pipeline to a job worker. PipelineContext contains pipelineArn and pipelineExecutionId for custom action jobs. The pipelineArn and pipelineExecutionId fields are not populated for ThirdParty action jobs.
    public struct PipelineContext {
        /// The context of an action to a job worker in the stage of a pipeline.
        public var action: CodePipelineClientTypes.ActionContext?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The execution ID of the pipeline.
        public var pipelineExecutionId: Swift.String?
        /// The name of the pipeline. This is a user-specified value. Pipeline names must be unique across all pipeline names under an Amazon Web Services account.
        public var pipelineName: Swift.String?
        /// The stage of the pipeline.
        public var stage: CodePipelineClientTypes.StageContext?

        public init(
            action: CodePipelineClientTypes.ActionContext? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            stage: CodePipelineClientTypes.StageContext? = nil
        )
        {
            self.action = action
            self.pipelineArn = pipelineArn
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineName = pipelineName
            self.stage = stage
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents other information about a job required for a job worker to complete the job.
    public struct JobData {
        /// Represents information about an action configuration.
        public var actionConfiguration: CodePipelineClientTypes.ActionConfiguration?
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Represents an Amazon Web Services session credentials object. These credentials are temporary credentials that are issued by Amazon Web Services Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in CodePipeline.
        public var artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials?
        /// A system-generated token, such as a deployment ID, required by a job to continue the job asynchronously.
        public var continuationToken: Swift.String?
        /// Represents information about the key used to encrypt data in the artifact store, such as an KMS key.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The artifact supplied to the job.
        public var inputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// The output of the job.
        public var outputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// Represents information about a pipeline to a job worker. Includes pipelineArn and pipelineExecutionId for custom jobs.
        public var pipelineContext: CodePipelineClientTypes.PipelineContext?

        public init(
            actionConfiguration: CodePipelineClientTypes.ActionConfiguration? = nil,
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials? = nil,
            continuationToken: Swift.String? = nil,
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            inputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            outputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            pipelineContext: CodePipelineClientTypes.PipelineContext? = nil
        )
        {
            self.actionConfiguration = actionConfiguration
            self.actionTypeId = actionTypeId
            self.artifactCredentials = artifactCredentials
            self.continuationToken = continuationToken
            self.encryptionKey = encryptionKey
            self.inputArtifacts = inputArtifacts
            self.outputArtifacts = outputArtifacts
            self.pipelineContext = pipelineContext
        }
    }

}

extension CodePipelineClientTypes.JobData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobData(actionConfiguration: \(Swift.String(describing: actionConfiguration)), actionTypeId: \(Swift.String(describing: actionTypeId)), continuationToken: \(Swift.String(describing: continuationToken)), encryptionKey: \(Swift.String(describing: encryptionKey)), inputArtifacts: \(Swift.String(describing: inputArtifacts)), outputArtifacts: \(Swift.String(describing: outputArtifacts)), pipelineContext: \(Swift.String(describing: pipelineContext)), artifactCredentials: \"CONTENT_REDACTED\")"}
}

extension CodePipelineClientTypes {
    /// Represents information about the details of a job.
    public struct JobDetails {
        /// The Amazon Web Services account ID associated with the job.
        public var accountId: Swift.String?
        /// Represents other information about a job required for a job worker to complete the job.
        public var data: CodePipelineClientTypes.JobData?
        /// The unique system-generated ID of the job.
        public var id: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            data: CodePipelineClientTypes.JobData? = nil,
            id: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.data = data
            self.id = id
        }
    }

}

/// Represents the output of a GetJobDetails action.
public struct GetJobDetailsOutput {
    /// The details of the job. If AWSSessionCredentials is used, a long-running job can call GetJobDetails again to obtain new credentials.
    public var jobDetails: CodePipelineClientTypes.JobDetails?

    public init(
        jobDetails: CodePipelineClientTypes.JobDetails? = nil
    )
    {
        self.jobDetails = jobDetails
    }
}

/// The pipeline version was specified in an invalid format or cannot be found.
public struct PipelineVersionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineVersionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a GetPipeline action.
public struct GetPipelineInput {
    /// The name of the pipeline for which you want to get information. Pipeline names must be unique in an Amazon Web Services account.
    /// This member is required.
    public var name: Swift.String?
    /// The version number of the pipeline. If you do not specify a version, defaults to the current version.
    public var version: Swift.Int?

    public init(
        name: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

extension CodePipelineClientTypes {
    /// Information about a pipeline.
    public struct PipelineMetadata {
        /// The date and time the pipeline was created, in timestamp format.
        public var created: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The date and time that polling for source changes (periodic checks) was stopped for the pipeline, in timestamp format. You can migrate (update) a polling pipeline to use event-based change detection. For example, for a pipeline with a CodeCommit source, we recommend you migrate (update) your pipeline to use CloudWatch Events. To learn more, see [Migrate polling pipelines to use event-based change detection](https://docs.aws.amazon.com/codepipeline/latest/userguide/update-change-detection.html) in the CodePipeline User Guide.
        public var pollingDisabledAt: Foundation.Date?
        /// The date and time the pipeline was last updated, in timestamp format.
        public var updated: Foundation.Date?

        public init(
            created: Foundation.Date? = nil,
            pipelineArn: Swift.String? = nil,
            pollingDisabledAt: Foundation.Date? = nil,
            updated: Foundation.Date? = nil
        )
        {
            self.created = created
            self.pipelineArn = pipelineArn
            self.pollingDisabledAt = pollingDisabledAt
            self.updated = updated
        }
    }

}

/// Represents the output of a GetPipeline action.
public struct GetPipelineOutput {
    /// Represents the pipeline metadata information returned as part of the output of a GetPipeline action.
    public var metadata: CodePipelineClientTypes.PipelineMetadata?
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init(
        metadata: CodePipelineClientTypes.PipelineMetadata? = nil,
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.metadata = metadata
        self.pipeline = pipeline
    }
}

/// The pipeline execution was specified in an invalid format or cannot be found, or an execution ID does not belong to the specified pipeline.
public struct PipelineExecutionNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineExecutionNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a GetPipelineExecution action.
public struct GetPipelineExecutionInput {
    /// The ID of the pipeline execution about which you want to get execution details.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline about which you want to get execution details.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
    }
}

extension CodePipelineClientTypes {

    public enum ExecutionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rollback
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionType] {
            return [
                .rollback,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rollback: return "ROLLBACK"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The metadata for the stage execution to be rolled back.
    public struct PipelineRollbackMetadata {
        /// The pipeline execution ID to which the stage will be rolled back.
        public var rollbackTargetPipelineExecutionId: Swift.String?

        public init(
            rollbackTargetPipelineExecutionId: Swift.String? = nil
        )
        {
            self.rollbackTargetPipelineExecutionId = rollbackTargetPipelineExecutionId
        }
    }

}

extension CodePipelineClientTypes {

    public enum PipelineExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case stopped
        case stopping
        case succeeded
        case superseded
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineExecutionStatus] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .stopped,
                .stopping,
                .succeeded,
                .superseded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case .superseded: return "Superseded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {

    public enum TriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatedrollback
        case cloudwatchevent
        case createpipeline
        case manualrollback
        case pollforsourcechanges
        case putactionrevision
        case startpipelineexecution
        case webhook
        case webhookv2
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerType] {
            return [
                .automatedrollback,
                .cloudwatchevent,
                .createpipeline,
                .manualrollback,
                .pollforsourcechanges,
                .putactionrevision,
                .startpipelineexecution,
                .webhook,
                .webhookv2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatedrollback: return "AutomatedRollback"
            case .cloudwatchevent: return "CloudWatchEvent"
            case .createpipeline: return "CreatePipeline"
            case .manualrollback: return "ManualRollback"
            case .pollforsourcechanges: return "PollForSourceChanges"
            case .putactionrevision: return "PutActionRevision"
            case .startpipelineexecution: return "StartPipelineExecution"
            case .webhook: return "Webhook"
            case .webhookv2: return "WebhookV2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The interaction or event that started a pipeline execution.
    public struct ExecutionTrigger {
        /// Detail related to the event that started a pipeline execution, such as the webhook ARN of the webhook that triggered the pipeline execution or the user ARN for a user-initiated start-pipeline-execution CLI command.
        public var triggerDetail: Swift.String?
        /// The type of change-detection method, command, or user interaction that started a pipeline execution.
        public var triggerType: CodePipelineClientTypes.TriggerType?

        public init(
            triggerDetail: Swift.String? = nil,
            triggerType: CodePipelineClientTypes.TriggerType? = nil
        )
        {
            self.triggerDetail = triggerDetail
            self.triggerType = triggerType
        }
    }

}

extension CodePipelineClientTypes {
    /// A pipeline-level variable used for a pipeline execution.
    public struct ResolvedPipelineVariable {
        /// The name of a pipeline-level variable.
        public var name: Swift.String?
        /// The resolved value of a pipeline-level variable.
        public var resolvedValue: Swift.String?

        public init(
            name: Swift.String? = nil,
            resolvedValue: Swift.String? = nil
        )
        {
            self.name = name
            self.resolvedValue = resolvedValue
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about an execution of a pipeline.
    public struct PipelineExecution {
        /// A list of ArtifactRevision objects included in a pipeline execution.
        public var artifactRevisions: [CodePipelineClientTypes.ArtifactRevision]?
        /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
        public var executionMode: CodePipelineClientTypes.ExecutionMode?
        /// The type of the pipeline execution.
        public var executionType: CodePipelineClientTypes.ExecutionType?
        /// The ID of the pipeline execution.
        public var pipelineExecutionId: Swift.String?
        /// The name of the pipeline with the specified pipeline execution.
        public var pipelineName: Swift.String?
        /// The version number of the pipeline with the specified pipeline execution.
        public var pipelineVersion: Swift.Int?
        /// The metadata about the execution pertaining to stage rollback.
        public var rollbackMetadata: CodePipelineClientTypes.PipelineRollbackMetadata?
        /// The status of the pipeline execution.
        ///
        /// * Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.
        ///
        /// * InProgress: The pipeline execution is currently running.
        ///
        /// * Stopped: The pipeline execution was manually stopped. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Succeeded: The pipeline execution was completed successfully.
        ///
        /// * Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see [Superseded Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded).
        ///
        /// * Failed: The pipeline execution was not completed successfully.
        public var status: CodePipelineClientTypes.PipelineExecutionStatus?
        /// A summary that contains a description of the pipeline execution status.
        public var statusSummary: Swift.String?
        /// The interaction or event that started a pipeline execution.
        public var trigger: CodePipelineClientTypes.ExecutionTrigger?
        /// A list of pipeline variables used for the pipeline execution.
        public var variables: [CodePipelineClientTypes.ResolvedPipelineVariable]?

        public init(
            artifactRevisions: [CodePipelineClientTypes.ArtifactRevision]? = nil,
            executionMode: CodePipelineClientTypes.ExecutionMode? = nil,
            executionType: CodePipelineClientTypes.ExecutionType? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            pipelineVersion: Swift.Int? = nil,
            rollbackMetadata: CodePipelineClientTypes.PipelineRollbackMetadata? = nil,
            status: CodePipelineClientTypes.PipelineExecutionStatus? = nil,
            statusSummary: Swift.String? = nil,
            trigger: CodePipelineClientTypes.ExecutionTrigger? = nil,
            variables: [CodePipelineClientTypes.ResolvedPipelineVariable]? = nil
        )
        {
            self.artifactRevisions = artifactRevisions
            self.executionMode = executionMode
            self.executionType = executionType
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineName = pipelineName
            self.pipelineVersion = pipelineVersion
            self.rollbackMetadata = rollbackMetadata
            self.status = status
            self.statusSummary = statusSummary
            self.trigger = trigger
            self.variables = variables
        }
    }

}

/// Represents the output of a GetPipelineExecution action.
public struct GetPipelineExecutionOutput {
    /// Represents information about the execution of a pipeline.
    public var pipelineExecution: CodePipelineClientTypes.PipelineExecution?

    public init(
        pipelineExecution: CodePipelineClientTypes.PipelineExecution? = nil
    )
    {
        self.pipelineExecution = pipelineExecution
    }
}

/// Represents the input of a GetPipelineState action.
public struct GetPipelineStateInput {
    /// The name of the pipeline about which you want to get information.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension CodePipelineClientTypes {

    public enum ConditionExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case abandoned
        case cancelled
        case errored
        case failed
        case inprogress
        case overridden
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionExecutionStatus] {
            return [
                .abandoned,
                .cancelled,
                .errored,
                .failed,
                .inprogress,
                .overridden,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .abandoned: return "Abandoned"
            case .cancelled: return "Cancelled"
            case .errored: return "Errored"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .overridden: return "Overridden"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The run of a condition.
    public struct ConditionExecution {
        /// The last status change of the condition.
        public var lastStatusChange: Foundation.Date?
        /// The status of the run for a condition.
        public var status: CodePipelineClientTypes.ConditionExecutionStatus?
        /// The summary of information about a run for a condition.
        public var summary: Swift.String?

        public init(
            lastStatusChange: Foundation.Date? = nil,
            status: CodePipelineClientTypes.ConditionExecutionStatus? = nil,
            summary: Swift.String? = nil
        )
        {
            self.lastStatusChange = lastStatusChange
            self.status = status
            self.summary = summary
        }
    }

}

extension CodePipelineClientTypes {
    /// The change to a rule that creates a revision of the rule.
    public struct RuleRevision {
        /// The date and time when the most recent version of the rule was created, in timestamp format.
        /// This member is required.
        public var created: Foundation.Date?
        /// The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).
        /// This member is required.
        public var revisionChangeId: Swift.String?
        /// The system-generated unique ID that identifies the revision number of the rule.
        /// This member is required.
        public var revisionId: Swift.String?

        public init(
            created: Foundation.Date? = nil,
            revisionChangeId: Swift.String? = nil,
            revisionId: Swift.String? = nil
        )
        {
            self.created = created
            self.revisionChangeId = revisionChangeId
            self.revisionId = revisionId
        }
    }

}

extension CodePipelineClientTypes {

    public enum RuleExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case abandoned
        case failed
        case inprogress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleExecutionStatus] {
            return [
                .abandoned,
                .failed,
                .inprogress,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .abandoned: return "Abandoned"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about each time a rule is run as part of the pipeline execution for a pipeline configured with conditions.
    public struct RuleExecution {
        /// Represents information about an error in CodePipeline.
        public var errorDetails: CodePipelineClientTypes.ErrorDetails?
        /// The external ID of the run of the rule.
        public var externalExecutionId: Swift.String?
        /// The URL of a resource external to Amazon Web Services that is used when running the rule (for example, an external repository URL).
        public var externalExecutionUrl: Swift.String?
        /// The last status change of the rule.
        public var lastStatusChange: Foundation.Date?
        /// The ARN of the user who last changed the rule.
        public var lastUpdatedBy: Swift.String?
        /// The execution ID for the run of the rule.
        public var ruleExecutionId: Swift.String?
        /// The status of the run of the rule, such as FAILED.
        public var status: CodePipelineClientTypes.RuleExecutionStatus?
        /// A summary of the run of the rule.
        public var summary: Swift.String?
        /// The system-generated token used to identify a unique request.
        public var token: Swift.String?

        public init(
            errorDetails: CodePipelineClientTypes.ErrorDetails? = nil,
            externalExecutionId: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil,
            lastStatusChange: Foundation.Date? = nil,
            lastUpdatedBy: Swift.String? = nil,
            ruleExecutionId: Swift.String? = nil,
            status: CodePipelineClientTypes.RuleExecutionStatus? = nil,
            summary: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.errorDetails = errorDetails
            self.externalExecutionId = externalExecutionId
            self.externalExecutionUrl = externalExecutionUrl
            self.lastStatusChange = lastStatusChange
            self.lastUpdatedBy = lastUpdatedBy
            self.ruleExecutionId = ruleExecutionId
            self.status = status
            self.summary = summary
            self.token = token
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about the state of a rule. Values returned in the revisionId field indicate the rule revision information, such as the commit ID, for the current state.
    public struct RuleState {
        /// The ID of the current revision of the artifact successfully worked on by the job.
        public var currentRevision: CodePipelineClientTypes.RuleRevision?
        /// A URL link for more information about the state of the action, such as a details page.
        public var entityUrl: Swift.String?
        /// Represents information about the latest run of an rule.
        public var latestExecution: CodePipelineClientTypes.RuleExecution?
        /// A URL link for more information about the revision, such as a commit details page.
        public var revisionUrl: Swift.String?
        /// The name of the rule.
        public var ruleName: Swift.String?

        public init(
            currentRevision: CodePipelineClientTypes.RuleRevision? = nil,
            entityUrl: Swift.String? = nil,
            latestExecution: CodePipelineClientTypes.RuleExecution? = nil,
            revisionUrl: Swift.String? = nil,
            ruleName: Swift.String? = nil
        )
        {
            self.currentRevision = currentRevision
            self.entityUrl = entityUrl
            self.latestExecution = latestExecution
            self.revisionUrl = revisionUrl
            self.ruleName = ruleName
        }
    }

}

extension CodePipelineClientTypes {
    /// Information about the state of the condition.
    public struct ConditionState {
        /// The state of the latest run of the rule.
        public var latestExecution: CodePipelineClientTypes.ConditionExecution?
        /// The state of the rules for the condition.
        public var ruleStates: [CodePipelineClientTypes.RuleState]?

        public init(
            latestExecution: CodePipelineClientTypes.ConditionExecution? = nil,
            ruleStates: [CodePipelineClientTypes.RuleState]? = nil
        )
        {
            self.latestExecution = latestExecution
            self.ruleStates = ruleStates
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the run of a condition for a stage.
    public struct StageConditionsExecution {
        /// The status of a run of a condition for a stage.
        public var status: CodePipelineClientTypes.ConditionExecutionStatus?
        /// A summary of the run of the condition for a stage.
        public var summary: Swift.String?

        public init(
            status: CodePipelineClientTypes.ConditionExecutionStatus? = nil,
            summary: Swift.String? = nil
        )
        {
            self.status = status
            self.summary = summary
        }
    }

}

extension CodePipelineClientTypes {
    /// The state of a run of a condition for a stage.
    public struct StageConditionState {
        /// The states of the conditions for a run of a condition for a stage.
        public var conditionStates: [CodePipelineClientTypes.ConditionState]?
        /// Represents information about the latest run of a condition for a stage.
        public var latestExecution: CodePipelineClientTypes.StageConditionsExecution?

        public init(
            conditionStates: [CodePipelineClientTypes.ConditionState]? = nil,
            latestExecution: CodePipelineClientTypes.StageConditionsExecution? = nil
        )
        {
            self.conditionStates = conditionStates
            self.latestExecution = latestExecution
        }
    }

}

extension CodePipelineClientTypes {

    public enum StageExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StageExecutionStatus] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .stopped,
                .stopping,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the run of a stage.
    public struct StageExecution {
        /// The ID of the pipeline execution associated with the stage.
        /// This member is required.
        public var pipelineExecutionId: Swift.String?
        /// The status of the stage, or for a completed stage, the last status of the stage. A status of cancelled means that the pipeline’s definition was updated before the stage execution could be completed.
        /// This member is required.
        public var status: CodePipelineClientTypes.StageExecutionStatus?
        /// The type of pipeline execution for the stage, such as a rollback pipeline execution.
        public var type: CodePipelineClientTypes.ExecutionType?

        public init(
            pipelineExecutionId: Swift.String? = nil,
            status: CodePipelineClientTypes.StageExecutionStatus? = nil,
            type: CodePipelineClientTypes.ExecutionType? = nil
        )
        {
            self.pipelineExecutionId = pipelineExecutionId
            self.status = status
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the state of transitions between one stage and another stage.
    public struct TransitionState {
        /// The user-specified reason why the transition between two stages of a pipeline was disabled.
        public var disabledReason: Swift.String?
        /// Whether the transition between stages is enabled (true) or disabled (false).
        public var enabled: Swift.Bool
        /// The timestamp when the transition state was last changed.
        public var lastChangedAt: Foundation.Date?
        /// The ID of the user who last changed the transition state.
        public var lastChangedBy: Swift.String?

        public init(
            disabledReason: Swift.String? = nil,
            enabled: Swift.Bool = false,
            lastChangedAt: Foundation.Date? = nil,
            lastChangedBy: Swift.String? = nil
        )
        {
            self.disabledReason = disabledReason
            self.enabled = enabled
            self.lastChangedAt = lastChangedAt
            self.lastChangedBy = lastChangedBy
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about the state of the stage.
    public struct StageState {
        /// The state of the stage.
        public var actionStates: [CodePipelineClientTypes.ActionState]?
        /// The state of the entry conditions for a stage.
        public var beforeEntryConditionState: CodePipelineClientTypes.StageConditionState?
        /// Represents information about the run of a stage.
        public var inboundExecution: CodePipelineClientTypes.StageExecution?
        /// The inbound executions for a stage.
        public var inboundExecutions: [CodePipelineClientTypes.StageExecution]?
        /// The state of the inbound transition, which is either enabled or disabled.
        public var inboundTransitionState: CodePipelineClientTypes.TransitionState?
        /// Information about the latest execution in the stage, including its ID and status.
        public var latestExecution: CodePipelineClientTypes.StageExecution?
        /// The state of the failure conditions for a stage.
        public var onFailureConditionState: CodePipelineClientTypes.StageConditionState?
        /// The state of the success conditions for a stage.
        public var onSuccessConditionState: CodePipelineClientTypes.StageConditionState?
        /// The name of the stage.
        public var stageName: Swift.String?

        public init(
            actionStates: [CodePipelineClientTypes.ActionState]? = nil,
            beforeEntryConditionState: CodePipelineClientTypes.StageConditionState? = nil,
            inboundExecution: CodePipelineClientTypes.StageExecution? = nil,
            inboundExecutions: [CodePipelineClientTypes.StageExecution]? = nil,
            inboundTransitionState: CodePipelineClientTypes.TransitionState? = nil,
            latestExecution: CodePipelineClientTypes.StageExecution? = nil,
            onFailureConditionState: CodePipelineClientTypes.StageConditionState? = nil,
            onSuccessConditionState: CodePipelineClientTypes.StageConditionState? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.actionStates = actionStates
            self.beforeEntryConditionState = beforeEntryConditionState
            self.inboundExecution = inboundExecution
            self.inboundExecutions = inboundExecutions
            self.inboundTransitionState = inboundTransitionState
            self.latestExecution = latestExecution
            self.onFailureConditionState = onFailureConditionState
            self.onSuccessConditionState = onSuccessConditionState
            self.stageName = stageName
        }
    }

}

/// Represents the output of a GetPipelineState action.
public struct GetPipelineStateOutput {
    /// The date and time the pipeline was created, in timestamp format.
    public var created: Foundation.Date?
    /// The name of the pipeline for which you want to get the state.
    public var pipelineName: Swift.String?
    /// The version number of the pipeline. A newly created pipeline is always assigned a version number of 1.
    public var pipelineVersion: Swift.Int?
    /// A list of the pipeline stage output information, including stage name, state, most recent run details, whether the stage is disabled, and other data.
    public var stageStates: [CodePipelineClientTypes.StageState]?
    /// The date and time the pipeline was last updated, in timestamp format.
    public var updated: Foundation.Date?

    public init(
        created: Foundation.Date? = nil,
        pipelineName: Swift.String? = nil,
        pipelineVersion: Swift.Int? = nil,
        stageStates: [CodePipelineClientTypes.StageState]? = nil,
        updated: Foundation.Date? = nil
    )
    {
        self.created = created
        self.pipelineName = pipelineName
        self.pipelineVersion = pipelineVersion
        self.stageStates = stageStates
        self.updated = updated
    }
}

/// The job was specified in an invalid format or cannot be found.
public struct InvalidJobException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidJobException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a GetThirdPartyJobDetails action.
public struct GetThirdPartyJobDetailsInput {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The unique system-generated ID used for identifying the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.jobId = jobId
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the job data for a partner action.
    public struct ThirdPartyJobData {
        /// Represents information about an action configuration.
        public var actionConfiguration: CodePipelineClientTypes.ActionConfiguration?
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Represents an Amazon Web Services session credentials object. These credentials are temporary credentials that are issued by Amazon Web Services Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in CodePipeline.
        public var artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials?
        /// A system-generated token, such as a CodeDeploy deployment ID, that a job requires to continue the job asynchronously.
        public var continuationToken: Swift.String?
        /// The encryption key used to encrypt and decrypt data in the artifact store for the pipeline, such as an Amazon Web Services Key Management Service (Amazon Web Services KMS) key. This is optional and might not be present.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The name of the artifact that is worked on by the action, if any. This name might be system-generated, such as "MyApp", or it might be defined by the user when the action is created. The input artifact name must match the name of an output artifact generated by an action in an earlier action or stage of the pipeline.
        public var inputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// The name of the artifact that is the result of the action, if any. This name might be system-generated, such as "MyBuiltApp", or it might be defined by the user when the action is created.
        public var outputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// Represents information about a pipeline to a job worker. Does not include pipelineArn and pipelineExecutionId for ThirdParty jobs.
        public var pipelineContext: CodePipelineClientTypes.PipelineContext?

        public init(
            actionConfiguration: CodePipelineClientTypes.ActionConfiguration? = nil,
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials? = nil,
            continuationToken: Swift.String? = nil,
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            inputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            outputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            pipelineContext: CodePipelineClientTypes.PipelineContext? = nil
        )
        {
            self.actionConfiguration = actionConfiguration
            self.actionTypeId = actionTypeId
            self.artifactCredentials = artifactCredentials
            self.continuationToken = continuationToken
            self.encryptionKey = encryptionKey
            self.inputArtifacts = inputArtifacts
            self.outputArtifacts = outputArtifacts
            self.pipelineContext = pipelineContext
        }
    }

}

extension CodePipelineClientTypes.ThirdPartyJobData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThirdPartyJobData(actionConfiguration: \(Swift.String(describing: actionConfiguration)), actionTypeId: \(Swift.String(describing: actionTypeId)), continuationToken: \(Swift.String(describing: continuationToken)), encryptionKey: \(Swift.String(describing: encryptionKey)), inputArtifacts: \(Swift.String(describing: inputArtifacts)), outputArtifacts: \(Swift.String(describing: outputArtifacts)), pipelineContext: \(Swift.String(describing: pipelineContext)), artifactCredentials: \"CONTENT_REDACTED\")"}
}

extension CodePipelineClientTypes {
    /// The details of a job sent in response to a GetThirdPartyJobDetails request.
    public struct ThirdPartyJobDetails {
        /// The data to be returned by the third party job worker.
        public var data: CodePipelineClientTypes.ThirdPartyJobData?
        /// The identifier used to identify the job details in CodePipeline.
        public var id: Swift.String?
        /// A system-generated random number that CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an [AcknowledgeThirdPartyJob] request.
        public var nonce: Swift.String?

        public init(
            data: CodePipelineClientTypes.ThirdPartyJobData? = nil,
            id: Swift.String? = nil,
            nonce: Swift.String? = nil
        )
        {
            self.data = data
            self.id = id
            self.nonce = nonce
        }
    }

}

/// Represents the output of a GetThirdPartyJobDetails action.
public struct GetThirdPartyJobDetailsOutput {
    /// The details of the job, including any protected values defined for the job.
    public var jobDetails: CodePipelineClientTypes.ThirdPartyJobDetails?

    public init(
        jobDetails: CodePipelineClientTypes.ThirdPartyJobDetails? = nil
    )
    {
        self.jobDetails = jobDetails
    }
}

/// The next token was specified in an invalid format. Make sure that the next token you provide is the token returned by a previous call.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListActionExecutionsInput {
    /// Input information used to filter action execution history.
    public var filter: CodePipelineClientTypes.ActionExecutionFilter?
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListActionExecutions call, which can be used to return the next set of action executions in the list.
    public var nextToken: Swift.String?
    /// The name of the pipeline for which you want to list action execution history.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        filter: CodePipelineClientTypes.ActionExecutionFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
    }
}

public struct ListActionExecutionsOutput {
    /// The details for a list of recent executions, such as action execution ID.
    public var actionExecutionDetails: [CodePipelineClientTypes.ActionExecutionDetail]?
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent ListActionExecutions call to return the next set of action executions in the list.
    public var nextToken: Swift.String?

    public init(
        actionExecutionDetails: [CodePipelineClientTypes.ActionExecutionDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionExecutionDetails = actionExecutionDetails
        self.nextToken = nextToken
    }
}

/// Represents the input of a ListActionTypes action.
public struct ListActionTypesInput {
    /// Filters the list of action types to those created by a specified entity.
    public var actionOwnerFilter: CodePipelineClientTypes.ActionOwner?
    /// An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.
    public var nextToken: Swift.String?
    /// The Region to filter on for the list of action types.
    public var regionFilter: Swift.String?

    public init(
        actionOwnerFilter: CodePipelineClientTypes.ActionOwner? = nil,
        nextToken: Swift.String? = nil,
        regionFilter: Swift.String? = nil
    )
    {
        self.actionOwnerFilter = actionOwnerFilter
        self.nextToken = nextToken
        self.regionFilter = regionFilter
    }
}

/// Represents the output of a ListActionTypes action.
public struct ListActionTypesOutput {
    /// Provides details of the action types.
    /// This member is required.
    public var actionTypes: [CodePipelineClientTypes.ActionType]?
    /// If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list action types call to return the next set of action types in the list.
    public var nextToken: Swift.String?

    public init(
        actionTypes: [CodePipelineClientTypes.ActionType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionTypes = actionTypes
        self.nextToken = nextToken
    }
}

extension CodePipelineClientTypes {
    /// Filter for pipeline executions that have successfully completed the stage in the current pipeline version.
    public struct SucceededInStageFilter {
        /// The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.
        public var stageName: Swift.String?

        public init(
            stageName: Swift.String? = nil
        )
        {
            self.stageName = stageName
        }
    }

}

extension CodePipelineClientTypes {
    /// The pipeline execution to filter on.
    public struct PipelineExecutionFilter {
        /// Filter for pipeline executions where the stage was successful in the current pipeline version.
        public var succeededInStage: CodePipelineClientTypes.SucceededInStageFilter?

        public init(
            succeededInStage: CodePipelineClientTypes.SucceededInStageFilter? = nil
        )
        {
            self.succeededInStage = succeededInStage
        }
    }

}

/// Represents the input of a ListPipelineExecutions action.
public struct ListPipelineExecutionsInput {
    /// The pipeline execution to filter on.
    public var filter: CodePipelineClientTypes.PipelineExecutionFilter?
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListPipelineExecutions call, which can be used to return the next set of pipeline executions in the list.
    public var nextToken: Swift.String?
    /// The name of the pipeline for which you want to get execution summary information.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        filter: CodePipelineClientTypes.PipelineExecutionFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
    }
}

extension CodePipelineClientTypes {
    /// Information about the version (or revision) of a source artifact that initiated a pipeline execution.
    public struct SourceRevision {
        /// The name of the action that processed the revision to the source artifact.
        /// This member is required.
        public var actionName: Swift.String?
        /// The system-generated unique ID that identifies the revision number of the artifact.
        public var revisionId: Swift.String?
        /// Summary information about the most recent revision of the artifact. For GitHub and CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a codepipeline-artifact-revision-summary key specified in the object metadata.
        public var revisionSummary: Swift.String?
        /// The commit ID for the artifact revision. For artifacts stored in GitHub or CodeCommit repositories, the commit ID is linked to a commit details page.
        public var revisionUrl: Swift.String?

        public init(
            actionName: Swift.String? = nil,
            revisionId: Swift.String? = nil,
            revisionSummary: Swift.String? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.revisionId = revisionId
            self.revisionSummary = revisionSummary
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// The interaction that stopped a pipeline execution.
    public struct StopExecutionTrigger {
        /// The user-specified reason the pipeline was stopped.
        public var reason: Swift.String?

        public init(
            reason: Swift.String? = nil
        )
        {
            self.reason = reason
        }
    }

}

extension CodePipelineClientTypes {
    /// Summary information about a pipeline execution.
    public struct PipelineExecutionSummary {
        /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
        public var executionMode: CodePipelineClientTypes.ExecutionMode?
        /// Type of the pipeline execution.
        public var executionType: CodePipelineClientTypes.ExecutionType?
        /// The date and time of the last change to the pipeline execution, in timestamp format.
        public var lastUpdateTime: Foundation.Date?
        /// The ID of the pipeline execution.
        public var pipelineExecutionId: Swift.String?
        /// The metadata for the stage execution to be rolled back.
        public var rollbackMetadata: CodePipelineClientTypes.PipelineRollbackMetadata?
        /// A list of the source artifact revisions that initiated a pipeline execution.
        public var sourceRevisions: [CodePipelineClientTypes.SourceRevision]?
        /// The date and time when the pipeline execution began, in timestamp format.
        public var startTime: Foundation.Date?
        /// The status of the pipeline execution.
        ///
        /// * InProgress: The pipeline execution is currently running.
        ///
        /// * Stopped: The pipeline execution was manually stopped. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Succeeded: The pipeline execution was completed successfully.
        ///
        /// * Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see [Superseded Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded).
        ///
        /// * Failed: The pipeline execution was not completed successfully.
        public var status: CodePipelineClientTypes.PipelineExecutionStatus?
        /// Status summary for the pipeline.
        public var statusSummary: Swift.String?
        /// The interaction that stopped a pipeline execution.
        public var stopTrigger: CodePipelineClientTypes.StopExecutionTrigger?
        /// The interaction or event that started a pipeline execution, such as automated change detection or a StartPipelineExecution API call.
        public var trigger: CodePipelineClientTypes.ExecutionTrigger?

        public init(
            executionMode: CodePipelineClientTypes.ExecutionMode? = nil,
            executionType: CodePipelineClientTypes.ExecutionType? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            pipelineExecutionId: Swift.String? = nil,
            rollbackMetadata: CodePipelineClientTypes.PipelineRollbackMetadata? = nil,
            sourceRevisions: [CodePipelineClientTypes.SourceRevision]? = nil,
            startTime: Foundation.Date? = nil,
            status: CodePipelineClientTypes.PipelineExecutionStatus? = nil,
            statusSummary: Swift.String? = nil,
            stopTrigger: CodePipelineClientTypes.StopExecutionTrigger? = nil,
            trigger: CodePipelineClientTypes.ExecutionTrigger? = nil
        )
        {
            self.executionMode = executionMode
            self.executionType = executionType
            self.lastUpdateTime = lastUpdateTime
            self.pipelineExecutionId = pipelineExecutionId
            self.rollbackMetadata = rollbackMetadata
            self.sourceRevisions = sourceRevisions
            self.startTime = startTime
            self.status = status
            self.statusSummary = statusSummary
            self.stopTrigger = stopTrigger
            self.trigger = trigger
        }
    }

}

/// Represents the output of a ListPipelineExecutions action.
public struct ListPipelineExecutionsOutput {
    /// A token that can be used in the next ListPipelineExecutions call. To view all items in the list, continue to call this operation with each subsequent token until no more nextToken values are returned.
    public var nextToken: Swift.String?
    /// A list of executions in the history of a pipeline.
    public var pipelineExecutionSummaries: [CodePipelineClientTypes.PipelineExecutionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineExecutionSummaries: [CodePipelineClientTypes.PipelineExecutionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSummaries = pipelineExecutionSummaries
    }
}

/// Represents the input of a ListPipelines action.
public struct ListPipelinesInput {
    /// The maximum number of pipelines to return in a single call. To retrieve the remaining pipelines, make another call with the returned nextToken value. The minimum value you can specify is 1. The maximum accepted value is 1000.
    public var maxResults: Swift.Int?
    /// An identifier that was returned from the previous list pipelines call. It can be used to return the next set of pipelines in the list.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CodePipelineClientTypes {
    /// Returns a summary of a pipeline.
    public struct PipelineSummary {
        /// The date and time the pipeline was created, in timestamp format.
        public var created: Foundation.Date?
        /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
        public var executionMode: CodePipelineClientTypes.ExecutionMode?
        /// The name of the pipeline.
        public var name: Swift.String?
        /// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
        ///
        /// * V1 type pipelines have a JSON structure that contains standard pipeline, stage, and action-level parameters.
        ///
        /// * V2 type pipelines have the same structure as a V1 type, along with additional parameters for release safety and trigger configuration.
        ///
        ///
        /// Including V2 parameters, such as triggers on Git tags, in the pipeline JSON when creating or updating a pipeline will result in the pipeline having the V2 type of pipeline and the associated costs. For information about pricing for CodePipeline, see [Pricing](http://aws.amazon.com/codepipeline/pricing/). For information about which type of pipeline to choose, see [What type of pipeline is right for me?](https://docs.aws.amazon.com/codepipeline/latest/userguide/pipeline-types-planning.html).
        public var pipelineType: CodePipelineClientTypes.PipelineType?
        /// The date and time of the last update to the pipeline, in timestamp format.
        public var updated: Foundation.Date?
        /// The version number of the pipeline.
        public var version: Swift.Int?

        public init(
            created: Foundation.Date? = nil,
            executionMode: CodePipelineClientTypes.ExecutionMode? = nil,
            name: Swift.String? = nil,
            pipelineType: CodePipelineClientTypes.PipelineType? = nil,
            updated: Foundation.Date? = nil,
            version: Swift.Int? = nil
        )
        {
            self.created = created
            self.executionMode = executionMode
            self.name = name
            self.pipelineType = pipelineType
            self.updated = updated
            self.version = version
        }
    }

}

/// Represents the output of a ListPipelines action.
public struct ListPipelinesOutput {
    /// If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list pipelines call to return the next set of pipelines in the list.
    public var nextToken: Swift.String?
    /// The list of pipelines.
    public var pipelines: [CodePipelineClientTypes.PipelineSummary]?

    public init(
        nextToken: Swift.String? = nil,
        pipelines: [CodePipelineClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelines = pipelines
    }
}

extension CodePipelineClientTypes {
    /// Filter values for the rule execution.
    public struct RuleExecutionFilter {
        /// The field that specifies to filter on the latest execution in the pipeline. Filtering on the latest execution is available for executions run on or after February 08, 2024.
        public var latestInPipelineExecution: CodePipelineClientTypes.LatestInPipelineExecutionFilter?
        /// The pipeline execution ID used to filter rule execution history.
        public var pipelineExecutionId: Swift.String?

        public init(
            latestInPipelineExecution: CodePipelineClientTypes.LatestInPipelineExecutionFilter? = nil,
            pipelineExecutionId: Swift.String? = nil
        )
        {
            self.latestInPipelineExecution = latestInPipelineExecution
            self.pipelineExecutionId = pipelineExecutionId
        }
    }

}

public struct ListRuleExecutionsInput {
    /// Input information used to filter rule execution history.
    public var filter: CodePipelineClientTypes.RuleExecutionFilter?
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListRuleExecutions call, which can be used to return the next set of rule executions in the list.
    public var nextToken: Swift.String?
    /// The name of the pipeline for which you want to get execution summary information.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        filter: CodePipelineClientTypes.RuleExecutionFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
    }
}

extension CodePipelineClientTypes {
    /// Input information used for a rule execution.
    public struct RuleExecutionInput {
        /// Configuration data for a rule execution, such as the resolved values for that run.
        public var configuration: [Swift.String: Swift.String]?
        /// Details of input artifacts of the rule that correspond to the rule execution.
        public var inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]?
        /// The Amazon Web Services Region for the rule, such as us-east-1.
        public var region: Swift.String?
        /// Configuration data for a rule execution with all variable references replaced with their real values for the execution.
        public var resolvedConfiguration: [Swift.String: Swift.String]?
        /// The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.
        public var roleArn: Swift.String?
        /// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
        public var ruleTypeId: CodePipelineClientTypes.RuleTypeId?

        public init(
            configuration: [Swift.String: Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]? = nil,
            region: Swift.String? = nil,
            resolvedConfiguration: [Swift.String: Swift.String]? = nil,
            roleArn: Swift.String? = nil,
            ruleTypeId: CodePipelineClientTypes.RuleTypeId? = nil
        )
        {
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.region = region
            self.resolvedConfiguration = resolvedConfiguration
            self.roleArn = roleArn
            self.ruleTypeId = ruleTypeId
        }
    }

}

extension CodePipelineClientTypes {
    /// Execution result information, such as the external execution ID.
    public struct RuleExecutionResult {
        /// Represents information about an error in CodePipeline.
        public var errorDetails: CodePipelineClientTypes.ErrorDetails?
        /// The external ID for the rule execution.
        public var externalExecutionId: Swift.String?
        /// The external provider summary for the rule execution.
        public var externalExecutionSummary: Swift.String?
        /// The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the rule.
        public var externalExecutionUrl: Swift.String?

        public init(
            errorDetails: CodePipelineClientTypes.ErrorDetails? = nil,
            externalExecutionId: Swift.String? = nil,
            externalExecutionSummary: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil
        )
        {
            self.errorDetails = errorDetails
            self.externalExecutionId = externalExecutionId
            self.externalExecutionSummary = externalExecutionSummary
            self.externalExecutionUrl = externalExecutionUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// Output details listed for a rule execution, such as the rule execution result.
    public struct RuleExecutionOutput {
        /// Execution result information listed in the output details for a rule execution.
        public var executionResult: CodePipelineClientTypes.RuleExecutionResult?

        public init(
            executionResult: CodePipelineClientTypes.RuleExecutionResult? = nil
        )
        {
            self.executionResult = executionResult
        }
    }

}

extension CodePipelineClientTypes {
    /// The details of the runs for a rule and the results produced on an artifact as it passes through stages in the pipeline.
    public struct RuleExecutionDetail {
        /// Input details for the rule execution, such as role ARN, Region, and input artifacts.
        public var input: CodePipelineClientTypes.RuleExecutionInput?
        /// The date and time of the last change to the rule execution, in timestamp format.
        public var lastUpdateTime: Foundation.Date?
        /// Output details for the rule execution, such as the rule execution result.
        public var output: CodePipelineClientTypes.RuleExecutionOutput?
        /// The ID of the pipeline execution in the stage where the rule was run. Use the [GetPipelineState] action to retrieve the current pipelineExecutionId of the stage.
        public var pipelineExecutionId: Swift.String?
        /// The version number of the pipeline with the stage where the rule was run.
        public var pipelineVersion: Swift.Int?
        /// The ID of the run for the rule.
        public var ruleExecutionId: Swift.String?
        /// The name of the rule that was run in the stage.
        public var ruleName: Swift.String?
        /// The name of the stage where the rule was run.
        public var stageName: Swift.String?
        /// The start time of the rule execution.
        public var startTime: Foundation.Date?
        /// The status of the rule execution. Status categories are InProgress, Succeeded, and Failed.
        public var status: CodePipelineClientTypes.RuleExecutionStatus?
        /// The ARN of the user who changed the rule execution details.
        public var updatedBy: Swift.String?

        public init(
            input: CodePipelineClientTypes.RuleExecutionInput? = nil,
            lastUpdateTime: Foundation.Date? = nil,
            output: CodePipelineClientTypes.RuleExecutionOutput? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineVersion: Swift.Int? = nil,
            ruleExecutionId: Swift.String? = nil,
            ruleName: Swift.String? = nil,
            stageName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            status: CodePipelineClientTypes.RuleExecutionStatus? = nil,
            updatedBy: Swift.String? = nil
        )
        {
            self.input = input
            self.lastUpdateTime = lastUpdateTime
            self.output = output
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineVersion = pipelineVersion
            self.ruleExecutionId = ruleExecutionId
            self.ruleName = ruleName
            self.stageName = stageName
            self.startTime = startTime
            self.status = status
            self.updatedBy = updatedBy
        }
    }

}

public struct ListRuleExecutionsOutput {
    /// A token that can be used in the next ListRuleExecutions call. To view all items in the list, continue to call this operation with each subsequent token until no more nextToken values are returned.
    public var nextToken: Swift.String?
    /// Details about the output for listing rule executions.
    public var ruleExecutionDetails: [CodePipelineClientTypes.RuleExecutionDetail]?

    public init(
        nextToken: Swift.String? = nil,
        ruleExecutionDetails: [CodePipelineClientTypes.RuleExecutionDetail]? = nil
    )
    {
        self.nextToken = nextToken
        self.ruleExecutionDetails = ruleExecutionDetails
    }
}

public struct ListRuleTypesInput {
    /// The rule Region to filter on.
    public var regionFilter: Swift.String?
    /// The rule owner to filter on.
    public var ruleOwnerFilter: CodePipelineClientTypes.RuleOwner?

    public init(
        regionFilter: Swift.String? = nil,
        ruleOwnerFilter: CodePipelineClientTypes.RuleOwner? = nil
    )
    {
        self.regionFilter = regionFilter
        self.ruleOwnerFilter = ruleOwnerFilter
    }
}

extension CodePipelineClientTypes {

    public enum RuleConfigurationPropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case boolean
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleConfigurationPropertyType] {
            return [
                .boolean,
                .number,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a rule configuration property.
    public struct RuleConfigurationProperty {
        /// The description of the action configuration property that is displayed to users.
        public var description: Swift.String?
        /// Whether the configuration property is a key.
        /// This member is required.
        public var key: Swift.Bool
        /// The name of the rule configuration property.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates whether the property can be queried. If you create a pipeline with a condition and rule, and that rule contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
        public var queryable: Swift.Bool
        /// Whether the configuration property is a required value.
        /// This member is required.
        public var `required`: Swift.Bool
        /// Whether the configuration property is secret. When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.
        /// This member is required.
        public var secret: Swift.Bool
        /// The type of the configuration property.
        public var type: CodePipelineClientTypes.RuleConfigurationPropertyType?

        public init(
            description: Swift.String? = nil,
            key: Swift.Bool = false,
            name: Swift.String? = nil,
            queryable: Swift.Bool = false,
            `required`: Swift.Bool = false,
            secret: Swift.Bool = false,
            type: CodePipelineClientTypes.RuleConfigurationPropertyType? = nil
        )
        {
            self.description = description
            self.key = key
            self.name = name
            self.queryable = queryable
            self.`required` = `required`
            self.secret = secret
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    /// Returns information about the settings for a rule type.
    public struct RuleTypeSettings {
        /// The URL returned to the CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for a CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
        public var entityUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for CodeDeploy. This link is shown on the pipeline view page in the CodePipeline console and provides a link to the execution entity of the external action.
        public var executionUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: Swift.String?
        /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
        public var thirdPartyConfigurationUrl: Swift.String?

        public init(
            entityUrlTemplate: Swift.String? = nil,
            executionUrlTemplate: Swift.String? = nil,
            revisionUrlTemplate: Swift.String? = nil,
            thirdPartyConfigurationUrl: Swift.String? = nil
        )
        {
            self.entityUrlTemplate = entityUrlTemplate
            self.executionUrlTemplate = executionUrlTemplate
            self.revisionUrlTemplate = revisionUrlTemplate
            self.thirdPartyConfigurationUrl = thirdPartyConfigurationUrl
        }
    }

}

extension CodePipelineClientTypes {
    /// The rule type, which is made up of the combined values for category, owner, provider, and version.
    public struct RuleType {
        /// Represents information about a rule type.
        /// This member is required.
        public var id: CodePipelineClientTypes.RuleTypeId?
        /// Returns information about the details of an artifact.
        /// This member is required.
        public var inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
        /// The configuration properties for the rule type.
        public var ruleConfigurationProperties: [CodePipelineClientTypes.RuleConfigurationProperty]?
        /// Returns information about the settings for a rule type.
        public var settings: CodePipelineClientTypes.RuleTypeSettings?

        public init(
            id: CodePipelineClientTypes.RuleTypeId? = nil,
            inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
            ruleConfigurationProperties: [CodePipelineClientTypes.RuleConfigurationProperty]? = nil,
            settings: CodePipelineClientTypes.RuleTypeSettings? = nil
        )
        {
            self.id = id
            self.inputArtifactDetails = inputArtifactDetails
            self.ruleConfigurationProperties = ruleConfigurationProperties
            self.settings = settings
        }
    }

}

public struct ListRuleTypesOutput {
    /// Lists the rules that are configured for the condition.
    /// This member is required.
    public var ruleTypes: [CodePipelineClientTypes.RuleType]?

    public init(
        ruleTypes: [CodePipelineClientTypes.RuleType]? = nil
    )
    {
        self.ruleTypes = ruleTypes
    }
}

/// The specified resource ARN is invalid.
public struct InvalidArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource was specified in an invalid format.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous API call, which would be used to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource to get tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent API call to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.
    public var nextToken: Swift.String?
    /// The tags for the resource.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct ListWebhooksInput {
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListWebhooks call, which can be used to return the next set of webhooks in the list.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension CodePipelineClientTypes {

    public enum WebhookAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case githubHmac
        case ip
        case unauthenticated
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookAuthenticationType] {
            return [
                .githubHmac,
                .ip,
                .unauthenticated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .githubHmac: return "GITHUB_HMAC"
            case .ip: return "IP"
            case .unauthenticated: return "UNAUTHENTICATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// The authentication applied to incoming webhook trigger requests.
    public struct WebhookAuthConfiguration {
        /// The property used to configure acceptance of webhooks in an IP address range. For IP, only the AllowedIPRange property must be set. This property must be set to a valid CIDR range.
        public var allowedIPRange: Swift.String?
        /// The property used to configure GitHub authentication. For GITHUB_HMAC, only the SecretToken property must be set. When creating CodePipeline webhooks, do not use your own credentials or reuse the same secret token across multiple webhooks. For optimal security, generate a unique secret token for each webhook you create. The secret token is an arbitrary string that you provide, which GitHub uses to compute and sign the webhook payloads sent to CodePipeline, for protecting the integrity and authenticity of the webhook payloads. Using your own credentials or reusing the same token across multiple webhooks can lead to security vulnerabilities. If a secret token was provided, it will be redacted in the response.
        public var secretToken: Swift.String?

        public init(
            allowedIPRange: Swift.String? = nil,
            secretToken: Swift.String? = nil
        )
        {
            self.allowedIPRange = allowedIPRange
            self.secretToken = secretToken
        }
    }

}

extension CodePipelineClientTypes {
    /// The event criteria that specify when a webhook notification is sent to your URL.
    public struct WebhookFilterRule {
        /// A JsonPath expression that is applied to the body/payload of the webhook. The value selected by the JsonPath expression must match the value specified in the MatchEquals field. Otherwise, the request is ignored. For more information, see [Java JsonPath implementation](https://github.com/json-path/JsonPath) in GitHub.
        /// This member is required.
        public var jsonPath: Swift.String?
        /// The value selected by the JsonPath expression must match what is supplied in the MatchEquals field. Otherwise, the request is ignored. Properties from the target action configuration can be included as placeholders in this value by surrounding the action configuration key with curly brackets. For example, if the value supplied here is "refs/heads/{Branch}" and the target action has an action configuration property called "Branch" with a value of "main", the MatchEquals value is evaluated as "refs/heads/main". For a list of action configuration properties for built-in action types, see [Pipeline Structure Reference Action Requirements](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements).
        public var matchEquals: Swift.String?

        public init(
            jsonPath: Swift.String? = nil,
            matchEquals: Swift.String? = nil
        )
        {
            self.jsonPath = jsonPath
            self.matchEquals = matchEquals
        }
    }

}

extension CodePipelineClientTypes {
    /// Represents information about a webhook and its definition.
    public struct WebhookDefinition {
        /// Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED. When creating CodePipeline webhooks, do not use your own credentials or reuse the same secret token across multiple webhooks. For optimal security, generate a unique secret token for each webhook you create. The secret token is an arbitrary string that you provide, which GitHub uses to compute and sign the webhook payloads sent to CodePipeline, for protecting the integrity and authenticity of the webhook payloads. Using your own credentials or reusing the same token across multiple webhooks can lead to security vulnerabilities. If a secret token was provided, it will be redacted in the response.
        ///
        /// * For information about the authentication scheme implemented by GITHUB_HMAC, see [Securing your webhooks](https://developer.github.com/webhooks/securing/) on the GitHub Developer website.
        ///
        /// * IP rejects webhooks trigger requests unless they originate from an IP address in the IP range whitelisted in the authentication configuration.
        ///
        /// * UNAUTHENTICATED accepts all webhook trigger requests regardless of origin.
        /// This member is required.
        public var authentication: CodePipelineClientTypes.WebhookAuthenticationType?
        /// Properties that configure the authentication applied to incoming webhook trigger requests. The required properties depend on the authentication type. For GITHUB_HMAC, only the SecretToken property must be set. For IP, only the AllowedIPRange property must be set to a valid CIDR range. For UNAUTHENTICATED, no properties can be set.
        /// This member is required.
        public var authenticationConfiguration: CodePipelineClientTypes.WebhookAuthConfiguration?
        /// A list of rules applied to the body/payload sent in the POST request to a webhook URL. All defined rules must pass for the request to be accepted and the pipeline started.
        /// This member is required.
        public var filters: [CodePipelineClientTypes.WebhookFilterRule]?
        /// The name of the webhook.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
        /// This member is required.
        public var targetAction: Swift.String?
        /// The name of the pipeline you want to connect to the webhook.
        /// This member is required.
        public var targetPipeline: Swift.String?

        public init(
            authentication: CodePipelineClientTypes.WebhookAuthenticationType? = nil,
            authenticationConfiguration: CodePipelineClientTypes.WebhookAuthConfiguration? = nil,
            filters: [CodePipelineClientTypes.WebhookFilterRule]? = nil,
            name: Swift.String? = nil,
            targetAction: Swift.String? = nil,
            targetPipeline: Swift.String? = nil
        )
        {
            self.authentication = authentication
            self.authenticationConfiguration = authenticationConfiguration
            self.filters = filters
            self.name = name
            self.targetAction = targetAction
            self.targetPipeline = targetPipeline
        }
    }

}

extension CodePipelineClientTypes {
    /// The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.
    public struct ListWebhookItem {
        /// The Amazon Resource Name (ARN) of the webhook.
        public var arn: Swift.String?
        /// The detail returned for each webhook, such as the webhook authentication type and filter rules.
        /// This member is required.
        public var definition: CodePipelineClientTypes.WebhookDefinition?
        /// The number code of the error.
        public var errorCode: Swift.String?
        /// The text of the error message about the webhook.
        public var errorMessage: Swift.String?
        /// The date and time a webhook was last successfully triggered, in timestamp format.
        public var lastTriggered: Foundation.Date?
        /// Specifies the tags applied to the webhook.
        public var tags: [CodePipelineClientTypes.Tag]?
        /// A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.
        /// This member is required.
        public var url: Swift.String?

        public init(
            arn: Swift.String? = nil,
            definition: CodePipelineClientTypes.WebhookDefinition? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastTriggered: Foundation.Date? = nil,
            tags: [CodePipelineClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.definition = definition
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastTriggered = lastTriggered
            self.tags = tags
            self.url = url
        }
    }

}

public struct ListWebhooksOutput {
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent ListWebhooks call to return the next set of webhooks in the list.
    public var nextToken: Swift.String?
    /// The JSON detail returned for each webhook in the list output for the ListWebhooks call.
    public var webhooks: [CodePipelineClientTypes.ListWebhookItem]?

    public init(
        nextToken: Swift.String? = nil,
        webhooks: [CodePipelineClientTypes.ListWebhookItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.webhooks = webhooks
    }
}

/// The pipeline has reached the limit for concurrent pipeline executions.
public struct ConcurrentPipelineExecutionsLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentPipelineExecutionsLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unable to override because the condition does not allow overrides.
public struct ConditionNotOverridableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConditionNotOverridableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Your request cannot be handled because the pipeline is busy handling ongoing activities. Try again later.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The stage has failed in a later run of the pipeline and the pipelineExecutionId associated with the request is out of date.
public struct NotLatestPipelineExecutionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotLatestPipelineExecutionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum ConditionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case beforeEntry
        case onSuccess
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionType] {
            return [
                .beforeEntry,
                .onSuccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .beforeEntry: return "BEFORE_ENTRY"
            case .onSuccess: return "ON_SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct OverrideStageConditionInput {
    /// The type of condition to override for the stage, such as entry conditions, failure conditions, or success conditions.
    /// This member is required.
    public var conditionType: CodePipelineClientTypes.ConditionType?
    /// The ID of the pipeline execution for the override.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline with the stage that will override the condition.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage for the override.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        conditionType: CodePipelineClientTypes.ConditionType? = nil,
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.conditionType = conditionType
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
        self.stageName = stageName
    }
}

/// Represents the input of a PollForJobs action.
public struct PollForJobsInput {
    /// Represents information about an action type.
    /// This member is required.
    public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
    /// The maximum number of jobs to return in a poll for jobs call.
    public var maxBatchSize: Swift.Int?
    /// A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.
    public var queryParam: [Swift.String: Swift.String]?

    public init(
        actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
        maxBatchSize: Swift.Int? = nil,
        queryParam: [Swift.String: Swift.String]? = nil
    )
    {
        self.actionTypeId = actionTypeId
        self.maxBatchSize = maxBatchSize
        self.queryParam = queryParam
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a job.
    public struct Job {
        /// The ID of the Amazon Web Services account to use when performing the job.
        public var accountId: Swift.String?
        /// Other data about a job.
        public var data: CodePipelineClientTypes.JobData?
        /// The unique system-generated ID of the job.
        public var id: Swift.String?
        /// A system-generated random number that CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an [AcknowledgeJob] request.
        public var nonce: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            data: CodePipelineClientTypes.JobData? = nil,
            id: Swift.String? = nil,
            nonce: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.data = data
            self.id = id
            self.nonce = nonce
        }
    }

}

/// Represents the output of a PollForJobs action.
public struct PollForJobsOutput {
    /// Information about the jobs to take action on.
    public var jobs: [CodePipelineClientTypes.Job]?

    public init(
        jobs: [CodePipelineClientTypes.Job]? = nil
    )
    {
        self.jobs = jobs
    }
}

/// Represents the input of a PollForThirdPartyJobs action.
public struct PollForThirdPartyJobsInput {
    /// Represents information about an action type.
    /// This member is required.
    public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
    /// The maximum number of jobs to return in a poll for jobs call.
    public var maxBatchSize: Swift.Int?

    public init(
        actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
        maxBatchSize: Swift.Int? = nil
    )
    {
        self.actionTypeId = actionTypeId
        self.maxBatchSize = maxBatchSize
    }
}

extension CodePipelineClientTypes {
    /// A response to a PollForThirdPartyJobs request returned by CodePipeline when there is a job to be worked on by a partner action.
    public struct ThirdPartyJob {
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientId: Swift.String?
        /// The identifier used to identify the job in CodePipeline.
        public var jobId: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            jobId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.jobId = jobId
        }
    }

}

/// Represents the output of a PollForThirdPartyJobs action.
public struct PollForThirdPartyJobsOutput {
    /// Information about the jobs to take action on.
    public var jobs: [CodePipelineClientTypes.ThirdPartyJob]?

    public init(
        jobs: [CodePipelineClientTypes.ThirdPartyJob]? = nil
    )
    {
        self.jobs = jobs
    }
}

/// Represents the input of a PutActionRevision action.
public struct PutActionRevisionInput {
    /// The name of the action that processes the revision.
    /// This member is required.
    public var actionName: Swift.String?
    /// Represents information about the version (or revision) of an action.
    /// This member is required.
    public var actionRevision: CodePipelineClientTypes.ActionRevision?
    /// The name of the pipeline that starts processing the revision to the source.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage that contains the action that acts on the revision.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        actionName: Swift.String? = nil,
        actionRevision: CodePipelineClientTypes.ActionRevision? = nil,
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.actionName = actionName
        self.actionRevision = actionRevision
        self.pipelineName = pipelineName
        self.stageName = stageName
    }
}

/// Represents the output of a PutActionRevision action.
public struct PutActionRevisionOutput {
    /// Indicates whether the artifact revision was previously used in an execution of the specified pipeline.
    public var newRevision: Swift.Bool
    /// The ID of the current workflow state of the pipeline.
    public var pipelineExecutionId: Swift.String?

    public init(
        newRevision: Swift.Bool = false,
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.newRevision = newRevision
        self.pipelineExecutionId = pipelineExecutionId
    }
}

/// The approval request already received a response or has expired.
public struct InvalidApprovalTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidApprovalTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a PutApprovalResult action.
public struct PutApprovalResultInput {
    /// The name of the action for which approval is requested.
    /// This member is required.
    public var actionName: Swift.String?
    /// The name of the pipeline that contains the action.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Represents information about the result of the approval request.
    /// This member is required.
    public var result: CodePipelineClientTypes.ApprovalResult?
    /// The name of the stage that contains the action.
    /// This member is required.
    public var stageName: Swift.String?
    /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the [GetPipelineState] action. It is used to validate that the approval request corresponding to this token is still valid.
    /// This member is required.
    public var token: Swift.String?

    public init(
        actionName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        result: CodePipelineClientTypes.ApprovalResult? = nil,
        stageName: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.actionName = actionName
        self.pipelineName = pipelineName
        self.result = result
        self.stageName = stageName
        self.token = token
    }
}

/// Represents the output of a PutApprovalResult action.
public struct PutApprovalResultOutput {
    /// The timestamp showing when the approval or rejection was submitted.
    public var approvedAt: Foundation.Date?

    public init(
        approvedAt: Foundation.Date? = nil
    )
    {
        self.approvedAt = approvedAt
    }
}

/// The job state was specified in an invalid format.
public struct InvalidJobStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidJobStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum FailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case configurationerror
        case jobfailed
        case permissionerror
        case revisionoutofsync
        case revisionunavailable
        case systemunavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureType] {
            return [
                .configurationerror,
                .jobfailed,
                .permissionerror,
                .revisionoutofsync,
                .revisionunavailable,
                .systemunavailable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .configurationerror: return "ConfigurationError"
            case .jobfailed: return "JobFailed"
            case .permissionerror: return "PermissionError"
            case .revisionoutofsync: return "RevisionOutOfSync"
            case .revisionunavailable: return "RevisionUnavailable"
            case .systemunavailable: return "SystemUnavailable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// Represents information about failure details.
    public struct FailureDetails {
        /// The external ID of the run of the action that failed.
        public var externalExecutionId: Swift.String?
        /// The message about the failure.
        /// This member is required.
        public var message: Swift.String?
        /// The type of the failure.
        /// This member is required.
        public var type: CodePipelineClientTypes.FailureType?

        public init(
            externalExecutionId: Swift.String? = nil,
            message: Swift.String? = nil,
            type: CodePipelineClientTypes.FailureType? = nil
        )
        {
            self.externalExecutionId = externalExecutionId
            self.message = message
            self.type = type
        }
    }

}

/// Represents the input of a PutJobFailureResult action.
public struct PutJobFailureResultInput {
    /// The details about the failure of a job.
    /// This member is required.
    public var failureDetails: CodePipelineClientTypes.FailureDetails?
    /// The unique system-generated ID of the job that failed. This is the same ID returned from PollForJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        failureDetails: CodePipelineClientTypes.FailureDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.failureDetails = failureDetails
        self.jobId = jobId
    }
}

/// Exceeded the total size limit for all variables in the pipeline.
public struct OutputVariablesSizeExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OutputVariablesSizeExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a current revision.
    public struct CurrentRevision {
        /// The change identifier for the current revision.
        /// This member is required.
        public var changeIdentifier: Swift.String?
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: Foundation.Date?
        /// The revision ID of the current version of an artifact.
        /// This member is required.
        public var revision: Swift.String?
        /// The summary of the most recent revision of the artifact.
        public var revisionSummary: Swift.String?

        public init(
            changeIdentifier: Swift.String? = nil,
            created: Foundation.Date? = nil,
            revision: Swift.String? = nil,
            revisionSummary: Swift.String? = nil
        )
        {
            self.changeIdentifier = changeIdentifier
            self.created = created
            self.revision = revision
            self.revisionSummary = revisionSummary
        }
    }

}

extension CodePipelineClientTypes {
    /// The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    public struct ExecutionDetails {
        /// The system-generated unique ID of this action used to identify this job worker in any external systems, such as CodeDeploy.
        public var externalExecutionId: Swift.String?
        /// The percentage of work completed on the action, represented on a scale of 0 to 100 percent.
        public var percentComplete: Swift.Int?
        /// The summary of the current status of the actions.
        public var summary: Swift.String?

        public init(
            externalExecutionId: Swift.String? = nil,
            percentComplete: Swift.Int? = nil,
            summary: Swift.String? = nil
        )
        {
            self.externalExecutionId = externalExecutionId
            self.percentComplete = percentComplete
            self.summary = summary
        }
    }

}

/// Represents the input of a PutJobSuccessResult action.
public struct PutJobSuccessResultInput {
    /// A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
    public var continuationToken: Swift.String?
    /// The ID of the current revision of the artifact successfully worked on by the job.
    public var currentRevision: CodePipelineClientTypes.CurrentRevision?
    /// The execution details of the successful job, such as the actions taken by the job worker.
    public var executionDetails: CodePipelineClientTypes.ExecutionDetails?
    /// The unique system-generated ID of the job that succeeded. This is the same ID returned from PollForJobs.
    /// This member is required.
    public var jobId: Swift.String?
    /// Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. outputVariables can be included only when there is no continuation token on the request.
    public var outputVariables: [Swift.String: Swift.String]?

    public init(
        continuationToken: Swift.String? = nil,
        currentRevision: CodePipelineClientTypes.CurrentRevision? = nil,
        executionDetails: CodePipelineClientTypes.ExecutionDetails? = nil,
        jobId: Swift.String? = nil,
        outputVariables: [Swift.String: Swift.String]? = nil
    )
    {
        self.continuationToken = continuationToken
        self.currentRevision = currentRevision
        self.executionDetails = executionDetails
        self.jobId = jobId
        self.outputVariables = outputVariables
    }
}

/// Represents the input of a PutThirdPartyJobFailureResult action.
public struct PutThirdPartyJobFailureResultInput {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Represents information about failure details.
    /// This member is required.
    public var failureDetails: CodePipelineClientTypes.FailureDetails?
    /// The ID of the job that failed. This is the same ID returned from PollForThirdPartyJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        failureDetails: CodePipelineClientTypes.FailureDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.failureDetails = failureDetails
        self.jobId = jobId
    }
}

/// Represents the input of a PutThirdPartyJobSuccessResult action.
public struct PutThirdPartyJobSuccessResultInput {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A token generated by a job worker, such as a CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
    public var continuationToken: Swift.String?
    /// Represents information about a current revision.
    public var currentRevision: CodePipelineClientTypes.CurrentRevision?
    /// The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    public var executionDetails: CodePipelineClientTypes.ExecutionDetails?
    /// The ID of the job that successfully completed. This is the same ID returned from PollForThirdPartyJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        currentRevision: CodePipelineClientTypes.CurrentRevision? = nil,
        executionDetails: CodePipelineClientTypes.ExecutionDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.continuationToken = continuationToken
        self.currentRevision = currentRevision
        self.executionDetails = executionDetails
        self.jobId = jobId
    }
}

/// The specified authentication type is in an invalid format.
public struct InvalidWebhookAuthenticationParametersException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidWebhookAuthenticationParametersException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified event filter rule is in an invalid format.
public struct InvalidWebhookFilterPatternException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidWebhookFilterPatternException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutWebhookInput {
    /// The tags for the webhook.
    public var tags: [CodePipelineClientTypes.Tag]?
    /// The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
    /// This member is required.
    public var webhook: CodePipelineClientTypes.WebhookDefinition?

    public init(
        tags: [CodePipelineClientTypes.Tag]? = nil,
        webhook: CodePipelineClientTypes.WebhookDefinition? = nil
    )
    {
        self.tags = tags
        self.webhook = webhook
    }
}

public struct PutWebhookOutput {
    /// The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
    public var webhook: CodePipelineClientTypes.ListWebhookItem?

    public init(
        webhook: CodePipelineClientTypes.ListWebhookItem? = nil
    )
    {
        self.webhook = webhook
    }
}

public struct RegisterWebhookWithThirdPartyInput {
    /// The name of an existing webhook created with PutWebhook to register with a supported third party.
    public var webhookName: Swift.String?

    public init(
        webhookName: Swift.String? = nil
    )
    {
        self.webhookName = webhookName
    }
}

public struct RegisterWebhookWithThirdPartyOutput {

    public init() { }
}

/// Unable to retry. The pipeline structure or stage state might have changed while actions awaited retry, or the stage contains no failed actions.
public struct StageNotRetryableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message provided to the user in the event of an exception.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "StageNotRetryableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodePipelineClientTypes {

    public enum StageRetryMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allActions
        case failedActions
        case sdkUnknown(Swift.String)

        public static var allCases: [StageRetryMode] {
            return [
                .allActions,
                .failedActions
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allActions: return "ALL_ACTIONS"
            case .failedActions: return "FAILED_ACTIONS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a RetryStageExecution action.
public struct RetryStageExecutionInput {
    /// The ID of the pipeline execution in the failed stage to be retried. Use the [GetPipelineState] action to retrieve the current pipelineExecutionId of the failed stage
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline that contains the failed stage.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The scope of the retry attempt.
    /// This member is required.
    public var retryMode: CodePipelineClientTypes.StageRetryMode?
    /// The name of the failed stage to be retried.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        retryMode: CodePipelineClientTypes.StageRetryMode? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
        self.retryMode = retryMode
        self.stageName = stageName
    }
}

/// Represents the output of a RetryStageExecution action.
public struct RetryStageExecutionOutput {
    /// The ID of the current workflow execution in the failed stage.
    public var pipelineExecutionId: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

/// The specified pipeline execution is outdated and cannot be used as a target pipeline execution for rollback.
public struct PipelineExecutionOutdatedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineExecutionOutdatedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unable to roll back the stage. The cause might be if the pipeline version has changed since the target pipeline execution was deployed, the stage is currently running, or an incorrect target pipeline execution ID was provided.
public struct UnableToRollbackStageException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnableToRollbackStageException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RollbackStageInput {
    /// The name of the pipeline for which the stage will be rolled back.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage in the pipeline to be rolled back.
    /// This member is required.
    public var stageName: Swift.String?
    /// The pipeline execution ID for the stage to be rolled back to.
    /// This member is required.
    public var targetPipelineExecutionId: Swift.String?

    public init(
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil,
        targetPipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
        self.stageName = stageName
        self.targetPipelineExecutionId = targetPipelineExecutionId
    }
}

public struct RollbackStageOutput {
    /// The execution ID of the pipeline execution for the stage that has been rolled back.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

extension CodePipelineClientTypes {

    public enum SourceRevisionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commitId
        case imageDigest
        case s3ObjectKey
        case s3ObjectVersionId
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceRevisionType] {
            return [
                .commitId,
                .imageDigest,
                .s3ObjectKey,
                .s3ObjectVersionId
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commitId: return "COMMIT_ID"
            case .imageDigest: return "IMAGE_DIGEST"
            case .s3ObjectKey: return "S3_OBJECT_KEY"
            case .s3ObjectVersionId: return "S3_OBJECT_VERSION_ID"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodePipelineClientTypes {
    /// A list that allows you to specify, or override, the source revision for a pipeline execution that's being started. A source revision is the version with all the changes to your application code, or source artifact, for the pipeline execution. For the S3_OBJECT_VERSION_ID and S3_OBJECT_KEY types of source revisions, either of the types can be used independently, or they can be used together to override the source with a specific ObjectKey and VersionID.
    public struct SourceRevisionOverride {
        /// The name of the action where the override will be applied.
        /// This member is required.
        public var actionName: Swift.String?
        /// The type of source revision, based on the source provider. For example, the revision type for the CodeCommit action provider is the commit ID.
        /// This member is required.
        public var revisionType: CodePipelineClientTypes.SourceRevisionType?
        /// The source revision, or version of your source artifact, with the changes that you want to run in the pipeline execution.
        /// This member is required.
        public var revisionValue: Swift.String?

        public init(
            actionName: Swift.String? = nil,
            revisionType: CodePipelineClientTypes.SourceRevisionType? = nil,
            revisionValue: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.revisionType = revisionType
            self.revisionValue = revisionValue
        }
    }

}

extension CodePipelineClientTypes {
    /// A pipeline-level variable used for a pipeline execution.
    public struct PipelineVariable {
        /// The name of a pipeline-level variable.
        /// This member is required.
        public var name: Swift.String?
        /// The value of a pipeline-level variable.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

/// Represents the input of a StartPipelineExecution action.
public struct StartPipelineExecutionInput {
    /// The system-generated unique ID used to identify a unique execution request.
    public var clientRequestToken: Swift.String?
    /// The name of the pipeline to start.
    /// This member is required.
    public var name: Swift.String?
    /// A list that allows you to specify, or override, the source revision for a pipeline execution that's being started. A source revision is the version with all the changes to your application code, or source artifact, for the pipeline execution.
    public var sourceRevisions: [CodePipelineClientTypes.SourceRevisionOverride]?
    /// A list that overrides pipeline variables for a pipeline execution that's being started. Variable names must match [A-Za-z0-9@\-_]+, and the values can be anything except an empty string.
    public var variables: [CodePipelineClientTypes.PipelineVariable]?

    public init(
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil,
        sourceRevisions: [CodePipelineClientTypes.SourceRevisionOverride]? = nil,
        variables: [CodePipelineClientTypes.PipelineVariable]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
        self.sourceRevisions = sourceRevisions
        self.variables = variables
    }
}

/// Represents the output of a StartPipelineExecution action.
public struct StartPipelineExecutionOutput {
    /// The unique system-generated ID of the pipeline execution that was started.
    public var pipelineExecutionId: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

/// The pipeline execution is already in a Stopping state. If you already chose to stop and wait, you cannot make that request again. You can choose to stop and abandon now, but be aware that this option can lead to failed tasks or out of sequence tasks. If you already chose to stop and abandon, you cannot make that request again.
public struct DuplicatedStopRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DuplicatedStopRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Unable to stop the pipeline execution. The execution might already be in a Stopped state, or it might no longer be in progress.
public struct PipelineExecutionNotStoppableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PipelineExecutionNotStoppableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct StopPipelineExecutionInput {
    /// Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions. This option can lead to failed or out-of-sequence tasks.
    public var abandon: Swift.Bool?
    /// The ID of the pipeline execution to be stopped in the current stage. Use the GetPipelineState action to retrieve the current pipelineExecutionId.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline to stop.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Use this option to enter comments, such as the reason the pipeline was stopped.
    public var reason: Swift.String?

    public init(
        abandon: Swift.Bool? = false,
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.abandon = abandon
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
        self.reason = reason
    }
}

public struct StopPipelineExecutionOutput {
    /// The unique system-generated ID of the pipeline execution that was stopped.
    public var pipelineExecutionId: Swift.String?

    public init(
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags you want to modify or add to the resource.
    /// This member is required.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) of the resource to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of keys for the tags to be removed from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput {

    public init() { }
}

/// The request failed because of an unknown error, exception, or failure.
public struct RequestFailedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RequestFailedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UpdateActionTypeInput {
    /// The action type definition for the action type to be updated.
    /// This member is required.
    public var actionType: CodePipelineClientTypes.ActionTypeDeclaration?

    public init(
        actionType: CodePipelineClientTypes.ActionTypeDeclaration? = nil
    )
    {
        self.actionType = actionType
    }
}

/// Represents the input of an UpdatePipeline action.
public struct UpdatePipelineInput {
    /// The name of the pipeline to be updated.
    /// This member is required.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init(
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.pipeline = pipeline
    }
}

/// Represents the output of an UpdatePipeline action.
public struct UpdatePipelineOutput {
    /// The structure of the updated pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init(
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.pipeline = pipeline
    }
}

extension AcknowledgeJobInput {

    static func urlPathProvider(_ value: AcknowledgeJobInput) -> Swift.String? {
        return "/"
    }
}

extension AcknowledgeThirdPartyJobInput {

    static func urlPathProvider(_ value: AcknowledgeThirdPartyJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCustomActionTypeInput {

    static func urlPathProvider(_ value: CreateCustomActionTypeInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePipelineInput {

    static func urlPathProvider(_ value: CreatePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCustomActionTypeInput {

    static func urlPathProvider(_ value: DeleteCustomActionTypeInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePipelineInput {

    static func urlPathProvider(_ value: DeletePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWebhookInput {

    static func urlPathProvider(_ value: DeleteWebhookInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterWebhookWithThirdPartyInput {

    static func urlPathProvider(_ value: DeregisterWebhookWithThirdPartyInput) -> Swift.String? {
        return "/"
    }
}

extension DisableStageTransitionInput {

    static func urlPathProvider(_ value: DisableStageTransitionInput) -> Swift.String? {
        return "/"
    }
}

extension EnableStageTransitionInput {

    static func urlPathProvider(_ value: EnableStageTransitionInput) -> Swift.String? {
        return "/"
    }
}

extension GetActionTypeInput {

    static func urlPathProvider(_ value: GetActionTypeInput) -> Swift.String? {
        return "/"
    }
}

extension GetJobDetailsInput {

    static func urlPathProvider(_ value: GetJobDetailsInput) -> Swift.String? {
        return "/"
    }
}

extension GetPipelineInput {

    static func urlPathProvider(_ value: GetPipelineInput) -> Swift.String? {
        return "/"
    }
}

extension GetPipelineExecutionInput {

    static func urlPathProvider(_ value: GetPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension GetPipelineStateInput {

    static func urlPathProvider(_ value: GetPipelineStateInput) -> Swift.String? {
        return "/"
    }
}

extension GetThirdPartyJobDetailsInput {

    static func urlPathProvider(_ value: GetThirdPartyJobDetailsInput) -> Swift.String? {
        return "/"
    }
}

extension ListActionExecutionsInput {

    static func urlPathProvider(_ value: ListActionExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListActionTypesInput {

    static func urlPathProvider(_ value: ListActionTypesInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelineExecutionsInput {

    static func urlPathProvider(_ value: ListPipelineExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelinesInput {

    static func urlPathProvider(_ value: ListPipelinesInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleExecutionsInput {

    static func urlPathProvider(_ value: ListRuleExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListRuleTypesInput {

    static func urlPathProvider(_ value: ListRuleTypesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListWebhooksInput {

    static func urlPathProvider(_ value: ListWebhooksInput) -> Swift.String? {
        return "/"
    }
}

extension OverrideStageConditionInput {

    static func urlPathProvider(_ value: OverrideStageConditionInput) -> Swift.String? {
        return "/"
    }
}

extension PollForJobsInput {

    static func urlPathProvider(_ value: PollForJobsInput) -> Swift.String? {
        return "/"
    }
}

extension PollForThirdPartyJobsInput {

    static func urlPathProvider(_ value: PollForThirdPartyJobsInput) -> Swift.String? {
        return "/"
    }
}

extension PutActionRevisionInput {

    static func urlPathProvider(_ value: PutActionRevisionInput) -> Swift.String? {
        return "/"
    }
}

extension PutApprovalResultInput {

    static func urlPathProvider(_ value: PutApprovalResultInput) -> Swift.String? {
        return "/"
    }
}

extension PutJobFailureResultInput {

    static func urlPathProvider(_ value: PutJobFailureResultInput) -> Swift.String? {
        return "/"
    }
}

extension PutJobSuccessResultInput {

    static func urlPathProvider(_ value: PutJobSuccessResultInput) -> Swift.String? {
        return "/"
    }
}

extension PutThirdPartyJobFailureResultInput {

    static func urlPathProvider(_ value: PutThirdPartyJobFailureResultInput) -> Swift.String? {
        return "/"
    }
}

extension PutThirdPartyJobSuccessResultInput {

    static func urlPathProvider(_ value: PutThirdPartyJobSuccessResultInput) -> Swift.String? {
        return "/"
    }
}

extension PutWebhookInput {

    static func urlPathProvider(_ value: PutWebhookInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterWebhookWithThirdPartyInput {

    static func urlPathProvider(_ value: RegisterWebhookWithThirdPartyInput) -> Swift.String? {
        return "/"
    }
}

extension RetryStageExecutionInput {

    static func urlPathProvider(_ value: RetryStageExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension RollbackStageInput {

    static func urlPathProvider(_ value: RollbackStageInput) -> Swift.String? {
        return "/"
    }
}

extension StartPipelineExecutionInput {

    static func urlPathProvider(_ value: StartPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension StopPipelineExecutionInput {

    static func urlPathProvider(_ value: StopPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateActionTypeInput {

    static func urlPathProvider(_ value: UpdateActionTypeInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePipelineInput {

    static func urlPathProvider(_ value: UpdatePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension AcknowledgeJobInput {

    static func write(value: AcknowledgeJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
        try writer["nonce"].write(value.nonce)
    }
}

extension AcknowledgeThirdPartyJobInput {

    static func write(value: AcknowledgeThirdPartyJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["jobId"].write(value.jobId)
        try writer["nonce"].write(value.nonce)
    }
}

extension CreateCustomActionTypeInput {

    static func write(value: CreateCustomActionTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["configurationProperties"].writeList(value.configurationProperties, memberWritingClosure: CodePipelineClientTypes.ActionConfigurationProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["inputArtifactDetails"].write(value.inputArtifactDetails, with: CodePipelineClientTypes.ArtifactDetails.write(value:to:))
        try writer["outputArtifactDetails"].write(value.outputArtifactDetails, with: CodePipelineClientTypes.ArtifactDetails.write(value:to:))
        try writer["provider"].write(value.provider)
        try writer["settings"].write(value.settings, with: CodePipelineClientTypes.ActionTypeSettings.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodePipelineClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["version"].write(value.version)
    }
}

extension CreatePipelineInput {

    static func write(value: CreatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipeline"].write(value.pipeline, with: CodePipelineClientTypes.PipelineDeclaration.write(value:to:))
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodePipelineClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteCustomActionTypeInput {

    static func write(value: DeleteCustomActionTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["provider"].write(value.provider)
        try writer["version"].write(value.version)
    }
}

extension DeletePipelineInput {

    static func write(value: DeletePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteWebhookInput {

    static func write(value: DeleteWebhookInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeregisterWebhookWithThirdPartyInput {

    static func write(value: DeregisterWebhookWithThirdPartyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["webhookName"].write(value.webhookName)
    }
}

extension DisableStageTransitionInput {

    static func write(value: DisableStageTransitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineName"].write(value.pipelineName)
        try writer["reason"].write(value.reason)
        try writer["stageName"].write(value.stageName)
        try writer["transitionType"].write(value.transitionType)
    }
}

extension EnableStageTransitionInput {

    static func write(value: EnableStageTransitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineName"].write(value.pipelineName)
        try writer["stageName"].write(value.stageName)
        try writer["transitionType"].write(value.transitionType)
    }
}

extension GetActionTypeInput {

    static func write(value: GetActionTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["owner"].write(value.owner)
        try writer["provider"].write(value.provider)
        try writer["version"].write(value.version)
    }
}

extension GetJobDetailsInput {

    static func write(value: GetJobDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobId"].write(value.jobId)
    }
}

extension GetPipelineInput {

    static func write(value: GetPipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["version"].write(value.version)
    }
}

extension GetPipelineExecutionInput {

    static func write(value: GetPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
        try writer["pipelineName"].write(value.pipelineName)
    }
}

extension GetPipelineStateInput {

    static func write(value: GetPipelineStateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetThirdPartyJobDetailsInput {

    static func write(value: GetThirdPartyJobDetailsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["jobId"].write(value.jobId)
    }
}

extension ListActionExecutionsInput {

    static func write(value: ListActionExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodePipelineClientTypes.ActionExecutionFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["pipelineName"].write(value.pipelineName)
    }
}

extension ListActionTypesInput {

    static func write(value: ListActionTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionOwnerFilter"].write(value.actionOwnerFilter)
        try writer["nextToken"].write(value.nextToken)
        try writer["regionFilter"].write(value.regionFilter)
    }
}

extension ListPipelineExecutionsInput {

    static func write(value: ListPipelineExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodePipelineClientTypes.PipelineExecutionFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["pipelineName"].write(value.pipelineName)
    }
}

extension ListPipelinesInput {

    static func write(value: ListPipelinesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListRuleExecutionsInput {

    static func write(value: ListRuleExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filter"].write(value.filter, with: CodePipelineClientTypes.RuleExecutionFilter.write(value:to:))
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["pipelineName"].write(value.pipelineName)
    }
}

extension ListRuleTypesInput {

    static func write(value: ListRuleTypesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["regionFilter"].write(value.regionFilter)
        try writer["ruleOwnerFilter"].write(value.ruleOwnerFilter)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension ListWebhooksInput {

    static func write(value: ListWebhooksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension OverrideStageConditionInput {

    static func write(value: OverrideStageConditionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conditionType"].write(value.conditionType)
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
        try writer["pipelineName"].write(value.pipelineName)
        try writer["stageName"].write(value.stageName)
    }
}

extension PollForJobsInput {

    static func write(value: PollForJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionTypeId"].write(value.actionTypeId, with: CodePipelineClientTypes.ActionTypeId.write(value:to:))
        try writer["maxBatchSize"].write(value.maxBatchSize)
        try writer["queryParam"].writeMap(value.queryParam, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PollForThirdPartyJobsInput {

    static func write(value: PollForThirdPartyJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionTypeId"].write(value.actionTypeId, with: CodePipelineClientTypes.ActionTypeId.write(value:to:))
        try writer["maxBatchSize"].write(value.maxBatchSize)
    }
}

extension PutActionRevisionInput {

    static func write(value: PutActionRevisionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionName"].write(value.actionName)
        try writer["actionRevision"].write(value.actionRevision, with: CodePipelineClientTypes.ActionRevision.write(value:to:))
        try writer["pipelineName"].write(value.pipelineName)
        try writer["stageName"].write(value.stageName)
    }
}

extension PutApprovalResultInput {

    static func write(value: PutApprovalResultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionName"].write(value.actionName)
        try writer["pipelineName"].write(value.pipelineName)
        try writer["result"].write(value.result, with: CodePipelineClientTypes.ApprovalResult.write(value:to:))
        try writer["stageName"].write(value.stageName)
        try writer["token"].write(value.token)
    }
}

extension PutJobFailureResultInput {

    static func write(value: PutJobFailureResultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["failureDetails"].write(value.failureDetails, with: CodePipelineClientTypes.FailureDetails.write(value:to:))
        try writer["jobId"].write(value.jobId)
    }
}

extension PutJobSuccessResultInput {

    static func write(value: PutJobSuccessResultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["continuationToken"].write(value.continuationToken)
        try writer["currentRevision"].write(value.currentRevision, with: CodePipelineClientTypes.CurrentRevision.write(value:to:))
        try writer["executionDetails"].write(value.executionDetails, with: CodePipelineClientTypes.ExecutionDetails.write(value:to:))
        try writer["jobId"].write(value.jobId)
        try writer["outputVariables"].writeMap(value.outputVariables, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutThirdPartyJobFailureResultInput {

    static func write(value: PutThirdPartyJobFailureResultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["failureDetails"].write(value.failureDetails, with: CodePipelineClientTypes.FailureDetails.write(value:to:))
        try writer["jobId"].write(value.jobId)
    }
}

extension PutThirdPartyJobSuccessResultInput {

    static func write(value: PutThirdPartyJobSuccessResultInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["continuationToken"].write(value.continuationToken)
        try writer["currentRevision"].write(value.currentRevision, with: CodePipelineClientTypes.CurrentRevision.write(value:to:))
        try writer["executionDetails"].write(value.executionDetails, with: CodePipelineClientTypes.ExecutionDetails.write(value:to:))
        try writer["jobId"].write(value.jobId)
    }
}

extension PutWebhookInput {

    static func write(value: PutWebhookInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodePipelineClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["webhook"].write(value.webhook, with: CodePipelineClientTypes.WebhookDefinition.write(value:to:))
    }
}

extension RegisterWebhookWithThirdPartyInput {

    static func write(value: RegisterWebhookWithThirdPartyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["webhookName"].write(value.webhookName)
    }
}

extension RetryStageExecutionInput {

    static func write(value: RetryStageExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
        try writer["pipelineName"].write(value.pipelineName)
        try writer["retryMode"].write(value.retryMode)
        try writer["stageName"].write(value.stageName)
    }
}

extension RollbackStageInput {

    static func write(value: RollbackStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineName"].write(value.pipelineName)
        try writer["stageName"].write(value.stageName)
        try writer["targetPipelineExecutionId"].write(value.targetPipelineExecutionId)
    }
}

extension StartPipelineExecutionInput {

    static func write(value: StartPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientRequestToken"].write(value.clientRequestToken)
        try writer["name"].write(value.name)
        try writer["sourceRevisions"].writeList(value.sourceRevisions, memberWritingClosure: CodePipelineClientTypes.SourceRevisionOverride.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["variables"].writeList(value.variables, memberWritingClosure: CodePipelineClientTypes.PipelineVariable.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StopPipelineExecutionInput {

    static func write(value: StopPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["abandon"].write(value.abandon)
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
        try writer["pipelineName"].write(value.pipelineName)
        try writer["reason"].write(value.reason)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodePipelineClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateActionTypeInput {

    static func write(value: UpdateActionTypeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionType"].write(value.actionType, with: CodePipelineClientTypes.ActionTypeDeclaration.write(value:to:))
    }
}

extension UpdatePipelineInput {

    static func write(value: UpdatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipeline"].write(value.pipeline, with: CodePipelineClientTypes.PipelineDeclaration.write(value:to:))
    }
}

extension AcknowledgeJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcknowledgeJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcknowledgeJobOutput()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension AcknowledgeThirdPartyJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AcknowledgeThirdPartyJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AcknowledgeThirdPartyJobOutput()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CreateCustomActionTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCustomActionTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCustomActionTypeOutput()
        value.actionType = try reader["actionType"].readIfPresent(with: CodePipelineClientTypes.ActionType.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePipelineOutput()
        value.pipeline = try reader["pipeline"].readIfPresent(with: CodePipelineClientTypes.PipelineDeclaration.read(from:))
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteCustomActionTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCustomActionTypeOutput {
        return DeleteCustomActionTypeOutput()
    }
}

extension DeletePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePipelineOutput {
        return DeletePipelineOutput()
    }
}

extension DeleteWebhookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWebhookOutput {
        return DeleteWebhookOutput()
    }
}

extension DeregisterWebhookWithThirdPartyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterWebhookWithThirdPartyOutput {
        return DeregisterWebhookWithThirdPartyOutput()
    }
}

extension DisableStageTransitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableStageTransitionOutput {
        return DisableStageTransitionOutput()
    }
}

extension EnableStageTransitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableStageTransitionOutput {
        return EnableStageTransitionOutput()
    }
}

extension GetActionTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetActionTypeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetActionTypeOutput()
        value.actionType = try reader["actionType"].readIfPresent(with: CodePipelineClientTypes.ActionTypeDeclaration.read(from:))
        return value
    }
}

extension GetJobDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetJobDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetJobDetailsOutput()
        value.jobDetails = try reader["jobDetails"].readIfPresent(with: CodePipelineClientTypes.JobDetails.read(from:))
        return value
    }
}

extension GetPipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPipelineOutput()
        value.metadata = try reader["metadata"].readIfPresent(with: CodePipelineClientTypes.PipelineMetadata.read(from:))
        value.pipeline = try reader["pipeline"].readIfPresent(with: CodePipelineClientTypes.PipelineDeclaration.read(from:))
        return value
    }
}

extension GetPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPipelineExecutionOutput()
        value.pipelineExecution = try reader["pipelineExecution"].readIfPresent(with: CodePipelineClientTypes.PipelineExecution.read(from:))
        return value
    }
}

extension GetPipelineStateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPipelineStateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetPipelineStateOutput()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.pipelineName = try reader["pipelineName"].readIfPresent()
        value.pipelineVersion = try reader["pipelineVersion"].readIfPresent()
        value.stageStates = try reader["stageStates"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.StageState.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.updated = try reader["updated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GetThirdPartyJobDetailsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetThirdPartyJobDetailsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetThirdPartyJobDetailsOutput()
        value.jobDetails = try reader["jobDetails"].readIfPresent(with: CodePipelineClientTypes.ThirdPartyJobDetails.read(from:))
        return value
    }
}

extension ListActionExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListActionExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListActionExecutionsOutput()
        value.actionExecutionDetails = try reader["actionExecutionDetails"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionExecutionDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListActionTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListActionTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListActionTypesOutput()
        value.actionTypes = try reader["actionTypes"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionType.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListPipelineExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelineExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelineExecutionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.pipelineExecutionSummaries = try reader["pipelineExecutionSummaries"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.PipelineExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPipelinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelinesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.pipelines = try reader["pipelines"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.PipelineSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRuleExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleExecutionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.ruleExecutionDetails = try reader["ruleExecutionDetails"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.RuleExecutionDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListRuleTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListRuleTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListRuleTypesOutput()
        value.ruleTypes = try reader["ruleTypes"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.RuleType.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWebhooksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWebhooksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWebhooksOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.webhooks = try reader["webhooks"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ListWebhookItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension OverrideStageConditionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> OverrideStageConditionOutput {
        return OverrideStageConditionOutput()
    }
}

extension PollForJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PollForJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PollForJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Job.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PollForThirdPartyJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PollForThirdPartyJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PollForThirdPartyJobsOutput()
        value.jobs = try reader["jobs"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ThirdPartyJob.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutActionRevisionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutActionRevisionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutActionRevisionOutput()
        value.newRevision = try reader["newRevision"].readIfPresent() ?? false
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        return value
    }
}

extension PutApprovalResultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutApprovalResultOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutApprovalResultOutput()
        value.approvedAt = try reader["approvedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PutJobFailureResultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutJobFailureResultOutput {
        return PutJobFailureResultOutput()
    }
}

extension PutJobSuccessResultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutJobSuccessResultOutput {
        return PutJobSuccessResultOutput()
    }
}

extension PutThirdPartyJobFailureResultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutThirdPartyJobFailureResultOutput {
        return PutThirdPartyJobFailureResultOutput()
    }
}

extension PutThirdPartyJobSuccessResultOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutThirdPartyJobSuccessResultOutput {
        return PutThirdPartyJobSuccessResultOutput()
    }
}

extension PutWebhookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutWebhookOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutWebhookOutput()
        value.webhook = try reader["webhook"].readIfPresent(with: CodePipelineClientTypes.ListWebhookItem.read(from:))
        return value
    }
}

extension RegisterWebhookWithThirdPartyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterWebhookWithThirdPartyOutput {
        return RegisterWebhookWithThirdPartyOutput()
    }
}

extension RetryStageExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetryStageExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetryStageExecutionOutput()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        return value
    }
}

extension RollbackStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RollbackStageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RollbackStageOutput()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent() ?? ""
        return value
    }
}

extension StartPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPipelineExecutionOutput()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        return value
    }
}

extension StopPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopPipelineExecutionOutput()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateActionTypeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateActionTypeOutput {
        return UpdateActionTypeOutput()
    }
}

extension UpdatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineOutput()
        value.pipeline = try reader["pipeline"].readIfPresent(with: CodePipelineClientTypes.PipelineDeclaration.read(from:))
        return value
    }
}

enum AcknowledgeJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNonceException": return try InvalidNonceException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AcknowledgeThirdPartyJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientTokenException": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidNonceException": return try InvalidNonceException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCustomActionTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidTagsException": return try InvalidTagsException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidActionDeclarationException": return try InvalidActionDeclarationException.makeError(baseError: baseError)
            case "InvalidBlockerDeclarationException": return try InvalidBlockerDeclarationException.makeError(baseError: baseError)
            case "InvalidStageDeclarationException": return try InvalidStageDeclarationException.makeError(baseError: baseError)
            case "InvalidStructureException": return try InvalidStructureException.makeError(baseError: baseError)
            case "InvalidTagsException": return try InvalidTagsException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PipelineNameInUseException": return try PipelineNameInUseException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCustomActionTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWebhookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterWebhookWithThirdPartyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            case "WebhookNotFoundException": return try WebhookNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableStageTransitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableStageTransitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetActionTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionTypeNotFoundException": return try ActionTypeNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetJobDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "PipelineVersionNotFoundException": return try PipelineVersionNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "PipelineExecutionNotFoundException": return try PipelineExecutionNotFoundException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPipelineStateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetThirdPartyJobDetailsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientTokenException": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidJobException": return try InvalidJobException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListActionExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "PipelineExecutionNotFoundException": return try PipelineExecutionNotFoundException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListActionTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelineExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "PipelineExecutionNotFoundException": return try PipelineExecutionNotFoundException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListRuleTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWebhooksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum OverrideStageConditionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentPipelineExecutionsLimitExceededException": return try ConcurrentPipelineExecutionsLimitExceededException.makeError(baseError: baseError)
            case "ConditionNotOverridableException": return try ConditionNotOverridableException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "NotLatestPipelineExecutionException": return try NotLatestPipelineExecutionException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PollForJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionTypeNotFoundException": return try ActionTypeNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PollForThirdPartyJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionTypeNotFoundException": return try ActionTypeNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutActionRevisionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionNotFoundException": return try ActionNotFoundException.makeError(baseError: baseError)
            case "ConcurrentPipelineExecutionsLimitExceededException": return try ConcurrentPipelineExecutionsLimitExceededException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutApprovalResultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionNotFoundException": return try ActionNotFoundException.makeError(baseError: baseError)
            case "ApprovalAlreadyCompletedException": return try ApprovalAlreadyCompletedException.makeError(baseError: baseError)
            case "InvalidApprovalTokenException": return try InvalidApprovalTokenException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutJobFailureResultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidJobStateException": return try InvalidJobStateException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutJobSuccessResultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidJobStateException": return try InvalidJobStateException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "OutputVariablesSizeExceededException": return try OutputVariablesSizeExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutThirdPartyJobFailureResultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientTokenException": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidJobStateException": return try InvalidJobStateException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutThirdPartyJobSuccessResultOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidClientTokenException": return try InvalidClientTokenException.makeError(baseError: baseError)
            case "InvalidJobStateException": return try InvalidJobStateException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutWebhookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidTagsException": return try InvalidTagsException.makeError(baseError: baseError)
            case "InvalidWebhookAuthenticationParametersException": return try InvalidWebhookAuthenticationParametersException.makeError(baseError: baseError)
            case "InvalidWebhookFilterPatternException": return try InvalidWebhookFilterPatternException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterWebhookWithThirdPartyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            case "WebhookNotFoundException": return try WebhookNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetryStageExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentPipelineExecutionsLimitExceededException": return try ConcurrentPipelineExecutionsLimitExceededException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "NotLatestPipelineExecutionException": return try NotLatestPipelineExecutionException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "StageNotRetryableException": return try StageNotRetryableException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RollbackStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "PipelineExecutionNotFoundException": return try PipelineExecutionNotFoundException.makeError(baseError: baseError)
            case "PipelineExecutionOutdatedException": return try PipelineExecutionOutdatedException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "StageNotFoundException": return try StageNotFoundException.makeError(baseError: baseError)
            case "UnableToRollbackStageException": return try UnableToRollbackStageException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentPipelineExecutionsLimitExceededException": return try ConcurrentPipelineExecutionsLimitExceededException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "DuplicatedStopRequestException": return try DuplicatedStopRequestException.makeError(baseError: baseError)
            case "PipelineExecutionNotStoppableException": return try PipelineExecutionNotStoppableException.makeError(baseError: baseError)
            case "PipelineNotFoundException": return try PipelineNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidTagsException": return try InvalidTagsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidTagsException": return try InvalidTagsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateActionTypeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActionTypeNotFoundException": return try ActionTypeNotFoundException.makeError(baseError: baseError)
            case "RequestFailedException": return try RequestFailedException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidActionDeclarationException": return try InvalidActionDeclarationException.makeError(baseError: baseError)
            case "InvalidBlockerDeclarationException": return try InvalidBlockerDeclarationException.makeError(baseError: baseError)
            case "InvalidStageDeclarationException": return try InvalidStageDeclarationException.makeError(baseError: baseError)
            case "InvalidStructureException": return try InvalidStructureException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension JobNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> JobNotFoundException {
        let reader = baseError.errorBodyReader
        var value = JobNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNonceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNonceException {
        let reader = baseError.errorBodyReader
        var value = InvalidNonceException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidClientTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidClientTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidClientTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagsException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidBlockerDeclarationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidBlockerDeclarationException {
        let reader = baseError.errorBodyReader
        var value = InvalidBlockerDeclarationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidActionDeclarationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidActionDeclarationException {
        let reader = baseError.errorBodyReader
        var value = InvalidActionDeclarationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStructureException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidStructureException {
        let reader = baseError.errorBodyReader
        var value = InvalidStructureException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidStageDeclarationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidStageDeclarationException {
        let reader = baseError.errorBodyReader
        var value = InvalidStageDeclarationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineNameInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineNameInUseException {
        let reader = baseError.errorBodyReader
        var value = PipelineNameInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension WebhookNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> WebhookNotFoundException {
        var value = WebhookNotFoundException()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineNotFoundException {
        let reader = baseError.errorBodyReader
        var value = PipelineNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension StageNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> StageNotFoundException {
        let reader = baseError.errorBodyReader
        var value = StageNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ActionTypeNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ActionTypeNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ActionTypeNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineVersionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineVersionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = PipelineVersionNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineExecutionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineExecutionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = PipelineExecutionNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidJobException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidJobException {
        let reader = baseError.errorBodyReader
        var value = InvalidJobException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentPipelineExecutionsLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentPipelineExecutionsLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentPipelineExecutionsLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotLatestPipelineExecutionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> NotLatestPipelineExecutionException {
        let reader = baseError.errorBodyReader
        var value = NotLatestPipelineExecutionException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConditionNotOverridableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConditionNotOverridableException {
        let reader = baseError.errorBodyReader
        var value = ConditionNotOverridableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ActionNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ActionNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ActionNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApprovalAlreadyCompletedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ApprovalAlreadyCompletedException {
        let reader = baseError.errorBodyReader
        var value = ApprovalAlreadyCompletedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidApprovalTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidApprovalTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidApprovalTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidJobStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidJobStateException {
        let reader = baseError.errorBodyReader
        var value = InvalidJobStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OutputVariablesSizeExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OutputVariablesSizeExceededException {
        let reader = baseError.errorBodyReader
        var value = OutputVariablesSizeExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidWebhookAuthenticationParametersException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidWebhookAuthenticationParametersException {
        let reader = baseError.errorBodyReader
        var value = InvalidWebhookAuthenticationParametersException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidWebhookFilterPatternException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidWebhookFilterPatternException {
        let reader = baseError.errorBodyReader
        var value = InvalidWebhookFilterPatternException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension StageNotRetryableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> StageNotRetryableException {
        let reader = baseError.errorBodyReader
        var value = StageNotRetryableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineExecutionOutdatedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineExecutionOutdatedException {
        let reader = baseError.errorBodyReader
        var value = PipelineExecutionOutdatedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnableToRollbackStageException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnableToRollbackStageException {
        let reader = baseError.errorBodyReader
        var value = UnableToRollbackStageException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DuplicatedStopRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DuplicatedStopRequestException {
        let reader = baseError.errorBodyReader
        var value = DuplicatedStopRequestException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PipelineExecutionNotStoppableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PipelineExecutionNotStoppableException {
        let reader = baseError.errorBodyReader
        var value = PipelineExecutionNotStoppableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RequestFailedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RequestFailedException {
        let reader = baseError.errorBodyReader
        var value = RequestFailedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CodePipelineClientTypes.ActionType {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionType()
        value.id = try reader["id"].readIfPresent(with: CodePipelineClientTypes.ActionTypeId.read(from:))
        value.settings = try reader["settings"].readIfPresent(with: CodePipelineClientTypes.ActionTypeSettings.read(from:))
        value.actionConfigurationProperties = try reader["actionConfigurationProperties"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionConfigurationProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputArtifactDetails = try reader["inputArtifactDetails"].readIfPresent(with: CodePipelineClientTypes.ArtifactDetails.read(from:))
        value.outputArtifactDetails = try reader["outputArtifactDetails"].readIfPresent(with: CodePipelineClientTypes.ArtifactDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ArtifactDetails {

    static func write(value: CodePipelineClientTypes.ArtifactDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maximumCount"].write(value.maximumCount)
        try writer["minimumCount"].write(value.minimumCount)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ArtifactDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ArtifactDetails()
        value.minimumCount = try reader["minimumCount"].readIfPresent() ?? 0
        value.maximumCount = try reader["maximumCount"].readIfPresent() ?? 0
        return value
    }
}

extension CodePipelineClientTypes.ActionConfigurationProperty {

    static func write(value: CodePipelineClientTypes.ActionConfigurationProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["key"].write(value.key)
        try writer["name"].write(value.name)
        try writer["queryable"].write(value.queryable)
        try writer["required"].write(value.`required`)
        try writer["secret"].write(value.secret)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionConfigurationProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionConfigurationProperty()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.`required` = try reader["required"].readIfPresent() ?? false
        value.key = try reader["key"].readIfPresent() ?? false
        value.secret = try reader["secret"].readIfPresent() ?? false
        value.queryable = try reader["queryable"].readIfPresent() ?? false
        value.description = try reader["description"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeSettings {

    static func write(value: CodePipelineClientTypes.ActionTypeSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["entityUrlTemplate"].write(value.entityUrlTemplate)
        try writer["executionUrlTemplate"].write(value.executionUrlTemplate)
        try writer["revisionUrlTemplate"].write(value.revisionUrlTemplate)
        try writer["thirdPartyConfigurationUrl"].write(value.thirdPartyConfigurationUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeSettings()
        value.thirdPartyConfigurationUrl = try reader["thirdPartyConfigurationUrl"].readIfPresent()
        value.entityUrlTemplate = try reader["entityUrlTemplate"].readIfPresent()
        value.executionUrlTemplate = try reader["executionUrlTemplate"].readIfPresent()
        value.revisionUrlTemplate = try reader["revisionUrlTemplate"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeId {

    static func write(value: CodePipelineClientTypes.ActionTypeId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["owner"].write(value.owner)
        try writer["provider"].write(value.provider)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeId()
        value.category = try reader["category"].readIfPresent() ?? .sdkUnknown("")
        value.owner = try reader["owner"].readIfPresent() ?? .sdkUnknown("")
        value.provider = try reader["provider"].readIfPresent() ?? ""
        value.version = try reader["version"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.Tag {

    static func write(value: CodePipelineClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["key"].write(value.key)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.Tag()
        value.key = try reader["key"].readIfPresent() ?? ""
        value.value = try reader["value"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.PipelineDeclaration {

    static func write(value: CodePipelineClientTypes.PipelineDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["artifactStore"].write(value.artifactStore, with: CodePipelineClientTypes.ArtifactStore.write(value:to:))
        try writer["artifactStores"].writeMap(value.artifactStores, valueWritingClosure: CodePipelineClientTypes.ArtifactStore.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["executionMode"].write(value.executionMode)
        try writer["name"].write(value.name)
        try writer["pipelineType"].write(value.pipelineType)
        try writer["roleArn"].write(value.roleArn)
        try writer["stages"].writeList(value.stages, memberWritingClosure: CodePipelineClientTypes.StageDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["triggers"].writeList(value.triggers, memberWritingClosure: CodePipelineClientTypes.PipelineTriggerDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["variables"].writeList(value.variables, memberWritingClosure: CodePipelineClientTypes.PipelineVariableDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.roleArn = try reader["roleArn"].readIfPresent() ?? ""
        value.artifactStore = try reader["artifactStore"].readIfPresent(with: CodePipelineClientTypes.ArtifactStore.read(from:))
        value.artifactStores = try reader["artifactStores"].readMapIfPresent(valueReadingClosure: CodePipelineClientTypes.ArtifactStore.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.stages = try reader["stages"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.StageDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.version = try reader["version"].readIfPresent()
        value.executionMode = try reader["executionMode"].readIfPresent()
        value.pipelineType = try reader["pipelineType"].readIfPresent()
        value.variables = try reader["variables"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.PipelineVariableDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.triggers = try reader["triggers"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.PipelineTriggerDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.PipelineTriggerDeclaration {

    static func write(value: CodePipelineClientTypes.PipelineTriggerDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["gitConfiguration"].write(value.gitConfiguration, with: CodePipelineClientTypes.GitConfiguration.write(value:to:))
        try writer["providerType"].write(value.providerType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineTriggerDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineTriggerDeclaration()
        value.providerType = try reader["providerType"].readIfPresent() ?? .sdkUnknown("")
        value.gitConfiguration = try reader["gitConfiguration"].readIfPresent(with: CodePipelineClientTypes.GitConfiguration.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.GitConfiguration {

    static func write(value: CodePipelineClientTypes.GitConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pullRequest"].writeList(value.pullRequest, memberWritingClosure: CodePipelineClientTypes.GitPullRequestFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["push"].writeList(value.push, memberWritingClosure: CodePipelineClientTypes.GitPushFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["sourceActionName"].write(value.sourceActionName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitConfiguration()
        value.sourceActionName = try reader["sourceActionName"].readIfPresent() ?? ""
        value.push = try reader["push"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.GitPushFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.pullRequest = try reader["pullRequest"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.GitPullRequestFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.GitPullRequestFilter {

    static func write(value: CodePipelineClientTypes.GitPullRequestFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branches"].write(value.branches, with: CodePipelineClientTypes.GitBranchFilterCriteria.write(value:to:))
        try writer["events"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodePipelineClientTypes.GitPullRequestEventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["filePaths"].write(value.filePaths, with: CodePipelineClientTypes.GitFilePathFilterCriteria.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitPullRequestFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitPullRequestFilter()
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CodePipelineClientTypes.GitPullRequestEventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.branches = try reader["branches"].readIfPresent(with: CodePipelineClientTypes.GitBranchFilterCriteria.read(from:))
        value.filePaths = try reader["filePaths"].readIfPresent(with: CodePipelineClientTypes.GitFilePathFilterCriteria.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.GitFilePathFilterCriteria {

    static func write(value: CodePipelineClientTypes.GitFilePathFilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].writeList(value.excludes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includes"].writeList(value.includes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitFilePathFilterCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitFilePathFilterCriteria()
        value.includes = try reader["includes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludes = try reader["excludes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.GitBranchFilterCriteria {

    static func write(value: CodePipelineClientTypes.GitBranchFilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].writeList(value.excludes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includes"].writeList(value.includes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitBranchFilterCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitBranchFilterCriteria()
        value.includes = try reader["includes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludes = try reader["excludes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.GitPushFilter {

    static func write(value: CodePipelineClientTypes.GitPushFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["branches"].write(value.branches, with: CodePipelineClientTypes.GitBranchFilterCriteria.write(value:to:))
        try writer["filePaths"].write(value.filePaths, with: CodePipelineClientTypes.GitFilePathFilterCriteria.write(value:to:))
        try writer["tags"].write(value.tags, with: CodePipelineClientTypes.GitTagFilterCriteria.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitPushFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitPushFilter()
        value.tags = try reader["tags"].readIfPresent(with: CodePipelineClientTypes.GitTagFilterCriteria.read(from:))
        value.branches = try reader["branches"].readIfPresent(with: CodePipelineClientTypes.GitBranchFilterCriteria.read(from:))
        value.filePaths = try reader["filePaths"].readIfPresent(with: CodePipelineClientTypes.GitFilePathFilterCriteria.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.GitTagFilterCriteria {

    static func write(value: CodePipelineClientTypes.GitTagFilterCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["excludes"].writeList(value.excludes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includes"].writeList(value.includes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.GitTagFilterCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.GitTagFilterCriteria()
        value.includes = try reader["includes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.excludes = try reader["excludes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.PipelineVariableDeclaration {

    static func write(value: CodePipelineClientTypes.PipelineVariableDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValue"].write(value.defaultValue)
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineVariableDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineVariableDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.StageDeclaration {

    static func write(value: CodePipelineClientTypes.StageDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actions"].writeList(value.actions, memberWritingClosure: CodePipelineClientTypes.ActionDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["beforeEntry"].write(value.beforeEntry, with: CodePipelineClientTypes.BeforeEntryConditions.write(value:to:))
        try writer["blockers"].writeList(value.blockers, memberWritingClosure: CodePipelineClientTypes.BlockerDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["onFailure"].write(value.onFailure, with: CodePipelineClientTypes.FailureConditions.write(value:to:))
        try writer["onSuccess"].write(value.onSuccess, with: CodePipelineClientTypes.SuccessConditions.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.blockers = try reader["blockers"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.BlockerDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.actions = try reader["actions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.onFailure = try reader["onFailure"].readIfPresent(with: CodePipelineClientTypes.FailureConditions.read(from:))
        value.onSuccess = try reader["onSuccess"].readIfPresent(with: CodePipelineClientTypes.SuccessConditions.read(from:))
        value.beforeEntry = try reader["beforeEntry"].readIfPresent(with: CodePipelineClientTypes.BeforeEntryConditions.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.BeforeEntryConditions {

    static func write(value: CodePipelineClientTypes.BeforeEntryConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conditions"].writeList(value.conditions, memberWritingClosure: CodePipelineClientTypes.Condition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.BeforeEntryConditions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.BeforeEntryConditions()
        value.conditions = try reader["conditions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Condition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CodePipelineClientTypes.Condition {

    static func write(value: CodePipelineClientTypes.Condition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["result"].write(value.result)
        try writer["rules"].writeList(value.rules, memberWritingClosure: CodePipelineClientTypes.RuleDeclaration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.Condition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.Condition()
        value.result = try reader["result"].readIfPresent()
        value.rules = try reader["rules"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.RuleDeclaration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.RuleDeclaration {

    static func write(value: CodePipelineClientTypes.RuleDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].writeMap(value.configuration, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["inputArtifacts"].writeList(value.inputArtifacts, memberWritingClosure: CodePipelineClientTypes.InputArtifact.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["region"].write(value.region)
        try writer["roleArn"].write(value.roleArn)
        try writer["ruleTypeId"].write(value.ruleTypeId, with: CodePipelineClientTypes.RuleTypeId.write(value:to:))
        try writer["timeoutInMinutes"].write(value.timeoutInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.ruleTypeId = try reader["ruleTypeId"].readIfPresent(with: CodePipelineClientTypes.RuleTypeId.read(from:))
        value.configuration = try reader["configuration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.InputArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.timeoutInMinutes = try reader["timeoutInMinutes"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.InputArtifact {

    static func write(value: CodePipelineClientTypes.InputArtifact?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.InputArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.InputArtifact()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.RuleTypeId {

    static func write(value: CodePipelineClientTypes.RuleTypeId?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["owner"].write(value.owner)
        try writer["provider"].write(value.provider)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleTypeId {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleTypeId()
        value.category = try reader["category"].readIfPresent() ?? .sdkUnknown("")
        value.owner = try reader["owner"].readIfPresent()
        value.provider = try reader["provider"].readIfPresent() ?? ""
        value.version = try reader["version"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.SuccessConditions {

    static func write(value: CodePipelineClientTypes.SuccessConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conditions"].writeList(value.conditions, memberWritingClosure: CodePipelineClientTypes.Condition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.SuccessConditions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.SuccessConditions()
        value.conditions = try reader["conditions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Condition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CodePipelineClientTypes.FailureConditions {

    static func write(value: CodePipelineClientTypes.FailureConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["conditions"].writeList(value.conditions, memberWritingClosure: CodePipelineClientTypes.Condition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["result"].write(value.result)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.FailureConditions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.FailureConditions()
        value.result = try reader["result"].readIfPresent()
        value.conditions = try reader["conditions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Condition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.ActionDeclaration {

    static func write(value: CodePipelineClientTypes.ActionDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionTypeId"].write(value.actionTypeId, with: CodePipelineClientTypes.ActionTypeId.write(value:to:))
        try writer["configuration"].writeMap(value.configuration, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["inputArtifacts"].writeList(value.inputArtifacts, memberWritingClosure: CodePipelineClientTypes.InputArtifact.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["namespace"].write(value.namespace)
        try writer["outputArtifacts"].writeList(value.outputArtifacts, memberWritingClosure: CodePipelineClientTypes.OutputArtifact.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["region"].write(value.region)
        try writer["roleArn"].write(value.roleArn)
        try writer["runOrder"].write(value.runOrder)
        try writer["timeoutInMinutes"].write(value.timeoutInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.actionTypeId = try reader["actionTypeId"].readIfPresent(with: CodePipelineClientTypes.ActionTypeId.read(from:))
        value.runOrder = try reader["runOrder"].readIfPresent()
        value.configuration = try reader["configuration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.outputArtifacts = try reader["outputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.OutputArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.InputArtifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.namespace = try reader["namespace"].readIfPresent()
        value.timeoutInMinutes = try reader["timeoutInMinutes"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.OutputArtifact {

    static func write(value: CodePipelineClientTypes.OutputArtifact?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.OutputArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.OutputArtifact()
        value.name = try reader["name"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.BlockerDeclaration {

    static func write(value: CodePipelineClientTypes.BlockerDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.BlockerDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.BlockerDeclaration()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CodePipelineClientTypes.ArtifactStore {

    static func write(value: CodePipelineClientTypes.ArtifactStore?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["encryptionKey"].write(value.encryptionKey, with: CodePipelineClientTypes.EncryptionKey.write(value:to:))
        try writer["location"].write(value.location)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ArtifactStore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ArtifactStore()
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.location = try reader["location"].readIfPresent() ?? ""
        value.encryptionKey = try reader["encryptionKey"].readIfPresent(with: CodePipelineClientTypes.EncryptionKey.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.EncryptionKey {

    static func write(value: CodePipelineClientTypes.EncryptionKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.EncryptionKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.EncryptionKey()
        value.id = try reader["id"].readIfPresent() ?? ""
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeDeclaration {

    static func write(value: CodePipelineClientTypes.ActionTypeDeclaration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["executor"].write(value.executor, with: CodePipelineClientTypes.ActionTypeExecutor.write(value:to:))
        try writer["id"].write(value.id, with: CodePipelineClientTypes.ActionTypeIdentifier.write(value:to:))
        try writer["inputArtifactDetails"].write(value.inputArtifactDetails, with: CodePipelineClientTypes.ActionTypeArtifactDetails.write(value:to:))
        try writer["outputArtifactDetails"].write(value.outputArtifactDetails, with: CodePipelineClientTypes.ActionTypeArtifactDetails.write(value:to:))
        try writer["permissions"].write(value.permissions, with: CodePipelineClientTypes.ActionTypePermissions.write(value:to:))
        try writer["properties"].writeList(value.properties, memberWritingClosure: CodePipelineClientTypes.ActionTypeProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["urls"].write(value.urls, with: CodePipelineClientTypes.ActionTypeUrls.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeDeclaration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeDeclaration()
        value.description = try reader["description"].readIfPresent()
        value.executor = try reader["executor"].readIfPresent(with: CodePipelineClientTypes.ActionTypeExecutor.read(from:))
        value.id = try reader["id"].readIfPresent(with: CodePipelineClientTypes.ActionTypeIdentifier.read(from:))
        value.inputArtifactDetails = try reader["inputArtifactDetails"].readIfPresent(with: CodePipelineClientTypes.ActionTypeArtifactDetails.read(from:))
        value.outputArtifactDetails = try reader["outputArtifactDetails"].readIfPresent(with: CodePipelineClientTypes.ActionTypeArtifactDetails.read(from:))
        value.permissions = try reader["permissions"].readIfPresent(with: CodePipelineClientTypes.ActionTypePermissions.read(from:))
        value.properties = try reader["properties"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionTypeProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.urls = try reader["urls"].readIfPresent(with: CodePipelineClientTypes.ActionTypeUrls.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeUrls {

    static func write(value: CodePipelineClientTypes.ActionTypeUrls?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configurationUrl"].write(value.configurationUrl)
        try writer["entityUrlTemplate"].write(value.entityUrlTemplate)
        try writer["executionUrlTemplate"].write(value.executionUrlTemplate)
        try writer["revisionUrlTemplate"].write(value.revisionUrlTemplate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeUrls {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeUrls()
        value.configurationUrl = try reader["configurationUrl"].readIfPresent()
        value.entityUrlTemplate = try reader["entityUrlTemplate"].readIfPresent()
        value.executionUrlTemplate = try reader["executionUrlTemplate"].readIfPresent()
        value.revisionUrlTemplate = try reader["revisionUrlTemplate"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeProperty {

    static func write(value: CodePipelineClientTypes.ActionTypeProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["key"].write(value.key)
        try writer["name"].write(value.name)
        try writer["noEcho"].write(value.noEcho)
        try writer["optional"].write(value.`optional`)
        try writer["queryable"].write(value.queryable)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeProperty()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.`optional` = try reader["optional"].readIfPresent() ?? false
        value.key = try reader["key"].readIfPresent() ?? false
        value.noEcho = try reader["noEcho"].readIfPresent() ?? false
        value.queryable = try reader["queryable"].readIfPresent() ?? false
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionTypePermissions {

    static func write(value: CodePipelineClientTypes.ActionTypePermissions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["allowedAccounts"].writeList(value.allowedAccounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypePermissions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypePermissions()
        value.allowedAccounts = try reader["allowedAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeArtifactDetails {

    static func write(value: CodePipelineClientTypes.ActionTypeArtifactDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maximumCount"].write(value.maximumCount)
        try writer["minimumCount"].write(value.minimumCount)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeArtifactDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeArtifactDetails()
        value.minimumCount = try reader["minimumCount"].readIfPresent() ?? 0
        value.maximumCount = try reader["maximumCount"].readIfPresent() ?? 0
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeIdentifier {

    static func write(value: CodePipelineClientTypes.ActionTypeIdentifier?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["category"].write(value.category)
        try writer["owner"].write(value.owner)
        try writer["provider"].write(value.provider)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeIdentifier {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeIdentifier()
        value.category = try reader["category"].readIfPresent() ?? .sdkUnknown("")
        value.owner = try reader["owner"].readIfPresent() ?? ""
        value.provider = try reader["provider"].readIfPresent() ?? ""
        value.version = try reader["version"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.ActionTypeExecutor {

    static func write(value: CodePipelineClientTypes.ActionTypeExecutor?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["configuration"].write(value.configuration, with: CodePipelineClientTypes.ExecutorConfiguration.write(value:to:))
        try writer["jobTimeout"].write(value.jobTimeout)
        try writer["policyStatementsTemplate"].write(value.policyStatementsTemplate)
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionTypeExecutor {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionTypeExecutor()
        value.configuration = try reader["configuration"].readIfPresent(with: CodePipelineClientTypes.ExecutorConfiguration.read(from:))
        value.type = try reader["type"].readIfPresent() ?? .sdkUnknown("")
        value.policyStatementsTemplate = try reader["policyStatementsTemplate"].readIfPresent()
        value.jobTimeout = try reader["jobTimeout"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ExecutorConfiguration {

    static func write(value: CodePipelineClientTypes.ExecutorConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jobWorkerExecutorConfiguration"].write(value.jobWorkerExecutorConfiguration, with: CodePipelineClientTypes.JobWorkerExecutorConfiguration.write(value:to:))
        try writer["lambdaExecutorConfiguration"].write(value.lambdaExecutorConfiguration, with: CodePipelineClientTypes.LambdaExecutorConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ExecutorConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ExecutorConfiguration()
        value.lambdaExecutorConfiguration = try reader["lambdaExecutorConfiguration"].readIfPresent(with: CodePipelineClientTypes.LambdaExecutorConfiguration.read(from:))
        value.jobWorkerExecutorConfiguration = try reader["jobWorkerExecutorConfiguration"].readIfPresent(with: CodePipelineClientTypes.JobWorkerExecutorConfiguration.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.JobWorkerExecutorConfiguration {

    static func write(value: CodePipelineClientTypes.JobWorkerExecutorConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pollingAccounts"].writeList(value.pollingAccounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["pollingServicePrincipals"].writeList(value.pollingServicePrincipals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.JobWorkerExecutorConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.JobWorkerExecutorConfiguration()
        value.pollingAccounts = try reader["pollingAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.pollingServicePrincipals = try reader["pollingServicePrincipals"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.LambdaExecutorConfiguration {

    static func write(value: CodePipelineClientTypes.LambdaExecutorConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["lambdaFunctionArn"].write(value.lambdaFunctionArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.LambdaExecutorConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.LambdaExecutorConfiguration()
        value.lambdaFunctionArn = try reader["lambdaFunctionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.JobDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.JobDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.JobDetails()
        value.id = try reader["id"].readIfPresent()
        value.data = try reader["data"].readIfPresent(with: CodePipelineClientTypes.JobData.read(from:))
        value.accountId = try reader["accountId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.JobData {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.JobData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.JobData()
        value.actionTypeId = try reader["actionTypeId"].readIfPresent(with: CodePipelineClientTypes.ActionTypeId.read(from:))
        value.actionConfiguration = try reader["actionConfiguration"].readIfPresent(with: CodePipelineClientTypes.ActionConfiguration.read(from:))
        value.pipelineContext = try reader["pipelineContext"].readIfPresent(with: CodePipelineClientTypes.PipelineContext.read(from:))
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Artifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputArtifacts = try reader["outputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Artifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.artifactCredentials = try reader["artifactCredentials"].readIfPresent(with: CodePipelineClientTypes.AWSSessionCredentials.read(from:))
        value.continuationToken = try reader["continuationToken"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent(with: CodePipelineClientTypes.EncryptionKey.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.AWSSessionCredentials {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.AWSSessionCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.AWSSessionCredentials()
        value.accessKeyId = try reader["accessKeyId"].readIfPresent() ?? ""
        value.secretAccessKey = try reader["secretAccessKey"].readIfPresent() ?? ""
        value.sessionToken = try reader["sessionToken"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.Artifact {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.Artifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.Artifact()
        value.name = try reader["name"].readIfPresent()
        value.revision = try reader["revision"].readIfPresent()
        value.location = try reader["location"].readIfPresent(with: CodePipelineClientTypes.ArtifactLocation.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ArtifactLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ArtifactLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ArtifactLocation()
        value.type = try reader["type"].readIfPresent()
        value.s3Location = try reader["s3Location"].readIfPresent(with: CodePipelineClientTypes.S3ArtifactLocation.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.S3ArtifactLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.S3ArtifactLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.S3ArtifactLocation()
        value.bucketName = try reader["bucketName"].readIfPresent() ?? ""
        value.objectKey = try reader["objectKey"].readIfPresent() ?? ""
        return value
    }
}

extension CodePipelineClientTypes.PipelineContext {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineContext()
        value.pipelineName = try reader["pipelineName"].readIfPresent()
        value.stage = try reader["stage"].readIfPresent(with: CodePipelineClientTypes.StageContext.read(from:))
        value.action = try reader["action"].readIfPresent(with: CodePipelineClientTypes.ActionContext.read(from:))
        value.pipelineArn = try reader["pipelineArn"].readIfPresent()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionContext {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionContext()
        value.name = try reader["name"].readIfPresent()
        value.actionExecutionId = try reader["actionExecutionId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.StageContext {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageContext()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionConfiguration()
        value.configuration = try reader["configuration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.PipelineMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineMetadata()
        value.pipelineArn = try reader["pipelineArn"].readIfPresent()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updated = try reader["updated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.pollingDisabledAt = try reader["pollingDisabledAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodePipelineClientTypes.PipelineExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineExecution()
        value.pipelineName = try reader["pipelineName"].readIfPresent()
        value.pipelineVersion = try reader["pipelineVersion"].readIfPresent()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusSummary = try reader["statusSummary"].readIfPresent()
        value.artifactRevisions = try reader["artifactRevisions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ArtifactRevision.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.variables = try reader["variables"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ResolvedPipelineVariable.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trigger = try reader["trigger"].readIfPresent(with: CodePipelineClientTypes.ExecutionTrigger.read(from:))
        value.executionMode = try reader["executionMode"].readIfPresent()
        value.executionType = try reader["executionType"].readIfPresent()
        value.rollbackMetadata = try reader["rollbackMetadata"].readIfPresent(with: CodePipelineClientTypes.PipelineRollbackMetadata.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.PipelineRollbackMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineRollbackMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineRollbackMetadata()
        value.rollbackTargetPipelineExecutionId = try reader["rollbackTargetPipelineExecutionId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ExecutionTrigger {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ExecutionTrigger {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ExecutionTrigger()
        value.triggerType = try reader["triggerType"].readIfPresent()
        value.triggerDetail = try reader["triggerDetail"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ResolvedPipelineVariable {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ResolvedPipelineVariable {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ResolvedPipelineVariable()
        value.name = try reader["name"].readIfPresent()
        value.resolvedValue = try reader["resolvedValue"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ArtifactRevision {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ArtifactRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ArtifactRevision()
        value.name = try reader["name"].readIfPresent()
        value.revisionId = try reader["revisionId"].readIfPresent()
        value.revisionChangeIdentifier = try reader["revisionChangeIdentifier"].readIfPresent()
        value.revisionSummary = try reader["revisionSummary"].readIfPresent()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.revisionUrl = try reader["revisionUrl"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.StageState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageState()
        value.stageName = try reader["stageName"].readIfPresent()
        value.inboundExecution = try reader["inboundExecution"].readIfPresent(with: CodePipelineClientTypes.StageExecution.read(from:))
        value.inboundExecutions = try reader["inboundExecutions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.StageExecution.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inboundTransitionState = try reader["inboundTransitionState"].readIfPresent(with: CodePipelineClientTypes.TransitionState.read(from:))
        value.actionStates = try reader["actionStates"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ActionState.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.latestExecution = try reader["latestExecution"].readIfPresent(with: CodePipelineClientTypes.StageExecution.read(from:))
        value.beforeEntryConditionState = try reader["beforeEntryConditionState"].readIfPresent(with: CodePipelineClientTypes.StageConditionState.read(from:))
        value.onSuccessConditionState = try reader["onSuccessConditionState"].readIfPresent(with: CodePipelineClientTypes.StageConditionState.read(from:))
        value.onFailureConditionState = try reader["onFailureConditionState"].readIfPresent(with: CodePipelineClientTypes.StageConditionState.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.StageConditionState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageConditionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageConditionState()
        value.latestExecution = try reader["latestExecution"].readIfPresent(with: CodePipelineClientTypes.StageConditionsExecution.read(from:))
        value.conditionStates = try reader["conditionStates"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ConditionState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.ConditionState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ConditionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ConditionState()
        value.latestExecution = try reader["latestExecution"].readIfPresent(with: CodePipelineClientTypes.ConditionExecution.read(from:))
        value.ruleStates = try reader["ruleStates"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.RuleState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.RuleState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleState()
        value.ruleName = try reader["ruleName"].readIfPresent()
        value.currentRevision = try reader["currentRevision"].readIfPresent(with: CodePipelineClientTypes.RuleRevision.read(from:))
        value.latestExecution = try reader["latestExecution"].readIfPresent(with: CodePipelineClientTypes.RuleExecution.read(from:))
        value.entityUrl = try reader["entityUrl"].readIfPresent()
        value.revisionUrl = try reader["revisionUrl"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.RuleExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleExecution()
        value.ruleExecutionId = try reader["ruleExecutionId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.summary = try reader["summary"].readIfPresent()
        value.lastStatusChange = try reader["lastStatusChange"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.token = try reader["token"].readIfPresent()
        value.lastUpdatedBy = try reader["lastUpdatedBy"].readIfPresent()
        value.externalExecutionId = try reader["externalExecutionId"].readIfPresent()
        value.externalExecutionUrl = try reader["externalExecutionUrl"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: CodePipelineClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ErrorDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ErrorDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ErrorDetails()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.RuleRevision {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleRevision()
        value.revisionId = try reader["revisionId"].readIfPresent() ?? ""
        value.revisionChangeId = try reader["revisionChangeId"].readIfPresent() ?? ""
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension CodePipelineClientTypes.ConditionExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ConditionExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ConditionExecution()
        value.status = try reader["status"].readIfPresent()
        value.summary = try reader["summary"].readIfPresent()
        value.lastStatusChange = try reader["lastStatusChange"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodePipelineClientTypes.StageConditionsExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageConditionsExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageConditionsExecution()
        value.status = try reader["status"].readIfPresent()
        value.summary = try reader["summary"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.StageExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StageExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StageExecution()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent() ?? ""
        value.status = try reader["status"].readIfPresent() ?? .sdkUnknown("")
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionState()
        value.actionName = try reader["actionName"].readIfPresent()
        value.currentRevision = try reader["currentRevision"].readIfPresent(with: CodePipelineClientTypes.ActionRevision.read(from:))
        value.latestExecution = try reader["latestExecution"].readIfPresent(with: CodePipelineClientTypes.ActionExecution.read(from:))
        value.entityUrl = try reader["entityUrl"].readIfPresent()
        value.revisionUrl = try reader["revisionUrl"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionExecution()
        value.actionExecutionId = try reader["actionExecutionId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.summary = try reader["summary"].readIfPresent()
        value.lastStatusChange = try reader["lastStatusChange"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.token = try reader["token"].readIfPresent()
        value.lastUpdatedBy = try reader["lastUpdatedBy"].readIfPresent()
        value.externalExecutionId = try reader["externalExecutionId"].readIfPresent()
        value.externalExecutionUrl = try reader["externalExecutionUrl"].readIfPresent()
        value.percentComplete = try reader["percentComplete"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: CodePipelineClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ActionRevision {

    static func write(value: CodePipelineClientTypes.ActionRevision?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["created"].writeTimestamp(value.created, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["revisionChangeId"].write(value.revisionChangeId)
        try writer["revisionId"].write(value.revisionId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionRevision()
        value.revisionId = try reader["revisionId"].readIfPresent() ?? ""
        value.revisionChangeId = try reader["revisionChangeId"].readIfPresent() ?? ""
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension CodePipelineClientTypes.TransitionState {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.TransitionState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.TransitionState()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.lastChangedBy = try reader["lastChangedBy"].readIfPresent()
        value.lastChangedAt = try reader["lastChangedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.disabledReason = try reader["disabledReason"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ThirdPartyJobDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ThirdPartyJobDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ThirdPartyJobDetails()
        value.id = try reader["id"].readIfPresent()
        value.data = try reader["data"].readIfPresent(with: CodePipelineClientTypes.ThirdPartyJobData.read(from:))
        value.nonce = try reader["nonce"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ThirdPartyJobData {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ThirdPartyJobData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ThirdPartyJobData()
        value.actionTypeId = try reader["actionTypeId"].readIfPresent(with: CodePipelineClientTypes.ActionTypeId.read(from:))
        value.actionConfiguration = try reader["actionConfiguration"].readIfPresent(with: CodePipelineClientTypes.ActionConfiguration.read(from:))
        value.pipelineContext = try reader["pipelineContext"].readIfPresent(with: CodePipelineClientTypes.PipelineContext.read(from:))
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Artifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputArtifacts = try reader["outputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Artifact.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.artifactCredentials = try reader["artifactCredentials"].readIfPresent(with: CodePipelineClientTypes.AWSSessionCredentials.read(from:))
        value.continuationToken = try reader["continuationToken"].readIfPresent()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent(with: CodePipelineClientTypes.EncryptionKey.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ActionExecutionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionExecutionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionExecutionDetail()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        value.actionExecutionId = try reader["actionExecutionId"].readIfPresent()
        value.pipelineVersion = try reader["pipelineVersion"].readIfPresent()
        value.stageName = try reader["stageName"].readIfPresent()
        value.actionName = try reader["actionName"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedBy = try reader["updatedBy"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.input = try reader["input"].readIfPresent(with: CodePipelineClientTypes.ActionExecutionInput.read(from:))
        value.output = try reader["output"].readIfPresent(with: CodePipelineClientTypes.ActionExecutionOutput.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ActionExecutionOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionExecutionOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionExecutionOutput()
        value.outputArtifacts = try reader["outputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ArtifactDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.executionResult = try reader["executionResult"].readIfPresent(with: CodePipelineClientTypes.ActionExecutionResult.read(from:))
        value.outputVariables = try reader["outputVariables"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.ActionExecutionResult {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionExecutionResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionExecutionResult()
        value.externalExecutionId = try reader["externalExecutionId"].readIfPresent()
        value.externalExecutionSummary = try reader["externalExecutionSummary"].readIfPresent()
        value.externalExecutionUrl = try reader["externalExecutionUrl"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: CodePipelineClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.ArtifactDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ArtifactDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ArtifactDetail()
        value.name = try reader["name"].readIfPresent()
        value.s3location = try reader["s3location"].readIfPresent(with: CodePipelineClientTypes.S3Location.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.S3Location {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.S3Location()
        value.bucket = try reader["bucket"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionExecutionInput {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ActionExecutionInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ActionExecutionInput()
        value.actionTypeId = try reader["actionTypeId"].readIfPresent(with: CodePipelineClientTypes.ActionTypeId.read(from:))
        value.configuration = try reader["configuration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resolvedConfiguration = try reader["resolvedConfiguration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ArtifactDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.namespace = try reader["namespace"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.PipelineExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineExecutionSummary()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusSummary = try reader["statusSummary"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.sourceRevisions = try reader["sourceRevisions"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.SourceRevision.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trigger = try reader["trigger"].readIfPresent(with: CodePipelineClientTypes.ExecutionTrigger.read(from:))
        value.stopTrigger = try reader["stopTrigger"].readIfPresent(with: CodePipelineClientTypes.StopExecutionTrigger.read(from:))
        value.executionMode = try reader["executionMode"].readIfPresent()
        value.executionType = try reader["executionType"].readIfPresent()
        value.rollbackMetadata = try reader["rollbackMetadata"].readIfPresent(with: CodePipelineClientTypes.PipelineRollbackMetadata.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.StopExecutionTrigger {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.StopExecutionTrigger {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.StopExecutionTrigger()
        value.reason = try reader["reason"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.SourceRevision {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.SourceRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.SourceRevision()
        value.actionName = try reader["actionName"].readIfPresent() ?? ""
        value.revisionId = try reader["revisionId"].readIfPresent()
        value.revisionSummary = try reader["revisionSummary"].readIfPresent()
        value.revisionUrl = try reader["revisionUrl"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.PipelineSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.PipelineSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.PipelineSummary()
        value.name = try reader["name"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.pipelineType = try reader["pipelineType"].readIfPresent()
        value.executionMode = try reader["executionMode"].readIfPresent()
        value.created = try reader["created"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updated = try reader["updated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodePipelineClientTypes.RuleExecutionDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleExecutionDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleExecutionDetail()
        value.pipelineExecutionId = try reader["pipelineExecutionId"].readIfPresent()
        value.ruleExecutionId = try reader["ruleExecutionId"].readIfPresent()
        value.pipelineVersion = try reader["pipelineVersion"].readIfPresent()
        value.stageName = try reader["stageName"].readIfPresent()
        value.ruleName = try reader["ruleName"].readIfPresent()
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateTime = try reader["lastUpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedBy = try reader["updatedBy"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.input = try reader["input"].readIfPresent(with: CodePipelineClientTypes.RuleExecutionInput.read(from:))
        value.output = try reader["output"].readIfPresent(with: CodePipelineClientTypes.RuleExecutionOutput.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.RuleExecutionOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleExecutionOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleExecutionOutput()
        value.executionResult = try reader["executionResult"].readIfPresent(with: CodePipelineClientTypes.RuleExecutionResult.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.RuleExecutionResult {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleExecutionResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleExecutionResult()
        value.externalExecutionId = try reader["externalExecutionId"].readIfPresent()
        value.externalExecutionSummary = try reader["externalExecutionSummary"].readIfPresent()
        value.externalExecutionUrl = try reader["externalExecutionUrl"].readIfPresent()
        value.errorDetails = try reader["errorDetails"].readIfPresent(with: CodePipelineClientTypes.ErrorDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.RuleExecutionInput {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleExecutionInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleExecutionInput()
        value.ruleTypeId = try reader["ruleTypeId"].readIfPresent(with: CodePipelineClientTypes.RuleTypeId.read(from:))
        value.configuration = try reader["configuration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resolvedConfiguration = try reader["resolvedConfiguration"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.region = try reader["region"].readIfPresent()
        value.inputArtifacts = try reader["inputArtifacts"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.ArtifactDetail.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.RuleType {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleType()
        value.id = try reader["id"].readIfPresent(with: CodePipelineClientTypes.RuleTypeId.read(from:))
        value.settings = try reader["settings"].readIfPresent(with: CodePipelineClientTypes.RuleTypeSettings.read(from:))
        value.ruleConfigurationProperties = try reader["ruleConfigurationProperties"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.RuleConfigurationProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputArtifactDetails = try reader["inputArtifactDetails"].readIfPresent(with: CodePipelineClientTypes.ArtifactDetails.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.RuleConfigurationProperty {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleConfigurationProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleConfigurationProperty()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.`required` = try reader["required"].readIfPresent() ?? false
        value.key = try reader["key"].readIfPresent() ?? false
        value.secret = try reader["secret"].readIfPresent() ?? false
        value.queryable = try reader["queryable"].readIfPresent() ?? false
        value.description = try reader["description"].readIfPresent()
        value.type = try reader["type"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.RuleTypeSettings {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.RuleTypeSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.RuleTypeSettings()
        value.thirdPartyConfigurationUrl = try reader["thirdPartyConfigurationUrl"].readIfPresent()
        value.entityUrlTemplate = try reader["entityUrlTemplate"].readIfPresent()
        value.executionUrlTemplate = try reader["executionUrlTemplate"].readIfPresent()
        value.revisionUrlTemplate = try reader["revisionUrlTemplate"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ListWebhookItem {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ListWebhookItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ListWebhookItem()
        value.definition = try reader["definition"].readIfPresent(with: CodePipelineClientTypes.WebhookDefinition.read(from:))
        value.url = try reader["url"].readIfPresent() ?? ""
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.lastTriggered = try reader["lastTriggered"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.arn = try reader["arn"].readIfPresent()
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodePipelineClientTypes.WebhookDefinition {

    static func write(value: CodePipelineClientTypes.WebhookDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["authentication"].write(value.authentication)
        try writer["authenticationConfiguration"].write(value.authenticationConfiguration, with: CodePipelineClientTypes.WebhookAuthConfiguration.write(value:to:))
        try writer["filters"].writeList(value.filters, memberWritingClosure: CodePipelineClientTypes.WebhookFilterRule.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["targetAction"].write(value.targetAction)
        try writer["targetPipeline"].write(value.targetPipeline)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.WebhookDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.WebhookDefinition()
        value.name = try reader["name"].readIfPresent() ?? ""
        value.targetPipeline = try reader["targetPipeline"].readIfPresent() ?? ""
        value.targetAction = try reader["targetAction"].readIfPresent() ?? ""
        value.filters = try reader["filters"].readListIfPresent(memberReadingClosure: CodePipelineClientTypes.WebhookFilterRule.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.authentication = try reader["authentication"].readIfPresent() ?? .sdkUnknown("")
        value.authenticationConfiguration = try reader["authenticationConfiguration"].readIfPresent(with: CodePipelineClientTypes.WebhookAuthConfiguration.read(from:))
        return value
    }
}

extension CodePipelineClientTypes.WebhookAuthConfiguration {

    static func write(value: CodePipelineClientTypes.WebhookAuthConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowedIPRange"].write(value.allowedIPRange)
        try writer["SecretToken"].write(value.secretToken)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.WebhookAuthConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.WebhookAuthConfiguration()
        value.allowedIPRange = try reader["AllowedIPRange"].readIfPresent()
        value.secretToken = try reader["SecretToken"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.WebhookFilterRule {

    static func write(value: CodePipelineClientTypes.WebhookFilterRule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["jsonPath"].write(value.jsonPath)
        try writer["matchEquals"].write(value.matchEquals)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.WebhookFilterRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.WebhookFilterRule()
        value.jsonPath = try reader["jsonPath"].readIfPresent() ?? ""
        value.matchEquals = try reader["matchEquals"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.Job {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.Job {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.Job()
        value.id = try reader["id"].readIfPresent()
        value.data = try reader["data"].readIfPresent(with: CodePipelineClientTypes.JobData.read(from:))
        value.nonce = try reader["nonce"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ThirdPartyJob {

    static func read(from reader: SmithyJSON.Reader) throws -> CodePipelineClientTypes.ThirdPartyJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodePipelineClientTypes.ThirdPartyJob()
        value.clientId = try reader["clientId"].readIfPresent()
        value.jobId = try reader["jobId"].readIfPresent()
        return value
    }
}

extension CodePipelineClientTypes.ActionExecutionFilter {

    static func write(value: CodePipelineClientTypes.ActionExecutionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["latestInPipelineExecution"].write(value.latestInPipelineExecution, with: CodePipelineClientTypes.LatestInPipelineExecutionFilter.write(value:to:))
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
    }
}

extension CodePipelineClientTypes.LatestInPipelineExecutionFilter {

    static func write(value: CodePipelineClientTypes.LatestInPipelineExecutionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
        try writer["startTimeRange"].write(value.startTimeRange)
    }
}

extension CodePipelineClientTypes.PipelineExecutionFilter {

    static func write(value: CodePipelineClientTypes.PipelineExecutionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["succeededInStage"].write(value.succeededInStage, with: CodePipelineClientTypes.SucceededInStageFilter.write(value:to:))
    }
}

extension CodePipelineClientTypes.SucceededInStageFilter {

    static func write(value: CodePipelineClientTypes.SucceededInStageFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["stageName"].write(value.stageName)
    }
}

extension CodePipelineClientTypes.RuleExecutionFilter {

    static func write(value: CodePipelineClientTypes.RuleExecutionFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["latestInPipelineExecution"].write(value.latestInPipelineExecution, with: CodePipelineClientTypes.LatestInPipelineExecutionFilter.write(value:to:))
        try writer["pipelineExecutionId"].write(value.pipelineExecutionId)
    }
}

extension CodePipelineClientTypes.ApprovalResult {

    static func write(value: CodePipelineClientTypes.ApprovalResult?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["status"].write(value.status)
        try writer["summary"].write(value.summary)
    }
}

extension CodePipelineClientTypes.FailureDetails {

    static func write(value: CodePipelineClientTypes.FailureDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["externalExecutionId"].write(value.externalExecutionId)
        try writer["message"].write(value.message)
        try writer["type"].write(value.type)
    }
}

extension CodePipelineClientTypes.CurrentRevision {

    static func write(value: CodePipelineClientTypes.CurrentRevision?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["changeIdentifier"].write(value.changeIdentifier)
        try writer["created"].writeTimestamp(value.created, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["revision"].write(value.revision)
        try writer["revisionSummary"].write(value.revisionSummary)
    }
}

extension CodePipelineClientTypes.ExecutionDetails {

    static func write(value: CodePipelineClientTypes.ExecutionDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["externalExecutionId"].write(value.externalExecutionId)
        try writer["percentComplete"].write(value.percentComplete)
        try writer["summary"].write(value.summary)
    }
}

extension CodePipelineClientTypes.PipelineVariable {

    static func write(value: CodePipelineClientTypes.PipelineVariable?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
        try writer["value"].write(value.value)
    }
}

extension CodePipelineClientTypes.SourceRevisionOverride {

    static func write(value: CodePipelineClientTypes.SourceRevisionOverride?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionName"].write(value.actionName)
        try writer["revisionType"].write(value.revisionType)
        try writer["revisionValue"].write(value.revisionValue)
    }
}

public enum CodePipelineClientTypes {}
