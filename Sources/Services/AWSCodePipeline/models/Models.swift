// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CodePipelineClientTypes.AWSSessionCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId
        case secretAccessKey
        case sessionToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = self.accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let secretAccessKey = self.secretAccessKey {
            try encodeContainer.encode(secretAccessKey, forKey: .secretAccessKey)
        }
        if let sessionToken = self.sessionToken {
            try encodeContainer.encode(sessionToken, forKey: .sessionToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let secretAccessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretAccessKey)
        secretAccessKey = secretAccessKeyDecoded
        let sessionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionToken)
        sessionToken = sessionTokenDecoded
    }
}

extension CodePipelineClientTypes.AWSSessionCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension CodePipelineClientTypes {
    /// Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in AWS CodePipeline.
    public struct AWSSessionCredentials: Swift.Equatable {
        /// The access key for the session.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// The secret access key for the session.
        /// This member is required.
        public var secretAccessKey: Swift.String?
        /// The token for the session.
        /// This member is required.
        public var sessionToken: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }

}

extension AcknowledgeJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case nonce
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let nonce = self.nonce {
            try encodeContainer.encode(nonce, forKey: .nonce)
        }
    }
}

extension AcknowledgeJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an AcknowledgeJob action.
public struct AcknowledgeJobInput: Swift.Equatable {
    /// The unique system-generated ID of the job for which you want to confirm receipt.
    /// This member is required.
    public var jobId: Swift.String?
    /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response of the [PollForJobs] request that returned this job.
    /// This member is required.
    public var nonce: Swift.String?

    public init (
        jobId: Swift.String? = nil,
        nonce: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.nonce = nonce
    }
}

struct AcknowledgeJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let nonce: Swift.String?
}

extension AcknowledgeJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case nonce
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let nonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nonce)
        nonce = nonceDecoded
    }
}

extension AcknowledgeJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcknowledgeJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNonceException" : self = .invalidNonceException(try InvalidNonceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcknowledgeJobOutputError: Swift.Error, Swift.Equatable {
    case invalidNonceException(InvalidNonceException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcknowledgeJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AcknowledgeJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

/// Represents the output of an AcknowledgeJob action.
public struct AcknowledgeJobOutputResponse: Swift.Equatable {
    /// Whether the job worker has received the specified job.
    public var status: CodePipelineClientTypes.JobStatus?

    public init (
        status: CodePipelineClientTypes.JobStatus? = nil
    )
    {
        self.status = status
    }
}

struct AcknowledgeJobOutputResponseBody: Swift.Equatable {
    let status: CodePipelineClientTypes.JobStatus?
}

extension AcknowledgeJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AcknowledgeThirdPartyJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case jobId
        case nonce
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let nonce = self.nonce {
            try encodeContainer.encode(nonce, forKey: .nonce)
        }
    }
}

extension AcknowledgeThirdPartyJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an AcknowledgeThirdPartyJob action.
public struct AcknowledgeThirdPartyJobInput: Swift.Equatable {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The unique system-generated ID of the job.
    /// This member is required.
    public var jobId: Swift.String?
    /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Get this number from the response to a [GetThirdPartyJobDetails] request.
    /// This member is required.
    public var nonce: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        jobId: Swift.String? = nil,
        nonce: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.jobId = jobId
        self.nonce = nonce
    }
}

struct AcknowledgeThirdPartyJobInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let nonce: Swift.String?
    let clientToken: Swift.String?
}

extension AcknowledgeThirdPartyJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case jobId
        case nonce
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let nonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nonce)
        nonce = nonceDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension AcknowledgeThirdPartyJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcknowledgeThirdPartyJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidClientTokenException" : self = .invalidClientTokenException(try InvalidClientTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNonceException" : self = .invalidNonceException(try InvalidNonceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AcknowledgeThirdPartyJobOutputError: Swift.Error, Swift.Equatable {
    case invalidClientTokenException(InvalidClientTokenException)
    case invalidNonceException(InvalidNonceException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcknowledgeThirdPartyJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AcknowledgeThirdPartyJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
        } else {
            self.status = nil
        }
    }
}

/// Represents the output of an AcknowledgeThirdPartyJob action.
public struct AcknowledgeThirdPartyJobOutputResponse: Swift.Equatable {
    /// The status information for the third party job, if any.
    public var status: CodePipelineClientTypes.JobStatus?

    public init (
        status: CodePipelineClientTypes.JobStatus? = nil
    )
    {
        self.status = status
    }
}

struct AcknowledgeThirdPartyJobOutputResponseBody: Swift.Equatable {
    let status: CodePipelineClientTypes.JobStatus?
}

extension AcknowledgeThirdPartyJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodePipelineClientTypes {
    public enum ActionCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approval
        case build
        case deploy
        case invoke
        case source
        case test
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionCategory] {
            return [
                .approval,
                .build,
                .deploy,
                .invoke,
                .source,
                .test,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approval: return "Approval"
            case .build: return "Build"
            case .deploy: return "Deploy"
            case .invoke: return "Invoke"
            case .source: return "Source"
            case .test: return "Test"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionCategory(rawValue: rawValue) ?? ActionCategory.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.ActionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configuration)
            for (dictKey0, actionConfigurationMap0) in configuration {
                try configurationContainer.encode(actionConfigurationMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configuration)
        var configurationDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                if let actionconfigurationvalue0 = actionconfigurationvalue0 {
                    configurationDecoded0?[key0] = actionconfigurationvalue0
                }
            }
        }
        configuration = configurationDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action configuration.
    public struct ActionConfiguration: Swift.Equatable {
        /// The configuration data for the action.
        public var configuration: [Swift.String:Swift.String]?

        public init (
            configuration: [Swift.String:Swift.String]? = nil
        )
        {
            self.configuration = configuration
        }
    }

}

extension CodePipelineClientTypes.ActionConfigurationProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case key
        case name
        case queryable
        case `required` = "required"
        case secret
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if key != false {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if queryable != false {
            try encodeContainer.encode(queryable, forKey: .queryable)
        }
        if `required` != false {
            try encodeContainer.encode(`required`, forKey: .`required`)
        }
        if secret != false {
            try encodeContainer.encode(secret, forKey: .secret)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .required) ?? false
        `required` = requiredDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .key) ?? false
        key = keyDecoded
        let secretDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .secret) ?? false
        secret = secretDecoded
        let queryableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .queryable) ?? false
        queryable = queryableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionConfigurationPropertyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action configuration property.
    public struct ActionConfigurationProperty: Swift.Equatable {
        /// The description of the action configuration property that is displayed to users.
        public var description: Swift.String?
        /// Whether the configuration property is a key.
        /// This member is required.
        public var key: Swift.Bool
        /// The name of the action configuration property.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret. If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens.
        public var queryable: Swift.Bool
        /// Whether the configuration property is a required value.
        /// This member is required.
        public var `required`: Swift.Bool
        /// Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs. When updating a pipeline, passing * * * * * without changing any other values of the action preserves the previous value of the secret.
        /// This member is required.
        public var secret: Swift.Bool
        /// The type of the configuration property.
        public var type: CodePipelineClientTypes.ActionConfigurationPropertyType?

        public init (
            description: Swift.String? = nil,
            key: Swift.Bool = false,
            name: Swift.String? = nil,
            queryable: Swift.Bool = false,
            `required`: Swift.Bool = false,
            secret: Swift.Bool = false,
            type: CodePipelineClientTypes.ActionConfigurationPropertyType? = nil
        )
        {
            self.description = description
            self.key = key
            self.name = name
            self.queryable = queryable
            self.`required` = `required`
            self.secret = secret
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum ActionConfigurationPropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case boolean
        case number
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionConfigurationPropertyType] {
            return [
                .boolean,
                .number,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "Boolean"
            case .number: return "Number"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionConfigurationPropertyType(rawValue: rawValue) ?? ActionConfigurationPropertyType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.ActionContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionId
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionExecutionId = self.actionExecutionId {
            try encodeContainer.encode(actionExecutionId, forKey: .actionExecutionId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionExecutionId)
        actionExecutionId = actionExecutionIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents the context of an action in the stage of a pipeline to a job worker.
    public struct ActionContext: Swift.Equatable {
        /// The system-generated unique ID that corresponds to an action's execution.
        public var actionExecutionId: Swift.String?
        /// The name of the action in the context of a job.
        public var name: Swift.String?

        public init (
            actionExecutionId: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.name = name
        }
    }

}

extension CodePipelineClientTypes.ActionDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case configuration
        case inputArtifacts
        case name
        case namespace
        case outputArtifacts
        case region
        case roleArn
        case runOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configuration)
            for (dictKey0, actionConfigurationMap0) in configuration {
                try configurationContainer.encode(actionConfigurationMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for inputartifact0 in inputArtifacts {
                try inputArtifactsContainer.encode(inputartifact0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for outputartifact0 in outputArtifacts {
                try outputArtifactsContainer.encode(outputartifact0)
            }
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let runOrder = self.runOrder {
            try encodeContainer.encode(runOrder, forKey: .runOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let runOrderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runOrder)
        runOrder = runOrderDecoded
        let configurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configuration)
        var configurationDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                if let actionconfigurationvalue0 = actionconfigurationvalue0 {
                    configurationDecoded0?[key0] = actionconfigurationvalue0
                }
            }
        }
        configuration = configurationDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.OutputArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[CodePipelineClientTypes.OutputArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [CodePipelineClientTypes.OutputArtifact]()
            for structure0 in outputArtifactsContainer {
                if let structure0 = structure0 {
                    outputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.InputArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[CodePipelineClientTypes.InputArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [CodePipelineClientTypes.InputArtifact]()
            for structure0 in inputArtifactsContainer {
                if let structure0 = structure0 {
                    inputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action declaration.
    public struct ActionDeclaration: Swift.Equatable {
        /// Specifies the action type and the provider of the action.
        /// This member is required.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// The action's configuration. These are key-value pairs that specify input values for an action. For more information, see [Action Structure Requirements in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements). For the list of configuration properties for the AWS CloudFormation action type in CodePipeline, see [Configuration Properties Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html) in the AWS CloudFormation User Guide. For template snippets with examples, see [Using Parameter Override Functions with CodePipeline Pipelines](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html) in the AWS CloudFormation User Guide. The values can be represented in either JSON or YAML format. For example, the JSON configuration item format is as follows: JSON: "Configuration" : { Key : Value },
        public var configuration: [Swift.String:Swift.String]?
        /// The name or ID of the artifact consumed by the action, such as a test or build artifact.
        public var inputArtifacts: [CodePipelineClientTypes.InputArtifact]?
        /// The action declaration's name.
        /// This member is required.
        public var name: Swift.String?
        /// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
        public var namespace: Swift.String?
        /// The name or ID of the result of the action declaration, such as a test or build artifact.
        public var outputArtifacts: [CodePipelineClientTypes.OutputArtifact]?
        /// The action declaration's AWS Region, such as us-east-1.
        public var region: Swift.String?
        /// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
        public var roleArn: Swift.String?
        /// The order in which actions are run.
        public var runOrder: Swift.Int?

        public init (
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            configuration: [Swift.String:Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.InputArtifact]? = nil,
            name: Swift.String? = nil,
            namespace: Swift.String? = nil,
            outputArtifacts: [CodePipelineClientTypes.OutputArtifact]? = nil,
            region: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            runOrder: Swift.Int? = nil
        )
        {
            self.actionTypeId = actionTypeId
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.name = name
            self.namespace = namespace
            self.outputArtifacts = outputArtifacts
            self.region = region
            self.roleArn = roleArn
            self.runOrder = runOrder
        }
    }

}

extension CodePipelineClientTypes.ActionExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionId
        case errorDetails
        case externalExecutionId
        case externalExecutionUrl
        case lastStatusChange
        case lastUpdatedBy
        case percentComplete
        case status
        case summary
        case token
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionExecutionId = self.actionExecutionId {
            try encodeContainer.encode(actionExecutionId, forKey: .actionExecutionId)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let externalExecutionId = self.externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let externalExecutionUrl = self.externalExecutionUrl {
            try encodeContainer.encode(externalExecutionUrl, forKey: .externalExecutionUrl)
        }
        if let lastStatusChange = self.lastStatusChange {
            try encodeContainer.encodeTimestamp(lastStatusChange, format: .epochSeconds, forKey: .lastStatusChange)
        }
        if let lastUpdatedBy = self.lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let percentComplete = self.percentComplete {
            try encodeContainer.encode(percentComplete, forKey: .percentComplete)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionExecutionId)
        actionExecutionId = actionExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .summary)
        summary = summaryDecoded
        let lastStatusChangeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastStatusChange)
        lastStatusChange = lastStatusChangeDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
        let externalExecutionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionUrl)
        externalExecutionUrl = externalExecutionUrlDecoded
        let percentCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentComplete)
        percentComplete = percentCompleteDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the run of an action.
    public struct ActionExecution: Swift.Equatable {
        /// ID of the workflow action execution in the current stage. Use the [GetPipelineState] action to retrieve the current action execution details of the current stage. For older executions, this field might be empty. The action execution ID is available for executions run on or after March 2020.
        public var actionExecutionId: Swift.String?
        /// The details of an error returned by a URL external to AWS.
        public var errorDetails: CodePipelineClientTypes.ErrorDetails?
        /// The external ID of the run of the action.
        public var externalExecutionId: Swift.String?
        /// The URL of a resource external to AWS that is used when running the action (for example, an external repository URL).
        public var externalExecutionUrl: Swift.String?
        /// The last status change of the action.
        public var lastStatusChange: ClientRuntime.Date?
        /// The ARN of the user who last changed the pipeline.
        public var lastUpdatedBy: Swift.String?
        /// A percentage of completeness of the action as it runs.
        public var percentComplete: Swift.Int?
        /// The status of the action, or for a completed action, the last status of the action.
        public var status: CodePipelineClientTypes.ActionExecutionStatus?
        /// A summary of the run of the action.
        public var summary: Swift.String?
        /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the GetPipelineState command. It is used to validate that the approval request corresponding to this token is still valid.
        public var token: Swift.String?

        public init (
            actionExecutionId: Swift.String? = nil,
            errorDetails: CodePipelineClientTypes.ErrorDetails? = nil,
            externalExecutionId: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil,
            lastStatusChange: ClientRuntime.Date? = nil,
            lastUpdatedBy: Swift.String? = nil,
            percentComplete: Swift.Int? = nil,
            status: CodePipelineClientTypes.ActionExecutionStatus? = nil,
            summary: Swift.String? = nil,
            token: Swift.String? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.errorDetails = errorDetails
            self.externalExecutionId = externalExecutionId
            self.externalExecutionUrl = externalExecutionUrl
            self.lastStatusChange = lastStatusChange
            self.lastUpdatedBy = lastUpdatedBy
            self.percentComplete = percentComplete
            self.status = status
            self.summary = summary
            self.token = token
        }
    }

}

extension CodePipelineClientTypes.ActionExecutionDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionId
        case actionName
        case input
        case lastUpdateTime
        case output
        case pipelineExecutionId
        case pipelineVersion
        case stageName
        case startTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionExecutionId = self.actionExecutionId {
            try encodeContainer.encode(actionExecutionId, forKey: .actionExecutionId)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineVersion = self.pipelineVersion {
            try encodeContainer.encode(pipelineVersion, forKey: .pipelineVersion)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let actionExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionExecutionId)
        actionExecutionId = actionExecutionIdDecoded
        let pipelineVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelineVersion)
        pipelineVersion = pipelineVersionDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let inputDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionInput.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionOutput.self, forKey: .output)
        output = outputDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns information about an execution of an action, including the action execution ID, and the name, version, and timing of the action.
    public struct ActionExecutionDetail: Swift.Equatable {
        /// The action execution ID.
        public var actionExecutionId: Swift.String?
        /// The name of the action.
        public var actionName: Swift.String?
        /// Input details for the action execution, such as role ARN, Region, and input artifacts.
        public var input: CodePipelineClientTypes.ActionExecutionInput?
        /// The last update time of the action execution.
        public var lastUpdateTime: ClientRuntime.Date?
        /// Output details for the action execution, such as the action execution result.
        public var output: CodePipelineClientTypes.ActionExecutionOutput?
        /// The pipeline execution ID for the action execution.
        public var pipelineExecutionId: Swift.String?
        /// The version of the pipeline where the action was run.
        public var pipelineVersion: Swift.Int?
        /// The name of the stage that contains the action.
        public var stageName: Swift.String?
        /// The start time of the action execution.
        public var startTime: ClientRuntime.Date?
        /// The status of the action execution. Status categories are InProgress, Succeeded, and Failed.
        public var status: CodePipelineClientTypes.ActionExecutionStatus?

        public init (
            actionExecutionId: Swift.String? = nil,
            actionName: Swift.String? = nil,
            input: CodePipelineClientTypes.ActionExecutionInput? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            output: CodePipelineClientTypes.ActionExecutionOutput? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineVersion: Swift.Int? = nil,
            stageName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: CodePipelineClientTypes.ActionExecutionStatus? = nil
        )
        {
            self.actionExecutionId = actionExecutionId
            self.actionName = actionName
            self.input = input
            self.lastUpdateTime = lastUpdateTime
            self.output = output
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineVersion = pipelineVersion
            self.stageName = stageName
            self.startTime = startTime
            self.status = status
        }
    }

}

extension CodePipelineClientTypes.ActionExecutionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Filter values for the action execution.
    public struct ActionExecutionFilter: Swift.Equatable {
        /// The pipeline execution ID used to filter action execution history.
        public var pipelineExecutionId: Swift.String?

        public init (
            pipelineExecutionId: Swift.String? = nil
        )
        {
            self.pipelineExecutionId = pipelineExecutionId
        }
    }

}

extension CodePipelineClientTypes.ActionExecutionInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case configuration
        case inputArtifacts
        case namespace
        case region
        case resolvedConfiguration
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configuration)
            for (dictKey0, actionConfigurationMap0) in configuration {
                try configurationContainer.encode(actionConfigurationMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for artifactdetail0 in inputArtifacts {
                try inputArtifactsContainer.encode(artifactdetail0)
            }
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resolvedConfiguration = resolvedConfiguration {
            var resolvedConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .resolvedConfiguration)
            for (dictKey0, resolvedActionConfigurationMap0) in resolvedConfiguration {
                try resolvedConfigurationContainer.encode(resolvedActionConfigurationMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let configurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configuration)
        var configurationDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, actionconfigurationvalue0) in configurationContainer {
                if let actionconfigurationvalue0 = actionconfigurationvalue0 {
                    configurationDecoded0?[key0] = actionconfigurationvalue0
                }
            }
        }
        configuration = configurationDecoded0
        let resolvedConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .resolvedConfiguration)
        var resolvedConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let resolvedConfigurationContainer = resolvedConfigurationContainer {
            resolvedConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in resolvedConfigurationContainer {
                if let string0 = string0 {
                    resolvedConfigurationDecoded0?[key0] = string0
                }
            }
        }
        resolvedConfiguration = resolvedConfigurationDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let inputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ArtifactDetail?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[CodePipelineClientTypes.ArtifactDetail]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [CodePipelineClientTypes.ArtifactDetail]()
            for structure0 in inputArtifactsContainer {
                if let structure0 = structure0 {
                    inputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension CodePipelineClientTypes {
    /// Input information used for an action execution.
    public struct ActionExecutionInput: Swift.Equatable {
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Configuration data for an action execution.
        public var configuration: [Swift.String:Swift.String]?
        /// Details of input artifacts of the action that correspond to the action execution.
        public var inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]?
        /// The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.
        public var namespace: Swift.String?
        /// The AWS Region for the action, such as us-east-1.
        public var region: Swift.String?
        /// Configuration data for an action execution with all variable references replaced with their real values for the execution.
        public var resolvedConfiguration: [Swift.String:Swift.String]?
        /// The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.
        public var roleArn: Swift.String?

        public init (
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            configuration: [Swift.String:Swift.String]? = nil,
            inputArtifacts: [CodePipelineClientTypes.ArtifactDetail]? = nil,
            namespace: Swift.String? = nil,
            region: Swift.String? = nil,
            resolvedConfiguration: [Swift.String:Swift.String]? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.actionTypeId = actionTypeId
            self.configuration = configuration
            self.inputArtifacts = inputArtifacts
            self.namespace = namespace
            self.region = region
            self.resolvedConfiguration = resolvedConfiguration
            self.roleArn = roleArn
        }
    }

}

extension CodePipelineClientTypes.ActionExecutionOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionResult
        case outputArtifacts
        case outputVariables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionResult = self.executionResult {
            try encodeContainer.encode(executionResult, forKey: .executionResult)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for artifactdetail0 in outputArtifacts {
                try outputArtifactsContainer.encode(artifactdetail0)
            }
        }
        if let outputVariables = outputVariables {
            var outputVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputVariables)
            for (dictKey0, outputVariablesMap0) in outputVariables {
                try outputVariablesContainer.encode(outputVariablesMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ArtifactDetail?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[CodePipelineClientTypes.ArtifactDetail]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [CodePipelineClientTypes.ArtifactDetail]()
            for structure0 in outputArtifactsContainer {
                if let structure0 = structure0 {
                    outputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let executionResultDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionResult.self, forKey: .executionResult)
        executionResult = executionResultDecoded
        let outputVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .outputVariables)
        var outputVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let outputVariablesContainer = outputVariablesContainer {
            outputVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, outputvariablesvalue0) in outputVariablesContainer {
                if let outputvariablesvalue0 = outputvariablesvalue0 {
                    outputVariablesDecoded0?[key0] = outputvariablesvalue0
                }
            }
        }
        outputVariables = outputVariablesDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Output details listed for an action execution, such as the action execution result.
    public struct ActionExecutionOutput: Swift.Equatable {
        /// Execution result information listed in the output details for an action execution.
        public var executionResult: CodePipelineClientTypes.ActionExecutionResult?
        /// Details of output artifacts of the action that correspond to the action execution.
        public var outputArtifacts: [CodePipelineClientTypes.ArtifactDetail]?
        /// The outputVariables field shows the key-value pairs that were output as part of that execution.
        public var outputVariables: [Swift.String:Swift.String]?

        public init (
            executionResult: CodePipelineClientTypes.ActionExecutionResult? = nil,
            outputArtifacts: [CodePipelineClientTypes.ArtifactDetail]? = nil,
            outputVariables: [Swift.String:Swift.String]? = nil
        )
        {
            self.executionResult = executionResult
            self.outputArtifacts = outputArtifacts
            self.outputVariables = outputVariables
        }
    }

}

extension CodePipelineClientTypes.ActionExecutionResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalExecutionId
        case externalExecutionSummary
        case externalExecutionUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalExecutionId = self.externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let externalExecutionSummary = self.externalExecutionSummary {
            try encodeContainer.encode(externalExecutionSummary, forKey: .externalExecutionSummary)
        }
        if let externalExecutionUrl = self.externalExecutionUrl {
            try encodeContainer.encode(externalExecutionUrl, forKey: .externalExecutionUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
        let externalExecutionSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionSummary)
        externalExecutionSummary = externalExecutionSummaryDecoded
        let externalExecutionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionUrl)
        externalExecutionUrl = externalExecutionUrlDecoded
    }
}

extension CodePipelineClientTypes {
    /// Execution result information, such as the external execution ID.
    public struct ActionExecutionResult: Swift.Equatable {
        /// The action provider's external ID for the action execution.
        public var externalExecutionId: Swift.String?
        /// The action provider's summary for the action execution.
        public var externalExecutionSummary: Swift.String?
        /// The deepest external link to the external resource (for example, a repository URL or deployment endpoint) that is used when running the action.
        public var externalExecutionUrl: Swift.String?

        public init (
            externalExecutionId: Swift.String? = nil,
            externalExecutionSummary: Swift.String? = nil,
            externalExecutionUrl: Swift.String? = nil
        )
        {
            self.externalExecutionId = externalExecutionId
            self.externalExecutionSummary = externalExecutionSummary
            self.externalExecutionUrl = externalExecutionUrl
        }
    }

}

extension CodePipelineClientTypes {
    public enum ActionExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case abandoned
        case failed
        case inprogress
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionExecutionStatus] {
            return [
                .abandoned,
                .failed,
                .inprogress,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .abandoned: return "Abandoned"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionExecutionStatus(rawValue: rawValue) ?? ActionExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension ActionNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified action cannot be found.
public struct ActionNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActionNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes {
    public enum ActionOwner: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case custom
        case thirdparty
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionOwner] {
            return [
                .aws,
                .custom,
                .thirdparty,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .custom: return "Custom"
            case .thirdparty: return "ThirdParty"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ActionOwner(rawValue: rawValue) ?? ActionOwner.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.ActionRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case revisionChangeId
        case revisionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encodeTimestamp(created, format: .epochSeconds, forKey: .created)
        }
        if let revisionChangeId = self.revisionChangeId {
            try encodeContainer.encode(revisionChangeId, forKey: .revisionChangeId)
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let revisionChangeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionChangeId)
        revisionChangeId = revisionChangeIdDecoded
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the version (or revision) of an action.
    public struct ActionRevision: Swift.Equatable {
        /// The date and time when the most recent version of the action was created, in timestamp format.
        /// This member is required.
        public var created: ClientRuntime.Date?
        /// The unique identifier of the change that set the state to this revision (for example, a deployment ID or timestamp).
        /// This member is required.
        public var revisionChangeId: Swift.String?
        /// The system-generated unique ID that identifies the revision number of the action.
        /// This member is required.
        public var revisionId: Swift.String?

        public init (
            created: ClientRuntime.Date? = nil,
            revisionChangeId: Swift.String? = nil,
            revisionId: Swift.String? = nil
        )
        {
            self.created = created
            self.revisionChangeId = revisionChangeId
            self.revisionId = revisionId
        }
    }

}

extension CodePipelineClientTypes.ActionState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case currentRevision
        case entityUrl
        case latestExecution
        case revisionUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let currentRevision = self.currentRevision {
            try encodeContainer.encode(currentRevision, forKey: .currentRevision)
        }
        if let entityUrl = self.entityUrl {
            try encodeContainer.encode(entityUrl, forKey: .entityUrl)
        }
        if let latestExecution = self.latestExecution {
            try encodeContainer.encode(latestExecution, forKey: .latestExecution)
        }
        if let revisionUrl = self.revisionUrl {
            try encodeContainer.encode(revisionUrl, forKey: .revisionUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let currentRevisionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionRevision.self, forKey: .currentRevision)
        currentRevision = currentRevisionDecoded
        let latestExecutionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecution.self, forKey: .latestExecution)
        latestExecution = latestExecutionDecoded
        let entityUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityUrl)
        entityUrl = entityUrlDecoded
        let revisionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionUrl)
        revisionUrl = revisionUrlDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the state of an action.
    public struct ActionState: Swift.Equatable {
        /// The name of the action.
        public var actionName: Swift.String?
        /// Represents information about the version (or revision) of an action.
        public var currentRevision: CodePipelineClientTypes.ActionRevision?
        /// A URL link for more information about the state of the action, such as a deployment group details page.
        public var entityUrl: Swift.String?
        /// Represents information about the run of an action.
        public var latestExecution: CodePipelineClientTypes.ActionExecution?
        /// A URL link for more information about the revision, such as a commit details page.
        public var revisionUrl: Swift.String?

        public init (
            actionName: Swift.String? = nil,
            currentRevision: CodePipelineClientTypes.ActionRevision? = nil,
            entityUrl: Swift.String? = nil,
            latestExecution: CodePipelineClientTypes.ActionExecution? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.currentRevision = currentRevision
            self.entityUrl = entityUrl
            self.latestExecution = latestExecution
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes.ActionType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionConfigurationProperties
        case id
        case inputArtifactDetails
        case outputArtifactDetails
        case settings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionConfigurationProperties = actionConfigurationProperties {
            var actionConfigurationPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionConfigurationProperties)
            for actionconfigurationproperty0 in actionConfigurationProperties {
                try actionConfigurationPropertiesContainer.encode(actionconfigurationproperty0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputArtifactDetails = self.inputArtifactDetails {
            try encodeContainer.encode(inputArtifactDetails, forKey: .inputArtifactDetails)
        }
        if let outputArtifactDetails = self.outputArtifactDetails {
            try encodeContainer.encode(outputArtifactDetails, forKey: .outputArtifactDetails)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .id)
        id = idDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeSettings.self, forKey: .settings)
        settings = settingsDecoded
        let actionConfigurationPropertiesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionConfigurationProperty?].self, forKey: .actionConfigurationProperties)
        var actionConfigurationPropertiesDecoded0:[CodePipelineClientTypes.ActionConfigurationProperty]? = nil
        if let actionConfigurationPropertiesContainer = actionConfigurationPropertiesContainer {
            actionConfigurationPropertiesDecoded0 = [CodePipelineClientTypes.ActionConfigurationProperty]()
            for structure0 in actionConfigurationPropertiesContainer {
                if let structure0 = structure0 {
                    actionConfigurationPropertiesDecoded0?.append(structure0)
                }
            }
        }
        actionConfigurationProperties = actionConfigurationPropertiesDecoded0
        let inputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactDetails.self, forKey: .inputArtifactDetails)
        inputArtifactDetails = inputArtifactDetailsDecoded
        let outputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactDetails.self, forKey: .outputArtifactDetails)
        outputArtifactDetails = outputArtifactDetailsDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns information about the details of an action type.
    public struct ActionType: Swift.Equatable {
        /// The configuration properties for the action type.
        public var actionConfigurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]?
        /// Represents information about an action type.
        /// This member is required.
        public var id: CodePipelineClientTypes.ActionTypeId?
        /// The details of the input artifact for the action, such as its commit ID.
        /// This member is required.
        public var inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
        /// The details of the output artifact of the action, such as its commit ID.
        /// This member is required.
        public var outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
        /// The settings for the action type.
        public var settings: CodePipelineClientTypes.ActionTypeSettings?

        public init (
            actionConfigurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]? = nil,
            id: CodePipelineClientTypes.ActionTypeId? = nil,
            inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
            outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
            settings: CodePipelineClientTypes.ActionTypeSettings? = nil
        )
        {
            self.actionConfigurationProperties = actionConfigurationProperties
            self.id = id
            self.inputArtifactDetails = inputArtifactDetails
            self.outputArtifactDetails = outputArtifactDetails
            self.settings = settings
        }
    }

}

extension CodePipelineClientTypes.ActionTypeArtifactDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumCount
        case minimumCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumCount != 0 {
            try encodeContainer.encode(maximumCount, forKey: .maximumCount)
        }
        if minimumCount != 0 {
            try encodeContainer.encode(minimumCount, forKey: .minimumCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumCount) ?? 0
        minimumCount = minimumCountDecoded
        let maximumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumCount) ?? 0
        maximumCount = maximumCountDecoded
    }
}

extension CodePipelineClientTypes {
    /// Information about parameters for artifacts associated with the action type, such as the minimum and maximum artifacts allowed.
    public struct ActionTypeArtifactDetails: Swift.Equatable {
        /// The maximum number of artifacts that can be used with the actiontype. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of source.
        /// This member is required.
        public var maximumCount: Swift.Int
        /// The minimum number of artifacts that can be used with the action type. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of source.
        /// This member is required.
        public var minimumCount: Swift.Int

        public init (
            maximumCount: Swift.Int = 0,
            minimumCount: Swift.Int = 0
        )
        {
            self.maximumCount = maximumCount
            self.minimumCount = minimumCount
        }
    }

}

extension CodePipelineClientTypes.ActionTypeDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case executor
        case id
        case inputArtifactDetails
        case outputArtifactDetails
        case permissions
        case properties
        case urls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let executor = self.executor {
            try encodeContainer.encode(executor, forKey: .executor)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputArtifactDetails = self.inputArtifactDetails {
            try encodeContainer.encode(inputArtifactDetails, forKey: .inputArtifactDetails)
        }
        if let outputArtifactDetails = self.outputArtifactDetails {
            try encodeContainer.encode(outputArtifactDetails, forKey: .outputArtifactDetails)
        }
        if let permissions = self.permissions {
            try encodeContainer.encode(permissions, forKey: .permissions)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for actiontypeproperty0 in properties {
                try propertiesContainer.encode(actiontypeproperty0)
            }
        }
        if let urls = self.urls {
            try encodeContainer.encode(urls, forKey: .urls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let executorDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeExecutor.self, forKey: .executor)
        executor = executorDecoded
        let idDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeIdentifier.self, forKey: .id)
        id = idDecoded
        let inputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeArtifactDetails.self, forKey: .inputArtifactDetails)
        inputArtifactDetails = inputArtifactDetailsDecoded
        let outputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeArtifactDetails.self, forKey: .outputArtifactDetails)
        outputArtifactDetails = outputArtifactDetailsDecoded
        let permissionsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypePermissions.self, forKey: .permissions)
        permissions = permissionsDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionTypeProperty?].self, forKey: .properties)
        var propertiesDecoded0:[CodePipelineClientTypes.ActionTypeProperty]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [CodePipelineClientTypes.ActionTypeProperty]()
            for structure0 in propertiesContainer {
                if let structure0 = structure0 {
                    propertiesDecoded0?.append(structure0)
                }
            }
        }
        properties = propertiesDecoded0
        let urlsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeUrls.self, forKey: .urls)
        urls = urlsDecoded
    }
}

extension CodePipelineClientTypes {
    /// The parameters for the action type definition that are provided when the action type is created or updated.
    public struct ActionTypeDeclaration: Swift.Equatable {
        /// The description for the action type to be updated.
        public var description: Swift.String?
        /// Information about the executor for an action type that was created with any supported integration model.
        /// This member is required.
        public var executor: CodePipelineClientTypes.ActionTypeExecutor?
        /// The action category, owner, provider, and version of the action type to be updated.
        /// This member is required.
        public var id: CodePipelineClientTypes.ActionTypeIdentifier?
        /// Details for the artifacts, such as application files, to be worked on by the action. For example, the minimum and maximum number of input artifacts allowed.
        /// This member is required.
        public var inputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails?
        /// Details for the output artifacts, such as a built application, that are the result of the action. For example, the minimum and maximum number of output artifacts allowed.
        /// This member is required.
        public var outputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails?
        /// Details identifying the accounts with permissions to use the action type.
        public var permissions: CodePipelineClientTypes.ActionTypePermissions?
        /// The properties of the action type to be updated.
        public var properties: [CodePipelineClientTypes.ActionTypeProperty]?
        /// The links associated with the action type to be updated.
        public var urls: CodePipelineClientTypes.ActionTypeUrls?

        public init (
            description: Swift.String? = nil,
            executor: CodePipelineClientTypes.ActionTypeExecutor? = nil,
            id: CodePipelineClientTypes.ActionTypeIdentifier? = nil,
            inputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails? = nil,
            outputArtifactDetails: CodePipelineClientTypes.ActionTypeArtifactDetails? = nil,
            permissions: CodePipelineClientTypes.ActionTypePermissions? = nil,
            properties: [CodePipelineClientTypes.ActionTypeProperty]? = nil,
            urls: CodePipelineClientTypes.ActionTypeUrls? = nil
        )
        {
            self.description = description
            self.executor = executor
            self.id = id
            self.inputArtifactDetails = inputArtifactDetails
            self.outputArtifactDetails = outputArtifactDetails
            self.permissions = permissions
            self.properties = properties
            self.urls = urls
        }
    }

}

extension CodePipelineClientTypes.ActionTypeExecutor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case jobTimeout
        case policyStatementsTemplate
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let jobTimeout = self.jobTimeout {
            try encodeContainer.encode(jobTimeout, forKey: .jobTimeout)
        }
        if let policyStatementsTemplate = self.policyStatementsTemplate {
            try encodeContainer.encode(policyStatementsTemplate, forKey: .policyStatementsTemplate)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ExecutorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ExecutorType.self, forKey: .type)
        type = typeDecoded
        let policyStatementsTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyStatementsTemplate)
        policyStatementsTemplate = policyStatementsTemplateDecoded
        let jobTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .jobTimeout)
        jobTimeout = jobTimeoutDecoded
    }
}

extension CodePipelineClientTypes {
    /// The action engine, or executor, for an action type created for a provider, where the action is to be used by customers of the provider. The action engine is associated with the model used to create and update the action, such as the Lambda integration model.
    public struct ActionTypeExecutor: Swift.Equatable {
        /// The action configuration properties for the action type. These properties are specified in the action definition when the action type is created.
        /// This member is required.
        public var configuration: CodePipelineClientTypes.ExecutorConfiguration?
        /// The timeout in seconds for the job. An action execution can have multiple jobs. This is the timeout for a single job, not the entire action execution.
        public var jobTimeout: Swift.Int?
        /// The policy statement that specifies the permissions in the CodePipeline customer’s account that are needed to successfully run an action. To grant permission to another account, specify the account ID as the Principal, a domain-style identifier defined by the service, for example codepipeline.amazonaws.com. The size of the passed JSON policy document cannot exceed 2048 characters.
        public var policyStatementsTemplate: Swift.String?
        /// The integration model used to create and update the action type, Lambda or JobWorker.
        /// This member is required.
        public var type: CodePipelineClientTypes.ExecutorType?

        public init (
            configuration: CodePipelineClientTypes.ExecutorConfiguration? = nil,
            jobTimeout: Swift.Int? = nil,
            policyStatementsTemplate: Swift.String? = nil,
            type: CodePipelineClientTypes.ExecutorType? = nil
        )
        {
            self.configuration = configuration
            self.jobTimeout = jobTimeout
            self.policyStatementsTemplate = policyStatementsTemplate
            self.type = type
        }
    }

}

extension CodePipelineClientTypes.ActionTypeId: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case owner
        case provider
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner.rawValue, forKey: .owner)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionOwner.self, forKey: .owner)
        owner = ownerDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an action type.
    public struct ActionTypeId: Swift.Equatable {
        /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values.
        ///
        /// * Source
        ///
        /// * Build
        ///
        /// * Test
        ///
        /// * Deploy
        ///
        /// * Invoke
        ///
        /// * Approval
        /// This member is required.
        public var category: CodePipelineClientTypes.ActionCategory?
        /// The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom. For more information, see [Valid Action Types and Providers in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers).
        /// This member is required.
        public var owner: CodePipelineClientTypes.ActionOwner?
        /// The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy. For more information, see [Valid Action Types and Providers in CodePipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers).
        /// This member is required.
        public var provider: Swift.String?
        /// A string that describes the action version.
        /// This member is required.
        public var version: Swift.String?

        public init (
            category: CodePipelineClientTypes.ActionCategory? = nil,
            owner: CodePipelineClientTypes.ActionOwner? = nil,
            provider: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.category = category
            self.owner = owner
            self.provider = provider
            self.version = version
        }
    }

}

extension CodePipelineClientTypes.ActionTypeIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case owner
        case provider
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension CodePipelineClientTypes {
    /// Specifies the category, owner, provider, and version of the action type.
    public struct ActionTypeIdentifier: Swift.Equatable {
        /// Defines what kind of action can be taken in the stage, one of the following:
        ///
        /// * Source
        ///
        /// * Build
        ///
        /// * Test
        ///
        /// * Deploy
        ///
        /// * Approval
        ///
        /// * Invoke
        /// This member is required.
        public var category: CodePipelineClientTypes.ActionCategory?
        /// The creator of the action type being called: AWS or ThirdParty.
        /// This member is required.
        public var owner: Swift.String?
        /// The provider of the action type being called. The provider name is supplied when the action type is created.
        /// This member is required.
        public var provider: Swift.String?
        /// A string that describes the action type version.
        /// This member is required.
        public var version: Swift.String?

        public init (
            category: CodePipelineClientTypes.ActionCategory? = nil,
            owner: Swift.String? = nil,
            provider: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.category = category
            self.owner = owner
            self.provider = provider
            self.version = version
        }
    }

}

extension ActionTypeNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ActionTypeNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified action type cannot be found.
public struct ActionTypeNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActionTypeNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ActionTypeNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.ActionTypePermissions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAccounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedAccounts = allowedAccounts {
            var allowedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedAccounts)
            for allowedaccount0 in allowedAccounts {
                try allowedAccountsContainer.encode(allowedaccount0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedAccounts)
        var allowedAccountsDecoded0:[Swift.String]? = nil
        if let allowedAccountsContainer = allowedAccountsContainer {
            allowedAccountsDecoded0 = [Swift.String]()
            for string0 in allowedAccountsContainer {
                if let string0 = string0 {
                    allowedAccountsDecoded0?.append(string0)
                }
            }
        }
        allowedAccounts = allowedAccountsDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Details identifying the users with permissions to use the action type.
    public struct ActionTypePermissions: Swift.Equatable {
        /// A list of AWS account IDs with access to use the action type in their pipelines.
        /// This member is required.
        public var allowedAccounts: [Swift.String]?

        public init (
            allowedAccounts: [Swift.String]? = nil
        )
        {
            self.allowedAccounts = allowedAccounts
        }
    }

}

extension CodePipelineClientTypes.ActionTypeProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case key
        case name
        case noEcho
        case `optional` = "optional"
        case queryable
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if key != false {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if noEcho != false {
            try encodeContainer.encode(noEcho, forKey: .noEcho)
        }
        if `optional` != false {
            try encodeContainer.encode(`optional`, forKey: .`optional`)
        }
        if queryable != false {
            try encodeContainer.encode(queryable, forKey: .queryable)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let optionalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .optional) ?? false
        `optional` = optionalDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .key) ?? false
        key = keyDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho) ?? false
        noEcho = noEchoDecoded
        let queryableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .queryable) ?? false
        queryable = queryableDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about each property specified in the action configuration, such as the description and key name that display for the customer using the action type.
    public struct ActionTypeProperty: Swift.Equatable {
        /// The description of the property that is displayed to users.
        public var description: Swift.String?
        /// Whether the configuration property is a key.
        /// This member is required.
        public var key: Swift.Bool
        /// The property name that is displayed to users.
        /// This member is required.
        public var name: Swift.String?
        /// Whether to omit the field value entered by the customer in the log. If true, the value is not saved in CloudTrail logs for the action execution.
        /// This member is required.
        public var noEcho: Swift.Bool
        /// Whether the configuration property is an optional value.
        /// This member is required.
        public var `optional`: Swift.Bool
        /// Indicates that the property is used with polling. An action type can have up to one queryable property. If it has one, that property must be both required and not secret.
        public var queryable: Swift.Bool

        public init (
            description: Swift.String? = nil,
            key: Swift.Bool = false,
            name: Swift.String? = nil,
            noEcho: Swift.Bool = false,
            `optional`: Swift.Bool = false,
            queryable: Swift.Bool = false
        )
        {
            self.description = description
            self.key = key
            self.name = name
            self.noEcho = noEcho
            self.`optional` = `optional`
            self.queryable = queryable
        }
    }

}

extension CodePipelineClientTypes.ActionTypeSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityUrlTemplate
        case executionUrlTemplate
        case revisionUrlTemplate
        case thirdPartyConfigurationUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityUrlTemplate = self.entityUrlTemplate {
            try encodeContainer.encode(entityUrlTemplate, forKey: .entityUrlTemplate)
        }
        if let executionUrlTemplate = self.executionUrlTemplate {
            try encodeContainer.encode(executionUrlTemplate, forKey: .executionUrlTemplate)
        }
        if let revisionUrlTemplate = self.revisionUrlTemplate {
            try encodeContainer.encode(revisionUrlTemplate, forKey: .revisionUrlTemplate)
        }
        if let thirdPartyConfigurationUrl = self.thirdPartyConfigurationUrl {
            try encodeContainer.encode(thirdPartyConfigurationUrl, forKey: .thirdPartyConfigurationUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thirdPartyConfigurationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thirdPartyConfigurationUrl)
        thirdPartyConfigurationUrl = thirdPartyConfigurationUrlDecoded
        let entityUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityUrlTemplate)
        entityUrlTemplate = entityUrlTemplateDecoded
        let executionUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionUrlTemplate)
        executionUrlTemplate = executionUrlTemplateDecoded
        let revisionUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionUrlTemplate)
        revisionUrlTemplate = revisionUrlTemplateDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns information about the settings for an action type.
    public struct ActionTypeSettings: Swift.Equatable {
        /// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline.
        public var entityUrlTemplate: Swift.String?
        /// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action.
        public var executionUrlTemplate: Swift.String?
        /// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: Swift.String?
        /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
        public var thirdPartyConfigurationUrl: Swift.String?

        public init (
            entityUrlTemplate: Swift.String? = nil,
            executionUrlTemplate: Swift.String? = nil,
            revisionUrlTemplate: Swift.String? = nil,
            thirdPartyConfigurationUrl: Swift.String? = nil
        )
        {
            self.entityUrlTemplate = entityUrlTemplate
            self.executionUrlTemplate = executionUrlTemplate
            self.revisionUrlTemplate = revisionUrlTemplate
            self.thirdPartyConfigurationUrl = thirdPartyConfigurationUrl
        }
    }

}

extension CodePipelineClientTypes.ActionTypeUrls: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationUrl
        case entityUrlTemplate
        case executionUrlTemplate
        case revisionUrlTemplate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationUrl = self.configurationUrl {
            try encodeContainer.encode(configurationUrl, forKey: .configurationUrl)
        }
        if let entityUrlTemplate = self.entityUrlTemplate {
            try encodeContainer.encode(entityUrlTemplate, forKey: .entityUrlTemplate)
        }
        if let executionUrlTemplate = self.executionUrlTemplate {
            try encodeContainer.encode(executionUrlTemplate, forKey: .executionUrlTemplate)
        }
        if let revisionUrlTemplate = self.revisionUrlTemplate {
            try encodeContainer.encode(revisionUrlTemplate, forKey: .revisionUrlTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationUrl)
        configurationUrl = configurationUrlDecoded
        let entityUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityUrlTemplate)
        entityUrlTemplate = entityUrlTemplateDecoded
        let executionUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionUrlTemplate)
        executionUrlTemplate = executionUrlTemplateDecoded
        let revisionUrlTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionUrlTemplate)
        revisionUrlTemplate = revisionUrlTemplateDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns information about URLs for web pages that display to customers as links on the pipeline view, such as an external configuration page for the action type.
    public struct ActionTypeUrls: Swift.Equatable {
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can configure the external action.
        public var configurationUrl: Swift.String?
        /// The URL returned to the CodePipeline console that provides a deep link to the resources of the external system, such as a status page. This link is provided as part of the action display in the pipeline.
        public var entityUrlTemplate: Swift.String?
        /// The link to an execution page for the action type in progress. For example, for a CodeDeploy action, this link is shown on the pipeline view page in the CodePipeline console, and it links to a CodeDeploy status page.
        public var executionUrlTemplate: Swift.String?
        /// The URL returned to the CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
        public var revisionUrlTemplate: Swift.String?

        public init (
            configurationUrl: Swift.String? = nil,
            entityUrlTemplate: Swift.String? = nil,
            executionUrlTemplate: Swift.String? = nil,
            revisionUrlTemplate: Swift.String? = nil
        )
        {
            self.configurationUrl = configurationUrl
            self.entityUrlTemplate = entityUrlTemplate
            self.executionUrlTemplate = executionUrlTemplate
            self.revisionUrlTemplate = revisionUrlTemplate
        }
    }

}

extension ApprovalAlreadyCompletedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApprovalAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The approval action has already been approved or rejected.
public struct ApprovalAlreadyCompletedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ApprovalAlreadyCompletedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ApprovalAlreadyCompletedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.ApprovalResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case summary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .summary)
        summary = summaryDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ApprovalStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the result of an approval request.
    public struct ApprovalResult: Swift.Equatable {
        /// The response submitted by a reviewer assigned to an approval action request.
        /// This member is required.
        public var status: CodePipelineClientTypes.ApprovalStatus?
        /// The summary of the current status of the approval request.
        /// This member is required.
        public var summary: Swift.String?

        public init (
            status: CodePipelineClientTypes.ApprovalStatus? = nil,
            summary: Swift.String? = nil
        )
        {
            self.status = status
            self.summary = summary
        }
    }

}

extension CodePipelineClientTypes {
    public enum ApprovalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ApprovalStatus] {
            return [
                .approved,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .rejected: return "Rejected"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ApprovalStatus(rawValue: rawValue) ?? ApprovalStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.Artifact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
        case name
        case revision
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revision)
        revision = revisionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactLocation.self, forKey: .location)
        location = locationDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an artifact that is worked on by actions in the pipeline.
    public struct Artifact: Swift.Equatable {
        /// The location of an artifact.
        public var location: CodePipelineClientTypes.ArtifactLocation?
        /// The artifact's name.
        public var name: Swift.String?
        /// The artifact's revision ID. Depending on the type of object, this could be a commit ID (GitHub) or a revision ID (Amazon S3).
        public var revision: Swift.String?

        public init (
            location: CodePipelineClientTypes.ArtifactLocation? = nil,
            name: Swift.String? = nil,
            revision: Swift.String? = nil
        )
        {
            self.location = location
            self.name = name
            self.revision = revision
        }
    }

}

extension CodePipelineClientTypes.ArtifactDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case s3location
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let s3location = self.s3location {
            try encodeContainer.encode(s3location, forKey: .s3location)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let s3locationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.S3Location.self, forKey: .s3location)
        s3location = s3locationDecoded
    }
}

extension CodePipelineClientTypes {
    /// Artifact details for the action execution, such as the artifact location.
    public struct ArtifactDetail: Swift.Equatable {
        /// The artifact object name for the action execution.
        public var name: Swift.String?
        /// The Amazon S3 artifact location for the action execution.
        public var s3location: CodePipelineClientTypes.S3Location?

        public init (
            name: Swift.String? = nil,
            s3location: CodePipelineClientTypes.S3Location? = nil
        )
        {
            self.name = name
            self.s3location = s3location
        }
    }

}

extension CodePipelineClientTypes.ArtifactDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumCount
        case minimumCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumCount != 0 {
            try encodeContainer.encode(maximumCount, forKey: .maximumCount)
        }
        if minimumCount != 0 {
            try encodeContainer.encode(minimumCount, forKey: .minimumCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumCount) ?? 0
        minimumCount = minimumCountDecoded
        let maximumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumCount) ?? 0
        maximumCount = maximumCountDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns information about the details of an artifact.
    public struct ArtifactDetails: Swift.Equatable {
        /// The maximum number of artifacts allowed for the action type.
        /// This member is required.
        public var maximumCount: Swift.Int
        /// The minimum number of artifacts allowed for the action type.
        /// This member is required.
        public var minimumCount: Swift.Int

        public init (
            maximumCount: Swift.Int = 0,
            minimumCount: Swift.Int = 0
        )
        {
            self.maximumCount = maximumCount
            self.minimumCount = minimumCount
        }
    }

}

extension CodePipelineClientTypes.ArtifactLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Location
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Location = self.s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactLocationType.self, forKey: .type)
        type = typeDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.S3ArtifactLocation.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the location of an artifact.
    public struct ArtifactLocation: Swift.Equatable {
        /// The S3 bucket that contains the artifact.
        public var s3Location: CodePipelineClientTypes.S3ArtifactLocation?
        /// The type of artifact in the location.
        public var type: CodePipelineClientTypes.ArtifactLocationType?

        public init (
            s3Location: CodePipelineClientTypes.S3ArtifactLocation? = nil,
            type: CodePipelineClientTypes.ArtifactLocationType? = nil
        )
        {
            self.s3Location = s3Location
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum ArtifactLocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactLocationType] {
            return [
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactLocationType(rawValue: rawValue) ?? ArtifactLocationType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.ArtifactRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case name
        case revisionChangeIdentifier
        case revisionId
        case revisionSummary
        case revisionUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encodeTimestamp(created, format: .epochSeconds, forKey: .created)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let revisionChangeIdentifier = self.revisionChangeIdentifier {
            try encodeContainer.encode(revisionChangeIdentifier, forKey: .revisionChangeIdentifier)
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let revisionSummary = self.revisionSummary {
            try encodeContainer.encode(revisionSummary, forKey: .revisionSummary)
        }
        if let revisionUrl = self.revisionUrl {
            try encodeContainer.encode(revisionUrl, forKey: .revisionUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let revisionChangeIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionChangeIdentifier)
        revisionChangeIdentifier = revisionChangeIdentifierDecoded
        let revisionSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionSummary)
        revisionSummary = revisionSummaryDecoded
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
        let revisionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionUrl)
        revisionUrl = revisionUrlDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents revision details of an artifact.
    public struct ArtifactRevision: Swift.Equatable {
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: ClientRuntime.Date?
        /// The name of an artifact. This name might be system-generated, such as "MyApp", or defined by the user when an action is created.
        public var name: Swift.String?
        /// An additional identifier for a revision, such as a commit date or, for artifacts stored in Amazon S3 buckets, the ETag value.
        public var revisionChangeIdentifier: Swift.String?
        /// The revision ID of the artifact.
        public var revisionId: Swift.String?
        /// Summary information about the most recent revision of the artifact. For GitHub and AWS CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a codepipeline-artifact-revision-summary key specified in the object metadata.
        public var revisionSummary: Swift.String?
        /// The commit ID for the artifact revision. For artifacts stored in GitHub or AWS CodeCommit repositories, the commit ID is linked to a commit details page.
        public var revisionUrl: Swift.String?

        public init (
            created: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            revisionChangeIdentifier: Swift.String? = nil,
            revisionId: Swift.String? = nil,
            revisionSummary: Swift.String? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.created = created
            self.name = name
            self.revisionChangeIdentifier = revisionChangeIdentifier
            self.revisionId = revisionId
            self.revisionSummary = revisionSummary
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes.ArtifactStore: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionKey
        case location
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactStoreType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}

extension CodePipelineClientTypes {
    /// The S3 bucket where artifacts for the pipeline are stored. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
    public struct ArtifactStore: Swift.Equatable {
        /// The encryption key used to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If this is undefined, the default key for Amazon S3 is used.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.
        /// This member is required.
        public var location: Swift.String?
        /// The type of the artifact store, such as S3.
        /// This member is required.
        public var type: CodePipelineClientTypes.ArtifactStoreType?

        public init (
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            location: Swift.String? = nil,
            type: CodePipelineClientTypes.ArtifactStoreType? = nil
        )
        {
            self.encryptionKey = encryptionKey
            self.location = location
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum ArtifactStoreType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactStoreType] {
            return [
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ArtifactStoreType(rawValue: rawValue) ?? ArtifactStoreType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.BlockerDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.BlockerType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodePipelineClientTypes {
    /// Reserved for future use.
    public struct BlockerDeclaration: Swift.Equatable {
        /// Reserved for future use.
        /// This member is required.
        public var name: Swift.String?
        /// Reserved for future use.
        /// This member is required.
        public var type: CodePipelineClientTypes.BlockerType?

        public init (
            name: Swift.String? = nil,
            type: CodePipelineClientTypes.BlockerType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum BlockerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case schedule
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockerType] {
            return [
                .schedule,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .schedule: return "Schedule"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlockerType(rawValue: rawValue) ?? BlockerType.sdkUnknown(rawValue)
        }
    }
}

extension ConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to modify the tag due to a simultaneous update request.
public struct ConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request cannot be handled because the pipeline is busy handling ongoing activities. Try again later.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateCustomActionTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case configurationProperties
        case inputArtifactDetails
        case outputArtifactDetails
        case provider
        case settings
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let configurationProperties = configurationProperties {
            var configurationPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurationProperties)
            for actionconfigurationproperty0 in configurationProperties {
                try configurationPropertiesContainer.encode(actionconfigurationproperty0)
            }
        }
        if let inputArtifactDetails = self.inputArtifactDetails {
            try encodeContainer.encode(inputArtifactDetails, forKey: .inputArtifactDetails)
        }
        if let outputArtifactDetails = self.outputArtifactDetails {
            try encodeContainer.encode(outputArtifactDetails, forKey: .outputArtifactDetails)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension CreateCustomActionTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateCustomActionType operation.
public struct CreateCustomActionTypeInput: Swift.Equatable {
    /// The category of the custom action, such as a build action or a test action.
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The configuration properties for the custom action. You can refer to a name in the configuration properties of the custom action within the URL templates by following the format of {Config:name}, as long as the configuration property is both required and not secret. For more information, see [Create a Custom Action for a Pipeline](https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-create-custom-action.html).
    public var configurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]?
    /// The details of the input artifact for the action, such as its commit ID.
    /// This member is required.
    public var inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    /// The details of the output artifact of the action, such as its commit ID.
    /// This member is required.
    public var outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    /// The provider of the service used in the custom action, such as AWS CodeDeploy.
    /// This member is required.
    public var provider: Swift.String?
    /// URLs that provide users information about this custom action.
    public var settings: CodePipelineClientTypes.ActionTypeSettings?
    /// The tags for the custom action.
    public var tags: [CodePipelineClientTypes.Tag]?
    /// The version identifier of the custom action.
    /// This member is required.
    public var version: Swift.String?

    public init (
        category: CodePipelineClientTypes.ActionCategory? = nil,
        configurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]? = nil,
        inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
        outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails? = nil,
        provider: Swift.String? = nil,
        settings: CodePipelineClientTypes.ActionTypeSettings? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.configurationProperties = configurationProperties
        self.inputArtifactDetails = inputArtifactDetails
        self.outputArtifactDetails = outputArtifactDetails
        self.provider = provider
        self.settings = settings
        self.tags = tags
        self.version = version
    }
}

struct CreateCustomActionTypeInputBody: Swift.Equatable {
    let category: CodePipelineClientTypes.ActionCategory?
    let provider: Swift.String?
    let version: Swift.String?
    let settings: CodePipelineClientTypes.ActionTypeSettings?
    let configurationProperties: [CodePipelineClientTypes.ActionConfigurationProperty]?
    let inputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    let outputArtifactDetails: CodePipelineClientTypes.ArtifactDetails?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension CreateCustomActionTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case configurationProperties
        case inputArtifactDetails
        case outputArtifactDetails
        case provider
        case settings
        case tags
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeSettings.self, forKey: .settings)
        settings = settingsDecoded
        let configurationPropertiesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionConfigurationProperty?].self, forKey: .configurationProperties)
        var configurationPropertiesDecoded0:[CodePipelineClientTypes.ActionConfigurationProperty]? = nil
        if let configurationPropertiesContainer = configurationPropertiesContainer {
            configurationPropertiesDecoded0 = [CodePipelineClientTypes.ActionConfigurationProperty]()
            for structure0 in configurationPropertiesContainer {
                if let structure0 = structure0 {
                    configurationPropertiesDecoded0?.append(structure0)
                }
            }
        }
        configurationProperties = configurationPropertiesDecoded0
        let inputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactDetails.self, forKey: .inputArtifactDetails)
        inputArtifactDetails = inputArtifactDetailsDecoded
        let outputArtifactDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactDetails.self, forKey: .outputArtifactDetails)
        outputArtifactDetails = outputArtifactDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateCustomActionTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCustomActionTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsException" : self = .invalidTagsException(try InvalidTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateCustomActionTypeOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidTagsException(InvalidTagsException)
    case limitExceededException(LimitExceededException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCustomActionTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateCustomActionTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionType = output.actionType
            self.tags = output.tags
        } else {
            self.actionType = nil
            self.tags = nil
        }
    }
}

/// Represents the output of a CreateCustomActionType operation.
public struct CreateCustomActionTypeOutputResponse: Swift.Equatable {
    /// Returns information about the details of an action type.
    /// This member is required.
    public var actionType: CodePipelineClientTypes.ActionType?
    /// Specifies the tags applied to the custom action.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init (
        actionType: CodePipelineClientTypes.ActionType? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.actionType = actionType
        self.tags = tags
    }
}

struct CreateCustomActionTypeOutputResponseBody: Swift.Equatable {
    let actionType: CodePipelineClientTypes.ActionType?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension CreateCustomActionTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipeline = self.pipeline {
            try encodeContainer.encode(pipeline, forKey: .pipeline)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreatePipeline action.
public struct CreatePipelineInput: Swift.Equatable {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    /// This member is required.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?
    /// The tags for the pipeline.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init (
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.pipeline = pipeline
        self.tags = tags
    }
}

struct CreatePipelineInputBody: Swift.Equatable {
    let pipeline: CodePipelineClientTypes.PipelineDeclaration?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineDeclaration.self, forKey: .pipeline)
        pipeline = pipelineDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidActionDeclarationException" : self = .invalidActionDeclarationException(try InvalidActionDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlockerDeclarationException" : self = .invalidBlockerDeclarationException(try InvalidBlockerDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStageDeclarationException" : self = .invalidStageDeclarationException(try InvalidStageDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStructureException" : self = .invalidStructureException(try InvalidStructureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsException" : self = .invalidTagsException(try InvalidTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNameInUseException" : self = .pipelineNameInUseException(try PipelineNameInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreatePipelineOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidActionDeclarationException(InvalidActionDeclarationException)
    case invalidBlockerDeclarationException(InvalidBlockerDeclarationException)
    case invalidStageDeclarationException(InvalidStageDeclarationException)
    case invalidStructureException(InvalidStructureException)
    case invalidTagsException(InvalidTagsException)
    case limitExceededException(LimitExceededException)
    case pipelineNameInUseException(PipelineNameInUseException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipeline = output.pipeline
            self.tags = output.tags
        } else {
            self.pipeline = nil
            self.tags = nil
        }
    }
}

/// Represents the output of a CreatePipeline action.
public struct CreatePipelineOutputResponse: Swift.Equatable {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?
    /// Specifies the tags applied to the pipeline.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init (
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.pipeline = pipeline
        self.tags = tags
    }
}

struct CreatePipelineOutputResponseBody: Swift.Equatable {
    let pipeline: CodePipelineClientTypes.PipelineDeclaration?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension CreatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineDeclaration.self, forKey: .pipeline)
        pipeline = pipelineDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodePipelineClientTypes.CurrentRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeIdentifier
        case created
        case revision
        case revisionSummary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeIdentifier = self.changeIdentifier {
            try encodeContainer.encode(changeIdentifier, forKey: .changeIdentifier)
        }
        if let created = self.created {
            try encodeContainer.encodeTimestamp(created, format: .epochSeconds, forKey: .created)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let revisionSummary = self.revisionSummary {
            try encodeContainer.encode(revisionSummary, forKey: .revisionSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revision)
        revision = revisionDecoded
        let changeIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeIdentifier)
        changeIdentifier = changeIdentifierDecoded
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
        let revisionSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionSummary)
        revisionSummary = revisionSummaryDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a current revision.
    public struct CurrentRevision: Swift.Equatable {
        /// The change identifier for the current revision.
        /// This member is required.
        public var changeIdentifier: Swift.String?
        /// The date and time when the most recent revision of the artifact was created, in timestamp format.
        public var created: ClientRuntime.Date?
        /// The revision ID of the current version of an artifact.
        /// This member is required.
        public var revision: Swift.String?
        /// The summary of the most recent revision of the artifact.
        public var revisionSummary: Swift.String?

        public init (
            changeIdentifier: Swift.String? = nil,
            created: ClientRuntime.Date? = nil,
            revision: Swift.String? = nil,
            revisionSummary: Swift.String? = nil
        )
        {
            self.changeIdentifier = changeIdentifier
            self.created = created
            self.revision = revision
            self.revisionSummary = revisionSummary
        }
    }

}

extension DeleteCustomActionTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case provider
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension DeleteCustomActionTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteCustomActionType operation. The custom action will be marked as deleted.
public struct DeleteCustomActionTypeInput: Swift.Equatable {
    /// The category of the custom action that you want to delete, such as source or deploy.
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The provider of the service used in the custom action, such as AWS CodeDeploy.
    /// This member is required.
    public var provider: Swift.String?
    /// The version of the custom action to delete.
    /// This member is required.
    public var version: Swift.String?

    public init (
        category: CodePipelineClientTypes.ActionCategory? = nil,
        provider: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.provider = provider
        self.version = version
    }
}

struct DeleteCustomActionTypeInputBody: Swift.Equatable {
    let category: CodePipelineClientTypes.ActionCategory?
    let provider: Swift.String?
    let version: Swift.String?
}

extension DeleteCustomActionTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case provider
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension DeleteCustomActionTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCustomActionTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteCustomActionTypeOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCustomActionTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCustomActionTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeletePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeletePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeletePipeline action.
public struct DeletePipelineInput: Swift.Equatable {
    /// The name of the pipeline to be deleted.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeletePipelineInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeletePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeletePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeletePipelineOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePipelineOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteWebhookInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteWebhookInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteWebhookInput: Swift.Equatable {
    /// The name of the webhook you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteWebhookInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteWebhookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteWebhookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteWebhookOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWebhookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWebhookOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeregisterWebhookWithThirdPartyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhookName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let webhookName = self.webhookName {
            try encodeContainer.encode(webhookName, forKey: .webhookName)
        }
    }
}

extension DeregisterWebhookWithThirdPartyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeregisterWebhookWithThirdPartyInput: Swift.Equatable {
    /// The name of the webhook you want to deregister.
    public var webhookName: Swift.String?

    public init (
        webhookName: Swift.String? = nil
    )
    {
        self.webhookName = webhookName
    }
}

struct DeregisterWebhookWithThirdPartyInputBody: Swift.Equatable {
    let webhookName: Swift.String?
}

extension DeregisterWebhookWithThirdPartyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhookName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webhookName)
        webhookName = webhookNameDecoded
    }
}

extension DeregisterWebhookWithThirdPartyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterWebhookWithThirdPartyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WebhookNotFoundException" : self = .webhookNotFoundException(try WebhookNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterWebhookWithThirdPartyOutputError: Swift.Error, Swift.Equatable {
    case validationException(ValidationException)
    case webhookNotFoundException(WebhookNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterWebhookWithThirdPartyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterWebhookWithThirdPartyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DisableStageTransitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName
        case reason
        case stageName
        case transitionType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let transitionType = self.transitionType {
            try encodeContainer.encode(transitionType.rawValue, forKey: .transitionType)
        }
    }
}

extension DisableStageTransitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DisableStageTransition action.
public struct DisableStageTransitionInput: Swift.Equatable {
    /// The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.
    /// This member is required.
    public var reason: Swift.String?
    /// The name of the stage where you want to disable the inbound or outbound transition of artifacts.
    /// This member is required.
    public var stageName: Swift.String?
    /// Specifies whether artifacts are prevented from transitioning into the stage and being processed by the actions in that stage (inbound), or prevented from transitioning from the stage after they have been processed by the actions in that stage (outbound).
    /// This member is required.
    public var transitionType: CodePipelineClientTypes.StageTransitionType?

    public init (
        pipelineName: Swift.String? = nil,
        reason: Swift.String? = nil,
        stageName: Swift.String? = nil,
        transitionType: CodePipelineClientTypes.StageTransitionType? = nil
    )
    {
        self.pipelineName = pipelineName
        self.reason = reason
        self.stageName = stageName
        self.transitionType = transitionType
    }
}

struct DisableStageTransitionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let stageName: Swift.String?
    let transitionType: CodePipelineClientTypes.StageTransitionType?
    let reason: Swift.String?
}

extension DisableStageTransitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName
        case reason
        case stageName
        case transitionType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let transitionTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageTransitionType.self, forKey: .transitionType)
        transitionType = transitionTypeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension DisableStageTransitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableStageTransitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotFoundException" : self = .stageNotFoundException(try StageNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisableStageTransitionOutputError: Swift.Error, Swift.Equatable {
    case pipelineNotFoundException(PipelineNotFoundException)
    case stageNotFoundException(StageNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableStageTransitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableStageTransitionOutputResponse: Swift.Equatable {

    public init () { }
}

extension DuplicatedStopRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DuplicatedStopRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The pipeline execution is already in a Stopping state. If you already chose to stop and wait, you cannot make that request again. You can choose to stop and abandon now, but be aware that this option can lead to failed tasks or out of sequence tasks. If you already chose to stop and abandon, you cannot make that request again.
public struct DuplicatedStopRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DuplicatedStopRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DuplicatedStopRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension EnableStageTransitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName
        case stageName
        case transitionType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let transitionType = self.transitionType {
            try encodeContainer.encode(transitionType.rawValue, forKey: .transitionType)
        }
    }
}

extension EnableStageTransitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an EnableStageTransition action.
public struct EnableStageTransitionInput: Swift.Equatable {
    /// The name of the pipeline in which you want to enable the flow of artifacts from one stage to another.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage where you want to enable the transition of artifacts, either into the stage (inbound) or from that stage to the next stage (outbound).
    /// This member is required.
    public var stageName: Swift.String?
    /// Specifies whether artifacts are allowed to enter the stage and be processed by the actions in that stage (inbound) or whether already processed artifacts are allowed to transition to the next stage (outbound).
    /// This member is required.
    public var transitionType: CodePipelineClientTypes.StageTransitionType?

    public init (
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil,
        transitionType: CodePipelineClientTypes.StageTransitionType? = nil
    )
    {
        self.pipelineName = pipelineName
        self.stageName = stageName
        self.transitionType = transitionType
    }
}

struct EnableStageTransitionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let stageName: Swift.String?
    let transitionType: CodePipelineClientTypes.StageTransitionType?
}

extension EnableStageTransitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineName
        case stageName
        case transitionType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let transitionTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageTransitionType.self, forKey: .transitionType)
        transitionType = transitionTypeDecoded
    }
}

extension EnableStageTransitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableStageTransitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotFoundException" : self = .stageNotFoundException(try StageNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum EnableStageTransitionOutputError: Swift.Error, Swift.Equatable {
    case pipelineNotFoundException(PipelineNotFoundException)
    case stageNotFoundException(StageNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableStageTransitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableStageTransitionOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodePipelineClientTypes.EncryptionKey: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.EncryptionKeyType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.
    public struct EncryptionKey: Swift.Equatable {
        /// The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN. Aliases are recognized only in the account that created the customer master key (CMK). For cross-account actions, you can only use the key ID or key ARN to identify the key.
        /// This member is required.
        public var id: Swift.String?
        /// The type of encryption key, such as an AWS Key Management Service (AWS KMS) key. When creating or updating a pipeline, the value must be set to 'KMS'.
        /// This member is required.
        public var type: CodePipelineClientTypes.EncryptionKeyType?

        public init (
            id: Swift.String? = nil,
            type: CodePipelineClientTypes.EncryptionKeyType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum EncryptionKeyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kms
        case sdkUnknown(Swift.String)

        public static var allCases: [EncryptionKeyType] {
            return [
                .kms,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kms: return "KMS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EncryptionKeyType(rawValue: rawValue) ?? EncryptionKeyType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.ErrorDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an error in AWS CodePipeline.
    public struct ErrorDetails: Swift.Equatable {
        /// The system ID or number code of the error.
        public var code: Swift.String?
        /// The text of the error message.
        public var message: Swift.String?

        public init (
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CodePipelineClientTypes.ExecutionDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalExecutionId
        case percentComplete
        case summary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalExecutionId = self.externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let percentComplete = self.percentComplete {
            try encodeContainer.encode(percentComplete, forKey: .percentComplete)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .summary)
        summary = summaryDecoded
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
        let percentCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentComplete)
        percentComplete = percentCompleteDecoded
    }
}

extension CodePipelineClientTypes {
    /// The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    public struct ExecutionDetails: Swift.Equatable {
        /// The system-generated unique ID of this action used to identify this job worker in any external systems, such as AWS CodeDeploy.
        public var externalExecutionId: Swift.String?
        /// The percentage of work completed on the action, represented on a scale of 0 to 100 percent.
        public var percentComplete: Swift.Int?
        /// The summary of the current status of the actions.
        public var summary: Swift.String?

        public init (
            externalExecutionId: Swift.String? = nil,
            percentComplete: Swift.Int? = nil,
            summary: Swift.String? = nil
        )
        {
            self.externalExecutionId = externalExecutionId
            self.percentComplete = percentComplete
            self.summary = summary
        }
    }

}

extension CodePipelineClientTypes.ExecutionTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggerDetail
        case triggerType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerDetail = self.triggerDetail {
            try encodeContainer.encode(triggerDetail, forKey: .triggerDetail)
        }
        if let triggerType = self.triggerType {
            try encodeContainer.encode(triggerType.rawValue, forKey: .triggerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.TriggerType.self, forKey: .triggerType)
        triggerType = triggerTypeDecoded
        let triggerDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .triggerDetail)
        triggerDetail = triggerDetailDecoded
    }
}

extension CodePipelineClientTypes {
    /// The interaction or event that started a pipeline execution.
    public struct ExecutionTrigger: Swift.Equatable {
        /// Detail related to the event that started a pipeline execution, such as the webhook ARN of the webhook that triggered the pipeline execution or the user ARN for a user-initiated start-pipeline-execution CLI command.
        public var triggerDetail: Swift.String?
        /// The type of change-detection method, command, or user interaction that started a pipeline execution.
        public var triggerType: CodePipelineClientTypes.TriggerType?

        public init (
            triggerDetail: Swift.String? = nil,
            triggerType: CodePipelineClientTypes.TriggerType? = nil
        )
        {
            self.triggerDetail = triggerDetail
            self.triggerType = triggerType
        }
    }

}

extension CodePipelineClientTypes.ExecutorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobWorkerExecutorConfiguration
        case lambdaExecutorConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobWorkerExecutorConfiguration = self.jobWorkerExecutorConfiguration {
            try encodeContainer.encode(jobWorkerExecutorConfiguration, forKey: .jobWorkerExecutorConfiguration)
        }
        if let lambdaExecutorConfiguration = self.lambdaExecutorConfiguration {
            try encodeContainer.encode(lambdaExecutorConfiguration, forKey: .lambdaExecutorConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaExecutorConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.LambdaExecutorConfiguration.self, forKey: .lambdaExecutorConfiguration)
        lambdaExecutorConfiguration = lambdaExecutorConfigurationDecoded
        let jobWorkerExecutorConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobWorkerExecutorConfiguration.self, forKey: .jobWorkerExecutorConfiguration)
        jobWorkerExecutorConfiguration = jobWorkerExecutorConfigurationDecoded
    }
}

extension CodePipelineClientTypes {
    /// The action engine, or executor, related to the supported integration model used to create and update the action type. The available executor types are Lambda and JobWorker.
    public struct ExecutorConfiguration: Swift.Equatable {
        /// Details about the JobWorker executor of the action type.
        public var jobWorkerExecutorConfiguration: CodePipelineClientTypes.JobWorkerExecutorConfiguration?
        /// Details about the Lambda executor of the action type.
        public var lambdaExecutorConfiguration: CodePipelineClientTypes.LambdaExecutorConfiguration?

        public init (
            jobWorkerExecutorConfiguration: CodePipelineClientTypes.JobWorkerExecutorConfiguration? = nil,
            lambdaExecutorConfiguration: CodePipelineClientTypes.LambdaExecutorConfiguration? = nil
        )
        {
            self.jobWorkerExecutorConfiguration = jobWorkerExecutorConfiguration
            self.lambdaExecutorConfiguration = lambdaExecutorConfiguration
        }
    }

}

extension CodePipelineClientTypes {
    public enum ExecutorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jobworker
        case lambda
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutorType] {
            return [
                .jobworker,
                .lambda,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jobworker: return "JobWorker"
            case .lambda: return "Lambda"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutorType(rawValue: rawValue) ?? ExecutorType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.FailureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalExecutionId
        case message
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalExecutionId = self.externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.FailureType.self, forKey: .type)
        type = typeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about failure details.
    public struct FailureDetails: Swift.Equatable {
        /// The external ID of the run of the action that failed.
        public var externalExecutionId: Swift.String?
        /// The message about the failure.
        /// This member is required.
        public var message: Swift.String?
        /// The type of the failure.
        /// This member is required.
        public var type: CodePipelineClientTypes.FailureType?

        public init (
            externalExecutionId: Swift.String? = nil,
            message: Swift.String? = nil,
            type: CodePipelineClientTypes.FailureType? = nil
        )
        {
            self.externalExecutionId = externalExecutionId
            self.message = message
            self.type = type
        }
    }

}

extension CodePipelineClientTypes {
    public enum FailureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configurationerror
        case jobfailed
        case permissionerror
        case revisionoutofsync
        case revisionunavailable
        case systemunavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureType] {
            return [
                .configurationerror,
                .jobfailed,
                .permissionerror,
                .revisionoutofsync,
                .revisionunavailable,
                .systemunavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configurationerror: return "ConfigurationError"
            case .jobfailed: return "JobFailed"
            case .permissionerror: return "PermissionError"
            case .revisionoutofsync: return "RevisionOutOfSync"
            case .revisionunavailable: return "RevisionUnavailable"
            case .systemunavailable: return "SystemUnavailable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailureType(rawValue: rawValue) ?? FailureType.sdkUnknown(rawValue)
        }
    }
}

extension GetActionTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case owner
        case provider
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let provider = self.provider {
            try encodeContainer.encode(provider, forKey: .provider)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension GetActionTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetActionTypeInput: Swift.Equatable {
    /// Defines what kind of action can be taken in the stage. The following are the valid values:
    ///
    /// * Source
    ///
    /// * Build
    ///
    /// * Test
    ///
    /// * Deploy
    ///
    /// * Approval
    ///
    /// * Invoke
    /// This member is required.
    public var category: CodePipelineClientTypes.ActionCategory?
    /// The creator of an action type that was created with any supported integration model. There are two valid values: AWS and ThirdParty.
    /// This member is required.
    public var owner: Swift.String?
    /// The provider of the action type being called. The provider name is specified when the action type is created.
    /// This member is required.
    public var provider: Swift.String?
    /// A string that describes the action type version.
    /// This member is required.
    public var version: Swift.String?

    public init (
        category: CodePipelineClientTypes.ActionCategory? = nil,
        owner: Swift.String? = nil,
        provider: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.category = category
        self.owner = owner
        self.provider = provider
        self.version = version
    }
}

struct GetActionTypeInputBody: Swift.Equatable {
    let category: CodePipelineClientTypes.ActionCategory?
    let owner: Swift.String?
    let provider: Swift.String?
    let version: Swift.String?
}

extension GetActionTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case owner
        case provider
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionCategory.self, forKey: .category)
        category = categoryDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension GetActionTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetActionTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionTypeNotFoundException" : self = .actionTypeNotFoundException(try ActionTypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetActionTypeOutputError: Swift.Error, Swift.Equatable {
    case actionTypeNotFoundException(ActionTypeNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetActionTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetActionTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionType = output.actionType
        } else {
            self.actionType = nil
        }
    }
}

public struct GetActionTypeOutputResponse: Swift.Equatable {
    /// The action type information for the requested action type, such as the action type ID.
    public var actionType: CodePipelineClientTypes.ActionTypeDeclaration?

    public init (
        actionType: CodePipelineClientTypes.ActionTypeDeclaration? = nil
    )
    {
        self.actionType = actionType
    }
}

struct GetActionTypeOutputResponseBody: Swift.Equatable {
    let actionType: CodePipelineClientTypes.ActionTypeDeclaration?
}

extension GetActionTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeDeclaration.self, forKey: .actionType)
        actionType = actionTypeDecoded
    }
}

extension GetJobDetailsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension GetJobDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetJobDetails action.
public struct GetJobDetailsInput: Swift.Equatable {
    /// The unique system-generated ID for the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct GetJobDetailsInputBody: Swift.Equatable {
    let jobId: Swift.String?
}

extension GetJobDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension GetJobDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetJobDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetJobDetailsOutputError: Swift.Error, Swift.Equatable {
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetJobDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetJobDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDetails = output.jobDetails
        } else {
            self.jobDetails = nil
        }
    }
}

/// Represents the output of a GetJobDetails action.
public struct GetJobDetailsOutputResponse: Swift.Equatable {
    /// The details of the job. If AWSSessionCredentials is used, a long-running job can call GetJobDetails again to obtain new credentials.
    public var jobDetails: CodePipelineClientTypes.JobDetails?

    public init (
        jobDetails: CodePipelineClientTypes.JobDetails? = nil
    )
    {
        self.jobDetails = jobDetails
    }
}

struct GetJobDetailsOutputResponseBody: Swift.Equatable {
    let jobDetails: CodePipelineClientTypes.JobDetails?
}

extension GetJobDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobDetails.self, forKey: .jobDetails)
        jobDetails = jobDetailsDecoded
    }
}

extension GetPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
        case pipelineName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
    }
}

extension GetPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetPipelineExecution action.
public struct GetPipelineExecutionInput: Swift.Equatable {
    /// The ID of the pipeline execution about which you want to get execution details.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline about which you want to get execution details.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
    }
}

struct GetPipelineExecutionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineExecutionId: Swift.String?
}

extension GetPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
        case pipelineName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension GetPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "PipelineExecutionNotFoundException" : self = .pipelineExecutionNotFoundException(try PipelineExecutionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case pipelineExecutionNotFoundException(PipelineExecutionNotFoundException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecution = output.pipelineExecution
        } else {
            self.pipelineExecution = nil
        }
    }
}

/// Represents the output of a GetPipelineExecution action.
public struct GetPipelineExecutionOutputResponse: Swift.Equatable {
    /// Represents information about the execution of a pipeline.
    public var pipelineExecution: CodePipelineClientTypes.PipelineExecution?

    public init (
        pipelineExecution: CodePipelineClientTypes.PipelineExecution? = nil
    )
    {
        self.pipelineExecution = pipelineExecution
    }
}

struct GetPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecution: CodePipelineClientTypes.PipelineExecution?
}

extension GetPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecution
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineExecution.self, forKey: .pipelineExecution)
        pipelineExecution = pipelineExecutionDecoded
    }
}

extension GetPipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

extension GetPipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetPipeline action.
public struct GetPipelineInput: Swift.Equatable {
    /// The name of the pipeline for which you want to get information. Pipeline names must be unique under an AWS user account.
    /// This member is required.
    public var name: Swift.String?
    /// The version number of the pipeline. If you do not specify a version, defaults to the current version.
    public var version: Swift.Int?

    public init (
        name: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.name = name
        self.version = version
    }
}

struct GetPipelineInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.Int?
}

extension GetPipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension GetPipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineVersionNotFoundException" : self = .pipelineVersionNotFoundException(try PipelineVersionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPipelineOutputError: Swift.Error, Swift.Equatable {
    case pipelineNotFoundException(PipelineNotFoundException)
    case pipelineVersionNotFoundException(PipelineVersionNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metadata = output.metadata
            self.pipeline = output.pipeline
        } else {
            self.metadata = nil
            self.pipeline = nil
        }
    }
}

/// Represents the output of a GetPipeline action.
public struct GetPipelineOutputResponse: Swift.Equatable {
    /// Represents the pipeline metadata information returned as part of the output of a GetPipeline action.
    public var metadata: CodePipelineClientTypes.PipelineMetadata?
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init (
        metadata: CodePipelineClientTypes.PipelineMetadata? = nil,
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.metadata = metadata
        self.pipeline = pipeline
    }
}

struct GetPipelineOutputResponseBody: Swift.Equatable {
    let pipeline: CodePipelineClientTypes.PipelineDeclaration?
    let metadata: CodePipelineClientTypes.PipelineMetadata?
}

extension GetPipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata
        case pipeline
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineDeclaration.self, forKey: .pipeline)
        pipeline = pipelineDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
    }
}

extension GetPipelineStateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetPipelineStateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetPipelineState action.
public struct GetPipelineStateInput: Swift.Equatable {
    /// The name of the pipeline about which you want to get information.
    /// This member is required.
    public var name: Swift.String?

    public init (
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetPipelineStateInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetPipelineStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetPipelineStateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPipelineStateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetPipelineStateOutputError: Swift.Error, Swift.Equatable {
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPipelineStateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetPipelineStateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.created = output.created
            self.pipelineName = output.pipelineName
            self.pipelineVersion = output.pipelineVersion
            self.stageStates = output.stageStates
            self.updated = output.updated
        } else {
            self.created = nil
            self.pipelineName = nil
            self.pipelineVersion = nil
            self.stageStates = nil
            self.updated = nil
        }
    }
}

/// Represents the output of a GetPipelineState action.
public struct GetPipelineStateOutputResponse: Swift.Equatable {
    /// The date and time the pipeline was created, in timestamp format.
    public var created: ClientRuntime.Date?
    /// The name of the pipeline for which you want to get the state.
    public var pipelineName: Swift.String?
    /// The version number of the pipeline. A newly created pipeline is always assigned a version number of 1.
    public var pipelineVersion: Swift.Int?
    /// A list of the pipeline stage output information, including stage name, state, most recent run details, whether the stage is disabled, and other data.
    public var stageStates: [CodePipelineClientTypes.StageState]?
    /// The date and time the pipeline was last updated, in timestamp format.
    public var updated: ClientRuntime.Date?

    public init (
        created: ClientRuntime.Date? = nil,
        pipelineName: Swift.String? = nil,
        pipelineVersion: Swift.Int? = nil,
        stageStates: [CodePipelineClientTypes.StageState]? = nil,
        updated: ClientRuntime.Date? = nil
    )
    {
        self.created = created
        self.pipelineName = pipelineName
        self.pipelineVersion = pipelineVersion
        self.stageStates = stageStates
        self.updated = updated
    }
}

struct GetPipelineStateOutputResponseBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineVersion: Swift.Int?
    let stageStates: [CodePipelineClientTypes.StageState]?
    let created: ClientRuntime.Date?
    let updated: ClientRuntime.Date?
}

extension GetPipelineStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case pipelineName
        case pipelineVersion
        case stageStates
        case updated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelineVersion)
        pipelineVersion = pipelineVersionDecoded
        let stageStatesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.StageState?].self, forKey: .stageStates)
        var stageStatesDecoded0:[CodePipelineClientTypes.StageState]? = nil
        if let stageStatesContainer = stageStatesContainer {
            stageStatesDecoded0 = [CodePipelineClientTypes.StageState]()
            for structure0 in stageStatesContainer {
                if let structure0 = structure0 {
                    stageStatesDecoded0?.append(structure0)
                }
            }
        }
        stageStates = stageStatesDecoded0
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
        let updatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updated)
        updated = updatedDecoded
    }
}

extension GetThirdPartyJobDetailsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension GetThirdPartyJobDetailsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetThirdPartyJobDetails action.
public struct GetThirdPartyJobDetailsInput: Swift.Equatable {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The unique system-generated ID used for identifying the job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.jobId = jobId
    }
}

struct GetThirdPartyJobDetailsInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let clientToken: Swift.String?
}

extension GetThirdPartyJobDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension GetThirdPartyJobDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetThirdPartyJobDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidClientTokenException" : self = .invalidClientTokenException(try InvalidClientTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobException" : self = .invalidJobException(try InvalidJobException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetThirdPartyJobDetailsOutputError: Swift.Error, Swift.Equatable {
    case invalidClientTokenException(InvalidClientTokenException)
    case invalidJobException(InvalidJobException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetThirdPartyJobDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetThirdPartyJobDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobDetails = output.jobDetails
        } else {
            self.jobDetails = nil
        }
    }
}

/// Represents the output of a GetThirdPartyJobDetails action.
public struct GetThirdPartyJobDetailsOutputResponse: Swift.Equatable {
    /// The details of the job, including any protected values defined for the job.
    public var jobDetails: CodePipelineClientTypes.ThirdPartyJobDetails?

    public init (
        jobDetails: CodePipelineClientTypes.ThirdPartyJobDetails? = nil
    )
    {
        self.jobDetails = jobDetails
    }
}

struct GetThirdPartyJobDetailsOutputResponseBody: Swift.Equatable {
    let jobDetails: CodePipelineClientTypes.ThirdPartyJobDetails?
}

extension GetThirdPartyJobDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ThirdPartyJobDetails.self, forKey: .jobDetails)
        jobDetails = jobDetailsDecoded
    }
}

extension CodePipelineClientTypes.InputArtifact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an artifact to be worked on, such as a test or build artifact.
    public struct InputArtifact: Swift.Equatable {
        /// The name of the artifact to be worked on (for example, "My App"). The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension InvalidActionDeclarationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidActionDeclarationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The action declaration was specified in an invalid format.
public struct InvalidActionDeclarationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidActionDeclarationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidActionDeclarationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidApprovalTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidApprovalTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The approval request already received a response or has expired.
public struct InvalidApprovalTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidApprovalTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidApprovalTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource ARN is invalid.
public struct InvalidArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidBlockerDeclarationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidBlockerDeclarationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Reserved for future use.
public struct InvalidBlockerDeclarationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidBlockerDeclarationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidBlockerDeclarationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidClientTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidClientTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The client token was specified in an invalid format
public struct InvalidClientTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidClientTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidClientTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidJobException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidJobExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The job was specified in an invalid format or cannot be found.
public struct InvalidJobException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidJobExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidJobExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidJobStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidJobStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The job state was specified in an invalid format.
public struct InvalidJobStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidJobStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidJobStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The next token was specified in an invalid format. Make sure that the next token you provide is the token returned by a previous call.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNonceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNonceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The nonce was specified in an invalid format.
public struct InvalidNonceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNonceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNonceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStageDeclarationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidStageDeclarationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The stage declaration was specified in an invalid format.
public struct InvalidStageDeclarationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStageDeclarationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidStageDeclarationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStructureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidStructureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The structure was specified in an invalid format.
public struct InvalidStructureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStructureExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidStructureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource tags are invalid.
public struct InvalidTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidWebhookAuthenticationParametersException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidWebhookAuthenticationParametersExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified authentication type is in an invalid format.
public struct InvalidWebhookAuthenticationParametersException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidWebhookAuthenticationParametersExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidWebhookAuthenticationParametersExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidWebhookFilterPatternException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidWebhookFilterPatternExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified event filter rule is in an invalid format.
public struct InvalidWebhookFilterPatternException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidWebhookFilterPatternExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidWebhookFilterPatternExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.Job: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case data
        case id
        case nonce
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let nonce = self.nonce {
            try encodeContainer.encode(nonce, forKey: .nonce)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let dataDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobData.self, forKey: .data)
        data = dataDecoded
        let nonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nonce)
        nonce = nonceDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a job.
    public struct Job: Swift.Equatable {
        /// The ID of the AWS account to use when performing the job.
        public var accountId: Swift.String?
        /// Other data about a job.
        public var data: CodePipelineClientTypes.JobData?
        /// The unique system-generated ID of the job.
        public var id: Swift.String?
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an [AcknowledgeJob] request.
        public var nonce: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            data: CodePipelineClientTypes.JobData? = nil,
            id: Swift.String? = nil,
            nonce: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.data = data
            self.id = id
            self.nonce = nonce
        }
    }

}

extension CodePipelineClientTypes.JobData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionConfiguration
        case actionTypeId
        case artifactCredentials
        case continuationToken
        case encryptionKey
        case inputArtifacts
        case outputArtifacts
        case pipelineContext
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionConfiguration = self.actionConfiguration {
            try encodeContainer.encode(actionConfiguration, forKey: .actionConfiguration)
        }
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let artifactCredentials = self.artifactCredentials {
            try encodeContainer.encode(artifactCredentials, forKey: .artifactCredentials)
        }
        if let continuationToken = self.continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for artifact0 in inputArtifacts {
                try inputArtifactsContainer.encode(artifact0)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for artifact0 in outputArtifacts {
                try outputArtifactsContainer.encode(artifact0)
            }
        }
        if let pipelineContext = self.pipelineContext {
            try encodeContainer.encode(pipelineContext, forKey: .pipelineContext)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let actionConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionConfiguration.self, forKey: .actionConfiguration)
        actionConfiguration = actionConfigurationDecoded
        let pipelineContextDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineContext.self, forKey: .pipelineContext)
        pipelineContext = pipelineContextDecoded
        let inputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in inputArtifactsContainer {
                if let structure0 = structure0 {
                    inputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in outputArtifactsContainer {
                if let structure0 = structure0 {
                    outputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let artifactCredentialsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.AWSSessionCredentials.self, forKey: .artifactCredentials)
        artifactCredentials = artifactCredentialsDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}

extension CodePipelineClientTypes.JobData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobData(actionConfiguration: \(Swift.String(describing: actionConfiguration)), actionTypeId: \(Swift.String(describing: actionTypeId)), continuationToken: \(Swift.String(describing: continuationToken)), encryptionKey: \(Swift.String(describing: encryptionKey)), inputArtifacts: \(Swift.String(describing: inputArtifacts)), outputArtifacts: \(Swift.String(describing: outputArtifacts)), pipelineContext: \(Swift.String(describing: pipelineContext)), artifactCredentials: \"CONTENT_REDACTED\")"}
}

extension CodePipelineClientTypes {
    /// Represents other information about a job required for a job worker to complete the job.
    public struct JobData: Swift.Equatable {
        /// Represents information about an action configuration.
        public var actionConfiguration: CodePipelineClientTypes.ActionConfiguration?
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifacts for the pipeline in AWS CodePipeline.
        public var artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials?
        /// A system-generated token, such as a AWS CodeDeploy deployment ID, required by a job to continue the job asynchronously.
        public var continuationToken: Swift.String?
        /// Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The artifact supplied to the job.
        public var inputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// The output of the job.
        public var outputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// Represents information about a pipeline to a job worker. Includes pipelineArn and pipelineExecutionId for custom jobs.
        public var pipelineContext: CodePipelineClientTypes.PipelineContext?

        public init (
            actionConfiguration: CodePipelineClientTypes.ActionConfiguration? = nil,
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials? = nil,
            continuationToken: Swift.String? = nil,
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            inputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            outputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            pipelineContext: CodePipelineClientTypes.PipelineContext? = nil
        )
        {
            self.actionConfiguration = actionConfiguration
            self.actionTypeId = actionTypeId
            self.artifactCredentials = artifactCredentials
            self.continuationToken = continuationToken
            self.encryptionKey = encryptionKey
            self.inputArtifacts = inputArtifacts
            self.outputArtifacts = outputArtifacts
            self.pipelineContext = pipelineContext
        }
    }

}

extension CodePipelineClientTypes.JobDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case data
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let dataDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.JobData.self, forKey: .data)
        data = dataDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the details of a job.
    public struct JobDetails: Swift.Equatable {
        /// The AWS account ID associated with the job.
        public var accountId: Swift.String?
        /// Represents other information about a job required for a job worker to complete the job.
        public var data: CodePipelineClientTypes.JobData?
        /// The unique system-generated ID of the job.
        public var id: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            data: CodePipelineClientTypes.JobData? = nil,
            id: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.data = data
            self.id = id
        }
    }

}

extension JobNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: JobNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The job was specified in an invalid format or cannot be found.
public struct JobNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct JobNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension JobNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case dispatched
        case failed
        case inprogress
        case queued
        case succeeded
        case timedout
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .created,
                .dispatched,
                .failed,
                .inprogress,
                .queued,
                .succeeded,
                .timedout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .dispatched: return "Dispatched"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .queued: return "Queued"
            case .succeeded: return "Succeeded"
            case .timedout: return "TimedOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.JobWorkerExecutorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pollingAccounts
        case pollingServicePrincipals
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pollingAccounts = pollingAccounts {
            var pollingAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pollingAccounts)
            for accountid0 in pollingAccounts {
                try pollingAccountsContainer.encode(accountid0)
            }
        }
        if let pollingServicePrincipals = pollingServicePrincipals {
            var pollingServicePrincipalsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pollingServicePrincipals)
            for serviceprincipal0 in pollingServicePrincipals {
                try pollingServicePrincipalsContainer.encode(serviceprincipal0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pollingAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pollingAccounts)
        var pollingAccountsDecoded0:[Swift.String]? = nil
        if let pollingAccountsContainer = pollingAccountsContainer {
            pollingAccountsDecoded0 = [Swift.String]()
            for string0 in pollingAccountsContainer {
                if let string0 = string0 {
                    pollingAccountsDecoded0?.append(string0)
                }
            }
        }
        pollingAccounts = pollingAccountsDecoded0
        let pollingServicePrincipalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pollingServicePrincipals)
        var pollingServicePrincipalsDecoded0:[Swift.String]? = nil
        if let pollingServicePrincipalsContainer = pollingServicePrincipalsContainer {
            pollingServicePrincipalsDecoded0 = [Swift.String]()
            for string0 in pollingServicePrincipalsContainer {
                if let string0 = string0 {
                    pollingServicePrincipalsDecoded0?.append(string0)
                }
            }
        }
        pollingServicePrincipals = pollingServicePrincipalsDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Details about the polling configuration for the JobWorker action engine, or executor.
    public struct JobWorkerExecutorConfiguration: Swift.Equatable {
        /// The accounts in which the job worker is configured and might poll for jobs as part of the action execution.
        public var pollingAccounts: [Swift.String]?
        /// The service Principals in which the job worker is configured and might poll for jobs as part of the action execution.
        public var pollingServicePrincipals: [Swift.String]?

        public init (
            pollingAccounts: [Swift.String]? = nil,
            pollingServicePrincipals: [Swift.String]? = nil
        )
        {
            self.pollingAccounts = pollingAccounts
            self.pollingServicePrincipals = pollingServicePrincipals
        }
    }

}

extension CodePipelineClientTypes.LambdaExecutorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lambdaFunctionArn = self.lambdaFunctionArn {
            try encodeContainer.encode(lambdaFunctionArn, forKey: .lambdaFunctionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionArn)
        lambdaFunctionArn = lambdaFunctionArnDecoded
    }
}

extension CodePipelineClientTypes {
    /// Details about the configuration for the Lambda action engine, or executor.
    public struct LambdaExecutorConfiguration: Swift.Equatable {
        /// The ARN of the Lambda function used by the action engine.
        /// This member is required.
        public var lambdaFunctionArn: Swift.String?

        public init (
            lambdaFunctionArn: Swift.String? = nil
        )
        {
            self.lambdaFunctionArn = lambdaFunctionArn
        }
    }

}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of pipelines associated with the AWS account has exceeded the limit allowed for the account.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListActionExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case pipelineName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
    }
}

extension ListActionExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListActionExecutionsInput: Swift.Equatable {
    /// Input information used to filter action execution history.
    public var filter: CodePipelineClientTypes.ActionExecutionFilter?
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Action execution history is retained for up to 12 months, based on action execution start times. Default value is 100. Detailed execution history is available for executions run on or after February 21, 2019.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListActionExecutions call, which can be used to return the next set of action executions in the list.
    public var nextToken: Swift.String?
    /// The name of the pipeline for which you want to list action execution history.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        filter: CodePipelineClientTypes.ActionExecutionFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
    }
}

struct ListActionExecutionsInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let filter: CodePipelineClientTypes.ActionExecutionFilter?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListActionExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case maxResults
        case nextToken
        case pipelineName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionFilter.self, forKey: .filter)
        filter = filterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListActionExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActionExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineExecutionNotFoundException" : self = .pipelineExecutionNotFoundException(try PipelineExecutionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListActionExecutionsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case pipelineExecutionNotFoundException(PipelineExecutionNotFoundException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActionExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListActionExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionExecutionDetails = output.actionExecutionDetails
            self.nextToken = output.nextToken
        } else {
            self.actionExecutionDetails = nil
            self.nextToken = nil
        }
    }
}

public struct ListActionExecutionsOutputResponse: Swift.Equatable {
    /// The details for a list of recent executions, such as action execution ID.
    public var actionExecutionDetails: [CodePipelineClientTypes.ActionExecutionDetail]?
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent ListActionExecutions call to return the next set of action executions in the list.
    public var nextToken: Swift.String?

    public init (
        actionExecutionDetails: [CodePipelineClientTypes.ActionExecutionDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionExecutionDetails = actionExecutionDetails
        self.nextToken = nextToken
    }
}

struct ListActionExecutionsOutputResponseBody: Swift.Equatable {
    let actionExecutionDetails: [CodePipelineClientTypes.ActionExecutionDetail]?
    let nextToken: Swift.String?
}

extension ListActionExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionDetails
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionExecutionDetailsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionExecutionDetail?].self, forKey: .actionExecutionDetails)
        var actionExecutionDetailsDecoded0:[CodePipelineClientTypes.ActionExecutionDetail]? = nil
        if let actionExecutionDetailsContainer = actionExecutionDetailsContainer {
            actionExecutionDetailsDecoded0 = [CodePipelineClientTypes.ActionExecutionDetail]()
            for structure0 in actionExecutionDetailsContainer {
                if let structure0 = structure0 {
                    actionExecutionDetailsDecoded0?.append(structure0)
                }
            }
        }
        actionExecutionDetails = actionExecutionDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListActionTypesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOwnerFilter
        case nextToken
        case regionFilter
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOwnerFilter = self.actionOwnerFilter {
            try encodeContainer.encode(actionOwnerFilter.rawValue, forKey: .actionOwnerFilter)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let regionFilter = self.regionFilter {
            try encodeContainer.encode(regionFilter, forKey: .regionFilter)
        }
    }
}

extension ListActionTypesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListActionTypes action.
public struct ListActionTypesInput: Swift.Equatable {
    /// Filters the list of action types to those created by a specified entity.
    public var actionOwnerFilter: CodePipelineClientTypes.ActionOwner?
    /// An identifier that was returned from the previous list action types call, which can be used to return the next set of action types in the list.
    public var nextToken: Swift.String?
    /// The Region to filter on for the list of action types.
    public var regionFilter: Swift.String?

    public init (
        actionOwnerFilter: CodePipelineClientTypes.ActionOwner? = nil,
        nextToken: Swift.String? = nil,
        regionFilter: Swift.String? = nil
    )
    {
        self.actionOwnerFilter = actionOwnerFilter
        self.nextToken = nextToken
        self.regionFilter = regionFilter
    }
}

struct ListActionTypesInputBody: Swift.Equatable {
    let actionOwnerFilter: CodePipelineClientTypes.ActionOwner?
    let nextToken: Swift.String?
    let regionFilter: Swift.String?
}

extension ListActionTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOwnerFilter
        case nextToken
        case regionFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionOwnerFilterDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionOwner.self, forKey: .actionOwnerFilter)
        actionOwnerFilter = actionOwnerFilterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let regionFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionFilter)
        regionFilter = regionFilterDecoded
    }
}

extension ListActionTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListActionTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListActionTypesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListActionTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListActionTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionTypes = output.actionTypes
            self.nextToken = output.nextToken
        } else {
            self.actionTypes = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListActionTypes action.
public struct ListActionTypesOutputResponse: Swift.Equatable {
    /// Provides details of the action types.
    /// This member is required.
    public var actionTypes: [CodePipelineClientTypes.ActionType]?
    /// If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list action types call to return the next set of action types in the list.
    public var nextToken: Swift.String?

    public init (
        actionTypes: [CodePipelineClientTypes.ActionType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionTypes = actionTypes
        self.nextToken = nextToken
    }
}

struct ListActionTypesOutputResponseBody: Swift.Equatable {
    let actionTypes: [CodePipelineClientTypes.ActionType]?
    let nextToken: Swift.String?
}

extension ListActionTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypes
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionType?].self, forKey: .actionTypes)
        var actionTypesDecoded0:[CodePipelineClientTypes.ActionType]? = nil
        if let actionTypesContainer = actionTypesContainer {
            actionTypesDecoded0 = [CodePipelineClientTypes.ActionType]()
            for structure0 in actionTypesContainer {
                if let structure0 = structure0 {
                    actionTypesDecoded0?.append(structure0)
                }
            }
        }
        actionTypes = actionTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelineExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case pipelineName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
    }
}

extension ListPipelineExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListPipelineExecutions action.
public struct ListPipelineExecutionsInput: Swift.Equatable {
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value. Pipeline history is limited to the most recent 12 months, based on pipeline execution start times. Default value is 100.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListPipelineExecutions call, which can be used to return the next set of pipeline executions in the list.
    public var nextToken: Swift.String?
    /// The name of the pipeline for which you want to get execution summary information.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
    }
}

struct ListPipelineExecutionsInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListPipelineExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case pipelineName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelineExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelineExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPipelineExecutionsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelineExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPipelineExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelineExecutionSummaries = output.pipelineExecutionSummaries
        } else {
            self.nextToken = nil
            self.pipelineExecutionSummaries = nil
        }
    }
}

/// Represents the output of a ListPipelineExecutions action.
public struct ListPipelineExecutionsOutputResponse: Swift.Equatable {
    /// A token that can be used in the next ListPipelineExecutions call. To view all items in the list, continue to call this operation with each subsequent token until no more nextToken values are returned.
    public var nextToken: Swift.String?
    /// A list of executions in the history of a pipeline.
    public var pipelineExecutionSummaries: [CodePipelineClientTypes.PipelineExecutionSummary]?

    public init (
        nextToken: Swift.String? = nil,
        pipelineExecutionSummaries: [CodePipelineClientTypes.PipelineExecutionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSummaries = pipelineExecutionSummaries
    }
}

struct ListPipelineExecutionsOutputResponseBody: Swift.Equatable {
    let pipelineExecutionSummaries: [CodePipelineClientTypes.PipelineExecutionSummary]?
    let nextToken: Swift.String?
}

extension ListPipelineExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case pipelineExecutionSummaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionSummariesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.PipelineExecutionSummary?].self, forKey: .pipelineExecutionSummaries)
        var pipelineExecutionSummariesDecoded0:[CodePipelineClientTypes.PipelineExecutionSummary]? = nil
        if let pipelineExecutionSummariesContainer = pipelineExecutionSummariesContainer {
            pipelineExecutionSummariesDecoded0 = [CodePipelineClientTypes.PipelineExecutionSummary]()
            for structure0 in pipelineExecutionSummariesContainer {
                if let structure0 = structure0 {
                    pipelineExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        pipelineExecutionSummaries = pipelineExecutionSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListPipelinesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListPipelinesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListPipelines action.
public struct ListPipelinesInput: Swift.Equatable {
    /// The maximum number of pipelines to return in a single call. To retrieve the remaining pipelines, make another call with the returned nextToken value. The minimum value you can specify is 1. The maximum accepted value is 1000.
    public var maxResults: Swift.Int?
    /// An identifier that was returned from the previous list pipelines call. It can be used to return the next set of pipelines in the list.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListPipelinesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListPipelinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListPipelinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListPipelinesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListPipelinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pipelines = output.pipelines
        } else {
            self.nextToken = nil
            self.pipelines = nil
        }
    }
}

/// Represents the output of a ListPipelines action.
public struct ListPipelinesOutputResponse: Swift.Equatable {
    /// If the amount of returned information is significantly large, an identifier is also returned. It can be used in a subsequent list pipelines call to return the next set of pipelines in the list.
    public var nextToken: Swift.String?
    /// The list of pipelines.
    public var pipelines: [CodePipelineClientTypes.PipelineSummary]?

    public init (
        nextToken: Swift.String? = nil,
        pipelines: [CodePipelineClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelines = pipelines
    }
}

struct ListPipelinesOutputResponseBody: Swift.Equatable {
    let pipelines: [CodePipelineClientTypes.PipelineSummary]?
    let nextToken: Swift.String?
}

extension ListPipelinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case pipelines
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelinesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.PipelineSummary?].self, forKey: .pipelines)
        var pipelinesDecoded0:[CodePipelineClientTypes.PipelineSummary]? = nil
        if let pipelinesContainer = pipelinesContainer {
            pipelinesDecoded0 = [CodePipelineClientTypes.PipelineSummary]()
            for structure0 in pipelinesContainer {
                if let structure0 = structure0 {
                    pipelinesDecoded0?.append(structure0)
                }
            }
        }
        pipelines = pipelinesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The maximum number of results to return in a single call.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous API call, which would be used to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource to get tags for.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidNextTokenException(InvalidNextTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent API call to return the next page of the list. The ListTagsforResource call lists all available tags in one call and does not use pagination.
    public var nextToken: Swift.String?
    /// The tags for the resource.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [CodePipelineClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CodePipelineClientTypes.ListWebhookItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case definition
        case errorCode
        case errorMessage
        case lastTriggered
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastTriggered = self.lastTriggered {
            try encodeContainer.encodeTimestamp(lastTriggered, format: .epochSeconds, forKey: .lastTriggered)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookDefinition.self, forKey: .definition)
        definition = definitionDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let lastTriggeredDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastTriggered)
        lastTriggered = lastTriggeredDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodePipelineClientTypes {
    /// The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.
    public struct ListWebhookItem: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the webhook.
        public var arn: Swift.String?
        /// The detail returned for each webhook, such as the webhook authentication type and filter rules.
        /// This member is required.
        public var definition: CodePipelineClientTypes.WebhookDefinition?
        /// The number code of the error.
        public var errorCode: Swift.String?
        /// The text of the error message about the webhook.
        public var errorMessage: Swift.String?
        /// The date and time a webhook was last successfully triggered, in timestamp format.
        public var lastTriggered: ClientRuntime.Date?
        /// Specifies the tags applied to the webhook.
        public var tags: [CodePipelineClientTypes.Tag]?
        /// A unique URL generated by CodePipeline. When a POST request is made to this URL, the defined pipeline is started as long as the body of the post request satisfies the defined authentication and filtering conditions. Deleting and re-creating a webhook makes the old URL invalid and generates a new one.
        /// This member is required.
        public var url: Swift.String?

        public init (
            arn: Swift.String? = nil,
            definition: CodePipelineClientTypes.WebhookDefinition? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastTriggered: ClientRuntime.Date? = nil,
            tags: [CodePipelineClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.definition = definition
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastTriggered = lastTriggered
            self.tags = tags
            self.url = url
        }
    }

}

extension ListWebhooksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListWebhooksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListWebhooksInput: Swift.Equatable {
    /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The token that was returned from the previous ListWebhooks call, which can be used to return the next set of webhooks in the list.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListWebhooksInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListWebhooksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListWebhooksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListWebhooksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListWebhooksOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListWebhooksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListWebhooksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.webhooks = output.webhooks
        } else {
            self.nextToken = nil
            self.webhooks = nil
        }
    }
}

public struct ListWebhooksOutputResponse: Swift.Equatable {
    /// If the amount of returned information is significantly large, an identifier is also returned and can be used in a subsequent ListWebhooks call to return the next set of webhooks in the list.
    public var nextToken: Swift.String?
    /// The JSON detail returned for each webhook in the list output for the ListWebhooks call.
    public var webhooks: [CodePipelineClientTypes.ListWebhookItem]?

    public init (
        nextToken: Swift.String? = nil,
        webhooks: [CodePipelineClientTypes.ListWebhookItem]? = nil
    )
    {
        self.nextToken = nextToken
        self.webhooks = webhooks
    }
}

struct ListWebhooksOutputResponseBody: Swift.Equatable {
    let webhooks: [CodePipelineClientTypes.ListWebhookItem]?
    let nextToken: Swift.String?
}

extension ListWebhooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case webhooks
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhooksContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ListWebhookItem?].self, forKey: .webhooks)
        var webhooksDecoded0:[CodePipelineClientTypes.ListWebhookItem]? = nil
        if let webhooksContainer = webhooksContainer {
            webhooksDecoded0 = [CodePipelineClientTypes.ListWebhookItem]()
            for structure0 in webhooksContainer {
                if let structure0 = structure0 {
                    webhooksDecoded0?.append(structure0)
                }
            }
        }
        webhooks = webhooksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension NotLatestPipelineExecutionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: NotLatestPipelineExecutionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The stage has failed in a later run of the pipeline and the pipelineExecutionId associated with the request is out of date.
public struct NotLatestPipelineExecutionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotLatestPipelineExecutionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension NotLatestPipelineExecutionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.OutputArtifact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the output of an action.
    public struct OutputArtifact: Swift.Equatable {
        /// The name of the output of an artifact, such as "My App". The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions. Output artifact names must be unique within a pipeline.
        /// This member is required.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension OutputVariablesSizeExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OutputVariablesSizeExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Exceeded the total size limit for all variables in the pipeline.
public struct OutputVariablesSizeExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OutputVariablesSizeExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OutputVariablesSizeExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.PipelineContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case pipelineArn
        case pipelineExecutionId
        case pipelineName
        case stage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let pipelineArn = self.pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let stage = self.stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageContext.self, forKey: .stage)
        stage = stageDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionContext.self, forKey: .action)
        action = actionDecoded
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a pipeline to a job worker. PipelineContext contains pipelineArn and pipelineExecutionId for custom action jobs. The pipelineArn and pipelineExecutionId fields are not populated for ThirdParty action jobs.
    public struct PipelineContext: Swift.Equatable {
        /// The context of an action to a job worker in the stage of a pipeline.
        public var action: CodePipelineClientTypes.ActionContext?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The execution ID of the pipeline.
        public var pipelineExecutionId: Swift.String?
        /// The name of the pipeline. This is a user-specified value. Pipeline names must be unique across all pipeline names under an Amazon Web Services account.
        public var pipelineName: Swift.String?
        /// The stage of the pipeline.
        public var stage: CodePipelineClientTypes.StageContext?

        public init (
            action: CodePipelineClientTypes.ActionContext? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            stage: CodePipelineClientTypes.StageContext? = nil
        )
        {
            self.action = action
            self.pipelineArn = pipelineArn
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineName = pipelineName
            self.stage = stage
        }
    }

}

extension CodePipelineClientTypes.PipelineDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactStore
        case artifactStores
        case name
        case roleArn
        case stages
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactStore = self.artifactStore {
            try encodeContainer.encode(artifactStore, forKey: .artifactStore)
        }
        if let artifactStores = artifactStores {
            var artifactStoresContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .artifactStores)
            for (dictKey0, artifactStoreMap0) in artifactStores {
                try artifactStoresContainer.encode(artifactStoreMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stages = stages {
            var stagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stages)
            for stagedeclaration0 in stages {
                try stagesContainer.encode(stagedeclaration0)
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let artifactStoreDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ArtifactStore.self, forKey: .artifactStore)
        artifactStore = artifactStoreDecoded
        let artifactStoresContainer = try containerValues.decodeIfPresent([Swift.String: CodePipelineClientTypes.ArtifactStore?].self, forKey: .artifactStores)
        var artifactStoresDecoded0: [Swift.String:CodePipelineClientTypes.ArtifactStore]? = nil
        if let artifactStoresContainer = artifactStoresContainer {
            artifactStoresDecoded0 = [Swift.String:CodePipelineClientTypes.ArtifactStore]()
            for (key0, artifactstore0) in artifactStoresContainer {
                if let artifactstore0 = artifactstore0 {
                    artifactStoresDecoded0?[key0] = artifactstore0
                }
            }
        }
        artifactStores = artifactStoresDecoded0
        let stagesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.StageDeclaration?].self, forKey: .stages)
        var stagesDecoded0:[CodePipelineClientTypes.StageDeclaration]? = nil
        if let stagesContainer = stagesContainer {
            stagesDecoded0 = [CodePipelineClientTypes.StageDeclaration]()
            for structure0 in stagesContainer {
                if let structure0 = structure0 {
                    stagesDecoded0?.append(structure0)
                }
            }
        }
        stages = stagesDecoded0
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents the structure of actions and stages to be performed in the pipeline.
    public struct PipelineDeclaration: Swift.Equatable {
        /// Represents information about the S3 bucket where artifacts are stored for the pipeline. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
        public var artifactStore: CodePipelineClientTypes.ArtifactStore?
        /// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline. You must include either artifactStore or artifactStores in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use artifactStores.
        public var artifactStores: [Swift.String:CodePipelineClientTypes.ArtifactStore]?
        /// The name of the pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// The Amazon Resource Name (ARN) for AWS CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The stage in which to perform the action.
        /// This member is required.
        public var stages: [CodePipelineClientTypes.StageDeclaration]?
        /// The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated.
        public var version: Swift.Int?

        public init (
            artifactStore: CodePipelineClientTypes.ArtifactStore? = nil,
            artifactStores: [Swift.String:CodePipelineClientTypes.ArtifactStore]? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            stages: [CodePipelineClientTypes.StageDeclaration]? = nil,
            version: Swift.Int? = nil
        )
        {
            self.artifactStore = artifactStore
            self.artifactStores = artifactStores
            self.name = name
            self.roleArn = roleArn
            self.stages = stages
            self.version = version
        }
    }

}

extension CodePipelineClientTypes.PipelineExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactRevisions
        case pipelineExecutionId
        case pipelineName
        case pipelineVersion
        case status
        case statusSummary
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactRevisions = artifactRevisions {
            var artifactRevisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .artifactRevisions)
            for artifactrevision0 in artifactRevisions {
                try artifactRevisionsContainer.encode(artifactrevision0)
            }
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let pipelineVersion = self.pipelineVersion {
            try encodeContainer.encode(pipelineVersion, forKey: .pipelineVersion)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusSummary = self.statusSummary {
            try encodeContainer.encode(statusSummary, forKey: .statusSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelineVersion)
        pipelineVersion = pipelineVersionDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusSummary)
        statusSummary = statusSummaryDecoded
        let artifactRevisionsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ArtifactRevision?].self, forKey: .artifactRevisions)
        var artifactRevisionsDecoded0:[CodePipelineClientTypes.ArtifactRevision]? = nil
        if let artifactRevisionsContainer = artifactRevisionsContainer {
            artifactRevisionsDecoded0 = [CodePipelineClientTypes.ArtifactRevision]()
            for structure0 in artifactRevisionsContainer {
                if let structure0 = structure0 {
                    artifactRevisionsDecoded0?.append(structure0)
                }
            }
        }
        artifactRevisions = artifactRevisionsDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Represents information about an execution of a pipeline.
    public struct PipelineExecution: Swift.Equatable {
        /// A list of ArtifactRevision objects included in a pipeline execution.
        public var artifactRevisions: [CodePipelineClientTypes.ArtifactRevision]?
        /// The ID of the pipeline execution.
        public var pipelineExecutionId: Swift.String?
        /// The name of the pipeline with the specified pipeline execution.
        public var pipelineName: Swift.String?
        /// The version number of the pipeline with the specified pipeline execution.
        public var pipelineVersion: Swift.Int?
        /// The status of the pipeline execution.
        ///
        /// * Cancelled: The pipeline’s definition was updated before the pipeline execution could be completed.
        ///
        /// * InProgress: The pipeline execution is currently running.
        ///
        /// * Stopped: The pipeline execution was manually stopped. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Succeeded: The pipeline execution was completed successfully.
        ///
        /// * Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see [Superseded Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded).
        ///
        /// * Failed: The pipeline execution was not completed successfully.
        public var status: CodePipelineClientTypes.PipelineExecutionStatus?
        /// A summary that contains a description of the pipeline execution status.
        public var statusSummary: Swift.String?

        public init (
            artifactRevisions: [CodePipelineClientTypes.ArtifactRevision]? = nil,
            pipelineExecutionId: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            pipelineVersion: Swift.Int? = nil,
            status: CodePipelineClientTypes.PipelineExecutionStatus? = nil,
            statusSummary: Swift.String? = nil
        )
        {
            self.artifactRevisions = artifactRevisions
            self.pipelineExecutionId = pipelineExecutionId
            self.pipelineName = pipelineName
            self.pipelineVersion = pipelineVersion
            self.status = status
            self.statusSummary = statusSummary
        }
    }

}

extension PipelineExecutionNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PipelineExecutionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The pipeline execution was specified in an invalid format or cannot be found, or an execution ID does not belong to the specified pipeline.
public struct PipelineExecutionNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineExecutionNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PipelineExecutionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PipelineExecutionNotStoppableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PipelineExecutionNotStoppableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to stop the pipeline execution. The execution might already be in a Stopped state, or it might no longer be in progress.
public struct PipelineExecutionNotStoppableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineExecutionNotStoppableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PipelineExecutionNotStoppableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes {
    public enum PipelineExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case stopped
        case stopping
        case succeeded
        case superseded
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineExecutionStatus] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .stopped,
                .stopping,
                .succeeded,
                .superseded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case .superseded: return "Superseded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PipelineExecutionStatus(rawValue: rawValue) ?? PipelineExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.PipelineExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdateTime
        case pipelineExecutionId
        case sourceRevisions
        case startTime
        case status
        case stopTrigger
        case trigger
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encodeTimestamp(lastUpdateTime, format: .epochSeconds, forKey: .lastUpdateTime)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let sourceRevisions = sourceRevisions {
            var sourceRevisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceRevisions)
            for sourcerevision0 in sourceRevisions {
                try sourceRevisionsContainer.encode(sourcerevision0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopTrigger = self.stopTrigger {
            try encodeContainer.encode(stopTrigger, forKey: .stopTrigger)
        }
        if let trigger = self.trigger {
            try encodeContainer.encode(trigger, forKey: .trigger)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let sourceRevisionsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.SourceRevision?].self, forKey: .sourceRevisions)
        var sourceRevisionsDecoded0:[CodePipelineClientTypes.SourceRevision]? = nil
        if let sourceRevisionsContainer = sourceRevisionsContainer {
            sourceRevisionsDecoded0 = [CodePipelineClientTypes.SourceRevision]()
            for structure0 in sourceRevisionsContainer {
                if let structure0 = structure0 {
                    sourceRevisionsDecoded0?.append(structure0)
                }
            }
        }
        sourceRevisions = sourceRevisionsDecoded0
        let triggerDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ExecutionTrigger.self, forKey: .trigger)
        trigger = triggerDecoded
        let stopTriggerDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StopExecutionTrigger.self, forKey: .stopTrigger)
        stopTrigger = stopTriggerDecoded
    }
}

extension CodePipelineClientTypes {
    /// Summary information about a pipeline execution.
    public struct PipelineExecutionSummary: Swift.Equatable {
        /// The date and time of the last change to the pipeline execution, in timestamp format.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The ID of the pipeline execution.
        public var pipelineExecutionId: Swift.String?
        /// A list of the source artifact revisions that initiated a pipeline execution.
        public var sourceRevisions: [CodePipelineClientTypes.SourceRevision]?
        /// The date and time when the pipeline execution began, in timestamp format.
        public var startTime: ClientRuntime.Date?
        /// The status of the pipeline execution.
        ///
        /// * InProgress: The pipeline execution is currently running.
        ///
        /// * Stopped: The pipeline execution was manually stopped. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Stopping: The pipeline execution received a request to be manually stopped. Depending on the selected stop mode, the execution is either completing or abandoning in-progress actions. For more information, see [Stopped Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-executions-stopped).
        ///
        /// * Succeeded: The pipeline execution was completed successfully.
        ///
        /// * Superseded: While this pipeline execution was waiting for the next stage to be completed, a newer pipeline execution advanced and continued through the pipeline instead. For more information, see [Superseded Executions](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-superseded).
        ///
        /// * Failed: The pipeline execution was not completed successfully.
        public var status: CodePipelineClientTypes.PipelineExecutionStatus?
        /// The interaction that stopped a pipeline execution.
        public var stopTrigger: CodePipelineClientTypes.StopExecutionTrigger?
        /// The interaction or event that started a pipeline execution, such as automated change detection or a StartPipelineExecution API call.
        public var trigger: CodePipelineClientTypes.ExecutionTrigger?

        public init (
            lastUpdateTime: ClientRuntime.Date? = nil,
            pipelineExecutionId: Swift.String? = nil,
            sourceRevisions: [CodePipelineClientTypes.SourceRevision]? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: CodePipelineClientTypes.PipelineExecutionStatus? = nil,
            stopTrigger: CodePipelineClientTypes.StopExecutionTrigger? = nil,
            trigger: CodePipelineClientTypes.ExecutionTrigger? = nil
        )
        {
            self.lastUpdateTime = lastUpdateTime
            self.pipelineExecutionId = pipelineExecutionId
            self.sourceRevisions = sourceRevisions
            self.startTime = startTime
            self.status = status
            self.stopTrigger = stopTrigger
            self.trigger = trigger
        }
    }

}

extension CodePipelineClientTypes.PipelineMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case pipelineArn
        case updated
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encodeTimestamp(created, format: .epochSeconds, forKey: .created)
        }
        if let pipelineArn = self.pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let updated = self.updated {
            try encodeContainer.encodeTimestamp(updated, format: .epochSeconds, forKey: .updated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
        let updatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updated)
        updated = updatedDecoded
    }
}

extension CodePipelineClientTypes {
    /// Information about a pipeline.
    public struct PipelineMetadata: Swift.Equatable {
        /// The date and time the pipeline was created, in timestamp format.
        public var created: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The date and time the pipeline was last updated, in timestamp format.
        public var updated: ClientRuntime.Date?

        public init (
            created: ClientRuntime.Date? = nil,
            pipelineArn: Swift.String? = nil,
            updated: ClientRuntime.Date? = nil
        )
        {
            self.created = created
            self.pipelineArn = pipelineArn
            self.updated = updated
        }
    }

}

extension PipelineNameInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PipelineNameInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified pipeline name is already in use.
public struct PipelineNameInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineNameInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PipelineNameInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PipelineNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PipelineNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The pipeline was specified in an invalid format or cannot be found.
public struct PipelineNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PipelineNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.PipelineSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case name
        case updated
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encodeTimestamp(created, format: .epochSeconds, forKey: .created)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let updated = self.updated {
            try encodeContainer.encodeTimestamp(updated, format: .epochSeconds, forKey: .updated)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let createdDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .created)
        created = createdDecoded
        let updatedDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updated)
        updated = updatedDecoded
    }
}

extension CodePipelineClientTypes {
    /// Returns a summary of a pipeline.
    public struct PipelineSummary: Swift.Equatable {
        /// The date and time the pipeline was created, in timestamp format.
        public var created: ClientRuntime.Date?
        /// The name of the pipeline.
        public var name: Swift.String?
        /// The date and time of the last update to the pipeline, in timestamp format.
        public var updated: ClientRuntime.Date?
        /// The version number of the pipeline.
        public var version: Swift.Int?

        public init (
            created: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            updated: ClientRuntime.Date? = nil,
            version: Swift.Int? = nil
        )
        {
            self.created = created
            self.name = name
            self.updated = updated
            self.version = version
        }
    }

}

extension PipelineVersionNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PipelineVersionNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The pipeline version was specified in an invalid format or cannot be found.
public struct PipelineVersionNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineVersionNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PipelineVersionNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PollForJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case maxBatchSize
        case queryParam
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let maxBatchSize = self.maxBatchSize {
            try encodeContainer.encode(maxBatchSize, forKey: .maxBatchSize)
        }
        if let queryParam = queryParam {
            var queryParamContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .queryParam)
            for (dictKey0, queryParamMap0) in queryParam {
                try queryParamContainer.encode(queryParamMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PollForJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PollForJobs action.
public struct PollForJobsInput: Swift.Equatable {
    /// Represents information about an action type.
    /// This member is required.
    public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
    /// The maximum number of jobs to return in a poll for jobs call.
    public var maxBatchSize: Swift.Int?
    /// A map of property names and values. For an action type with no queryable properties, this value must be null or an empty map. For an action type with a queryable property, you must supply that property as a key in the map. Only jobs whose action configuration matches the mapped value are returned.
    public var queryParam: [Swift.String:Swift.String]?

    public init (
        actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
        maxBatchSize: Swift.Int? = nil,
        queryParam: [Swift.String:Swift.String]? = nil
    )
    {
        self.actionTypeId = actionTypeId
        self.maxBatchSize = maxBatchSize
        self.queryParam = queryParam
    }
}

struct PollForJobsInputBody: Swift.Equatable {
    let actionTypeId: CodePipelineClientTypes.ActionTypeId?
    let maxBatchSize: Swift.Int?
    let queryParam: [Swift.String:Swift.String]?
}

extension PollForJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case maxBatchSize
        case queryParam
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let maxBatchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBatchSize)
        maxBatchSize = maxBatchSizeDecoded
        let queryParamContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .queryParam)
        var queryParamDecoded0: [Swift.String:Swift.String]? = nil
        if let queryParamContainer = queryParamContainer {
            queryParamDecoded0 = [Swift.String:Swift.String]()
            for (key0, actionconfigurationqueryablevalue0) in queryParamContainer {
                if let actionconfigurationqueryablevalue0 = actionconfigurationqueryablevalue0 {
                    queryParamDecoded0?[key0] = actionconfigurationqueryablevalue0
                }
            }
        }
        queryParam = queryParamDecoded0
    }
}

extension PollForJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionTypeNotFoundException" : self = .actionTypeNotFoundException(try ActionTypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PollForJobsOutputError: Swift.Error, Swift.Equatable {
    case actionTypeNotFoundException(ActionTypeNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PollForJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
        } else {
            self.jobs = nil
        }
    }
}

/// Represents the output of a PollForJobs action.
public struct PollForJobsOutputResponse: Swift.Equatable {
    /// Information about the jobs to take action on.
    public var jobs: [CodePipelineClientTypes.Job]?

    public init (
        jobs: [CodePipelineClientTypes.Job]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct PollForJobsOutputResponseBody: Swift.Equatable {
    let jobs: [CodePipelineClientTypes.Job]?
}

extension PollForJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Job?].self, forKey: .jobs)
        var jobsDecoded0:[CodePipelineClientTypes.Job]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [CodePipelineClientTypes.Job]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension PollForThirdPartyJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case maxBatchSize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let maxBatchSize = self.maxBatchSize {
            try encodeContainer.encode(maxBatchSize, forKey: .maxBatchSize)
        }
    }
}

extension PollForThirdPartyJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PollForThirdPartyJobs action.
public struct PollForThirdPartyJobsInput: Swift.Equatable {
    /// Represents information about an action type.
    /// This member is required.
    public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
    /// The maximum number of jobs to return in a poll for jobs call.
    public var maxBatchSize: Swift.Int?

    public init (
        actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
        maxBatchSize: Swift.Int? = nil
    )
    {
        self.actionTypeId = actionTypeId
        self.maxBatchSize = maxBatchSize
    }
}

struct PollForThirdPartyJobsInputBody: Swift.Equatable {
    let actionTypeId: CodePipelineClientTypes.ActionTypeId?
    let maxBatchSize: Swift.Int?
}

extension PollForThirdPartyJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTypeId
        case maxBatchSize
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let maxBatchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBatchSize)
        maxBatchSize = maxBatchSizeDecoded
    }
}

extension PollForThirdPartyJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForThirdPartyJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionTypeNotFoundException" : self = .actionTypeNotFoundException(try ActionTypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PollForThirdPartyJobsOutputError: Swift.Error, Swift.Equatable {
    case actionTypeNotFoundException(ActionTypeNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForThirdPartyJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PollForThirdPartyJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobs = output.jobs
        } else {
            self.jobs = nil
        }
    }
}

/// Represents the output of a PollForThirdPartyJobs action.
public struct PollForThirdPartyJobsOutputResponse: Swift.Equatable {
    /// Information about the jobs to take action on.
    public var jobs: [CodePipelineClientTypes.ThirdPartyJob]?

    public init (
        jobs: [CodePipelineClientTypes.ThirdPartyJob]? = nil
    )
    {
        self.jobs = jobs
    }
}

struct PollForThirdPartyJobsOutputResponseBody: Swift.Equatable {
    let jobs: [CodePipelineClientTypes.ThirdPartyJob]?
}

extension PollForThirdPartyJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ThirdPartyJob?].self, forKey: .jobs)
        var jobsDecoded0:[CodePipelineClientTypes.ThirdPartyJob]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [CodePipelineClientTypes.ThirdPartyJob]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
    }
}

extension PutActionRevisionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case actionRevision
        case pipelineName
        case stageName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let actionRevision = self.actionRevision {
            try encodeContainer.encode(actionRevision, forKey: .actionRevision)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
    }
}

extension PutActionRevisionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutActionRevision action.
public struct PutActionRevisionInput: Swift.Equatable {
    /// The name of the action that processes the revision.
    /// This member is required.
    public var actionName: Swift.String?
    /// Represents information about the version (or revision) of an action.
    /// This member is required.
    public var actionRevision: CodePipelineClientTypes.ActionRevision?
    /// The name of the pipeline that starts processing the revision to the source.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The name of the stage that contains the action that acts on the revision.
    /// This member is required.
    public var stageName: Swift.String?

    public init (
        actionName: Swift.String? = nil,
        actionRevision: CodePipelineClientTypes.ActionRevision? = nil,
        pipelineName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.actionName = actionName
        self.actionRevision = actionRevision
        self.pipelineName = pipelineName
        self.stageName = stageName
    }
}

struct PutActionRevisionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let stageName: Swift.String?
    let actionName: Swift.String?
    let actionRevision: CodePipelineClientTypes.ActionRevision?
}

extension PutActionRevisionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case actionRevision
        case pipelineName
        case stageName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let actionRevisionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionRevision.self, forKey: .actionRevision)
        actionRevision = actionRevisionDecoded
    }
}

extension PutActionRevisionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutActionRevisionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionNotFoundException" : self = .actionNotFoundException(try ActionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotFoundException" : self = .stageNotFoundException(try StageNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutActionRevisionOutputError: Swift.Error, Swift.Equatable {
    case actionNotFoundException(ActionNotFoundException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case stageNotFoundException(StageNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutActionRevisionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutActionRevisionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.newRevision = output.newRevision
            self.pipelineExecutionId = output.pipelineExecutionId
        } else {
            self.newRevision = false
            self.pipelineExecutionId = nil
        }
    }
}

/// Represents the output of a PutActionRevision action.
public struct PutActionRevisionOutputResponse: Swift.Equatable {
    /// Indicates whether the artifact revision was previously used in an execution of the specified pipeline.
    public var newRevision: Swift.Bool
    /// The ID of the current workflow state of the pipeline.
    public var pipelineExecutionId: Swift.String?

    public init (
        newRevision: Swift.Bool = false,
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.newRevision = newRevision
        self.pipelineExecutionId = pipelineExecutionId
    }
}

struct PutActionRevisionOutputResponseBody: Swift.Equatable {
    let newRevision: Swift.Bool
    let pipelineExecutionId: Swift.String?
}

extension PutActionRevisionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case newRevision
        case pipelineExecutionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let newRevisionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newRevision) ?? false
        newRevision = newRevisionDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension PutApprovalResultInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case pipelineName
        case result
        case stageName
        case token
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let result = self.result {
            try encodeContainer.encode(result, forKey: .result)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }
}

extension PutApprovalResultInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutApprovalResult action.
public struct PutApprovalResultInput: Swift.Equatable {
    /// The name of the action for which approval is requested.
    /// This member is required.
    public var actionName: Swift.String?
    /// The name of the pipeline that contains the action.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Represents information about the result of the approval request.
    /// This member is required.
    public var result: CodePipelineClientTypes.ApprovalResult?
    /// The name of the stage that contains the action.
    /// This member is required.
    public var stageName: Swift.String?
    /// The system-generated token used to identify a unique approval request. The token for each open approval request can be obtained using the [GetPipelineState] action. It is used to validate that the approval request corresponding to this token is still valid.
    /// This member is required.
    public var token: Swift.String?

    public init (
        actionName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        result: CodePipelineClientTypes.ApprovalResult? = nil,
        stageName: Swift.String? = nil,
        token: Swift.String? = nil
    )
    {
        self.actionName = actionName
        self.pipelineName = pipelineName
        self.result = result
        self.stageName = stageName
        self.token = token
    }
}

struct PutApprovalResultInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let stageName: Swift.String?
    let actionName: Swift.String?
    let result: CodePipelineClientTypes.ApprovalResult?
    let token: Swift.String?
}

extension PutApprovalResultInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case pipelineName
        case result
        case stageName
        case token
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let resultDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ApprovalResult.self, forKey: .result)
        result = resultDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
    }
}

extension PutApprovalResultOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutApprovalResultOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionNotFoundException" : self = .actionNotFoundException(try ActionNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApprovalAlreadyCompletedException" : self = .approvalAlreadyCompletedException(try ApprovalAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApprovalTokenException" : self = .invalidApprovalTokenException(try InvalidApprovalTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotFoundException" : self = .stageNotFoundException(try StageNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutApprovalResultOutputError: Swift.Error, Swift.Equatable {
    case actionNotFoundException(ActionNotFoundException)
    case approvalAlreadyCompletedException(ApprovalAlreadyCompletedException)
    case invalidApprovalTokenException(InvalidApprovalTokenException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case stageNotFoundException(StageNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutApprovalResultOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutApprovalResultOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.approvedAt = output.approvedAt
        } else {
            self.approvedAt = nil
        }
    }
}

/// Represents the output of a PutApprovalResult action.
public struct PutApprovalResultOutputResponse: Swift.Equatable {
    /// The timestamp showing when the approval or rejection was submitted.
    public var approvedAt: ClientRuntime.Date?

    public init (
        approvedAt: ClientRuntime.Date? = nil
    )
    {
        self.approvedAt = approvedAt
    }
}

struct PutApprovalResultOutputResponseBody: Swift.Equatable {
    let approvedAt: ClientRuntime.Date?
}

extension PutApprovalResultOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvedAt
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .approvedAt)
        approvedAt = approvedAtDecoded
    }
}

extension PutJobFailureResultInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureDetails
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension PutJobFailureResultInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutJobFailureResult action.
public struct PutJobFailureResultInput: Swift.Equatable {
    /// The details about the failure of a job.
    /// This member is required.
    public var failureDetails: CodePipelineClientTypes.FailureDetails?
    /// The unique system-generated ID of the job that failed. This is the same ID returned from PollForJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        failureDetails: CodePipelineClientTypes.FailureDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.failureDetails = failureDetails
        self.jobId = jobId
    }
}

struct PutJobFailureResultInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let failureDetails: CodePipelineClientTypes.FailureDetails?
}

extension PutJobFailureResultInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureDetails
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.FailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
    }
}

extension PutJobFailureResultOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutJobFailureResultOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidJobStateException" : self = .invalidJobStateException(try InvalidJobStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutJobFailureResultOutputError: Swift.Error, Swift.Equatable {
    case invalidJobStateException(InvalidJobStateException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutJobFailureResultOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutJobFailureResultOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutJobSuccessResultInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
        case outputVariables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let continuationToken = self.continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let currentRevision = self.currentRevision {
            try encodeContainer.encode(currentRevision, forKey: .currentRevision)
        }
        if let executionDetails = self.executionDetails {
            try encodeContainer.encode(executionDetails, forKey: .executionDetails)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let outputVariables = outputVariables {
            var outputVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputVariables)
            for (dictKey0, outputVariablesMap0) in outputVariables {
                try outputVariablesContainer.encode(outputVariablesMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PutJobSuccessResultInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutJobSuccessResult action.
public struct PutJobSuccessResultInput: Swift.Equatable {
    /// A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a custom action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the custom action. When the action is complete, no continuation token should be supplied.
    public var continuationToken: Swift.String?
    /// The ID of the current revision of the artifact successfully worked on by the job.
    public var currentRevision: CodePipelineClientTypes.CurrentRevision?
    /// The execution details of the successful job, such as the actions taken by the job worker.
    public var executionDetails: CodePipelineClientTypes.ExecutionDetails?
    /// The unique system-generated ID of the job that succeeded. This is the same ID returned from PollForJobs.
    /// This member is required.
    public var jobId: Swift.String?
    /// Key-value pairs produced as output by a job worker that can be made available to a downstream action configuration. outputVariables can be included only when there is no continuation token on the request.
    public var outputVariables: [Swift.String:Swift.String]?

    public init (
        continuationToken: Swift.String? = nil,
        currentRevision: CodePipelineClientTypes.CurrentRevision? = nil,
        executionDetails: CodePipelineClientTypes.ExecutionDetails? = nil,
        jobId: Swift.String? = nil,
        outputVariables: [Swift.String:Swift.String]? = nil
    )
    {
        self.continuationToken = continuationToken
        self.currentRevision = currentRevision
        self.executionDetails = executionDetails
        self.jobId = jobId
        self.outputVariables = outputVariables
    }
}

struct PutJobSuccessResultInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let currentRevision: CodePipelineClientTypes.CurrentRevision?
    let continuationToken: Swift.String?
    let executionDetails: CodePipelineClientTypes.ExecutionDetails?
    let outputVariables: [Swift.String:Swift.String]?
}

extension PutJobSuccessResultInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
        case outputVariables
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let currentRevisionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.CurrentRevision.self, forKey: .currentRevision)
        currentRevision = currentRevisionDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let executionDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ExecutionDetails.self, forKey: .executionDetails)
        executionDetails = executionDetailsDecoded
        let outputVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .outputVariables)
        var outputVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let outputVariablesContainer = outputVariablesContainer {
            outputVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, outputvariablesvalue0) in outputVariablesContainer {
                if let outputvariablesvalue0 = outputvariablesvalue0 {
                    outputVariablesDecoded0?[key0] = outputvariablesvalue0
                }
            }
        }
        outputVariables = outputVariablesDecoded0
    }
}

extension PutJobSuccessResultOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutJobSuccessResultOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidJobStateException" : self = .invalidJobStateException(try InvalidJobStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OutputVariablesSizeExceededException" : self = .outputVariablesSizeExceededException(try OutputVariablesSizeExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutJobSuccessResultOutputError: Swift.Error, Swift.Equatable {
    case invalidJobStateException(InvalidJobStateException)
    case jobNotFoundException(JobNotFoundException)
    case outputVariablesSizeExceededException(OutputVariablesSizeExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutJobSuccessResultOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutJobSuccessResultOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutThirdPartyJobFailureResultInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case failureDetails
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension PutThirdPartyJobFailureResultInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutThirdPartyJobFailureResult action.
public struct PutThirdPartyJobFailureResultInput: Swift.Equatable {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Represents information about failure details.
    /// This member is required.
    public var failureDetails: CodePipelineClientTypes.FailureDetails?
    /// The ID of the job that failed. This is the same ID returned from PollForThirdPartyJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        failureDetails: CodePipelineClientTypes.FailureDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.failureDetails = failureDetails
        self.jobId = jobId
    }
}

struct PutThirdPartyJobFailureResultInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let clientToken: Swift.String?
    let failureDetails: CodePipelineClientTypes.FailureDetails?
}

extension PutThirdPartyJobFailureResultInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case failureDetails
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.FailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
    }
}

extension PutThirdPartyJobFailureResultOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutThirdPartyJobFailureResultOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidClientTokenException" : self = .invalidClientTokenException(try InvalidClientTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobStateException" : self = .invalidJobStateException(try InvalidJobStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutThirdPartyJobFailureResultOutputError: Swift.Error, Swift.Equatable {
    case invalidClientTokenException(InvalidClientTokenException)
    case invalidJobStateException(InvalidJobStateException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutThirdPartyJobFailureResultOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutThirdPartyJobFailureResultOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutThirdPartyJobSuccessResultInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let continuationToken = self.continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let currentRevision = self.currentRevision {
            try encodeContainer.encode(currentRevision, forKey: .currentRevision)
        }
        if let executionDetails = self.executionDetails {
            try encodeContainer.encode(executionDetails, forKey: .executionDetails)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

extension PutThirdPartyJobSuccessResultInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a PutThirdPartyJobSuccessResult action.
public struct PutThirdPartyJobSuccessResultInput: Swift.Equatable {
    /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A token generated by a job worker, such as an AWS CodeDeploy deployment ID, that a successful job provides to identify a partner action in progress. Future jobs use this token to identify the running instance of the action. It can be reused to return more information about the progress of the partner action. When the action is complete, no continuation token should be supplied.
    public var continuationToken: Swift.String?
    /// Represents information about a current revision.
    public var currentRevision: CodePipelineClientTypes.CurrentRevision?
    /// The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
    public var executionDetails: CodePipelineClientTypes.ExecutionDetails?
    /// The ID of the job that successfully completed. This is the same ID returned from PollForThirdPartyJobs.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        currentRevision: CodePipelineClientTypes.CurrentRevision? = nil,
        executionDetails: CodePipelineClientTypes.ExecutionDetails? = nil,
        jobId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.continuationToken = continuationToken
        self.currentRevision = currentRevision
        self.executionDetails = executionDetails
        self.jobId = jobId
    }
}

struct PutThirdPartyJobSuccessResultInputBody: Swift.Equatable {
    let jobId: Swift.String?
    let clientToken: Swift.String?
    let currentRevision: CodePipelineClientTypes.CurrentRevision?
    let continuationToken: Swift.String?
    let executionDetails: CodePipelineClientTypes.ExecutionDetails?
}

extension PutThirdPartyJobSuccessResultInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case continuationToken
        case currentRevision
        case executionDetails
        case jobId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let currentRevisionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.CurrentRevision.self, forKey: .currentRevision)
        currentRevision = currentRevisionDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let executionDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ExecutionDetails.self, forKey: .executionDetails)
        executionDetails = executionDetailsDecoded
    }
}

extension PutThirdPartyJobSuccessResultOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutThirdPartyJobSuccessResultOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidClientTokenException" : self = .invalidClientTokenException(try InvalidClientTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidJobStateException" : self = .invalidJobStateException(try InvalidJobStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "JobNotFoundException" : self = .jobNotFoundException(try JobNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutThirdPartyJobSuccessResultOutputError: Swift.Error, Swift.Equatable {
    case invalidClientTokenException(InvalidClientTokenException)
    case invalidJobStateException(InvalidJobStateException)
    case jobNotFoundException(JobNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutThirdPartyJobSuccessResultOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutThirdPartyJobSuccessResultOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutWebhookInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
        case webhook
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let webhook = self.webhook {
            try encodeContainer.encode(webhook, forKey: .webhook)
        }
    }
}

extension PutWebhookInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutWebhookInput: Swift.Equatable {
    /// The tags for the webhook.
    public var tags: [CodePipelineClientTypes.Tag]?
    /// The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later.
    /// This member is required.
    public var webhook: CodePipelineClientTypes.WebhookDefinition?

    public init (
        tags: [CodePipelineClientTypes.Tag]? = nil,
        webhook: CodePipelineClientTypes.WebhookDefinition? = nil
    )
    {
        self.tags = tags
        self.webhook = webhook
    }
}

struct PutWebhookInputBody: Swift.Equatable {
    let webhook: CodePipelineClientTypes.WebhookDefinition?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension PutWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
        case webhook
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookDefinition.self, forKey: .webhook)
        webhook = webhookDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutWebhookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutWebhookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsException" : self = .invalidTagsException(try InvalidTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidWebhookAuthenticationParametersException" : self = .invalidWebhookAuthenticationParametersException(try InvalidWebhookAuthenticationParametersException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidWebhookFilterPatternException" : self = .invalidWebhookFilterPatternException(try InvalidWebhookFilterPatternException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutWebhookOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidTagsException(InvalidTagsException)
    case invalidWebhookAuthenticationParametersException(InvalidWebhookAuthenticationParametersException)
    case invalidWebhookFilterPatternException(InvalidWebhookFilterPatternException)
    case limitExceededException(LimitExceededException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutWebhookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutWebhookOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.webhook = output.webhook
        } else {
            self.webhook = nil
        }
    }
}

public struct PutWebhookOutputResponse: Swift.Equatable {
    /// The detail returned from creating the webhook, such as the webhook name, webhook URL, and webhook ARN.
    public var webhook: CodePipelineClientTypes.ListWebhookItem?

    public init (
        webhook: CodePipelineClientTypes.ListWebhookItem? = nil
    )
    {
        self.webhook = webhook
    }
}

struct PutWebhookOutputResponseBody: Swift.Equatable {
    let webhook: CodePipelineClientTypes.ListWebhookItem?
}

extension PutWebhookOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhook
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ListWebhookItem.self, forKey: .webhook)
        webhook = webhookDecoded
    }
}

extension RegisterWebhookWithThirdPartyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhookName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let webhookName = self.webhookName {
            try encodeContainer.encode(webhookName, forKey: .webhookName)
        }
    }
}

extension RegisterWebhookWithThirdPartyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RegisterWebhookWithThirdPartyInput: Swift.Equatable {
    /// The name of an existing webhook created with PutWebhook to register with a supported third party.
    public var webhookName: Swift.String?

    public init (
        webhookName: Swift.String? = nil
    )
    {
        self.webhookName = webhookName
    }
}

struct RegisterWebhookWithThirdPartyInputBody: Swift.Equatable {
    let webhookName: Swift.String?
}

extension RegisterWebhookWithThirdPartyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case webhookName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let webhookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webhookName)
        webhookName = webhookNameDecoded
    }
}

extension RegisterWebhookWithThirdPartyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterWebhookWithThirdPartyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "WebhookNotFoundException" : self = .webhookNotFoundException(try WebhookNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterWebhookWithThirdPartyOutputError: Swift.Error, Swift.Equatable {
    case validationException(ValidationException)
    case webhookNotFoundException(WebhookNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterWebhookWithThirdPartyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterWebhookWithThirdPartyOutputResponse: Swift.Equatable {

    public init () { }
}

extension RequestFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RequestFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because of an unknown error, exception, or failure.
public struct RequestFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RequestFailedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension RequestFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The resource was specified in an invalid format.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RetryStageExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
        case pipelineName
        case retryMode
        case stageName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let retryMode = self.retryMode {
            try encodeContainer.encode(retryMode.rawValue, forKey: .retryMode)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
    }
}

extension RetryStageExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RetryStageExecution action.
public struct RetryStageExecutionInput: Swift.Equatable {
    /// The ID of the pipeline execution in the failed stage to be retried. Use the [GetPipelineState] action to retrieve the current pipelineExecutionId of the failed stage
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline that contains the failed stage.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The scope of the retry attempt. Currently, the only supported value is FAILED_ACTIONS.
    /// This member is required.
    public var retryMode: CodePipelineClientTypes.StageRetryMode?
    /// The name of the failed stage to be retried.
    /// This member is required.
    public var stageName: Swift.String?

    public init (
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        retryMode: CodePipelineClientTypes.StageRetryMode? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
        self.retryMode = retryMode
        self.stageName = stageName
    }
}

struct RetryStageExecutionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let stageName: Swift.String?
    let pipelineExecutionId: Swift.String?
    let retryMode: CodePipelineClientTypes.StageRetryMode?
}

extension RetryStageExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
        case pipelineName
        case retryMode
        case stageName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let retryModeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageRetryMode.self, forKey: .retryMode)
        retryMode = retryModeDecoded
    }
}

extension RetryStageExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RetryStageExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotLatestPipelineExecutionException" : self = .notLatestPipelineExecutionException(try NotLatestPipelineExecutionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotFoundException" : self = .stageNotFoundException(try StageNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StageNotRetryableException" : self = .stageNotRetryableException(try StageNotRetryableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RetryStageExecutionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case notLatestPipelineExecutionException(NotLatestPipelineExecutionException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case stageNotFoundException(StageNotFoundException)
    case stageNotRetryableException(StageNotRetryableException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RetryStageExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RetryStageExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionId = output.pipelineExecutionId
        } else {
            self.pipelineExecutionId = nil
        }
    }
}

/// Represents the output of a RetryStageExecution action.
public struct RetryStageExecutionOutputResponse: Swift.Equatable {
    /// The ID of the current workflow execution in the failed stage.
    public var pipelineExecutionId: Swift.String?

    public init (
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

struct RetryStageExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionId: Swift.String?
}

extension RetryStageExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension CodePipelineClientTypes.S3ArtifactLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName
        case objectKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let objectKey = self.objectKey {
            try encodeContainer.encode(objectKey, forKey: .objectKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let objectKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectKey)
        objectKey = objectKeyDecoded
    }
}

extension CodePipelineClientTypes {
    /// The location of the S3 bucket that contains a revision.
    public struct S3ArtifactLocation: Swift.Equatable {
        /// The name of the S3 bucket.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The key of the object in the S3 bucket, which uniquely identifies the object in the bucket.
        /// This member is required.
        public var objectKey: Swift.String?

        public init (
            bucketName: Swift.String? = nil,
            objectKey: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }
    }

}

extension CodePipelineClientTypes.S3Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case key
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension CodePipelineClientTypes {
    /// The Amazon S3 artifact location for an action's artifacts.
    public struct S3Location: Swift.Equatable {
        /// The Amazon S3 artifact bucket for an action's artifacts.
        public var bucket: Swift.String?
        /// The artifact name.
        public var key: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension CodePipelineClientTypes.SourceRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case revisionId
        case revisionSummary
        case revisionUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let revisionSummary = self.revisionSummary {
            try encodeContainer.encode(revisionSummary, forKey: .revisionSummary)
        }
        if let revisionUrl = self.revisionUrl {
            try encodeContainer.encode(revisionUrl, forKey: .revisionUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let revisionSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionSummary)
        revisionSummary = revisionSummaryDecoded
        let revisionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionUrl)
        revisionUrl = revisionUrlDecoded
    }
}

extension CodePipelineClientTypes {
    /// Information about the version (or revision) of a source artifact that initiated a pipeline execution.
    public struct SourceRevision: Swift.Equatable {
        /// The name of the action that processed the revision to the source artifact.
        /// This member is required.
        public var actionName: Swift.String?
        /// The system-generated unique ID that identifies the revision number of the artifact.
        public var revisionId: Swift.String?
        /// Summary information about the most recent revision of the artifact. For GitHub and AWS CodeCommit repositories, the commit message. For Amazon S3 buckets or actions, the user-provided content of a codepipeline-artifact-revision-summary key specified in the object metadata.
        public var revisionSummary: Swift.String?
        /// The commit ID for the artifact revision. For artifacts stored in GitHub or AWS CodeCommit repositories, the commit ID is linked to a commit details page.
        public var revisionUrl: Swift.String?

        public init (
            actionName: Swift.String? = nil,
            revisionId: Swift.String? = nil,
            revisionSummary: Swift.String? = nil,
            revisionUrl: Swift.String? = nil
        )
        {
            self.actionName = actionName
            self.revisionId = revisionId
            self.revisionSummary = revisionSummary
            self.revisionUrl = revisionUrl
        }
    }

}

extension CodePipelineClientTypes.StageContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a stage to a job worker.
    public struct StageContext: Swift.Equatable {
        /// The name of the stage.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodePipelineClientTypes.StageDeclaration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case blockers
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actiondeclaration0 in actions {
                try actionsContainer.encode(actiondeclaration0)
            }
        }
        if let blockers = blockers {
            var blockersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockers)
            for blockerdeclaration0 in blockers {
                try blockersContainer.encode(blockerdeclaration0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let blockersContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.BlockerDeclaration?].self, forKey: .blockers)
        var blockersDecoded0:[CodePipelineClientTypes.BlockerDeclaration]? = nil
        if let blockersContainer = blockersContainer {
            blockersDecoded0 = [CodePipelineClientTypes.BlockerDeclaration]()
            for structure0 in blockersContainer {
                if let structure0 = structure0 {
                    blockersDecoded0?.append(structure0)
                }
            }
        }
        blockers = blockersDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionDeclaration?].self, forKey: .actions)
        var actionsDecoded0:[CodePipelineClientTypes.ActionDeclaration]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [CodePipelineClientTypes.ActionDeclaration]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a stage and its definition.
    public struct StageDeclaration: Swift.Equatable {
        /// The actions included in a stage.
        /// This member is required.
        public var actions: [CodePipelineClientTypes.ActionDeclaration]?
        /// Reserved for future use.
        public var blockers: [CodePipelineClientTypes.BlockerDeclaration]?
        /// The name of the stage.
        /// This member is required.
        public var name: Swift.String?

        public init (
            actions: [CodePipelineClientTypes.ActionDeclaration]? = nil,
            blockers: [CodePipelineClientTypes.BlockerDeclaration]? = nil,
            name: Swift.String? = nil
        )
        {
            self.actions = actions
            self.blockers = blockers
            self.name = name
        }
    }

}

extension CodePipelineClientTypes.StageExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the run of a stage.
    public struct StageExecution: Swift.Equatable {
        /// The ID of the pipeline execution associated with the stage.
        /// This member is required.
        public var pipelineExecutionId: Swift.String?
        /// The status of the stage, or for a completed stage, the last status of the stage. A status of cancelled means that the pipeline’s definition was updated before the stage execution could be completed.
        /// This member is required.
        public var status: CodePipelineClientTypes.StageExecutionStatus?

        public init (
            pipelineExecutionId: Swift.String? = nil,
            status: CodePipelineClientTypes.StageExecutionStatus? = nil
        )
        {
            self.pipelineExecutionId = pipelineExecutionId
            self.status = status
        }
    }

}

extension CodePipelineClientTypes {
    public enum StageExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StageExecutionStatus] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StageExecutionStatus(rawValue: rawValue) ?? StageExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension StageNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StageNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The stage was specified in an invalid format or cannot be found.
public struct StageNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StageNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StageNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StageNotRetryableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StageNotRetryableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Unable to retry. The pipeline structure or stage state might have changed while actions awaited retry, or the stage contains no failed actions.
public struct StageNotRetryableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StageNotRetryableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension StageNotRetryableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes {
    public enum StageRetryMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failedActions
        case sdkUnknown(Swift.String)

        public static var allCases: [StageRetryMode] {
            return [
                .failedActions,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failedActions: return "FAILED_ACTIONS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StageRetryMode(rawValue: rawValue) ?? StageRetryMode.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.StageState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionStates
        case inboundExecution
        case inboundTransitionState
        case latestExecution
        case stageName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionStates = actionStates {
            var actionStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionStates)
            for actionstate0 in actionStates {
                try actionStatesContainer.encode(actionstate0)
            }
        }
        if let inboundExecution = self.inboundExecution {
            try encodeContainer.encode(inboundExecution, forKey: .inboundExecution)
        }
        if let inboundTransitionState = self.inboundTransitionState {
            try encodeContainer.encode(inboundTransitionState, forKey: .inboundTransitionState)
        }
        if let latestExecution = self.latestExecution {
            try encodeContainer.encode(latestExecution, forKey: .latestExecution)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let inboundExecutionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageExecution.self, forKey: .inboundExecution)
        inboundExecution = inboundExecutionDecoded
        let inboundTransitionStateDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.TransitionState.self, forKey: .inboundTransitionState)
        inboundTransitionState = inboundTransitionStateDecoded
        let actionStatesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.ActionState?].self, forKey: .actionStates)
        var actionStatesDecoded0:[CodePipelineClientTypes.ActionState]? = nil
        if let actionStatesContainer = actionStatesContainer {
            actionStatesDecoded0 = [CodePipelineClientTypes.ActionState]()
            for structure0 in actionStatesContainer {
                if let structure0 = structure0 {
                    actionStatesDecoded0?.append(structure0)
                }
            }
        }
        actionStates = actionStatesDecoded0
        let latestExecutionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageExecution.self, forKey: .latestExecution)
        latestExecution = latestExecutionDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the state of the stage.
    public struct StageState: Swift.Equatable {
        /// The state of the stage.
        public var actionStates: [CodePipelineClientTypes.ActionState]?
        /// Represents information about the run of a stage.
        public var inboundExecution: CodePipelineClientTypes.StageExecution?
        /// The state of the inbound transition, which is either enabled or disabled.
        public var inboundTransitionState: CodePipelineClientTypes.TransitionState?
        /// Information about the latest execution in the stage, including its ID and status.
        public var latestExecution: CodePipelineClientTypes.StageExecution?
        /// The name of the stage.
        public var stageName: Swift.String?

        public init (
            actionStates: [CodePipelineClientTypes.ActionState]? = nil,
            inboundExecution: CodePipelineClientTypes.StageExecution? = nil,
            inboundTransitionState: CodePipelineClientTypes.TransitionState? = nil,
            latestExecution: CodePipelineClientTypes.StageExecution? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.actionStates = actionStates
            self.inboundExecution = inboundExecution
            self.inboundTransitionState = inboundTransitionState
            self.latestExecution = latestExecution
            self.stageName = stageName
        }
    }

}

extension CodePipelineClientTypes {
    public enum StageTransitionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inbound
        case outbound
        case sdkUnknown(Swift.String)

        public static var allCases: [StageTransitionType] {
            return [
                .inbound,
                .outbound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inbound: return "Inbound"
            case .outbound: return "Outbound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StageTransitionType(rawValue: rawValue) ?? StageTransitionType.sdkUnknown(rawValue)
        }
    }
}

extension StartPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension StartPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a StartPipelineExecution action.
public struct StartPipelineExecutionInput: Swift.Equatable {
    /// The system-generated unique ID used to identify a unique execution request.
    public var clientRequestToken: Swift.String?
    /// The name of the pipeline to start.
    /// This member is required.
    public var name: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.name = name
    }
}

struct StartPipelineExecutionInputBody: Swift.Equatable {
    let name: Swift.String?
    let clientRequestToken: Swift.String?
}

extension StartPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case name
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension StartPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionId = output.pipelineExecutionId
        } else {
            self.pipelineExecutionId = nil
        }
    }
}

/// Represents the output of a StartPipelineExecution action.
public struct StartPipelineExecutionOutputResponse: Swift.Equatable {
    /// The unique system-generated ID of the pipeline execution that was started.
    public var pipelineExecutionId: Swift.String?

    public init (
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

struct StartPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionId: Swift.String?
}

extension StartPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension CodePipelineClientTypes.StopExecutionTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension CodePipelineClientTypes {
    /// The interaction that stopped a pipeline execution.
    public struct StopExecutionTrigger: Swift.Equatable {
        /// The user-specified reason the pipeline was stopped.
        public var reason: Swift.String?

        public init (
            reason: Swift.String? = nil
        )
        {
            self.reason = reason
        }
    }

}

extension StopPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abandon
        case pipelineExecutionId
        case pipelineName
        case reason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if abandon != false {
            try encodeContainer.encode(abandon, forKey: .abandon)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let reason = self.reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }
}

extension StopPipelineExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopPipelineExecutionInput: Swift.Equatable {
    /// Use this option to stop the pipeline execution by abandoning, rather than finishing, in-progress actions. This option can lead to failed or out-of-sequence tasks.
    public var abandon: Swift.Bool
    /// The ID of the pipeline execution to be stopped in the current stage. Use the GetPipelineState action to retrieve the current pipelineExecutionId.
    /// This member is required.
    public var pipelineExecutionId: Swift.String?
    /// The name of the pipeline to stop.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Use this option to enter comments, such as the reason the pipeline was stopped.
    public var reason: Swift.String?

    public init (
        abandon: Swift.Bool = false,
        pipelineExecutionId: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.abandon = abandon
        self.pipelineExecutionId = pipelineExecutionId
        self.pipelineName = pipelineName
        self.reason = reason
    }
}

struct StopPipelineExecutionInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineExecutionId: Swift.String?
    let abandon: Swift.Bool
    let reason: Swift.String?
}

extension StopPipelineExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abandon
        case pipelineExecutionId
        case pipelineName
        case reason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let abandonDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .abandon) ?? false
        abandon = abandonDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension StopPipelineExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopPipelineExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DuplicatedStopRequestException" : self = .duplicatedStopRequestException(try DuplicatedStopRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineExecutionNotStoppableException" : self = .pipelineExecutionNotStoppableException(try PipelineExecutionNotStoppableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopPipelineExecutionOutputError: Swift.Error, Swift.Equatable {
    case conflictException(ConflictException)
    case duplicatedStopRequestException(DuplicatedStopRequestException)
    case pipelineExecutionNotStoppableException(PipelineExecutionNotStoppableException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopPipelineExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopPipelineExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineExecutionId = output.pipelineExecutionId
        } else {
            self.pipelineExecutionId = nil
        }
    }
}

public struct StopPipelineExecutionOutputResponse: Swift.Equatable {
    /// The unique system-generated ID of the pipeline execution that was stopped.
    public var pipelineExecutionId: Swift.String?

    public init (
        pipelineExecutionId: Swift.String? = nil
    )
    {
        self.pipelineExecutionId = pipelineExecutionId
    }
}

struct StopPipelineExecutionOutputResponseBody: Swift.Equatable {
    let pipelineExecutionId: Swift.String?
}

extension StopPipelineExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineExecutionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}

extension CodePipelineClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CodePipelineClientTypes {
    /// A tag is a key-value pair that is used to manage the resource.
    public struct Tag: Swift.Equatable {
        /// The tag's key.
        /// This member is required.
        public var key: Swift.String?
        /// The tag's value.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags you want to modify or add to the resource.
    /// This member is required.
    public var tags: [CodePipelineClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [CodePipelineClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [CodePipelineClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodePipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodePipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsException" : self = .invalidTagsException(try InvalidTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidArnException(InvalidArnException)
    case invalidTagsException(InvalidTagsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodePipelineClientTypes.ThirdPartyJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case jobId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension CodePipelineClientTypes {
    /// A response to a PollForThirdPartyJobs request returned by AWS CodePipeline when there is a job to be worked on by a partner action.
    public struct ThirdPartyJob: Swift.Equatable {
        /// The clientToken portion of the clientId and clientToken pair used to verify that the calling entity is allowed access to the job and its details.
        public var clientId: Swift.String?
        /// The identifier used to identify the job in AWS CodePipeline.
        public var jobId: Swift.String?

        public init (
            clientId: Swift.String? = nil,
            jobId: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.jobId = jobId
        }
    }

}

extension CodePipelineClientTypes.ThirdPartyJobData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionConfiguration
        case actionTypeId
        case artifactCredentials
        case continuationToken
        case encryptionKey
        case inputArtifacts
        case outputArtifacts
        case pipelineContext
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionConfiguration = self.actionConfiguration {
            try encodeContainer.encode(actionConfiguration, forKey: .actionConfiguration)
        }
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let artifactCredentials = self.artifactCredentials {
            try encodeContainer.encode(artifactCredentials, forKey: .artifactCredentials)
        }
        if let continuationToken = self.continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for artifact0 in inputArtifacts {
                try inputArtifactsContainer.encode(artifact0)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for artifact0 in outputArtifacts {
                try outputArtifactsContainer.encode(artifact0)
            }
        }
        if let pipelineContext = self.pipelineContext {
            try encodeContainer.encode(pipelineContext, forKey: .pipelineContext)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let actionConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionConfiguration.self, forKey: .actionConfiguration)
        actionConfiguration = actionConfigurationDecoded
        let pipelineContextDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineContext.self, forKey: .pipelineContext)
        pipelineContext = pipelineContextDecoded
        let inputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in inputArtifactsContainer {
                if let structure0 = structure0 {
                    inputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in outputArtifactsContainer {
                if let structure0 = structure0 {
                    outputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let artifactCredentialsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.AWSSessionCredentials.self, forKey: .artifactCredentials)
        artifactCredentials = artifactCredentialsDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}

extension CodePipelineClientTypes.ThirdPartyJobData: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThirdPartyJobData(actionConfiguration: \(Swift.String(describing: actionConfiguration)), actionTypeId: \(Swift.String(describing: actionTypeId)), continuationToken: \(Swift.String(describing: continuationToken)), encryptionKey: \(Swift.String(describing: encryptionKey)), inputArtifacts: \(Swift.String(describing: inputArtifacts)), outputArtifacts: \(Swift.String(describing: outputArtifacts)), pipelineContext: \(Swift.String(describing: pipelineContext)), artifactCredentials: \"CONTENT_REDACTED\")"}
}

extension CodePipelineClientTypes {
    /// Represents information about the job data for a partner action.
    public struct ThirdPartyJobData: Swift.Equatable {
        /// Represents information about an action configuration.
        public var actionConfiguration: CodePipelineClientTypes.ActionConfiguration?
        /// Represents information about an action type.
        public var actionTypeId: CodePipelineClientTypes.ActionTypeId?
        /// Represents an AWS session credentials object. These credentials are temporary credentials that are issued by AWS Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in AWS CodePipeline.
        public var artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials?
        /// A system-generated token, such as a AWS CodeDeploy deployment ID, that a job requires to continue the job asynchronously.
        public var continuationToken: Swift.String?
        /// The encryption key used to encrypt and decrypt data in the artifact store for the pipeline, such as an AWS Key Management Service (AWS KMS) key. This is optional and might not be present.
        public var encryptionKey: CodePipelineClientTypes.EncryptionKey?
        /// The name of the artifact that is worked on by the action, if any. This name might be system-generated, such as "MyApp", or it might be defined by the user when the action is created. The input artifact name must match the name of an output artifact generated by an action in an earlier action or stage of the pipeline.
        public var inputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// The name of the artifact that is the result of the action, if any. This name might be system-generated, such as "MyBuiltApp", or it might be defined by the user when the action is created.
        public var outputArtifacts: [CodePipelineClientTypes.Artifact]?
        /// Represents information about a pipeline to a job worker. Does not include pipelineArn and pipelineExecutionId for ThirdParty jobs.
        public var pipelineContext: CodePipelineClientTypes.PipelineContext?

        public init (
            actionConfiguration: CodePipelineClientTypes.ActionConfiguration? = nil,
            actionTypeId: CodePipelineClientTypes.ActionTypeId? = nil,
            artifactCredentials: CodePipelineClientTypes.AWSSessionCredentials? = nil,
            continuationToken: Swift.String? = nil,
            encryptionKey: CodePipelineClientTypes.EncryptionKey? = nil,
            inputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            outputArtifacts: [CodePipelineClientTypes.Artifact]? = nil,
            pipelineContext: CodePipelineClientTypes.PipelineContext? = nil
        )
        {
            self.actionConfiguration = actionConfiguration
            self.actionTypeId = actionTypeId
            self.artifactCredentials = artifactCredentials
            self.continuationToken = continuationToken
            self.encryptionKey = encryptionKey
            self.inputArtifacts = inputArtifacts
            self.outputArtifacts = outputArtifacts
            self.pipelineContext = pipelineContext
        }
    }

}

extension CodePipelineClientTypes.ThirdPartyJobDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data
        case id
        case nonce
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let nonce = self.nonce {
            try encodeContainer.encode(nonce, forKey: .nonce)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let dataDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ThirdPartyJobData.self, forKey: .data)
        data = dataDecoded
        let nonceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nonce)
        nonce = nonceDecoded
    }
}

extension CodePipelineClientTypes {
    /// The details of a job sent in response to a GetThirdPartyJobDetails request.
    public struct ThirdPartyJobDetails: Swift.Equatable {
        /// The data to be returned by the third party job worker.
        public var data: CodePipelineClientTypes.ThirdPartyJobData?
        /// The identifier used to identify the job details in AWS CodePipeline.
        public var id: Swift.String?
        /// A system-generated random number that AWS CodePipeline uses to ensure that the job is being worked on by only one job worker. Use this number in an [AcknowledgeThirdPartyJob] request.
        public var nonce: Swift.String?

        public init (
            data: CodePipelineClientTypes.ThirdPartyJobData? = nil,
            id: Swift.String? = nil,
            nonce: Swift.String? = nil
        )
        {
            self.data = data
            self.id = id
            self.nonce = nonce
        }
    }

}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The tags limit for a resource has been exceeded.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.TransitionState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disabledReason
        case enabled
        case lastChangedAt
        case lastChangedBy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let disabledReason = self.disabledReason {
            try encodeContainer.encode(disabledReason, forKey: .disabledReason)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let lastChangedAt = self.lastChangedAt {
            try encodeContainer.encodeTimestamp(lastChangedAt, format: .epochSeconds, forKey: .lastChangedAt)
        }
        if let lastChangedBy = self.lastChangedBy {
            try encodeContainer.encode(lastChangedBy, forKey: .lastChangedBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let lastChangedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastChangedBy)
        lastChangedBy = lastChangedByDecoded
        let lastChangedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastChangedAt)
        lastChangedAt = lastChangedAtDecoded
        let disabledReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disabledReason)
        disabledReason = disabledReasonDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about the state of transitions between one stage and another stage.
    public struct TransitionState: Swift.Equatable {
        /// The user-specified reason why the transition between two stages of a pipeline was disabled.
        public var disabledReason: Swift.String?
        /// Whether the transition between stages is enabled (true) or disabled (false).
        public var enabled: Swift.Bool
        /// The timestamp when the transition state was last changed.
        public var lastChangedAt: ClientRuntime.Date?
        /// The ID of the user who last changed the transition state.
        public var lastChangedBy: Swift.String?

        public init (
            disabledReason: Swift.String? = nil,
            enabled: Swift.Bool = false,
            lastChangedAt: ClientRuntime.Date? = nil,
            lastChangedBy: Swift.String? = nil
        )
        {
            self.disabledReason = disabledReason
            self.enabled = enabled
            self.lastChangedAt = lastChangedAt
            self.lastChangedBy = lastChangedBy
        }
    }

}

extension CodePipelineClientTypes {
    public enum TriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudwatchevent
        case createpipeline
        case pollforsourcechanges
        case putactionrevision
        case startpipelineexecution
        case webhook
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerType] {
            return [
                .cloudwatchevent,
                .createpipeline,
                .pollforsourcechanges,
                .putactionrevision,
                .startpipelineexecution,
                .webhook,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudwatchevent: return "CloudWatchEvent"
            case .createpipeline: return "CreatePipeline"
            case .pollforsourcechanges: return "PollForSourceChanges"
            case .putactionrevision: return "PutActionRevision"
            case .startpipelineexecution: return "StartPipelineExecution"
            case .webhook: return "Webhook"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TriggerType(rawValue: rawValue) ?? TriggerType.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to remove tags from.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of keys for the tags to be removed from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModificationException" : self = .concurrentModificationException(try ConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsException" : self = .invalidTagsException(try InvalidTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case concurrentModificationException(ConcurrentModificationException)
    case invalidArnException(InvalidArnException)
    case invalidTagsException(InvalidTagsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateActionTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = self.actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
    }
}

extension UpdateActionTypeInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateActionTypeInput: Swift.Equatable {
    /// The action type definition for the action type to be updated.
    /// This member is required.
    public var actionType: CodePipelineClientTypes.ActionTypeDeclaration?

    public init (
        actionType: CodePipelineClientTypes.ActionTypeDeclaration? = nil
    )
    {
        self.actionType = actionType
    }
}

struct UpdateActionTypeInputBody: Swift.Equatable {
    let actionType: CodePipelineClientTypes.ActionTypeDeclaration?
}

extension UpdateActionTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeDeclaration.self, forKey: .actionType)
        actionType = actionTypeDecoded
    }
}

extension UpdateActionTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateActionTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActionTypeNotFoundException" : self = .actionTypeNotFoundException(try ActionTypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestFailedException" : self = .requestFailedException(try RequestFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateActionTypeOutputError: Swift.Error, Swift.Equatable {
    case actionTypeNotFoundException(ActionTypeNotFoundException)
    case requestFailedException(RequestFailedException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateActionTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateActionTypeOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdatePipelineInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipeline = self.pipeline {
            try encodeContainer.encode(pipeline, forKey: .pipeline)
        }
    }
}

extension UpdatePipelineInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdatePipeline action.
public struct UpdatePipelineInput: Swift.Equatable {
    /// The name of the pipeline to be updated.
    /// This member is required.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init (
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.pipeline = pipeline
    }
}

struct UpdatePipelineInputBody: Swift.Equatable {
    let pipeline: CodePipelineClientTypes.PipelineDeclaration?
}

extension UpdatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineDeclaration.self, forKey: .pipeline)
        pipeline = pipelineDecoded
    }
}

extension UpdatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidActionDeclarationException" : self = .invalidActionDeclarationException(try InvalidActionDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlockerDeclarationException" : self = .invalidBlockerDeclarationException(try InvalidBlockerDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStageDeclarationException" : self = .invalidStageDeclarationException(try InvalidStageDeclarationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStructureException" : self = .invalidStructureException(try InvalidStructureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdatePipelineOutputError: Swift.Error, Swift.Equatable {
    case invalidActionDeclarationException(InvalidActionDeclarationException)
    case invalidBlockerDeclarationException(InvalidBlockerDeclarationException)
    case invalidStageDeclarationException(InvalidStageDeclarationException)
    case invalidStructureException(InvalidStructureException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipeline = output.pipeline
        } else {
            self.pipeline = nil
        }
    }
}

/// Represents the output of an UpdatePipeline action.
public struct UpdatePipelineOutputResponse: Swift.Equatable {
    /// The structure of the updated pipeline.
    public var pipeline: CodePipelineClientTypes.PipelineDeclaration?

    public init (
        pipeline: CodePipelineClientTypes.PipelineDeclaration? = nil
    )
    {
        self.pipeline = pipeline
    }
}

struct UpdatePipelineOutputResponseBody: Swift.Equatable {
    let pipeline: CodePipelineClientTypes.PipelineDeclaration?
}

extension UpdatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipeline
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineDeclaration.self, forKey: .pipeline)
        pipeline = pipelineDecoded
    }
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The validation was specified in an invalid format.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message provided to the user in the event of an exception.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodePipelineClientTypes.WebhookAuthConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedIPRange = "AllowedIPRange"
        case secretToken = "SecretToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedIPRange = self.allowedIPRange {
            try encodeContainer.encode(allowedIPRange, forKey: .allowedIPRange)
        }
        if let secretToken = self.secretToken {
            try encodeContainer.encode(secretToken, forKey: .secretToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedIPRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedIPRange)
        allowedIPRange = allowedIPRangeDecoded
        let secretTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretToken)
        secretToken = secretTokenDecoded
    }
}

extension CodePipelineClientTypes {
    /// The authentication applied to incoming webhook trigger requests.
    public struct WebhookAuthConfiguration: Swift.Equatable {
        /// The property used to configure acceptance of webhooks in an IP address range. For IP, only the AllowedIPRange property must be set. This property must be set to a valid CIDR range.
        public var allowedIPRange: Swift.String?
        /// The property used to configure GitHub authentication. For GITHUB_HMAC, only the SecretToken property must be set.
        public var secretToken: Swift.String?

        public init (
            allowedIPRange: Swift.String? = nil,
            secretToken: Swift.String? = nil
        )
        {
            self.allowedIPRange = allowedIPRange
            self.secretToken = secretToken
        }
    }

}

extension CodePipelineClientTypes {
    public enum WebhookAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case githubHmac
        case ip
        case unauthenticated
        case sdkUnknown(Swift.String)

        public static var allCases: [WebhookAuthenticationType] {
            return [
                .githubHmac,
                .ip,
                .unauthenticated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .githubHmac: return "GITHUB_HMAC"
            case .ip: return "IP"
            case .unauthenticated: return "UNAUTHENTICATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WebhookAuthenticationType(rawValue: rawValue) ?? WebhookAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension CodePipelineClientTypes.WebhookDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authentication
        case authenticationConfiguration
        case filters
        case name
        case targetAction
        case targetPipeline
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authentication = self.authentication {
            try encodeContainer.encode(authentication.rawValue, forKey: .authentication)
        }
        if let authenticationConfiguration = self.authenticationConfiguration {
            try encodeContainer.encode(authenticationConfiguration, forKey: .authenticationConfiguration)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for webhookfilterrule0 in filters {
                try filtersContainer.encode(webhookfilterrule0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetAction = self.targetAction {
            try encodeContainer.encode(targetAction, forKey: .targetAction)
        }
        if let targetPipeline = self.targetPipeline {
            try encodeContainer.encode(targetPipeline, forKey: .targetPipeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let targetPipelineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPipeline)
        targetPipeline = targetPipelineDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let filtersContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.WebhookFilterRule?].self, forKey: .filters)
        var filtersDecoded0:[CodePipelineClientTypes.WebhookFilterRule]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [CodePipelineClientTypes.WebhookFilterRule]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let authenticationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookAuthenticationType.self, forKey: .authentication)
        authentication = authenticationDecoded
        let authenticationConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookAuthConfiguration.self, forKey: .authenticationConfiguration)
        authenticationConfiguration = authenticationConfigurationDecoded
    }
}

extension CodePipelineClientTypes {
    /// Represents information about a webhook and its definition.
    public struct WebhookDefinition: Swift.Equatable {
        /// Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED.
        ///
        /// * For information about the authentication scheme implemented by GITHUB_HMAC, see [Securing your webhooks](https://developer.github.com/webhooks/securing/) on the GitHub Developer website.
        ///
        /// * IP rejects webhooks trigger requests unless they originate from an IP address in the IP range whitelisted in the authentication configuration.
        ///
        /// * UNAUTHENTICATED accepts all webhook trigger requests regardless of origin.
        /// This member is required.
        public var authentication: CodePipelineClientTypes.WebhookAuthenticationType?
        /// Properties that configure the authentication applied to incoming webhook trigger requests. The required properties depend on the authentication type. For GITHUB_HMAC, only the SecretToken property must be set. For IP, only the AllowedIPRange property must be set to a valid CIDR range. For UNAUTHENTICATED, no properties can be set.
        /// This member is required.
        public var authenticationConfiguration: CodePipelineClientTypes.WebhookAuthConfiguration?
        /// A list of rules applied to the body/payload sent in the POST request to a webhook URL. All defined rules must pass for the request to be accepted and the pipeline started.
        /// This member is required.
        public var filters: [CodePipelineClientTypes.WebhookFilterRule]?
        /// The name of the webhook.
        /// This member is required.
        public var name: Swift.String?
        /// The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline.
        /// This member is required.
        public var targetAction: Swift.String?
        /// The name of the pipeline you want to connect to the webhook.
        /// This member is required.
        public var targetPipeline: Swift.String?

        public init (
            authentication: CodePipelineClientTypes.WebhookAuthenticationType? = nil,
            authenticationConfiguration: CodePipelineClientTypes.WebhookAuthConfiguration? = nil,
            filters: [CodePipelineClientTypes.WebhookFilterRule]? = nil,
            name: Swift.String? = nil,
            targetAction: Swift.String? = nil,
            targetPipeline: Swift.String? = nil
        )
        {
            self.authentication = authentication
            self.authenticationConfiguration = authenticationConfiguration
            self.filters = filters
            self.name = name
            self.targetAction = targetAction
            self.targetPipeline = targetPipeline
        }
    }

}

extension CodePipelineClientTypes.WebhookFilterRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonPath
        case matchEquals
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonPath = self.jsonPath {
            try encodeContainer.encode(jsonPath, forKey: .jsonPath)
        }
        if let matchEquals = self.matchEquals {
            try encodeContainer.encode(matchEquals, forKey: .matchEquals)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jsonPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonPath)
        jsonPath = jsonPathDecoded
        let matchEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .matchEquals)
        matchEquals = matchEqualsDecoded
    }
}

extension CodePipelineClientTypes {
    /// The event criteria that specify when a webhook notification is sent to your URL.
    public struct WebhookFilterRule: Swift.Equatable {
        /// A JsonPath expression that is applied to the body/payload of the webhook. The value selected by the JsonPath expression must match the value specified in the MatchEquals field. Otherwise, the request is ignored. For more information, see [Java JsonPath implementation](https://github.com/json-path/JsonPath) in GitHub.
        /// This member is required.
        public var jsonPath: Swift.String?
        /// The value selected by the JsonPath expression must match what is supplied in the MatchEquals field. Otherwise, the request is ignored. Properties from the target action configuration can be included as placeholders in this value by surrounding the action configuration key with curly brackets. For example, if the value supplied here is "refs/heads/{Branch}" and the target action has an action configuration property called "Branch" with a value of "master", the MatchEquals value is evaluated as "refs/heads/master". For a list of action configuration properties for built-in action types, see [Pipeline Structure Reference Action Requirements](https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements).
        public var matchEquals: Swift.String?

        public init (
            jsonPath: Swift.String? = nil,
            matchEquals: Swift.String? = nil
        )
        {
            self.jsonPath = jsonPath
            self.matchEquals = matchEquals
        }
    }

}

extension WebhookNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified webhook was entered in an invalid format or cannot be found.
public struct WebhookNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client

    public init () { }
}
