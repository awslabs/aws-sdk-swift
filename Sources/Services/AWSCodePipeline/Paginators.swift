// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClient {
    /// Paginate over `[ListActionExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListActionExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListActionExecutionsOutputResponse`
    public func listActionExecutionsPaginated(input: ListActionExecutionsInput) -> ClientRuntime.PaginatorSequence<ListActionExecutionsInput, ListActionExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListActionExecutionsInput, ListActionExecutionsOutputResponse>(input: input, inputKey: \ListActionExecutionsInput.nextToken, outputKey: \ListActionExecutionsOutputResponse.nextToken, paginationFunction: self.listActionExecutions(input:))
    }
}

extension ListActionExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListActionExecutionsInput {
        return ListActionExecutionsInput(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            pipelineName: self.pipelineName
        )}
}

extension PaginatorSequence where Input == ListActionExecutionsInput, Output == ListActionExecutionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listActionExecutionsPaginated`
    /// to access the nested member `[CodePipelineClientTypes.ActionExecutionDetail]`
    /// - Returns: `[CodePipelineClientTypes.ActionExecutionDetail]`
    public func actionExecutionDetails() async throws -> [CodePipelineClientTypes.ActionExecutionDetail] {
        return try await self.asyncCompactMap { item in item.actionExecutionDetails }
    }
}
extension CodePipelineClient {
    /// Paginate over `[ListActionTypesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListActionTypesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListActionTypesOutputResponse`
    public func listActionTypesPaginated(input: ListActionTypesInput) -> ClientRuntime.PaginatorSequence<ListActionTypesInput, ListActionTypesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListActionTypesInput, ListActionTypesOutputResponse>(input: input, inputKey: \ListActionTypesInput.nextToken, outputKey: \ListActionTypesOutputResponse.nextToken, paginationFunction: self.listActionTypes(input:))
    }
}

extension ListActionTypesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListActionTypesInput {
        return ListActionTypesInput(
            actionOwnerFilter: self.actionOwnerFilter,
            nextToken: token,
            regionFilter: self.regionFilter
        )}
}

extension PaginatorSequence where Input == ListActionTypesInput, Output == ListActionTypesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listActionTypesPaginated`
    /// to access the nested member `[CodePipelineClientTypes.ActionType]`
    /// - Returns: `[CodePipelineClientTypes.ActionType]`
    public func actionTypes() async throws -> [CodePipelineClientTypes.ActionType] {
        return try await self.asyncCompactMap { item in item.actionTypes }
    }
}
extension CodePipelineClient {
    /// Paginate over `[ListPipelineExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPipelineExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPipelineExecutionsOutputResponse`
    public func listPipelineExecutionsPaginated(input: ListPipelineExecutionsInput) -> ClientRuntime.PaginatorSequence<ListPipelineExecutionsInput, ListPipelineExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPipelineExecutionsInput, ListPipelineExecutionsOutputResponse>(input: input, inputKey: \ListPipelineExecutionsInput.nextToken, outputKey: \ListPipelineExecutionsOutputResponse.nextToken, paginationFunction: self.listPipelineExecutions(input:))
    }
}

extension ListPipelineExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPipelineExecutionsInput {
        return ListPipelineExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            pipelineName: self.pipelineName
        )}
}

extension PaginatorSequence where Input == ListPipelineExecutionsInput, Output == ListPipelineExecutionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listPipelineExecutionsPaginated`
    /// to access the nested member `[CodePipelineClientTypes.PipelineExecutionSummary]`
    /// - Returns: `[CodePipelineClientTypes.PipelineExecutionSummary]`
    public func pipelineExecutionSummaries() async throws -> [CodePipelineClientTypes.PipelineExecutionSummary] {
        return try await self.asyncCompactMap { item in item.pipelineExecutionSummaries }
    }
}
extension CodePipelineClient {
    /// Paginate over `[ListPipelinesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListPipelinesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListPipelinesOutputResponse`
    public func listPipelinesPaginated(input: ListPipelinesInput) -> ClientRuntime.PaginatorSequence<ListPipelinesInput, ListPipelinesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListPipelinesInput, ListPipelinesOutputResponse>(input: input, inputKey: \ListPipelinesInput.nextToken, outputKey: \ListPipelinesOutputResponse.nextToken, paginationFunction: self.listPipelines(input:))
    }
}

extension ListPipelinesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListPipelinesInput {
        return ListPipelinesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListPipelinesInput, Output == ListPipelinesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listPipelinesPaginated`
    /// to access the nested member `[CodePipelineClientTypes.PipelineSummary]`
    /// - Returns: `[CodePipelineClientTypes.PipelineSummary]`
    public func pipelines() async throws -> [CodePipelineClientTypes.PipelineSummary] {
        return try await self.asyncCompactMap { item in item.pipelines }
    }
}
extension CodePipelineClient {
    /// Paginate over `[ListTagsForResourceOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutputResponse`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutputResponse>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutputResponse.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[CodePipelineClientTypes.Tag]`
    /// - Returns: `[CodePipelineClientTypes.Tag]`
    public func tags() async throws -> [CodePipelineClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension CodePipelineClient {
    /// Paginate over `[ListWebhooksOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWebhooksInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWebhooksOutputResponse`
    public func listWebhooksPaginated(input: ListWebhooksInput) -> ClientRuntime.PaginatorSequence<ListWebhooksInput, ListWebhooksOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWebhooksInput, ListWebhooksOutputResponse>(input: input, inputKey: \ListWebhooksInput.nextToken, outputKey: \ListWebhooksOutputResponse.nextToken, paginationFunction: self.listWebhooks(input:))
    }
}

extension ListWebhooksInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWebhooksInput {
        return ListWebhooksInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListWebhooksInput, Output == ListWebhooksOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listWebhooksPaginated`
    /// to access the nested member `[CodePipelineClientTypes.ListWebhookItem]`
    /// - Returns: `[CodePipelineClientTypes.ListWebhookItem]`
    public func webhooks() async throws -> [CodePipelineClientTypes.ListWebhookItem] {
        return try await self.asyncCompactMap { item in item.webhooks }
    }
}
