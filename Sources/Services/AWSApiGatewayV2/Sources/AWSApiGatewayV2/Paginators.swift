//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension ApiGatewayV2Client {
    /// Paginate over `[ListRoutingRulesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListRoutingRulesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListRoutingRulesOutput`
    public func listRoutingRulesPaginated(input: ListRoutingRulesInput) -> ClientRuntime.PaginatorSequence<ListRoutingRulesInput, ListRoutingRulesOutput> {
        return ClientRuntime.PaginatorSequence<ListRoutingRulesInput, ListRoutingRulesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listRoutingRules(input:))
    }
}

extension ListRoutingRulesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRoutingRulesInput {
        return ListRoutingRulesInput(
            domainName: self.domainName,
            domainNameId: self.domainNameId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListRoutingRulesInput, OperationStackOutput == ListRoutingRulesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listRoutingRulesPaginated`
    /// to access the nested member `[ApiGatewayV2ClientTypes.RoutingRule]`
    /// - Returns: `[ApiGatewayV2ClientTypes.RoutingRule]`
    public func routingRules() async throws -> [ApiGatewayV2ClientTypes.RoutingRule] {
        return try await self.asyncCompactMap { item in item.routingRules }
    }
}
