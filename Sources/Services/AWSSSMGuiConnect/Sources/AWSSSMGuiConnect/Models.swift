//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct GetConnectionRecordingPreferencesInput: Swift.Sendable {

    public init() { }
}

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// An error occurred due to a conflict.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

extension SSMGuiConnectClientTypes {

    /// The S3 bucket where RDP connection recordings are stored.
    public struct S3Bucket: Swift.Sendable {
        /// The name of the S3 bucket where RDP connection recordings are stored.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The Amazon Web Services account number that owns the S3 bucket.
        /// This member is required.
        public var bucketOwner: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            bucketOwner: Swift.String? = nil
        ) {
            self.bucketName = bucketName
            self.bucketOwner = bucketOwner
        }
    }
}

extension SSMGuiConnectClientTypes {

    /// Determines where recordings of RDP connections are stored.
    public struct RecordingDestinations: Swift.Sendable {
        /// The S3 bucket where RDP connection recordings are stored.
        /// This member is required.
        public var s3Buckets: [SSMGuiConnectClientTypes.S3Bucket]?

        public init(
            s3Buckets: [SSMGuiConnectClientTypes.S3Bucket]? = nil
        ) {
            self.s3Buckets = s3Buckets
        }
    }
}

extension SSMGuiConnectClientTypes {

    /// The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.
    public struct ConnectionRecordingPreferences: Swift.Sendable {
        /// The ARN of a KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same Amazon Web Services Region as the node you start an RDP connection to.
        /// This member is required.
        public var kmsKeyArn: Swift.String?
        /// Determines where recordings of RDP connections are stored.
        /// This member is required.
        public var recordingDestinations: SSMGuiConnectClientTypes.RecordingDestinations?

        public init(
            kmsKeyArn: Swift.String? = nil,
            recordingDestinations: SSMGuiConnectClientTypes.RecordingDestinations? = nil
        ) {
            self.kmsKeyArn = kmsKeyArn
            self.recordingDestinations = recordingDestinations
        }
    }
}

/// The request processing has failed because of an unknown error, exception or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// Your request exceeds a service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

public struct DeleteConnectionRecordingPreferencesInput: Swift.Sendable {
    /// User-provided idempotency token.
    public var clientToken: Swift.String?

    public init(
        clientToken: Swift.String? = nil
    ) {
        self.clientToken = clientToken
    }
}

public struct DeleteConnectionRecordingPreferencesOutput: Swift.Sendable {
    /// Service-provided idempotency token.
    public var clientToken: Swift.String?

    public init(
        clientToken: Swift.String? = nil
    ) {
        self.clientToken = clientToken
    }
}

public struct GetConnectionRecordingPreferencesOutput: Swift.Sendable {
    /// Service-provided idempotency token.
    public var clientToken: Swift.String?
    /// The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.
    public var connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences?

    public init(
        clientToken: Swift.String? = nil,
        connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences? = nil
    ) {
        self.clientToken = clientToken
        self.connectionRecordingPreferences = connectionRecordingPreferences
    }
}

public struct UpdateConnectionRecordingPreferencesInput: Swift.Sendable {
    /// User-provided idempotency token.
    public var clientToken: Swift.String?
    /// The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.
    /// This member is required.
    public var connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences?

    public init(
        clientToken: Swift.String? = nil,
        connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences? = nil
    ) {
        self.clientToken = clientToken
        self.connectionRecordingPreferences = connectionRecordingPreferences
    }
}

public struct UpdateConnectionRecordingPreferencesOutput: Swift.Sendable {
    /// Service-provided idempotency token.
    public var clientToken: Swift.String?
    /// The set of preferences used for recording RDP connections in the requesting Amazon Web Services account and Amazon Web Services Region. This includes details such as which S3 bucket recordings are stored in.
    public var connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences?

    public init(
        clientToken: Swift.String? = nil,
        connectionRecordingPreferences: SSMGuiConnectClientTypes.ConnectionRecordingPreferences? = nil
    ) {
        self.clientToken = clientToken
        self.connectionRecordingPreferences = connectionRecordingPreferences
    }
}

extension DeleteConnectionRecordingPreferencesInput {

    static func urlPathProvider(_ value: DeleteConnectionRecordingPreferencesInput) -> Swift.String? {
        return "/DeleteConnectionRecordingPreferences"
    }
}

extension GetConnectionRecordingPreferencesInput {

    static func urlPathProvider(_ value: GetConnectionRecordingPreferencesInput) -> Swift.String? {
        return "/GetConnectionRecordingPreferences"
    }
}

extension UpdateConnectionRecordingPreferencesInput {

    static func urlPathProvider(_ value: UpdateConnectionRecordingPreferencesInput) -> Swift.String? {
        return "/UpdateConnectionRecordingPreferences"
    }
}

extension DeleteConnectionRecordingPreferencesInput {

    static func write(value: DeleteConnectionRecordingPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
    }
}

extension UpdateConnectionRecordingPreferencesInput {

    static func write(value: UpdateConnectionRecordingPreferencesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ConnectionRecordingPreferences"].write(value.connectionRecordingPreferences, with: SSMGuiConnectClientTypes.ConnectionRecordingPreferences.write(value:to:))
    }
}

extension DeleteConnectionRecordingPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConnectionRecordingPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteConnectionRecordingPreferencesOutput()
        value.clientToken = try reader["ClientToken"].readIfPresent()
        return value
    }
}

extension GetConnectionRecordingPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConnectionRecordingPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConnectionRecordingPreferencesOutput()
        value.clientToken = try reader["ClientToken"].readIfPresent()
        value.connectionRecordingPreferences = try reader["ConnectionRecordingPreferences"].readIfPresent(with: SSMGuiConnectClientTypes.ConnectionRecordingPreferences.read(from:))
        return value
    }
}

extension UpdateConnectionRecordingPreferencesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateConnectionRecordingPreferencesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateConnectionRecordingPreferencesOutput()
        value.clientToken = try reader["ClientToken"].readIfPresent()
        value.connectionRecordingPreferences = try reader["ConnectionRecordingPreferences"].readIfPresent(with: SSMGuiConnectClientTypes.ConnectionRecordingPreferences.read(from:))
        return value
    }
}

enum DeleteConnectionRecordingPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConnectionRecordingPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateConnectionRecordingPreferencesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SSMGuiConnectClientTypes.ConnectionRecordingPreferences {

    static func write(value: SSMGuiConnectClientTypes.ConnectionRecordingPreferences?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KMSKeyArn"].write(value.kmsKeyArn)
        try writer["RecordingDestinations"].write(value.recordingDestinations, with: SSMGuiConnectClientTypes.RecordingDestinations.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SSMGuiConnectClientTypes.ConnectionRecordingPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMGuiConnectClientTypes.ConnectionRecordingPreferences()
        value.recordingDestinations = try reader["RecordingDestinations"].readIfPresent(with: SSMGuiConnectClientTypes.RecordingDestinations.read(from:))
        value.kmsKeyArn = try reader["KMSKeyArn"].readIfPresent() ?? ""
        return value
    }
}

extension SSMGuiConnectClientTypes.RecordingDestinations {

    static func write(value: SSMGuiConnectClientTypes.RecordingDestinations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Buckets"].writeList(value.s3Buckets, memberWritingClosure: SSMGuiConnectClientTypes.S3Bucket.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SSMGuiConnectClientTypes.RecordingDestinations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMGuiConnectClientTypes.RecordingDestinations()
        value.s3Buckets = try reader["S3Buckets"].readListIfPresent(memberReadingClosure: SSMGuiConnectClientTypes.S3Bucket.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SSMGuiConnectClientTypes.S3Bucket {

    static func write(value: SSMGuiConnectClientTypes.S3Bucket?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketName"].write(value.bucketName)
        try writer["BucketOwner"].write(value.bucketOwner)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SSMGuiConnectClientTypes.S3Bucket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SSMGuiConnectClientTypes.S3Bucket()
        value.bucketOwner = try reader["BucketOwner"].readIfPresent() ?? ""
        value.bucketName = try reader["BucketName"].readIfPresent() ?? ""
        return value
    }
}

public enum SSMGuiConnectClientTypes {}
