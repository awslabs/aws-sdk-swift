// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AddTagsToOnPremisesInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancename0 in instanceNames {
                try instanceNamesContainer.encode(instancename0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension AddTagsToOnPremisesInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of, and adds tags to, an on-premises instance operation.
public struct AddTagsToOnPremisesInstancesInput: Swift.Equatable {
    /// The names of the on-premises instances to which to add tags.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init (
        instanceNames: [Swift.String]? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

struct AddTagsToOnPremisesInstancesInputBody: Swift.Equatable {
    let tags: [CodeDeployClientTypes.Tag]?
    let instanceNames: [Swift.String]?
}

extension AddTagsToOnPremisesInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension AddTagsToOnPremisesInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsToOnPremisesInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceLimitExceededException" : self = .instanceLimitExceededException(try InstanceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddTagsToOnPremisesInstancesOutputError: Swift.Error, Swift.Equatable {
    case instanceLimitExceededException(InstanceLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case invalidTagException(InvalidTagException)
    case tagLimitExceededException(TagLimitExceededException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToOnPremisesInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsToOnPremisesInstancesOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodeDeployClientTypes.Alarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an alarm.
    public struct Alarm: Swift.Equatable {
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodeDeployClientTypes.AlarmConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms
        case enabled
        case ignorePollAlarmFailure
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarm0 in alarms {
                try alarmsContainer.encode(alarm0)
            }
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if ignorePollAlarmFailure != false {
            try encodeContainer.encode(ignorePollAlarmFailure, forKey: .ignorePollAlarmFailure)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let ignorePollAlarmFailureDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignorePollAlarmFailure) ?? false
        ignorePollAlarmFailure = ignorePollAlarmFailureDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[CodeDeployClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [CodeDeployClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about alarms associated with a deployment or deployment group.
    public struct AlarmConfiguration: Swift.Equatable {
        /// A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.
        public var alarms: [CodeDeployClientTypes.Alarm]?
        /// Indicates whether the alarm configuration is enabled.
        public var enabled: Swift.Bool
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.
        ///
        /// * true: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.
        ///
        /// * false: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.
        public var ignorePollAlarmFailure: Swift.Bool

        public init (
            alarms: [CodeDeployClientTypes.Alarm]? = nil,
            enabled: Swift.Bool = false,
            ignorePollAlarmFailure: Swift.Bool = false
        )
        {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }
    }

}

extension AlarmsLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AlarmsLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of alarms for a deployment group (10) was exceeded.
public struct AlarmsLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlarmsLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AlarmsLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.AppSpecContent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content
        case sha256
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let sha256 = self.sha256 {
            try encodeContainer.encode(sha256, forKey: .sha256)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let sha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sha256)
        sha256 = sha256Decoded
    }
}

extension CodeDeployClientTypes {
    /// A revision for an Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated RawString data type.
    public struct AppSpecContent: Swift.Equatable {
        /// The YAML-formatted or JSON-formatted revision string. For an Lambda deployment, the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version. For an Amazon ECS deployment, the content includes the task name, information about the load balancer that serves traffic to the container, and more. For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as BeforeInstall, during a deployment.
        public var content: Swift.String?
        /// The SHA256 hash value of the revision content.
        public var sha256: Swift.String?

        public init (
            content: Swift.String? = nil,
            sha256: Swift.String? = nil
        )
        {
            self.content = content
            self.sha256 = sha256
        }
    }

}

extension ApplicationAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApplicationAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An application with the specified name with the IAM user or Amazon Web Services account already exists.
public struct ApplicationAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ApplicationAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApplicationDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The application does not exist with the IAM user or Amazon Web Services account.
public struct ApplicationDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ApplicationDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.ApplicationInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId
        case applicationName
        case computePlatform
        case createTime
        case gitHubAccountName
        case linkedToGitHub
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let gitHubAccountName = self.gitHubAccountName {
            try encodeContainer.encode(gitHubAccountName, forKey: .gitHubAccountName)
        }
        if linkedToGitHub != false {
            try encodeContainer.encode(linkedToGitHub, forKey: .linkedToGitHub)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let linkedToGitHubDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .linkedToGitHub) ?? false
        linkedToGitHub = linkedToGitHubDecoded
        let gitHubAccountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gitHubAccountName)
        gitHubAccountName = gitHubAccountNameDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an application.
    public struct ApplicationInfo: Swift.Equatable {
        /// The application ID.
        public var applicationId: Swift.String?
        /// The application name.
        public var applicationName: Swift.String?
        /// The destination platform type for deployment of the application (Lambda or Server).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The time at which the application was created.
        public var createTime: ClientRuntime.Date?
        /// The name for a connection to a GitHub account.
        public var gitHubAccountName: Swift.String?
        /// True if the user has authenticated with GitHub for the specified application. Otherwise, false.
        public var linkedToGitHub: Swift.Bool

        public init (
            applicationId: Swift.String? = nil,
            applicationName: Swift.String? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: ClientRuntime.Date? = nil,
            gitHubAccountName: Swift.String? = nil,
            linkedToGitHub: Swift.Bool = false
        )
        {
            self.applicationId = applicationId
            self.applicationName = applicationName
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.gitHubAccountName = gitHubAccountName
            self.linkedToGitHub = linkedToGitHub
        }
    }

}

extension ApplicationLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApplicationLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// More applications were attempted to be created than are allowed.
public struct ApplicationLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ApplicationLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ApplicationNameRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ApplicationNameRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The minimum number of required application names was not specified.
public struct ApplicationNameRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ApplicationNameRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ApplicationNameRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum ApplicationRevisionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case firstusedtime
        case lastusedtime
        case registertime
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationRevisionSortBy] {
            return [
                .firstusedtime,
                .lastusedtime,
                .registertime,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .firstusedtime: return "firstUsedTime"
            case .lastusedtime: return "lastUsedTime"
            case .registertime: return "registerTime"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ApplicationRevisionSortBy(rawValue: rawValue) ?? ApplicationRevisionSortBy.sdkUnknown(rawValue)
        }
    }
}

extension ArnNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ArnNotSupportedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified ARN is not supported. For example, it might be an ARN for a resource that is not expected.
public struct ArnNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ArnNotSupportedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ArnNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.AutoRollbackConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case events
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for autorollbackevent0 in events {
                try eventsContainer.encode(autorollbackevent0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let eventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.AutoRollbackEvent?].self, forKey: .events)
        var eventsDecoded0:[CodeDeployClientTypes.AutoRollbackEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [CodeDeployClientTypes.AutoRollbackEvent]()
            for enum0 in eventsContainer {
                if let enum0 = enum0 {
                    eventsDecoded0?.append(enum0)
                }
            }
        }
        events = eventsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
    public struct AutoRollbackConfiguration: Swift.Equatable {
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        public var enabled: Swift.Bool
        /// The event type or types that trigger a rollback.
        public var events: [CodeDeployClientTypes.AutoRollbackEvent]?

        public init (
            enabled: Swift.Bool = false,
            events: [CodeDeployClientTypes.AutoRollbackEvent]? = nil
        )
        {
            self.enabled = enabled
            self.events = events
        }
    }

}

extension CodeDeployClientTypes {
    public enum AutoRollbackEvent: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deploymentFailure
        case deploymentStopOnAlarm
        case deploymentStopOnRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoRollbackEvent] {
            return [
                .deploymentFailure,
                .deploymentStopOnAlarm,
                .deploymentStopOnRequest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deploymentFailure: return "DEPLOYMENT_FAILURE"
            case .deploymentStopOnAlarm: return "DEPLOYMENT_STOP_ON_ALARM"
            case .deploymentStopOnRequest: return "DEPLOYMENT_STOP_ON_REQUEST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoRollbackEvent(rawValue: rawValue) ?? AutoRollbackEvent.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.AutoScalingGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hook
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hook = self.hook {
            try encodeContainer.encode(hook, forKey: .hook)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let hookDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hook)
        hook = hookDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Equatable {
        /// An Auto Scaling lifecycle event hook name.
        public var hook: Swift.String?
        /// The Auto Scaling group name.
        public var name: Swift.String?

        public init (
            hook: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.hook = hook
            self.name = name
        }
    }

}

extension BatchGetApplicationRevisionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case revisions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let revisions = revisions {
            var revisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .revisions)
            for revisionlocation0 in revisions {
                try revisionsContainer.encode(revisionlocation0)
            }
        }
    }
}

extension BatchGetApplicationRevisionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetApplicationRevisions operation.
public struct BatchGetApplicationRevisionsInput: Swift.Equatable {
    /// The name of an CodeDeploy application about which to get revision information.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An array of RevisionLocation objects that specify information to get about the application revisions, including type and location. The maximum number of RevisionLocation objects you can specify is 25.
    /// This member is required.
    public var revisions: [CodeDeployClientTypes.RevisionLocation]?

    public init (
        applicationName: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionLocation]? = nil
    )
    {
        self.applicationName = applicationName
        self.revisions = revisions
    }
}

struct BatchGetApplicationRevisionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let revisions: [CodeDeployClientTypes.RevisionLocation]?
}

extension BatchGetApplicationRevisionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case revisions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.RevisionLocation?].self, forKey: .revisions)
        var revisionsDecoded0:[CodeDeployClientTypes.RevisionLocation]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [CodeDeployClientTypes.RevisionLocation]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
    }
}

extension BatchGetApplicationRevisionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetApplicationRevisionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetApplicationRevisionsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetApplicationRevisionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetApplicationRevisionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.errorMessage = output.errorMessage
            self.revisions = output.revisions
        } else {
            self.applicationName = nil
            self.errorMessage = nil
            self.revisions = nil
        }
    }
}

/// Represents the output of a BatchGetApplicationRevisions operation.
public struct BatchGetApplicationRevisionsOutputResponse: Swift.Equatable {
    /// The name of the application that corresponds to the revisions.
    public var applicationName: Swift.String?
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?
    /// Additional information about the revisions, including the type and location.
    public var revisions: [CodeDeployClientTypes.RevisionInfo]?

    public init (
        applicationName: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionInfo]? = nil
    )
    {
        self.applicationName = applicationName
        self.errorMessage = errorMessage
        self.revisions = revisions
    }
}

struct BatchGetApplicationRevisionsOutputResponseBody: Swift.Equatable {
    let applicationName: Swift.String?
    let errorMessage: Swift.String?
    let revisions: [CodeDeployClientTypes.RevisionInfo]?
}

extension BatchGetApplicationRevisionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case errorMessage
        case revisions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let revisionsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.RevisionInfo?].self, forKey: .revisions)
        var revisionsDecoded0:[CodeDeployClientTypes.RevisionInfo]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [CodeDeployClientTypes.RevisionInfo]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
    }
}

extension BatchGetApplicationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationNames = applicationNames {
            var applicationNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applicationNames)
            for applicationname0 in applicationNames {
                try applicationNamesContainer.encode(applicationname0)
            }
        }
    }
}

extension BatchGetApplicationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetApplications operation.
public struct BatchGetApplicationsInput: Swift.Equatable {
    /// A list of application names separated by spaces. The maximum number of application names you can specify is 100.
    /// This member is required.
    public var applicationNames: [Swift.String]?

    public init (
        applicationNames: [Swift.String]? = nil
    )
    {
        self.applicationNames = applicationNames
    }
}

struct BatchGetApplicationsInputBody: Swift.Equatable {
    let applicationNames: [Swift.String]?
}

extension BatchGetApplicationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .applicationNames)
        var applicationNamesDecoded0:[Swift.String]? = nil
        if let applicationNamesContainer = applicationNamesContainer {
            applicationNamesDecoded0 = [Swift.String]()
            for string0 in applicationNamesContainer {
                if let string0 = string0 {
                    applicationNamesDecoded0?.append(string0)
                }
            }
        }
        applicationNames = applicationNamesDecoded0
    }
}

extension BatchGetApplicationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetApplicationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetApplicationsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetApplicationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetApplicationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationsInfo = output.applicationsInfo
        } else {
            self.applicationsInfo = nil
        }
    }
}

/// Represents the output of a BatchGetApplications operation.
public struct BatchGetApplicationsOutputResponse: Swift.Equatable {
    /// Information about the applications.
    public var applicationsInfo: [CodeDeployClientTypes.ApplicationInfo]?

    public init (
        applicationsInfo: [CodeDeployClientTypes.ApplicationInfo]? = nil
    )
    {
        self.applicationsInfo = applicationsInfo
    }
}

struct BatchGetApplicationsOutputResponseBody: Swift.Equatable {
    let applicationsInfo: [CodeDeployClientTypes.ApplicationInfo]?
}

extension BatchGetApplicationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationsInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationsInfoContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ApplicationInfo?].self, forKey: .applicationsInfo)
        var applicationsInfoDecoded0:[CodeDeployClientTypes.ApplicationInfo]? = nil
        if let applicationsInfoContainer = applicationsInfoContainer {
            applicationsInfoDecoded0 = [CodeDeployClientTypes.ApplicationInfo]()
            for structure0 in applicationsInfoContainer {
                if let structure0 = structure0 {
                    applicationsInfoDecoded0?.append(structure0)
                }
            }
        }
        applicationsInfo = applicationsInfoDecoded0
    }
}

extension BatchGetDeploymentGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupNames = deploymentGroupNames {
            var deploymentGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentGroupNames)
            for deploymentgroupname0 in deploymentGroupNames {
                try deploymentGroupNamesContainer.encode(deploymentgroupname0)
            }
        }
    }
}

extension BatchGetDeploymentGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetDeploymentGroups operation.
public struct BatchGetDeploymentGroupsInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the applicable IAM or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The names of the deployment groups.
    /// This member is required.
    public var deploymentGroupNames: [Swift.String]?

    public init (
        applicationName: Swift.String? = nil,
        deploymentGroupNames: [Swift.String]? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupNames = deploymentGroupNames
    }
}

struct BatchGetDeploymentGroupsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupNames: [Swift.String]?
}

extension BatchGetDeploymentGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentGroupNames)
        var deploymentGroupNamesDecoded0:[Swift.String]? = nil
        if let deploymentGroupNamesContainer = deploymentGroupNamesContainer {
            deploymentGroupNamesDecoded0 = [Swift.String]()
            for string0 in deploymentGroupNamesContainer {
                if let string0 = string0 {
                    deploymentGroupNamesDecoded0?.append(string0)
                }
            }
        }
        deploymentGroupNames = deploymentGroupNamesDecoded0
    }
}

extension BatchGetDeploymentGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetDeploymentGroupsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetDeploymentGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentGroupsInfo = output.deploymentGroupsInfo
            self.errorMessage = output.errorMessage
        } else {
            self.deploymentGroupsInfo = nil
            self.errorMessage = nil
        }
    }
}

/// Represents the output of a BatchGetDeploymentGroups operation.
public struct BatchGetDeploymentGroupsOutputResponse: Swift.Equatable {
    /// Information about the deployment groups.
    public var deploymentGroupsInfo: [CodeDeployClientTypes.DeploymentGroupInfo]?
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?

    public init (
        deploymentGroupsInfo: [CodeDeployClientTypes.DeploymentGroupInfo]? = nil,
        errorMessage: Swift.String? = nil
    )
    {
        self.deploymentGroupsInfo = deploymentGroupsInfo
        self.errorMessage = errorMessage
    }
}

struct BatchGetDeploymentGroupsOutputResponseBody: Swift.Equatable {
    let deploymentGroupsInfo: [CodeDeployClientTypes.DeploymentGroupInfo]?
    let errorMessage: Swift.String?
}

extension BatchGetDeploymentGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentGroupsInfo
        case errorMessage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupsInfoContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.DeploymentGroupInfo?].self, forKey: .deploymentGroupsInfo)
        var deploymentGroupsInfoDecoded0:[CodeDeployClientTypes.DeploymentGroupInfo]? = nil
        if let deploymentGroupsInfoContainer = deploymentGroupsInfoContainer {
            deploymentGroupsInfoDecoded0 = [CodeDeployClientTypes.DeploymentGroupInfo]()
            for structure0 in deploymentGroupsInfoContainer {
                if let structure0 = structure0 {
                    deploymentGroupsInfoDecoded0?.append(structure0)
                }
            }
        }
        deploymentGroupsInfo = deploymentGroupsInfoDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension BatchGetDeploymentInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for instanceid0 in instanceIds {
                try instanceIdsContainer.encode(instanceid0)
            }
        }
    }
}

extension BatchGetDeploymentInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetDeploymentInstances operation.
public struct BatchGetDeploymentInstancesInput: Swift.Equatable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique IDs of instances used in the deployment. The maximum number of instance IDs you can specify is 25.
    /// This member is required.
    public var instanceIds: [Swift.String]?

    public init (
        deploymentId: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceIds = instanceIds
    }
}

struct BatchGetDeploymentInstancesInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let instanceIds: [Swift.String]?
}

extension BatchGetDeploymentInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[Swift.String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [Swift.String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
    }
}

extension BatchGetDeploymentInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceIdRequiredException" : self = .instanceIdRequiredException(try InstanceIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetDeploymentInstancesOutputError: Swift.Error, Swift.Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case instanceIdRequiredException(InstanceIdRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetDeploymentInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errorMessage = output.errorMessage
            self.instancesSummary = output.instancesSummary
        } else {
            self.errorMessage = nil
            self.instancesSummary = nil
        }
    }
}

/// Represents the output of a BatchGetDeploymentInstances operation.
public struct BatchGetDeploymentInstancesOutputResponse: Swift.Equatable {
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?
    /// Information about the instance.
    public var instancesSummary: [CodeDeployClientTypes.InstanceSummary]?

    public init (
        errorMessage: Swift.String? = nil,
        instancesSummary: [CodeDeployClientTypes.InstanceSummary]? = nil
    )
    {
        self.errorMessage = errorMessage
        self.instancesSummary = instancesSummary
    }
}

struct BatchGetDeploymentInstancesOutputResponseBody: Swift.Equatable {
    let instancesSummary: [CodeDeployClientTypes.InstanceSummary]?
    let errorMessage: Swift.String?
}

extension BatchGetDeploymentInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage
        case instancesSummary
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesSummaryContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.InstanceSummary?].self, forKey: .instancesSummary)
        var instancesSummaryDecoded0:[CodeDeployClientTypes.InstanceSummary]? = nil
        if let instancesSummaryContainer = instancesSummaryContainer {
            instancesSummaryDecoded0 = [CodeDeployClientTypes.InstanceSummary]()
            for structure0 in instancesSummaryContainer {
                if let structure0 = structure0 {
                    instancesSummaryDecoded0?.append(structure0)
                }
            }
        }
        instancesSummary = instancesSummaryDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension BatchGetDeploymentTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case targetIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let targetIds = targetIds {
            var targetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetIds)
            for targetid0 in targetIds {
                try targetIdsContainer.encode(targetid0)
            }
        }
    }
}

extension BatchGetDeploymentTargetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct BatchGetDeploymentTargetsInput: Swift.Equatable {
    /// The unique ID of a deployment.
    public var deploymentId: Swift.String?
    /// The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats. The maximum number of deployment target IDs you can specify is 25.
    ///
    /// * For deployments that use the EC2/On-premises compute platform, the target IDs are Amazon EC2 or on-premises instances IDs, and their target type is instanceTarget.
    ///
    /// * For deployments that use the Lambda compute platform, the target IDs are the names of Lambda functions, and their target type is instanceTarget.
    ///
    /// * For deployments that use the Amazon ECS compute platform, the target IDs are pairs of Amazon ECS clusters and services specified using the format :. Their target type is ecsTarget.
    ///
    /// * For deployments that are deployed with CloudFormation, the target IDs are CloudFormation stack IDs. Their target type is cloudFormationTarget.
    public var targetIds: [Swift.String]?

    public init (
        deploymentId: Swift.String? = nil,
        targetIds: [Swift.String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetIds = targetIds
    }
}

struct BatchGetDeploymentTargetsInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let targetIds: [Swift.String]?
}

extension BatchGetDeploymentTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case targetIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetIds)
        var targetIdsDecoded0:[Swift.String]? = nil
        if let targetIdsContainer = targetIdsContainer {
            targetIdsDecoded0 = [Swift.String]()
            for string0 in targetIdsContainer {
                if let string0 = string0 {
                    targetIdsDecoded0?.append(string0)
                }
            }
        }
        targetIds = targetIdsDecoded0
    }
}

extension BatchGetDeploymentTargetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentTargetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetDoesNotExistException" : self = .deploymentTargetDoesNotExistException(try DeploymentTargetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetIdRequiredException" : self = .deploymentTargetIdRequiredException(try DeploymentTargetIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetListSizeExceededException" : self = .deploymentTargetListSizeExceededException(try DeploymentTargetListSizeExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceDoesNotExistException" : self = .instanceDoesNotExistException(try InstanceDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentTargetIdException" : self = .invalidDeploymentTargetIdException(try InvalidDeploymentTargetIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetDeploymentTargetsOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case deploymentTargetDoesNotExistException(DeploymentTargetDoesNotExistException)
    case deploymentTargetIdRequiredException(DeploymentTargetIdRequiredException)
    case deploymentTargetListSizeExceededException(DeploymentTargetListSizeExceededException)
    case instanceDoesNotExistException(InstanceDoesNotExistException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentTargetIdException(InvalidDeploymentTargetIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentTargetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetDeploymentTargetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentTargets = output.deploymentTargets
        } else {
            self.deploymentTargets = nil
        }
    }
}

public struct BatchGetDeploymentTargetsOutputResponse: Swift.Equatable {
    /// A list of target objects for a deployment. Each target object contains details about the target, such as its status and lifecycle events. The type of the target objects depends on the deployment' compute platform.
    ///
    /// * EC2/On-premises: Each target object is an Amazon EC2 or on-premises instance.
    ///
    /// * Lambda: The target object is a specific version of an Lambda function.
    ///
    /// * Amazon ECS: The target object is an Amazon ECS service.
    ///
    /// * CloudFormation: The target object is an CloudFormation blue/green deployment.
    public var deploymentTargets: [CodeDeployClientTypes.DeploymentTarget]?

    public init (
        deploymentTargets: [CodeDeployClientTypes.DeploymentTarget]? = nil
    )
    {
        self.deploymentTargets = deploymentTargets
    }
}

struct BatchGetDeploymentTargetsOutputResponseBody: Swift.Equatable {
    let deploymentTargets: [CodeDeployClientTypes.DeploymentTarget]?
}

extension BatchGetDeploymentTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentTargets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.DeploymentTarget?].self, forKey: .deploymentTargets)
        var deploymentTargetsDecoded0:[CodeDeployClientTypes.DeploymentTarget]? = nil
        if let deploymentTargetsContainer = deploymentTargetsContainer {
            deploymentTargetsDecoded0 = [CodeDeployClientTypes.DeploymentTarget]()
            for structure0 in deploymentTargetsContainer {
                if let structure0 = structure0 {
                    deploymentTargetsDecoded0?.append(structure0)
                }
            }
        }
        deploymentTargets = deploymentTargetsDecoded0
    }
}

extension BatchGetDeploymentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentIds = deploymentIds {
            var deploymentIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentIds)
            for deploymentid0 in deploymentIds {
                try deploymentIdsContainer.encode(deploymentid0)
            }
        }
    }
}

extension BatchGetDeploymentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetDeployments operation.
public struct BatchGetDeploymentsInput: Swift.Equatable {
    /// A list of deployment IDs, separated by spaces. The maximum number of deployment IDs you can specify is 25.
    /// This member is required.
    public var deploymentIds: [Swift.String]?

    public init (
        deploymentIds: [Swift.String]? = nil
    )
    {
        self.deploymentIds = deploymentIds
    }
}

struct BatchGetDeploymentsInputBody: Swift.Equatable {
    let deploymentIds: [Swift.String]?
}

extension BatchGetDeploymentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentIds)
        var deploymentIdsDecoded0:[Swift.String]? = nil
        if let deploymentIdsContainer = deploymentIdsContainer {
            deploymentIdsDecoded0 = [Swift.String]()
            for string0 in deploymentIdsContainer {
                if let string0 = string0 {
                    deploymentIdsDecoded0?.append(string0)
                }
            }
        }
        deploymentIds = deploymentIdsDecoded0
    }
}

extension BatchGetDeploymentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetDeploymentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetDeploymentsOutputError: Swift.Error, Swift.Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetDeploymentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentsInfo = output.deploymentsInfo
        } else {
            self.deploymentsInfo = nil
        }
    }
}

/// Represents the output of a BatchGetDeployments operation.
public struct BatchGetDeploymentsOutputResponse: Swift.Equatable {
    /// Information about the deployments.
    public var deploymentsInfo: [CodeDeployClientTypes.DeploymentInfo]?

    public init (
        deploymentsInfo: [CodeDeployClientTypes.DeploymentInfo]? = nil
    )
    {
        self.deploymentsInfo = deploymentsInfo
    }
}

struct BatchGetDeploymentsOutputResponseBody: Swift.Equatable {
    let deploymentsInfo: [CodeDeployClientTypes.DeploymentInfo]?
}

extension BatchGetDeploymentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentsInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsInfoContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.DeploymentInfo?].self, forKey: .deploymentsInfo)
        var deploymentsInfoDecoded0:[CodeDeployClientTypes.DeploymentInfo]? = nil
        if let deploymentsInfoContainer = deploymentsInfoContainer {
            deploymentsInfoDecoded0 = [CodeDeployClientTypes.DeploymentInfo]()
            for structure0 in deploymentsInfoContainer {
                if let structure0 = structure0 {
                    deploymentsInfoDecoded0?.append(structure0)
                }
            }
        }
        deploymentsInfo = deploymentsInfoDecoded0
    }
}

extension BatchGetOnPremisesInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancename0 in instanceNames {
                try instanceNamesContainer.encode(instancename0)
            }
        }
    }
}

extension BatchGetOnPremisesInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a BatchGetOnPremisesInstances operation.
public struct BatchGetOnPremisesInstancesInput: Swift.Equatable {
    /// The names of the on-premises instances about which to get information. The maximum number of instance names you can specify is 25.
    /// This member is required.
    public var instanceNames: [Swift.String]?

    public init (
        instanceNames: [Swift.String]? = nil
    )
    {
        self.instanceNames = instanceNames
    }
}

struct BatchGetOnPremisesInstancesInputBody: Swift.Equatable {
    let instanceNames: [Swift.String]?
}

extension BatchGetOnPremisesInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension BatchGetOnPremisesInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetOnPremisesInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BatchLimitExceededException" : self = .batchLimitExceededException(try BatchLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum BatchGetOnPremisesInstancesOutputError: Swift.Error, Swift.Equatable {
    case batchLimitExceededException(BatchLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetOnPremisesInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchGetOnPremisesInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceInfos = output.instanceInfos
        } else {
            self.instanceInfos = nil
        }
    }
}

/// Represents the output of a BatchGetOnPremisesInstances operation.
public struct BatchGetOnPremisesInstancesOutputResponse: Swift.Equatable {
    /// Information about the on-premises instances.
    public var instanceInfos: [CodeDeployClientTypes.InstanceInfo]?

    public init (
        instanceInfos: [CodeDeployClientTypes.InstanceInfo]? = nil
    )
    {
        self.instanceInfos = instanceInfos
    }
}

struct BatchGetOnPremisesInstancesOutputResponseBody: Swift.Equatable {
    let instanceInfos: [CodeDeployClientTypes.InstanceInfo]?
}

extension BatchGetOnPremisesInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceInfos
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceInfosContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.InstanceInfo?].self, forKey: .instanceInfos)
        var instanceInfosDecoded0:[CodeDeployClientTypes.InstanceInfo]? = nil
        if let instanceInfosContainer = instanceInfosContainer {
            instanceInfosDecoded0 = [CodeDeployClientTypes.InstanceInfo]()
            for structure0 in instanceInfosContainer {
                if let structure0 = structure0 {
                    instanceInfosDecoded0?.append(structure0)
                }
            }
        }
        instanceInfos = instanceInfosDecoded0
    }
}

extension BatchLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BatchLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of names or IDs allowed for this request (100) was exceeded.
public struct BatchLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BatchLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BatchLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.BlueGreenDeploymentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentReadyOption
        case greenFleetProvisioningOption
        case terminateBlueInstancesOnDeploymentSuccess
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentReadyOption = self.deploymentReadyOption {
            try encodeContainer.encode(deploymentReadyOption, forKey: .deploymentReadyOption)
        }
        if let greenFleetProvisioningOption = self.greenFleetProvisioningOption {
            try encodeContainer.encode(greenFleetProvisioningOption, forKey: .greenFleetProvisioningOption)
        }
        if let terminateBlueInstancesOnDeploymentSuccess = self.terminateBlueInstancesOnDeploymentSuccess {
            try encodeContainer.encode(terminateBlueInstancesOnDeploymentSuccess, forKey: .terminateBlueInstancesOnDeploymentSuccess)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let terminateBlueInstancesOnDeploymentSuccessDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BlueInstanceTerminationOption.self, forKey: .terminateBlueInstancesOnDeploymentSuccess)
        terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccessDecoded
        let deploymentReadyOptionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentReadyOption.self, forKey: .deploymentReadyOption)
        deploymentReadyOption = deploymentReadyOptionDecoded
        let greenFleetProvisioningOptionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.GreenFleetProvisioningOption.self, forKey: .greenFleetProvisioningOption)
        greenFleetProvisioningOption = greenFleetProvisioningOptionDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about blue/green deployment options for a deployment group.
    public struct BlueGreenDeploymentConfiguration: Swift.Equatable {
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        public var deploymentReadyOption: CodeDeployClientTypes.DeploymentReadyOption?
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        public var greenFleetProvisioningOption: CodeDeployClientTypes.GreenFleetProvisioningOption?
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        public var terminateBlueInstancesOnDeploymentSuccess: CodeDeployClientTypes.BlueInstanceTerminationOption?

        public init (
            deploymentReadyOption: CodeDeployClientTypes.DeploymentReadyOption? = nil,
            greenFleetProvisioningOption: CodeDeployClientTypes.GreenFleetProvisioningOption? = nil,
            terminateBlueInstancesOnDeploymentSuccess: CodeDeployClientTypes.BlueInstanceTerminationOption? = nil
        )
        {
            self.deploymentReadyOption = deploymentReadyOption
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
        }
    }

}

extension CodeDeployClientTypes.BlueInstanceTerminationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case terminationWaitTimeInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if terminationWaitTimeInMinutes != 0 {
            try encodeContainer.encode(terminationWaitTimeInMinutes, forKey: .terminationWaitTimeInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceAction.self, forKey: .action)
        action = actionDecoded
        let terminationWaitTimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .terminationWaitTimeInMinutes) ?? 0
        terminationWaitTimeInMinutes = terminationWaitTimeInMinutesDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about whether instances in the original environment are terminated when a blue/green deployment is successful. BlueInstanceTerminationOption does not apply to Lambda deployments.
    public struct BlueInstanceTerminationOption: Swift.Equatable {
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        ///
        /// * TERMINATE: Instances are terminated after a specified wait time.
        ///
        /// * KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        public var action: CodeDeployClientTypes.InstanceAction?
        /// For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment. For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. The maximum setting is 2880 minutes (2 days).
        public var terminationWaitTimeInMinutes: Swift.Int

        public init (
            action: CodeDeployClientTypes.InstanceAction? = nil,
            terminationWaitTimeInMinutes: Swift.Int = 0
        )
        {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }
    }

}

extension BucketNameFilterRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: BucketNameFilterRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A bucket name is required, but was not provided.
public struct BucketNameFilterRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BucketNameFilterRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension BucketNameFilterRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum BundleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case tar
        case targzip
        case yaml
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [BundleType] {
            return [
                .json,
                .tar,
                .targzip,
                .yaml,
                .zip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .tar: return "tar"
            case .targzip: return "tgz"
            case .yaml: return "YAML"
            case .zip: return "zip"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BundleType(rawValue: rawValue) ?? BundleType.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.CloudFormationTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case resourceType
        case status
        case targetId
        case targetVersionWeight
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleevent0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleevent0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetStatus.self, forKey: .status)
        status = statusDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let targetVersionWeightDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetVersionWeight) ?? 0.0
        targetVersionWeight = targetVersionWeightDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
    public struct CloudFormationTarget: Swift.Equatable {
        /// The unique ID of an CloudFormation blue/green deployment.
        public var deploymentId: Swift.String?
        /// The date and time when the target application was updated by an CloudFormation blue/green deployment.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The lifecycle events of the CloudFormation blue/green deployment to this target application.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The resource type for the CloudFormation blue/green deployment.
        public var resourceType: Swift.String?
        /// The status of an CloudFormation blue/green deployment's target application.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The unique ID of a deployment target that has a type of CloudFormationTarget.
        public var targetId: Swift.String?
        /// The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.
        public var targetVersionWeight: Swift.Double

        public init (
            deploymentId: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            resourceType: Swift.String? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetId: Swift.String? = nil,
            targetVersionWeight: Swift.Double = 0.0
        )
        {
            self.deploymentId = deploymentId
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.resourceType = resourceType
            self.status = status
            self.targetId = targetId
            self.targetVersionWeight = targetVersionWeight
        }
    }

}

extension CodeDeployClientTypes {
    public enum ComputePlatform: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecs
        case lambda
        case server
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputePlatform] {
            return [
                .ecs,
                .lambda,
                .server,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecs: return "ECS"
            case .lambda: return "Lambda"
            case .server: return "Server"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComputePlatform(rawValue: rawValue) ?? ComputePlatform.sdkUnknown(rawValue)
        }
    }
}

extension ContinueDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case deploymentWaitType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentWaitType = self.deploymentWaitType {
            try encodeContainer.encode(deploymentWaitType.rawValue, forKey: .deploymentWaitType)
        }
    }
}

extension ContinueDeploymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ContinueDeploymentInput: Swift.Equatable {
    /// The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment.
    public var deploymentId: Swift.String?
    /// The status of the deployment's waiting period. READY_WAIT indicates that the deployment is ready to start shifting traffic. TERMINATION_WAIT indicates that the traffic is shifted, but the original target is not terminated.
    public var deploymentWaitType: CodeDeployClientTypes.DeploymentWaitType?

    public init (
        deploymentId: Swift.String? = nil,
        deploymentWaitType: CodeDeployClientTypes.DeploymentWaitType? = nil
    )
    {
        self.deploymentId = deploymentId
        self.deploymentWaitType = deploymentWaitType
    }
}

struct ContinueDeploymentInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let deploymentWaitType: CodeDeployClientTypes.DeploymentWaitType?
}

extension ContinueDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case deploymentWaitType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let deploymentWaitTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentWaitType.self, forKey: .deploymentWaitType)
        deploymentWaitType = deploymentWaitTypeDecoded
    }
}

extension ContinueDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ContinueDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIsNotInReadyStateException" : self = .deploymentIsNotInReadyStateException(try DeploymentIsNotInReadyStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStatusException" : self = .invalidDeploymentStatusException(try InvalidDeploymentStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentWaitTypeException" : self = .invalidDeploymentWaitTypeException(try InvalidDeploymentWaitTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ContinueDeploymentOutputError: Swift.Error, Swift.Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentIsNotInReadyStateException(DeploymentIsNotInReadyStateException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentStatusException(InvalidDeploymentStatusException)
    case invalidDeploymentWaitTypeException(InvalidDeploymentWaitTypeException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ContinueDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ContinueDeploymentOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case computePlatform
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension CreateApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateApplication operation.
public struct CreateApplicationInput: Swift.Equatable {
    /// The name of the application. This name must be unique with the applicable IAM or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The destination platform type for the deployment (Lambda, Server, or ECS).
    public var computePlatform: CodeDeployClientTypes.ComputePlatform?
    /// The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init (
        applicationName: Swift.String? = nil,
        computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.applicationName = applicationName
        self.computePlatform = computePlatform
        self.tags = tags
    }
}

struct CreateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let computePlatform: CodeDeployClientTypes.ComputePlatform?
    let tags: [CodeDeployClientTypes.Tag]?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case computePlatform
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationAlreadyExistsException" : self = .applicationAlreadyExistsException(try ApplicationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationLimitExceededException" : self = .applicationLimitExceededException(try ApplicationLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateApplicationOutputError: Swift.Error, Swift.Equatable {
    case applicationAlreadyExistsException(ApplicationAlreadyExistsException)
    case applicationLimitExceededException(ApplicationLimitExceededException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateApplicationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationId = output.applicationId
        } else {
            self.applicationId = nil
        }
    }
}

/// Represents the output of a CreateApplication operation.
public struct CreateApplicationOutputResponse: Swift.Equatable {
    /// A unique application ID.
    public var applicationId: Swift.String?

    public init (
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

struct CreateApplicationOutputResponseBody: Swift.Equatable {
    let applicationId: Swift.String?
}

extension CreateApplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
    }
}

extension CreateDeploymentConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computePlatform
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let minimumHealthyHosts = self.minimumHealthyHosts {
            try encodeContainer.encode(minimumHealthyHosts, forKey: .minimumHealthyHosts)
        }
        if let trafficRoutingConfig = self.trafficRoutingConfig {
            try encodeContainer.encode(trafficRoutingConfig, forKey: .trafficRoutingConfig)
        }
    }
}

extension CreateDeploymentConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateDeploymentConfig operation.
public struct CreateDeploymentConfigInput: Swift.Equatable {
    /// The destination platform type for the deployment (Lambda, Server, or ECS).
    public var computePlatform: CodeDeployClientTypes.ComputePlatform?
    /// The name of the deployment configuration to create.
    /// This member is required.
    public var deploymentConfigName: Swift.String?
    /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:
    ///
    /// * HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.
    ///
    /// * FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.
    ///
    ///
    /// The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
    public var minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
    /// The configuration that specifies how the deployment traffic is routed.
    public var trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?

    public init (
        computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
        deploymentConfigName: Swift.String? = nil,
        minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts? = nil,
        trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig? = nil
    )
    {
        self.computePlatform = computePlatform
        self.deploymentConfigName = deploymentConfigName
        self.minimumHealthyHosts = minimumHealthyHosts
        self.trafficRoutingConfig = trafficRoutingConfig
    }
}

struct CreateDeploymentConfigInputBody: Swift.Equatable {
    let deploymentConfigName: Swift.String?
    let minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
    let trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?
    let computePlatform: CodeDeployClientTypes.ComputePlatform?
}

extension CreateDeploymentConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computePlatform
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let minimumHealthyHostsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.MinimumHealthyHosts.self, forKey: .minimumHealthyHosts)
        minimumHealthyHosts = minimumHealthyHostsDecoded
        let trafficRoutingConfigDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoutingConfig.self, forKey: .trafficRoutingConfig)
        trafficRoutingConfig = trafficRoutingConfigDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
    }
}

extension CreateDeploymentConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentConfigAlreadyExistsException" : self = .deploymentConfigAlreadyExistsException(try DeploymentConfigAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigLimitExceededException" : self = .deploymentConfigLimitExceededException(try DeploymentConfigLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidMinimumHealthyHostValueException" : self = .invalidMinimumHealthyHostValueException(try InvalidMinimumHealthyHostValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeploymentConfigOutputError: Swift.Error, Swift.Equatable {
    case deploymentConfigAlreadyExistsException(DeploymentConfigAlreadyExistsException)
    case deploymentConfigLimitExceededException(DeploymentConfigLimitExceededException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidMinimumHealthyHostValueException(InvalidMinimumHealthyHostValueException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeploymentConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentConfigId = output.deploymentConfigId
        } else {
            self.deploymentConfigId = nil
        }
    }
}

/// Represents the output of a CreateDeploymentConfig operation.
public struct CreateDeploymentConfigOutputResponse: Swift.Equatable {
    /// A unique deployment configuration ID.
    public var deploymentConfigId: Swift.String?

    public init (
        deploymentConfigId: Swift.String? = nil
    )
    {
        self.deploymentConfigId = deploymentConfigId
    }
}

struct CreateDeploymentConfigOutputResponseBody: Swift.Equatable {
    let deploymentConfigId: Swift.String?
}

extension CreateDeploymentConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigId)
        deploymentConfigId = deploymentConfigIdDecoded
    }
}

extension CreateDeploymentGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case tags
        case triggerConfigurations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupname0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupname0)
            }
        }
        if let blueGreenDeploymentConfiguration = self.blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentStyle = self.deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilter0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilter0)
            }
        }
        if let ec2TagSet = self.ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservice0 in ecsServices {
                try ecsServicesContainer.encode(ecsservice0)
            }
        }
        if let loadBalancerInfo = self.loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilter0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilter0)
            }
        }
        if let onPremisesTagSet = self.onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = self.outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfig0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfig0)
            }
        }
    }
}

extension CreateDeploymentGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateDeploymentGroup operation.
public struct CreateDeploymentGroupInput: Swift.Equatable {
    /// Information to add about Amazon CloudWatch alarms when the deployment group is created.
    public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Configuration information for an automatic rollback that is added when a deployment group is created.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// A list of associated Amazon EC2 Auto Scaling groups.
    public var autoScalingGroups: [Swift.String]?
    /// Information about blue/green deployment options for a deployment group.
    public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    /// If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group. For more information about the predefined deployment configurations in CodeDeploy, see [Working with Deployment Configurations in CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html) in the CodeDeploy User Guide.
    public var deploymentConfigName: Swift.String?
    /// The name of a new deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?
    /// Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
    public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    /// The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
    public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    /// Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
    public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
    public var ecsServices: [CodeDeployClientTypes.ECSService]?
    /// Information about the load balancer used in a deployment.
    public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
    public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    /// Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
    public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
    public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    /// A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.
    /// This member is required.
    public var serviceRoleArn: Swift.String?
    /// The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [CodeDeployClientTypes.Tag]?
    /// Information about triggers to create when the deployment group is created. For examples, see [Create a Trigger for an CodeDeploy Event](https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html) in the CodeDeploy User Guide.
    public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

    public init (
        alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        autoScalingGroups: [Swift.String]? = nil,
        blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil,
        deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
        ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
        ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
        ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
        loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
        onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
        serviceRoleArn: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil,
        triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.tags = tags
        self.triggerConfigurations = triggerConfigurations
    }
}

struct CreateDeploymentGroupInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
    let deploymentConfigName: Swift.String?
    let ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    let onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    let autoScalingGroups: [Swift.String]?
    let serviceRoleArn: Swift.String?
    let triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?
    let alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    let autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    let outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    let deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    let blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    let loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    let ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    let ecsServices: [CodeDeployClientTypes.ECSService]?
    let onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    let tags: [CodeDeployClientTypes.Tag]?
}

extension CreateDeploymentGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case tags
        case triggerConfigurations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[CodeDeployClientTypes.EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [CodeDeployClientTypes.EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[CodeDeployClientTypes.TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [CodeDeployClientTypes.TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[Swift.String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [Swift.String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[CodeDeployClientTypes.TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [CodeDeployClientTypes.TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[CodeDeployClientTypes.ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [CodeDeployClientTypes.ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeploymentGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlarmsLimitExceededException" : self = .alarmsLimitExceededException(try AlarmsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupAlreadyExistsException" : self = .deploymentGroupAlreadyExistsException(try DeploymentGroupAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupLimitExceededException" : self = .deploymentGroupLimitExceededException(try DeploymentGroupLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ECSServiceMappingLimitExceededException" : self = .eCSServiceMappingLimitExceededException(try ECSServiceMappingLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAlarmConfigException" : self = .invalidAlarmConfigException(try InvalidAlarmConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlueGreenDeploymentConfigurationException" : self = .invalidBlueGreenDeploymentConfigurationException(try InvalidBlueGreenDeploymentConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStyleException" : self = .invalidDeploymentStyleException(try InvalidDeploymentStyleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagCombinationException" : self = .invalidEC2TagCombinationException(try InvalidEC2TagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagException" : self = .invalidEC2TagException(try InvalidEC2TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidECSServiceException" : self = .invalidECSServiceException(try InvalidECSServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOnPremisesTagCombinationException" : self = .invalidOnPremisesTagCombinationException(try InvalidOnPremisesTagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetGroupPairException" : self = .invalidTargetGroupPairException(try InvalidTargetGroupPairException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTriggerConfigException" : self = .invalidTriggerConfigException(try InvalidTriggerConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleHookLimitExceededException" : self = .lifecycleHookLimitExceededException(try LifecycleHookLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RoleRequiredException" : self = .roleRequiredException(try RoleRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagSetListLimitExceededException" : self = .tagSetListLimitExceededException(try TagSetListLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TriggerTargetsLimitExceededException" : self = .triggerTargetsLimitExceededException(try TriggerTargetsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeploymentGroupOutputError: Swift.Error, Swift.Equatable {
    case alarmsLimitExceededException(AlarmsLimitExceededException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupAlreadyExistsException(DeploymentGroupAlreadyExistsException)
    case deploymentGroupLimitExceededException(DeploymentGroupLimitExceededException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case eCSServiceMappingLimitExceededException(ECSServiceMappingLimitExceededException)
    case invalidAlarmConfigException(InvalidAlarmConfigException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidBlueGreenDeploymentConfigurationException(InvalidBlueGreenDeploymentConfigurationException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStyleException(InvalidDeploymentStyleException)
    case invalidEC2TagCombinationException(InvalidEC2TagCombinationException)
    case invalidEC2TagException(InvalidEC2TagException)
    case invalidECSServiceException(InvalidECSServiceException)
    case invalidInputException(InvalidInputException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidOnPremisesTagCombinationException(InvalidOnPremisesTagCombinationException)
    case invalidRoleException(InvalidRoleException)
    case invalidTagException(InvalidTagException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case invalidTargetGroupPairException(InvalidTargetGroupPairException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidTriggerConfigException(InvalidTriggerConfigException)
    case lifecycleHookLimitExceededException(LifecycleHookLimitExceededException)
    case roleRequiredException(RoleRequiredException)
    case tagSetListLimitExceededException(TagSetListLimitExceededException)
    case throttlingException(ThrottlingException)
    case triggerTargetsLimitExceededException(TriggerTargetsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentGroupId = output.deploymentGroupId
        } else {
            self.deploymentGroupId = nil
        }
    }
}

/// Represents the output of a CreateDeploymentGroup operation.
public struct CreateDeploymentGroupOutputResponse: Swift.Equatable {
    /// A unique deployment group ID.
    public var deploymentGroupId: Swift.String?

    public init (
        deploymentGroupId: Swift.String? = nil
    )
    {
        self.deploymentGroupId = deploymentGroupId
    }
}

struct CreateDeploymentGroupOutputResponseBody: Swift.Equatable {
    let deploymentGroupId: Swift.String?
}

extension CreateDeploymentGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentGroupId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupId)
        deploymentGroupId = deploymentGroupIdDecoded
    }
}

extension CreateDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case overrideAlarmConfiguration
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fileExistsBehavior = self.fileExistsBehavior {
            try encodeContainer.encode(fileExistsBehavior.rawValue, forKey: .fileExistsBehavior)
        }
        if ignoreApplicationStopFailures != false {
            try encodeContainer.encode(ignoreApplicationStopFailures, forKey: .ignoreApplicationStopFailures)
        }
        if let overrideAlarmConfiguration = self.overrideAlarmConfiguration {
            try encodeContainer.encode(overrideAlarmConfiguration, forKey: .overrideAlarmConfiguration)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let targetInstances = self.targetInstances {
            try encodeContainer.encode(targetInstances, forKey: .targetInstances)
        }
        if updateOutdatedInstancesOnly != false {
            try encodeContainer.encode(updateOutdatedInstancesOnly, forKey: .updateOutdatedInstancesOnly)
        }
    }
}

extension CreateDeploymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a CreateDeployment operation.
public struct CreateDeploymentInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Configuration information for an automatic rollback that is added when a deployment is created.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// The name of a deployment configuration associated with the IAM user or Amazon Web Services account. If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, CodeDeployDefault.OneAtATime is used by default.
    public var deploymentConfigName: Swift.String?
    /// The name of the deployment group.
    public var deploymentGroupName: Swift.String?
    /// A comment about the deployment.
    public var description: Swift.String?
    /// Information about how CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment. The fileExistsBehavior parameter takes any of the following values:
    ///
    /// * DISALLOW: The deployment fails. This is also the default behavior if no option is specified.
    ///
    /// * OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.
    ///
    /// * RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.
    public var fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
    /// If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if ApplicationStop fails, the deployment continues with DownloadBundle. If BeforeBlockTraffic fails, the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the deployment continues with ApplicationStop. If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. During a deployment, the CodeDeploy agent runs the scripts specified for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use ignoreApplicationStopFailures to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.
    public var ignoreApplicationStopFailures: Swift.Bool
    /// Allows you to specify information about alarms associated with a deployment. The alarm configuration that you specify here will override the alarm configuration at the deployment group level. Consider overriding the alarm configuration if you have set up alarms at the deployment group level that are causing deployment failures. In this case, you would call CreateDeployment to create a new deployment that uses a previous application revision that is known to work, and set its alarm configuration to turn off alarm polling. Turning off alarm polling ensures that the new deployment proceeds without being blocked by the alarm that was generated by the previous, failed, deployment. If you specify an overrideAlarmConfiguration, you need the UpdateDeploymentGroup IAM permission when calling CreateDeployment.
    public var overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The type and location of the revision to deploy.
    public var revision: CodeDeployClientTypes.RevisionLocation?
    /// Information about the instances that belong to the replacement environment in a blue/green deployment.
    public var targetInstances: CodeDeployClientTypes.TargetInstances?
    /// Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
    public var updateOutdatedInstancesOnly: Swift.Bool

    public init (
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior? = nil,
        ignoreApplicationStopFailures: Swift.Bool = false,
        overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil,
        targetInstances: CodeDeployClientTypes.TargetInstances? = nil,
        updateOutdatedInstancesOnly: Swift.Bool = false
    )
    {
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.description = description
        self.fileExistsBehavior = fileExistsBehavior
        self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
        self.overrideAlarmConfiguration = overrideAlarmConfiguration
        self.revision = revision
        self.targetInstances = targetInstances
        self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
    }
}

struct CreateDeploymentInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
    let revision: CodeDeployClientTypes.RevisionLocation?
    let deploymentConfigName: Swift.String?
    let description: Swift.String?
    let ignoreApplicationStopFailures: Swift.Bool
    let targetInstances: CodeDeployClientTypes.TargetInstances?
    let autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    let updateOutdatedInstancesOnly: Swift.Bool
    let fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
    let overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
}

extension CreateDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case overrideAlarmConfiguration
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ignoreApplicationStopFailuresDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignoreApplicationStopFailures) ?? false
        ignoreApplicationStopFailures = ignoreApplicationStopFailuresDecoded
        let targetInstancesDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetInstances.self, forKey: .targetInstances)
        targetInstances = targetInstancesDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let updateOutdatedInstancesOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateOutdatedInstancesOnly) ?? false
        updateOutdatedInstancesOnly = updateOutdatedInstancesOnlyDecoded
        let fileExistsBehaviorDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.FileExistsBehavior.self, forKey: .fileExistsBehavior)
        fileExistsBehavior = fileExistsBehaviorDecoded
        let overrideAlarmConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AlarmConfiguration.self, forKey: .overrideAlarmConfiguration)
        overrideAlarmConfiguration = overrideAlarmConfigurationDecoded
    }
}

extension CreateDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlarmsLimitExceededException" : self = .alarmsLimitExceededException(try AlarmsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentLimitExceededException" : self = .deploymentLimitExceededException(try DeploymentLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DescriptionTooLongException" : self = .descriptionTooLongException(try DescriptionTooLongException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAlarmConfigException" : self = .invalidAlarmConfigException(try InvalidAlarmConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidFileExistsBehaviorException" : self = .invalidFileExistsBehaviorException(try InvalidFileExistsBehaviorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGitHubAccountTokenException" : self = .invalidGitHubAccountTokenException(try InvalidGitHubAccountTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIgnoreApplicationStopFailuresValueException" : self = .invalidIgnoreApplicationStopFailuresValueException(try InvalidIgnoreApplicationStopFailuresValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetInstancesException" : self = .invalidTargetInstancesException(try InvalidTargetInstancesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidUpdateOutdatedInstancesOnlyValueException" : self = .invalidUpdateOutdatedInstancesOnlyValueException(try InvalidUpdateOutdatedInstancesOnlyValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionDoesNotExistException" : self = .revisionDoesNotExistException(try RevisionDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDeploymentOutputError: Swift.Error, Swift.Equatable {
    case alarmsLimitExceededException(AlarmsLimitExceededException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case deploymentLimitExceededException(DeploymentLimitExceededException)
    case descriptionTooLongException(DescriptionTooLongException)
    case invalidAlarmConfigException(InvalidAlarmConfigException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidFileExistsBehaviorException(InvalidFileExistsBehaviorException)
    case invalidGitHubAccountTokenException(InvalidGitHubAccountTokenException)
    case invalidIgnoreApplicationStopFailuresValueException(InvalidIgnoreApplicationStopFailuresValueException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidRevisionException(InvalidRevisionException)
    case invalidRoleException(InvalidRoleException)
    case invalidTargetInstancesException(InvalidTargetInstancesException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidUpdateOutdatedInstancesOnlyValueException(InvalidUpdateOutdatedInstancesOnlyValueException)
    case revisionDoesNotExistException(RevisionDoesNotExistException)
    case revisionRequiredException(RevisionRequiredException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentId = output.deploymentId
        } else {
            self.deploymentId = nil
        }
    }
}

/// Represents the output of a CreateDeployment operation.
public struct CreateDeploymentOutputResponse: Swift.Equatable {
    /// The unique ID of a deployment.
    public var deploymentId: Swift.String?

    public init (
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct CreateDeploymentOutputResponseBody: Swift.Equatable {
    let deploymentId: Swift.String?
}

extension CreateDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

extension DeleteApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
    }
}

extension DeleteApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteApplication operation.
public struct DeleteApplicationInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?

    public init (
        applicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

struct DeleteApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
}

extension DeleteApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
    }
}

extension DeleteApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteApplicationOutputError: Swift.Error, Swift.Equatable {
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRoleException(InvalidRoleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteApplicationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDeploymentConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
    }
}

extension DeleteDeploymentConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteDeploymentConfig operation.
public struct DeleteDeploymentConfigInput: Swift.Equatable {
    /// The name of a deployment configuration associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var deploymentConfigName: Swift.String?

    public init (
        deploymentConfigName: Swift.String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

struct DeleteDeploymentConfigInputBody: Swift.Equatable {
    let deploymentConfigName: Swift.String?
}

extension DeleteDeploymentConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
    }
}

extension DeleteDeploymentConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeploymentConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentConfigInUseException" : self = .deploymentConfigInUseException(try DeploymentConfigInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDeploymentConfigOutputError: Swift.Error, Swift.Equatable {
    case deploymentConfigInUseException(DeploymentConfigInUseException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidOperationException(InvalidOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeploymentConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDeploymentConfigOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDeploymentGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
    }
}

extension DeleteDeploymentGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteDeploymentGroup operation.
public struct DeleteDeploymentGroupInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of a deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

struct DeleteDeploymentGroupInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
}

extension DeleteDeploymentGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
    }
}

extension DeleteDeploymentGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeploymentGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDeploymentGroupOutputError: Swift.Error, Swift.Equatable {
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidRoleException(InvalidRoleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeploymentGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hooksNotCleanedUp = output.hooksNotCleanedUp
        } else {
            self.hooksNotCleanedUp = nil
        }
    }
}

/// Represents the output of a DeleteDeploymentGroup operation.
public struct DeleteDeploymentGroupOutputResponse: Swift.Equatable {
    /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
    public var hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?

    public init (
        hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

struct DeleteDeploymentGroupOutputResponseBody: Swift.Equatable {
    let hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?
}

extension DeleteDeploymentGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hooksNotCleanedUp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hooksNotCleanedUpContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.AutoScalingGroup?].self, forKey: .hooksNotCleanedUp)
        var hooksNotCleanedUpDecoded0:[CodeDeployClientTypes.AutoScalingGroup]? = nil
        if let hooksNotCleanedUpContainer = hooksNotCleanedUpContainer {
            hooksNotCleanedUpDecoded0 = [CodeDeployClientTypes.AutoScalingGroup]()
            for structure0 in hooksNotCleanedUpContainer {
                if let structure0 = structure0 {
                    hooksNotCleanedUpDecoded0?.append(structure0)
                }
            }
        }
        hooksNotCleanedUp = hooksNotCleanedUpDecoded0
    }
}

extension DeleteGitHubAccountTokenInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tokenName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tokenName = self.tokenName {
            try encodeContainer.encode(tokenName, forKey: .tokenName)
        }
    }
}

extension DeleteGitHubAccountTokenInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeleteGitHubAccount operation.
public struct DeleteGitHubAccountTokenInput: Swift.Equatable {
    /// The name of the GitHub account connection to delete.
    public var tokenName: Swift.String?

    public init (
        tokenName: Swift.String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

struct DeleteGitHubAccountTokenInputBody: Swift.Equatable {
    let tokenName: Swift.String?
}

extension DeleteGitHubAccountTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tokenName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenName)
        tokenName = tokenNameDecoded
    }
}

extension DeleteGitHubAccountTokenOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteGitHubAccountTokenOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "GitHubAccountTokenDoesNotExistException" : self = .gitHubAccountTokenDoesNotExistException(try GitHubAccountTokenDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GitHubAccountTokenNameRequiredException" : self = .gitHubAccountTokenNameRequiredException(try GitHubAccountTokenNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidGitHubAccountTokenNameException" : self = .invalidGitHubAccountTokenNameException(try InvalidGitHubAccountTokenNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotSupportedException" : self = .operationNotSupportedException(try OperationNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceValidationException" : self = .resourceValidationException(try ResourceValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteGitHubAccountTokenOutputError: Swift.Error, Swift.Equatable {
    case gitHubAccountTokenDoesNotExistException(GitHubAccountTokenDoesNotExistException)
    case gitHubAccountTokenNameRequiredException(GitHubAccountTokenNameRequiredException)
    case invalidGitHubAccountTokenNameException(InvalidGitHubAccountTokenNameException)
    case operationNotSupportedException(OperationNotSupportedException)
    case resourceValidationException(ResourceValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteGitHubAccountTokenOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteGitHubAccountTokenOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tokenName = output.tokenName
        } else {
            self.tokenName = nil
        }
    }
}

/// Represents the output of a DeleteGitHubAccountToken operation.
public struct DeleteGitHubAccountTokenOutputResponse: Swift.Equatable {
    /// The name of the GitHub account connection that was deleted.
    public var tokenName: Swift.String?

    public init (
        tokenName: Swift.String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

struct DeleteGitHubAccountTokenOutputResponseBody: Swift.Equatable {
    let tokenName: Swift.String?
}

extension DeleteGitHubAccountTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tokenName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenName)
        tokenName = tokenNameDecoded
    }
}

extension DeleteResourcesByExternalIdInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
    }
}

extension DeleteResourcesByExternalIdInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcesByExternalIdInput: Swift.Equatable {
    /// The unique ID of an external resource (for example, a CloudFormation stack ID) that is linked to one or more CodeDeploy resources.
    public var externalId: Swift.String?

    public init (
        externalId: Swift.String? = nil
    )
    {
        self.externalId = externalId
    }
}

struct DeleteResourcesByExternalIdInputBody: Swift.Equatable {
    let externalId: Swift.String?
}

extension DeleteResourcesByExternalIdInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
    }
}

extension DeleteResourcesByExternalIdOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcesByExternalIdOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourcesByExternalIdOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcesByExternalIdOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcesByExternalIdOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeploymentAlreadyCompletedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment is already complete.
public struct DeploymentAlreadyCompletedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentAlreadyCompletedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentAlreadyCompletedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentConfigAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A deployment configuration with the specified name with the IAM user or Amazon Web Services account already exists.
public struct DeploymentConfigAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentConfigAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentConfigDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment configuration does not exist with the IAM user or Amazon Web Services account.
public struct DeploymentConfigDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentConfigDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentConfigInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment configuration is still in use.
public struct DeploymentConfigInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigInUseExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentConfigInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.DeploymentConfigInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computePlatform
        case createTime
        case deploymentConfigId
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let deploymentConfigId = self.deploymentConfigId {
            try encodeContainer.encode(deploymentConfigId, forKey: .deploymentConfigId)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let minimumHealthyHosts = self.minimumHealthyHosts {
            try encodeContainer.encode(minimumHealthyHosts, forKey: .minimumHealthyHosts)
        }
        if let trafficRoutingConfig = self.trafficRoutingConfig {
            try encodeContainer.encode(trafficRoutingConfig, forKey: .trafficRoutingConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigId)
        deploymentConfigId = deploymentConfigIdDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let minimumHealthyHostsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.MinimumHealthyHosts.self, forKey: .minimumHealthyHosts)
        minimumHealthyHosts = minimumHealthyHostsDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let trafficRoutingConfigDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoutingConfig.self, forKey: .trafficRoutingConfig)
        trafficRoutingConfig = trafficRoutingConfigDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment configuration.
    public struct DeploymentConfigInfo: Swift.Equatable {
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The time at which the deployment configuration was created.
        public var createTime: ClientRuntime.Date?
        /// The deployment configuration ID.
        public var deploymentConfigId: Swift.String?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// Information about the number or percentage of minimum healthy instance.
        public var minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
        /// The configuration that specifies how the deployment traffic is routed. Used for deployments with a Lambda or Amazon ECS compute platform only.
        public var trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?

        public init (
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: ClientRuntime.Date? = nil,
            deploymentConfigId: Swift.String? = nil,
            deploymentConfigName: Swift.String? = nil,
            minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts? = nil,
            trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig? = nil
        )
        {
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.deploymentConfigId = deploymentConfigId
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.trafficRoutingConfig = trafficRoutingConfig
        }
    }

}

extension DeploymentConfigLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentConfigLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment configurations limit was exceeded.
public struct DeploymentConfigLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentConfigLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentConfigNameRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentConfigNameRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment configuration name was not specified.
public struct DeploymentConfigNameRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentConfigNameRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentConfigNameRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum DeploymentCreator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoscaling
        case cloudformation
        case cloudformationrollback
        case codedeploy
        case codedeployautoupdate
        case codedeployrollback
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentCreator] {
            return [
                .autoscaling,
                .cloudformation,
                .cloudformationrollback,
                .codedeploy,
                .codedeployautoupdate,
                .codedeployrollback,
                .user,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "autoscaling"
            case .cloudformation: return "CloudFormation"
            case .cloudformationrollback: return "CloudFormationRollback"
            case .codedeploy: return "CodeDeploy"
            case .codedeployautoupdate: return "CodeDeployAutoUpdate"
            case .codedeployrollback: return "codeDeployRollback"
            case .user: return "user"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentCreator(rawValue: rawValue) ?? DeploymentCreator.sdkUnknown(rawValue)
        }
    }
}

extension DeploymentDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment with the IAM user or Amazon Web Services account does not exist.
public struct DeploymentDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentGroupAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A deployment group with the specified name with the IAM user or Amazon Web Services account already exists.
public struct DeploymentGroupAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentGroupAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentGroupDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The named deployment group with the IAM user or Amazon Web Services account does not exist.
public struct DeploymentGroupDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentGroupDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.DeploymentGroupInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case computePlatform
        case deploymentConfigName
        case deploymentGroupId
        case deploymentGroupName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case lastAttemptedDeployment
        case lastSuccessfulDeployment
        case loadBalancerInfo
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case targetRevision
        case triggerConfigurations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroup0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroup0)
            }
        }
        if let blueGreenDeploymentConfiguration = self.blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupId = self.deploymentGroupId {
            try encodeContainer.encode(deploymentGroupId, forKey: .deploymentGroupId)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentStyle = self.deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilter0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilter0)
            }
        }
        if let ec2TagSet = self.ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservice0 in ecsServices {
                try ecsServicesContainer.encode(ecsservice0)
            }
        }
        if let lastAttemptedDeployment = self.lastAttemptedDeployment {
            try encodeContainer.encode(lastAttemptedDeployment, forKey: .lastAttemptedDeployment)
        }
        if let lastSuccessfulDeployment = self.lastSuccessfulDeployment {
            try encodeContainer.encode(lastSuccessfulDeployment, forKey: .lastSuccessfulDeployment)
        }
        if let loadBalancerInfo = self.loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilter0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilter0)
            }
        }
        if let onPremisesTagSet = self.onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = self.outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let targetRevision = self.targetRevision {
            try encodeContainer.encode(targetRevision, forKey: .targetRevision)
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfig0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfig0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupId)
        deploymentGroupId = deploymentGroupIdDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[CodeDeployClientTypes.EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [CodeDeployClientTypes.EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[CodeDeployClientTypes.TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [CodeDeployClientTypes.TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.AutoScalingGroup?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[CodeDeployClientTypes.AutoScalingGroup]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [CodeDeployClientTypes.AutoScalingGroup]()
            for structure0 in autoScalingGroupsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let targetRevisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .targetRevision)
        targetRevision = targetRevisionDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[CodeDeployClientTypes.TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [CodeDeployClientTypes.TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let lastSuccessfulDeploymentDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LastDeploymentInfo.self, forKey: .lastSuccessfulDeployment)
        lastSuccessfulDeployment = lastSuccessfulDeploymentDecoded
        let lastAttemptedDeploymentDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LastDeploymentInfo.self, forKey: .lastAttemptedDeployment)
        lastAttemptedDeployment = lastAttemptedDeploymentDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[CodeDeployClientTypes.ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [CodeDeployClientTypes.ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment group.
    public struct DeploymentGroupInfo: Swift.Equatable {
        /// A list of alarms associated with the deployment group.
        public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
        /// The application name.
        public var applicationName: Swift.String?
        /// Information about the automatic rollback configuration associated with the deployment group.
        public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
        /// A list of associated Auto Scaling groups.
        public var autoScalingGroups: [CodeDeployClientTypes.AutoScalingGroup]?
        /// Information about blue/green deployment options for a deployment group.
        public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// The deployment group ID.
        public var deploymentGroupId: Swift.String?
        /// The deployment group name.
        public var deploymentGroupName: Swift.String?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
        /// The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
        public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
        /// Information about groups of tags applied to an Amazon EC2 instance. The deployment group includes only Amazon EC2 instances identified by all of the tag groups. Cannot be used in the same call as ec2TagFilters.
        public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
        /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
        public var ecsServices: [CodeDeployClientTypes.ECSService]?
        /// Information about the most recent attempted deployment to the deployment group.
        public var lastAttemptedDeployment: CodeDeployClientTypes.LastDeploymentInfo?
        /// Information about the most recent successful deployment to the deployment group.
        public var lastSuccessfulDeployment: CodeDeployClientTypes.LastDeploymentInfo?
        /// Information about the load balancer to use in a deployment.
        public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
        /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
        public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
        /// Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
        /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
        public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
        /// A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make calls to Amazon Web Services services on your behalf. For more information, see [Create a Service Role for CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html) in the CodeDeploy User Guide.
        public var serviceRoleArn: Swift.String?
        /// Information about the deployment group's target revision, including type and location.
        public var targetRevision: CodeDeployClientTypes.RevisionLocation?
        /// Information about triggers associated with the deployment group.
        public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

        public init (
            alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
            applicationName: Swift.String? = nil,
            autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
            autoScalingGroups: [CodeDeployClientTypes.AutoScalingGroup]? = nil,
            blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            deploymentConfigName: Swift.String? = nil,
            deploymentGroupId: Swift.String? = nil,
            deploymentGroupName: Swift.String? = nil,
            deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
            ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
            ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
            ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
            lastAttemptedDeployment: CodeDeployClientTypes.LastDeploymentInfo? = nil,
            lastSuccessfulDeployment: CodeDeployClientTypes.LastDeploymentInfo? = nil,
            loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
            onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
            onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
            outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
            serviceRoleArn: Swift.String? = nil,
            targetRevision: CodeDeployClientTypes.RevisionLocation? = nil,
            triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
        )
        {
            self.alarmConfiguration = alarmConfiguration
            self.applicationName = applicationName
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.autoScalingGroups = autoScalingGroups
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.computePlatform = computePlatform
            self.deploymentConfigName = deploymentConfigName
            self.deploymentGroupId = deploymentGroupId
            self.deploymentGroupName = deploymentGroupName
            self.deploymentStyle = deploymentStyle
            self.ec2TagFilters = ec2TagFilters
            self.ec2TagSet = ec2TagSet
            self.ecsServices = ecsServices
            self.lastAttemptedDeployment = lastAttemptedDeployment
            self.lastSuccessfulDeployment = lastSuccessfulDeployment
            self.loadBalancerInfo = loadBalancerInfo
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.onPremisesTagSet = onPremisesTagSet
            self.outdatedInstancesStrategy = outdatedInstancesStrategy
            self.serviceRoleArn = serviceRoleArn
            self.targetRevision = targetRevision
            self.triggerConfigurations = triggerConfigurations
        }
    }

}

extension DeploymentGroupLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentGroupLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment groups limit was exceeded.
public struct DeploymentGroupLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentGroupLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentGroupNameRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentGroupNameRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment group name was not specified.
public struct DeploymentGroupNameRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentGroupNameRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentGroupNameRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentIdRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentIdRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// At least one deployment ID must be specified.
public struct DeploymentIdRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentIdRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentIdRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.DeploymentInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalDeploymentStatusInfo
        case applicationName
        case autoRollbackConfiguration
        case blueGreenDeploymentConfiguration
        case completeTime
        case computePlatform
        case createTime
        case creator
        case deploymentConfigName
        case deploymentGroupName
        case deploymentId
        case deploymentOverview
        case deploymentStatusMessages
        case deploymentStyle
        case description
        case errorInformation
        case externalId
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case instanceTerminationWaitTimeStarted
        case loadBalancerInfo
        case overrideAlarmConfiguration
        case previousRevision
        case relatedDeployments
        case revision
        case rollbackInfo
        case startTime
        case status
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalDeploymentStatusInfo = self.additionalDeploymentStatusInfo {
            try encodeContainer.encode(additionalDeploymentStatusInfo, forKey: .additionalDeploymentStatusInfo)
        }
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let blueGreenDeploymentConfiguration = self.blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let completeTime = self.completeTime {
            try encodeContainer.encodeTimestamp(completeTime, format: .epochSeconds, forKey: .completeTime)
        }
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let creator = self.creator {
            try encodeContainer.encode(creator.rawValue, forKey: .creator)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentOverview = self.deploymentOverview {
            try encodeContainer.encode(deploymentOverview, forKey: .deploymentOverview)
        }
        if let deploymentStatusMessages = deploymentStatusMessages {
            var deploymentStatusMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentStatusMessages)
            for errormessage0 in deploymentStatusMessages {
                try deploymentStatusMessagesContainer.encode(errormessage0)
            }
        }
        if let deploymentStyle = self.deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorInformation = self.errorInformation {
            try encodeContainer.encode(errorInformation, forKey: .errorInformation)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let fileExistsBehavior = self.fileExistsBehavior {
            try encodeContainer.encode(fileExistsBehavior.rawValue, forKey: .fileExistsBehavior)
        }
        if ignoreApplicationStopFailures != false {
            try encodeContainer.encode(ignoreApplicationStopFailures, forKey: .ignoreApplicationStopFailures)
        }
        if instanceTerminationWaitTimeStarted != false {
            try encodeContainer.encode(instanceTerminationWaitTimeStarted, forKey: .instanceTerminationWaitTimeStarted)
        }
        if let loadBalancerInfo = self.loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let overrideAlarmConfiguration = self.overrideAlarmConfiguration {
            try encodeContainer.encode(overrideAlarmConfiguration, forKey: .overrideAlarmConfiguration)
        }
        if let previousRevision = self.previousRevision {
            try encodeContainer.encode(previousRevision, forKey: .previousRevision)
        }
        if let relatedDeployments = self.relatedDeployments {
            try encodeContainer.encode(relatedDeployments, forKey: .relatedDeployments)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let rollbackInfo = self.rollbackInfo {
            try encodeContainer.encode(rollbackInfo, forKey: .rollbackInfo)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetInstances = self.targetInstances {
            try encodeContainer.encode(targetInstances, forKey: .targetInstances)
        }
        if updateOutdatedInstancesOnly != false {
            try encodeContainer.encode(updateOutdatedInstancesOnly, forKey: .updateOutdatedInstancesOnly)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let previousRevisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .previousRevision)
        previousRevision = previousRevisionDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStatus.self, forKey: .status)
        status = statusDecoded
        let errorInformationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ErrorInformation.self, forKey: .errorInformation)
        errorInformation = errorInformationDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let completeTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .completeTime)
        completeTime = completeTimeDecoded
        let deploymentOverviewDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentOverview.self, forKey: .deploymentOverview)
        deploymentOverview = deploymentOverviewDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let creatorDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentCreator.self, forKey: .creator)
        creator = creatorDecoded
        let ignoreApplicationStopFailuresDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignoreApplicationStopFailures) ?? false
        ignoreApplicationStopFailures = ignoreApplicationStopFailuresDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let updateOutdatedInstancesOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateOutdatedInstancesOnly) ?? false
        updateOutdatedInstancesOnly = updateOutdatedInstancesOnlyDecoded
        let rollbackInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RollbackInfo.self, forKey: .rollbackInfo)
        rollbackInfo = rollbackInfoDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let targetInstancesDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetInstances.self, forKey: .targetInstances)
        targetInstances = targetInstancesDecoded
        let instanceTerminationWaitTimeStartedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .instanceTerminationWaitTimeStarted) ?? false
        instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStartedDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let additionalDeploymentStatusInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalDeploymentStatusInfo)
        additionalDeploymentStatusInfo = additionalDeploymentStatusInfoDecoded
        let fileExistsBehaviorDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.FileExistsBehavior.self, forKey: .fileExistsBehavior)
        fileExistsBehavior = fileExistsBehaviorDecoded
        let deploymentStatusMessagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentStatusMessages)
        var deploymentStatusMessagesDecoded0:[Swift.String]? = nil
        if let deploymentStatusMessagesContainer = deploymentStatusMessagesContainer {
            deploymentStatusMessagesDecoded0 = [Swift.String]()
            for string0 in deploymentStatusMessagesContainer {
                if let string0 = string0 {
                    deploymentStatusMessagesDecoded0?.append(string0)
                }
            }
        }
        deploymentStatusMessages = deploymentStatusMessagesDecoded0
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let relatedDeploymentsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RelatedDeployments.self, forKey: .relatedDeployments)
        relatedDeployments = relatedDeploymentsDecoded
        let overrideAlarmConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AlarmConfiguration.self, forKey: .overrideAlarmConfiguration)
        overrideAlarmConfiguration = overrideAlarmConfigurationDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment.
    public struct DeploymentInfo: Swift.Equatable {
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        @available(*, deprecated, message: "AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.")
        public var additionalDeploymentStatusInfo: Swift.String?
        /// The application name.
        public var applicationName: Swift.String?
        /// Information about the automatic rollback configuration associated with the deployment.
        public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
        /// Information about blue/green deployment options for this deployment.
        public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
        /// A timestamp that indicates when the deployment was complete.
        public var completeTime: ClientRuntime.Date?
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// A timestamp that indicates when the deployment was created.
        public var createTime: ClientRuntime.Date?
        /// The means by which the deployment was created:
        ///
        /// * user: A user created the deployment.
        ///
        /// * autoscaling: Amazon EC2 Auto Scaling created the deployment.
        ///
        /// * codeDeployRollback: A rollback process created the deployment.
        ///
        /// * CodeDeployAutoUpdate: An auto-update process created the deployment when it detected outdated Amazon EC2 instances.
        public var creator: CodeDeployClientTypes.DeploymentCreator?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// The deployment group name.
        public var deploymentGroupName: Swift.String?
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A summary of the deployment status of the instances in the deployment.
        public var deploymentOverview: CodeDeployClientTypes.DeploymentOverview?
        /// Messages that contain information about the status of a deployment.
        public var deploymentStatusMessages: [Swift.String]?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
        /// A comment about the deployment.
        public var description: Swift.String?
        /// Information about any error associated with this deployment.
        public var errorInformation: CodeDeployClientTypes.ErrorInformation?
        /// The unique ID for an external resource (for example, a CloudFormation stack ID) that is linked to this deployment.
        public var externalId: Swift.String?
        /// Information about how CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.
        ///
        /// * DISALLOW: The deployment fails. This is also the default behavior if no option is specified.
        ///
        /// * OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.
        ///
        /// * RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.
        public var fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
        /// If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if ApplicationStop fails, the deployment continues with DownloadBundle. If BeforeBlockTraffic fails, the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the deployment continues with ApplicationStop. If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. During a deployment, the CodeDeploy agent runs the scripts specified for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use ignoreApplicationStopFailures to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.
        public var ignoreApplicationStopFailures: Swift.Bool
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified. Otherwise, 'true' as soon as the termination wait period starts.
        public var instanceTerminationWaitTimeStarted: Swift.Bool
        /// Information about the load balancer used in the deployment.
        public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
        /// Information about alarms associated with a deployment or deployment group.
        public var overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
        /// Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
        public var previousRevision: CodeDeployClientTypes.RevisionLocation?
        /// Information about deployments related to the specified deployment.
        public var relatedDeployments: CodeDeployClientTypes.RelatedDeployments?
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        public var revision: CodeDeployClientTypes.RevisionLocation?
        /// Information about a deployment rollback.
        public var rollbackInfo: CodeDeployClientTypes.RollbackInfo?
        /// A timestamp that indicates when the deployment was deployed to the deployment group. In some cases, the reported value of the start time might be later than the complete time. This is due to differences in the clock settings of backend servers that participate in the deployment process.
        public var startTime: ClientRuntime.Date?
        /// The current state of the deployment as a whole.
        public var status: CodeDeployClientTypes.DeploymentStatus?
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        public var targetInstances: CodeDeployClientTypes.TargetInstances?
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        public var updateOutdatedInstancesOnly: Swift.Bool

        public init (
            additionalDeploymentStatusInfo: Swift.String? = nil,
            applicationName: Swift.String? = nil,
            autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
            blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
            completeTime: ClientRuntime.Date? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: ClientRuntime.Date? = nil,
            creator: CodeDeployClientTypes.DeploymentCreator? = nil,
            deploymentConfigName: Swift.String? = nil,
            deploymentGroupName: Swift.String? = nil,
            deploymentId: Swift.String? = nil,
            deploymentOverview: CodeDeployClientTypes.DeploymentOverview? = nil,
            deploymentStatusMessages: [Swift.String]? = nil,
            deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
            description: Swift.String? = nil,
            errorInformation: CodeDeployClientTypes.ErrorInformation? = nil,
            externalId: Swift.String? = nil,
            fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior? = nil,
            ignoreApplicationStopFailures: Swift.Bool = false,
            instanceTerminationWaitTimeStarted: Swift.Bool = false,
            loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
            overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
            previousRevision: CodeDeployClientTypes.RevisionLocation? = nil,
            relatedDeployments: CodeDeployClientTypes.RelatedDeployments? = nil,
            revision: CodeDeployClientTypes.RevisionLocation? = nil,
            rollbackInfo: CodeDeployClientTypes.RollbackInfo? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: CodeDeployClientTypes.DeploymentStatus? = nil,
            targetInstances: CodeDeployClientTypes.TargetInstances? = nil,
            updateOutdatedInstancesOnly: Swift.Bool = false
        )
        {
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.applicationName = applicationName
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.completeTime = completeTime
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.creator = creator
            self.deploymentConfigName = deploymentConfigName
            self.deploymentGroupName = deploymentGroupName
            self.deploymentId = deploymentId
            self.deploymentOverview = deploymentOverview
            self.deploymentStatusMessages = deploymentStatusMessages
            self.deploymentStyle = deploymentStyle
            self.description = description
            self.errorInformation = errorInformation
            self.externalId = externalId
            self.fileExistsBehavior = fileExistsBehavior
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.loadBalancerInfo = loadBalancerInfo
            self.overrideAlarmConfiguration = overrideAlarmConfiguration
            self.previousRevision = previousRevision
            self.relatedDeployments = relatedDeployments
            self.revision = revision
            self.rollbackInfo = rollbackInfo
            self.startTime = startTime
            self.status = status
            self.targetInstances = targetInstances
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
        }
    }

}

extension DeploymentIsNotInReadyStateException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentIsNotInReadyStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment does not have a status of Ready and can't continue yet.
public struct DeploymentIsNotInReadyStateException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentIsNotInReadyStateExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentIsNotInReadyStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of allowed deployments was exceeded.
public struct DeploymentLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentNotStartedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentNotStartedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified deployment has not started.
public struct DeploymentNotStartedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentNotStartedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentNotStartedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum DeploymentOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case withoutTrafficControl
        case withTrafficControl
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentOption] {
            return [
                .withoutTrafficControl,
                .withTrafficControl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .withoutTrafficControl: return "WITHOUT_TRAFFIC_CONTROL"
            case .withTrafficControl: return "WITH_TRAFFIC_CONTROL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentOption(rawValue: rawValue) ?? DeploymentOption.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.DeploymentOverview: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case inProgress = "InProgress"
        case pending = "Pending"
        case ready = "Ready"
        case skipped = "Skipped"
        case succeeded = "Succeeded"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failed != 0 {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if inProgress != 0 {
            try encodeContainer.encode(inProgress, forKey: .inProgress)
        }
        if pending != 0 {
            try encodeContainer.encode(pending, forKey: .pending)
        }
        if ready != 0 {
            try encodeContainer.encode(ready, forKey: .ready)
        }
        if skipped != 0 {
            try encodeContainer.encode(skipped, forKey: .skipped)
        }
        if succeeded != 0 {
            try encodeContainer.encode(succeeded, forKey: .succeeded)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pending) ?? 0
        pending = pendingDecoded
        let inProgressDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inProgress) ?? 0
        inProgress = inProgressDecoded
        let succeededDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .succeeded) ?? 0
        succeeded = succeededDecoded
        let failedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failed) ?? 0
        failed = failedDecoded
        let skippedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .skipped) ?? 0
        skipped = skippedDecoded
        let readyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ready) ?? 0
        ready = readyDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the deployment status of the instances in the deployment.
    public struct DeploymentOverview: Swift.Equatable {
        /// The number of instances in the deployment in a failed state.
        public var failed: Swift.Int
        /// The number of instances in which the deployment is in progress.
        public var inProgress: Swift.Int
        /// The number of instances in the deployment in a pending state.
        public var pending: Swift.Int
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        public var ready: Swift.Int
        /// The number of instances in the deployment in a skipped state.
        public var skipped: Swift.Int
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        public var succeeded: Swift.Int

        public init (
            failed: Swift.Int = 0,
            inProgress: Swift.Int = 0,
            pending: Swift.Int = 0,
            ready: Swift.Int = 0,
            skipped: Swift.Int = 0,
            succeeded: Swift.Int = 0
        )
        {
            self.failed = failed
            self.inProgress = inProgress
            self.pending = pending
            self.ready = ready
            self.skipped = skipped
            self.succeeded = succeeded
        }
    }

}

extension CodeDeployClientTypes {
    public enum DeploymentReadyAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case continueDeployment
        case stopDeployment
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentReadyAction] {
            return [
                .continueDeployment,
                .stopDeployment,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continueDeployment: return "CONTINUE_DEPLOYMENT"
            case .stopDeployment: return "STOP_DEPLOYMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentReadyAction(rawValue: rawValue) ?? DeploymentReadyAction.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.DeploymentReadyOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionOnTimeout
        case waitTimeInMinutes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionOnTimeout = self.actionOnTimeout {
            try encodeContainer.encode(actionOnTimeout.rawValue, forKey: .actionOnTimeout)
        }
        if waitTimeInMinutes != 0 {
            try encodeContainer.encode(waitTimeInMinutes, forKey: .waitTimeInMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionOnTimeoutDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentReadyAction.self, forKey: .actionOnTimeout)
        actionOnTimeout = actionOnTimeoutDecoded
        let waitTimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitTimeInMinutes) ?? 0
        waitTimeInMinutes = waitTimeInMinutesDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
    public struct DeploymentReadyOption: Swift.Equatable {
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        ///
        /// * CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
        ///
        /// * STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using [ContinueDeployment]. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.
        public var actionOnTimeout: CodeDeployClientTypes.DeploymentReadyAction?
        /// The number of minutes to wait before the status of a blue/green deployment is changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout.
        public var waitTimeInMinutes: Swift.Int

        public init (
            actionOnTimeout: CodeDeployClientTypes.DeploymentReadyAction? = nil,
            waitTimeInMinutes: Swift.Int = 0
        )
        {
            self.actionOnTimeout = actionOnTimeout
            self.waitTimeInMinutes = waitTimeInMinutes
        }
    }

}

extension CodeDeployClientTypes {
    public enum DeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case baking
        case created
        case failed
        case inProgress
        case queued
        case ready
        case stopped
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .baking,
                .created,
                .failed,
                .inProgress,
                .queued,
                .ready,
                .stopped,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .baking: return "Baking"
            case .created: return "Created"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .queued: return "Queued"
            case .ready: return "Ready"
            case .stopped: return "Stopped"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentStatus(rawValue: rawValue) ?? DeploymentStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.DeploymentStyle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentOption
        case deploymentType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentOption = self.deploymentOption {
            try encodeContainer.encode(deploymentOption.rawValue, forKey: .deploymentOption)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let deploymentOptionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentOption.self, forKey: .deploymentOption)
        deploymentOption = deploymentOptionDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    public struct DeploymentStyle: Swift.Equatable {
        /// Indicates whether to route deployment traffic behind a load balancer.
        public var deploymentOption: CodeDeployClientTypes.DeploymentOption?
        /// Indicates whether to run an in-place deployment or a blue/green deployment.
        public var deploymentType: CodeDeployClientTypes.DeploymentType?

        public init (
            deploymentOption: CodeDeployClientTypes.DeploymentOption? = nil,
            deploymentType: CodeDeployClientTypes.DeploymentType? = nil
        )
        {
            self.deploymentOption = deploymentOption
            self.deploymentType = deploymentType
        }
    }

}

extension CodeDeployClientTypes.DeploymentTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormationTarget
        case deploymentTargetType
        case ecsTarget
        case instanceTarget
        case lambdaTarget
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormationTarget = self.cloudFormationTarget {
            try encodeContainer.encode(cloudFormationTarget, forKey: .cloudFormationTarget)
        }
        if let deploymentTargetType = self.deploymentTargetType {
            try encodeContainer.encode(deploymentTargetType.rawValue, forKey: .deploymentTargetType)
        }
        if let ecsTarget = self.ecsTarget {
            try encodeContainer.encode(ecsTarget, forKey: .ecsTarget)
        }
        if let instanceTarget = self.instanceTarget {
            try encodeContainer.encode(instanceTarget, forKey: .instanceTarget)
        }
        if let lambdaTarget = self.lambdaTarget {
            try encodeContainer.encode(lambdaTarget, forKey: .lambdaTarget)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentTargetType.self, forKey: .deploymentTargetType)
        deploymentTargetType = deploymentTargetTypeDecoded
        let instanceTargetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceTarget.self, forKey: .instanceTarget)
        instanceTarget = instanceTargetDecoded
        let lambdaTargetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LambdaTarget.self, forKey: .lambdaTarget)
        lambdaTarget = lambdaTargetDecoded
        let ecsTargetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ECSTarget.self, forKey: .ecsTarget)
        ecsTarget = ecsTargetDecoded
        let cloudFormationTargetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.CloudFormationTarget.self, forKey: .cloudFormationTarget)
        cloudFormationTarget = cloudFormationTargetDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the deployment target.
    public struct DeploymentTarget: Swift.Equatable {
        /// Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
        public var cloudFormationTarget: CodeDeployClientTypes.CloudFormationTarget?
        /// The deployment type that is specific to the deployment's compute platform or deployments initiated by a CloudFormation stack update.
        public var deploymentTargetType: CodeDeployClientTypes.DeploymentTargetType?
        /// Information about the target for a deployment that uses the Amazon ECS compute platform.
        public var ecsTarget: CodeDeployClientTypes.ECSTarget?
        /// Information about the target for a deployment that uses the EC2/On-premises compute platform.
        public var instanceTarget: CodeDeployClientTypes.InstanceTarget?
        /// Information about the target for a deployment that uses the Lambda compute platform.
        public var lambdaTarget: CodeDeployClientTypes.LambdaTarget?

        public init (
            cloudFormationTarget: CodeDeployClientTypes.CloudFormationTarget? = nil,
            deploymentTargetType: CodeDeployClientTypes.DeploymentTargetType? = nil,
            ecsTarget: CodeDeployClientTypes.ECSTarget? = nil,
            instanceTarget: CodeDeployClientTypes.InstanceTarget? = nil,
            lambdaTarget: CodeDeployClientTypes.LambdaTarget? = nil
        )
        {
            self.cloudFormationTarget = cloudFormationTarget
            self.deploymentTargetType = deploymentTargetType
            self.ecsTarget = ecsTarget
            self.instanceTarget = instanceTarget
            self.lambdaTarget = lambdaTarget
        }
    }

}

extension DeploymentTargetDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentTargetDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The provided target ID does not belong to the attempted deployment.
public struct DeploymentTargetDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentTargetDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentTargetIdRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentTargetIdRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A deployment target ID was not provided.
public struct DeploymentTargetIdRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetIdRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentTargetIdRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeploymentTargetListSizeExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeploymentTargetListSizeExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of targets that can be associated with an Amazon ECS or Lambda deployment was exceeded. The target list of both types of deployments must have exactly one item. This exception does not apply to EC2/On-premises deployments.
public struct DeploymentTargetListSizeExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DeploymentTargetListSizeExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DeploymentTargetListSizeExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum DeploymentTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cloudformationTarget
        case ecsTarget
        case instanceTarget
        case lambdaTarget
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentTargetType] {
            return [
                .cloudformationTarget,
                .ecsTarget,
                .instanceTarget,
                .lambdaTarget,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cloudformationTarget: return "CloudFormationTarget"
            case .ecsTarget: return "ECSTarget"
            case .instanceTarget: return "InstanceTarget"
            case .lambdaTarget: return "LambdaTarget"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentTargetType(rawValue: rawValue) ?? DeploymentTargetType.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes {
    public enum DeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blueGreen
        case inPlace
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentType] {
            return [
                .blueGreen,
                .inPlace,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blueGreen: return "BLUE_GREEN"
            case .inPlace: return "IN_PLACE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentType(rawValue: rawValue) ?? DeploymentType.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes {
    public enum DeploymentWaitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case readyWait
        case terminationWait
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentWaitType] {
            return [
                .readyWait,
                .terminationWait,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .readyWait: return "READY_WAIT"
            case .terminationWait: return "TERMINATION_WAIT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentWaitType(rawValue: rawValue) ?? DeploymentWaitType.sdkUnknown(rawValue)
        }
    }
}

extension DeregisterOnPremisesInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension DeregisterOnPremisesInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a DeregisterOnPremisesInstance operation.
public struct DeregisterOnPremisesInstanceInput: Swift.Equatable {
    /// The name of the on-premises instance to deregister.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct DeregisterOnPremisesInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension DeregisterOnPremisesInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension DeregisterOnPremisesInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterOnPremisesInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeregisterOnPremisesInstanceOutputError: Swift.Error, Swift.Equatable {
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterOnPremisesInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterOnPremisesInstanceOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescriptionTooLongException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescriptionTooLongExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The description is too long.
public struct DescriptionTooLongException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DescriptionTooLongExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension DescriptionTooLongExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.Diagnostics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case logTail
        case message
        case scriptName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let logTail = self.logTail {
            try encodeContainer.encode(logTail, forKey: .logTail)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let scriptName = self.scriptName {
            try encodeContainer.encode(scriptName, forKey: .scriptName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LifecycleErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let scriptNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptName)
        scriptName = scriptNameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let logTailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logTail)
        logTail = logTailDecoded
    }
}

extension CodeDeployClientTypes {
    /// Diagnostic information about executable scripts that are part of a deployment.
    public struct Diagnostics: Swift.Equatable {
        /// The associated error code:
        ///
        /// * Success: The specified script ran.
        ///
        /// * ScriptMissing: The specified script was not found in the specified location.
        ///
        /// * ScriptNotExecutable: The specified script is not a recognized executable file type.
        ///
        /// * ScriptTimedOut: The specified script did not finish running in the specified time period.
        ///
        /// * ScriptFailed: The specified script failed to run as expected.
        ///
        /// * UnknownError: The specified script did not run for an unknown reason.
        public var errorCode: CodeDeployClientTypes.LifecycleErrorCode?
        /// The last portion of the diagnostic log. If available, CodeDeploy returns up to the last 4 KB of the diagnostic log.
        public var logTail: Swift.String?
        /// The message associated with the error.
        public var message: Swift.String?
        /// The name of the script.
        public var scriptName: Swift.String?

        public init (
            errorCode: CodeDeployClientTypes.LifecycleErrorCode? = nil,
            logTail: Swift.String? = nil,
            message: Swift.String? = nil,
            scriptName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.logTail = logTail
            self.message = message
            self.scriptName = scriptName
        }
    }

}

extension CodeDeployClientTypes.EC2TagFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.EC2TagFilterType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an EC2 tag filter.
    public struct EC2TagFilter: Swift.Equatable {
        /// The tag filter key.
        public var key: Swift.String?
        /// The tag filter type:
        ///
        /// * KEY_ONLY: Key only.
        ///
        /// * VALUE_ONLY: Value only.
        ///
        /// * KEY_AND_VALUE: Key and value.
        public var type: CodeDeployClientTypes.EC2TagFilterType?
        /// The tag filter value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            type: CodeDeployClientTypes.EC2TagFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }

}

extension CodeDeployClientTypes {
    public enum EC2TagFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyAndValue
        case keyOnly
        case valueOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [EC2TagFilterType] {
            return [
                .keyAndValue,
                .keyOnly,
                .valueOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyAndValue: return "KEY_AND_VALUE"
            case .keyOnly: return "KEY_ONLY"
            case .valueOnly: return "VALUE_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EC2TagFilterType(rawValue: rawValue) ?? EC2TagFilterType.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.EC2TagSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2TagSetList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2TagSetList = ec2TagSetList {
            var ec2TagSetListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagSetList)
            for ec2tagfilterlist0 in ec2TagSetList {
                var ec2tagfilterlist0Container = ec2TagSetListContainer.nestedUnkeyedContainer()
                for ec2tagfilter1 in ec2tagfilterlist0 {
                    try ec2tagfilterlist0Container.encode(ec2tagfilter1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2TagSetListContainer = try containerValues.decodeIfPresent([[CodeDeployClientTypes.EC2TagFilter?]?].self, forKey: .ec2TagSetList)
        var ec2TagSetListDecoded0:[[CodeDeployClientTypes.EC2TagFilter]]? = nil
        if let ec2TagSetListContainer = ec2TagSetListContainer {
            ec2TagSetListDecoded0 = [[CodeDeployClientTypes.EC2TagFilter]]()
            for list0 in ec2TagSetListContainer {
                var list0Decoded0: [CodeDeployClientTypes.EC2TagFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeDeployClientTypes.EC2TagFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    ec2TagSetListDecoded0?.append(list0Decoded0)
                }
            }
        }
        ec2TagSetList = ec2TagSetListDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about groups of Amazon EC2 instance tags.
    public struct EC2TagSet: Swift.Equatable {
        /// A list that contains other lists of Amazon EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.
        public var ec2TagSetList: [[CodeDeployClientTypes.EC2TagFilter]]?

        public init (
            ec2TagSetList: [[CodeDeployClientTypes.EC2TagFilter]]? = nil
        )
        {
            self.ec2TagSetList = ec2TagSetList
        }
    }

}

extension CodeDeployClientTypes.ECSService: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterName
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
    }
}

extension CodeDeployClientTypes {
    /// Contains the service and cluster names used to identify an Amazon ECS deployment's target.
    public struct ECSService: Swift.Equatable {
        /// The name of the cluster that the Amazon ECS service is associated with.
        public var clusterName: Swift.String?
        /// The name of the target Amazon ECS service.
        public var serviceName: Swift.String?

        public init (
            clusterName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.clusterName = clusterName
            self.serviceName = serviceName
        }
    }

}

extension ECSServiceMappingLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ECSServiceMappingLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Amazon ECS service is associated with more than one deployment groups. An Amazon ECS service can be associated with only one deployment group.
public struct ECSServiceMappingLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ECSServiceMappingLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ECSServiceMappingLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.ECSTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
        case taskSetsInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleevent0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleevent0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let taskSetsInfo = taskSetsInfo {
            var taskSetsInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskSetsInfo)
            for ecstaskset0 in taskSetsInfo {
                try taskSetsInfoContainer.encode(ecstaskset0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetStatus.self, forKey: .status)
        status = statusDecoded
        let taskSetsInfoContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ECSTaskSet?].self, forKey: .taskSetsInfo)
        var taskSetsInfoDecoded0:[CodeDeployClientTypes.ECSTaskSet]? = nil
        if let taskSetsInfoContainer = taskSetsInfoContainer {
            taskSetsInfoDecoded0 = [CodeDeployClientTypes.ECSTaskSet]()
            for structure0 in taskSetsInfoContainer {
                if let structure0 = structure0 {
                    taskSetsInfoDecoded0?.append(structure0)
                }
            }
        }
        taskSetsInfo = taskSetsInfoDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about the target of an Amazon ECS deployment.
    public struct ECSTarget: Swift.Equatable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// The date and time when the target Amazon ECS application was updated by a deployment.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The lifecycle events of the deployment to this target Amazon ECS application.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an Amazon ECS deployment's target ECS application.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of ecsTarget.
        public var targetId: Swift.String?
        /// The ECSTaskSet objects associated with the ECS target.
        public var taskSetsInfo: [CodeDeployClientTypes.ECSTaskSet]?

        public init (
            deploymentId: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil,
            taskSetsInfo: [CodeDeployClientTypes.ECSTaskSet]? = nil
        )
        {
            self.deploymentId = deploymentId
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
            self.taskSetsInfo = taskSetsInfo
        }
    }

}

extension CodeDeployClientTypes.ECSTaskSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCount
        case identifer
        case pendingCount
        case runningCount
        case status
        case targetGroup
        case taskSetLabel
        case trafficWeight
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredCount != 0 {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if let identifer = self.identifer {
            try encodeContainer.encode(identifer, forKey: .identifer)
        }
        if pendingCount != 0 {
            try encodeContainer.encode(pendingCount, forKey: .pendingCount)
        }
        if runningCount != 0 {
            try encodeContainer.encode(runningCount, forKey: .runningCount)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let targetGroup = self.targetGroup {
            try encodeContainer.encode(targetGroup, forKey: .targetGroup)
        }
        if let taskSetLabel = self.taskSetLabel {
            try encodeContainer.encode(taskSetLabel.rawValue, forKey: .taskSetLabel)
        }
        if trafficWeight != 0.0 {
            try encodeContainer.encode(trafficWeight, forKey: .trafficWeight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identiferDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifer)
        identifer = identiferDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCount) ?? 0
        desiredCount = desiredCountDecoded
        let pendingCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingCount) ?? 0
        pendingCount = pendingCountDecoded
        let runningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningCount) ?? 0
        runningCount = runningCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let trafficWeightDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .trafficWeight) ?? 0.0
        trafficWeight = trafficWeightDecoded
        let targetGroupDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetGroupInfo.self, forKey: .targetGroup)
        targetGroup = targetGroupDecoded
        let taskSetLabelDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetLabel.self, forKey: .taskSetLabel)
        taskSetLabel = taskSetLabelDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a set of Amazon ECS tasks in an CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set.
    public struct ECSTaskSet: Swift.Equatable {
        /// The number of tasks in a task set. During a deployment that uses the Amazon ECS compute type, CodeDeploy instructs Amazon ECS to create a new task set and uses this value to determine how many tasks to create. After the updated task set is created, CodeDeploy shifts traffic to the new task set.
        public var desiredCount: Swift.Int
        /// A unique ID of an ECSTaskSet.
        public var identifer: Swift.String?
        /// The number of tasks in the task set that are in the PENDING status during an Amazon ECS deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time, or when it is restarted after being in the STOPPED state.
        public var pendingCount: Swift.Int
        /// The number of tasks in the task set that are in the RUNNING status during an Amazon ECS deployment. A task in the RUNNING state is running and ready for use.
        public var runningCount: Swift.Int
        /// The status of the task set. There are three valid task set statuses:
        ///
        /// * PRIMARY: Indicates the task set is serving production traffic.
        ///
        /// * ACTIVE: Indicates the task set is not serving production traffic.
        ///
        /// * DRAINING: Indicates the tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group.
        public var status: Swift.String?
        /// The target group associated with the task set. The target group is used by CodeDeploy to manage traffic to a task set.
        public var targetGroup: CodeDeployClientTypes.TargetGroupInfo?
        /// A label that identifies whether the ECS task set is an original target (BLUE) or a replacement target (GREEN).
        public var taskSetLabel: CodeDeployClientTypes.TargetLabel?
        /// The percentage of traffic served by this task set.
        public var trafficWeight: Swift.Double

        public init (
            desiredCount: Swift.Int = 0,
            identifer: Swift.String? = nil,
            pendingCount: Swift.Int = 0,
            runningCount: Swift.Int = 0,
            status: Swift.String? = nil,
            targetGroup: CodeDeployClientTypes.TargetGroupInfo? = nil,
            taskSetLabel: CodeDeployClientTypes.TargetLabel? = nil,
            trafficWeight: Swift.Double = 0.0
        )
        {
            self.desiredCount = desiredCount
            self.identifer = identifer
            self.pendingCount = pendingCount
            self.runningCount = runningCount
            self.status = status
            self.targetGroup = targetGroup
            self.taskSetLabel = taskSetLabel
            self.trafficWeight = trafficWeight
        }
    }

}

extension CodeDeployClientTypes.ELBInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.
    public struct ELBInfo: Swift.Equatable {
        /// For blue/green deployments, the name of the load balancer that is used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodeDeployClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agentIssue
        case alarmActive
        case applicationMissing
        case autoscalingValidationError
        case autoScalingConfiguration
        case autoScalingIamRolePermissions
        case cloudformationStackFailure
        case codedeployResourceCannotBeFound
        case customerApplicationUnhealthy
        case deploymentGroupMissing
        case ecsUpdateError
        case elasticLoadBalancingInvalid
        case elbInvalidInstance
        case healthConstraints
        case healthConstraintsInvalid
        case hookExecutionFailure
        case iamRoleMissing
        case iamRolePermissions
        case internalError
        case invalidEcsService
        case invalidLambdaConfiguration
        case invalidLambdaFunction
        case invalidRevision
        case manualStop
        case missingBlueGreenDeploymentConfiguration
        case missingElbInformation
        case missingGithubToken
        case noEc2Subscription
        case noInstances
        case overMaxInstances
        case resourceLimitExceeded
        case revisionMissing
        case throttled
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .agentIssue,
                .alarmActive,
                .applicationMissing,
                .autoscalingValidationError,
                .autoScalingConfiguration,
                .autoScalingIamRolePermissions,
                .cloudformationStackFailure,
                .codedeployResourceCannotBeFound,
                .customerApplicationUnhealthy,
                .deploymentGroupMissing,
                .ecsUpdateError,
                .elasticLoadBalancingInvalid,
                .elbInvalidInstance,
                .healthConstraints,
                .healthConstraintsInvalid,
                .hookExecutionFailure,
                .iamRoleMissing,
                .iamRolePermissions,
                .internalError,
                .invalidEcsService,
                .invalidLambdaConfiguration,
                .invalidLambdaFunction,
                .invalidRevision,
                .manualStop,
                .missingBlueGreenDeploymentConfiguration,
                .missingElbInformation,
                .missingGithubToken,
                .noEc2Subscription,
                .noInstances,
                .overMaxInstances,
                .resourceLimitExceeded,
                .revisionMissing,
                .throttled,
                .timeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agentIssue: return "AGENT_ISSUE"
            case .alarmActive: return "ALARM_ACTIVE"
            case .applicationMissing: return "APPLICATION_MISSING"
            case .autoscalingValidationError: return "AUTOSCALING_VALIDATION_ERROR"
            case .autoScalingConfiguration: return "AUTO_SCALING_CONFIGURATION"
            case .autoScalingIamRolePermissions: return "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
            case .cloudformationStackFailure: return "CLOUDFORMATION_STACK_FAILURE"
            case .codedeployResourceCannotBeFound: return "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"
            case .customerApplicationUnhealthy: return "CUSTOMER_APPLICATION_UNHEALTHY"
            case .deploymentGroupMissing: return "DEPLOYMENT_GROUP_MISSING"
            case .ecsUpdateError: return "ECS_UPDATE_ERROR"
            case .elasticLoadBalancingInvalid: return "ELASTIC_LOAD_BALANCING_INVALID"
            case .elbInvalidInstance: return "ELB_INVALID_INSTANCE"
            case .healthConstraints: return "HEALTH_CONSTRAINTS"
            case .healthConstraintsInvalid: return "HEALTH_CONSTRAINTS_INVALID"
            case .hookExecutionFailure: return "HOOK_EXECUTION_FAILURE"
            case .iamRoleMissing: return "IAM_ROLE_MISSING"
            case .iamRolePermissions: return "IAM_ROLE_PERMISSIONS"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidEcsService: return "INVALID_ECS_SERVICE"
            case .invalidLambdaConfiguration: return "INVALID_LAMBDA_CONFIGURATION"
            case .invalidLambdaFunction: return "INVALID_LAMBDA_FUNCTION"
            case .invalidRevision: return "INVALID_REVISION"
            case .manualStop: return "MANUAL_STOP"
            case .missingBlueGreenDeploymentConfiguration: return "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
            case .missingElbInformation: return "MISSING_ELB_INFORMATION"
            case .missingGithubToken: return "MISSING_GITHUB_TOKEN"
            case .noEc2Subscription: return "NO_EC2_SUBSCRIPTION"
            case .noInstances: return "NO_INSTANCES"
            case .overMaxInstances: return "OVER_MAX_INSTANCES"
            case .resourceLimitExceeded: return "RESOURCE_LIMIT_EXCEEDED"
            case .revisionMissing: return "REVISION_MISSING"
            case .throttled: return "THROTTLED"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.ErrorInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ErrorCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment error.
    public struct ErrorInformation: Swift.Equatable {
        /// For more information, see [Error Codes for CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html) in the [CodeDeploy User Guide](https://docs.aws.amazon.com/codedeploy/latest/userguide). The error code:
        ///
        /// * APPLICATION_MISSING: The application was missing. This error code is most likely raised if the application is deleted after the deployment is created, but before it is started.
        ///
        /// * DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code is most likely raised if the deployment group is deleted after the deployment is created, but before it is started.
        ///
        /// * HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.
        ///
        /// * HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.
        ///
        /// * IAM_ROLE_MISSING: The service role cannot be accessed.
        ///
        /// * IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.
        ///
        /// * INTERNAL_ERROR: There was an internal error.
        ///
        /// * NO_EC2_SUBSCRIPTION: The calling account is not subscribed to Amazon EC2.
        ///
        /// * NO_INSTANCES: No instances were specified, or no instances can be found.
        ///
        /// * OVER_MAX_INSTANCES: The maximum number of instances was exceeded.
        ///
        /// * THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more Amazon Web Services services.
        ///
        /// * TIMEOUT: The deployment has timed out.
        ///
        /// * REVISION_MISSING: The revision ID was missing. This error code is most likely raised if the revision is deleted after the deployment is created, but before it is started.
        public var code: CodeDeployClientTypes.ErrorCode?
        /// An accompanying error message.
        public var message: Swift.String?

        public init (
            code: CodeDeployClientTypes.ErrorCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CodeDeployClientTypes {
    public enum FileExistsBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disallow
        case overwrite
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [FileExistsBehavior] {
            return [
                .disallow,
                .overwrite,
                .retain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disallow: return "DISALLOW"
            case .overwrite: return "OVERWRITE"
            case .retain: return "RETAIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileExistsBehavior(rawValue: rawValue) ?? FileExistsBehavior.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.GenericRevisionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentGroups
        case description
        case firstUsedTime
        case lastUsedTime
        case registerTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentGroups = deploymentGroups {
            var deploymentGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentGroups)
            for deploymentgroupname0 in deploymentGroups {
                try deploymentGroupsContainer.encode(deploymentgroupname0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firstUsedTime = self.firstUsedTime {
            try encodeContainer.encodeTimestamp(firstUsedTime, format: .epochSeconds, forKey: .firstUsedTime)
        }
        if let lastUsedTime = self.lastUsedTime {
            try encodeContainer.encodeTimestamp(lastUsedTime, format: .epochSeconds, forKey: .lastUsedTime)
        }
        if let registerTime = self.registerTime {
            try encodeContainer.encodeTimestamp(registerTime, format: .epochSeconds, forKey: .registerTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deploymentGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentGroups)
        var deploymentGroupsDecoded0:[Swift.String]? = nil
        if let deploymentGroupsContainer = deploymentGroupsContainer {
            deploymentGroupsDecoded0 = [Swift.String]()
            for string0 in deploymentGroupsContainer {
                if let string0 = string0 {
                    deploymentGroupsDecoded0?.append(string0)
                }
            }
        }
        deploymentGroups = deploymentGroupsDecoded0
        let firstUsedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .firstUsedTime)
        firstUsedTime = firstUsedTimeDecoded
        let lastUsedTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUsedTime)
        lastUsedTime = lastUsedTimeDecoded
        let registerTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .registerTime)
        registerTime = registerTimeDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an application revision.
    public struct GenericRevisionInfo: Swift.Equatable {
        /// The deployment groups for which this is the current target revision.
        public var deploymentGroups: [Swift.String]?
        /// A comment about the revision.
        public var description: Swift.String?
        /// When the revision was first used by CodeDeploy.
        public var firstUsedTime: ClientRuntime.Date?
        /// When the revision was last used by CodeDeploy.
        public var lastUsedTime: ClientRuntime.Date?
        /// When the revision was registered with CodeDeploy.
        public var registerTime: ClientRuntime.Date?

        public init (
            deploymentGroups: [Swift.String]? = nil,
            description: Swift.String? = nil,
            firstUsedTime: ClientRuntime.Date? = nil,
            lastUsedTime: ClientRuntime.Date? = nil,
            registerTime: ClientRuntime.Date? = nil
        )
        {
            self.deploymentGroups = deploymentGroups
            self.description = description
            self.firstUsedTime = firstUsedTime
            self.lastUsedTime = lastUsedTime
            self.registerTime = registerTime
        }
    }

}

extension GetApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
    }
}

extension GetApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetApplication operation.
public struct GetApplicationInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?

    public init (
        applicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

struct GetApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
}

extension GetApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
    }
}

extension GetApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApplicationOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetApplicationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.application = output.application
        } else {
            self.application = nil
        }
    }
}

/// Represents the output of a GetApplication operation.
public struct GetApplicationOutputResponse: Swift.Equatable {
    /// Information about the application.
    public var application: CodeDeployClientTypes.ApplicationInfo?

    public init (
        application: CodeDeployClientTypes.ApplicationInfo? = nil
    )
    {
        self.application = application
    }
}

struct GetApplicationOutputResponseBody: Swift.Equatable {
    let application: CodeDeployClientTypes.ApplicationInfo?
}

extension GetApplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case application
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ApplicationInfo.self, forKey: .application)
        application = applicationDecoded
    }
}

extension GetApplicationRevisionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case revision
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
    }
}

extension GetApplicationRevisionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetApplicationRevision operation.
public struct GetApplicationRevisionInput: Swift.Equatable {
    /// The name of the application that corresponds to the revision.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Information about the application revision to get, including type and location.
    /// This member is required.
    public var revision: CodeDeployClientTypes.RevisionLocation?

    public init (
        applicationName: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
    }
}

struct GetApplicationRevisionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let revision: CodeDeployClientTypes.RevisionLocation?
}

extension GetApplicationRevisionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case revision
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension GetApplicationRevisionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetApplicationRevisionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionDoesNotExistException" : self = .revisionDoesNotExistException(try RevisionDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetApplicationRevisionOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionDoesNotExistException(RevisionDoesNotExistException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetApplicationRevisionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetApplicationRevisionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.revision = output.revision
            self.revisionInfo = output.revisionInfo
        } else {
            self.applicationName = nil
            self.revision = nil
            self.revisionInfo = nil
        }
    }
}

/// Represents the output of a GetApplicationRevision operation.
public struct GetApplicationRevisionOutputResponse: Swift.Equatable {
    /// The name of the application that corresponds to the revision.
    public var applicationName: Swift.String?
    /// Additional information about the revision, including type and location.
    public var revision: CodeDeployClientTypes.RevisionLocation?
    /// General information about the revision.
    public var revisionInfo: CodeDeployClientTypes.GenericRevisionInfo?

    public init (
        applicationName: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil,
        revisionInfo: CodeDeployClientTypes.GenericRevisionInfo? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
        self.revisionInfo = revisionInfo
    }
}

struct GetApplicationRevisionOutputResponseBody: Swift.Equatable {
    let applicationName: Swift.String?
    let revision: CodeDeployClientTypes.RevisionLocation?
    let revisionInfo: CodeDeployClientTypes.GenericRevisionInfo?
}

extension GetApplicationRevisionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case revision
        case revisionInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let revisionInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.GenericRevisionInfo.self, forKey: .revisionInfo)
        revisionInfo = revisionInfoDecoded
    }
}

extension GetDeploymentConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
    }
}

extension GetDeploymentConfigInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetDeploymentConfig operation.
public struct GetDeploymentConfigInput: Swift.Equatable {
    /// The name of a deployment configuration associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var deploymentConfigName: Swift.String?

    public init (
        deploymentConfigName: Swift.String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

struct GetDeploymentConfigInputBody: Swift.Equatable {
    let deploymentConfigName: Swift.String?
}

extension GetDeploymentConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
    }
}

extension GetDeploymentConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigNameRequiredException" : self = .deploymentConfigNameRequiredException(try DeploymentConfigNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeploymentConfigOutputError: Swift.Error, Swift.Equatable {
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentConfigNameRequiredException(DeploymentConfigNameRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeploymentConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentConfigInfo = output.deploymentConfigInfo
        } else {
            self.deploymentConfigInfo = nil
        }
    }
}

/// Represents the output of a GetDeploymentConfig operation.
public struct GetDeploymentConfigOutputResponse: Swift.Equatable {
    /// Information about the deployment configuration.
    public var deploymentConfigInfo: CodeDeployClientTypes.DeploymentConfigInfo?

    public init (
        deploymentConfigInfo: CodeDeployClientTypes.DeploymentConfigInfo? = nil
    )
    {
        self.deploymentConfigInfo = deploymentConfigInfo
    }
}

struct GetDeploymentConfigOutputResponseBody: Swift.Equatable {
    let deploymentConfigInfo: CodeDeployClientTypes.DeploymentConfigInfo?
}

extension GetDeploymentConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentConfigInfo.self, forKey: .deploymentConfigInfo)
        deploymentConfigInfo = deploymentConfigInfoDecoded
    }
}

extension GetDeploymentGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
    }
}

extension GetDeploymentGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetDeploymentGroup operation.
public struct GetDeploymentGroupInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of a deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

struct GetDeploymentGroupInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
}

extension GetDeploymentGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
    }
}

extension GetDeploymentGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeploymentGroupOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentGroupInfo = output.deploymentGroupInfo
        } else {
            self.deploymentGroupInfo = nil
        }
    }
}

/// Represents the output of a GetDeploymentGroup operation.
public struct GetDeploymentGroupOutputResponse: Swift.Equatable {
    /// Information about the deployment group.
    public var deploymentGroupInfo: CodeDeployClientTypes.DeploymentGroupInfo?

    public init (
        deploymentGroupInfo: CodeDeployClientTypes.DeploymentGroupInfo? = nil
    )
    {
        self.deploymentGroupInfo = deploymentGroupInfo
    }
}

struct GetDeploymentGroupOutputResponseBody: Swift.Equatable {
    let deploymentGroupInfo: CodeDeployClientTypes.DeploymentGroupInfo?
}

extension GetDeploymentGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentGroupInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentGroupInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentGroupInfo.self, forKey: .deploymentGroupInfo)
        deploymentGroupInfo = deploymentGroupInfoDecoded
    }
}

extension GetDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

extension GetDeploymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetDeployment operation.
public struct GetDeploymentInput: Swift.Equatable {
    /// The unique ID of a deployment associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var deploymentId: Swift.String?

    public init (
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct GetDeploymentInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
}

extension GetDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

extension GetDeploymentInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }
}

extension GetDeploymentInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetDeploymentInstance operation.
public struct GetDeploymentInstanceInput: Swift.Equatable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique ID of an instance in the deployment group.
    /// This member is required.
    public var instanceId: Swift.String?

    public init (
        deploymentId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceId = instanceId
    }
}

struct GetDeploymentInstanceInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let instanceId: Swift.String?
}

extension GetDeploymentInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension GetDeploymentInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceDoesNotExistException" : self = .instanceDoesNotExistException(try InstanceDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceIdRequiredException" : self = .instanceIdRequiredException(try InstanceIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeploymentInstanceOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case instanceDoesNotExistException(InstanceDoesNotExistException)
    case instanceIdRequiredException(InstanceIdRequiredException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeploymentInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceSummary = output.instanceSummary
        } else {
            self.instanceSummary = nil
        }
    }
}

/// Represents the output of a GetDeploymentInstance operation.
public struct GetDeploymentInstanceOutputResponse: Swift.Equatable {
    /// Information about the instance.
    @available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
    public var instanceSummary: CodeDeployClientTypes.InstanceSummary?

    public init (
        instanceSummary: CodeDeployClientTypes.InstanceSummary? = nil
    )
    {
        self.instanceSummary = instanceSummary
    }
}

struct GetDeploymentInstanceOutputResponseBody: Swift.Equatable {
    let instanceSummary: CodeDeployClientTypes.InstanceSummary?
}

extension GetDeploymentInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSummary
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSummaryDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceSummary.self, forKey: .instanceSummary)
        instanceSummary = instanceSummaryDecoded
    }
}

extension GetDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeploymentOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentInfo = output.deploymentInfo
        } else {
            self.deploymentInfo = nil
        }
    }
}

/// Represents the output of a GetDeployment operation.
public struct GetDeploymentOutputResponse: Swift.Equatable {
    /// Information about the deployment.
    public var deploymentInfo: CodeDeployClientTypes.DeploymentInfo?

    public init (
        deploymentInfo: CodeDeployClientTypes.DeploymentInfo? = nil
    )
    {
        self.deploymentInfo = deploymentInfo
    }
}

struct GetDeploymentOutputResponseBody: Swift.Equatable {
    let deploymentInfo: CodeDeployClientTypes.DeploymentInfo?
}

extension GetDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentInfo.self, forKey: .deploymentInfo)
        deploymentInfo = deploymentInfoDecoded
    }
}

extension GetDeploymentTargetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case targetId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }
}

extension GetDeploymentTargetInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeploymentTargetInput: Swift.Equatable {
    /// The unique ID of a deployment.
    public var deploymentId: Swift.String?
    /// The unique ID of a deployment target.
    public var targetId: Swift.String?

    public init (
        deploymentId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetId = targetId
    }
}

struct GetDeploymentTargetInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let targetId: Swift.String?
}

extension GetDeploymentTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case targetId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
    }
}

extension GetDeploymentTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDeploymentTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetDoesNotExistException" : self = .deploymentTargetDoesNotExistException(try DeploymentTargetDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentTargetIdRequiredException" : self = .deploymentTargetIdRequiredException(try DeploymentTargetIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentTargetIdException" : self = .invalidDeploymentTargetIdException(try InvalidDeploymentTargetIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDeploymentTargetOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case deploymentTargetDoesNotExistException(DeploymentTargetDoesNotExistException)
    case deploymentTargetIdRequiredException(DeploymentTargetIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentTargetIdException(InvalidDeploymentTargetIdException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDeploymentTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDeploymentTargetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentTarget = output.deploymentTarget
        } else {
            self.deploymentTarget = nil
        }
    }
}

public struct GetDeploymentTargetOutputResponse: Swift.Equatable {
    /// A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (instanceTarget, lambdaTarget, or ecsTarget).
    public var deploymentTarget: CodeDeployClientTypes.DeploymentTarget?

    public init (
        deploymentTarget: CodeDeployClientTypes.DeploymentTarget? = nil
    )
    {
        self.deploymentTarget = deploymentTarget
    }
}

struct GetDeploymentTargetOutputResponseBody: Swift.Equatable {
    let deploymentTarget: CodeDeployClientTypes.DeploymentTarget?
}

extension GetDeploymentTargetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentTarget
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentTargetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentTarget.self, forKey: .deploymentTarget)
        deploymentTarget = deploymentTargetDecoded
    }
}

extension GetOnPremisesInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension GetOnPremisesInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a GetOnPremisesInstance operation.
public struct GetOnPremisesInstanceInput: Swift.Equatable {
    /// The name of the on-premises instance about which to get information.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

struct GetOnPremisesInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
}

extension GetOnPremisesInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
    }
}

extension GetOnPremisesInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOnPremisesInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetOnPremisesInstanceOutputError: Swift.Error, Swift.Equatable {
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOnPremisesInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetOnPremisesInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceInfo = output.instanceInfo
        } else {
            self.instanceInfo = nil
        }
    }
}

/// Represents the output of a GetOnPremisesInstance operation.
public struct GetOnPremisesInstanceOutputResponse: Swift.Equatable {
    /// Information about the on-premises instance.
    public var instanceInfo: CodeDeployClientTypes.InstanceInfo?

    public init (
        instanceInfo: CodeDeployClientTypes.InstanceInfo? = nil
    )
    {
        self.instanceInfo = instanceInfo
    }
}

struct GetOnPremisesInstanceOutputResponseBody: Swift.Equatable {
    let instanceInfo: CodeDeployClientTypes.InstanceInfo?
}

extension GetOnPremisesInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceInfo.self, forKey: .instanceInfo)
        instanceInfo = instanceInfoDecoded
    }
}

extension GitHubAccountTokenDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GitHubAccountTokenDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No GitHub account connection exists with the named specified in the call.
public struct GitHubAccountTokenDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GitHubAccountTokenDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GitHubAccountTokenDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension GitHubAccountTokenNameRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GitHubAccountTokenNameRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The call is missing a required GitHub account connection name.
public struct GitHubAccountTokenNameRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct GitHubAccountTokenNameRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension GitHubAccountTokenNameRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.GitHubLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitId
        case repository
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commitId = self.commitId {
            try encodeContainer.encode(commitId, forKey: .commitId)
        }
        if let repository = self.repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
        let commitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitId)
        commitId = commitIdDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the location of application artifacts stored in GitHub.
    public struct GitHubLocation: Swift.Equatable {
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        public var commitId: Swift.String?
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. Specified as account/repository.
        public var repository: Swift.String?

        public init (
            commitId: Swift.String? = nil,
            repository: Swift.String? = nil
        )
        {
            self.commitId = commitId
            self.repository = repository
        }
    }

}

extension CodeDeployClientTypes {
    public enum GreenFleetProvisioningAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case copyAutoScalingGroup
        case discoverExisting
        case sdkUnknown(Swift.String)

        public static var allCases: [GreenFleetProvisioningAction] {
            return [
                .copyAutoScalingGroup,
                .discoverExisting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .copyAutoScalingGroup: return "COPY_AUTO_SCALING_GROUP"
            case .discoverExisting: return "DISCOVER_EXISTING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GreenFleetProvisioningAction(rawValue: rawValue) ?? GreenFleetProvisioningAction.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.GreenFleetProvisioningOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.GreenFleetProvisioningAction.self, forKey: .action)
        action = actionDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the instances that belong to the replacement environment in a blue/green deployment.
    public struct GreenFleetProvisioningOption: Swift.Equatable {
        /// The method used to add instances to a replacement environment.
        ///
        /// * DISCOVER_EXISTING: Use instances that already exist or will be created manually.
        ///
        /// * COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.
        public var action: CodeDeployClientTypes.GreenFleetProvisioningAction?

        public init (
            action: CodeDeployClientTypes.GreenFleetProvisioningAction? = nil
        )
        {
            self.action = action
        }
    }

}

extension IamArnRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IamArnRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// No IAM ARN was included in the request. You must use an IAM session ARN or IAM user ARN in the request.
public struct IamArnRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IamArnRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IamArnRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamSessionArnAlreadyRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IamSessionArnAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request included an IAM session ARN that has already been used to register a different instance.
public struct IamSessionArnAlreadyRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IamSessionArnAlreadyRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IamSessionArnAlreadyRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamUserArnAlreadyRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IamUserArnAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified IAM user ARN is already registered with an on-premises instance.
public struct IamUserArnAlreadyRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IamUserArnAlreadyRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IamUserArnAlreadyRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension IamUserArnRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IamUserArnRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An IAM user ARN was not specified.
public struct IamUserArnRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IamUserArnRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension IamUserArnRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum InstanceAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keepAlive
        case terminate
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAction] {
            return [
                .keepAlive,
                .terminate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keepAlive: return "KEEP_ALIVE"
            case .terminate: return "TERMINATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceAction(rawValue: rawValue) ?? InstanceAction.sdkUnknown(rawValue)
        }
    }
}

extension InstanceDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified instance does not exist in the deployment group.
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetDoesNotExistException instead.")
public struct InstanceDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceIdRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceIdRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The instance ID was not specified.
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetIdRequiredException instead.")
public struct InstanceIdRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceIdRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceIdRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.InstanceInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deregisterTime
        case iamSessionArn
        case iamUserArn
        case instanceArn
        case instanceName
        case registerTime
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deregisterTime = self.deregisterTime {
            try encodeContainer.encodeTimestamp(deregisterTime, format: .epochSeconds, forKey: .deregisterTime)
        }
        if let iamSessionArn = self.iamSessionArn {
            try encodeContainer.encode(iamSessionArn, forKey: .iamSessionArn)
        }
        if let iamUserArn = self.iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let registerTime = self.registerTime {
            try encodeContainer.encodeTimestamp(registerTime, format: .epochSeconds, forKey: .registerTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let iamSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamSessionArn)
        iamSessionArn = iamSessionArnDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let registerTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .registerTime)
        registerTime = registerTimeDecoded
        let deregisterTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .deregisterTime)
        deregisterTime = deregisterTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about an on-premises instance.
    public struct InstanceInfo: Swift.Equatable {
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        public var deregisterTime: ClientRuntime.Date?
        /// The ARN of the IAM session associated with the on-premises instance.
        public var iamSessionArn: Swift.String?
        /// The IAM user ARN associated with the on-premises instance.
        public var iamUserArn: Swift.String?
        /// The ARN of the on-premises instance.
        public var instanceArn: Swift.String?
        /// The name of the on-premises instance.
        public var instanceName: Swift.String?
        /// The time at which the on-premises instance was registered.
        public var registerTime: ClientRuntime.Date?
        /// The tags currently associated with the on-premises instance.
        public var tags: [CodeDeployClientTypes.Tag]?

        public init (
            deregisterTime: ClientRuntime.Date? = nil,
            iamSessionArn: Swift.String? = nil,
            iamUserArn: Swift.String? = nil,
            instanceArn: Swift.String? = nil,
            instanceName: Swift.String? = nil,
            registerTime: ClientRuntime.Date? = nil,
            tags: [CodeDeployClientTypes.Tag]? = nil
        )
        {
            self.deregisterTime = deregisterTime
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.registerTime = registerTime
            self.tags = tags
        }
    }

}

extension InstanceLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum number of allowed on-premises instances in a single call was exceeded.
public struct InstanceLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNameAlreadyRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceNameAlreadyRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified on-premises instance name is already registered.
public struct InstanceNameAlreadyRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNameAlreadyRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceNameAlreadyRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNameRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceNameRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An on-premises instance name was not specified.
public struct InstanceNameRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNameRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceNameRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InstanceNotRegisteredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InstanceNotRegisteredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified on-premises instance is not registered.
public struct InstanceNotRegisteredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceNotRegisteredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InstanceNotRegisteredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    @available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
    public enum InstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case ready
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .ready,
                .skipped,
                .succeeded,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .ready: return "Ready"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceStatus(rawValue: rawValue) ?? InstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.InstanceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceId
        case instanceType
        case lastUpdatedAt
        case lifecycleEvents
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleevent0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleevent0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an instance in a deployment.
    @available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
    public struct InstanceSummary: Swift.Equatable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// The instance ID.
        public var instanceId: Swift.String?
        /// Information about which environment an instance belongs to in a blue/green deployment.
        ///
        /// * BLUE: The instance is part of the original environment.
        ///
        /// * GREEN: The instance is part of the replacement environment.
        public var instanceType: CodeDeployClientTypes.InstanceType?
        /// A timestamp that indicates when the instance information was last updated.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// A list of lifecycle events for this instance.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The deployment status for this instance:
        ///
        /// * Pending: The deployment is pending for this instance.
        ///
        /// * In Progress: The deployment is in progress for this instance.
        ///
        /// * Succeeded: The deployment has succeeded for this instance.
        ///
        /// * Failed: The deployment has failed for this instance.
        ///
        /// * Skipped: The deployment has been skipped for this instance.
        ///
        /// * Unknown: The deployment status is unknown for this instance.
        @available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
        public var status: CodeDeployClientTypes.InstanceStatus?

        public init (
            deploymentId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: CodeDeployClientTypes.InstanceType? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.InstanceStatus? = nil
        )
        {
            self.deploymentId = deploymentId
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
        }
    }

}

extension CodeDeployClientTypes.InstanceTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceLabel
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceLabel = self.instanceLabel {
            try encodeContainer.encode(instanceLabel.rawValue, forKey: .instanceLabel)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleevent0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleevent0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let instanceLabelDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetLabel.self, forKey: .instanceLabel)
        instanceLabel = instanceLabelDecoded
    }
}

extension CodeDeployClientTypes {
    /// A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform.
    public struct InstanceTarget: Swift.Equatable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A label that identifies whether the instance is an original target (BLUE) or a replacement target (GREEN).
        public var instanceLabel: CodeDeployClientTypes.TargetLabel?
        /// The date and time when the target instance was updated by a deployment.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The lifecycle events of the deployment to this target instance.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an EC2/On-premises deployment's target instance.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of instanceTarget.
        public var targetId: Swift.String?

        public init (
            deploymentId: Swift.String? = nil,
            instanceLabel: CodeDeployClientTypes.TargetLabel? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.deploymentId = deploymentId
            self.instanceLabel = instanceLabel
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
        }
    }

}

extension CodeDeployClientTypes {
    public enum InstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blue
        case green
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceType] {
            return [
                .blue,
                .green,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blue: return "Blue"
            case .green: return "Green"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceType(rawValue: rawValue) ?? InstanceType.sdkUnknown(rawValue)
        }
    }
}

extension InvalidAlarmConfigException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidAlarmConfigExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The format of the alarm configuration is invalid. Possible causes include:
///
/// * The alarm list is null.
///
/// * The alarm object is null.
///
/// * The alarm name is empty or null or exceeds the limit of 255 characters.
///
/// * Two alarms with the same name have been specified.
///
/// * The alarm configuration is enabled, but the alarm list is empty.
public struct InvalidAlarmConfigException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAlarmConfigExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAlarmConfigExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidApplicationNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidApplicationNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The application name was specified in an invalid format.
public struct InvalidApplicationNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidApplicationNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidApplicationNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified ARN is not in a valid format.
public struct InvalidArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAutoRollbackConfigException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidAutoRollbackConfigExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The automatic rollback configuration was specified in an invalid format. For example, automatic rollback is enabled, but an invalid triggering event type or no event types were listed.
public struct InvalidAutoRollbackConfigException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAutoRollbackConfigExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAutoRollbackConfigExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidAutoScalingGroupException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidAutoScalingGroupExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Auto Scaling group was specified in an invalid format or does not exist.
public struct InvalidAutoScalingGroupException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidAutoScalingGroupExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidAutoScalingGroupExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidBlueGreenDeploymentConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidBlueGreenDeploymentConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The configuration for the blue/green deployment group was provided in an invalid format. For information about deployment configuration format, see [CreateDeploymentConfig].
public struct InvalidBlueGreenDeploymentConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidBlueGreenDeploymentConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidBlueGreenDeploymentConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidBucketNameFilterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidBucketNameFilterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The bucket name either doesn't exist or was specified in an invalid format.
public struct InvalidBucketNameFilterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidBucketNameFilterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidBucketNameFilterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidComputePlatformException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidComputePlatformExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The computePlatform is invalid. The computePlatform should be Lambda, Server, or ECS.
public struct InvalidComputePlatformException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidComputePlatformExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidComputePlatformExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeployedStateFilterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeployedStateFilterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployed state filter was specified in an invalid format.
public struct InvalidDeployedStateFilterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeployedStateFilterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeployedStateFilterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentConfigNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentConfigNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment configuration name was specified in an invalid format.
public struct InvalidDeploymentConfigNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentConfigNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentConfigNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentGroupNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentGroupNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The deployment group name was specified in an invalid format.
public struct InvalidDeploymentGroupNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentGroupNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentGroupNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// At least one of the deployment IDs was specified in an invalid format.
public struct InvalidDeploymentIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentInstanceTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentInstanceTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An instance type was specified for an in-place deployment. Instance types are supported for blue/green deployments only.
public struct InvalidDeploymentInstanceTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentInstanceTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentInstanceTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified deployment status doesn't exist or cannot be determined.
public struct InvalidDeploymentStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentStyleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentStyleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid deployment style was specified. Valid deployment types include "IN_PLACE" and "BLUE_GREEN." Valid deployment options include "WITH_TRAFFIC_CONTROL" and "WITHOUT_TRAFFIC_CONTROL."
public struct InvalidDeploymentStyleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentStyleExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentStyleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentTargetIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentTargetIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The target ID provided was not valid.
public struct InvalidDeploymentTargetIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentTargetIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentTargetIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeploymentWaitTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidDeploymentWaitTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The wait type is invalid.
public struct InvalidDeploymentWaitTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeploymentWaitTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidDeploymentWaitTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEC2TagCombinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidEC2TagCombinationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A call was submitted that specified both Ec2TagFilters and Ec2TagSet, but only one of these data types can be used in a single call.
public struct InvalidEC2TagCombinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEC2TagCombinationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidEC2TagCombinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidEC2TagException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidEC2TagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The tag was specified in an invalid format.
public struct InvalidEC2TagException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidEC2TagExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidEC2TagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidECSServiceException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidECSServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The Amazon ECS service identifier is not valid.
public struct InvalidECSServiceException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidECSServiceExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidECSServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExternalIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidExternalIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The external ID was specified in an invalid format.
public struct InvalidExternalIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExternalIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidExternalIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidFileExistsBehaviorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidFileExistsBehaviorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid fileExistsBehavior option was specified to determine how CodeDeploy handles files or directories that already exist in a deployment target location, but weren't part of the previous successful deployment. Valid values include "DISALLOW," "OVERWRITE," and "RETAIN."
public struct InvalidFileExistsBehaviorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidFileExistsBehaviorExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidFileExistsBehaviorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGitHubAccountTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidGitHubAccountTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The GitHub token is not valid.
public struct InvalidGitHubAccountTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGitHubAccountTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGitHubAccountTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidGitHubAccountTokenNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidGitHubAccountTokenNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The format of the specified GitHub account connection name is invalid.
public struct InvalidGitHubAccountTokenNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidGitHubAccountTokenNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidGitHubAccountTokenNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIamSessionArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidIamSessionArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The IAM session ARN was specified in an invalid format.
public struct InvalidIamSessionArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIamSessionArnExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidIamSessionArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIamUserArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidIamUserArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The IAM user ARN was specified in an invalid format.
public struct InvalidIamUserArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIamUserArnExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidIamUserArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidIgnoreApplicationStopFailuresValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidIgnoreApplicationStopFailuresValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The IgnoreApplicationStopFailures value is invalid. For Lambda deployments, false is expected. For EC2/On-premises deployments, true or false is expected.
public struct InvalidIgnoreApplicationStopFailuresValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidIgnoreApplicationStopFailuresValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidIgnoreApplicationStopFailuresValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The input was specified in an invalid format.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInstanceNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The on-premises instance name was specified in an invalid format.
public struct InvalidInstanceNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidInstanceNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInstanceStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified instance status does not exist.
public struct InvalidInstanceStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidInstanceStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInstanceTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInstanceTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid instance type was specified for instances in a blue/green deployment. Valid values include "Blue" for an original environment and "Green" for a replacement environment.
public struct InvalidInstanceTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInstanceTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidInstanceTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKeyPrefixFilterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidKeyPrefixFilterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified key prefix filter was specified in an invalid format.
public struct InvalidKeyPrefixFilterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKeyPrefixFilterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidKeyPrefixFilterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLifecycleEventHookExecutionIdException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidLifecycleEventHookExecutionIdExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A lifecycle event hook is invalid. Review the hooks section in your AppSpec file to ensure the lifecycle events and hooks functions are valid.
public struct InvalidLifecycleEventHookExecutionIdException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLifecycleEventHookExecutionIdExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidLifecycleEventHookExecutionIdExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLifecycleEventHookExecutionStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidLifecycleEventHookExecutionStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The result of a Lambda validation function that verifies a lifecycle event is invalid. It should return Succeeded or Failed.
public struct InvalidLifecycleEventHookExecutionStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLifecycleEventHookExecutionStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidLifecycleEventHookExecutionStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLoadBalancerInfoException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidLoadBalancerInfoExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid load balancer name, or no load balancer name, was specified.
public struct InvalidLoadBalancerInfoException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLoadBalancerInfoExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidLoadBalancerInfoExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidMinimumHealthyHostValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidMinimumHealthyHostValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The minimum healthy instance value was specified in an invalid format.
public struct InvalidMinimumHealthyHostValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidMinimumHealthyHostValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidMinimumHealthyHostValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The next token was specified in an invalid format.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOnPremisesTagCombinationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOnPremisesTagCombinationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A call was submitted that specified both OnPremisesTagFilters and OnPremisesTagSet, but only one of these data types can be used in a single call.
public struct InvalidOnPremisesTagCombinationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOnPremisesTagCombinationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOnPremisesTagCombinationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An invalid operation was detected.
public struct InvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRegistrationStatusException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRegistrationStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The registration status was specified in an invalid format.
public struct InvalidRegistrationStatusException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRegistrationStatusExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRegistrationStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRevisionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRevisionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The revision was specified in an invalid format.
public struct InvalidRevisionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRevisionExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRevisionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRoleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidRoleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service role ARN was specified in an invalid format. Or, if an Auto Scaling group was specified, the specified service role does not grant the appropriate permissions to Amazon EC2 Auto Scaling.
public struct InvalidRoleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRoleExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidRoleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSortByException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSortByExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The column name to sort by is either not present or was specified in an invalid format.
public struct InvalidSortByException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSortByExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSortByExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSortOrderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSortOrderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The sort order was specified in an invalid format.
public struct InvalidSortOrderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSortOrderExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidSortOrderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The tag was specified in an invalid format.
public struct InvalidTagException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagFilterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTagFilterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The tag filter was specified in an invalid format.
public struct InvalidTagFilterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagFilterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagFilterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagsToAddException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTagsToAddExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified tags are not valid.
public struct InvalidTagsToAddException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagsToAddExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagsToAddExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetFilterNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTargetFilterNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The target filter name is invalid.
public struct InvalidTargetFilterNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetFilterNameExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTargetFilterNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetGroupPairException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTargetGroupPairExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A target group pair associated with this deployment is not valid.
public struct InvalidTargetGroupPairException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetGroupPairExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTargetGroupPairExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTargetInstancesException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTargetInstancesExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The target instance configuration is invalid. Possible causes include:
///
/// * Configuration data for target instances was entered for an in-place deployment.
///
/// * The limit of 10 tags for a tag type was exceeded.
///
/// * The combined length of the tag names exceeded the limit.
///
/// * A specified tag is not currently applied to any instances.
public struct InvalidTargetInstancesException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTargetInstancesExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTargetInstancesExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTimeRangeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTimeRangeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified time range was specified in an invalid format.
public struct InvalidTimeRangeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTimeRangeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTimeRangeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTrafficRoutingConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTrafficRoutingConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The configuration that specifies how traffic is routed during a deployment is invalid.
public struct InvalidTrafficRoutingConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTrafficRoutingConfigurationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTrafficRoutingConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTriggerConfigException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTriggerConfigExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The trigger was specified in an invalid format.
public struct InvalidTriggerConfigException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTriggerConfigExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTriggerConfigExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidUpdateOutdatedInstancesOnlyValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidUpdateOutdatedInstancesOnlyValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The UpdateOutdatedInstancesOnly value is invalid. For Lambda deployments, false is expected. For EC2/On-premises deployments, true or false is expected.
public struct InvalidUpdateOutdatedInstancesOnlyValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidUpdateOutdatedInstancesOnlyValueExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidUpdateOutdatedInstancesOnlyValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.LambdaFunctionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentVersion
        case functionAlias
        case functionName
        case targetVersion
        case targetVersionWeight
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentVersion = self.currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let functionAlias = self.functionAlias {
            try encodeContainer.encode(functionAlias, forKey: .functionAlias)
        }
        if let functionName = self.functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let targetVersion = self.targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
        if targetVersionWeight != 0.0 {
            try encodeContainer.encode(targetVersionWeight, forKey: .targetVersionWeight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let functionAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionAlias)
        functionAlias = functionAliasDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let targetVersionWeightDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetVersionWeight) ?? 0.0
        targetVersionWeight = targetVersionWeightDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a Lambda function specified in a deployment.
    public struct LambdaFunctionInfo: Swift.Equatable {
        /// The version of a Lambda function that production traffic points to.
        public var currentVersion: Swift.String?
        /// The alias of a Lambda function. For more information, see [Lambda Function Aliases](https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html) in the Lambda Developer Guide.
        public var functionAlias: Swift.String?
        /// The name of a Lambda function.
        public var functionName: Swift.String?
        /// The version of a Lambda function that production traffic points to after the Lambda function is deployed.
        public var targetVersion: Swift.String?
        /// The percentage of production traffic that the target version of a Lambda function receives.
        public var targetVersionWeight: Swift.Double

        public init (
            currentVersion: Swift.String? = nil,
            functionAlias: Swift.String? = nil,
            functionName: Swift.String? = nil,
            targetVersion: Swift.String? = nil,
            targetVersionWeight: Swift.Double = 0.0
        )
        {
            self.currentVersion = currentVersion
            self.functionAlias = functionAlias
            self.functionName = functionName
            self.targetVersion = targetVersion
            self.targetVersionWeight = targetVersionWeight
        }
    }

}

extension CodeDeployClientTypes.LambdaTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lambdaFunctionInfo
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lambdaFunctionInfo = self.lambdaFunctionInfo {
            try encodeContainer.encode(lambdaFunctionInfo, forKey: .lambdaFunctionInfo)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleevent0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleevent0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetStatus.self, forKey: .status)
        status = statusDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let lambdaFunctionInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LambdaFunctionInfo.self, forKey: .lambdaFunctionInfo)
        lambdaFunctionInfo = lambdaFunctionInfoDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the target Lambda function during an Lambda deployment.
    public struct LambdaTarget: Swift.Equatable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A LambdaFunctionInfo object that describes a target Lambda function.
        public var lambdaFunctionInfo: CodeDeployClientTypes.LambdaFunctionInfo?
        /// The date and time when the target Lambda function was updated by a deployment.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The lifecycle events of the deployment to this target Lambda function.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an Lambda deployment's target Lambda function.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of lambdaTarget.
        public var targetId: Swift.String?

        public init (
            deploymentId: Swift.String? = nil,
            lambdaFunctionInfo: CodeDeployClientTypes.LambdaFunctionInfo? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.deploymentId = deploymentId
            self.lambdaFunctionInfo = lambdaFunctionInfo
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
        }
    }

}

extension CodeDeployClientTypes.LastDeploymentInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case deploymentId
        case endTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = self.createTime {
            try encodeContainer.encodeTimestamp(createTime, format: .epochSeconds, forKey: .createTime)
        }
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStatus.self, forKey: .status)
        status = statusDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let createTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createTime)
        createTime = createTimeDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the most recent attempted or successful deployment to a deployment group.
    public struct LastDeploymentInfo: Swift.Equatable {
        /// A timestamp that indicates when the most recent deployment to the deployment group started.
        public var createTime: ClientRuntime.Date?
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A timestamp that indicates when the most recent deployment to the deployment group was complete.
        public var endTime: ClientRuntime.Date?
        /// The status of the most recent deployment.
        public var status: CodeDeployClientTypes.DeploymentStatus?

        public init (
            createTime: ClientRuntime.Date? = nil,
            deploymentId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            status: CodeDeployClientTypes.DeploymentStatus? = nil
        )
        {
            self.createTime = createTime
            self.deploymentId = deploymentId
            self.endTime = endTime
            self.status = status
        }
    }

}

extension CodeDeployClientTypes {
    public enum LifecycleErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case scriptFailed
        case scriptMissing
        case scriptNotExecutable
        case scriptTimedOut
        case success
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleErrorCode] {
            return [
                .scriptFailed,
                .scriptMissing,
                .scriptNotExecutable,
                .scriptTimedOut,
                .success,
                .unknownError,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .scriptFailed: return "ScriptFailed"
            case .scriptMissing: return "ScriptMissing"
            case .scriptNotExecutable: return "ScriptNotExecutable"
            case .scriptTimedOut: return "ScriptTimedOut"
            case .success: return "Success"
            case .unknownError: return "UnknownError"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LifecycleErrorCode(rawValue: rawValue) ?? LifecycleErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.LifecycleEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diagnostics
        case endTime
        case lifecycleEventName
        case startTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = self.diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let lifecycleEventName = self.lifecycleEventName {
            try encodeContainer.encode(lifecycleEventName, forKey: .lifecycleEventName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleEventNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleEventName)
        lifecycleEventName = lifecycleEventNameDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.Diagnostics.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LifecycleEventStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment lifecycle event.
    public struct LifecycleEvent: Swift.Equatable {
        /// Diagnostic information about the deployment lifecycle event.
        public var diagnostics: CodeDeployClientTypes.Diagnostics?
        /// A timestamp that indicates when the deployment lifecycle event ended.
        public var endTime: ClientRuntime.Date?
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        public var lifecycleEventName: Swift.String?
        /// A timestamp that indicates when the deployment lifecycle event started.
        public var startTime: ClientRuntime.Date?
        /// The deployment lifecycle event status:
        ///
        /// * Pending: The deployment lifecycle event is pending.
        ///
        /// * InProgress: The deployment lifecycle event is in progress.
        ///
        /// * Succeeded: The deployment lifecycle event ran successfully.
        ///
        /// * Failed: The deployment lifecycle event has failed.
        ///
        /// * Skipped: The deployment lifecycle event has been skipped.
        ///
        /// * Unknown: The deployment lifecycle event is unknown.
        public var status: CodeDeployClientTypes.LifecycleEventStatus?

        public init (
            diagnostics: CodeDeployClientTypes.Diagnostics? = nil,
            endTime: ClientRuntime.Date? = nil,
            lifecycleEventName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: CodeDeployClientTypes.LifecycleEventStatus? = nil
        )
        {
            self.diagnostics = diagnostics
            self.endTime = endTime
            self.lifecycleEventName = lifecycleEventName
            self.startTime = startTime
            self.status = status
        }
    }

}

extension LifecycleEventAlreadyCompletedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LifecycleEventAlreadyCompletedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An attempt to return the status of an already completed lifecycle event occurred.
public struct LifecycleEventAlreadyCompletedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LifecycleEventAlreadyCompletedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LifecycleEventAlreadyCompletedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum LifecycleEventStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleEventStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .skipped,
                .succeeded,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LifecycleEventStatus(rawValue: rawValue) ?? LifecycleEventStatus.sdkUnknown(rawValue)
        }
    }
}

extension LifecycleHookLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LifecycleHookLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The limit for lifecycle hooks was exceeded.
public struct LifecycleHookLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LifecycleHookLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LifecycleHookLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListApplicationRevisionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deployed
        case nextToken
        case s3Bucket
        case s3KeyPrefix
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let deployed = self.deployed {
            try encodeContainer.encode(deployed.rawValue, forKey: .deployed)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let s3Bucket = self.s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3KeyPrefix = self.s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension ListApplicationRevisionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListApplicationRevisions operation.
public struct ListApplicationRevisionsInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Whether to list revisions based on whether the revision is the target revision of a deployment group:
    ///
    /// * include: List revisions that are target revisions of a deployment group.
    ///
    /// * exclude: Do not list revisions that are target revisions of a deployment group.
    ///
    /// * ignore: List all revisions.
    public var deployed: CodeDeployClientTypes.ListStateFilterAction?
    /// An identifier returned from the previous ListApplicationRevisions call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?
    /// An Amazon S3 bucket name to limit the search for revisions. If set to null, all of the user's buckets are searched.
    public var s3Bucket: Swift.String?
    /// A key prefix for the set of Amazon S3 objects to limit the search for revisions.
    public var s3KeyPrefix: Swift.String?
    /// The column name to use to sort the list results:
    ///
    /// * registerTime: Sort by the time the revisions were registered with CodeDeploy.
    ///
    /// * firstUsedTime: Sort by the time the revisions were first used in a deployment.
    ///
    /// * lastUsedTime: Sort by the time the revisions were last used in a deployment.
    ///
    ///
    /// If not specified or set to null, the results are returned in an arbitrary order.
    public var sortBy: CodeDeployClientTypes.ApplicationRevisionSortBy?
    /// The order in which to sort the list results:
    ///
    /// * ascending: ascending order.
    ///
    /// * descending: descending order.
    ///
    ///
    /// If not specified, the results are sorted in ascending order. If set to null, the results are sorted in an arbitrary order.
    public var sortOrder: CodeDeployClientTypes.SortOrder?

    public init (
        applicationName: Swift.String? = nil,
        deployed: CodeDeployClientTypes.ListStateFilterAction? = nil,
        nextToken: Swift.String? = nil,
        s3Bucket: Swift.String? = nil,
        s3KeyPrefix: Swift.String? = nil,
        sortBy: CodeDeployClientTypes.ApplicationRevisionSortBy? = nil,
        sortOrder: CodeDeployClientTypes.SortOrder? = nil
    )
    {
        self.applicationName = applicationName
        self.deployed = deployed
        self.nextToken = nextToken
        self.s3Bucket = s3Bucket
        self.s3KeyPrefix = s3KeyPrefix
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

struct ListApplicationRevisionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let sortBy: CodeDeployClientTypes.ApplicationRevisionSortBy?
    let sortOrder: CodeDeployClientTypes.SortOrder?
    let s3Bucket: Swift.String?
    let s3KeyPrefix: Swift.String?
    let deployed: CodeDeployClientTypes.ListStateFilterAction?
    let nextToken: Swift.String?
}

extension ListApplicationRevisionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deployed
        case nextToken
        case s3Bucket
        case s3KeyPrefix
        case sortBy
        case sortOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ApplicationRevisionSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let deployedDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ListStateFilterAction.self, forKey: .deployed)
        deployed = deployedDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListApplicationRevisionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListApplicationRevisionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "BucketNameFilterRequiredException" : self = .bucketNameFilterRequiredException(try BucketNameFilterRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBucketNameFilterException" : self = .invalidBucketNameFilterException(try InvalidBucketNameFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeployedStateFilterException" : self = .invalidDeployedStateFilterException(try InvalidDeployedStateFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyPrefixFilterException" : self = .invalidKeyPrefixFilterException(try InvalidKeyPrefixFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSortByException" : self = .invalidSortByException(try InvalidSortByException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSortOrderException" : self = .invalidSortOrderException(try InvalidSortOrderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListApplicationRevisionsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case bucketNameFilterRequiredException(BucketNameFilterRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidBucketNameFilterException(InvalidBucketNameFilterException)
    case invalidDeployedStateFilterException(InvalidDeployedStateFilterException)
    case invalidKeyPrefixFilterException(InvalidKeyPrefixFilterException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidSortByException(InvalidSortByException)
    case invalidSortOrderException(InvalidSortOrderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListApplicationRevisionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListApplicationRevisionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.revisions = output.revisions
        } else {
            self.nextToken = nil
            self.revisions = nil
        }
    }
}

/// Represents the output of a ListApplicationRevisions operation.
public struct ListApplicationRevisionsOutputResponse: Swift.Equatable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
    public var nextToken: Swift.String?
    /// A list of locations that contain the matching revisions.
    public var revisions: [CodeDeployClientTypes.RevisionLocation]?

    public init (
        nextToken: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionLocation]? = nil
    )
    {
        self.nextToken = nextToken
        self.revisions = revisions
    }
}

struct ListApplicationRevisionsOutputResponseBody: Swift.Equatable {
    let revisions: [CodeDeployClientTypes.RevisionLocation]?
    let nextToken: Swift.String?
}

extension ListApplicationRevisionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case revisions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.RevisionLocation?].self, forKey: .revisions)
        var revisionsDecoded0:[CodeDeployClientTypes.RevisionLocation]? = nil
        if let revisionsContainer = revisionsContainer {
            revisionsDecoded0 = [CodeDeployClientTypes.RevisionLocation]()
            for structure0 in revisionsContainer {
                if let structure0 = structure0 {
                    revisionsDecoded0?.append(structure0)
                }
            }
        }
        revisions = revisionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListApplicationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListApplicationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListApplications operation.
public struct ListApplicationsInput: Swift.Equatable {
    /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListApplicationsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension ListApplicationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListApplicationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListApplicationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListApplicationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListApplicationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListApplicationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applications = output.applications
            self.nextToken = output.nextToken
        } else {
            self.applications = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListApplications operation.
public struct ListApplicationsOutputResponse: Swift.Equatable {
    /// A list of application names.
    public var applications: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications in the list.
    public var nextToken: Swift.String?

    public init (
        applications: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applications = applications
        self.nextToken = nextToken
    }
}

struct ListApplicationsOutputResponseBody: Swift.Equatable {
    let applications: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListApplicationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .applications)
        var applicationsDecoded0:[Swift.String]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [Swift.String]()
            for string0 in applicationsContainer {
                if let string0 = string0 {
                    applicationsDecoded0?.append(string0)
                }
            }
        }
        applications = applicationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentConfigsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDeploymentConfigsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListDeploymentConfigs operation.
public struct ListDeploymentConfigsInput: Swift.Equatable {
    /// An identifier returned from the previous ListDeploymentConfigs call. It can be used to return the next set of deployment configurations in the list.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListDeploymentConfigsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension ListDeploymentConfigsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeploymentConfigsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeploymentConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deploymentConfigsList = output.deploymentConfigsList
            self.nextToken = output.nextToken
        } else {
            self.deploymentConfigsList = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListDeploymentConfigs operation.
public struct ListDeploymentConfigsOutputResponse: Swift.Equatable {
    /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
    public var deploymentConfigsList: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
    public var nextToken: Swift.String?

    public init (
        deploymentConfigsList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deploymentConfigsList = deploymentConfigsList
        self.nextToken = nextToken
    }
}

struct ListDeploymentConfigsOutputResponseBody: Swift.Equatable {
    let deploymentConfigsList: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeploymentConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentConfigsList
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigsListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentConfigsList)
        var deploymentConfigsListDecoded0:[Swift.String]? = nil
        if let deploymentConfigsListContainer = deploymentConfigsListContainer {
            deploymentConfigsListDecoded0 = [Swift.String]()
            for string0 in deploymentConfigsListContainer {
                if let string0 = string0 {
                    deploymentConfigsListDecoded0?.append(string0)
                }
            }
        }
        deploymentConfigsList = deploymentConfigsListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDeploymentGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListDeploymentGroups operation.
public struct ListDeploymentGroupsInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
    public var nextToken: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.nextToken = nextToken
    }
}

struct ListDeploymentGroupsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let nextToken: Swift.String?
}

extension ListDeploymentGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeploymentGroupsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeploymentGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.applicationName = output.applicationName
            self.deploymentGroups = output.deploymentGroups
            self.nextToken = output.nextToken
        } else {
            self.applicationName = nil
            self.deploymentGroups = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListDeploymentGroups operation.
public struct ListDeploymentGroupsOutputResponse: Swift.Equatable {
    /// The application name.
    public var applicationName: Swift.String?
    /// A list of deployment group names.
    public var deploymentGroups: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
    public var nextToken: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        deploymentGroups: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroups = deploymentGroups
        self.nextToken = nextToken
    }
}

struct ListDeploymentGroupsOutputResponseBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroups: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeploymentGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case deploymentGroups
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentGroups)
        var deploymentGroupsDecoded0:[Swift.String]? = nil
        if let deploymentGroupsContainer = deploymentGroupsContainer {
            deploymentGroupsDecoded0 = [Swift.String]()
            for string0 in deploymentGroupsContainer {
                if let string0 = string0 {
                    deploymentGroupsDecoded0?.append(string0)
                }
            }
        }
        deploymentGroups = deploymentGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceStatusFilter
        case instanceTypeFilter
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let instanceStatusFilter = instanceStatusFilter {
            var instanceStatusFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceStatusFilter)
            for instancestatus0 in instanceStatusFilter {
                try instanceStatusFilterContainer.encode(instancestatus0.rawValue)
            }
        }
        if let instanceTypeFilter = instanceTypeFilter {
            var instanceTypeFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceTypeFilter)
            for instancetype0 in instanceTypeFilter {
                try instanceTypeFilterContainer.encode(instancetype0.rawValue)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDeploymentInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListDeploymentInstances operation.
public struct ListDeploymentInstancesInput: Swift.Equatable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// A subset of instances to list by status:
    ///
    /// * Pending: Include those instances with pending deployments.
    ///
    /// * InProgress: Include those instances where deployments are still in progress.
    ///
    /// * Succeeded: Include those instances with successful deployments.
    ///
    /// * Failed: Include those instances with failed deployments.
    ///
    /// * Skipped: Include those instances with skipped deployments.
    ///
    /// * Unknown: Include those instances with deployments in an unknown state.
    public var instanceStatusFilter: [CodeDeployClientTypes.InstanceStatus]?
    /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
    public var instanceTypeFilter: [CodeDeployClientTypes.InstanceType]?
    /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
    public var nextToken: Swift.String?

    public init (
        deploymentId: Swift.String? = nil,
        instanceStatusFilter: [CodeDeployClientTypes.InstanceStatus]? = nil,
        instanceTypeFilter: [CodeDeployClientTypes.InstanceType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceStatusFilter = instanceStatusFilter
        self.instanceTypeFilter = instanceTypeFilter
        self.nextToken = nextToken
    }
}

struct ListDeploymentInstancesInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let nextToken: Swift.String?
    let instanceStatusFilter: [CodeDeployClientTypes.InstanceStatus]?
    let instanceTypeFilter: [CodeDeployClientTypes.InstanceType]?
}

extension ListDeploymentInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case instanceStatusFilter
        case instanceTypeFilter
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let instanceStatusFilterContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.InstanceStatus?].self, forKey: .instanceStatusFilter)
        var instanceStatusFilterDecoded0:[CodeDeployClientTypes.InstanceStatus]? = nil
        if let instanceStatusFilterContainer = instanceStatusFilterContainer {
            instanceStatusFilterDecoded0 = [CodeDeployClientTypes.InstanceStatus]()
            for enum0 in instanceStatusFilterContainer {
                if let enum0 = enum0 {
                    instanceStatusFilterDecoded0?.append(enum0)
                }
            }
        }
        instanceStatusFilter = instanceStatusFilterDecoded0
        let instanceTypeFilterContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.InstanceType?].self, forKey: .instanceTypeFilter)
        var instanceTypeFilterDecoded0:[CodeDeployClientTypes.InstanceType]? = nil
        if let instanceTypeFilterContainer = instanceTypeFilterContainer {
            instanceTypeFilterDecoded0 = [CodeDeployClientTypes.InstanceType]()
            for enum0 in instanceTypeFilterContainer {
                if let enum0 = enum0 {
                    instanceTypeFilterDecoded0?.append(enum0)
                }
            }
        }
        instanceTypeFilter = instanceTypeFilterDecoded0
    }
}

extension ListDeploymentInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidComputePlatformException" : self = .invalidComputePlatformException(try InvalidComputePlatformException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentInstanceTypeException" : self = .invalidDeploymentInstanceTypeException(try InvalidDeploymentInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceStatusException" : self = .invalidInstanceStatusException(try InvalidInstanceStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceTypeException" : self = .invalidInstanceTypeException(try InvalidInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetFilterNameException" : self = .invalidTargetFilterNameException(try InvalidTargetFilterNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeploymentInstancesOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidComputePlatformException(InvalidComputePlatformException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentInstanceTypeException(InvalidDeploymentInstanceTypeException)
    case invalidInstanceStatusException(InvalidInstanceStatusException)
    case invalidInstanceTypeException(InvalidInstanceTypeException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidTargetFilterNameException(InvalidTargetFilterNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeploymentInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instancesList = output.instancesList
            self.nextToken = output.nextToken
        } else {
            self.instancesList = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListDeploymentInstances operation.
public struct ListDeploymentInstancesOutputResponse: Swift.Equatable {
    /// A list of instance IDs.
    public var instancesList: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
    public var nextToken: Swift.String?

    public init (
        instancesList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instancesList = instancesList
        self.nextToken = nextToken
    }
}

struct ListDeploymentInstancesOutputResponseBody: Swift.Equatable {
    let instancesList: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeploymentInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesList
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instancesList)
        var instancesListDecoded0:[Swift.String]? = nil
        if let instancesListContainer = instancesListContainer {
            instancesListDecoded0 = [Swift.String]()
            for string0 in instancesListContainer {
                if let string0 = string0 {
                    instancesListDecoded0?.append(string0)
                }
            }
        }
        instancesList = instancesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentTargetsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let targetFilters = targetFilters {
            var targetFiltersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .targetFilters)
            for (dictKey0, targetFilters0) in targetFilters {
                var targetFilters0Container = targetFiltersContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for filtervalue1 in targetFilters0 {
                    try targetFilters0Container.encode(filtervalue1)
                }
            }
        }
    }
}

extension ListDeploymentTargetsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDeploymentTargetsInput: Swift.Equatable {
    /// The unique ID of a deployment.
    public var deploymentId: Swift.String?
    /// A token identifier returned from the previous ListDeploymentTargets call. It can be used to return the next set of deployment targets in the list.
    public var nextToken: Swift.String?
    /// A key used to filter the returned targets. The two valid values are:
    ///
    /// * TargetStatus - A TargetStatus filter string can be Failed, InProgress, Pending, Ready, Skipped, Succeeded, or Unknown.
    ///
    /// * ServerInstanceLabel - A ServerInstanceLabel filter string can be Blue or Green.
    public var targetFilters: [Swift.String:[Swift.String]]?

    public init (
        deploymentId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        targetFilters: [Swift.String:[Swift.String]]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.nextToken = nextToken
        self.targetFilters = targetFilters
    }
}

struct ListDeploymentTargetsInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let nextToken: Swift.String?
    let targetFilters: [Swift.String:[Swift.String]]?
}

extension ListDeploymentTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let targetFiltersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .targetFilters)
        var targetFiltersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let targetFiltersContainer = targetFiltersContainer {
            targetFiltersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, filtervaluelist0) in targetFiltersContainer {
                var filtervaluelist0Decoded0: [Swift.String]? = nil
                if let filtervaluelist0 = filtervaluelist0 {
                    filtervaluelist0Decoded0 = [Swift.String]()
                    for string1 in filtervaluelist0 {
                        if let string1 = string1 {
                            filtervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                targetFiltersDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        targetFilters = targetFiltersDecoded0
    }
}

extension ListDeploymentTargetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentTargetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentInstanceTypeException" : self = .invalidDeploymentInstanceTypeException(try InvalidDeploymentInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceStatusException" : self = .invalidInstanceStatusException(try InvalidInstanceStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceTypeException" : self = .invalidInstanceTypeException(try InvalidInstanceTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeploymentTargetsOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidDeploymentInstanceTypeException(InvalidDeploymentInstanceTypeException)
    case invalidInstanceStatusException(InvalidInstanceStatusException)
    case invalidInstanceTypeException(InvalidInstanceTypeException)
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentTargetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeploymentTargetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.targetIds = output.targetIds
        } else {
            self.nextToken = nil
            self.targetIds = nil
        }
    }
}

public struct ListDeploymentTargetsOutputResponse: Swift.Equatable {
    /// If a large amount of information is returned, a token identifier is also returned. It can be used in a subsequent ListDeploymentTargets call to return the next set of deployment targets in the list.
    public var nextToken: Swift.String?
    /// The unique IDs of deployment targets.
    public var targetIds: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        targetIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.targetIds = targetIds
    }
}

struct ListDeploymentTargetsOutputResponseBody: Swift.Equatable {
    let targetIds: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeploymentTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case targetIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetIds)
        var targetIdsDecoded0:[Swift.String]? = nil
        if let targetIdsContainer = targetIdsContainer {
            targetIdsDecoded0 = [Swift.String]()
            for string0 in targetIdsContainer {
                if let string0 = string0 {
                    targetIdsDecoded0?.append(string0)
                }
            }
        }
        targetIds = targetIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let createTimeRange = self.createTimeRange {
            try encodeContainer.encode(createTimeRange, forKey: .createTimeRange)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let includeOnlyStatuses = includeOnlyStatuses {
            var includeOnlyStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includeOnlyStatuses)
            for deploymentstatus0 in includeOnlyStatuses {
                try includeOnlyStatusesContainer.encode(deploymentstatus0.rawValue)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListDeploymentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListDeployments operation.
public struct ListDeploymentsInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account. If applicationName is specified, then deploymentGroupName must be specified. If it is not specified, then deploymentGroupName must not be specified.
    public var applicationName: Swift.String?
    /// A time range (start and end) for returning a subset of the list of deployments.
    public var createTimeRange: CodeDeployClientTypes.TimeRange?
    /// The name of a deployment group for the specified application. If deploymentGroupName is specified, then applicationName must be specified. If it is not specified, then applicationName must not be specified.
    public var deploymentGroupName: Swift.String?
    /// The unique ID of an external resource for returning deployments linked to the external resource.
    public var externalId: Swift.String?
    /// A subset of deployments to list by status:
    ///
    /// * Created: Include created deployments in the resulting list.
    ///
    /// * Queued: Include queued deployments in the resulting list.
    ///
    /// * In Progress: Include in-progress deployments in the resulting list.
    ///
    /// * Succeeded: Include successful deployments in the resulting list.
    ///
    /// * Failed: Include failed deployments in the resulting list.
    ///
    /// * Stopped: Include stopped deployments in the resulting list.
    public var includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]?
    /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
    public var nextToken: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        createTimeRange: CodeDeployClientTypes.TimeRange? = nil,
        deploymentGroupName: Swift.String? = nil,
        externalId: Swift.String? = nil,
        includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.createTimeRange = createTimeRange
        self.deploymentGroupName = deploymentGroupName
        self.externalId = externalId
        self.includeOnlyStatuses = includeOnlyStatuses
        self.nextToken = nextToken
    }
}

struct ListDeploymentsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
    let externalId: Swift.String?
    let includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]?
    let createTimeRange: CodeDeployClientTypes.TimeRange?
    let nextToken: Swift.String?
}

extension ListDeploymentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let includeOnlyStatusesContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.DeploymentStatus?].self, forKey: .includeOnlyStatuses)
        var includeOnlyStatusesDecoded0:[CodeDeployClientTypes.DeploymentStatus]? = nil
        if let includeOnlyStatusesContainer = includeOnlyStatusesContainer {
            includeOnlyStatusesDecoded0 = [CodeDeployClientTypes.DeploymentStatus]()
            for enum0 in includeOnlyStatusesContainer {
                if let enum0 = enum0 {
                    includeOnlyStatusesDecoded0?.append(enum0)
                }
            }
        }
        includeOnlyStatuses = includeOnlyStatusesDecoded0
        let createTimeRangeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TimeRange.self, forKey: .createTimeRange)
        createTimeRange = createTimeRangeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDeploymentsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDeploymentsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStatusException" : self = .invalidDeploymentStatusException(try InvalidDeploymentStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidExternalIdException" : self = .invalidExternalIdException(try InvalidExternalIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTimeRangeException" : self = .invalidTimeRangeException(try InvalidTimeRangeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListDeploymentsOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStatusException(InvalidDeploymentStatusException)
    case invalidExternalIdException(InvalidExternalIdException)
    case invalidInputException(InvalidInputException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidTimeRangeException(InvalidTimeRangeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDeploymentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListDeploymentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deployments = output.deployments
            self.nextToken = output.nextToken
        } else {
            self.deployments = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of a ListDeployments operation.
public struct ListDeploymentsOutputResponse: Swift.Equatable {
    /// A list of deployment IDs.
    public var deployments: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
    public var nextToken: Swift.String?

    public init (
        deployments: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deployments = deployments
        self.nextToken = nextToken
    }
}

struct ListDeploymentsOutputResponseBody: Swift.Equatable {
    let deployments: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListDeploymentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployments
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deployments)
        var deploymentsDecoded0:[Swift.String]? = nil
        if let deploymentsContainer = deploymentsContainer {
            deploymentsDecoded0 = [Swift.String]()
            for string0 in deploymentsContainer {
                if let string0 = string0 {
                    deploymentsDecoded0?.append(string0)
                }
            }
        }
        deployments = deploymentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGitHubAccountTokenNamesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListGitHubAccountTokenNamesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListGitHubAccountTokenNames operation.
public struct ListGitHubAccountTokenNamesInput: Swift.Equatable {
    /// An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListGitHubAccountTokenNamesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
}

extension ListGitHubAccountTokenNamesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListGitHubAccountTokenNamesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListGitHubAccountTokenNamesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotSupportedException" : self = .operationNotSupportedException(try OperationNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceValidationException" : self = .resourceValidationException(try ResourceValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListGitHubAccountTokenNamesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case operationNotSupportedException(OperationNotSupportedException)
    case resourceValidationException(ResourceValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGitHubAccountTokenNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListGitHubAccountTokenNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tokenNameList = output.tokenNameList
        } else {
            self.nextToken = nil
            self.tokenNameList = nil
        }
    }
}

/// Represents the output of a ListGitHubAccountTokenNames operation.
public struct ListGitHubAccountTokenNamesOutputResponse: Swift.Equatable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent ListGitHubAccountTokenNames call to return the next set of names in the list.
    public var nextToken: Swift.String?
    /// A list of names of connections to GitHub accounts.
    public var tokenNameList: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        tokenNameList: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.tokenNameList = tokenNameList
    }
}

struct ListGitHubAccountTokenNamesOutputResponseBody: Swift.Equatable {
    let tokenNameList: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListGitHubAccountTokenNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tokenNameList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenNameListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenNameList)
        var tokenNameListDecoded0:[Swift.String]? = nil
        if let tokenNameListContainer = tokenNameListContainer {
            tokenNameListDecoded0 = [Swift.String]()
            for string0 in tokenNameListContainer {
                if let string0 = string0 {
                    tokenNameListDecoded0?.append(string0)
                }
            }
        }
        tokenNameList = tokenNameListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOnPremisesInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case registrationStatus
        case tagFilters
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let registrationStatus = self.registrationStatus {
            try encodeContainer.encode(registrationStatus.rawValue, forKey: .registrationStatus)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilter0 in tagFilters {
                try tagFiltersContainer.encode(tagfilter0)
            }
        }
    }
}

extension ListOnPremisesInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a ListOnPremisesInstances operation.
public struct ListOnPremisesInstancesInput: Swift.Equatable {
    /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
    public var nextToken: Swift.String?
    /// The registration status of the on-premises instances:
    ///
    /// * Deregistered: Include deregistered on-premises instances in the resulting list.
    ///
    /// * Registered: Include registered on-premises instances in the resulting list.
    public var registrationStatus: CodeDeployClientTypes.RegistrationStatus?
    /// The on-premises instance tags that are used to restrict the on-premises instance names returned.
    public var tagFilters: [CodeDeployClientTypes.TagFilter]?

    public init (
        nextToken: Swift.String? = nil,
        registrationStatus: CodeDeployClientTypes.RegistrationStatus? = nil,
        tagFilters: [CodeDeployClientTypes.TagFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationStatus = registrationStatus
        self.tagFilters = tagFilters
    }
}

struct ListOnPremisesInstancesInputBody: Swift.Equatable {
    let registrationStatus: CodeDeployClientTypes.RegistrationStatus?
    let tagFilters: [CodeDeployClientTypes.TagFilter]?
    let nextToken: Swift.String?
}

extension ListOnPremisesInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case registrationStatus
        case tagFilters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registrationStatusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RegistrationStatus.self, forKey: .registrationStatus)
        registrationStatus = registrationStatusDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[CodeDeployClientTypes.TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [CodeDeployClientTypes.TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOnPremisesInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOnPremisesInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRegistrationStatusException" : self = .invalidRegistrationStatusException(try InvalidRegistrationStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagFilterException" : self = .invalidTagFilterException(try InvalidTagFilterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListOnPremisesInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidRegistrationStatusException(InvalidRegistrationStatusException)
    case invalidTagFilterException(InvalidTagFilterException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOnPremisesInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListOnPremisesInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceNames = output.instanceNames
            self.nextToken = output.nextToken
        } else {
            self.instanceNames = nil
            self.nextToken = nil
        }
    }
}

/// Represents the output of the list on-premises instances operation.
public struct ListOnPremisesInstancesOutputResponse: Swift.Equatable {
    /// The list of matching on-premises instance names.
    public var instanceNames: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
    public var nextToken: Swift.String?

    public init (
        instanceNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.nextToken = nextToken
    }
}

struct ListOnPremisesInstancesOutputResponseBody: Swift.Equatable {
    let instanceNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListOnPremisesInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CodeDeployClientTypes {
    public enum ListStateFilterAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exclude
        case ignore
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [ListStateFilterAction] {
            return [
                .exclude,
                .ignore,
                .include,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "exclude"
            case .ignore: return "ignore"
            case .include: return "include"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ListStateFilterAction(rawValue: rawValue) ?? ListStateFilterAction.sdkUnknown(rawValue)
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// An identifier returned from the previous ListTagsForResource call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?
    /// The ARN of a CodeDeploy resource. ListTagsForResource returns all the tags associated with the resource that is identified by the ResourceArn.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case arnNotSupportedException(ArnNotSupportedException)
    case invalidArnException(InvalidArnException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
    public var nextToken: Swift.String?
    /// A list of tags returned by ListTagsForResource. The tags are associated with the resource identified by the input ResourceArn parameter.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [CodeDeployClientTypes.Tag]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CodeDeployClientTypes.LoadBalancerInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elbInfoList
        case targetGroupInfoList
        case targetGroupPairInfoList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elbInfoList = elbInfoList {
            var elbInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .elbInfoList)
            for elbinfo0 in elbInfoList {
                try elbInfoListContainer.encode(elbinfo0)
            }
        }
        if let targetGroupInfoList = targetGroupInfoList {
            var targetGroupInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupInfoList)
            for targetgroupinfo0 in targetGroupInfoList {
                try targetGroupInfoListContainer.encode(targetgroupinfo0)
            }
        }
        if let targetGroupPairInfoList = targetGroupPairInfoList {
            var targetGroupPairInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupPairInfoList)
            for targetgrouppairinfo0 in targetGroupPairInfoList {
                try targetGroupPairInfoListContainer.encode(targetgrouppairinfo0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elbInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ELBInfo?].self, forKey: .elbInfoList)
        var elbInfoListDecoded0:[CodeDeployClientTypes.ELBInfo]? = nil
        if let elbInfoListContainer = elbInfoListContainer {
            elbInfoListDecoded0 = [CodeDeployClientTypes.ELBInfo]()
            for structure0 in elbInfoListContainer {
                if let structure0 = structure0 {
                    elbInfoListDecoded0?.append(structure0)
                }
            }
        }
        elbInfoList = elbInfoListDecoded0
        let targetGroupInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TargetGroupInfo?].self, forKey: .targetGroupInfoList)
        var targetGroupInfoListDecoded0:[CodeDeployClientTypes.TargetGroupInfo]? = nil
        if let targetGroupInfoListContainer = targetGroupInfoListContainer {
            targetGroupInfoListDecoded0 = [CodeDeployClientTypes.TargetGroupInfo]()
            for structure0 in targetGroupInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupInfoList = targetGroupInfoListDecoded0
        let targetGroupPairInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TargetGroupPairInfo?].self, forKey: .targetGroupPairInfoList)
        var targetGroupPairInfoListDecoded0:[CodeDeployClientTypes.TargetGroupPairInfo]? = nil
        if let targetGroupPairInfoListContainer = targetGroupPairInfoListContainer {
            targetGroupPairInfoListDecoded0 = [CodeDeployClientTypes.TargetGroupPairInfo]()
            for structure0 in targetGroupPairInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupPairInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupPairInfoList = targetGroupPairInfoListDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
    public struct LoadBalancerInfo: Swift.Equatable {
        /// An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers. Adding more than one load balancer to the array is not supported.
        public var elbInfoList: [CodeDeployClientTypes.ELBInfo]?
        /// An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers. Adding more than one target group to the array is not supported.
        public var targetGroupInfoList: [CodeDeployClientTypes.TargetGroupInfo]?
        /// The target group pair information. This is an array of TargeGroupPairInfo objects with a maximum size of one.
        public var targetGroupPairInfoList: [CodeDeployClientTypes.TargetGroupPairInfo]?

        public init (
            elbInfoList: [CodeDeployClientTypes.ELBInfo]? = nil,
            targetGroupInfoList: [CodeDeployClientTypes.TargetGroupInfo]? = nil,
            targetGroupPairInfoList: [CodeDeployClientTypes.TargetGroupPairInfo]? = nil
        )
        {
            self.elbInfoList = elbInfoList
            self.targetGroupInfoList = targetGroupInfoList
            self.targetGroupPairInfoList = targetGroupPairInfoList
        }
    }

}

extension CodeDeployClientTypes.MinimumHealthyHosts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.MinimumHealthyHostsType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value) ?? 0
        value = valueDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about minimum healthy instance.
    public struct MinimumHealthyHosts: Swift.Equatable {
        /// The minimum healthy instance type:
        ///
        /// * HOST_COUNT: The minimum number of healthy instances as an absolute value.
        ///
        /// * FLEET_PERCENT: The minimum number of healthy instances as a percentage of the total number of instances in the deployment.
        ///
        ///
        /// In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instances at a time. The deployment is successful if four or more instances are deployed to successfully. Otherwise, the deployment fails. In a call to the GetDeploymentConfig, CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful. For more information, see [CodeDeploy Instance Health](https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html) in the CodeDeploy User Guide.
        public var type: CodeDeployClientTypes.MinimumHealthyHostsType?
        /// The minimum healthy instance value.
        public var value: Swift.Int

        public init (
            type: CodeDeployClientTypes.MinimumHealthyHostsType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension CodeDeployClientTypes {
    public enum MinimumHealthyHostsType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fleetPercent
        case hostCount
        case sdkUnknown(Swift.String)

        public static var allCases: [MinimumHealthyHostsType] {
            return [
                .fleetPercent,
                .hostCount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fleetPercent: return "FLEET_PERCENT"
            case .hostCount: return "HOST_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MinimumHealthyHostsType(rawValue: rawValue) ?? MinimumHealthyHostsType.sdkUnknown(rawValue)
        }
    }
}

extension MultipleIamArnsProvidedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MultipleIamArnsProvidedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Both an IAM user ARN and an IAM session ARN were included in the request. Use only one ARN type.
public struct MultipleIamArnsProvidedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MultipleIamArnsProvidedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension MultipleIamArnsProvidedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.OnPremisesTagSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onPremisesTagSetList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onPremisesTagSetList = onPremisesTagSetList {
            var onPremisesTagSetListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesTagSetList)
            for tagfilterlist0 in onPremisesTagSetList {
                var tagfilterlist0Container = onPremisesTagSetListContainer.nestedUnkeyedContainer()
                for tagfilter1 in tagfilterlist0 {
                    try tagfilterlist0Container.encode(tagfilter1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onPremisesTagSetListContainer = try containerValues.decodeIfPresent([[CodeDeployClientTypes.TagFilter?]?].self, forKey: .onPremisesTagSetList)
        var onPremisesTagSetListDecoded0:[[CodeDeployClientTypes.TagFilter]]? = nil
        if let onPremisesTagSetListContainer = onPremisesTagSetListContainer {
            onPremisesTagSetListDecoded0 = [[CodeDeployClientTypes.TagFilter]]()
            for list0 in onPremisesTagSetListContainer {
                var list0Decoded0: [CodeDeployClientTypes.TagFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeDeployClientTypes.TagFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    onPremisesTagSetListDecoded0?.append(list0Decoded0)
                }
            }
        }
        onPremisesTagSetList = onPremisesTagSetListDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about groups of on-premises instance tags.
    public struct OnPremisesTagSet: Swift.Equatable {
        /// A list that contains other lists of on-premises instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.
        public var onPremisesTagSetList: [[CodeDeployClientTypes.TagFilter]]?

        public init (
            onPremisesTagSetList: [[CodeDeployClientTypes.TagFilter]]? = nil
        )
        {
            self.onPremisesTagSetList = onPremisesTagSetList
        }
    }

}

extension OperationNotSupportedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OperationNotSupportedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The API used does not support the deployment.
public struct OperationNotSupportedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotSupportedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationNotSupportedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum OutdatedInstancesStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ignore
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [OutdatedInstancesStrategy] {
            return [
                .ignore,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutdatedInstancesStrategy(rawValue: rawValue) ?? OutdatedInstancesStrategy.sdkUnknown(rawValue)
        }
    }
}

extension PutLifecycleEventHookExecutionStatusInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lifecycleEventHookExecutionId
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lifecycleEventHookExecutionId = self.lifecycleEventHookExecutionId {
            try encodeContainer.encode(lifecycleEventHookExecutionId, forKey: .lifecycleEventHookExecutionId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension PutLifecycleEventHookExecutionStatusInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLifecycleEventHookExecutionStatusInput: Swift.Equatable {
    /// The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event.
    public var deploymentId: Swift.String?
    /// The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the hooks section of the AppSpec file.
    public var lifecycleEventHookExecutionId: Swift.String?
    /// The result of a Lambda function that validates a deployment lifecycle event. The values listed in Valid Values are valid for lifecycle statuses in general; however, only Succeeded and Failed can be passed successfully in your API call.
    public var status: CodeDeployClientTypes.LifecycleEventStatus?

    public init (
        deploymentId: Swift.String? = nil,
        lifecycleEventHookExecutionId: Swift.String? = nil,
        status: CodeDeployClientTypes.LifecycleEventStatus? = nil
    )
    {
        self.deploymentId = deploymentId
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        self.status = status
    }
}

struct PutLifecycleEventHookExecutionStatusInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let lifecycleEventHookExecutionId: Swift.String?
    let status: CodeDeployClientTypes.LifecycleEventStatus?
}

extension PutLifecycleEventHookExecutionStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lifecycleEventHookExecutionId
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let lifecycleEventHookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleEventHookExecutionId)
        lifecycleEventHookExecutionId = lifecycleEventHookExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LifecycleEventStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension PutLifecycleEventHookExecutionStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLifecycleEventHookExecutionStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLifecycleEventHookExecutionIdException" : self = .invalidLifecycleEventHookExecutionIdException(try InvalidLifecycleEventHookExecutionIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLifecycleEventHookExecutionStatusException" : self = .invalidLifecycleEventHookExecutionStatusException(try InvalidLifecycleEventHookExecutionStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleEventAlreadyCompletedException" : self = .lifecycleEventAlreadyCompletedException(try LifecycleEventAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLifecycleEventHookExecutionStatusOutputError: Swift.Error, Swift.Equatable {
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case invalidLifecycleEventHookExecutionIdException(InvalidLifecycleEventHookExecutionIdException)
    case invalidLifecycleEventHookExecutionStatusException(InvalidLifecycleEventHookExecutionStatusException)
    case lifecycleEventAlreadyCompletedException(LifecycleEventAlreadyCompletedException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecycleEventHookExecutionStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutLifecycleEventHookExecutionStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycleEventHookExecutionId = output.lifecycleEventHookExecutionId
        } else {
            self.lifecycleEventHookExecutionId = nil
        }
    }
}

public struct PutLifecycleEventHookExecutionStatusOutputResponse: Swift.Equatable {
    /// The execution ID of the lifecycle event hook. A hook is specified in the hooks section of the deployment's AppSpec file.
    public var lifecycleEventHookExecutionId: Swift.String?

    public init (
        lifecycleEventHookExecutionId: Swift.String? = nil
    )
    {
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
    }
}

struct PutLifecycleEventHookExecutionStatusOutputResponseBody: Swift.Equatable {
    let lifecycleEventHookExecutionId: Swift.String?
}

extension PutLifecycleEventHookExecutionStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleEventHookExecutionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleEventHookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleEventHookExecutionId)
        lifecycleEventHookExecutionId = lifecycleEventHookExecutionIdDecoded
    }
}

extension CodeDeployClientTypes.RawString: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content
        case sha256
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if let sha256 = self.sha256 {
            try encodeContainer.encode(sha256, forKey: .sha256)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let sha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sha256)
        sha256 = sha256Decoded
    }
}

extension CodeDeployClientTypes {
    /// A revision for an Lambda deployment that is a YAML-formatted or JSON-formatted string. For Lambda deployments, the revision is the same as the AppSpec file.
    @available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
    public struct RawString: Swift.Equatable {
        /// The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events.
        public var content: Swift.String?
        /// The SHA256 hash value of the revision content.
        public var sha256: Swift.String?

        public init (
            content: Swift.String? = nil,
            sha256: Swift.String? = nil
        )
        {
            self.content = content
            self.sha256 = sha256
        }
    }

}

extension RegisterApplicationRevisionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case description
        case revision
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
    }
}

extension RegisterApplicationRevisionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RegisterApplicationRevision operation.
public struct RegisterApplicationRevisionInput: Swift.Equatable {
    /// The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// A comment about the revision.
    public var description: Swift.String?
    /// Information about the application revision to register, including type and location.
    /// This member is required.
    public var revision: CodeDeployClientTypes.RevisionLocation?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.revision = revision
    }
}

struct RegisterApplicationRevisionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let description: Swift.String?
    let revision: CodeDeployClientTypes.RevisionLocation?
}

extension RegisterApplicationRevisionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case description
        case revision
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
    }
}

extension RegisterApplicationRevisionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterApplicationRevisionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DescriptionTooLongException" : self = .descriptionTooLongException(try DescriptionTooLongException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRevisionException" : self = .invalidRevisionException(try InvalidRevisionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RevisionRequiredException" : self = .revisionRequiredException(try RevisionRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterApplicationRevisionOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case descriptionTooLongException(DescriptionTooLongException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidRevisionException(InvalidRevisionException)
    case revisionRequiredException(RevisionRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterApplicationRevisionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterApplicationRevisionOutputResponse: Swift.Equatable {

    public init () { }
}

extension RegisterOnPremisesInstanceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamSessionArn
        case iamUserArn
        case instanceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamSessionArn = self.iamSessionArn {
            try encodeContainer.encode(iamSessionArn, forKey: .iamSessionArn)
        }
        if let iamUserArn = self.iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
    }
}

extension RegisterOnPremisesInstanceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of the register on-premises instance operation.
public struct RegisterOnPremisesInstanceInput: Swift.Equatable {
    /// The ARN of the IAM session to associate with the on-premises instance.
    public var iamSessionArn: Swift.String?
    /// The ARN of the IAM user to associate with the on-premises instance.
    public var iamUserArn: Swift.String?
    /// The name of the on-premises instance to register.
    /// This member is required.
    public var instanceName: Swift.String?

    public init (
        iamSessionArn: Swift.String? = nil,
        iamUserArn: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.iamSessionArn = iamSessionArn
        self.iamUserArn = iamUserArn
        self.instanceName = instanceName
    }
}

struct RegisterOnPremisesInstanceInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let iamSessionArn: Swift.String?
    let iamUserArn: Swift.String?
}

extension RegisterOnPremisesInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamSessionArn
        case iamUserArn
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let iamSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamSessionArn)
        iamSessionArn = iamSessionArnDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
    }
}

extension RegisterOnPremisesInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterOnPremisesInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IamArnRequiredException" : self = .iamArnRequiredException(try IamArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamSessionArnAlreadyRegisteredException" : self = .iamSessionArnAlreadyRegisteredException(try IamSessionArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnAlreadyRegisteredException" : self = .iamUserArnAlreadyRegisteredException(try IamUserArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnRequiredException" : self = .iamUserArnRequiredException(try IamUserArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameAlreadyRegisteredException" : self = .instanceNameAlreadyRegisteredException(try InstanceNameAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamSessionArnException" : self = .invalidIamSessionArnException(try InvalidIamSessionArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamUserArnException" : self = .invalidIamUserArnException(try InvalidIamUserArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MultipleIamArnsProvidedException" : self = .multipleIamArnsProvidedException(try MultipleIamArnsProvidedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RegisterOnPremisesInstanceOutputError: Swift.Error, Swift.Equatable {
    case iamArnRequiredException(IamArnRequiredException)
    case iamSessionArnAlreadyRegisteredException(IamSessionArnAlreadyRegisteredException)
    case iamUserArnAlreadyRegisteredException(IamUserArnAlreadyRegisteredException)
    case iamUserArnRequiredException(IamUserArnRequiredException)
    case instanceNameAlreadyRegisteredException(InstanceNameAlreadyRegisteredException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case invalidIamSessionArnException(InvalidIamSessionArnException)
    case invalidIamUserArnException(InvalidIamUserArnException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case multipleIamArnsProvidedException(MultipleIamArnsProvidedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterOnPremisesInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RegisterOnPremisesInstanceOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodeDeployClientTypes {
    public enum RegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deregistered
        case registered
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .deregistered,
                .registered,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deregistered: return "Deregistered"
            case .registered: return "Registered"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.RelatedDeployments: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoUpdateOutdatedInstancesDeploymentIds
        case autoUpdateOutdatedInstancesRootDeploymentId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIds {
            var autoUpdateOutdatedInstancesDeploymentIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoUpdateOutdatedInstancesDeploymentIds)
            for deploymentid0 in autoUpdateOutdatedInstancesDeploymentIds {
                try autoUpdateOutdatedInstancesDeploymentIdsContainer.encode(deploymentid0)
            }
        }
        if let autoUpdateOutdatedInstancesRootDeploymentId = self.autoUpdateOutdatedInstancesRootDeploymentId {
            try encodeContainer.encode(autoUpdateOutdatedInstancesRootDeploymentId, forKey: .autoUpdateOutdatedInstancesRootDeploymentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoUpdateOutdatedInstancesRootDeploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoUpdateOutdatedInstancesRootDeploymentId)
        autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentIdDecoded
        let autoUpdateOutdatedInstancesDeploymentIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoUpdateOutdatedInstancesDeploymentIds)
        var autoUpdateOutdatedInstancesDeploymentIdsDecoded0:[Swift.String]? = nil
        if let autoUpdateOutdatedInstancesDeploymentIdsContainer = autoUpdateOutdatedInstancesDeploymentIdsContainer {
            autoUpdateOutdatedInstancesDeploymentIdsDecoded0 = [Swift.String]()
            for string0 in autoUpdateOutdatedInstancesDeploymentIdsContainer {
                if let string0 = string0 {
                    autoUpdateOutdatedInstancesDeploymentIdsDecoded0?.append(string0)
                }
            }
        }
        autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIdsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about deployments related to the specified deployment.
    public struct RelatedDeployments: Swift.Equatable {
        /// The deployment IDs of 'auto-update outdated instances' deployments triggered by this deployment.
        public var autoUpdateOutdatedInstancesDeploymentIds: [Swift.String]?
        /// The deployment ID of the root deployment that triggered this deployment.
        public var autoUpdateOutdatedInstancesRootDeploymentId: Swift.String?

        public init (
            autoUpdateOutdatedInstancesDeploymentIds: [Swift.String]? = nil,
            autoUpdateOutdatedInstancesRootDeploymentId: Swift.String? = nil
        )
        {
            self.autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIds
            self.autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentId
        }
    }

}

extension RemoveTagsFromOnPremisesInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceNames = instanceNames {
            var instanceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceNames)
            for instancename0 in instanceNames {
                try instanceNamesContainer.encode(instancename0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension RemoveTagsFromOnPremisesInstancesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a RemoveTagsFromOnPremisesInstances operation.
public struct RemoveTagsFromOnPremisesInstancesInput: Swift.Equatable {
    /// The names of the on-premises instances from which to remove tags.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The tag key-value pairs to remove from the on-premises instances.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init (
        instanceNames: [Swift.String]? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

struct RemoveTagsFromOnPremisesInstancesInputBody: Swift.Equatable {
    let tags: [CodeDeployClientTypes.Tag]?
    let instanceNames: [Swift.String]?
}

extension RemoveTagsFromOnPremisesInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceNames
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
    }
}

extension RemoveTagsFromOnPremisesInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsFromOnPremisesInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceLimitExceededException" : self = .instanceLimitExceededException(try InstanceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNotRegisteredException" : self = .instanceNotRegisteredException(try InstanceNotRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum RemoveTagsFromOnPremisesInstancesOutputError: Swift.Error, Swift.Equatable {
    case instanceLimitExceededException(InstanceLimitExceededException)
    case instanceNameRequiredException(InstanceNameRequiredException)
    case instanceNotRegisteredException(InstanceNotRegisteredException)
    case invalidInstanceNameException(InvalidInstanceNameException)
    case invalidTagException(InvalidTagException)
    case tagLimitExceededException(TagLimitExceededException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromOnPremisesInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsFromOnPremisesInstancesOutputResponse: Swift.Equatable {

    public init () { }
}

extension ResourceArnRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceArnRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The ARN of a resource is required, but was not found.
public struct ResourceArnRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceArnRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceArnRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource could not be validated.
public struct ResourceValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RevisionDoesNotExistException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RevisionDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The named revision does not exist with the IAM user or Amazon Web Services account.
public struct RevisionDoesNotExistException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RevisionDoesNotExistExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension RevisionDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.RevisionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case genericRevisionInfo
        case revisionLocation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let genericRevisionInfo = self.genericRevisionInfo {
            try encodeContainer.encode(genericRevisionInfo, forKey: .genericRevisionInfo)
        }
        if let revisionLocation = self.revisionLocation {
            try encodeContainer.encode(revisionLocation, forKey: .revisionLocation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionLocationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revisionLocation)
        revisionLocation = revisionLocationDecoded
        let genericRevisionInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.GenericRevisionInfo.self, forKey: .genericRevisionInfo)
        genericRevisionInfo = genericRevisionInfoDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an application revision.
    public struct RevisionInfo: Swift.Equatable {
        /// Information about an application revision, including usage details and associated deployment groups.
        public var genericRevisionInfo: CodeDeployClientTypes.GenericRevisionInfo?
        /// Information about the location and type of an application revision.
        public var revisionLocation: CodeDeployClientTypes.RevisionLocation?

        public init (
            genericRevisionInfo: CodeDeployClientTypes.GenericRevisionInfo? = nil,
            revisionLocation: CodeDeployClientTypes.RevisionLocation? = nil
        )
        {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }
    }

}

extension CodeDeployClientTypes.RevisionLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecContent
        case gitHubLocation
        case revisionType
        case s3Location
        case string
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecContent = self.appSpecContent {
            try encodeContainer.encode(appSpecContent, forKey: .appSpecContent)
        }
        if let gitHubLocation = self.gitHubLocation {
            try encodeContainer.encode(gitHubLocation, forKey: .gitHubLocation)
        }
        if let revisionType = self.revisionType {
            try encodeContainer.encode(revisionType.rawValue, forKey: .revisionType)
        }
        if let s3Location = self.s3Location {
            try encodeContainer.encode(s3Location, forKey: .s3Location)
        }
        if let string = self.string {
            try encodeContainer.encode(string, forKey: .string)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let revisionTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocationType.self, forKey: .revisionType)
        revisionType = revisionTypeDecoded
        let s3LocationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.S3Location.self, forKey: .s3Location)
        s3Location = s3LocationDecoded
        let gitHubLocationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.GitHubLocation.self, forKey: .gitHubLocation)
        gitHubLocation = gitHubLocationDecoded
        let stringDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RawString.self, forKey: .string)
        string = stringDecoded
        let appSpecContentDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AppSpecContent.self, forKey: .appSpecContent)
        appSpecContent = appSpecContentDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the location of an application revision.
    public struct RevisionLocation: Swift.Equatable {
        /// The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString.
        public var appSpecContent: CodeDeployClientTypes.AppSpecContent?
        /// Information about the location of application artifacts stored in GitHub.
        public var gitHubLocation: CodeDeployClientTypes.GitHubLocation?
        /// The type of application revision:
        ///
        /// * S3: An application revision stored in Amazon S3.
        ///
        /// * GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).
        ///
        /// * String: A YAML-formatted or JSON-formatted string (Lambda deployments only).
        ///
        /// * AppSpecContent: An AppSpecContent object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.
        public var revisionType: CodeDeployClientTypes.RevisionLocationType?
        /// Information about the location of a revision stored in Amazon S3.
        public var s3Location: CodeDeployClientTypes.S3Location?
        /// Information about the location of an Lambda deployment revision stored as a RawString.
        @available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
        public var string: CodeDeployClientTypes.RawString?

        public init (
            appSpecContent: CodeDeployClientTypes.AppSpecContent? = nil,
            gitHubLocation: CodeDeployClientTypes.GitHubLocation? = nil,
            revisionType: CodeDeployClientTypes.RevisionLocationType? = nil,
            s3Location: CodeDeployClientTypes.S3Location? = nil,
            string: CodeDeployClientTypes.RawString? = nil
        )
        {
            self.appSpecContent = appSpecContent
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
            self.s3Location = s3Location
            self.string = string
        }
    }

}

extension CodeDeployClientTypes {
    public enum RevisionLocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case appspeccontent
        case github
        case s3
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [RevisionLocationType] {
            return [
                .appspeccontent,
                .github,
                .s3,
                .string,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .appspeccontent: return "AppSpecContent"
            case .github: return "GitHub"
            case .s3: return "S3"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RevisionLocationType(rawValue: rawValue) ?? RevisionLocationType.sdkUnknown(rawValue)
        }
    }
}

extension RevisionRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RevisionRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The revision ID was not specified.
public struct RevisionRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RevisionRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension RevisionRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension RoleRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: RoleRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The role ID was not specified.
public struct RoleRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RoleRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension RoleRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.RollbackInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rollbackDeploymentId
        case rollbackMessage
        case rollbackTriggeringDeploymentId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rollbackDeploymentId = self.rollbackDeploymentId {
            try encodeContainer.encode(rollbackDeploymentId, forKey: .rollbackDeploymentId)
        }
        if let rollbackMessage = self.rollbackMessage {
            try encodeContainer.encode(rollbackMessage, forKey: .rollbackMessage)
        }
        if let rollbackTriggeringDeploymentId = self.rollbackTriggeringDeploymentId {
            try encodeContainer.encode(rollbackTriggeringDeploymentId, forKey: .rollbackTriggeringDeploymentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rollbackDeploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rollbackDeploymentId)
        rollbackDeploymentId = rollbackDeploymentIdDecoded
        let rollbackTriggeringDeploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rollbackTriggeringDeploymentId)
        rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentIdDecoded
        let rollbackMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rollbackMessage)
        rollbackMessage = rollbackMessageDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a deployment rollback.
    public struct RollbackInfo: Swift.Equatable {
        /// The ID of the deployment rollback.
        public var rollbackDeploymentId: Swift.String?
        /// Information that describes the status of a deployment rollback (for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded).
        public var rollbackMessage: Swift.String?
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        public var rollbackTriggeringDeploymentId: Swift.String?

        public init (
            rollbackDeploymentId: Swift.String? = nil,
            rollbackMessage: Swift.String? = nil,
            rollbackTriggeringDeploymentId: Swift.String? = nil
        )
        {
            self.rollbackDeploymentId = rollbackDeploymentId
            self.rollbackMessage = rollbackMessage
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
        }
    }

}

extension CodeDeployClientTypes.S3Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case bundleType
        case eTag
        case key
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = self.bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let bundleType = self.bundleType {
            try encodeContainer.encode(bundleType.rawValue, forKey: .bundleType)
        }
        if let eTag = self.eTag {
            try encodeContainer.encode(eTag, forKey: .eTag)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let bundleTypeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BundleType.self, forKey: .bundleType)
        bundleType = bundleTypeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the location of application artifacts stored in Amazon S3.
    public struct S3Location: Swift.Equatable {
        /// The name of the Amazon S3 bucket where the application revision is stored.
        public var bucket: Swift.String?
        /// The file type of the application revision. Must be one of the following:
        ///
        /// * tar: A tar archive file.
        ///
        /// * tgz: A compressed tar archive file.
        ///
        /// * zip: A zip archive file.
        public var bundleType: CodeDeployClientTypes.BundleType?
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object is skipped.
        public var eTag: Swift.String?
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        public var key: Swift.String?
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system uses the most recent version by default.
        public var version: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            bundleType: CodeDeployClientTypes.BundleType? = nil,
            eTag: Swift.String? = nil,
            key: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bundleType = bundleType
            self.eTag = eTag
            self.key = key
            self.version = version
        }
    }

}

extension SkipWaitTimeForInstanceTerminationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

extension SkipWaitTimeForInstanceTerminationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct SkipWaitTimeForInstanceTerminationInput: Swift.Equatable {
    /// The unique ID of a blue/green deployment for which you want to skip the instance termination wait time.
    public var deploymentId: Swift.String?

    public init (
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

struct SkipWaitTimeForInstanceTerminationInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
}

extension SkipWaitTimeForInstanceTerminationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
    }
}

extension SkipWaitTimeForInstanceTerminationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SkipWaitTimeForInstanceTerminationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentNotStartedException" : self = .deploymentNotStartedException(try DeploymentNotStartedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum SkipWaitTimeForInstanceTerminationOutputError: Swift.Error, Swift.Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case deploymentNotStartedException(DeploymentNotStartedException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SkipWaitTimeForInstanceTerminationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SkipWaitTimeForInstanceTerminationOutputResponse: Swift.Equatable {

    public init () { }
}

extension CodeDeployClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ascending"
            case .descending: return "descending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension StopDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoRollbackEnabled
        case deploymentId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoRollbackEnabled = self.autoRollbackEnabled {
            try encodeContainer.encode(autoRollbackEnabled, forKey: .autoRollbackEnabled)
        }
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
    }
}

extension StopDeploymentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of a StopDeployment operation.
public struct StopDeploymentInput: Swift.Equatable {
    /// Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
    public var autoRollbackEnabled: Swift.Bool?
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?

    public init (
        autoRollbackEnabled: Swift.Bool? = nil,
        deploymentId: Swift.String? = nil
    )
    {
        self.autoRollbackEnabled = autoRollbackEnabled
        self.deploymentId = deploymentId
    }
}

struct StopDeploymentInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let autoRollbackEnabled: Swift.Bool?
}

extension StopDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoRollbackEnabled
        case deploymentId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let autoRollbackEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoRollbackEnabled)
        autoRollbackEnabled = autoRollbackEnabledDecoded
    }
}

extension StopDeploymentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopDeploymentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DeploymentAlreadyCompletedException" : self = .deploymentAlreadyCompletedException(try DeploymentAlreadyCompletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentDoesNotExistException" : self = .deploymentDoesNotExistException(try DeploymentDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentIdRequiredException" : self = .deploymentIdRequiredException(try DeploymentIdRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentIdException" : self = .invalidDeploymentIdException(try InvalidDeploymentIdException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionForDeploymentTypeException" : self = .unsupportedActionForDeploymentTypeException(try UnsupportedActionForDeploymentTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopDeploymentOutputError: Swift.Error, Swift.Equatable {
    case deploymentAlreadyCompletedException(DeploymentAlreadyCompletedException)
    case deploymentDoesNotExistException(DeploymentDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentIdRequiredException(DeploymentIdRequiredException)
    case invalidDeploymentIdException(InvalidDeploymentIdException)
    case unsupportedActionForDeploymentTypeException(UnsupportedActionForDeploymentTypeException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopDeploymentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopDeploymentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
            self.statusMessage = output.statusMessage
        } else {
            self.status = nil
            self.statusMessage = nil
        }
    }
}

/// Represents the output of a StopDeployment operation.
public struct StopDeploymentOutputResponse: Swift.Equatable {
    /// The status of the stop deployment operation:
    ///
    /// * Pending: The stop operation is pending.
    ///
    /// * Succeeded: The stop operation was successful.
    public var status: CodeDeployClientTypes.StopStatus?
    /// An accompanying status message.
    public var statusMessage: Swift.String?

    public init (
        status: CodeDeployClientTypes.StopStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.status = status
        self.statusMessage = statusMessage
    }
}

struct StopDeploymentOutputResponseBody: Swift.Equatable {
    let status: CodeDeployClientTypes.StopStatus?
    let statusMessage: Swift.String?
}

extension StopDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case statusMessage
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.StopStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum StopStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StopStatus] {
            return [
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "Pending"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StopStatus(rawValue: rawValue) ?? StopStatus.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a tag.
    public struct Tag: Swift.Equatable {
        /// The tag's key.
        public var key: Swift.String?
        /// The tag's value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CodeDeployClientTypes.TagFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TagFilterType.self, forKey: .type)
        type = typeDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about an on-premises instance tag filter.
    public struct TagFilter: Swift.Equatable {
        /// The on-premises instance tag filter key.
        public var key: Swift.String?
        /// The on-premises instance tag filter type:
        ///
        /// * KEY_ONLY: Key only.
        ///
        /// * VALUE_ONLY: Value only.
        ///
        /// * KEY_AND_VALUE: Key and value.
        public var type: CodeDeployClientTypes.TagFilterType?
        /// The on-premises instance tag filter value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            type: CodeDeployClientTypes.TagFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }

}

extension CodeDeployClientTypes {
    public enum TagFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyAndValue
        case keyOnly
        case valueOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [TagFilterType] {
            return [
                .keyAndValue,
                .keyOnly,
                .valueOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyAndValue: return "KEY_AND_VALUE"
            case .keyOnly: return "KEY_ONLY"
            case .valueOnly: return "VALUE_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TagFilterType(rawValue: rawValue) ?? TagFilterType.sdkUnknown(rawValue)
        }
    }
}

extension TagLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum allowed number of tags was exceeded.
public struct TagLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagRequiredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A tag was not specified.
public struct TagRequiredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagRequiredExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of a resource, such as a CodeDeploy application or deployment group.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tags that TagResource associates with a resource. The resource is identified by the ResourceArn input parameter.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [CodeDeployClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case arnNotSupportedException(ArnNotSupportedException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case invalidArnException(InvalidArnException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension TagSetListLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagSetListLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The number of tag groups included in the tag set list exceeded the maximum allowed limit of 3.
public struct TagSetListLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagSetListLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagSetListLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes {
    public enum TargetFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case serverInstanceLabel
        case targetStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetFilterName] {
            return [
                .serverInstanceLabel,
                .targetStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .serverInstanceLabel: return "ServerInstanceLabel"
            case .targetStatus: return "TargetStatus"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetFilterName(rawValue: rawValue) ?? TargetFilterName.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.TargetGroupInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
    public struct TargetGroupInfo: Swift.Equatable {
        /// For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment are registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete.
        public var name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension CodeDeployClientTypes.TargetGroupPairInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prodTrafficRoute
        case targetGroups
        case testTrafficRoute
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let prodTrafficRoute = self.prodTrafficRoute {
            try encodeContainer.encode(prodTrafficRoute, forKey: .prodTrafficRoute)
        }
        if let targetGroups = targetGroups {
            var targetGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroups)
            for targetgroupinfo0 in targetGroups {
                try targetGroupsContainer.encode(targetgroupinfo0)
            }
        }
        if let testTrafficRoute = self.testTrafficRoute {
            try encodeContainer.encode(testTrafficRoute, forKey: .testTrafficRoute)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TargetGroupInfo?].self, forKey: .targetGroups)
        var targetGroupsDecoded0:[CodeDeployClientTypes.TargetGroupInfo]? = nil
        if let targetGroupsContainer = targetGroupsContainer {
            targetGroupsDecoded0 = [CodeDeployClientTypes.TargetGroupInfo]()
            for structure0 in targetGroupsContainer {
                if let structure0 = structure0 {
                    targetGroupsDecoded0?.append(structure0)
                }
            }
        }
        targetGroups = targetGroupsDecoded0
        let prodTrafficRouteDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoute.self, forKey: .prodTrafficRoute)
        prodTrafficRoute = prodTrafficRouteDecoded
        let testTrafficRouteDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoute.self, forKey: .testTrafficRoute)
        testTrafficRoute = testTrafficRouteDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified.
    public struct TargetGroupPairInfo: Swift.Equatable {
        /// The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete.
        public var prodTrafficRoute: CodeDeployClientTypes.TrafficRoute?
        /// One pair of target groups. One is associated with the original task set. The second is associated with the task set that serves traffic after the deployment is complete.
        public var targetGroups: [CodeDeployClientTypes.TargetGroupInfo]?
        /// An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can occur while test traffic is served during a deployment.
        public var testTrafficRoute: CodeDeployClientTypes.TrafficRoute?

        public init (
            prodTrafficRoute: CodeDeployClientTypes.TrafficRoute? = nil,
            targetGroups: [CodeDeployClientTypes.TargetGroupInfo]? = nil,
            testTrafficRoute: CodeDeployClientTypes.TrafficRoute? = nil
        )
        {
            self.prodTrafficRoute = prodTrafficRoute
            self.targetGroups = targetGroups
            self.testTrafficRoute = testTrafficRoute
        }
    }

}

extension CodeDeployClientTypes.TargetInstances: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroups
        case ec2TagSet
        case tagFilters
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupname0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupname0)
            }
        }
        if let ec2TagSet = self.ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for ec2tagfilter0 in tagFilters {
                try tagFiltersContainer.encode(ec2tagfilter0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.EC2TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[CodeDeployClientTypes.EC2TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [CodeDeployClientTypes.EC2TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[Swift.String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [Swift.String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about the instances to be used in the replacement environment in a blue/green deployment.
    public struct TargetInstances: Swift.Equatable {
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        public var autoScalingGroups: [Swift.String]?
        /// Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as tagFilters.
        public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as ec2TagSet.
        public var tagFilters: [CodeDeployClientTypes.EC2TagFilter]?

        public init (
            autoScalingGroups: [Swift.String]? = nil,
            ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
            tagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil
        )
        {
            self.autoScalingGroups = autoScalingGroups
            self.ec2TagSet = ec2TagSet
            self.tagFilters = tagFilters
        }
    }

}

extension CodeDeployClientTypes {
    public enum TargetLabel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case blue
        case green
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetLabel] {
            return [
                .blue,
                .green,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .blue: return "Blue"
            case .green: return "Green"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetLabel(rawValue: rawValue) ?? TargetLabel.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes {
    public enum TargetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case ready
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .ready,
                .skipped,
                .succeeded,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .ready: return "Ready"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetStatus(rawValue: rawValue) ?? TargetStatus.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An API function was called too frequently.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CodeDeployClientTypes.TimeBasedCanary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canaryInterval
        case canaryPercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if canaryInterval != 0 {
            try encodeContainer.encode(canaryInterval, forKey: .canaryInterval)
        }
        if canaryPercentage != 0 {
            try encodeContainer.encode(canaryPercentage, forKey: .canaryPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let canaryPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .canaryPercentage) ?? 0
        canaryPercentage = canaryPercentageDecoded
        let canaryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .canaryInterval) ?? 0
        canaryInterval = canaryIntervalDecoded
    }
}

extension CodeDeployClientTypes {
    /// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    public struct TimeBasedCanary: Swift.Equatable {
        /// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
        public var canaryInterval: Swift.Int
        /// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
        public var canaryPercentage: Swift.Int

        public init (
            canaryInterval: Swift.Int = 0,
            canaryPercentage: Swift.Int = 0
        )
        {
            self.canaryInterval = canaryInterval
            self.canaryPercentage = canaryPercentage
        }
    }

}

extension CodeDeployClientTypes.TimeBasedLinear: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case linearInterval
        case linearPercentage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if linearInterval != 0 {
            try encodeContainer.encode(linearInterval, forKey: .linearInterval)
        }
        if linearPercentage != 0 {
            try encodeContainer.encode(linearPercentage, forKey: .linearPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let linearPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linearPercentage) ?? 0
        linearPercentage = linearPercentageDecoded
        let linearIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .linearInterval) ?? 0
        linearInterval = linearIntervalDecoded
    }
}

extension CodeDeployClientTypes {
    /// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    public struct TimeBasedLinear: Swift.Equatable {
        /// The number of minutes between each incremental traffic shift of a TimeBasedLinear deployment.
        public var linearInterval: Swift.Int
        /// The percentage of traffic that is shifted at the start of each increment of a TimeBasedLinear deployment.
        public var linearPercentage: Swift.Int

        public init (
            linearInterval: Swift.Int = 0,
            linearPercentage: Swift.Int = 0
        )
        {
            self.linearInterval = linearInterval
            self.linearPercentage = linearPercentage
        }
    }

}

extension CodeDeployClientTypes.TimeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end
        case start
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let end = self.end {
            try encodeContainer.encodeTimestamp(end, format: .epochSeconds, forKey: .end)
        }
        if let start = self.start {
            try encodeContainer.encodeTimestamp(start, format: .epochSeconds, forKey: .start)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .end)
        end = endDecoded
    }
}

extension CodeDeployClientTypes {
    /// Information about a time range.
    public struct TimeRange: Swift.Equatable {
        /// The end time of the time range. Specify null to leave the end time open-ended.
        public var end: ClientRuntime.Date?
        /// The start time of the time range. Specify null to leave the start time open-ended.
        public var start: ClientRuntime.Date?

        public init (
            end: ClientRuntime.Date? = nil,
            start: ClientRuntime.Date? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }

}

extension CodeDeployClientTypes.TrafficRoute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let listenerArns = listenerArns {
            var listenerArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listenerArns)
            for listenerarn0 in listenerArns {
                try listenerArnsContainer.encode(listenerarn0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .listenerArns)
        var listenerArnsDecoded0:[Swift.String]? = nil
        if let listenerArnsContainer = listenerArnsContainer {
            listenerArnsDecoded0 = [Swift.String]()
            for string0 in listenerArnsContainer {
                if let string0 = string0 {
                    listenerArnsDecoded0?.append(string0)
                }
            }
        }
        listenerArns = listenerArnsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group.
    public struct TrafficRoute: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one.
        public var listenerArns: [Swift.String]?

        public init (
            listenerArns: [Swift.String]? = nil
        )
        {
            self.listenerArns = listenerArns
        }
    }

}

extension CodeDeployClientTypes.TrafficRoutingConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeBasedCanary
        case timeBasedLinear
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeBasedCanary = self.timeBasedCanary {
            try encodeContainer.encode(timeBasedCanary, forKey: .timeBasedCanary)
        }
        if let timeBasedLinear = self.timeBasedLinear {
            try encodeContainer.encode(timeBasedLinear, forKey: .timeBasedLinear)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoutingType.self, forKey: .type)
        type = typeDecoded
        let timeBasedCanaryDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TimeBasedCanary.self, forKey: .timeBasedCanary)
        timeBasedCanary = timeBasedCanaryDecoded
        let timeBasedLinearDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TimeBasedLinear.self, forKey: .timeBasedLinear)
        timeBasedLinear = timeBasedLinearDecoded
    }
}

extension CodeDeployClientTypes {
    /// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
    public struct TrafficRoutingConfig: Swift.Equatable {
        /// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
        public var timeBasedCanary: CodeDeployClientTypes.TimeBasedCanary?
        /// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or Amazon ECS task sets are specified in the deployment's AppSpec file.
        public var timeBasedLinear: CodeDeployClientTypes.TimeBasedLinear?
        /// The type of traffic shifting (TimeBasedCanary or TimeBasedLinear) used by a deployment configuration.
        public var type: CodeDeployClientTypes.TrafficRoutingType?

        public init (
            timeBasedCanary: CodeDeployClientTypes.TimeBasedCanary? = nil,
            timeBasedLinear: CodeDeployClientTypes.TimeBasedLinear? = nil,
            type: CodeDeployClientTypes.TrafficRoutingType? = nil
        )
        {
            self.timeBasedCanary = timeBasedCanary
            self.timeBasedLinear = timeBasedLinear
            self.type = type
        }
    }

}

extension CodeDeployClientTypes {
    public enum TrafficRoutingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allatonce
        case timebasedcanary
        case timebasedlinear
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficRoutingType] {
            return [
                .allatonce,
                .timebasedcanary,
                .timebasedlinear,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allatonce: return "AllAtOnce"
            case .timebasedcanary: return "TimeBasedCanary"
            case .timebasedlinear: return "TimeBasedLinear"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrafficRoutingType(rawValue: rawValue) ?? TrafficRoutingType.sdkUnknown(rawValue)
        }
    }
}

extension CodeDeployClientTypes.TriggerConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case triggerEvents
        case triggerName
        case triggerTargetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let triggerEvents = triggerEvents {
            var triggerEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerEvents)
            for triggereventtype0 in triggerEvents {
                try triggerEventsContainer.encode(triggereventtype0.rawValue)
            }
        }
        if let triggerName = self.triggerName {
            try encodeContainer.encode(triggerName, forKey: .triggerName)
        }
        if let triggerTargetArn = self.triggerTargetArn {
            try encodeContainer.encode(triggerTargetArn, forKey: .triggerTargetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let triggerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .triggerName)
        triggerName = triggerNameDecoded
        let triggerTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .triggerTargetArn)
        triggerTargetArn = triggerTargetArnDecoded
        let triggerEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TriggerEventType?].self, forKey: .triggerEvents)
        var triggerEventsDecoded0:[CodeDeployClientTypes.TriggerEventType]? = nil
        if let triggerEventsContainer = triggerEventsContainer {
            triggerEventsDecoded0 = [CodeDeployClientTypes.TriggerEventType]()
            for enum0 in triggerEventsContainer {
                if let enum0 = enum0 {
                    triggerEventsDecoded0?.append(enum0)
                }
            }
        }
        triggerEvents = triggerEventsDecoded0
    }
}

extension CodeDeployClientTypes {
    /// Information about notification triggers for the deployment group.
    public struct TriggerConfig: Swift.Equatable {
        /// The event type or types for which notifications are triggered.
        public var triggerEvents: [CodeDeployClientTypes.TriggerEventType]?
        /// The name of the notification trigger.
        public var triggerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        public var triggerTargetArn: Swift.String?

        public init (
            triggerEvents: [CodeDeployClientTypes.TriggerEventType]? = nil,
            triggerName: Swift.String? = nil,
            triggerTargetArn: Swift.String? = nil
        )
        {
            self.triggerEvents = triggerEvents
            self.triggerName = triggerName
            self.triggerTargetArn = triggerTargetArn
        }
    }

}

extension CodeDeployClientTypes {
    public enum TriggerEventType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deploymentFailure
        case deploymentReady
        case deploymentRollback
        case deploymentStart
        case deploymentStop
        case deploymentSuccess
        case instanceFailure
        case instanceReady
        case instanceStart
        case instanceSuccess
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerEventType] {
            return [
                .deploymentFailure,
                .deploymentReady,
                .deploymentRollback,
                .deploymentStart,
                .deploymentStop,
                .deploymentSuccess,
                .instanceFailure,
                .instanceReady,
                .instanceStart,
                .instanceSuccess,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deploymentFailure: return "DeploymentFailure"
            case .deploymentReady: return "DeploymentReady"
            case .deploymentRollback: return "DeploymentRollback"
            case .deploymentStart: return "DeploymentStart"
            case .deploymentStop: return "DeploymentStop"
            case .deploymentSuccess: return "DeploymentSuccess"
            case .instanceFailure: return "InstanceFailure"
            case .instanceReady: return "InstanceReady"
            case .instanceStart: return "InstanceStart"
            case .instanceSuccess: return "InstanceSuccess"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TriggerEventType(rawValue: rawValue) ?? TriggerEventType.sdkUnknown(rawValue)
        }
    }
}

extension TriggerTargetsLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TriggerTargetsLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The maximum allowed number of triggers was exceeded.
public struct TriggerTargetsLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TriggerTargetsLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TriggerTargetsLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UnsupportedActionForDeploymentTypeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnsupportedActionForDeploymentTypeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A call was submitted that is not supported for the specified deployment type.
public struct UnsupportedActionForDeploymentTypeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// The message that corresponds to the exception thrown by CodeDeploy.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnsupportedActionForDeploymentTypeExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnsupportedActionForDeploymentTypeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for key0 in tagKeys {
                try tagKeysContainer.encode(key0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that specifies from which resource to disassociate the tags with the keys in the TagKeys input parameter.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of keys of Tag objects. The Tag objects identified by the keys are disassociated from the resource specified by the ResourceArn input parameter.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ArnNotSupportedException" : self = .arnNotSupportedException(try ArnNotSupportedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagsToAddException" : self = .invalidTagsToAddException(try InvalidTagsToAddException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceArnRequiredException" : self = .resourceArnRequiredException(try ResourceArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagRequiredException" : self = .tagRequiredException(try TagRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case arnNotSupportedException(ArnNotSupportedException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case invalidArnException(InvalidArnException)
    case invalidTagsToAddException(InvalidTagsToAddException)
    case resourceArnRequiredException(ResourceArnRequiredException)
    case tagRequiredException(TagRequiredException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case newApplicationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let newApplicationName = self.newApplicationName {
            try encodeContainer.encode(newApplicationName, forKey: .newApplicationName)
        }
    }
}

extension UpdateApplicationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdateApplication operation.
public struct UpdateApplicationInput: Swift.Equatable {
    /// The current name of the application you want to change.
    public var applicationName: Swift.String?
    /// The new name to give the application.
    public var newApplicationName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        newApplicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.newApplicationName = newApplicationName
    }
}

struct UpdateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let newApplicationName: Swift.String?
}

extension UpdateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case newApplicationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let newApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newApplicationName)
        newApplicationName = newApplicationNameDecoded
    }
}

extension UpdateApplicationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateApplicationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ApplicationAlreadyExistsException" : self = .applicationAlreadyExistsException(try ApplicationAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateApplicationOutputError: Swift.Error, Swift.Equatable {
    case applicationAlreadyExistsException(ApplicationAlreadyExistsException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateApplicationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateApplicationOutputResponse: Swift.Equatable {

    public init () { }
}

extension UpdateDeploymentGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let autoScalingGroups = autoScalingGroups {
            var autoScalingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroups)
            for autoscalinggroupname0 in autoScalingGroups {
                try autoScalingGroupsContainer.encode(autoscalinggroupname0)
            }
        }
        if let blueGreenDeploymentConfiguration = self.blueGreenDeploymentConfiguration {
            try encodeContainer.encode(blueGreenDeploymentConfiguration, forKey: .blueGreenDeploymentConfiguration)
        }
        if let currentDeploymentGroupName = self.currentDeploymentGroupName {
            try encodeContainer.encode(currentDeploymentGroupName, forKey: .currentDeploymentGroupName)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentStyle = self.deploymentStyle {
            try encodeContainer.encode(deploymentStyle, forKey: .deploymentStyle)
        }
        if let ec2TagFilters = ec2TagFilters {
            var ec2TagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2TagFilters)
            for ec2tagfilter0 in ec2TagFilters {
                try ec2TagFiltersContainer.encode(ec2tagfilter0)
            }
        }
        if let ec2TagSet = self.ec2TagSet {
            try encodeContainer.encode(ec2TagSet, forKey: .ec2TagSet)
        }
        if let ecsServices = ecsServices {
            var ecsServicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecsServices)
            for ecsservice0 in ecsServices {
                try ecsServicesContainer.encode(ecsservice0)
            }
        }
        if let loadBalancerInfo = self.loadBalancerInfo {
            try encodeContainer.encode(loadBalancerInfo, forKey: .loadBalancerInfo)
        }
        if let newDeploymentGroupName = self.newDeploymentGroupName {
            try encodeContainer.encode(newDeploymentGroupName, forKey: .newDeploymentGroupName)
        }
        if let onPremisesInstanceTagFilters = onPremisesInstanceTagFilters {
            var onPremisesInstanceTagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onPremisesInstanceTagFilters)
            for tagfilter0 in onPremisesInstanceTagFilters {
                try onPremisesInstanceTagFiltersContainer.encode(tagfilter0)
            }
        }
        if let onPremisesTagSet = self.onPremisesTagSet {
            try encodeContainer.encode(onPremisesTagSet, forKey: .onPremisesTagSet)
        }
        if let outdatedInstancesStrategy = self.outdatedInstancesStrategy {
            try encodeContainer.encode(outdatedInstancesStrategy.rawValue, forKey: .outdatedInstancesStrategy)
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let triggerConfigurations = triggerConfigurations {
            var triggerConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggerConfigurations)
            for triggerconfig0 in triggerConfigurations {
                try triggerConfigurationsContainer.encode(triggerconfig0)
            }
        }
    }
}

extension UpdateDeploymentGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// Represents the input of an UpdateDeploymentGroup operation.
public struct UpdateDeploymentGroupInput: Swift.Equatable {
    /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
    public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The application name that corresponds to the deployment group to update.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them.
    ///
    /// * To keep the Auto Scaling groups, enter their names or do not specify this parameter.
    ///
    /// * To remove Auto Scaling groups, specify a non-null empty list of Auto Scaling group names to detach all CodeDeploy-managed Auto Scaling lifecycle hooks. For examples, see [Amazon EC2 instances in an Amazon EC2 Auto Scaling group fail to launch and receive the error "Heartbeat Timeout"](https://docs.aws.amazon.com/https:/docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-auto-scaling.html#troubleshooting-auto-scaling-heartbeat) in the CodeDeploy User Guide.
    public var autoScalingGroups: [Swift.String]?
    /// Information about blue/green deployment options for a deployment group.
    public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    /// The current name of the deployment group.
    /// This member is required.
    public var currentDeploymentGroupName: Swift.String?
    /// The replacement deployment configuration name to use, if you want to change it.
    public var deploymentConfigName: Swift.String?
    /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    /// Information about groups of tags applied to on-premises instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups.
    public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
    public var ecsServices: [CodeDeployClientTypes.ECSService]?
    /// Information about the load balancer used in a deployment.
    public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    /// The new name of the deployment group, if you want to change it.
    public var newDeploymentGroupName: Swift.String?
    /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    /// Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups.
    public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
    public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    /// A replacement ARN for the service role, if you want to change it.
    public var serviceRoleArn: Swift.String?
    /// Information about triggers to change when the deployment group is updated. For examples, see [Edit a Trigger in a CodeDeploy Deployment Group](https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html) in the CodeDeploy User Guide.
    public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

    public init (
        alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        autoScalingGroups: [Swift.String]? = nil,
        blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
        currentDeploymentGroupName: Swift.String? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
        ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
        ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
        ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
        loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
        newDeploymentGroupName: Swift.String? = nil,
        onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
        onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
        serviceRoleArn: Swift.String? = nil,
        triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.currentDeploymentGroupName = currentDeploymentGroupName
        self.deploymentConfigName = deploymentConfigName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.newDeploymentGroupName = newDeploymentGroupName
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.triggerConfigurations = triggerConfigurations
    }
}

struct UpdateDeploymentGroupInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let currentDeploymentGroupName: Swift.String?
    let newDeploymentGroupName: Swift.String?
    let deploymentConfigName: Swift.String?
    let ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    let onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    let autoScalingGroups: [Swift.String]?
    let serviceRoleArn: Swift.String?
    let triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?
    let alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    let autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    let outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    let deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    let blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    let loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    let ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    let ecsServices: [CodeDeployClientTypes.ECSService]?
    let onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
}

extension UpdateDeploymentGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration
        case applicationName
        case autoRollbackConfiguration
        case autoScalingGroups
        case blueGreenDeploymentConfiguration
        case currentDeploymentGroupName
        case deploymentConfigName
        case deploymentStyle
        case ec2TagFilters
        case ec2TagSet
        case ecsServices
        case loadBalancerInfo
        case newDeploymentGroupName
        case onPremisesInstanceTagFilters
        case onPremisesTagSet
        case outdatedInstancesStrategy
        case serviceRoleArn
        case triggerConfigurations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let currentDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentDeploymentGroupName)
        currentDeploymentGroupName = currentDeploymentGroupNameDecoded
        let newDeploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDeploymentGroupName)
        newDeploymentGroupName = newDeploymentGroupNameDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let ec2TagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.EC2TagFilter?].self, forKey: .ec2TagFilters)
        var ec2TagFiltersDecoded0:[CodeDeployClientTypes.EC2TagFilter]? = nil
        if let ec2TagFiltersContainer = ec2TagFiltersContainer {
            ec2TagFiltersDecoded0 = [CodeDeployClientTypes.EC2TagFilter]()
            for structure0 in ec2TagFiltersContainer {
                if let structure0 = structure0 {
                    ec2TagFiltersDecoded0?.append(structure0)
                }
            }
        }
        ec2TagFilters = ec2TagFiltersDecoded0
        let onPremisesInstanceTagFiltersContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TagFilter?].self, forKey: .onPremisesInstanceTagFilters)
        var onPremisesInstanceTagFiltersDecoded0:[CodeDeployClientTypes.TagFilter]? = nil
        if let onPremisesInstanceTagFiltersContainer = onPremisesInstanceTagFiltersContainer {
            onPremisesInstanceTagFiltersDecoded0 = [CodeDeployClientTypes.TagFilter]()
            for structure0 in onPremisesInstanceTagFiltersContainer {
                if let structure0 = structure0 {
                    onPremisesInstanceTagFiltersDecoded0?.append(structure0)
                }
            }
        }
        onPremisesInstanceTagFilters = onPremisesInstanceTagFiltersDecoded0
        let autoScalingGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoScalingGroups)
        var autoScalingGroupsDecoded0:[Swift.String]? = nil
        if let autoScalingGroupsContainer = autoScalingGroupsContainer {
            autoScalingGroupsDecoded0 = [Swift.String]()
            for string0 in autoScalingGroupsContainer {
                if let string0 = string0 {
                    autoScalingGroupsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroups = autoScalingGroupsDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let triggerConfigurationsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TriggerConfig?].self, forKey: .triggerConfigurations)
        var triggerConfigurationsDecoded0:[CodeDeployClientTypes.TriggerConfig]? = nil
        if let triggerConfigurationsContainer = triggerConfigurationsContainer {
            triggerConfigurationsDecoded0 = [CodeDeployClientTypes.TriggerConfig]()
            for structure0 in triggerConfigurationsContainer {
                if let structure0 = structure0 {
                    triggerConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        triggerConfigurations = triggerConfigurationsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let outdatedInstancesStrategyDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OutdatedInstancesStrategy.self, forKey: .outdatedInstancesStrategy)
        outdatedInstancesStrategy = outdatedInstancesStrategyDecoded
        let deploymentStyleDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.DeploymentStyle.self, forKey: .deploymentStyle)
        deploymentStyle = deploymentStyleDecoded
        let blueGreenDeploymentConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.BlueGreenDeploymentConfiguration.self, forKey: .blueGreenDeploymentConfiguration)
        blueGreenDeploymentConfiguration = blueGreenDeploymentConfigurationDecoded
        let loadBalancerInfoDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LoadBalancerInfo.self, forKey: .loadBalancerInfo)
        loadBalancerInfo = loadBalancerInfoDecoded
        let ec2TagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.EC2TagSet.self, forKey: .ec2TagSet)
        ec2TagSet = ec2TagSetDecoded
        let ecsServicesContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ECSService?].self, forKey: .ecsServices)
        var ecsServicesDecoded0:[CodeDeployClientTypes.ECSService]? = nil
        if let ecsServicesContainer = ecsServicesContainer {
            ecsServicesDecoded0 = [CodeDeployClientTypes.ECSService]()
            for structure0 in ecsServicesContainer {
                if let structure0 = structure0 {
                    ecsServicesDecoded0?.append(structure0)
                }
            }
        }
        ecsServices = ecsServicesDecoded0
        let onPremisesTagSetDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.OnPremisesTagSet.self, forKey: .onPremisesTagSet)
        onPremisesTagSet = onPremisesTagSetDecoded
    }
}

extension UpdateDeploymentGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDeploymentGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlarmsLimitExceededException" : self = .alarmsLimitExceededException(try AlarmsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationDoesNotExistException" : self = .applicationDoesNotExistException(try ApplicationDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ApplicationNameRequiredException" : self = .applicationNameRequiredException(try ApplicationNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentConfigDoesNotExistException" : self = .deploymentConfigDoesNotExistException(try DeploymentConfigDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupAlreadyExistsException" : self = .deploymentGroupAlreadyExistsException(try DeploymentGroupAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupDoesNotExistException" : self = .deploymentGroupDoesNotExistException(try DeploymentGroupDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DeploymentGroupNameRequiredException" : self = .deploymentGroupNameRequiredException(try DeploymentGroupNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ECSServiceMappingLimitExceededException" : self = .eCSServiceMappingLimitExceededException(try ECSServiceMappingLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAlarmConfigException" : self = .invalidAlarmConfigException(try InvalidAlarmConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidApplicationNameException" : self = .invalidApplicationNameException(try InvalidApplicationNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoRollbackConfigException" : self = .invalidAutoRollbackConfigException(try InvalidAutoRollbackConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAutoScalingGroupException" : self = .invalidAutoScalingGroupException(try InvalidAutoScalingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidBlueGreenDeploymentConfigurationException" : self = .invalidBlueGreenDeploymentConfigurationException(try InvalidBlueGreenDeploymentConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentConfigNameException" : self = .invalidDeploymentConfigNameException(try InvalidDeploymentConfigNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentGroupNameException" : self = .invalidDeploymentGroupNameException(try InvalidDeploymentGroupNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeploymentStyleException" : self = .invalidDeploymentStyleException(try InvalidDeploymentStyleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagCombinationException" : self = .invalidEC2TagCombinationException(try InvalidEC2TagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidEC2TagException" : self = .invalidEC2TagException(try InvalidEC2TagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidECSServiceException" : self = .invalidECSServiceException(try InvalidECSServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLoadBalancerInfoException" : self = .invalidLoadBalancerInfoException(try InvalidLoadBalancerInfoException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidOnPremisesTagCombinationException" : self = .invalidOnPremisesTagCombinationException(try InvalidOnPremisesTagCombinationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetGroupPairException" : self = .invalidTargetGroupPairException(try InvalidTargetGroupPairException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficRoutingConfigurationException" : self = .invalidTrafficRoutingConfigurationException(try InvalidTrafficRoutingConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTriggerConfigException" : self = .invalidTriggerConfigException(try InvalidTriggerConfigException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LifecycleHookLimitExceededException" : self = .lifecycleHookLimitExceededException(try LifecycleHookLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagSetListLimitExceededException" : self = .tagSetListLimitExceededException(try TagSetListLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TriggerTargetsLimitExceededException" : self = .triggerTargetsLimitExceededException(try TriggerTargetsLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDeploymentGroupOutputError: Swift.Error, Swift.Equatable {
    case alarmsLimitExceededException(AlarmsLimitExceededException)
    case applicationDoesNotExistException(ApplicationDoesNotExistException)
    case applicationNameRequiredException(ApplicationNameRequiredException)
    case deploymentConfigDoesNotExistException(DeploymentConfigDoesNotExistException)
    case deploymentGroupAlreadyExistsException(DeploymentGroupAlreadyExistsException)
    case deploymentGroupDoesNotExistException(DeploymentGroupDoesNotExistException)
    case deploymentGroupNameRequiredException(DeploymentGroupNameRequiredException)
    case eCSServiceMappingLimitExceededException(ECSServiceMappingLimitExceededException)
    case invalidAlarmConfigException(InvalidAlarmConfigException)
    case invalidApplicationNameException(InvalidApplicationNameException)
    case invalidAutoRollbackConfigException(InvalidAutoRollbackConfigException)
    case invalidAutoScalingGroupException(InvalidAutoScalingGroupException)
    case invalidBlueGreenDeploymentConfigurationException(InvalidBlueGreenDeploymentConfigurationException)
    case invalidDeploymentConfigNameException(InvalidDeploymentConfigNameException)
    case invalidDeploymentGroupNameException(InvalidDeploymentGroupNameException)
    case invalidDeploymentStyleException(InvalidDeploymentStyleException)
    case invalidEC2TagCombinationException(InvalidEC2TagCombinationException)
    case invalidEC2TagException(InvalidEC2TagException)
    case invalidECSServiceException(InvalidECSServiceException)
    case invalidInputException(InvalidInputException)
    case invalidLoadBalancerInfoException(InvalidLoadBalancerInfoException)
    case invalidOnPremisesTagCombinationException(InvalidOnPremisesTagCombinationException)
    case invalidRoleException(InvalidRoleException)
    case invalidTagException(InvalidTagException)
    case invalidTargetGroupPairException(InvalidTargetGroupPairException)
    case invalidTrafficRoutingConfigurationException(InvalidTrafficRoutingConfigurationException)
    case invalidTriggerConfigException(InvalidTriggerConfigException)
    case lifecycleHookLimitExceededException(LifecycleHookLimitExceededException)
    case tagSetListLimitExceededException(TagSetListLimitExceededException)
    case throttlingException(ThrottlingException)
    case triggerTargetsLimitExceededException(TriggerTargetsLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDeploymentGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDeploymentGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hooksNotCleanedUp = output.hooksNotCleanedUp
        } else {
            self.hooksNotCleanedUp = nil
        }
    }
}

/// Represents the output of an UpdateDeploymentGroup operation.
public struct UpdateDeploymentGroupOutputResponse: Swift.Equatable {
    /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon Web Services account. If the output contains data, CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon Web Services account.
    public var hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?

    public init (
        hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

struct UpdateDeploymentGroupOutputResponseBody: Swift.Equatable {
    let hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?
}

extension UpdateDeploymentGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hooksNotCleanedUp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hooksNotCleanedUpContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.AutoScalingGroup?].self, forKey: .hooksNotCleanedUp)
        var hooksNotCleanedUpDecoded0:[CodeDeployClientTypes.AutoScalingGroup]? = nil
        if let hooksNotCleanedUpContainer = hooksNotCleanedUpContainer {
            hooksNotCleanedUpDecoded0 = [CodeDeployClientTypes.AutoScalingGroup]()
            for structure0 in hooksNotCleanedUpContainer {
                if let structure0 = structure0 {
                    hooksNotCleanedUpDecoded0?.append(structure0)
                }
            }
        }
        hooksNotCleanedUp = hooksNotCleanedUpDecoded0
    }
}
