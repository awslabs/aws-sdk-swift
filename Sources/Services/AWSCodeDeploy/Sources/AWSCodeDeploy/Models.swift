//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.listWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct AddTagsToOnPremisesInstancesOutput: Swift.Sendable {

    public init() { }
}

public struct ContinueDeploymentOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteApplicationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteDeploymentConfigOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterOnPremisesInstanceOutput: Swift.Sendable {

    public init() { }
}

public struct RegisterApplicationRevisionOutput: Swift.Sendable {

    public init() { }
}

public struct RegisterOnPremisesInstanceOutput: Swift.Sendable {

    public init() { }
}

public struct RemoveTagsFromOnPremisesInstancesOutput: Swift.Sendable {

    public init() { }
}

public struct SkipWaitTimeForInstanceTerminationOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateApplicationOutput: Swift.Sendable {

    public init() { }
}

/// The maximum number of allowed on-premises instances in a single call was exceeded.
public struct InstanceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An on-premises instance name was not specified.
public struct InstanceNameRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceNameRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified on-premises instance is not registered.
public struct InstanceNotRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceNotRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The on-premises instance name was specified in an invalid format.
public struct InvalidInstanceNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInstanceNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tag was specified in an invalid format.
public struct InvalidTagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum allowed number of tags was exceeded.
public struct TagLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A tag was not specified.
public struct TagRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    /// Information about a tag.
    public struct Tag: Swift.Sendable {
        /// The tag's key.
        public var key: Swift.String?
        /// The tag's value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

/// Represents the input of, and adds tags to, an on-premises instance operation.
public struct AddTagsToOnPremisesInstancesInput: Swift.Sendable {
    /// The names of the on-premises instances to which to add tags.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The tag key-value pairs to add to the on-premises instances. Keys and values are both required. Keys cannot be null or empty strings. Value-only tags are not allowed.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init(
        instanceNames: [Swift.String]? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

extension CodeDeployClientTypes {

    /// Information about an alarm.
    public struct Alarm: Swift.Sendable {
        /// The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about alarms associated with a deployment or deployment group.
    public struct AlarmConfiguration: Swift.Sendable {
        /// A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.
        public var alarms: [CodeDeployClientTypes.Alarm]?
        /// Indicates whether the alarm configuration is enabled.
        public var enabled: Swift.Bool
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.
        ///
        /// * true: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.
        ///
        /// * false: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.
        public var ignorePollAlarmFailure: Swift.Bool

        public init(
            alarms: [CodeDeployClientTypes.Alarm]? = nil,
            enabled: Swift.Bool = false,
            ignorePollAlarmFailure: Swift.Bool = false
        )
        {
            self.alarms = alarms
            self.enabled = enabled
            self.ignorePollAlarmFailure = ignorePollAlarmFailure
        }
    }
}

/// The maximum number of alarms for a deployment group (10) was exceeded.
public struct AlarmsLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlarmsLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An application with the specified name with the user or Amazon Web Services account already exists.
public struct ApplicationAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ApplicationAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The application does not exist with the user or Amazon Web Services account.
public struct ApplicationDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ApplicationDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum ComputePlatform: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecs
        case lambda
        case server
        case sdkUnknown(Swift.String)

        public static var allCases: [ComputePlatform] {
            return [
                .ecs,
                .lambda,
                .server
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecs: return "ECS"
            case .lambda: return "Lambda"
            case .server: return "Server"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an application.
    public struct ApplicationInfo: Swift.Sendable {
        /// The application ID.
        public var applicationId: Swift.String?
        /// The application name.
        public var applicationName: Swift.String?
        /// The destination platform type for deployment of the application (Lambda or Server).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The time at which the application was created.
        public var createTime: Foundation.Date?
        /// The name for a connection to a GitHub account.
        public var gitHubAccountName: Swift.String?
        /// True if the user has authenticated with GitHub for the specified application. Otherwise, false.
        public var linkedToGitHub: Swift.Bool

        public init(
            applicationId: Swift.String? = nil,
            applicationName: Swift.String? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: Foundation.Date? = nil,
            gitHubAccountName: Swift.String? = nil,
            linkedToGitHub: Swift.Bool = false
        )
        {
            self.applicationId = applicationId
            self.applicationName = applicationName
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.gitHubAccountName = gitHubAccountName
            self.linkedToGitHub = linkedToGitHub
        }
    }
}

/// More applications were attempted to be created than are allowed.
public struct ApplicationLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ApplicationLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The minimum number of required application names was not specified.
public struct ApplicationNameRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ApplicationNameRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum ApplicationRevisionSortBy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case firstusedtime
        case lastusedtime
        case registertime
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationRevisionSortBy] {
            return [
                .firstusedtime,
                .lastusedtime,
                .registertime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .firstusedtime: return "firstUsedTime"
            case .lastusedtime: return "lastUsedTime"
            case .registertime: return "registerTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// A revision for an Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated RawString data type.
    public struct AppSpecContent: Swift.Sendable {
        /// The YAML-formatted or JSON-formatted revision string. For an Lambda deployment, the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version. For an Amazon ECS deployment, the content includes the task name, information about the load balancer that serves traffic to the container, and more. For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as BeforeInstall, during a deployment.
        public var content: Swift.String?
        /// The SHA256 hash value of the revision content.
        public var sha256: Swift.String?

        public init(
            content: Swift.String? = nil,
            sha256: Swift.String? = nil
        )
        {
            self.content = content
            self.sha256 = sha256
        }
    }
}

/// The specified ARN is not supported. For example, it might be an ARN for a resource that is not expected.
public struct ArnNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ArnNotSupportedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum AutoRollbackEvent: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deploymentFailure
        case deploymentStopOnAlarm
        case deploymentStopOnRequest
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoRollbackEvent] {
            return [
                .deploymentFailure,
                .deploymentStopOnAlarm,
                .deploymentStopOnRequest
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deploymentFailure: return "DEPLOYMENT_FAILURE"
            case .deploymentStopOnAlarm: return "DEPLOYMENT_STOP_ON_ALARM"
            case .deploymentStopOnRequest: return "DEPLOYMENT_STOP_ON_REQUEST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
    public struct AutoRollbackConfiguration: Swift.Sendable {
        /// Indicates whether a defined automatic rollback configuration is currently enabled.
        public var enabled: Swift.Bool
        /// The event type or types that trigger a rollback.
        public var events: [CodeDeployClientTypes.AutoRollbackEvent]?

        public init(
            enabled: Swift.Bool = false,
            events: [CodeDeployClientTypes.AutoRollbackEvent]? = nil
        )
        {
            self.enabled = enabled
            self.events = events
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Sendable {
        /// The name of the launch hook that CodeDeploy installed into the Auto Scaling group. For more information about the launch hook, see [How Amazon EC2 Auto Scaling works with CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html#integrations-aws-auto-scaling-behaviors) in the CodeDeploy User Guide.
        public var hook: Swift.String?
        /// The Auto Scaling group name.
        public var name: Swift.String?
        /// The name of the termination hook that CodeDeploy installed into the Auto Scaling group. For more information about the termination hook, see [Enabling termination deployments during Auto Scaling scale-in events](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html#integrations-aws-auto-scaling-behaviors-hook-enable) in the CodeDeploy User Guide.
        public var terminationHook: Swift.String?

        public init(
            hook: Swift.String? = nil,
            name: Swift.String? = nil,
            terminationHook: Swift.String? = nil
        )
        {
            self.hook = hook
            self.name = name
            self.terminationHook = terminationHook
        }
    }
}

/// The maximum number of names or IDs allowed for this request (100) was exceeded.
public struct BatchLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The application name was specified in an invalid format.
public struct InvalidApplicationNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidApplicationNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The revision was specified in an invalid format.
public struct InvalidRevisionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRevisionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The revision ID was not specified.
public struct RevisionRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevisionRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    /// Information about the location of application artifacts stored in GitHub.
    public struct GitHubLocation: Swift.Sendable {
        /// The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision.
        public var commitId: Swift.String?
        /// The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. Specified as account/repository.
        public var repository: Swift.String?

        public init(
            commitId: Swift.String? = nil,
            repository: Swift.String? = nil
        )
        {
            self.commitId = commitId
            self.repository = repository
        }
    }
}

extension CodeDeployClientTypes {

    public enum RevisionLocationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case appspeccontent
        case github
        case s3
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [RevisionLocationType] {
            return [
                .appspeccontent,
                .github,
                .s3,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .appspeccontent: return "AppSpecContent"
            case .github: return "GitHub"
            case .s3: return "S3"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum BundleType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case json
        case tar
        case targzip
        case yaml
        case zip
        case sdkUnknown(Swift.String)

        public static var allCases: [BundleType] {
            return [
                .json,
                .tar,
                .targzip,
                .yaml,
                .zip
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .json: return "JSON"
            case .tar: return "tar"
            case .targzip: return "tgz"
            case .yaml: return "YAML"
            case .zip: return "zip"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the location of application artifacts stored in Amazon S3.
    public struct S3Location: Swift.Sendable {
        /// The name of the Amazon S3 bucket where the application revision is stored.
        public var bucket: Swift.String?
        /// The file type of the application revision. Must be one of the following:
        ///
        /// * tar: A tar archive file.
        ///
        /// * tgz: A compressed tar archive file.
        ///
        /// * zip: A zip archive file.
        ///
        /// * YAML: A YAML-formatted file.
        ///
        /// * JSON: A JSON-formatted file.
        public var bundleType: CodeDeployClientTypes.BundleType?
        /// The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision. If the ETag is not specified as an input parameter, ETag validation of the object is skipped.
        public var eTag: Swift.String?
        /// The name of the Amazon S3 object that represents the bundled artifacts for the application revision.
        public var key: Swift.String?
        /// A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision. If the version is not specified, the system uses the most recent version by default.
        public var version: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            bundleType: CodeDeployClientTypes.BundleType? = nil,
            eTag: Swift.String? = nil,
            key: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bundleType = bundleType
            self.eTag = eTag
            self.key = key
            self.version = version
        }
    }
}

extension CodeDeployClientTypes {

    /// A revision for an Lambda deployment that is a YAML-formatted or JSON-formatted string. For Lambda deployments, the revision is the same as the AppSpec file.
    @available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
    public struct RawString: Swift.Sendable {
        /// The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events.
        public var content: Swift.String?
        /// The SHA256 hash value of the revision content.
        public var sha256: Swift.String?

        public init(
            content: Swift.String? = nil,
            sha256: Swift.String? = nil
        )
        {
            self.content = content
            self.sha256 = sha256
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the location of an application revision.
    public struct RevisionLocation: Swift.Sendable {
        /// The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString.
        public var appSpecContent: CodeDeployClientTypes.AppSpecContent?
        /// Information about the location of application artifacts stored in GitHub.
        public var gitHubLocation: CodeDeployClientTypes.GitHubLocation?
        /// The type of application revision:
        ///
        /// * S3: An application revision stored in Amazon S3.
        ///
        /// * GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).
        ///
        /// * String: A YAML-formatted or JSON-formatted string (Lambda deployments only).
        ///
        /// * AppSpecContent: An AppSpecContent object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.
        public var revisionType: CodeDeployClientTypes.RevisionLocationType?
        /// Information about the location of a revision stored in Amazon S3.
        public var s3Location: CodeDeployClientTypes.S3Location?
        /// Information about the location of an Lambda deployment revision stored as a RawString.
        @available(*, deprecated, message: "RawString and String revision type are deprecated, use AppSpecContent type instead.")
        public var string: CodeDeployClientTypes.RawString?

        public init(
            appSpecContent: CodeDeployClientTypes.AppSpecContent? = nil,
            gitHubLocation: CodeDeployClientTypes.GitHubLocation? = nil,
            revisionType: CodeDeployClientTypes.RevisionLocationType? = nil,
            s3Location: CodeDeployClientTypes.S3Location? = nil,
            string: CodeDeployClientTypes.RawString? = nil
        )
        {
            self.appSpecContent = appSpecContent
            self.gitHubLocation = gitHubLocation
            self.revisionType = revisionType
            self.s3Location = s3Location
            self.string = string
        }
    }
}

/// Represents the input of a BatchGetApplicationRevisions operation.
public struct BatchGetApplicationRevisionsInput: Swift.Sendable {
    /// The name of an CodeDeploy application about which to get revision information.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An array of RevisionLocation objects that specify information to get about the application revisions, including type and location. The maximum number of RevisionLocation objects you can specify is 25.
    /// This member is required.
    public var revisions: [CodeDeployClientTypes.RevisionLocation]?

    public init(
        applicationName: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionLocation]? = nil
    )
    {
        self.applicationName = applicationName
        self.revisions = revisions
    }
}

extension CodeDeployClientTypes {

    /// Information about an application revision.
    public struct GenericRevisionInfo: Swift.Sendable {
        /// The deployment groups for which this is the current target revision.
        public var deploymentGroups: [Swift.String]?
        /// A comment about the revision.
        public var description: Swift.String?
        /// When the revision was first used by CodeDeploy.
        public var firstUsedTime: Foundation.Date?
        /// When the revision was last used by CodeDeploy.
        public var lastUsedTime: Foundation.Date?
        /// When the revision was registered with CodeDeploy.
        public var registerTime: Foundation.Date?

        public init(
            deploymentGroups: [Swift.String]? = nil,
            description: Swift.String? = nil,
            firstUsedTime: Foundation.Date? = nil,
            lastUsedTime: Foundation.Date? = nil,
            registerTime: Foundation.Date? = nil
        )
        {
            self.deploymentGroups = deploymentGroups
            self.description = description
            self.firstUsedTime = firstUsedTime
            self.lastUsedTime = lastUsedTime
            self.registerTime = registerTime
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an application revision.
    public struct RevisionInfo: Swift.Sendable {
        /// Information about an application revision, including usage details and associated deployment groups.
        public var genericRevisionInfo: CodeDeployClientTypes.GenericRevisionInfo?
        /// Information about the location and type of an application revision.
        public var revisionLocation: CodeDeployClientTypes.RevisionLocation?

        public init(
            genericRevisionInfo: CodeDeployClientTypes.GenericRevisionInfo? = nil,
            revisionLocation: CodeDeployClientTypes.RevisionLocation? = nil
        )
        {
            self.genericRevisionInfo = genericRevisionInfo
            self.revisionLocation = revisionLocation
        }
    }
}

/// Represents the output of a BatchGetApplicationRevisions operation.
public struct BatchGetApplicationRevisionsOutput: Swift.Sendable {
    /// The name of the application that corresponds to the revisions.
    public var applicationName: Swift.String?
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?
    /// Additional information about the revisions, including the type and location.
    public var revisions: [CodeDeployClientTypes.RevisionInfo]?

    public init(
        applicationName: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionInfo]? = nil
    )
    {
        self.applicationName = applicationName
        self.errorMessage = errorMessage
        self.revisions = revisions
    }
}

/// Represents the input of a BatchGetApplications operation.
public struct BatchGetApplicationsInput: Swift.Sendable {
    /// A list of application names separated by spaces. The maximum number of application names you can specify is 100.
    /// This member is required.
    public var applicationNames: [Swift.String]?

    public init(
        applicationNames: [Swift.String]? = nil
    )
    {
        self.applicationNames = applicationNames
    }
}

/// Represents the output of a BatchGetApplications operation.
public struct BatchGetApplicationsOutput: Swift.Sendable {
    /// Information about the applications.
    public var applicationsInfo: [CodeDeployClientTypes.ApplicationInfo]?

    public init(
        applicationsInfo: [CodeDeployClientTypes.ApplicationInfo]? = nil
    )
    {
        self.applicationsInfo = applicationsInfo
    }
}

/// The deployment configuration does not exist with the user or Amazon Web Services account.
public struct DeploymentConfigDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentConfigDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment group name was not specified.
public struct DeploymentGroupNameRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentGroupNameRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment group name was specified in an invalid format.
public struct InvalidDeploymentGroupNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentGroupNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a BatchGetDeploymentGroups operation.
public struct BatchGetDeploymentGroupsInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the applicable user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The names of the deployment groups.
    /// This member is required.
    public var deploymentGroupNames: [Swift.String]?

    public init(
        applicationName: Swift.String? = nil,
        deploymentGroupNames: [Swift.String]? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupNames = deploymentGroupNames
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentReadyAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case continueDeployment
        case stopDeployment
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentReadyAction] {
            return [
                .continueDeployment,
                .stopDeployment
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continueDeployment: return "CONTINUE_DEPLOYMENT"
            case .stopDeployment: return "STOP_DEPLOYMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
    public struct DeploymentReadyOption: Swift.Sendable {
        /// Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        ///
        /// * CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
        ///
        /// * STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using [ContinueDeployment]. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.
        public var actionOnTimeout: CodeDeployClientTypes.DeploymentReadyAction?
        /// The number of minutes to wait before the status of a blue/green deployment is changed to Stopped if rerouting is not started manually. Applies only to the STOP_DEPLOYMENT option for actionOnTimeout.
        public var waitTimeInMinutes: Swift.Int

        public init(
            actionOnTimeout: CodeDeployClientTypes.DeploymentReadyAction? = nil,
            waitTimeInMinutes: Swift.Int = 0
        )
        {
            self.actionOnTimeout = actionOnTimeout
            self.waitTimeInMinutes = waitTimeInMinutes
        }
    }
}

extension CodeDeployClientTypes {

    public enum GreenFleetProvisioningAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copyAutoScalingGroup
        case discoverExisting
        case sdkUnknown(Swift.String)

        public static var allCases: [GreenFleetProvisioningAction] {
            return [
                .copyAutoScalingGroup,
                .discoverExisting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copyAutoScalingGroup: return "COPY_AUTO_SCALING_GROUP"
            case .discoverExisting: return "DISCOVER_EXISTING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the instances that belong to the replacement environment in a blue/green deployment.
    public struct GreenFleetProvisioningOption: Swift.Sendable {
        /// The method used to add instances to a replacement environment.
        ///
        /// * DISCOVER_EXISTING: Use instances that already exist or will be created manually.
        ///
        /// * COPY_AUTO_SCALING_GROUP: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.
        public var action: CodeDeployClientTypes.GreenFleetProvisioningAction?

        public init(
            action: CodeDeployClientTypes.GreenFleetProvisioningAction? = nil
        )
        {
            self.action = action
        }
    }
}

extension CodeDeployClientTypes {

    public enum InstanceAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keepAlive
        case terminate
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceAction] {
            return [
                .keepAlive,
                .terminate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keepAlive: return "KEEP_ALIVE"
            case .terminate: return "TERMINATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about whether instances in the original environment are terminated when a blue/green deployment is successful. BlueInstanceTerminationOption does not apply to Lambda deployments.
    public struct BlueInstanceTerminationOption: Swift.Sendable {
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        ///
        /// * TERMINATE: Instances are terminated after a specified wait time.
        ///
        /// * KEEP_ALIVE: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        public var action: CodeDeployClientTypes.InstanceAction?
        /// For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment. For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. The maximum setting is 2880 minutes (2 days).
        public var terminationWaitTimeInMinutes: Swift.Int

        public init(
            action: CodeDeployClientTypes.InstanceAction? = nil,
            terminationWaitTimeInMinutes: Swift.Int = 0
        )
        {
            self.action = action
            self.terminationWaitTimeInMinutes = terminationWaitTimeInMinutes
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about blue/green deployment options for a deployment group.
    public struct BlueGreenDeploymentConfiguration: Swift.Sendable {
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment.
        public var deploymentReadyOption: CodeDeployClientTypes.DeploymentReadyOption?
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment.
        public var greenFleetProvisioningOption: CodeDeployClientTypes.GreenFleetProvisioningOption?
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment.
        public var terminateBlueInstancesOnDeploymentSuccess: CodeDeployClientTypes.BlueInstanceTerminationOption?

        public init(
            deploymentReadyOption: CodeDeployClientTypes.DeploymentReadyOption? = nil,
            greenFleetProvisioningOption: CodeDeployClientTypes.GreenFleetProvisioningOption? = nil,
            terminateBlueInstancesOnDeploymentSuccess: CodeDeployClientTypes.BlueInstanceTerminationOption? = nil
        )
        {
            self.deploymentReadyOption = deploymentReadyOption
            self.greenFleetProvisioningOption = greenFleetProvisioningOption
            self.terminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess
        }
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentOption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case withoutTrafficControl
        case withTrafficControl
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentOption] {
            return [
                .withoutTrafficControl,
                .withTrafficControl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .withoutTrafficControl: return "WITHOUT_TRAFFIC_CONTROL"
            case .withTrafficControl: return "WITH_TRAFFIC_CONTROL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blueGreen
        case inPlace
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentType] {
            return [
                .blueGreen,
                .inPlace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blueGreen: return "BLUE_GREEN"
            case .inPlace: return "IN_PLACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    public struct DeploymentStyle: Swift.Sendable {
        /// Indicates whether to route deployment traffic behind a load balancer.
        public var deploymentOption: CodeDeployClientTypes.DeploymentOption?
        /// Indicates whether to run an in-place deployment or a blue/green deployment.
        public var deploymentType: CodeDeployClientTypes.DeploymentType?

        public init(
            deploymentOption: CodeDeployClientTypes.DeploymentOption? = nil,
            deploymentType: CodeDeployClientTypes.DeploymentType? = nil
        )
        {
            self.deploymentOption = deploymentOption
            self.deploymentType = deploymentType
        }
    }
}

extension CodeDeployClientTypes {

    public enum EC2TagFilterType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyAndValue
        case keyOnly
        case valueOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [EC2TagFilterType] {
            return [
                .keyAndValue,
                .keyOnly,
                .valueOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyAndValue: return "KEY_AND_VALUE"
            case .keyOnly: return "KEY_ONLY"
            case .valueOnly: return "VALUE_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an EC2 tag filter.
    public struct EC2TagFilter: Swift.Sendable {
        /// The tag filter key.
        public var key: Swift.String?
        /// The tag filter type:
        ///
        /// * KEY_ONLY: Key only.
        ///
        /// * VALUE_ONLY: Value only.
        ///
        /// * KEY_AND_VALUE: Key and value.
        public var type: CodeDeployClientTypes.EC2TagFilterType?
        /// The tag filter value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            type: CodeDeployClientTypes.EC2TagFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about groups of Amazon EC2 instance tags.
    public struct EC2TagSet: Swift.Sendable {
        /// A list that contains other lists of Amazon EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.
        public var ec2TagSetList: [[CodeDeployClientTypes.EC2TagFilter]]?

        public init(
            ec2TagSetList: [[CodeDeployClientTypes.EC2TagFilter]]? = nil
        )
        {
            self.ec2TagSetList = ec2TagSetList
        }
    }
}

extension CodeDeployClientTypes {

    /// Contains the service and cluster names used to identify an Amazon ECS deployment's target.
    public struct ECSService: Swift.Sendable {
        /// The name of the cluster that the Amazon ECS service is associated with.
        public var clusterName: Swift.String?
        /// The name of the target Amazon ECS service.
        public var serviceName: Swift.String?

        public init(
            clusterName: Swift.String? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.clusterName = clusterName
            self.serviceName = serviceName
        }
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case baking
        case created
        case failed
        case inProgress
        case queued
        case ready
        case stopped
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentStatus] {
            return [
                .baking,
                .created,
                .failed,
                .inProgress,
                .queued,
                .ready,
                .stopped,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .baking: return "Baking"
            case .created: return "Created"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .queued: return "Queued"
            case .ready: return "Ready"
            case .stopped: return "Stopped"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the most recent attempted or successful deployment to a deployment group.
    public struct LastDeploymentInfo: Swift.Sendable {
        /// A timestamp that indicates when the most recent deployment to the deployment group started.
        public var createTime: Foundation.Date?
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A timestamp that indicates when the most recent deployment to the deployment group was complete.
        public var endTime: Foundation.Date?
        /// The status of the most recent deployment.
        public var status: CodeDeployClientTypes.DeploymentStatus?

        public init(
            createTime: Foundation.Date? = nil,
            deploymentId: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            status: CodeDeployClientTypes.DeploymentStatus? = nil
        )
        {
            self.createTime = createTime
            self.deploymentId = deploymentId
            self.endTime = endTime
            self.status = status
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a Classic Load Balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.
    public struct ELBInfo: Swift.Sendable {
        /// For blue/green deployments, the name of the Classic Load Balancer that is used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the Classic Load Balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
    public struct TargetGroupInfo: Swift.Sendable {
        /// For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment are registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete.
        public var name: Swift.String?

        public init(
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group.
    public struct TrafficRoute: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one.
        public var listenerArns: [Swift.String]?

        public init(
            listenerArns: [Swift.String]? = nil
        )
        {
            self.listenerArns = listenerArns
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified.
    public struct TargetGroupPairInfo: Swift.Sendable {
        /// The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete.
        public var prodTrafficRoute: CodeDeployClientTypes.TrafficRoute?
        /// One pair of target groups. One is associated with the original task set. The second is associated with the task set that serves traffic after the deployment is complete.
        public var targetGroups: [CodeDeployClientTypes.TargetGroupInfo]?
        /// An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can occur while test traffic is served during a deployment.
        public var testTrafficRoute: CodeDeployClientTypes.TrafficRoute?

        public init(
            prodTrafficRoute: CodeDeployClientTypes.TrafficRoute? = nil,
            targetGroups: [CodeDeployClientTypes.TargetGroupInfo]? = nil,
            testTrafficRoute: CodeDeployClientTypes.TrafficRoute? = nil
        )
        {
            self.prodTrafficRoute = prodTrafficRoute
            self.targetGroups = targetGroups
            self.testTrafficRoute = testTrafficRoute
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the Elastic Load Balancing load balancer or target group used in a deployment. You can use load balancers and target groups in combination. For example, if you have two Classic Load Balancers, and five target groups tied to an Application Load Balancer, you can specify the two Classic Load Balancers in elbInfoList, and the five target groups in targetGroupInfoList.
    public struct LoadBalancerInfo: Swift.Sendable {
        /// An array that contains information about the load balancers to use for load balancing in a deployment. If you're using Classic Load Balancers, specify those load balancers in this array. You can add up to 10 load balancers to the array. If you're using Application Load Balancers or Network Load Balancers, use the targetGroupInfoList array instead of this one.
        public var elbInfoList: [CodeDeployClientTypes.ELBInfo]?
        /// An array that contains information about the target groups to use for load balancing in a deployment. If you're using Application Load Balancers and Network Load Balancers, specify their associated target groups in this array. You can add up to 10 target groups to the array. If you're using Classic Load Balancers, use the elbInfoList array instead of this one.
        public var targetGroupInfoList: [CodeDeployClientTypes.TargetGroupInfo]?
        /// The target group pair information. This is an array of TargeGroupPairInfo objects with a maximum size of one.
        public var targetGroupPairInfoList: [CodeDeployClientTypes.TargetGroupPairInfo]?

        public init(
            elbInfoList: [CodeDeployClientTypes.ELBInfo]? = nil,
            targetGroupInfoList: [CodeDeployClientTypes.TargetGroupInfo]? = nil,
            targetGroupPairInfoList: [CodeDeployClientTypes.TargetGroupPairInfo]? = nil
        )
        {
            self.elbInfoList = elbInfoList
            self.targetGroupInfoList = targetGroupInfoList
            self.targetGroupPairInfoList = targetGroupPairInfoList
        }
    }
}

extension CodeDeployClientTypes {

    public enum TagFilterType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyAndValue
        case keyOnly
        case valueOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [TagFilterType] {
            return [
                .keyAndValue,
                .keyOnly,
                .valueOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyAndValue: return "KEY_AND_VALUE"
            case .keyOnly: return "KEY_ONLY"
            case .valueOnly: return "VALUE_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an on-premises instance tag filter.
    public struct TagFilter: Swift.Sendable {
        /// The on-premises instance tag filter key.
        public var key: Swift.String?
        /// The on-premises instance tag filter type:
        ///
        /// * KEY_ONLY: Key only.
        ///
        /// * VALUE_ONLY: Value only.
        ///
        /// * KEY_AND_VALUE: Key and value.
        public var type: CodeDeployClientTypes.TagFilterType?
        /// The on-premises instance tag filter value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            type: CodeDeployClientTypes.TagFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.type = type
            self.value = value
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about groups of on-premises instance tags.
    public struct OnPremisesTagSet: Swift.Sendable {
        /// A list that contains other lists of on-premises instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list.
        public var onPremisesTagSetList: [[CodeDeployClientTypes.TagFilter]]?

        public init(
            onPremisesTagSetList: [[CodeDeployClientTypes.TagFilter]]? = nil
        )
        {
            self.onPremisesTagSetList = onPremisesTagSetList
        }
    }
}

extension CodeDeployClientTypes {

    public enum OutdatedInstancesStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [OutdatedInstancesStrategy] {
            return [
                .ignore,
                .update
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum TriggerEventType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deploymentFailure
        case deploymentReady
        case deploymentRollback
        case deploymentStart
        case deploymentStop
        case deploymentSuccess
        case instanceFailure
        case instanceReady
        case instanceStart
        case instanceSuccess
        case sdkUnknown(Swift.String)

        public static var allCases: [TriggerEventType] {
            return [
                .deploymentFailure,
                .deploymentReady,
                .deploymentRollback,
                .deploymentStart,
                .deploymentStop,
                .deploymentSuccess,
                .instanceFailure,
                .instanceReady,
                .instanceStart,
                .instanceSuccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deploymentFailure: return "DeploymentFailure"
            case .deploymentReady: return "DeploymentReady"
            case .deploymentRollback: return "DeploymentRollback"
            case .deploymentStart: return "DeploymentStart"
            case .deploymentStop: return "DeploymentStop"
            case .deploymentSuccess: return "DeploymentSuccess"
            case .instanceFailure: return "InstanceFailure"
            case .instanceReady: return "InstanceReady"
            case .instanceStart: return "InstanceStart"
            case .instanceSuccess: return "InstanceSuccess"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about notification triggers for the deployment group.
    public struct TriggerConfig: Swift.Sendable {
        /// The event type or types for which notifications are triggered.
        public var triggerEvents: [CodeDeployClientTypes.TriggerEventType]?
        /// The name of the notification trigger.
        public var triggerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.
        public var triggerTargetArn: Swift.String?

        public init(
            triggerEvents: [CodeDeployClientTypes.TriggerEventType]? = nil,
            triggerName: Swift.String? = nil,
            triggerTargetArn: Swift.String? = nil
        )
        {
            self.triggerEvents = triggerEvents
            self.triggerName = triggerName
            self.triggerTargetArn = triggerTargetArn
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment group.
    public struct DeploymentGroupInfo: Swift.Sendable {
        /// A list of alarms associated with the deployment group.
        public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
        /// The application name.
        public var applicationName: Swift.String?
        /// Information about the automatic rollback configuration associated with the deployment group.
        public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
        /// A list of associated Auto Scaling groups.
        public var autoScalingGroups: [CodeDeployClientTypes.AutoScalingGroup]?
        /// Information about blue/green deployment options for a deployment group.
        public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// The deployment group ID.
        public var deploymentGroupId: Swift.String?
        /// The deployment group name.
        public var deploymentGroupName: Swift.String?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
        /// The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags.
        public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
        /// Information about groups of tags applied to an Amazon EC2 instance. The deployment group includes only Amazon EC2 instances identified by all of the tag groups. Cannot be used in the same call as ec2TagFilters.
        public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
        /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
        public var ecsServices: [CodeDeployClientTypes.ECSService]?
        /// Information about the most recent attempted deployment to the deployment group.
        public var lastAttemptedDeployment: CodeDeployClientTypes.LastDeploymentInfo?
        /// Information about the most recent successful deployment to the deployment group.
        public var lastSuccessfulDeployment: CodeDeployClientTypes.LastDeploymentInfo?
        /// Information about the load balancer to use in a deployment.
        public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
        /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags.
        public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
        /// Information about groups of tags applied to an on-premises instance. The deployment group includes only on-premises instances identified by all the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
        public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
        /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
        public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
        /// A service role Amazon Resource Name (ARN) that grants CodeDeploy permission to make calls to Amazon Web Services services on your behalf. For more information, see [Create a Service Role for CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html) in the CodeDeploy User Guide.
        public var serviceRoleArn: Swift.String?
        /// Information about the deployment group's target revision, including type and location.
        public var targetRevision: CodeDeployClientTypes.RevisionLocation?
        /// Indicates whether the deployment group was configured to have CodeDeploy install a termination hook into an Auto Scaling group. For more information about the termination hook, see [How Amazon EC2 Auto Scaling works with CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html#integrations-aws-auto-scaling-behaviors) in the CodeDeploy User Guide.
        public var terminationHookEnabled: Swift.Bool
        /// Information about triggers associated with the deployment group.
        public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

        public init(
            alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
            applicationName: Swift.String? = nil,
            autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
            autoScalingGroups: [CodeDeployClientTypes.AutoScalingGroup]? = nil,
            blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            deploymentConfigName: Swift.String? = nil,
            deploymentGroupId: Swift.String? = nil,
            deploymentGroupName: Swift.String? = nil,
            deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
            ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
            ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
            ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
            lastAttemptedDeployment: CodeDeployClientTypes.LastDeploymentInfo? = nil,
            lastSuccessfulDeployment: CodeDeployClientTypes.LastDeploymentInfo? = nil,
            loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
            onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
            onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
            outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
            serviceRoleArn: Swift.String? = nil,
            targetRevision: CodeDeployClientTypes.RevisionLocation? = nil,
            terminationHookEnabled: Swift.Bool = false,
            triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
        )
        {
            self.alarmConfiguration = alarmConfiguration
            self.applicationName = applicationName
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.autoScalingGroups = autoScalingGroups
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.computePlatform = computePlatform
            self.deploymentConfigName = deploymentConfigName
            self.deploymentGroupId = deploymentGroupId
            self.deploymentGroupName = deploymentGroupName
            self.deploymentStyle = deploymentStyle
            self.ec2TagFilters = ec2TagFilters
            self.ec2TagSet = ec2TagSet
            self.ecsServices = ecsServices
            self.lastAttemptedDeployment = lastAttemptedDeployment
            self.lastSuccessfulDeployment = lastSuccessfulDeployment
            self.loadBalancerInfo = loadBalancerInfo
            self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
            self.onPremisesTagSet = onPremisesTagSet
            self.outdatedInstancesStrategy = outdatedInstancesStrategy
            self.serviceRoleArn = serviceRoleArn
            self.targetRevision = targetRevision
            self.terminationHookEnabled = terminationHookEnabled
            self.triggerConfigurations = triggerConfigurations
        }
    }
}

/// Represents the output of a BatchGetDeploymentGroups operation.
public struct BatchGetDeploymentGroupsOutput: Swift.Sendable {
    /// Information about the deployment groups.
    public var deploymentGroupsInfo: [CodeDeployClientTypes.DeploymentGroupInfo]?
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?

    public init(
        deploymentGroupsInfo: [CodeDeployClientTypes.DeploymentGroupInfo]? = nil,
        errorMessage: Swift.String? = nil
    )
    {
        self.deploymentGroupsInfo = deploymentGroupsInfo
        self.errorMessage = errorMessage
    }
}

/// The deployment with the user or Amazon Web Services account does not exist.
public struct DeploymentDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// At least one deployment ID must be specified.
public struct DeploymentIdRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentIdRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The instance ID was not specified.
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetIdRequiredException instead.")
public struct InstanceIdRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceIdRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The computePlatform is invalid. The computePlatform should be Lambda, Server, or ECS.
public struct InvalidComputePlatformException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidComputePlatformException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// At least one of the deployment IDs was specified in an invalid format.
public struct InvalidDeploymentIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a BatchGetDeploymentInstances operation.
public struct BatchGetDeploymentInstancesInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique IDs of instances used in the deployment. The maximum number of instance IDs you can specify is 25.
    /// This member is required.
    public var instanceIds: [Swift.String]?

    public init(
        deploymentId: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceIds = instanceIds
    }
}

extension CodeDeployClientTypes {

    public enum InstanceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blue
        case green
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceType] {
            return [
                .blue,
                .green
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blue: return "Blue"
            case .green: return "Green"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum LifecycleErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case scriptFailed
        case scriptMissing
        case scriptNotExecutable
        case scriptTimedOut
        case success
        case unknownError
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleErrorCode] {
            return [
                .scriptFailed,
                .scriptMissing,
                .scriptNotExecutable,
                .scriptTimedOut,
                .success,
                .unknownError
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .scriptFailed: return "ScriptFailed"
            case .scriptMissing: return "ScriptMissing"
            case .scriptNotExecutable: return "ScriptNotExecutable"
            case .scriptTimedOut: return "ScriptTimedOut"
            case .success: return "Success"
            case .unknownError: return "UnknownError"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Diagnostic information about executable scripts that are part of a deployment.
    public struct Diagnostics: Swift.Sendable {
        /// The associated error code:
        ///
        /// * Success: The specified script ran.
        ///
        /// * ScriptMissing: The specified script was not found in the specified location.
        ///
        /// * ScriptNotExecutable: The specified script is not a recognized executable file type.
        ///
        /// * ScriptTimedOut: The specified script did not finish running in the specified time period.
        ///
        /// * ScriptFailed: The specified script failed to run as expected.
        ///
        /// * UnknownError: The specified script did not run for an unknown reason.
        public var errorCode: CodeDeployClientTypes.LifecycleErrorCode?
        /// The last portion of the diagnostic log. If available, CodeDeploy returns up to the last 4 KB of the diagnostic log.
        public var logTail: Swift.String?
        /// The message associated with the error.
        public var message: Swift.String?
        /// The name of the script.
        public var scriptName: Swift.String?

        public init(
            errorCode: CodeDeployClientTypes.LifecycleErrorCode? = nil,
            logTail: Swift.String? = nil,
            message: Swift.String? = nil,
            scriptName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.logTail = logTail
            self.message = message
            self.scriptName = scriptName
        }
    }
}

extension CodeDeployClientTypes {

    public enum LifecycleEventStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleEventStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .skipped,
                .succeeded,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment lifecycle event.
    public struct LifecycleEvent: Swift.Sendable {
        /// Diagnostic information about the deployment lifecycle event.
        public var diagnostics: CodeDeployClientTypes.Diagnostics?
        /// A timestamp that indicates when the deployment lifecycle event ended.
        public var endTime: Foundation.Date?
        /// The deployment lifecycle event name, such as ApplicationStop, BeforeInstall, AfterInstall, ApplicationStart, or ValidateService.
        public var lifecycleEventName: Swift.String?
        /// A timestamp that indicates when the deployment lifecycle event started.
        public var startTime: Foundation.Date?
        /// The deployment lifecycle event status:
        ///
        /// * Pending: The deployment lifecycle event is pending.
        ///
        /// * InProgress: The deployment lifecycle event is in progress.
        ///
        /// * Succeeded: The deployment lifecycle event ran successfully.
        ///
        /// * Failed: The deployment lifecycle event has failed.
        ///
        /// * Skipped: The deployment lifecycle event has been skipped.
        ///
        /// * Unknown: The deployment lifecycle event is unknown.
        public var status: CodeDeployClientTypes.LifecycleEventStatus?

        public init(
            diagnostics: CodeDeployClientTypes.Diagnostics? = nil,
            endTime: Foundation.Date? = nil,
            lifecycleEventName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            status: CodeDeployClientTypes.LifecycleEventStatus? = nil
        )
        {
            self.diagnostics = diagnostics
            self.endTime = endTime
            self.lifecycleEventName = lifecycleEventName
            self.startTime = startTime
            self.status = status
        }
    }
}

extension CodeDeployClientTypes {

    @available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
    public enum InstanceStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case ready
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .ready,
                .skipped,
                .succeeded,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .ready: return "Ready"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about an instance in a deployment.
    @available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
    public struct InstanceSummary: Swift.Sendable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// The instance ID.
        public var instanceId: Swift.String?
        /// Information about which environment an instance belongs to in a blue/green deployment.
        ///
        /// * BLUE: The instance is part of the original environment.
        ///
        /// * GREEN: The instance is part of the replacement environment.
        public var instanceType: CodeDeployClientTypes.InstanceType?
        /// A timestamp that indicates when the instance information was last updated.
        public var lastUpdatedAt: Foundation.Date?
        /// A list of lifecycle events for this instance.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The deployment status for this instance:
        ///
        /// * Pending: The deployment is pending for this instance.
        ///
        /// * In Progress: The deployment is in progress for this instance.
        ///
        /// * Succeeded: The deployment has succeeded for this instance.
        ///
        /// * Failed: The deployment has failed for this instance.
        ///
        /// * Skipped: The deployment has been skipped for this instance.
        ///
        /// * Unknown: The deployment status is unknown for this instance.
        @available(*, deprecated, message: "InstanceStatus is deprecated, use TargetStatus instead.")
        public var status: CodeDeployClientTypes.InstanceStatus?

        public init(
            deploymentId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: CodeDeployClientTypes.InstanceType? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.InstanceStatus? = nil
        )
        {
            self.deploymentId = deploymentId
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
        }
    }
}

/// Represents the output of a BatchGetDeploymentInstances operation.
public struct BatchGetDeploymentInstancesOutput: Swift.Sendable {
    /// Information about errors that might have occurred during the API call.
    public var errorMessage: Swift.String?
    /// Information about the instance.
    public var instancesSummary: [CodeDeployClientTypes.InstanceSummary]?

    public init(
        errorMessage: Swift.String? = nil,
        instancesSummary: [CodeDeployClientTypes.InstanceSummary]? = nil
    )
    {
        self.errorMessage = errorMessage
        self.instancesSummary = instancesSummary
    }
}

/// Represents the input of a BatchGetDeployments operation.
public struct BatchGetDeploymentsInput: Swift.Sendable {
    /// A list of deployment IDs, separated by spaces. The maximum number of deployment IDs you can specify is 25.
    /// This member is required.
    public var deploymentIds: [Swift.String]?

    public init(
        deploymentIds: [Swift.String]? = nil
    )
    {
        self.deploymentIds = deploymentIds
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentCreator: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoscaling
        case autoscalingtermination
        case cloudformation
        case cloudformationrollback
        case codedeploy
        case codedeployautoupdate
        case codedeployrollback
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentCreator] {
            return [
                .autoscaling,
                .autoscalingtermination,
                .cloudformation,
                .cloudformationrollback,
                .codedeploy,
                .codedeployautoupdate,
                .codedeployrollback,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "autoscaling"
            case .autoscalingtermination: return "autoscalingTermination"
            case .cloudformation: return "CloudFormation"
            case .cloudformationrollback: return "CloudFormationRollback"
            case .codedeploy: return "CodeDeploy"
            case .codedeployautoupdate: return "CodeDeployAutoUpdate"
            case .codedeployrollback: return "codeDeployRollback"
            case .user: return "user"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the deployment status of the instances in the deployment.
    public struct DeploymentOverview: Swift.Sendable {
        /// The number of instances in the deployment in a failed state.
        public var failed: Swift.Int
        /// The number of instances in which the deployment is in progress.
        public var inProgress: Swift.Int
        /// The number of instances in the deployment in a pending state.
        public var pending: Swift.Int
        /// The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.
        public var ready: Swift.Int
        /// The number of instances in the deployment in a skipped state.
        public var skipped: Swift.Int
        /// The number of instances in the deployment to which revisions have been successfully deployed.
        public var succeeded: Swift.Int

        public init(
            failed: Swift.Int = 0,
            inProgress: Swift.Int = 0,
            pending: Swift.Int = 0,
            ready: Swift.Int = 0,
            skipped: Swift.Int = 0,
            succeeded: Swift.Int = 0
        )
        {
            self.failed = failed
            self.inProgress = inProgress
            self.pending = pending
            self.ready = ready
            self.skipped = skipped
            self.succeeded = succeeded
        }
    }
}

extension CodeDeployClientTypes {

    public enum ErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case agentIssue
        case alarmActive
        case applicationMissing
        case autoscalingValidationError
        case autoScalingConfiguration
        case autoScalingIamRolePermissions
        case cloudformationStackFailure
        case codedeployResourceCannotBeFound
        case customerApplicationUnhealthy
        case deploymentGroupMissing
        case ecsUpdateError
        case elasticLoadBalancingInvalid
        case elbInvalidInstance
        case healthConstraints
        case healthConstraintsInvalid
        case hookExecutionFailure
        case iamRoleMissing
        case iamRolePermissions
        case internalError
        case invalidEcsService
        case invalidLambdaConfiguration
        case invalidLambdaFunction
        case invalidRevision
        case manualStop
        case missingBlueGreenDeploymentConfiguration
        case missingElbInformation
        case missingGithubToken
        case noEc2Subscription
        case noInstances
        case overMaxInstances
        case resourceLimitExceeded
        case revisionMissing
        case throttled
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .agentIssue,
                .alarmActive,
                .applicationMissing,
                .autoscalingValidationError,
                .autoScalingConfiguration,
                .autoScalingIamRolePermissions,
                .cloudformationStackFailure,
                .codedeployResourceCannotBeFound,
                .customerApplicationUnhealthy,
                .deploymentGroupMissing,
                .ecsUpdateError,
                .elasticLoadBalancingInvalid,
                .elbInvalidInstance,
                .healthConstraints,
                .healthConstraintsInvalid,
                .hookExecutionFailure,
                .iamRoleMissing,
                .iamRolePermissions,
                .internalError,
                .invalidEcsService,
                .invalidLambdaConfiguration,
                .invalidLambdaFunction,
                .invalidRevision,
                .manualStop,
                .missingBlueGreenDeploymentConfiguration,
                .missingElbInformation,
                .missingGithubToken,
                .noEc2Subscription,
                .noInstances,
                .overMaxInstances,
                .resourceLimitExceeded,
                .revisionMissing,
                .throttled,
                .timeout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .agentIssue: return "AGENT_ISSUE"
            case .alarmActive: return "ALARM_ACTIVE"
            case .applicationMissing: return "APPLICATION_MISSING"
            case .autoscalingValidationError: return "AUTOSCALING_VALIDATION_ERROR"
            case .autoScalingConfiguration: return "AUTO_SCALING_CONFIGURATION"
            case .autoScalingIamRolePermissions: return "AUTO_SCALING_IAM_ROLE_PERMISSIONS"
            case .cloudformationStackFailure: return "CLOUDFORMATION_STACK_FAILURE"
            case .codedeployResourceCannotBeFound: return "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"
            case .customerApplicationUnhealthy: return "CUSTOMER_APPLICATION_UNHEALTHY"
            case .deploymentGroupMissing: return "DEPLOYMENT_GROUP_MISSING"
            case .ecsUpdateError: return "ECS_UPDATE_ERROR"
            case .elasticLoadBalancingInvalid: return "ELASTIC_LOAD_BALANCING_INVALID"
            case .elbInvalidInstance: return "ELB_INVALID_INSTANCE"
            case .healthConstraints: return "HEALTH_CONSTRAINTS"
            case .healthConstraintsInvalid: return "HEALTH_CONSTRAINTS_INVALID"
            case .hookExecutionFailure: return "HOOK_EXECUTION_FAILURE"
            case .iamRoleMissing: return "IAM_ROLE_MISSING"
            case .iamRolePermissions: return "IAM_ROLE_PERMISSIONS"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidEcsService: return "INVALID_ECS_SERVICE"
            case .invalidLambdaConfiguration: return "INVALID_LAMBDA_CONFIGURATION"
            case .invalidLambdaFunction: return "INVALID_LAMBDA_FUNCTION"
            case .invalidRevision: return "INVALID_REVISION"
            case .manualStop: return "MANUAL_STOP"
            case .missingBlueGreenDeploymentConfiguration: return "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
            case .missingElbInformation: return "MISSING_ELB_INFORMATION"
            case .missingGithubToken: return "MISSING_GITHUB_TOKEN"
            case .noEc2Subscription: return "NO_EC2_SUBSCRIPTION"
            case .noInstances: return "NO_INSTANCES"
            case .overMaxInstances: return "OVER_MAX_INSTANCES"
            case .resourceLimitExceeded: return "RESOURCE_LIMIT_EXCEEDED"
            case .revisionMissing: return "REVISION_MISSING"
            case .throttled: return "THROTTLED"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment error.
    public struct ErrorInformation: Swift.Sendable {
        /// For more information, see [Error Codes for CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/error-codes.html) in the [CodeDeploy User Guide](https://docs.aws.amazon.com/codedeploy/latest/userguide). The error code:
        ///
        /// * APPLICATION_MISSING: The application was missing. This error code is most likely raised if the application is deleted after the deployment is created, but before it is started.
        ///
        /// * DEPLOYMENT_GROUP_MISSING: The deployment group was missing. This error code is most likely raised if the deployment group is deleted after the deployment is created, but before it is started.
        ///
        /// * HEALTH_CONSTRAINTS: The deployment failed on too many instances to be successfully deployed within the instance health constraints specified.
        ///
        /// * HEALTH_CONSTRAINTS_INVALID: The revision cannot be successfully deployed within the instance health constraints specified.
        ///
        /// * IAM_ROLE_MISSING: The service role cannot be accessed.
        ///
        /// * IAM_ROLE_PERMISSIONS: The service role does not have the correct permissions.
        ///
        /// * INTERNAL_ERROR: There was an internal error.
        ///
        /// * NO_EC2_SUBSCRIPTION: The calling account is not subscribed to Amazon EC2.
        ///
        /// * NO_INSTANCES: No instances were specified, or no instances can be found.
        ///
        /// * OVER_MAX_INSTANCES: The maximum number of instances was exceeded.
        ///
        /// * THROTTLED: The operation was throttled because the calling account exceeded the throttling limits of one or more Amazon Web Services services.
        ///
        /// * TIMEOUT: The deployment has timed out.
        ///
        /// * REVISION_MISSING: The revision ID was missing. This error code is most likely raised if the revision is deleted after the deployment is created, but before it is started.
        public var code: CodeDeployClientTypes.ErrorCode?
        /// An accompanying error message.
        public var message: Swift.String?

        public init(
            code: CodeDeployClientTypes.ErrorCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }
}

extension CodeDeployClientTypes {

    public enum FileExistsBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disallow
        case overwrite
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [FileExistsBehavior] {
            return [
                .disallow,
                .overwrite,
                .retain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disallow: return "DISALLOW"
            case .overwrite: return "OVERWRITE"
            case .retain: return "RETAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about deployments related to the specified deployment.
    public struct RelatedDeployments: Swift.Sendable {
        /// The deployment IDs of 'auto-update outdated instances' deployments triggered by this deployment.
        public var autoUpdateOutdatedInstancesDeploymentIds: [Swift.String]?
        /// The deployment ID of the root deployment that triggered this deployment.
        public var autoUpdateOutdatedInstancesRootDeploymentId: Swift.String?

        public init(
            autoUpdateOutdatedInstancesDeploymentIds: [Swift.String]? = nil,
            autoUpdateOutdatedInstancesRootDeploymentId: Swift.String? = nil
        )
        {
            self.autoUpdateOutdatedInstancesDeploymentIds = autoUpdateOutdatedInstancesDeploymentIds
            self.autoUpdateOutdatedInstancesRootDeploymentId = autoUpdateOutdatedInstancesRootDeploymentId
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment rollback.
    public struct RollbackInfo: Swift.Sendable {
        /// The ID of the deployment rollback.
        public var rollbackDeploymentId: Swift.String?
        /// Information that describes the status of a deployment rollback (for example, whether the deployment can't be rolled back, is in progress, failed, or succeeded).
        public var rollbackMessage: Swift.String?
        /// The deployment ID of the deployment that was underway and triggered a rollback deployment because it failed or was stopped.
        public var rollbackTriggeringDeploymentId: Swift.String?

        public init(
            rollbackDeploymentId: Swift.String? = nil,
            rollbackMessage: Swift.String? = nil,
            rollbackTriggeringDeploymentId: Swift.String? = nil
        )
        {
            self.rollbackDeploymentId = rollbackDeploymentId
            self.rollbackMessage = rollbackMessage
            self.rollbackTriggeringDeploymentId = rollbackTriggeringDeploymentId
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the instances to be used in the replacement environment in a blue/green deployment.
    public struct TargetInstances: Swift.Sendable {
        /// The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.
        public var autoScalingGroups: [Swift.String]?
        /// Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as tagFilters.
        public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
        /// The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as ec2TagSet.
        public var tagFilters: [CodeDeployClientTypes.EC2TagFilter]?

        public init(
            autoScalingGroups: [Swift.String]? = nil,
            ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
            tagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil
        )
        {
            self.autoScalingGroups = autoScalingGroups
            self.ec2TagSet = ec2TagSet
            self.tagFilters = tagFilters
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment.
    public struct DeploymentInfo: Swift.Sendable {
        /// Provides information about the results of a deployment, such as whether instances in the original environment in a blue/green deployment were not terminated.
        @available(*, deprecated, message: "AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.")
        public var additionalDeploymentStatusInfo: Swift.String?
        /// The application name.
        public var applicationName: Swift.String?
        /// Information about the automatic rollback configuration associated with the deployment.
        public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
        /// Information about blue/green deployment options for this deployment.
        public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
        /// A timestamp that indicates when the deployment was complete.
        public var completeTime: Foundation.Date?
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// A timestamp that indicates when the deployment was created.
        public var createTime: Foundation.Date?
        /// The means by which the deployment was created:
        ///
        /// * user: A user created the deployment.
        ///
        /// * autoscaling: Amazon EC2 Auto Scaling created the deployment.
        ///
        /// * codeDeployRollback: A rollback process created the deployment.
        ///
        /// * CodeDeployAutoUpdate: An auto-update process created the deployment when it detected outdated Amazon EC2 instances.
        public var creator: CodeDeployClientTypes.DeploymentCreator?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// The deployment group name.
        public var deploymentGroupName: Swift.String?
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A summary of the deployment status of the instances in the deployment.
        public var deploymentOverview: CodeDeployClientTypes.DeploymentOverview?
        /// Messages that contain information about the status of a deployment.
        public var deploymentStatusMessages: [Swift.String]?
        /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
        public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
        /// A comment about the deployment.
        public var description: Swift.String?
        /// Information about any error associated with this deployment.
        public var errorInformation: CodeDeployClientTypes.ErrorInformation?
        /// The unique ID for an external resource (for example, a CloudFormation stack ID) that is linked to this deployment.
        public var externalId: Swift.String?
        /// Information about how CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.
        ///
        /// * DISALLOW: The deployment fails. This is also the default behavior if no option is specified.
        ///
        /// * OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.
        ///
        /// * RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.
        public var fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
        /// If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if ApplicationStop fails, the deployment continues with DownloadBundle. If BeforeBlockTraffic fails, the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the deployment continues with ApplicationStop. If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. During a deployment, the CodeDeploy agent runs the scripts specified for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use ignoreApplicationStopFailures to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.
        public var ignoreApplicationStopFailures: Swift.Bool
        /// Indicates whether the wait period set for the termination of instances in the original environment has started. Status is 'false' if the KEEP_ALIVE option is specified. Otherwise, 'true' as soon as the termination wait period starts.
        public var instanceTerminationWaitTimeStarted: Swift.Bool
        /// Information about the load balancer used in the deployment.
        public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
        /// Information about alarms associated with a deployment or deployment group.
        public var overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
        /// Information about the application revision that was deployed to the deployment group before the most recent successful deployment.
        public var previousRevision: CodeDeployClientTypes.RevisionLocation?
        /// Information about deployments related to the specified deployment.
        public var relatedDeployments: CodeDeployClientTypes.RelatedDeployments?
        /// Information about the location of stored application artifacts and the service from which to retrieve them.
        public var revision: CodeDeployClientTypes.RevisionLocation?
        /// Information about a deployment rollback.
        public var rollbackInfo: CodeDeployClientTypes.RollbackInfo?
        /// A timestamp that indicates when the deployment was deployed to the deployment group. In some cases, the reported value of the start time might be later than the complete time. This is due to differences in the clock settings of backend servers that participate in the deployment process.
        public var startTime: Foundation.Date?
        /// The current state of the deployment as a whole.
        public var status: CodeDeployClientTypes.DeploymentStatus?
        /// Information about the instances that belong to the replacement environment in a blue/green deployment.
        public var targetInstances: CodeDeployClientTypes.TargetInstances?
        /// Indicates whether only instances that are not running the latest application revision are to be deployed to.
        public var updateOutdatedInstancesOnly: Swift.Bool

        public init(
            additionalDeploymentStatusInfo: Swift.String? = nil,
            applicationName: Swift.String? = nil,
            autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
            blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
            completeTime: Foundation.Date? = nil,
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: Foundation.Date? = nil,
            creator: CodeDeployClientTypes.DeploymentCreator? = nil,
            deploymentConfigName: Swift.String? = nil,
            deploymentGroupName: Swift.String? = nil,
            deploymentId: Swift.String? = nil,
            deploymentOverview: CodeDeployClientTypes.DeploymentOverview? = nil,
            deploymentStatusMessages: [Swift.String]? = nil,
            deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
            description: Swift.String? = nil,
            errorInformation: CodeDeployClientTypes.ErrorInformation? = nil,
            externalId: Swift.String? = nil,
            fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior? = nil,
            ignoreApplicationStopFailures: Swift.Bool = false,
            instanceTerminationWaitTimeStarted: Swift.Bool = false,
            loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
            overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
            previousRevision: CodeDeployClientTypes.RevisionLocation? = nil,
            relatedDeployments: CodeDeployClientTypes.RelatedDeployments? = nil,
            revision: CodeDeployClientTypes.RevisionLocation? = nil,
            rollbackInfo: CodeDeployClientTypes.RollbackInfo? = nil,
            startTime: Foundation.Date? = nil,
            status: CodeDeployClientTypes.DeploymentStatus? = nil,
            targetInstances: CodeDeployClientTypes.TargetInstances? = nil,
            updateOutdatedInstancesOnly: Swift.Bool = false
        )
        {
            self.additionalDeploymentStatusInfo = additionalDeploymentStatusInfo
            self.applicationName = applicationName
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
            self.completeTime = completeTime
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.creator = creator
            self.deploymentConfigName = deploymentConfigName
            self.deploymentGroupName = deploymentGroupName
            self.deploymentId = deploymentId
            self.deploymentOverview = deploymentOverview
            self.deploymentStatusMessages = deploymentStatusMessages
            self.deploymentStyle = deploymentStyle
            self.description = description
            self.errorInformation = errorInformation
            self.externalId = externalId
            self.fileExistsBehavior = fileExistsBehavior
            self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
            self.instanceTerminationWaitTimeStarted = instanceTerminationWaitTimeStarted
            self.loadBalancerInfo = loadBalancerInfo
            self.overrideAlarmConfiguration = overrideAlarmConfiguration
            self.previousRevision = previousRevision
            self.relatedDeployments = relatedDeployments
            self.revision = revision
            self.rollbackInfo = rollbackInfo
            self.startTime = startTime
            self.status = status
            self.targetInstances = targetInstances
            self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
        }
    }
}

/// Represents the output of a BatchGetDeployments operation.
public struct BatchGetDeploymentsOutput: Swift.Sendable {
    /// Information about the deployments.
    public var deploymentsInfo: [CodeDeployClientTypes.DeploymentInfo]?

    public init(
        deploymentsInfo: [CodeDeployClientTypes.DeploymentInfo]? = nil
    )
    {
        self.deploymentsInfo = deploymentsInfo
    }
}

/// The specified deployment has not started.
public struct DeploymentNotStartedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentNotStartedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The provided target ID does not belong to the attempted deployment.
public struct DeploymentTargetDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentTargetDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A deployment target ID was not provided.
public struct DeploymentTargetIdRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentTargetIdRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum number of targets that can be associated with an Amazon ECS or Lambda deployment was exceeded. The target list of both types of deployments must have exactly one item. This exception does not apply to EC2/On-premises deployments.
public struct DeploymentTargetListSizeExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentTargetListSizeExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified instance does not exist in the deployment group.
@available(*, deprecated, message: "This exception is deprecated, use DeploymentTargetDoesNotExistException instead.")
public struct InstanceDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The target ID provided was not valid.
public struct InvalidDeploymentTargetIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentTargetIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BatchGetDeploymentTargetsInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique IDs of the deployment targets. The compute platform of the deployment determines the type of the targets and their formats. The maximum number of deployment target IDs you can specify is 25.
    ///
    /// * For deployments that use the EC2/On-premises compute platform, the target IDs are Amazon EC2 or on-premises instances IDs, and their target type is instanceTarget.
    ///
    /// * For deployments that use the Lambda compute platform, the target IDs are the names of Lambda functions, and their target type is instanceTarget.
    ///
    /// * For deployments that use the Amazon ECS compute platform, the target IDs are pairs of Amazon ECS clusters and services specified using the format :. Their target type is ecsTarget.
    ///
    /// * For deployments that are deployed with CloudFormation, the target IDs are CloudFormation stack IDs. Their target type is cloudFormationTarget.
    /// This member is required.
    public var targetIds: [Swift.String]?

    public init(
        deploymentId: Swift.String? = nil,
        targetIds: [Swift.String]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetIds = targetIds
    }
}

extension CodeDeployClientTypes {

    public enum TargetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case ready
        case skipped
        case succeeded
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .ready,
                .skipped,
                .succeeded,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .ready: return "Ready"
            case .skipped: return "Skipped"
            case .succeeded: return "Succeeded"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
    public struct CloudFormationTarget: Swift.Sendable {
        /// The unique ID of an CloudFormation blue/green deployment.
        public var deploymentId: Swift.String?
        /// The date and time when the target application was updated by an CloudFormation blue/green deployment.
        public var lastUpdatedAt: Foundation.Date?
        /// The lifecycle events of the CloudFormation blue/green deployment to this target application.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The resource type for the CloudFormation blue/green deployment.
        public var resourceType: Swift.String?
        /// The status of an CloudFormation blue/green deployment's target application.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The unique ID of a deployment target that has a type of CloudFormationTarget.
        public var targetId: Swift.String?
        /// The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.
        public var targetVersionWeight: Swift.Double

        public init(
            deploymentId: Swift.String? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            resourceType: Swift.String? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetId: Swift.String? = nil,
            targetVersionWeight: Swift.Double = 0.0
        )
        {
            self.deploymentId = deploymentId
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.resourceType = resourceType
            self.status = status
            self.targetId = targetId
            self.targetVersionWeight = targetVersionWeight
        }
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentTargetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cloudformationTarget
        case ecsTarget
        case instanceTarget
        case lambdaTarget
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentTargetType] {
            return [
                .cloudformationTarget,
                .ecsTarget,
                .instanceTarget,
                .lambdaTarget
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cloudformationTarget: return "CloudFormationTarget"
            case .ecsTarget: return "ECSTarget"
            case .instanceTarget: return "InstanceTarget"
            case .lambdaTarget: return "LambdaTarget"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum TargetLabel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case blue
        case green
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetLabel] {
            return [
                .blue,
                .green
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .blue: return "Blue"
            case .green: return "Green"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a set of Amazon ECS tasks in an CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set.
    public struct ECSTaskSet: Swift.Sendable {
        /// The number of tasks in a task set. During a deployment that uses the Amazon ECS compute type, CodeDeploy instructs Amazon ECS to create a new task set and uses this value to determine how many tasks to create. After the updated task set is created, CodeDeploy shifts traffic to the new task set.
        public var desiredCount: Swift.Int
        /// A unique ID of an ECSTaskSet.
        public var identifer: Swift.String?
        /// The number of tasks in the task set that are in the PENDING status during an Amazon ECS deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time, or when it is restarted after being in the STOPPED state.
        public var pendingCount: Swift.Int
        /// The number of tasks in the task set that are in the RUNNING status during an Amazon ECS deployment. A task in the RUNNING state is running and ready for use.
        public var runningCount: Swift.Int
        /// The status of the task set. There are three valid task set statuses:
        ///
        /// * PRIMARY: Indicates the task set is serving production traffic.
        ///
        /// * ACTIVE: Indicates the task set is not serving production traffic.
        ///
        /// * DRAINING: Indicates the tasks in the task set are being stopped and their corresponding targets are being deregistered from their target group.
        public var status: Swift.String?
        /// The target group associated with the task set. The target group is used by CodeDeploy to manage traffic to a task set.
        public var targetGroup: CodeDeployClientTypes.TargetGroupInfo?
        /// A label that identifies whether the ECS task set is an original target (BLUE) or a replacement target (GREEN).
        public var taskSetLabel: CodeDeployClientTypes.TargetLabel?
        /// The percentage of traffic served by this task set.
        public var trafficWeight: Swift.Double

        public init(
            desiredCount: Swift.Int = 0,
            identifer: Swift.String? = nil,
            pendingCount: Swift.Int = 0,
            runningCount: Swift.Int = 0,
            status: Swift.String? = nil,
            targetGroup: CodeDeployClientTypes.TargetGroupInfo? = nil,
            taskSetLabel: CodeDeployClientTypes.TargetLabel? = nil,
            trafficWeight: Swift.Double = 0.0
        )
        {
            self.desiredCount = desiredCount
            self.identifer = identifer
            self.pendingCount = pendingCount
            self.runningCount = runningCount
            self.status = status
            self.targetGroup = targetGroup
            self.taskSetLabel = taskSetLabel
            self.trafficWeight = trafficWeight
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the target of an Amazon ECS deployment.
    public struct ECSTarget: Swift.Sendable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// The date and time when the target Amazon ECS application was updated by a deployment.
        public var lastUpdatedAt: Foundation.Date?
        /// The lifecycle events of the deployment to this target Amazon ECS application.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an Amazon ECS deployment's target ECS application.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of ecsTarget.
        public var targetId: Swift.String?
        /// The ECSTaskSet objects associated with the ECS target.
        public var taskSetsInfo: [CodeDeployClientTypes.ECSTaskSet]?

        public init(
            deploymentId: Swift.String? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil,
            taskSetsInfo: [CodeDeployClientTypes.ECSTaskSet]? = nil
        )
        {
            self.deploymentId = deploymentId
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
            self.taskSetsInfo = taskSetsInfo
        }
    }
}

extension CodeDeployClientTypes {

    /// A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform.
    public struct InstanceTarget: Swift.Sendable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A label that identifies whether the instance is an original target (BLUE) or a replacement target (GREEN).
        public var instanceLabel: CodeDeployClientTypes.TargetLabel?
        /// The date and time when the target instance was updated by a deployment.
        public var lastUpdatedAt: Foundation.Date?
        /// The lifecycle events of the deployment to this target instance.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an EC2/On-premises deployment's target instance.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of instanceTarget.
        public var targetId: Swift.String?

        public init(
            deploymentId: Swift.String? = nil,
            instanceLabel: CodeDeployClientTypes.TargetLabel? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.deploymentId = deploymentId
            self.instanceLabel = instanceLabel
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about a Lambda function specified in a deployment.
    public struct LambdaFunctionInfo: Swift.Sendable {
        /// The version of a Lambda function that production traffic points to.
        public var currentVersion: Swift.String?
        /// The alias of a Lambda function. For more information, see [Lambda Function Aliases](https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html) in the Lambda Developer Guide.
        public var functionAlias: Swift.String?
        /// The name of a Lambda function.
        public var functionName: Swift.String?
        /// The version of a Lambda function that production traffic points to after the Lambda function is deployed.
        public var targetVersion: Swift.String?
        /// The percentage of production traffic that the target version of a Lambda function receives.
        public var targetVersionWeight: Swift.Double

        public init(
            currentVersion: Swift.String? = nil,
            functionAlias: Swift.String? = nil,
            functionName: Swift.String? = nil,
            targetVersion: Swift.String? = nil,
            targetVersionWeight: Swift.Double = 0.0
        )
        {
            self.currentVersion = currentVersion
            self.functionAlias = functionAlias
            self.functionName = functionName
            self.targetVersion = targetVersion
            self.targetVersionWeight = targetVersionWeight
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the target Lambda function during an Lambda deployment.
    public struct LambdaTarget: Swift.Sendable {
        /// The unique ID of a deployment.
        public var deploymentId: Swift.String?
        /// A LambdaFunctionInfo object that describes a target Lambda function.
        public var lambdaFunctionInfo: CodeDeployClientTypes.LambdaFunctionInfo?
        /// The date and time when the target Lambda function was updated by a deployment.
        public var lastUpdatedAt: Foundation.Date?
        /// The lifecycle events of the deployment to this target Lambda function.
        public var lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]?
        /// The status an Lambda deployment's target Lambda function.
        public var status: CodeDeployClientTypes.TargetStatus?
        /// The Amazon Resource Name (ARN) of the target.
        public var targetArn: Swift.String?
        /// The unique ID of a deployment target that has a type of lambdaTarget.
        public var targetId: Swift.String?

        public init(
            deploymentId: Swift.String? = nil,
            lambdaFunctionInfo: CodeDeployClientTypes.LambdaFunctionInfo? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            lifecycleEvents: [CodeDeployClientTypes.LifecycleEvent]? = nil,
            status: CodeDeployClientTypes.TargetStatus? = nil,
            targetArn: Swift.String? = nil,
            targetId: Swift.String? = nil
        )
        {
            self.deploymentId = deploymentId
            self.lambdaFunctionInfo = lambdaFunctionInfo
            self.lastUpdatedAt = lastUpdatedAt
            self.lifecycleEvents = lifecycleEvents
            self.status = status
            self.targetArn = targetArn
            self.targetId = targetId
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the deployment target.
    public struct DeploymentTarget: Swift.Sendable {
        /// Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
        public var cloudFormationTarget: CodeDeployClientTypes.CloudFormationTarget?
        /// The deployment type that is specific to the deployment's compute platform or deployments initiated by a CloudFormation stack update.
        public var deploymentTargetType: CodeDeployClientTypes.DeploymentTargetType?
        /// Information about the target for a deployment that uses the Amazon ECS compute platform.
        public var ecsTarget: CodeDeployClientTypes.ECSTarget?
        /// Information about the target for a deployment that uses the EC2/On-premises compute platform.
        public var instanceTarget: CodeDeployClientTypes.InstanceTarget?
        /// Information about the target for a deployment that uses the Lambda compute platform.
        public var lambdaTarget: CodeDeployClientTypes.LambdaTarget?

        public init(
            cloudFormationTarget: CodeDeployClientTypes.CloudFormationTarget? = nil,
            deploymentTargetType: CodeDeployClientTypes.DeploymentTargetType? = nil,
            ecsTarget: CodeDeployClientTypes.ECSTarget? = nil,
            instanceTarget: CodeDeployClientTypes.InstanceTarget? = nil,
            lambdaTarget: CodeDeployClientTypes.LambdaTarget? = nil
        )
        {
            self.cloudFormationTarget = cloudFormationTarget
            self.deploymentTargetType = deploymentTargetType
            self.ecsTarget = ecsTarget
            self.instanceTarget = instanceTarget
            self.lambdaTarget = lambdaTarget
        }
    }
}

public struct BatchGetDeploymentTargetsOutput: Swift.Sendable {
    /// A list of target objects for a deployment. Each target object contains details about the target, such as its status and lifecycle events. The type of the target objects depends on the deployment' compute platform.
    ///
    /// * EC2/On-premises: Each target object is an Amazon EC2 or on-premises instance.
    ///
    /// * Lambda: The target object is a specific version of an Lambda function.
    ///
    /// * Amazon ECS: The target object is an Amazon ECS service.
    ///
    /// * CloudFormation: The target object is an CloudFormation blue/green deployment.
    public var deploymentTargets: [CodeDeployClientTypes.DeploymentTarget]?

    public init(
        deploymentTargets: [CodeDeployClientTypes.DeploymentTarget]? = nil
    )
    {
        self.deploymentTargets = deploymentTargets
    }
}

/// Represents the input of a BatchGetOnPremisesInstances operation.
public struct BatchGetOnPremisesInstancesInput: Swift.Sendable {
    /// The names of the on-premises instances about which to get information. The maximum number of instance names you can specify is 25.
    /// This member is required.
    public var instanceNames: [Swift.String]?

    public init(
        instanceNames: [Swift.String]? = nil
    )
    {
        self.instanceNames = instanceNames
    }
}

extension CodeDeployClientTypes {

    /// Information about an on-premises instance.
    public struct InstanceInfo: Swift.Sendable {
        /// If the on-premises instance was deregistered, the time at which the on-premises instance was deregistered.
        public var deregisterTime: Foundation.Date?
        /// The ARN of the IAM session associated with the on-premises instance.
        public var iamSessionArn: Swift.String?
        /// The user ARN associated with the on-premises instance.
        public var iamUserArn: Swift.String?
        /// The ARN of the on-premises instance.
        public var instanceArn: Swift.String?
        /// The name of the on-premises instance.
        public var instanceName: Swift.String?
        /// The time at which the on-premises instance was registered.
        public var registerTime: Foundation.Date?
        /// The tags currently associated with the on-premises instance.
        public var tags: [CodeDeployClientTypes.Tag]?

        public init(
            deregisterTime: Foundation.Date? = nil,
            iamSessionArn: Swift.String? = nil,
            iamUserArn: Swift.String? = nil,
            instanceArn: Swift.String? = nil,
            instanceName: Swift.String? = nil,
            registerTime: Foundation.Date? = nil,
            tags: [CodeDeployClientTypes.Tag]? = nil
        )
        {
            self.deregisterTime = deregisterTime
            self.iamSessionArn = iamSessionArn
            self.iamUserArn = iamUserArn
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.registerTime = registerTime
            self.tags = tags
        }
    }
}

/// Represents the output of a BatchGetOnPremisesInstances operation.
public struct BatchGetOnPremisesInstancesOutput: Swift.Sendable {
    /// Information about the on-premises instances.
    public var instanceInfos: [CodeDeployClientTypes.InstanceInfo]?

    public init(
        instanceInfos: [CodeDeployClientTypes.InstanceInfo]? = nil
    )
    {
        self.instanceInfos = instanceInfos
    }
}

/// A bucket name is required, but was not provided.
public struct BucketNameFilterRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BucketNameFilterRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment is already complete.
public struct DeploymentAlreadyCompletedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentAlreadyCompletedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment does not have a status of Ready and can't continue yet.
public struct DeploymentIsNotInReadyStateException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentIsNotInReadyStateException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified deployment status doesn't exist or cannot be determined.
public struct InvalidDeploymentStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The wait type is invalid.
public struct InvalidDeploymentWaitTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentWaitTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A call was submitted that is not supported for the specified deployment type.
public struct UnsupportedActionForDeploymentTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedActionForDeploymentTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum DeploymentWaitType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case readyWait
        case terminationWait
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentWaitType] {
            return [
                .readyWait,
                .terminationWait
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .readyWait: return "READY_WAIT"
            case .terminationWait: return "TERMINATION_WAIT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ContinueDeploymentInput: Swift.Sendable {
    /// The unique ID of a blue/green deployment for which you want to start rerouting traffic to the replacement environment.
    public var deploymentId: Swift.String?
    /// The status of the deployment's waiting period. READY_WAIT indicates that the deployment is ready to start shifting traffic. TERMINATION_WAIT indicates that the traffic is shifted, but the original target is not terminated.
    public var deploymentWaitType: CodeDeployClientTypes.DeploymentWaitType?

    public init(
        deploymentId: Swift.String? = nil,
        deploymentWaitType: CodeDeployClientTypes.DeploymentWaitType? = nil
    )
    {
        self.deploymentId = deploymentId
        self.deploymentWaitType = deploymentWaitType
    }
}

/// The specified tags are not valid.
public struct InvalidTagsToAddException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagsToAddException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateApplication operation.
public struct CreateApplicationInput: Swift.Sendable {
    /// The name of the application. This name must be unique with the applicable user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The destination platform type for the deployment (Lambda, Server, or ECS).
    public var computePlatform: CodeDeployClientTypes.ComputePlatform?
    /// The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init(
        applicationName: Swift.String? = nil,
        computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.applicationName = applicationName
        self.computePlatform = computePlatform
        self.tags = tags
    }
}

/// Represents the output of a CreateApplication operation.
public struct CreateApplicationOutput: Swift.Sendable {
    /// A unique application ID.
    public var applicationId: Swift.String?

    public init(
        applicationId: Swift.String? = nil
    )
    {
        self.applicationId = applicationId
    }
}

/// The named deployment group with the user or Amazon Web Services account does not exist.
public struct DeploymentGroupDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentGroupDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of allowed deployments was exceeded.
public struct DeploymentLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The description is too long.
public struct DescriptionTooLongException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DescriptionTooLongException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The format of the alarm configuration is invalid. Possible causes include:
///
/// * The alarm list is null.
///
/// * The alarm object is null.
///
/// * The alarm name is empty or null or exceeds the limit of 255 characters.
///
/// * Two alarms with the same name have been specified.
///
/// * The alarm configuration is enabled, but the alarm list is empty.
public struct InvalidAlarmConfigException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAlarmConfigException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The automatic rollback configuration was specified in an invalid format. For example, automatic rollback is enabled, but an invalid triggering event type or no event types were listed.
public struct InvalidAutoRollbackConfigException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAutoRollbackConfigException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Auto Scaling group was specified in an invalid format or does not exist.
public struct InvalidAutoScalingGroupException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidAutoScalingGroupException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment configuration name was specified in an invalid format.
public struct InvalidDeploymentConfigNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentConfigNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid fileExistsBehavior option was specified to determine how CodeDeploy handles files or directories that already exist in a deployment target location, but weren't part of the previous successful deployment. Valid values include "DISALLOW," "OVERWRITE," and "RETAIN."
public struct InvalidFileExistsBehaviorException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFileExistsBehaviorException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The GitHub token is not valid.
public struct InvalidGitHubAccountTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGitHubAccountTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The IgnoreApplicationStopFailures value is invalid. For Lambda deployments, false is expected. For EC2/On-premises deployments, true or false is expected.
public struct InvalidIgnoreApplicationStopFailuresValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidIgnoreApplicationStopFailuresValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid load balancer name, or no load balancer name, was specified.
public struct InvalidLoadBalancerInfoException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLoadBalancerInfoException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service role ARN was specified in an invalid format. Or, if an Auto Scaling group was specified, the specified service role does not grant the appropriate permissions to Amazon EC2 Auto Scaling.
public struct InvalidRoleException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRoleException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The target instance configuration is invalid. Possible causes include:
///
/// * Configuration data for target instances was entered for an in-place deployment.
///
/// * The limit of 10 tags for a tag type was exceeded.
///
/// * The combined length of the tag names exceeded the limit.
///
/// * A specified tag is not currently applied to any instances.
public struct InvalidTargetInstancesException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTargetInstancesException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The configuration that specifies how traffic is routed during a deployment is invalid.
public struct InvalidTrafficRoutingConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTrafficRoutingConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The UpdateOutdatedInstancesOnly value is invalid. For Lambda deployments, false is expected. For EC2/On-premises deployments, true or false is expected.
public struct InvalidUpdateOutdatedInstancesOnlyValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidUpdateOutdatedInstancesOnlyValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The named revision does not exist with the user or Amazon Web Services account.
public struct RevisionDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RevisionDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An API function was called too frequently.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateDeployment operation.
public struct CreateDeploymentInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Configuration information for an automatic rollback that is added when a deployment is created.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// The name of a deployment configuration associated with the user or Amazon Web Services account. If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, CodeDeployDefault.OneAtATime is used by default.
    public var deploymentConfigName: Swift.String?
    /// The name of the deployment group.
    public var deploymentGroupName: Swift.String?
    /// A comment about the deployment.
    public var description: Swift.String?
    /// Information about how CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment. The fileExistsBehavior parameter takes any of the following values:
    ///
    /// * DISALLOW: The deployment fails. This is also the default behavior if no option is specified.
    ///
    /// * OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.
    ///
    /// * RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.
    public var fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
    /// If true, then if an ApplicationStop, BeforeBlockTraffic, or AfterBlockTraffic deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if ApplicationStop fails, the deployment continues with DownloadBundle. If BeforeBlockTraffic fails, the deployment continues with BlockTraffic. If AfterBlockTraffic fails, the deployment continues with ApplicationStop. If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. During a deployment, the CodeDeploy agent runs the scripts specified for ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use ignoreApplicationStopFailures to specify that the ApplicationStop, BeforeBlockTraffic, and AfterBlockTraffic failures should be ignored.
    public var ignoreApplicationStopFailures: Swift.Bool?
    /// Allows you to specify information about alarms associated with a deployment. The alarm configuration that you specify here will override the alarm configuration at the deployment group level. Consider overriding the alarm configuration if you have set up alarms at the deployment group level that are causing deployment failures. In this case, you would call CreateDeployment to create a new deployment that uses a previous application revision that is known to work, and set its alarm configuration to turn off alarm polling. Turning off alarm polling ensures that the new deployment proceeds without being blocked by the alarm that was generated by the previous, failed, deployment. If you specify an overrideAlarmConfiguration, you need the UpdateDeploymentGroup IAM permission when calling CreateDeployment.
    public var overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The type and location of the revision to deploy.
    public var revision: CodeDeployClientTypes.RevisionLocation?
    /// Information about the instances that belong to the replacement environment in a blue/green deployment.
    public var targetInstances: CodeDeployClientTypes.TargetInstances?
    /// Indicates whether to deploy to all instances or only to instances that are not running the latest application revision.
    public var updateOutdatedInstancesOnly: Swift.Bool?

    public init(
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil,
        description: Swift.String? = nil,
        fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior? = nil,
        ignoreApplicationStopFailures: Swift.Bool? = false,
        overrideAlarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil,
        targetInstances: CodeDeployClientTypes.TargetInstances? = nil,
        updateOutdatedInstancesOnly: Swift.Bool? = false
    )
    {
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.description = description
        self.fileExistsBehavior = fileExistsBehavior
        self.ignoreApplicationStopFailures = ignoreApplicationStopFailures
        self.overrideAlarmConfiguration = overrideAlarmConfiguration
        self.revision = revision
        self.targetInstances = targetInstances
        self.updateOutdatedInstancesOnly = updateOutdatedInstancesOnly
    }
}

/// Represents the output of a CreateDeployment operation.
public struct CreateDeploymentOutput: Swift.Sendable {
    /// The unique ID of a deployment.
    public var deploymentId: Swift.String?

    public init(
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

/// A deployment configuration with the specified name with the user or Amazon Web Services account already exists.
public struct DeploymentConfigAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentConfigAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment configurations limit was exceeded.
public struct DeploymentConfigLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentConfigLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment configuration name was not specified.
public struct DeploymentConfigNameRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentConfigNameRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The minimum healthy instance value was specified in an invalid format.
public struct InvalidMinimumHealthyHostValueException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidMinimumHealthyHostValueException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The ZonalConfig object is not valid.
public struct InvalidZonalDeploymentConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidZonalDeploymentConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum MinimumHealthyHostsType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fleetPercent
        case hostCount
        case sdkUnknown(Swift.String)

        public static var allCases: [MinimumHealthyHostsType] {
            return [
                .fleetPercent,
                .hostCount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fleetPercent: return "FLEET_PERCENT"
            case .hostCount: return "HOST_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the minimum number of healthy instances.
    public struct MinimumHealthyHosts: Swift.Sendable {
        /// The minimum healthy instance type:
        ///
        /// * HOST_COUNT: The minimum number of healthy instances as an absolute value.
        ///
        /// * FLEET_PERCENT: The minimum number of healthy instances as a percentage of the total number of instances in the deployment.
        ///
        ///
        /// In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instances at a time. The deployment is successful if four or more instances are deployed to successfully. Otherwise, the deployment fails. In a call to the GetDeploymentConfig, CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful. For more information, see [CodeDeploy Instance Health](https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html) in the CodeDeploy User Guide.
        public var type: CodeDeployClientTypes.MinimumHealthyHostsType?
        /// The minimum healthy instance value.
        public var value: Swift.Int

        public init(
            type: CodeDeployClientTypes.MinimumHealthyHostsType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension CodeDeployClientTypes {

    /// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    public struct TimeBasedCanary: Swift.Sendable {
        /// The number of minutes between the first and second traffic shifts of a TimeBasedCanary deployment.
        public var canaryInterval: Swift.Int
        /// The percentage of traffic to shift in the first increment of a TimeBasedCanary deployment.
        public var canaryPercentage: Swift.Int

        public init(
            canaryInterval: Swift.Int = 0,
            canaryPercentage: Swift.Int = 0
        )
        {
            self.canaryInterval = canaryInterval
            self.canaryPercentage = canaryPercentage
        }
    }
}

extension CodeDeployClientTypes {

    /// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
    public struct TimeBasedLinear: Swift.Sendable {
        /// The number of minutes between each incremental traffic shift of a TimeBasedLinear deployment.
        public var linearInterval: Swift.Int
        /// The percentage of traffic that is shifted at the start of each increment of a TimeBasedLinear deployment.
        public var linearPercentage: Swift.Int

        public init(
            linearInterval: Swift.Int = 0,
            linearPercentage: Swift.Int = 0
        )
        {
            self.linearInterval = linearInterval
            self.linearPercentage = linearPercentage
        }
    }
}

extension CodeDeployClientTypes {

    public enum TrafficRoutingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allatonce
        case timebasedcanary
        case timebasedlinear
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficRoutingType] {
            return [
                .allatonce,
                .timebasedcanary,
                .timebasedlinear
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allatonce: return "AllAtOnce"
            case .timebasedcanary: return "TimeBasedCanary"
            case .timebasedlinear: return "TimeBasedLinear"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
    public struct TrafficRoutingConfig: Swift.Sendable {
        /// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
        public var timeBasedCanary: CodeDeployClientTypes.TimeBasedCanary?
        /// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or Amazon ECS task sets are specified in the deployment's AppSpec file.
        public var timeBasedLinear: CodeDeployClientTypes.TimeBasedLinear?
        /// The type of traffic shifting (TimeBasedCanary or TimeBasedLinear) used by a deployment configuration.
        public var type: CodeDeployClientTypes.TrafficRoutingType?

        public init(
            timeBasedCanary: CodeDeployClientTypes.TimeBasedCanary? = nil,
            timeBasedLinear: CodeDeployClientTypes.TimeBasedLinear? = nil,
            type: CodeDeployClientTypes.TrafficRoutingType? = nil
        )
        {
            self.timeBasedCanary = timeBasedCanary
            self.timeBasedLinear = timeBasedLinear
            self.type = type
        }
    }
}

extension CodeDeployClientTypes {

    public enum MinimumHealthyHostsPerZoneType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fleetPercent
        case hostCount
        case sdkUnknown(Swift.String)

        public static var allCases: [MinimumHealthyHostsPerZoneType] {
            return [
                .fleetPercent,
                .hostCount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fleetPercent: return "FLEET_PERCENT"
            case .hostCount: return "HOST_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    /// Information about the minimum number of healthy instances per Availability Zone.
    public struct MinimumHealthyHostsPerZone: Swift.Sendable {
        /// The type associated with the MinimumHealthyHostsPerZone option.
        public var type: CodeDeployClientTypes.MinimumHealthyHostsPerZoneType?
        /// The value associated with the MinimumHealthyHostsPerZone option.
        public var value: Swift.Int

        public init(
            type: CodeDeployClientTypes.MinimumHealthyHostsPerZoneType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }
}

extension CodeDeployClientTypes {

    /// Configure the ZonalConfig object if you want CodeDeploy to deploy your application to one [Availability Zone](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones) at a time, within an Amazon Web Services Region. By deploying to one Availability Zone at a time, you can expose your deployment to a progressively larger audience as confidence in the deployment's performance and viability grows. If you don't configure the ZonalConfig object, CodeDeploy deploys your application to a random selection of hosts across a Region. For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the CodeDeploy User Guide.
    public struct ZonalConfig: Swift.Sendable {
        /// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for firstZoneMonitorDurationInSeconds, then CodeDeploy uses the monitorDurationInSeconds value for the first Availability Zone. For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the CodeDeploy User Guide.
        public var firstZoneMonitorDurationInSeconds: Swift.Int?
        /// The number or percentage of instances that must remain available per Availability Zone during a deployment. This option works in conjunction with the MinimumHealthyHosts option. For more information, see [About the minimum number of healthy hosts per Availability Zone](https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html#minimum-healthy-hosts-az) in the CodeDeploy User Guide. If you don't specify the minimumHealthyHostsPerZone option, then CodeDeploy uses a default value of 0 percent. For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the CodeDeploy User Guide.
        public var minimumHealthyHostsPerZone: CodeDeployClientTypes.MinimumHealthyHostsPerZone?
        /// The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a monitorDurationInSeconds, CodeDeploy starts deploying to the next Availability Zone immediately. For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the CodeDeploy User Guide.
        public var monitorDurationInSeconds: Swift.Int?

        public init(
            firstZoneMonitorDurationInSeconds: Swift.Int? = nil,
            minimumHealthyHostsPerZone: CodeDeployClientTypes.MinimumHealthyHostsPerZone? = nil,
            monitorDurationInSeconds: Swift.Int? = nil
        )
        {
            self.firstZoneMonitorDurationInSeconds = firstZoneMonitorDurationInSeconds
            self.minimumHealthyHostsPerZone = minimumHealthyHostsPerZone
            self.monitorDurationInSeconds = monitorDurationInSeconds
        }
    }
}

/// Represents the input of a CreateDeploymentConfig operation.
public struct CreateDeploymentConfigInput: Swift.Sendable {
    /// The destination platform type for the deployment (Lambda, Server, or ECS).
    public var computePlatform: CodeDeployClientTypes.ComputePlatform?
    /// The name of the deployment configuration to create.
    /// This member is required.
    public var deploymentConfigName: Swift.String?
    /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:
    ///
    /// * HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.
    ///
    /// * FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.
    ///
    ///
    /// The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
    public var minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
    /// The configuration that specifies how the deployment traffic is routed.
    public var trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?
    /// Configure the ZonalConfig object if you want CodeDeploy to deploy your application to one [Availability Zone](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones) at a time, within an Amazon Web Services Region. For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the CodeDeploy User Guide.
    public var zonalConfig: CodeDeployClientTypes.ZonalConfig?

    public init(
        computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
        deploymentConfigName: Swift.String? = nil,
        minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts? = nil,
        trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig? = nil,
        zonalConfig: CodeDeployClientTypes.ZonalConfig? = nil
    )
    {
        self.computePlatform = computePlatform
        self.deploymentConfigName = deploymentConfigName
        self.minimumHealthyHosts = minimumHealthyHosts
        self.trafficRoutingConfig = trafficRoutingConfig
        self.zonalConfig = zonalConfig
    }
}

/// Represents the output of a CreateDeploymentConfig operation.
public struct CreateDeploymentConfigOutput: Swift.Sendable {
    /// A unique deployment configuration ID.
    public var deploymentConfigId: Swift.String?

    public init(
        deploymentConfigId: Swift.String? = nil
    )
    {
        self.deploymentConfigId = deploymentConfigId
    }
}

/// A deployment group with the specified name with the user or Amazon Web Services account already exists.
public struct DeploymentGroupAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentGroupAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployment groups limit was exceeded.
public struct DeploymentGroupLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentGroupLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Amazon ECS service is associated with more than one deployment groups. An Amazon ECS service can be associated with only one deployment group.
public struct ECSServiceMappingLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ECSServiceMappingLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The configuration for the blue/green deployment group was provided in an invalid format. For information about deployment configuration format, see [CreateDeploymentConfig].
public struct InvalidBlueGreenDeploymentConfigurationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidBlueGreenDeploymentConfigurationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid deployment style was specified. Valid deployment types include "IN_PLACE" and "BLUE_GREEN." Valid deployment options include "WITH_TRAFFIC_CONTROL" and "WITHOUT_TRAFFIC_CONTROL."
public struct InvalidDeploymentStyleException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentStyleException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A call was submitted that specified both Ec2TagFilters and Ec2TagSet, but only one of these data types can be used in a single call.
public struct InvalidEC2TagCombinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEC2TagCombinationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tag was specified in an invalid format.
public struct InvalidEC2TagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEC2TagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The Amazon ECS service identifier is not valid.
public struct InvalidECSServiceException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidECSServiceException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input was specified in an invalid format.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A call was submitted that specified both OnPremisesTagFilters and OnPremisesTagSet, but only one of these data types can be used in a single call.
public struct InvalidOnPremisesTagCombinationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOnPremisesTagCombinationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A target group pair associated with this deployment is not valid.
public struct InvalidTargetGroupPairException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTargetGroupPairException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The trigger was specified in an invalid format.
public struct InvalidTriggerConfigException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTriggerConfigException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The limit for lifecycle hooks was exceeded.
public struct LifecycleHookLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LifecycleHookLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The role ID was not specified.
public struct RoleRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "RoleRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of tag groups included in the tag set list exceeded the maximum allowed limit of 3.
public struct TagSetListLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagSetListLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum allowed number of triggers was exceeded.
public struct TriggerTargetsLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TriggerTargetsLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a CreateDeploymentGroup operation.
public struct CreateDeploymentGroupInput: Swift.Sendable {
    /// Information to add about Amazon CloudWatch alarms when the deployment group is created.
    public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Configuration information for an automatic rollback that is added when a deployment group is created.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// A list of associated Amazon EC2 Auto Scaling groups.
    public var autoScalingGroups: [Swift.String]?
    /// Information about blue/green deployment options for a deployment group.
    public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    /// If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group. For more information about the predefined deployment configurations in CodeDeploy, see [Working with Deployment Configurations in CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html) in the CodeDeploy User Guide.
    public var deploymentConfigName: Swift.String?
    /// The name of a new deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?
    /// Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
    public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    /// The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
    public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    /// Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
    public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
    public var ecsServices: [CodeDeployClientTypes.ECSService]?
    /// Information about the load balancer used in a deployment.
    public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
    public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    /// Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
    public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
    public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    /// A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.
    /// This member is required.
    public var serviceRoleArn: Swift.String?
    /// The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [CodeDeployClientTypes.Tag]?
    /// This parameter only applies if you are using CodeDeploy with Amazon EC2 Auto Scaling. For more information, see [Integrating CodeDeploy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html) in the CodeDeploy User Guide. Set terminationHookEnabled to true to have CodeDeploy install a termination hook into your Auto Scaling group when you create a deployment group. When this hook is installed, CodeDeploy will perform termination deployments. For information about termination deployments, see [Enabling termination deployments during Auto Scaling scale-in events](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html#integrations-aws-auto-scaling-behaviors-hook-enable) in the CodeDeploy User Guide. For more information about Auto Scaling scale-in events, see the [Scale in](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-lifecycle.html#as-lifecycle-scale-in) topic in the Amazon EC2 Auto Scaling User Guide.
    public var terminationHookEnabled: Swift.Bool?
    /// Information about triggers to create when the deployment group is created. For examples, see [Create a Trigger for an CodeDeploy Event](https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html) in the CodeDeploy User Guide.
    public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

    public init(
        alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        autoScalingGroups: [Swift.String]? = nil,
        blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil,
        deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
        ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
        ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
        ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
        loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
        onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
        serviceRoleArn: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil,
        terminationHookEnabled: Swift.Bool? = nil,
        triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.tags = tags
        self.terminationHookEnabled = terminationHookEnabled
        self.triggerConfigurations = triggerConfigurations
    }
}

/// Represents the output of a CreateDeploymentGroup operation.
public struct CreateDeploymentGroupOutput: Swift.Sendable {
    /// A unique deployment group ID.
    public var deploymentGroupId: Swift.String?

    public init(
        deploymentGroupId: Swift.String? = nil
    )
    {
        self.deploymentGroupId = deploymentGroupId
    }
}

/// Represents the input of a DeleteApplication operation.
public struct DeleteApplicationInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?

    public init(
        applicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

/// The deployment configuration is still in use.
public struct DeploymentConfigInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DeploymentConfigInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid operation was detected.
public struct InvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a DeleteDeploymentConfig operation.
public struct DeleteDeploymentConfigInput: Swift.Sendable {
    /// The name of a deployment configuration associated with the user or Amazon Web Services account.
    /// This member is required.
    public var deploymentConfigName: Swift.String?

    public init(
        deploymentConfigName: Swift.String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

/// Represents the input of a DeleteDeploymentGroup operation.
public struct DeleteDeploymentGroupInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of a deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

/// Represents the output of a DeleteDeploymentGroup operation.
public struct DeleteDeploymentGroupOutput: Swift.Sendable {
    /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group. If the output contains data, CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon EC2 instances in the Auto Scaling group.
    public var hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?

    public init(
        hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

/// No GitHub account connection exists with the named specified in the call.
public struct GitHubAccountTokenDoesNotExistException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GitHubAccountTokenDoesNotExistException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The call is missing a required GitHub account connection name.
public struct GitHubAccountTokenNameRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "GitHubAccountTokenNameRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The format of the specified GitHub account connection name is invalid.
public struct InvalidGitHubAccountTokenNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidGitHubAccountTokenNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The API used does not support the deployment.
public struct OperationNotSupportedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationNotSupportedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource could not be validated.
public struct ResourceValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a DeleteGitHubAccount operation.
public struct DeleteGitHubAccountTokenInput: Swift.Sendable {
    /// The name of the GitHub account connection to delete.
    public var tokenName: Swift.String?

    public init(
        tokenName: Swift.String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

/// Represents the output of a DeleteGitHubAccountToken operation.
public struct DeleteGitHubAccountTokenOutput: Swift.Sendable {
    /// The name of the GitHub account connection that was deleted.
    public var tokenName: Swift.String?

    public init(
        tokenName: Swift.String? = nil
    )
    {
        self.tokenName = tokenName
    }
}

public struct DeleteResourcesByExternalIdInput: Swift.Sendable {
    /// The unique ID of an external resource (for example, a CloudFormation stack ID) that is linked to one or more CodeDeploy resources.
    public var externalId: Swift.String?

    public init(
        externalId: Swift.String? = nil
    )
    {
        self.externalId = externalId
    }
}

public struct DeleteResourcesByExternalIdOutput: Swift.Sendable {

    public init() { }
}

/// Represents the input of a DeregisterOnPremisesInstance operation.
public struct DeregisterOnPremisesInstanceInput: Swift.Sendable {
    /// The name of the on-premises instance to deregister.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

/// Represents the input of a GetApplication operation.
public struct GetApplicationInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?

    public init(
        applicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
    }
}

/// Represents the output of a GetApplication operation.
public struct GetApplicationOutput: Swift.Sendable {
    /// Information about the application.
    public var application: CodeDeployClientTypes.ApplicationInfo?

    public init(
        application: CodeDeployClientTypes.ApplicationInfo? = nil
    )
    {
        self.application = application
    }
}

/// Represents the input of a GetApplicationRevision operation.
public struct GetApplicationRevisionInput: Swift.Sendable {
    /// The name of the application that corresponds to the revision.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Information about the application revision to get, including type and location.
    /// This member is required.
    public var revision: CodeDeployClientTypes.RevisionLocation?

    public init(
        applicationName: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
    }
}

/// Represents the output of a GetApplicationRevision operation.
public struct GetApplicationRevisionOutput: Swift.Sendable {
    /// The name of the application that corresponds to the revision.
    public var applicationName: Swift.String?
    /// Additional information about the revision, including type and location.
    public var revision: CodeDeployClientTypes.RevisionLocation?
    /// General information about the revision.
    public var revisionInfo: CodeDeployClientTypes.GenericRevisionInfo?

    public init(
        applicationName: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil,
        revisionInfo: CodeDeployClientTypes.GenericRevisionInfo? = nil
    )
    {
        self.applicationName = applicationName
        self.revision = revision
        self.revisionInfo = revisionInfo
    }
}

/// Represents the input of a GetDeployment operation.
public struct GetDeploymentInput: Swift.Sendable {
    /// The unique ID of a deployment associated with the user or Amazon Web Services account.
    /// This member is required.
    public var deploymentId: Swift.String?

    public init(
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

/// Represents the output of a GetDeployment operation.
public struct GetDeploymentOutput: Swift.Sendable {
    /// Information about the deployment.
    public var deploymentInfo: CodeDeployClientTypes.DeploymentInfo?

    public init(
        deploymentInfo: CodeDeployClientTypes.DeploymentInfo? = nil
    )
    {
        self.deploymentInfo = deploymentInfo
    }
}

/// Represents the input of a GetDeploymentConfig operation.
public struct GetDeploymentConfigInput: Swift.Sendable {
    /// The name of a deployment configuration associated with the user or Amazon Web Services account.
    /// This member is required.
    public var deploymentConfigName: Swift.String?

    public init(
        deploymentConfigName: Swift.String? = nil
    )
    {
        self.deploymentConfigName = deploymentConfigName
    }
}

extension CodeDeployClientTypes {

    /// Information about a deployment configuration.
    public struct DeploymentConfigInfo: Swift.Sendable {
        /// The destination platform type for the deployment (Lambda, Server, or ECS).
        public var computePlatform: CodeDeployClientTypes.ComputePlatform?
        /// The time at which the deployment configuration was created.
        public var createTime: Foundation.Date?
        /// The deployment configuration ID.
        public var deploymentConfigId: Swift.String?
        /// The deployment configuration name.
        public var deploymentConfigName: Swift.String?
        /// Information about the number or percentage of minimum healthy instances.
        public var minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
        /// The configuration that specifies how the deployment traffic is routed. Used for deployments with a Lambda or Amazon ECS compute platform only.
        public var trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?
        /// Information about a zonal configuration.
        public var zonalConfig: CodeDeployClientTypes.ZonalConfig?

        public init(
            computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
            createTime: Foundation.Date? = nil,
            deploymentConfigId: Swift.String? = nil,
            deploymentConfigName: Swift.String? = nil,
            minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts? = nil,
            trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig? = nil,
            zonalConfig: CodeDeployClientTypes.ZonalConfig? = nil
        )
        {
            self.computePlatform = computePlatform
            self.createTime = createTime
            self.deploymentConfigId = deploymentConfigId
            self.deploymentConfigName = deploymentConfigName
            self.minimumHealthyHosts = minimumHealthyHosts
            self.trafficRoutingConfig = trafficRoutingConfig
            self.zonalConfig = zonalConfig
        }
    }
}

/// Represents the output of a GetDeploymentConfig operation.
public struct GetDeploymentConfigOutput: Swift.Sendable {
    /// Information about the deployment configuration.
    public var deploymentConfigInfo: CodeDeployClientTypes.DeploymentConfigInfo?

    public init(
        deploymentConfigInfo: CodeDeployClientTypes.DeploymentConfigInfo? = nil
    )
    {
        self.deploymentConfigInfo = deploymentConfigInfo
    }
}

/// Represents the input of a GetDeploymentGroup operation.
public struct GetDeploymentGroupInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// The name of a deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroupName = deploymentGroupName
    }
}

/// Represents the output of a GetDeploymentGroup operation.
public struct GetDeploymentGroupOutput: Swift.Sendable {
    /// Information about the deployment group.
    public var deploymentGroupInfo: CodeDeployClientTypes.DeploymentGroupInfo?

    public init(
        deploymentGroupInfo: CodeDeployClientTypes.DeploymentGroupInfo? = nil
    )
    {
        self.deploymentGroupInfo = deploymentGroupInfo
    }
}

/// Represents the input of a GetDeploymentInstance operation.
public struct GetDeploymentInstanceInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique ID of an instance in the deployment group.
    /// This member is required.
    public var instanceId: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        instanceId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceId = instanceId
    }
}

/// Represents the output of a GetDeploymentInstance operation.
public struct GetDeploymentInstanceOutput: Swift.Sendable {
    /// Information about the instance.
    @available(*, deprecated, message: "InstanceSummary is deprecated, use DeploymentTarget instead.")
    public var instanceSummary: CodeDeployClientTypes.InstanceSummary?

    public init(
        instanceSummary: CodeDeployClientTypes.InstanceSummary? = nil
    )
    {
        self.instanceSummary = instanceSummary
    }
}

public struct GetDeploymentTargetInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// The unique ID of a deployment target.
    /// This member is required.
    public var targetId: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        targetId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.targetId = targetId
    }
}

public struct GetDeploymentTargetOutput: Swift.Sendable {
    /// A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (instanceTarget, lambdaTarget, or ecsTarget).
    public var deploymentTarget: CodeDeployClientTypes.DeploymentTarget?

    public init(
        deploymentTarget: CodeDeployClientTypes.DeploymentTarget? = nil
    )
    {
        self.deploymentTarget = deploymentTarget
    }
}

/// Represents the input of a GetOnPremisesInstance operation.
public struct GetOnPremisesInstanceInput: Swift.Sendable {
    /// The name of the on-premises instance about which to get information.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        instanceName: Swift.String? = nil
    )
    {
        self.instanceName = instanceName
    }
}

/// Represents the output of a GetOnPremisesInstance operation.
public struct GetOnPremisesInstanceOutput: Swift.Sendable {
    /// Information about the on-premises instance.
    public var instanceInfo: CodeDeployClientTypes.InstanceInfo?

    public init(
        instanceInfo: CodeDeployClientTypes.InstanceInfo? = nil
    )
    {
        self.instanceInfo = instanceInfo
    }
}

/// The bucket name either doesn't exist or was specified in an invalid format.
public struct InvalidBucketNameFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidBucketNameFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The deployed state filter was specified in an invalid format.
public struct InvalidDeployedStateFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeployedStateFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified key prefix filter was specified in an invalid format.
public struct InvalidKeyPrefixFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidKeyPrefixFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The next token was specified in an invalid format.
public struct InvalidNextTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The column name to sort by is either not present or was specified in an invalid format.
public struct InvalidSortByException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSortByException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The sort order was specified in an invalid format.
public struct InvalidSortOrderException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSortOrderException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum ListStateFilterAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case exclude
        case ignore
        case include
        case sdkUnknown(Swift.String)

        public static var allCases: [ListStateFilterAction] {
            return [
                .exclude,
                .ignore,
                .include
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .exclude: return "exclude"
            case .ignore: return "ignore"
            case .include: return "include"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CodeDeployClientTypes {

    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ascending"
            case .descending: return "descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a ListApplicationRevisions operation.
public struct ListApplicationRevisionsInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Whether to list revisions based on whether the revision is the target revision of a deployment group:
    ///
    /// * include: List revisions that are target revisions of a deployment group.
    ///
    /// * exclude: Do not list revisions that are target revisions of a deployment group.
    ///
    /// * ignore: List all revisions.
    public var deployed: CodeDeployClientTypes.ListStateFilterAction?
    /// An identifier returned from the previous ListApplicationRevisions call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?
    /// An Amazon S3 bucket name to limit the search for revisions. If set to null, all of the user's buckets are searched.
    public var s3Bucket: Swift.String?
    /// A key prefix for the set of Amazon S3 objects to limit the search for revisions.
    public var s3KeyPrefix: Swift.String?
    /// The column name to use to sort the list results:
    ///
    /// * registerTime: Sort by the time the revisions were registered with CodeDeploy.
    ///
    /// * firstUsedTime: Sort by the time the revisions were first used in a deployment.
    ///
    /// * lastUsedTime: Sort by the time the revisions were last used in a deployment.
    ///
    ///
    /// If not specified or set to null, the results are returned in an arbitrary order.
    public var sortBy: CodeDeployClientTypes.ApplicationRevisionSortBy?
    /// The order in which to sort the list results:
    ///
    /// * ascending: ascending order.
    ///
    /// * descending: descending order.
    ///
    ///
    /// If not specified, the results are sorted in ascending order. If set to null, the results are sorted in an arbitrary order.
    public var sortOrder: CodeDeployClientTypes.SortOrder?

    public init(
        applicationName: Swift.String? = nil,
        deployed: CodeDeployClientTypes.ListStateFilterAction? = nil,
        nextToken: Swift.String? = nil,
        s3Bucket: Swift.String? = nil,
        s3KeyPrefix: Swift.String? = nil,
        sortBy: CodeDeployClientTypes.ApplicationRevisionSortBy? = nil,
        sortOrder: CodeDeployClientTypes.SortOrder? = nil
    )
    {
        self.applicationName = applicationName
        self.deployed = deployed
        self.nextToken = nextToken
        self.s3Bucket = s3Bucket
        self.s3KeyPrefix = s3KeyPrefix
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

/// Represents the output of a ListApplicationRevisions operation.
public struct ListApplicationRevisionsOutput: Swift.Sendable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
    public var nextToken: Swift.String?
    /// A list of locations that contain the matching revisions.
    public var revisions: [CodeDeployClientTypes.RevisionLocation]?

    public init(
        nextToken: Swift.String? = nil,
        revisions: [CodeDeployClientTypes.RevisionLocation]? = nil
    )
    {
        self.nextToken = nextToken
        self.revisions = revisions
    }
}

/// Represents the input of a ListApplications operation.
public struct ListApplicationsInput: Swift.Sendable {
    /// An identifier returned from the previous list applications call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListApplications operation.
public struct ListApplicationsOutput: Swift.Sendable {
    /// A list of application names.
    public var applications: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list applications call to return the next set of applications in the list.
    public var nextToken: Swift.String?

    public init(
        applications: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applications = applications
        self.nextToken = nextToken
    }
}

/// Represents the input of a ListDeploymentConfigs operation.
public struct ListDeploymentConfigsInput: Swift.Sendable {
    /// An identifier returned from the previous ListDeploymentConfigs call. It can be used to return the next set of deployment configurations in the list.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListDeploymentConfigs operation.
public struct ListDeploymentConfigsOutput: Swift.Sendable {
    /// A list of deployment configurations, including built-in configurations such as CodeDeployDefault.OneAtATime.
    public var deploymentConfigsList: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment configurations call to return the next set of deployment configurations in the list.
    public var nextToken: Swift.String?

    public init(
        deploymentConfigsList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deploymentConfigsList = deploymentConfigsList
        self.nextToken = nextToken
    }
}

/// Represents the input of a ListDeploymentGroups operation.
public struct ListDeploymentGroupsInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An identifier returned from the previous list deployment groups call. It can be used to return the next set of deployment groups in the list.
    public var nextToken: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListDeploymentGroups operation.
public struct ListDeploymentGroupsOutput: Swift.Sendable {
    /// The application name.
    public var applicationName: Swift.String?
    /// A list of deployment group names.
    public var deploymentGroups: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment groups call to return the next set of deployment groups in the list.
    public var nextToken: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        deploymentGroups: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.deploymentGroups = deploymentGroups
        self.nextToken = nextToken
    }
}

/// An instance type was specified for an in-place deployment. Instance types are supported for blue/green deployments only.
public struct InvalidDeploymentInstanceTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidDeploymentInstanceTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified instance status does not exist.
public struct InvalidInstanceStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInstanceStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An invalid instance type was specified for instances in a blue/green deployment. Valid values include "Blue" for an original environment and "Green" for a replacement environment.
public struct InvalidInstanceTypeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInstanceTypeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The target filter name is invalid.
public struct InvalidTargetFilterNameException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTargetFilterNameException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of a ListDeploymentInstances operation.
public struct ListDeploymentInstancesInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// A subset of instances to list by status:
    ///
    /// * Pending: Include those instances with pending deployments.
    ///
    /// * InProgress: Include those instances where deployments are still in progress.
    ///
    /// * Succeeded: Include those instances with successful deployments.
    ///
    /// * Failed: Include those instances with failed deployments.
    ///
    /// * Skipped: Include those instances with skipped deployments.
    ///
    /// * Unknown: Include those instances with deployments in an unknown state.
    public var instanceStatusFilter: [CodeDeployClientTypes.InstanceStatus]?
    /// The set of instances in a blue/green deployment, either those in the original environment ("BLUE") or those in the replacement environment ("GREEN"), for which you want to view instance information.
    public var instanceTypeFilter: [CodeDeployClientTypes.InstanceType]?
    /// An identifier returned from the previous list deployment instances call. It can be used to return the next set of deployment instances in the list.
    public var nextToken: Swift.String?

    public init(
        deploymentId: Swift.String? = nil,
        instanceStatusFilter: [CodeDeployClientTypes.InstanceStatus]? = nil,
        instanceTypeFilter: [CodeDeployClientTypes.InstanceType]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
        self.instanceStatusFilter = instanceStatusFilter
        self.instanceTypeFilter = instanceTypeFilter
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListDeploymentInstances operation.
public struct ListDeploymentInstancesOutput: Swift.Sendable {
    /// A list of instance IDs.
    public var instancesList: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployment instances call to return the next set of deployment instances in the list.
    public var nextToken: Swift.String?

    public init(
        instancesList: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instancesList = instancesList
        self.nextToken = nextToken
    }
}

/// The external ID was specified in an invalid format.
public struct InvalidExternalIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidExternalIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified time range was specified in an invalid format.
public struct InvalidTimeRangeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTimeRangeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    /// Information about a time range.
    public struct TimeRange: Swift.Sendable {
        /// The end time of the time range. Specify null to leave the end time open-ended.
        public var end: Foundation.Date?
        /// The start time of the time range. Specify null to leave the start time open-ended.
        public var start: Foundation.Date?

        public init(
            end: Foundation.Date? = nil,
            start: Foundation.Date? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }
}

/// Represents the input of a ListDeployments operation.
public struct ListDeploymentsInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account. If applicationName is specified, then deploymentGroupName must be specified. If it is not specified, then deploymentGroupName must not be specified.
    public var applicationName: Swift.String?
    /// A time range (start and end) for returning a subset of the list of deployments.
    public var createTimeRange: CodeDeployClientTypes.TimeRange?
    /// The name of a deployment group for the specified application. If deploymentGroupName is specified, then applicationName must be specified. If it is not specified, then applicationName must not be specified.
    public var deploymentGroupName: Swift.String?
    /// The unique ID of an external resource for returning deployments linked to the external resource.
    public var externalId: Swift.String?
    /// A subset of deployments to list by status:
    ///
    /// * Created: Include created deployments in the resulting list.
    ///
    /// * Queued: Include queued deployments in the resulting list.
    ///
    /// * In Progress: Include in-progress deployments in the resulting list.
    ///
    /// * Succeeded: Include successful deployments in the resulting list.
    ///
    /// * Failed: Include failed deployments in the resulting list.
    ///
    /// * Stopped: Include stopped deployments in the resulting list.
    public var includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]?
    /// An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.
    public var nextToken: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        createTimeRange: CodeDeployClientTypes.TimeRange? = nil,
        deploymentGroupName: Swift.String? = nil,
        externalId: Swift.String? = nil,
        includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.createTimeRange = createTimeRange
        self.deploymentGroupName = deploymentGroupName
        self.externalId = externalId
        self.includeOnlyStatuses = includeOnlyStatuses
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListDeployments operation.
public struct ListDeploymentsOutput: Swift.Sendable {
    /// A list of deployment IDs.
    public var deployments: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list deployments call to return the next set of deployments in the list.
    public var nextToken: Swift.String?

    public init(
        deployments: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deployments = deployments
        self.nextToken = nextToken
    }
}

extension CodeDeployClientTypes {

    public enum TargetFilterName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case serverInstanceLabel
        case targetStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetFilterName] {
            return [
                .serverInstanceLabel,
                .targetStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .serverInstanceLabel: return "ServerInstanceLabel"
            case .targetStatus: return "TargetStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListDeploymentTargetsInput: Swift.Sendable {
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?
    /// A token identifier returned from the previous ListDeploymentTargets call. It can be used to return the next set of deployment targets in the list.
    public var nextToken: Swift.String?
    /// A key used to filter the returned targets. The two valid values are:
    ///
    /// * TargetStatus - A TargetStatus filter string can be Failed, InProgress, Pending, Ready, Skipped, Succeeded, or Unknown.
    ///
    /// * ServerInstanceLabel - A ServerInstanceLabel filter string can be Blue or Green.
    public var targetFilters: [Swift.String: [Swift.String]]?

    public init(
        deploymentId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        targetFilters: [Swift.String: [Swift.String]]? = nil
    )
    {
        self.deploymentId = deploymentId
        self.nextToken = nextToken
        self.targetFilters = targetFilters
    }
}

public struct ListDeploymentTargetsOutput: Swift.Sendable {
    /// If a large amount of information is returned, a token identifier is also returned. It can be used in a subsequent ListDeploymentTargets call to return the next set of deployment targets in the list.
    public var nextToken: Swift.String?
    /// The unique IDs of deployment targets.
    public var targetIds: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        targetIds: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.targetIds = targetIds
    }
}

/// Represents the input of a ListGitHubAccountTokenNames operation.
public struct ListGitHubAccountTokenNamesInput: Swift.Sendable {
    /// An identifier returned from the previous ListGitHubAccountTokenNames call. It can be used to return the next set of names in the list.
    public var nextToken: Swift.String?

    public init(
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

/// Represents the output of a ListGitHubAccountTokenNames operation.
public struct ListGitHubAccountTokenNamesOutput: Swift.Sendable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent ListGitHubAccountTokenNames call to return the next set of names in the list.
    public var nextToken: Swift.String?
    /// A list of names of connections to GitHub accounts.
    public var tokenNameList: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        tokenNameList: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.tokenNameList = tokenNameList
    }
}

/// The registration status was specified in an invalid format.
public struct InvalidRegistrationStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRegistrationStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The tag filter was specified in an invalid format.
public struct InvalidTagFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CodeDeployClientTypes {

    public enum RegistrationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deregistered
        case registered
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .deregistered,
                .registered
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deregistered: return "Deregistered"
            case .registered: return "Registered"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the input of a ListOnPremisesInstances operation.
public struct ListOnPremisesInstancesInput: Swift.Sendable {
    /// An identifier returned from the previous list on-premises instances call. It can be used to return the next set of on-premises instances in the list.
    public var nextToken: Swift.String?
    /// The registration status of the on-premises instances:
    ///
    /// * Deregistered: Include deregistered on-premises instances in the resulting list.
    ///
    /// * Registered: Include registered on-premises instances in the resulting list.
    public var registrationStatus: CodeDeployClientTypes.RegistrationStatus?
    /// The on-premises instance tags that are used to restrict the on-premises instance names returned.
    public var tagFilters: [CodeDeployClientTypes.TagFilter]?

    public init(
        nextToken: Swift.String? = nil,
        registrationStatus: CodeDeployClientTypes.RegistrationStatus? = nil,
        tagFilters: [CodeDeployClientTypes.TagFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationStatus = registrationStatus
        self.tagFilters = tagFilters
    }
}

/// Represents the output of the list on-premises instances operation.
public struct ListOnPremisesInstancesOutput: Swift.Sendable {
    /// The list of matching on-premises instance names.
    public var instanceNames: [Swift.String]?
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list on-premises instances call to return the next set of on-premises instances in the list.
    public var nextToken: Swift.String?

    public init(
        instanceNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceNames = instanceNames
        self.nextToken = nextToken
    }
}

/// The specified ARN is not in a valid format.
public struct InvalidArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The ARN of a resource is required, but was not found.
public struct ResourceArnRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceArnRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// An identifier returned from the previous ListTagsForResource call. It can be used to return the next set of applications in the list.
    public var nextToken: Swift.String?
    /// The ARN of a CodeDeploy resource. ListTagsForResource returns all the tags associated with the resource that is identified by the ResourceArn.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// If a large amount of information is returned, an identifier is also returned. It can be used in a subsequent list application revisions call to return the next set of application revisions in the list.
    public var nextToken: Swift.String?
    /// A list of tags returned by ListTagsForResource. The tags are associated with the resource identified by the input ResourceArn parameter.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

/// A lifecycle event hook is invalid. Review the hooks section in your AppSpec file to ensure the lifecycle events and hooks functions are valid.
public struct InvalidLifecycleEventHookExecutionIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLifecycleEventHookExecutionIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The result of a Lambda validation function that verifies a lifecycle event is invalid. It should return Succeeded or Failed.
public struct InvalidLifecycleEventHookExecutionStatusException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidLifecycleEventHookExecutionStatusException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An attempt to return the status of an already completed lifecycle event occurred.
public struct LifecycleEventAlreadyCompletedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LifecycleEventAlreadyCompletedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutLifecycleEventHookExecutionStatusInput: Swift.Sendable {
    /// The unique ID of a deployment. Pass this ID to a Lambda function that validates a deployment lifecycle event.
    public var deploymentId: Swift.String?
    /// The execution ID of a deployment's lifecycle hook. A deployment lifecycle hook is specified in the hooks section of the AppSpec file.
    public var lifecycleEventHookExecutionId: Swift.String?
    /// The result of a Lambda function that validates a deployment lifecycle event. The values listed in Valid Values are valid for lifecycle statuses in general; however, only Succeeded and Failed can be passed successfully in your API call.
    public var status: CodeDeployClientTypes.LifecycleEventStatus?

    public init(
        deploymentId: Swift.String? = nil,
        lifecycleEventHookExecutionId: Swift.String? = nil,
        status: CodeDeployClientTypes.LifecycleEventStatus? = nil
    )
    {
        self.deploymentId = deploymentId
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
        self.status = status
    }
}

public struct PutLifecycleEventHookExecutionStatusOutput: Swift.Sendable {
    /// The execution ID of the lifecycle event hook. A hook is specified in the hooks section of the deployment's AppSpec file.
    public var lifecycleEventHookExecutionId: Swift.String?

    public init(
        lifecycleEventHookExecutionId: Swift.String? = nil
    )
    {
        self.lifecycleEventHookExecutionId = lifecycleEventHookExecutionId
    }
}

/// Represents the input of a RegisterApplicationRevision operation.
public struct RegisterApplicationRevisionInput: Swift.Sendable {
    /// The name of an CodeDeploy application associated with the user or Amazon Web Services account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// A comment about the revision.
    public var description: Swift.String?
    /// Information about the application revision to register, including type and location.
    /// This member is required.
    public var revision: CodeDeployClientTypes.RevisionLocation?

    public init(
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        revision: CodeDeployClientTypes.RevisionLocation? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.revision = revision
    }
}

/// No IAM ARN was included in the request. You must use an IAM session ARN or user ARN in the request.
public struct IamArnRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamArnRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request included an IAM session ARN that has already been used to register a different instance.
public struct IamSessionArnAlreadyRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamSessionArnAlreadyRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified user ARN is already registered with an on-premises instance.
public struct IamUserArnAlreadyRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamUserArnAlreadyRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An user ARN was not specified.
public struct IamUserArnRequiredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IamUserArnRequiredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified on-premises instance name is already registered.
public struct InstanceNameAlreadyRegisteredException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceNameAlreadyRegisteredException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The IAM session ARN was specified in an invalid format.
public struct InvalidIamSessionArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidIamSessionArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The user ARN was specified in an invalid format.
public struct InvalidIamUserArnException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidIamUserArnException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Both an user ARN and an IAM session ARN were included in the request. Use only one ARN type.
public struct MultipleIamArnsProvidedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The message that corresponds to the exception thrown by CodeDeploy.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MultipleIamArnsProvidedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Represents the input of the register on-premises instance operation.
public struct RegisterOnPremisesInstanceInput: Swift.Sendable {
    /// The ARN of the IAM session to associate with the on-premises instance.
    public var iamSessionArn: Swift.String?
    /// The ARN of the user to associate with the on-premises instance.
    public var iamUserArn: Swift.String?
    /// The name of the on-premises instance to register.
    /// This member is required.
    public var instanceName: Swift.String?

    public init(
        iamSessionArn: Swift.String? = nil,
        iamUserArn: Swift.String? = nil,
        instanceName: Swift.String? = nil
    )
    {
        self.iamSessionArn = iamSessionArn
        self.iamUserArn = iamUserArn
        self.instanceName = instanceName
    }
}

/// Represents the input of a RemoveTagsFromOnPremisesInstances operation.
public struct RemoveTagsFromOnPremisesInstancesInput: Swift.Sendable {
    /// The names of the on-premises instances from which to remove tags.
    /// This member is required.
    public var instanceNames: [Swift.String]?
    /// The tag key-value pairs to remove from the on-premises instances.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init(
        instanceNames: [Swift.String]? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.instanceNames = instanceNames
        self.tags = tags
    }
}

public struct SkipWaitTimeForInstanceTerminationInput: Swift.Sendable {
    /// The unique ID of a blue/green deployment for which you want to skip the instance termination wait time.
    public var deploymentId: Swift.String?

    public init(
        deploymentId: Swift.String? = nil
    )
    {
        self.deploymentId = deploymentId
    }
}

/// Represents the input of a StopDeployment operation.
public struct StopDeploymentInput: Swift.Sendable {
    /// Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision.
    public var autoRollbackEnabled: Swift.Bool?
    /// The unique ID of a deployment.
    /// This member is required.
    public var deploymentId: Swift.String?

    public init(
        autoRollbackEnabled: Swift.Bool? = nil,
        deploymentId: Swift.String? = nil
    )
    {
        self.autoRollbackEnabled = autoRollbackEnabled
        self.deploymentId = deploymentId
    }
}

extension CodeDeployClientTypes {

    public enum StopStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StopStatus] {
            return [
                .pending,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pending: return "Pending"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Represents the output of a StopDeployment operation.
public struct StopDeploymentOutput: Swift.Sendable {
    /// The status of the stop deployment operation:
    ///
    /// * Pending: The stop operation is pending.
    ///
    /// * Succeeded: The stop operation was successful.
    public var status: CodeDeployClientTypes.StopStatus?
    /// An accompanying status message.
    public var statusMessage: Swift.String?

    public init(
        status: CodeDeployClientTypes.StopStatus? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.status = status
        self.statusMessage = statusMessage
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The ARN of a resource, such as a CodeDeploy application or deployment group.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tags that TagResource associates with a resource. The resource is identified by the ResourceArn input parameter.
    /// This member is required.
    public var tags: [CodeDeployClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that specifies from which resource to disassociate the tags with the keys in the TagKeys input parameter.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of keys of Tag objects. The Tag objects identified by the keys are disassociated from the resource specified by the ResourceArn input parameter.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

/// Represents the input of an UpdateApplication operation.
public struct UpdateApplicationInput: Swift.Sendable {
    /// The current name of the application you want to change.
    public var applicationName: Swift.String?
    /// The new name to give the application.
    public var newApplicationName: Swift.String?

    public init(
        applicationName: Swift.String? = nil,
        newApplicationName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.newApplicationName = newApplicationName
    }
}

/// Represents the input of an UpdateDeploymentGroup operation.
public struct UpdateDeploymentGroupInput: Swift.Sendable {
    /// Information to add or change about Amazon CloudWatch alarms when the deployment group is updated.
    public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The application name that corresponds to the deployment group to update.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Information for an automatic rollback configuration that is added or changed when a deployment group is updated.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them.
    ///
    /// * To keep the Auto Scaling groups, enter their names or do not specify this parameter.
    ///
    /// * To remove Auto Scaling groups, specify a non-null empty list of Auto Scaling group names to detach all CodeDeploy-managed Auto Scaling lifecycle hooks. For examples, see [Amazon EC2 instances in an Amazon EC2 Auto Scaling group fail to launch and receive the error "Heartbeat Timeout"](https://docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-auto-scaling.html#troubleshooting-auto-scaling-heartbeat) in the CodeDeploy User Guide.
    public var autoScalingGroups: [Swift.String]?
    /// Information about blue/green deployment options for a deployment group.
    public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    /// The current name of the deployment group.
    /// This member is required.
    public var currentDeploymentGroupName: Swift.String?
    /// The replacement deployment configuration name to use, if you want to change it.
    public var deploymentConfigName: Swift.String?
    /// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
    public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    /// The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    /// Information about groups of tags applied to on-premises instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups.
    public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
    public var ecsServices: [CodeDeployClientTypes.ECSService]?
    /// Information about the load balancer used in a deployment.
    public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    /// The new name of the deployment group, if you want to change it.
    public var newDeploymentGroupName: Swift.String?
    /// The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names.
    public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    /// Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups.
    public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    /// Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.
    public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    /// A replacement ARN for the service role, if you want to change it.
    public var serviceRoleArn: Swift.String?
    /// This parameter only applies if you are using CodeDeploy with Amazon EC2 Auto Scaling. For more information, see [Integrating CodeDeploy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html) in the CodeDeploy User Guide. Set terminationHookEnabled to true to have CodeDeploy install a termination hook into your Auto Scaling group when you update a deployment group. When this hook is installed, CodeDeploy will perform termination deployments. For information about termination deployments, see [Enabling termination deployments during Auto Scaling scale-in events](https://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-aws-auto-scaling.html#integrations-aws-auto-scaling-behaviors-hook-enable) in the CodeDeploy User Guide. For more information about Auto Scaling scale-in events, see the [Scale in](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-lifecycle.html#as-lifecycle-scale-in) topic in the Amazon EC2 Auto Scaling User Guide.
    public var terminationHookEnabled: Swift.Bool?
    /// Information about triggers to change when the deployment group is updated. For examples, see [Edit a Trigger in a CodeDeploy Deployment Group](https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html) in the CodeDeploy User Guide.
    public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

    public init(
        alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        autoScalingGroups: [Swift.String]? = nil,
        blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
        currentDeploymentGroupName: Swift.String? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
        ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
        ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
        ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
        loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
        newDeploymentGroupName: Swift.String? = nil,
        onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
        onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
        serviceRoleArn: Swift.String? = nil,
        terminationHookEnabled: Swift.Bool? = nil,
        triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.currentDeploymentGroupName = currentDeploymentGroupName
        self.deploymentConfigName = deploymentConfigName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.newDeploymentGroupName = newDeploymentGroupName
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.terminationHookEnabled = terminationHookEnabled
        self.triggerConfigurations = triggerConfigurations
    }
}

/// Represents the output of an UpdateDeploymentGroup operation.
public struct UpdateDeploymentGroupOutput: Swift.Sendable {
    /// If the output contains no data, and the corresponding deployment group contained at least one Auto Scaling group, CodeDeploy successfully removed all corresponding Auto Scaling lifecycle event hooks from the Amazon Web Services account. If the output contains data, CodeDeploy could not remove some Auto Scaling lifecycle event hooks from the Amazon Web Services account.
    public var hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]?

    public init(
        hooksNotCleanedUp: [CodeDeployClientTypes.AutoScalingGroup]? = nil
    )
    {
        self.hooksNotCleanedUp = hooksNotCleanedUp
    }
}

extension AddTagsToOnPremisesInstancesInput {

    static func urlPathProvider(_ value: AddTagsToOnPremisesInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetApplicationRevisionsInput {

    static func urlPathProvider(_ value: BatchGetApplicationRevisionsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetApplicationsInput {

    static func urlPathProvider(_ value: BatchGetApplicationsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetDeploymentGroupsInput {

    static func urlPathProvider(_ value: BatchGetDeploymentGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetDeploymentInstancesInput {

    static func urlPathProvider(_ value: BatchGetDeploymentInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetDeploymentsInput {

    static func urlPathProvider(_ value: BatchGetDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetDeploymentTargetsInput {

    static func urlPathProvider(_ value: BatchGetDeploymentTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension BatchGetOnPremisesInstancesInput {

    static func urlPathProvider(_ value: BatchGetOnPremisesInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ContinueDeploymentInput {

    static func urlPathProvider(_ value: ContinueDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateApplicationInput {

    static func urlPathProvider(_ value: CreateApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeploymentInput {

    static func urlPathProvider(_ value: CreateDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeploymentConfigInput {

    static func urlPathProvider(_ value: CreateDeploymentConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeploymentGroupInput {

    static func urlPathProvider(_ value: CreateDeploymentGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteApplicationInput {

    static func urlPathProvider(_ value: DeleteApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeploymentConfigInput {

    static func urlPathProvider(_ value: DeleteDeploymentConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeploymentGroupInput {

    static func urlPathProvider(_ value: DeleteDeploymentGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteGitHubAccountTokenInput {

    static func urlPathProvider(_ value: DeleteGitHubAccountTokenInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcesByExternalIdInput {

    static func urlPathProvider(_ value: DeleteResourcesByExternalIdInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterOnPremisesInstanceInput {

    static func urlPathProvider(_ value: DeregisterOnPremisesInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetApplicationInput {

    static func urlPathProvider(_ value: GetApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension GetApplicationRevisionInput {

    static func urlPathProvider(_ value: GetApplicationRevisionInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentInput {

    static func urlPathProvider(_ value: GetDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentConfigInput {

    static func urlPathProvider(_ value: GetDeploymentConfigInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentGroupInput {

    static func urlPathProvider(_ value: GetDeploymentGroupInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentInstanceInput {

    static func urlPathProvider(_ value: GetDeploymentInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeploymentTargetInput {

    static func urlPathProvider(_ value: GetDeploymentTargetInput) -> Swift.String? {
        return "/"
    }
}

extension GetOnPremisesInstanceInput {

    static func urlPathProvider(_ value: GetOnPremisesInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension ListApplicationRevisionsInput {

    static func urlPathProvider(_ value: ListApplicationRevisionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListApplicationsInput {

    static func urlPathProvider(_ value: ListApplicationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentConfigsInput {

    static func urlPathProvider(_ value: ListDeploymentConfigsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentGroupsInput {

    static func urlPathProvider(_ value: ListDeploymentGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentInstancesInput {

    static func urlPathProvider(_ value: ListDeploymentInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentsInput {

    static func urlPathProvider(_ value: ListDeploymentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeploymentTargetsInput {

    static func urlPathProvider(_ value: ListDeploymentTargetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListGitHubAccountTokenNamesInput {

    static func urlPathProvider(_ value: ListGitHubAccountTokenNamesInput) -> Swift.String? {
        return "/"
    }
}

extension ListOnPremisesInstancesInput {

    static func urlPathProvider(_ value: ListOnPremisesInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutLifecycleEventHookExecutionStatusInput {

    static func urlPathProvider(_ value: PutLifecycleEventHookExecutionStatusInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterApplicationRevisionInput {

    static func urlPathProvider(_ value: RegisterApplicationRevisionInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterOnPremisesInstanceInput {

    static func urlPathProvider(_ value: RegisterOnPremisesInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension RemoveTagsFromOnPremisesInstancesInput {

    static func urlPathProvider(_ value: RemoveTagsFromOnPremisesInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension SkipWaitTimeForInstanceTerminationInput {

    static func urlPathProvider(_ value: SkipWaitTimeForInstanceTerminationInput) -> Swift.String? {
        return "/"
    }
}

extension StopDeploymentInput {

    static func urlPathProvider(_ value: StopDeploymentInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateApplicationInput {

    static func urlPathProvider(_ value: UpdateApplicationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDeploymentGroupInput {

    static func urlPathProvider(_ value: UpdateDeploymentGroupInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsToOnPremisesInstancesInput {

    static func write(value: AddTagsToOnPremisesInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeDeployClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetApplicationRevisionsInput {

    static func write(value: BatchGetApplicationRevisionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["revisions"].writeList(value.revisions, memberWritingClosure: CodeDeployClientTypes.RevisionLocation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetApplicationsInput {

    static func write(value: BatchGetApplicationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationNames"].writeList(value.applicationNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetDeploymentGroupsInput {

    static func write(value: BatchGetDeploymentGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["deploymentGroupNames"].writeList(value.deploymentGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetDeploymentInstancesInput {

    static func write(value: BatchGetDeploymentInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["instanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetDeploymentsInput {

    static func write(value: BatchGetDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentIds"].writeList(value.deploymentIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetDeploymentTargetsInput {

    static func write(value: BatchGetDeploymentTargetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["targetIds"].writeList(value.targetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchGetOnPremisesInstancesInput {

    static func write(value: BatchGetOnPremisesInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ContinueDeploymentInput {

    static func write(value: ContinueDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["deploymentWaitType"].write(value.deploymentWaitType)
    }
}

extension CreateApplicationInput {

    static func write(value: CreateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["computePlatform"].write(value.computePlatform)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeDeployClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDeploymentInput {

    static func write(value: CreateDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["autoRollbackConfiguration"].write(value.autoRollbackConfiguration, with: CodeDeployClientTypes.AutoRollbackConfiguration.write(value:to:))
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
        try writer["deploymentGroupName"].write(value.deploymentGroupName)
        try writer["description"].write(value.description)
        try writer["fileExistsBehavior"].write(value.fileExistsBehavior)
        try writer["ignoreApplicationStopFailures"].write(value.ignoreApplicationStopFailures)
        try writer["overrideAlarmConfiguration"].write(value.overrideAlarmConfiguration, with: CodeDeployClientTypes.AlarmConfiguration.write(value:to:))
        try writer["revision"].write(value.revision, with: CodeDeployClientTypes.RevisionLocation.write(value:to:))
        try writer["targetInstances"].write(value.targetInstances, with: CodeDeployClientTypes.TargetInstances.write(value:to:))
        try writer["updateOutdatedInstancesOnly"].write(value.updateOutdatedInstancesOnly)
    }
}

extension CreateDeploymentConfigInput {

    static func write(value: CreateDeploymentConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["computePlatform"].write(value.computePlatform)
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
        try writer["minimumHealthyHosts"].write(value.minimumHealthyHosts, with: CodeDeployClientTypes.MinimumHealthyHosts.write(value:to:))
        try writer["trafficRoutingConfig"].write(value.trafficRoutingConfig, with: CodeDeployClientTypes.TrafficRoutingConfig.write(value:to:))
        try writer["zonalConfig"].write(value.zonalConfig, with: CodeDeployClientTypes.ZonalConfig.write(value:to:))
    }
}

extension CreateDeploymentGroupInput {

    static func write(value: CreateDeploymentGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmConfiguration"].write(value.alarmConfiguration, with: CodeDeployClientTypes.AlarmConfiguration.write(value:to:))
        try writer["applicationName"].write(value.applicationName)
        try writer["autoRollbackConfiguration"].write(value.autoRollbackConfiguration, with: CodeDeployClientTypes.AutoRollbackConfiguration.write(value:to:))
        try writer["autoScalingGroups"].writeList(value.autoScalingGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["blueGreenDeploymentConfiguration"].write(value.blueGreenDeploymentConfiguration, with: CodeDeployClientTypes.BlueGreenDeploymentConfiguration.write(value:to:))
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
        try writer["deploymentGroupName"].write(value.deploymentGroupName)
        try writer["deploymentStyle"].write(value.deploymentStyle, with: CodeDeployClientTypes.DeploymentStyle.write(value:to:))
        try writer["ec2TagFilters"].writeList(value.ec2TagFilters, memberWritingClosure: CodeDeployClientTypes.EC2TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ec2TagSet"].write(value.ec2TagSet, with: CodeDeployClientTypes.EC2TagSet.write(value:to:))
        try writer["ecsServices"].writeList(value.ecsServices, memberWritingClosure: CodeDeployClientTypes.ECSService.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["loadBalancerInfo"].write(value.loadBalancerInfo, with: CodeDeployClientTypes.LoadBalancerInfo.write(value:to:))
        try writer["onPremisesInstanceTagFilters"].writeList(value.onPremisesInstanceTagFilters, memberWritingClosure: CodeDeployClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["onPremisesTagSet"].write(value.onPremisesTagSet, with: CodeDeployClientTypes.OnPremisesTagSet.write(value:to:))
        try writer["outdatedInstancesStrategy"].write(value.outdatedInstancesStrategy)
        try writer["serviceRoleArn"].write(value.serviceRoleArn)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeDeployClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["terminationHookEnabled"].write(value.terminationHookEnabled)
        try writer["triggerConfigurations"].writeList(value.triggerConfigurations, memberWritingClosure: CodeDeployClientTypes.TriggerConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteApplicationInput {

    static func write(value: DeleteApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
    }
}

extension DeleteDeploymentConfigInput {

    static func write(value: DeleteDeploymentConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
    }
}

extension DeleteDeploymentGroupInput {

    static func write(value: DeleteDeploymentGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["deploymentGroupName"].write(value.deploymentGroupName)
    }
}

extension DeleteGitHubAccountTokenInput {

    static func write(value: DeleteGitHubAccountTokenInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tokenName"].write(value.tokenName)
    }
}

extension DeleteResourcesByExternalIdInput {

    static func write(value: DeleteResourcesByExternalIdInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["externalId"].write(value.externalId)
    }
}

extension DeregisterOnPremisesInstanceInput {

    static func write(value: DeregisterOnPremisesInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension GetApplicationInput {

    static func write(value: GetApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
    }
}

extension GetApplicationRevisionInput {

    static func write(value: GetApplicationRevisionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["revision"].write(value.revision, with: CodeDeployClientTypes.RevisionLocation.write(value:to:))
    }
}

extension GetDeploymentInput {

    static func write(value: GetDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
    }
}

extension GetDeploymentConfigInput {

    static func write(value: GetDeploymentConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
    }
}

extension GetDeploymentGroupInput {

    static func write(value: GetDeploymentGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["deploymentGroupName"].write(value.deploymentGroupName)
    }
}

extension GetDeploymentInstanceInput {

    static func write(value: GetDeploymentInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["instanceId"].write(value.instanceId)
    }
}

extension GetDeploymentTargetInput {

    static func write(value: GetDeploymentTargetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["targetId"].write(value.targetId)
    }
}

extension GetOnPremisesInstanceInput {

    static func write(value: GetOnPremisesInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceName"].write(value.instanceName)
    }
}

extension ListApplicationRevisionsInput {

    static func write(value: ListApplicationRevisionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["deployed"].write(value.deployed)
        try writer["nextToken"].write(value.nextToken)
        try writer["s3Bucket"].write(value.s3Bucket)
        try writer["s3KeyPrefix"].write(value.s3KeyPrefix)
        try writer["sortBy"].write(value.sortBy)
        try writer["sortOrder"].write(value.sortOrder)
    }
}

extension ListApplicationsInput {

    static func write(value: ListApplicationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDeploymentConfigsInput {

    static func write(value: ListDeploymentConfigsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDeploymentGroupsInput {

    static func write(value: ListDeploymentGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDeploymentInstancesInput {

    static func write(value: ListDeploymentInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["instanceStatusFilter"].writeList(value.instanceStatusFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeDeployClientTypes.InstanceStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["instanceTypeFilter"].writeList(value.instanceTypeFilter, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeDeployClientTypes.InstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDeploymentsInput {

    static func write(value: ListDeploymentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["createTimeRange"].write(value.createTimeRange, with: CodeDeployClientTypes.TimeRange.write(value:to:))
        try writer["deploymentGroupName"].write(value.deploymentGroupName)
        try writer["externalId"].write(value.externalId)
        try writer["includeOnlyStatuses"].writeList(value.includeOnlyStatuses, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeDeployClientTypes.DeploymentStatus>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListDeploymentTargetsInput {

    static func write(value: ListDeploymentTargetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["nextToken"].write(value.nextToken)
        try writer["targetFilters"].writeMap(value.targetFilters, valueWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension ListGitHubAccountTokenNamesInput {

    static func write(value: ListGitHubAccountTokenNamesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListOnPremisesInstancesInput {

    static func write(value: ListOnPremisesInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["nextToken"].write(value.nextToken)
        try writer["registrationStatus"].write(value.registrationStatus)
        try writer["tagFilters"].writeList(value.tagFilters, memberWritingClosure: CodeDeployClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension PutLifecycleEventHookExecutionStatusInput {

    static func write(value: PutLifecycleEventHookExecutionStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
        try writer["lifecycleEventHookExecutionId"].write(value.lifecycleEventHookExecutionId)
        try writer["status"].write(value.status)
    }
}

extension RegisterApplicationRevisionInput {

    static func write(value: RegisterApplicationRevisionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["description"].write(value.description)
        try writer["revision"].write(value.revision, with: CodeDeployClientTypes.RevisionLocation.write(value:to:))
    }
}

extension RegisterOnPremisesInstanceInput {

    static func write(value: RegisterOnPremisesInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["iamSessionArn"].write(value.iamSessionArn)
        try writer["iamUserArn"].write(value.iamUserArn)
        try writer["instanceName"].write(value.instanceName)
    }
}

extension RemoveTagsFromOnPremisesInstancesInput {

    static func write(value: RemoveTagsFromOnPremisesInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["instanceNames"].writeList(value.instanceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeList(value.tags, memberWritingClosure: CodeDeployClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SkipWaitTimeForInstanceTerminationInput {

    static func write(value: SkipWaitTimeForInstanceTerminationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentId"].write(value.deploymentId)
    }
}

extension StopDeploymentInput {

    static func write(value: StopDeploymentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoRollbackEnabled"].write(value.autoRollbackEnabled)
        try writer["deploymentId"].write(value.deploymentId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: CodeDeployClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateApplicationInput {

    static func write(value: UpdateApplicationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationName"].write(value.applicationName)
        try writer["newApplicationName"].write(value.newApplicationName)
    }
}

extension UpdateDeploymentGroupInput {

    static func write(value: UpdateDeploymentGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarmConfiguration"].write(value.alarmConfiguration, with: CodeDeployClientTypes.AlarmConfiguration.write(value:to:))
        try writer["applicationName"].write(value.applicationName)
        try writer["autoRollbackConfiguration"].write(value.autoRollbackConfiguration, with: CodeDeployClientTypes.AutoRollbackConfiguration.write(value:to:))
        try writer["autoScalingGroups"].writeList(value.autoScalingGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["blueGreenDeploymentConfiguration"].write(value.blueGreenDeploymentConfiguration, with: CodeDeployClientTypes.BlueGreenDeploymentConfiguration.write(value:to:))
        try writer["currentDeploymentGroupName"].write(value.currentDeploymentGroupName)
        try writer["deploymentConfigName"].write(value.deploymentConfigName)
        try writer["deploymentStyle"].write(value.deploymentStyle, with: CodeDeployClientTypes.DeploymentStyle.write(value:to:))
        try writer["ec2TagFilters"].writeList(value.ec2TagFilters, memberWritingClosure: CodeDeployClientTypes.EC2TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ec2TagSet"].write(value.ec2TagSet, with: CodeDeployClientTypes.EC2TagSet.write(value:to:))
        try writer["ecsServices"].writeList(value.ecsServices, memberWritingClosure: CodeDeployClientTypes.ECSService.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["loadBalancerInfo"].write(value.loadBalancerInfo, with: CodeDeployClientTypes.LoadBalancerInfo.write(value:to:))
        try writer["newDeploymentGroupName"].write(value.newDeploymentGroupName)
        try writer["onPremisesInstanceTagFilters"].writeList(value.onPremisesInstanceTagFilters, memberWritingClosure: CodeDeployClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["onPremisesTagSet"].write(value.onPremisesTagSet, with: CodeDeployClientTypes.OnPremisesTagSet.write(value:to:))
        try writer["outdatedInstancesStrategy"].write(value.outdatedInstancesStrategy)
        try writer["serviceRoleArn"].write(value.serviceRoleArn)
        try writer["terminationHookEnabled"].write(value.terminationHookEnabled)
        try writer["triggerConfigurations"].writeList(value.triggerConfigurations, memberWritingClosure: CodeDeployClientTypes.TriggerConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AddTagsToOnPremisesInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsToOnPremisesInstancesOutput {
        return AddTagsToOnPremisesInstancesOutput()
    }
}

extension BatchGetApplicationRevisionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetApplicationRevisionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetApplicationRevisionsOutput()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.revisions = try reader["revisions"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.RevisionInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetApplicationsOutput()
        value.applicationsInfo = try reader["applicationsInfo"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.ApplicationInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetDeploymentGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetDeploymentGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetDeploymentGroupsOutput()
        value.deploymentGroupsInfo = try reader["deploymentGroupsInfo"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.DeploymentGroupInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        return value
    }
}

extension BatchGetDeploymentInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetDeploymentInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetDeploymentInstancesOutput()
        value.errorMessage = try reader["errorMessage"].readIfPresent()
        value.instancesSummary = try reader["instancesSummary"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.InstanceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetDeploymentsOutput()
        value.deploymentsInfo = try reader["deploymentsInfo"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.DeploymentInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetDeploymentTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetDeploymentTargetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetDeploymentTargetsOutput()
        value.deploymentTargets = try reader["deploymentTargets"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.DeploymentTarget.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchGetOnPremisesInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchGetOnPremisesInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchGetOnPremisesInstancesOutput()
        value.instanceInfos = try reader["instanceInfos"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.InstanceInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ContinueDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ContinueDeploymentOutput {
        return ContinueDeploymentOutput()
    }
}

extension CreateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateApplicationOutput()
        value.applicationId = try reader["applicationId"].readIfPresent()
        return value
    }
}

extension CreateDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeploymentOutput()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        return value
    }
}

extension CreateDeploymentConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeploymentConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeploymentConfigOutput()
        value.deploymentConfigId = try reader["deploymentConfigId"].readIfPresent()
        return value
    }
}

extension CreateDeploymentGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeploymentGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeploymentGroupOutput()
        value.deploymentGroupId = try reader["deploymentGroupId"].readIfPresent()
        return value
    }
}

extension DeleteApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteApplicationOutput {
        return DeleteApplicationOutput()
    }
}

extension DeleteDeploymentConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeploymentConfigOutput {
        return DeleteDeploymentConfigOutput()
    }
}

extension DeleteDeploymentGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeploymentGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDeploymentGroupOutput()
        value.hooksNotCleanedUp = try reader["hooksNotCleanedUp"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.AutoScalingGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DeleteGitHubAccountTokenOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteGitHubAccountTokenOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteGitHubAccountTokenOutput()
        value.tokenName = try reader["tokenName"].readIfPresent()
        return value
    }
}

extension DeleteResourcesByExternalIdOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcesByExternalIdOutput {
        return DeleteResourcesByExternalIdOutput()
    }
}

extension DeregisterOnPremisesInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterOnPremisesInstanceOutput {
        return DeregisterOnPremisesInstanceOutput()
    }
}

extension GetApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetApplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetApplicationOutput()
        value.application = try reader["application"].readIfPresent(with: CodeDeployClientTypes.ApplicationInfo.read(from:))
        return value
    }
}

extension GetApplicationRevisionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetApplicationRevisionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetApplicationRevisionOutput()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.revision = try reader["revision"].readIfPresent(with: CodeDeployClientTypes.RevisionLocation.read(from:))
        value.revisionInfo = try reader["revisionInfo"].readIfPresent(with: CodeDeployClientTypes.GenericRevisionInfo.read(from:))
        return value
    }
}

extension GetDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentOutput()
        value.deploymentInfo = try reader["deploymentInfo"].readIfPresent(with: CodeDeployClientTypes.DeploymentInfo.read(from:))
        return value
    }
}

extension GetDeploymentConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentConfigOutput()
        value.deploymentConfigInfo = try reader["deploymentConfigInfo"].readIfPresent(with: CodeDeployClientTypes.DeploymentConfigInfo.read(from:))
        return value
    }
}

extension GetDeploymentGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentGroupOutput()
        value.deploymentGroupInfo = try reader["deploymentGroupInfo"].readIfPresent(with: CodeDeployClientTypes.DeploymentGroupInfo.read(from:))
        return value
    }
}

extension GetDeploymentInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentInstanceOutput()
        value.instanceSummary = try reader["instanceSummary"].readIfPresent(with: CodeDeployClientTypes.InstanceSummary.read(from:))
        return value
    }
}

extension GetDeploymentTargetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeploymentTargetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeploymentTargetOutput()
        value.deploymentTarget = try reader["deploymentTarget"].readIfPresent(with: CodeDeployClientTypes.DeploymentTarget.read(from:))
        return value
    }
}

extension GetOnPremisesInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetOnPremisesInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetOnPremisesInstanceOutput()
        value.instanceInfo = try reader["instanceInfo"].readIfPresent(with: CodeDeployClientTypes.InstanceInfo.read(from:))
        return value
    }
}

extension ListApplicationRevisionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationRevisionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationRevisionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.revisions = try reader["revisions"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.RevisionLocation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListApplicationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListApplicationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListApplicationsOutput()
        value.applications = try reader["applications"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentConfigsOutput()
        value.deploymentConfigsList = try reader["deploymentConfigsList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentGroupsOutput()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.deploymentGroups = try reader["deploymentGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentInstancesOutput()
        value.instancesList = try reader["instancesList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentsOutput()
        value.deployments = try reader["deployments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListDeploymentTargetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeploymentTargetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeploymentTargetsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.targetIds = try reader["targetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListGitHubAccountTokenNamesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListGitHubAccountTokenNamesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListGitHubAccountTokenNamesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.tokenNameList = try reader["tokenNameList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListOnPremisesInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOnPremisesInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOnPremisesInstancesOutput()
        value.instanceNames = try reader["instanceNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutLifecycleEventHookExecutionStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLifecycleEventHookExecutionStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutLifecycleEventHookExecutionStatusOutput()
        value.lifecycleEventHookExecutionId = try reader["lifecycleEventHookExecutionId"].readIfPresent()
        return value
    }
}

extension RegisterApplicationRevisionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterApplicationRevisionOutput {
        return RegisterApplicationRevisionOutput()
    }
}

extension RegisterOnPremisesInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterOnPremisesInstanceOutput {
        return RegisterOnPremisesInstanceOutput()
    }
}

extension RemoveTagsFromOnPremisesInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RemoveTagsFromOnPremisesInstancesOutput {
        return RemoveTagsFromOnPremisesInstancesOutput()
    }
}

extension SkipWaitTimeForInstanceTerminationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SkipWaitTimeForInstanceTerminationOutput {
        return SkipWaitTimeForInstanceTerminationOutput()
    }
}

extension StopDeploymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDeploymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopDeploymentOutput()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateApplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateApplicationOutput {
        return UpdateApplicationOutput()
    }
}

extension UpdateDeploymentGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDeploymentGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDeploymentGroupOutput()
        value.hooksNotCleanedUp = try reader["hooksNotCleanedUp"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.AutoScalingGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

enum AddTagsToOnPremisesInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InstanceLimitExceededException": return try InstanceLimitExceededException.makeError(baseError: baseError)
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InstanceNotRegisteredException": return try InstanceNotRegisteredException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "TagLimitExceededException": return try TagLimitExceededException.makeError(baseError: baseError)
            case "TagRequiredException": return try TagRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetApplicationRevisionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidRevisionException": return try InvalidRevisionException.makeError(baseError: baseError)
            case "RevisionRequiredException": return try RevisionRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetDeploymentGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetDeploymentInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InstanceIdRequiredException": return try InstanceIdRequiredException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetDeploymentTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentNotStartedException": return try DeploymentNotStartedException.makeError(baseError: baseError)
            case "DeploymentTargetDoesNotExistException": return try DeploymentTargetDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentTargetIdRequiredException": return try DeploymentTargetIdRequiredException.makeError(baseError: baseError)
            case "DeploymentTargetListSizeExceededException": return try DeploymentTargetListSizeExceededException.makeError(baseError: baseError)
            case "InstanceDoesNotExistException": return try InstanceDoesNotExistException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidDeploymentTargetIdException": return try InvalidDeploymentTargetIdException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchGetOnPremisesInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchLimitExceededException": return try BatchLimitExceededException.makeError(baseError: baseError)
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ContinueDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentAlreadyCompletedException": return try DeploymentAlreadyCompletedException.makeError(baseError: baseError)
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentIsNotInReadyStateException": return try DeploymentIsNotInReadyStateException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidDeploymentStatusException": return try InvalidDeploymentStatusException.makeError(baseError: baseError)
            case "InvalidDeploymentWaitTypeException": return try InvalidDeploymentWaitTypeException.makeError(baseError: baseError)
            case "UnsupportedActionForDeploymentTypeException": return try UnsupportedActionForDeploymentTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationAlreadyExistsException": return try ApplicationAlreadyExistsException.makeError(baseError: baseError)
            case "ApplicationLimitExceededException": return try ApplicationLimitExceededException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidTagsToAddException": return try InvalidTagsToAddException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlarmsLimitExceededException": return try AlarmsLimitExceededException.makeError(baseError: baseError)
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "DeploymentLimitExceededException": return try DeploymentLimitExceededException.makeError(baseError: baseError)
            case "DescriptionTooLongException": return try DescriptionTooLongException.makeError(baseError: baseError)
            case "InvalidAlarmConfigException": return try InvalidAlarmConfigException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidAutoRollbackConfigException": return try InvalidAutoRollbackConfigException.makeError(baseError: baseError)
            case "InvalidAutoScalingGroupException": return try InvalidAutoScalingGroupException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            case "InvalidFileExistsBehaviorException": return try InvalidFileExistsBehaviorException.makeError(baseError: baseError)
            case "InvalidGitHubAccountTokenException": return try InvalidGitHubAccountTokenException.makeError(baseError: baseError)
            case "InvalidIgnoreApplicationStopFailuresValueException": return try InvalidIgnoreApplicationStopFailuresValueException.makeError(baseError: baseError)
            case "InvalidLoadBalancerInfoException": return try InvalidLoadBalancerInfoException.makeError(baseError: baseError)
            case "InvalidRevisionException": return try InvalidRevisionException.makeError(baseError: baseError)
            case "InvalidRoleException": return try InvalidRoleException.makeError(baseError: baseError)
            case "InvalidTargetInstancesException": return try InvalidTargetInstancesException.makeError(baseError: baseError)
            case "InvalidTrafficRoutingConfigurationException": return try InvalidTrafficRoutingConfigurationException.makeError(baseError: baseError)
            case "InvalidUpdateOutdatedInstancesOnlyValueException": return try InvalidUpdateOutdatedInstancesOnlyValueException.makeError(baseError: baseError)
            case "RevisionDoesNotExistException": return try RevisionDoesNotExistException.makeError(baseError: baseError)
            case "RevisionRequiredException": return try RevisionRequiredException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeploymentConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentConfigAlreadyExistsException": return try DeploymentConfigAlreadyExistsException.makeError(baseError: baseError)
            case "DeploymentConfigLimitExceededException": return try DeploymentConfigLimitExceededException.makeError(baseError: baseError)
            case "DeploymentConfigNameRequiredException": return try DeploymentConfigNameRequiredException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            case "InvalidMinimumHealthyHostValueException": return try InvalidMinimumHealthyHostValueException.makeError(baseError: baseError)
            case "InvalidTrafficRoutingConfigurationException": return try InvalidTrafficRoutingConfigurationException.makeError(baseError: baseError)
            case "InvalidZonalDeploymentConfigurationException": return try InvalidZonalDeploymentConfigurationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeploymentGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlarmsLimitExceededException": return try AlarmsLimitExceededException.makeError(baseError: baseError)
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupAlreadyExistsException": return try DeploymentGroupAlreadyExistsException.makeError(baseError: baseError)
            case "DeploymentGroupLimitExceededException": return try DeploymentGroupLimitExceededException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "ECSServiceMappingLimitExceededException": return try ECSServiceMappingLimitExceededException.makeError(baseError: baseError)
            case "InvalidAlarmConfigException": return try InvalidAlarmConfigException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidAutoRollbackConfigException": return try InvalidAutoRollbackConfigException.makeError(baseError: baseError)
            case "InvalidAutoScalingGroupException": return try InvalidAutoScalingGroupException.makeError(baseError: baseError)
            case "InvalidBlueGreenDeploymentConfigurationException": return try InvalidBlueGreenDeploymentConfigurationException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            case "InvalidDeploymentStyleException": return try InvalidDeploymentStyleException.makeError(baseError: baseError)
            case "InvalidEC2TagCombinationException": return try InvalidEC2TagCombinationException.makeError(baseError: baseError)
            case "InvalidEC2TagException": return try InvalidEC2TagException.makeError(baseError: baseError)
            case "InvalidECSServiceException": return try InvalidECSServiceException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "InvalidLoadBalancerInfoException": return try InvalidLoadBalancerInfoException.makeError(baseError: baseError)
            case "InvalidOnPremisesTagCombinationException": return try InvalidOnPremisesTagCombinationException.makeError(baseError: baseError)
            case "InvalidRoleException": return try InvalidRoleException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "InvalidTagsToAddException": return try InvalidTagsToAddException.makeError(baseError: baseError)
            case "InvalidTargetGroupPairException": return try InvalidTargetGroupPairException.makeError(baseError: baseError)
            case "InvalidTrafficRoutingConfigurationException": return try InvalidTrafficRoutingConfigurationException.makeError(baseError: baseError)
            case "InvalidTriggerConfigException": return try InvalidTriggerConfigException.makeError(baseError: baseError)
            case "LifecycleHookLimitExceededException": return try LifecycleHookLimitExceededException.makeError(baseError: baseError)
            case "RoleRequiredException": return try RoleRequiredException.makeError(baseError: baseError)
            case "TagSetListLimitExceededException": return try TagSetListLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TriggerTargetsLimitExceededException": return try TriggerTargetsLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidRoleException": return try InvalidRoleException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeploymentConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentConfigInUseException": return try DeploymentConfigInUseException.makeError(baseError: baseError)
            case "DeploymentConfigNameRequiredException": return try DeploymentConfigNameRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeploymentGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            case "InvalidRoleException": return try InvalidRoleException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteGitHubAccountTokenOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "GitHubAccountTokenDoesNotExistException": return try GitHubAccountTokenDoesNotExistException.makeError(baseError: baseError)
            case "GitHubAccountTokenNameRequiredException": return try GitHubAccountTokenNameRequiredException.makeError(baseError: baseError)
            case "InvalidGitHubAccountTokenNameException": return try InvalidGitHubAccountTokenNameException.makeError(baseError: baseError)
            case "OperationNotSupportedException": return try OperationNotSupportedException.makeError(baseError: baseError)
            case "ResourceValidationException": return try ResourceValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcesByExternalIdOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterOnPremisesInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetApplicationRevisionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidRevisionException": return try InvalidRevisionException.makeError(baseError: baseError)
            case "RevisionDoesNotExistException": return try RevisionDoesNotExistException.makeError(baseError: baseError)
            case "RevisionRequiredException": return try RevisionRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentConfigNameRequiredException": return try DeploymentConfigNameRequiredException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InstanceDoesNotExistException": return try InstanceDoesNotExistException.makeError(baseError: baseError)
            case "InstanceIdRequiredException": return try InstanceIdRequiredException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeploymentTargetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentNotStartedException": return try DeploymentNotStartedException.makeError(baseError: baseError)
            case "DeploymentTargetDoesNotExistException": return try DeploymentTargetDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentTargetIdRequiredException": return try DeploymentTargetIdRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidDeploymentTargetIdException": return try InvalidDeploymentTargetIdException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetOnPremisesInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InstanceNotRegisteredException": return try InstanceNotRegisteredException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationRevisionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "BucketNameFilterRequiredException": return try BucketNameFilterRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidBucketNameFilterException": return try InvalidBucketNameFilterException.makeError(baseError: baseError)
            case "InvalidDeployedStateFilterException": return try InvalidDeployedStateFilterException.makeError(baseError: baseError)
            case "InvalidKeyPrefixFilterException": return try InvalidKeyPrefixFilterException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidSortByException": return try InvalidSortByException.makeError(baseError: baseError)
            case "InvalidSortOrderException": return try InvalidSortOrderException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListApplicationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentNotStartedException": return try DeploymentNotStartedException.makeError(baseError: baseError)
            case "InvalidComputePlatformException": return try InvalidComputePlatformException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidDeploymentInstanceTypeException": return try InvalidDeploymentInstanceTypeException.makeError(baseError: baseError)
            case "InvalidInstanceStatusException": return try InvalidInstanceStatusException.makeError(baseError: baseError)
            case "InvalidInstanceTypeException": return try InvalidInstanceTypeException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidTargetFilterNameException": return try InvalidTargetFilterNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            case "InvalidDeploymentStatusException": return try InvalidDeploymentStatusException.makeError(baseError: baseError)
            case "InvalidExternalIdException": return try InvalidExternalIdException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidTimeRangeException": return try InvalidTimeRangeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeploymentTargetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentNotStartedException": return try DeploymentNotStartedException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidDeploymentInstanceTypeException": return try InvalidDeploymentInstanceTypeException.makeError(baseError: baseError)
            case "InvalidInstanceStatusException": return try InvalidInstanceStatusException.makeError(baseError: baseError)
            case "InvalidInstanceTypeException": return try InvalidInstanceTypeException.makeError(baseError: baseError)
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidTargetFilterNameException": return try InvalidTargetFilterNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListGitHubAccountTokenNamesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "OperationNotSupportedException": return try OperationNotSupportedException.makeError(baseError: baseError)
            case "ResourceValidationException": return try ResourceValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOnPremisesInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextTokenException": return try InvalidNextTokenException.makeError(baseError: baseError)
            case "InvalidRegistrationStatusException": return try InvalidRegistrationStatusException.makeError(baseError: baseError)
            case "InvalidTagFilterException": return try InvalidTagFilterException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ArnNotSupportedException": return try ArnNotSupportedException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "ResourceArnRequiredException": return try ResourceArnRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLifecycleEventHookExecutionStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "InvalidLifecycleEventHookExecutionIdException": return try InvalidLifecycleEventHookExecutionIdException.makeError(baseError: baseError)
            case "InvalidLifecycleEventHookExecutionStatusException": return try InvalidLifecycleEventHookExecutionStatusException.makeError(baseError: baseError)
            case "LifecycleEventAlreadyCompletedException": return try LifecycleEventAlreadyCompletedException.makeError(baseError: baseError)
            case "UnsupportedActionForDeploymentTypeException": return try UnsupportedActionForDeploymentTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterApplicationRevisionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DescriptionTooLongException": return try DescriptionTooLongException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidRevisionException": return try InvalidRevisionException.makeError(baseError: baseError)
            case "RevisionRequiredException": return try RevisionRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterOnPremisesInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IamArnRequiredException": return try IamArnRequiredException.makeError(baseError: baseError)
            case "IamSessionArnAlreadyRegisteredException": return try IamSessionArnAlreadyRegisteredException.makeError(baseError: baseError)
            case "IamUserArnAlreadyRegisteredException": return try IamUserArnAlreadyRegisteredException.makeError(baseError: baseError)
            case "IamUserArnRequiredException": return try IamUserArnRequiredException.makeError(baseError: baseError)
            case "InstanceNameAlreadyRegisteredException": return try InstanceNameAlreadyRegisteredException.makeError(baseError: baseError)
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InvalidIamSessionArnException": return try InvalidIamSessionArnException.makeError(baseError: baseError)
            case "InvalidIamUserArnException": return try InvalidIamUserArnException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            case "MultipleIamArnsProvidedException": return try MultipleIamArnsProvidedException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RemoveTagsFromOnPremisesInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InstanceLimitExceededException": return try InstanceLimitExceededException.makeError(baseError: baseError)
            case "InstanceNameRequiredException": return try InstanceNameRequiredException.makeError(baseError: baseError)
            case "InstanceNotRegisteredException": return try InstanceNotRegisteredException.makeError(baseError: baseError)
            case "InvalidInstanceNameException": return try InvalidInstanceNameException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "TagLimitExceededException": return try TagLimitExceededException.makeError(baseError: baseError)
            case "TagRequiredException": return try TagRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SkipWaitTimeForInstanceTerminationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentAlreadyCompletedException": return try DeploymentAlreadyCompletedException.makeError(baseError: baseError)
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "DeploymentNotStartedException": return try DeploymentNotStartedException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "UnsupportedActionForDeploymentTypeException": return try UnsupportedActionForDeploymentTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDeploymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DeploymentAlreadyCompletedException": return try DeploymentAlreadyCompletedException.makeError(baseError: baseError)
            case "DeploymentDoesNotExistException": return try DeploymentDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentIdRequiredException": return try DeploymentIdRequiredException.makeError(baseError: baseError)
            case "InvalidDeploymentIdException": return try InvalidDeploymentIdException.makeError(baseError: baseError)
            case "UnsupportedActionForDeploymentTypeException": return try UnsupportedActionForDeploymentTypeException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ArnNotSupportedException": return try ArnNotSupportedException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidTagsToAddException": return try InvalidTagsToAddException.makeError(baseError: baseError)
            case "ResourceArnRequiredException": return try ResourceArnRequiredException.makeError(baseError: baseError)
            case "TagRequiredException": return try TagRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ArnNotSupportedException": return try ArnNotSupportedException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "InvalidArnException": return try InvalidArnException.makeError(baseError: baseError)
            case "InvalidTagsToAddException": return try InvalidTagsToAddException.makeError(baseError: baseError)
            case "ResourceArnRequiredException": return try ResourceArnRequiredException.makeError(baseError: baseError)
            case "TagRequiredException": return try TagRequiredException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateApplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ApplicationAlreadyExistsException": return try ApplicationAlreadyExistsException.makeError(baseError: baseError)
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDeploymentGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlarmsLimitExceededException": return try AlarmsLimitExceededException.makeError(baseError: baseError)
            case "ApplicationDoesNotExistException": return try ApplicationDoesNotExistException.makeError(baseError: baseError)
            case "ApplicationNameRequiredException": return try ApplicationNameRequiredException.makeError(baseError: baseError)
            case "DeploymentConfigDoesNotExistException": return try DeploymentConfigDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupAlreadyExistsException": return try DeploymentGroupAlreadyExistsException.makeError(baseError: baseError)
            case "DeploymentGroupDoesNotExistException": return try DeploymentGroupDoesNotExistException.makeError(baseError: baseError)
            case "DeploymentGroupNameRequiredException": return try DeploymentGroupNameRequiredException.makeError(baseError: baseError)
            case "ECSServiceMappingLimitExceededException": return try ECSServiceMappingLimitExceededException.makeError(baseError: baseError)
            case "InvalidAlarmConfigException": return try InvalidAlarmConfigException.makeError(baseError: baseError)
            case "InvalidApplicationNameException": return try InvalidApplicationNameException.makeError(baseError: baseError)
            case "InvalidAutoRollbackConfigException": return try InvalidAutoRollbackConfigException.makeError(baseError: baseError)
            case "InvalidAutoScalingGroupException": return try InvalidAutoScalingGroupException.makeError(baseError: baseError)
            case "InvalidBlueGreenDeploymentConfigurationException": return try InvalidBlueGreenDeploymentConfigurationException.makeError(baseError: baseError)
            case "InvalidDeploymentConfigNameException": return try InvalidDeploymentConfigNameException.makeError(baseError: baseError)
            case "InvalidDeploymentGroupNameException": return try InvalidDeploymentGroupNameException.makeError(baseError: baseError)
            case "InvalidDeploymentStyleException": return try InvalidDeploymentStyleException.makeError(baseError: baseError)
            case "InvalidEC2TagCombinationException": return try InvalidEC2TagCombinationException.makeError(baseError: baseError)
            case "InvalidEC2TagException": return try InvalidEC2TagException.makeError(baseError: baseError)
            case "InvalidECSServiceException": return try InvalidECSServiceException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "InvalidLoadBalancerInfoException": return try InvalidLoadBalancerInfoException.makeError(baseError: baseError)
            case "InvalidOnPremisesTagCombinationException": return try InvalidOnPremisesTagCombinationException.makeError(baseError: baseError)
            case "InvalidRoleException": return try InvalidRoleException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "InvalidTargetGroupPairException": return try InvalidTargetGroupPairException.makeError(baseError: baseError)
            case "InvalidTrafficRoutingConfigurationException": return try InvalidTrafficRoutingConfigurationException.makeError(baseError: baseError)
            case "InvalidTriggerConfigException": return try InvalidTriggerConfigException.makeError(baseError: baseError)
            case "LifecycleHookLimitExceededException": return try LifecycleHookLimitExceededException.makeError(baseError: baseError)
            case "TagSetListLimitExceededException": return try TagSetListLimitExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "TriggerTargetsLimitExceededException": return try TriggerTargetsLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension TagLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TagLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceNameRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceNameRequiredException {
        let reader = baseError.errorBodyReader
        var value = InstanceNameRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = InstanceLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagRequiredException {
        let reader = baseError.errorBodyReader
        var value = TagRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInstanceNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInstanceNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidInstanceNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceNotRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceNotRegisteredException {
        let reader = baseError.errorBodyReader
        var value = InstanceNotRegisteredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BatchLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = BatchLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApplicationNameRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ApplicationNameRequiredException {
        let reader = baseError.errorBodyReader
        var value = ApplicationNameRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidApplicationNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidApplicationNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidApplicationNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RevisionRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RevisionRequiredException {
        let reader = baseError.errorBodyReader
        var value = RevisionRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRevisionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRevisionException {
        let reader = baseError.errorBodyReader
        var value = InvalidRevisionException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApplicationDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ApplicationDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = ApplicationDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentGroupNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentGroupNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentGroupNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentGroupNameRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentGroupNameRequiredException {
        let reader = baseError.errorBodyReader
        var value = DeploymentGroupNameRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentConfigDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentConfigDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = DeploymentConfigDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceIdRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceIdRequiredException {
        let reader = baseError.errorBodyReader
        var value = InstanceIdRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidComputePlatformException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidComputePlatformException {
        let reader = baseError.errorBodyReader
        var value = InvalidComputePlatformException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentIdException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = DeploymentDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentIdRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentIdRequiredException {
        let reader = baseError.errorBodyReader
        var value = DeploymentIdRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentTargetIdRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentTargetIdRequiredException {
        let reader = baseError.errorBodyReader
        var value = DeploymentTargetIdRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentNotStartedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentNotStartedException {
        let reader = baseError.errorBodyReader
        var value = DeploymentNotStartedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = InstanceDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentTargetIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentTargetIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentTargetIdException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentTargetDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentTargetDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = DeploymentTargetDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentTargetListSizeExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentTargetListSizeExceededException {
        let reader = baseError.errorBodyReader
        var value = DeploymentTargetListSizeExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentAlreadyCompletedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentAlreadyCompletedException {
        let reader = baseError.errorBodyReader
        var value = DeploymentAlreadyCompletedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentIsNotInReadyStateException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentIsNotInReadyStateException {
        let reader = baseError.errorBodyReader
        var value = DeploymentIsNotInReadyStateException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentWaitTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentWaitTypeException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentWaitTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedActionForDeploymentTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedActionForDeploymentTypeException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedActionForDeploymentTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentStatusException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApplicationAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ApplicationAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ApplicationAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ApplicationLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ApplicationLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ApplicationLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagsToAddException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagsToAddException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagsToAddException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentConfigNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentConfigNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentConfigNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAutoScalingGroupException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAutoScalingGroupException {
        let reader = baseError.errorBodyReader
        var value = InvalidAutoScalingGroupException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTrafficRoutingConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTrafficRoutingConfigurationException {
        let reader = baseError.errorBodyReader
        var value = InvalidTrafficRoutingConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAlarmConfigException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAlarmConfigException {
        let reader = baseError.errorBodyReader
        var value = InvalidAlarmConfigException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlarmsLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AlarmsLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = AlarmsLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidIgnoreApplicationStopFailuresValueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidIgnoreApplicationStopFailuresValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidIgnoreApplicationStopFailuresValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRoleException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRoleException {
        let reader = baseError.errorBodyReader
        var value = InvalidRoleException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentGroupDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentGroupDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = DeploymentGroupDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidFileExistsBehaviorException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidFileExistsBehaviorException {
        let reader = baseError.errorBodyReader
        var value = InvalidFileExistsBehaviorException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidAutoRollbackConfigException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidAutoRollbackConfigException {
        let reader = baseError.errorBodyReader
        var value = InvalidAutoRollbackConfigException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTargetInstancesException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTargetInstancesException {
        let reader = baseError.errorBodyReader
        var value = InvalidTargetInstancesException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = DeploymentLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidUpdateOutdatedInstancesOnlyValueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidUpdateOutdatedInstancesOnlyValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidUpdateOutdatedInstancesOnlyValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidLoadBalancerInfoException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidLoadBalancerInfoException {
        let reader = baseError.errorBodyReader
        var value = InvalidLoadBalancerInfoException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DescriptionTooLongException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DescriptionTooLongException {
        let reader = baseError.errorBodyReader
        var value = DescriptionTooLongException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGitHubAccountTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidGitHubAccountTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidGitHubAccountTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RevisionDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RevisionDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = RevisionDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidZonalDeploymentConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidZonalDeploymentConfigurationException {
        let reader = baseError.errorBodyReader
        var value = InvalidZonalDeploymentConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentConfigNameRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentConfigNameRequiredException {
        let reader = baseError.errorBodyReader
        var value = DeploymentConfigNameRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentConfigAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentConfigAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = DeploymentConfigAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentConfigLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentConfigLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = DeploymentConfigLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidMinimumHealthyHostValueException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidMinimumHealthyHostValueException {
        let reader = baseError.errorBodyReader
        var value = InvalidMinimumHealthyHostValueException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentStyleException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentStyleException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentStyleException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidECSServiceException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidECSServiceException {
        let reader = baseError.errorBodyReader
        var value = InvalidECSServiceException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentGroupAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentGroupAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = DeploymentGroupAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEC2TagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEC2TagException {
        let reader = baseError.errorBodyReader
        var value = InvalidEC2TagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTargetGroupPairException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTargetGroupPairException {
        let reader = baseError.errorBodyReader
        var value = InvalidTargetGroupPairException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentGroupLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentGroupLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = DeploymentGroupLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TriggerTargetsLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TriggerTargetsLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TriggerTargetsLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension RoleRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> RoleRequiredException {
        let reader = baseError.errorBodyReader
        var value = RoleRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEC2TagCombinationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEC2TagCombinationException {
        let reader = baseError.errorBodyReader
        var value = InvalidEC2TagCombinationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTriggerConfigException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTriggerConfigException {
        let reader = baseError.errorBodyReader
        var value = InvalidTriggerConfigException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ECSServiceMappingLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ECSServiceMappingLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ECSServiceMappingLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidBlueGreenDeploymentConfigurationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidBlueGreenDeploymentConfigurationException {
        let reader = baseError.errorBodyReader
        var value = InvalidBlueGreenDeploymentConfigurationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidOnPremisesTagCombinationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidOnPremisesTagCombinationException {
        let reader = baseError.errorBodyReader
        var value = InvalidOnPremisesTagCombinationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagSetListLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagSetListLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TagSetListLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LifecycleHookLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LifecycleHookLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LifecycleHookLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DeploymentConfigInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DeploymentConfigInUseException {
        let reader = baseError.errorBodyReader
        var value = DeploymentConfigInUseException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidOperationException {
        let reader = baseError.errorBodyReader
        var value = InvalidOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GitHubAccountTokenNameRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GitHubAccountTokenNameRequiredException {
        let reader = baseError.errorBodyReader
        var value = GitHubAccountTokenNameRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidGitHubAccountTokenNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidGitHubAccountTokenNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidGitHubAccountTokenNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension GitHubAccountTokenDoesNotExistException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> GitHubAccountTokenDoesNotExistException {
        let reader = baseError.errorBodyReader
        var value = GitHubAccountTokenDoesNotExistException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OperationNotSupportedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OperationNotSupportedException {
        let reader = baseError.errorBodyReader
        var value = OperationNotSupportedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceValidationException {
        let reader = baseError.errorBodyReader
        var value = ResourceValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidKeyPrefixFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidKeyPrefixFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidKeyPrefixFilterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BucketNameFilterRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BucketNameFilterRequiredException {
        let reader = baseError.errorBodyReader
        var value = BucketNameFilterRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidNextTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidNextTokenException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidBucketNameFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidBucketNameFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidBucketNameFilterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSortByException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSortByException {
        let reader = baseError.errorBodyReader
        var value = InvalidSortByException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSortOrderException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSortOrderException {
        let reader = baseError.errorBodyReader
        var value = InvalidSortOrderException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeployedStateFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeployedStateFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeployedStateFilterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTargetFilterNameException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTargetFilterNameException {
        let reader = baseError.errorBodyReader
        var value = InvalidTargetFilterNameException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidDeploymentInstanceTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidDeploymentInstanceTypeException {
        let reader = baseError.errorBodyReader
        var value = InvalidDeploymentInstanceTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInstanceTypeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInstanceTypeException {
        let reader = baseError.errorBodyReader
        var value = InvalidInstanceTypeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInstanceStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInstanceStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidInstanceStatusException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTimeRangeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTimeRangeException {
        let reader = baseError.errorBodyReader
        var value = InvalidTimeRangeException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidExternalIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidExternalIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidExternalIdException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRegistrationStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRegistrationStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidRegistrationStatusException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagFilterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ArnNotSupportedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ArnNotSupportedException {
        let reader = baseError.errorBodyReader
        var value = ArnNotSupportedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceArnRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceArnRequiredException {
        let reader = baseError.errorBodyReader
        var value = ResourceArnRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidLifecycleEventHookExecutionStatusException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidLifecycleEventHookExecutionStatusException {
        let reader = baseError.errorBodyReader
        var value = InvalidLifecycleEventHookExecutionStatusException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidLifecycleEventHookExecutionIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidLifecycleEventHookExecutionIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidLifecycleEventHookExecutionIdException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LifecycleEventAlreadyCompletedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LifecycleEventAlreadyCompletedException {
        let reader = baseError.errorBodyReader
        var value = LifecycleEventAlreadyCompletedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidIamUserArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidIamUserArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidIamUserArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IamSessionArnAlreadyRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IamSessionArnAlreadyRegisteredException {
        let reader = baseError.errorBodyReader
        var value = IamSessionArnAlreadyRegisteredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IamUserArnRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IamUserArnRequiredException {
        let reader = baseError.errorBodyReader
        var value = IamUserArnRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MultipleIamArnsProvidedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MultipleIamArnsProvidedException {
        let reader = baseError.errorBodyReader
        var value = MultipleIamArnsProvidedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceNameAlreadyRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InstanceNameAlreadyRegisteredException {
        let reader = baseError.errorBodyReader
        var value = InstanceNameAlreadyRegisteredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IamUserArnAlreadyRegisteredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IamUserArnAlreadyRegisteredException {
        let reader = baseError.errorBodyReader
        var value = IamUserArnAlreadyRegisteredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidIamSessionArnException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidIamSessionArnException {
        let reader = baseError.errorBodyReader
        var value = InvalidIamSessionArnException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IamArnRequiredException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IamArnRequiredException {
        let reader = baseError.errorBodyReader
        var value = IamArnRequiredException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CodeDeployClientTypes.RevisionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.RevisionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.RevisionInfo()
        value.revisionLocation = try reader["revisionLocation"].readIfPresent(with: CodeDeployClientTypes.RevisionLocation.read(from:))
        value.genericRevisionInfo = try reader["genericRevisionInfo"].readIfPresent(with: CodeDeployClientTypes.GenericRevisionInfo.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.GenericRevisionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.GenericRevisionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.GenericRevisionInfo()
        value.description = try reader["description"].readIfPresent()
        value.deploymentGroups = try reader["deploymentGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.firstUsedTime = try reader["firstUsedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUsedTime = try reader["lastUsedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.registerTime = try reader["registerTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodeDeployClientTypes.RevisionLocation {

    static func write(value: CodeDeployClientTypes.RevisionLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["appSpecContent"].write(value.appSpecContent, with: CodeDeployClientTypes.AppSpecContent.write(value:to:))
        try writer["gitHubLocation"].write(value.gitHubLocation, with: CodeDeployClientTypes.GitHubLocation.write(value:to:))
        try writer["revisionType"].write(value.revisionType)
        try writer["s3Location"].write(value.s3Location, with: CodeDeployClientTypes.S3Location.write(value:to:))
        try writer["string"].write(value.string, with: CodeDeployClientTypes.RawString.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.RevisionLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.RevisionLocation()
        value.revisionType = try reader["revisionType"].readIfPresent()
        value.s3Location = try reader["s3Location"].readIfPresent(with: CodeDeployClientTypes.S3Location.read(from:))
        value.gitHubLocation = try reader["gitHubLocation"].readIfPresent(with: CodeDeployClientTypes.GitHubLocation.read(from:))
        value.string = try reader["string"].readIfPresent(with: CodeDeployClientTypes.RawString.read(from:))
        value.appSpecContent = try reader["appSpecContent"].readIfPresent(with: CodeDeployClientTypes.AppSpecContent.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.AppSpecContent {

    static func write(value: CodeDeployClientTypes.AppSpecContent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["content"].write(value.content)
        try writer["sha256"].write(value.sha256)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.AppSpecContent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.AppSpecContent()
        value.content = try reader["content"].readIfPresent()
        value.sha256 = try reader["sha256"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.RawString {

    static func write(value: CodeDeployClientTypes.RawString?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["content"].write(value.content)
        try writer["sha256"].write(value.sha256)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.RawString {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.RawString()
        value.content = try reader["content"].readIfPresent()
        value.sha256 = try reader["sha256"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.GitHubLocation {

    static func write(value: CodeDeployClientTypes.GitHubLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["commitId"].write(value.commitId)
        try writer["repository"].write(value.repository)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.GitHubLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.GitHubLocation()
        value.repository = try reader["repository"].readIfPresent()
        value.commitId = try reader["commitId"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.S3Location {

    static func write(value: CodeDeployClientTypes.S3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["bucket"].write(value.bucket)
        try writer["bundleType"].write(value.bundleType)
        try writer["eTag"].write(value.eTag)
        try writer["key"].write(value.key)
        try writer["version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.S3Location {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.S3Location()
        value.bucket = try reader["bucket"].readIfPresent()
        value.key = try reader["key"].readIfPresent()
        value.bundleType = try reader["bundleType"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.eTag = try reader["eTag"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.ApplicationInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ApplicationInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ApplicationInfo()
        value.applicationId = try reader["applicationId"].readIfPresent()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.linkedToGitHub = try reader["linkedToGitHub"].readIfPresent() ?? false
        value.gitHubAccountName = try reader["gitHubAccountName"].readIfPresent()
        value.computePlatform = try reader["computePlatform"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentGroupInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentGroupInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentGroupInfo()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.deploymentGroupId = try reader["deploymentGroupId"].readIfPresent()
        value.deploymentGroupName = try reader["deploymentGroupName"].readIfPresent()
        value.deploymentConfigName = try reader["deploymentConfigName"].readIfPresent()
        value.ec2TagFilters = try reader["ec2TagFilters"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.EC2TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.onPremisesInstanceTagFilters = try reader["onPremisesInstanceTagFilters"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoScalingGroups = try reader["autoScalingGroups"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.AutoScalingGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.serviceRoleArn = try reader["serviceRoleArn"].readIfPresent()
        value.targetRevision = try reader["targetRevision"].readIfPresent(with: CodeDeployClientTypes.RevisionLocation.read(from:))
        value.triggerConfigurations = try reader["triggerConfigurations"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.TriggerConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.alarmConfiguration = try reader["alarmConfiguration"].readIfPresent(with: CodeDeployClientTypes.AlarmConfiguration.read(from:))
        value.autoRollbackConfiguration = try reader["autoRollbackConfiguration"].readIfPresent(with: CodeDeployClientTypes.AutoRollbackConfiguration.read(from:))
        value.deploymentStyle = try reader["deploymentStyle"].readIfPresent(with: CodeDeployClientTypes.DeploymentStyle.read(from:))
        value.outdatedInstancesStrategy = try reader["outdatedInstancesStrategy"].readIfPresent()
        value.blueGreenDeploymentConfiguration = try reader["blueGreenDeploymentConfiguration"].readIfPresent(with: CodeDeployClientTypes.BlueGreenDeploymentConfiguration.read(from:))
        value.loadBalancerInfo = try reader["loadBalancerInfo"].readIfPresent(with: CodeDeployClientTypes.LoadBalancerInfo.read(from:))
        value.lastSuccessfulDeployment = try reader["lastSuccessfulDeployment"].readIfPresent(with: CodeDeployClientTypes.LastDeploymentInfo.read(from:))
        value.lastAttemptedDeployment = try reader["lastAttemptedDeployment"].readIfPresent(with: CodeDeployClientTypes.LastDeploymentInfo.read(from:))
        value.ec2TagSet = try reader["ec2TagSet"].readIfPresent(with: CodeDeployClientTypes.EC2TagSet.read(from:))
        value.onPremisesTagSet = try reader["onPremisesTagSet"].readIfPresent(with: CodeDeployClientTypes.OnPremisesTagSet.read(from:))
        value.computePlatform = try reader["computePlatform"].readIfPresent()
        value.ecsServices = try reader["ecsServices"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.ECSService.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.terminationHookEnabled = try reader["terminationHookEnabled"].readIfPresent() ?? false
        return value
    }
}

extension CodeDeployClientTypes.ECSService {

    static func write(value: CodeDeployClientTypes.ECSService?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clusterName"].write(value.clusterName)
        try writer["serviceName"].write(value.serviceName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ECSService {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ECSService()
        value.serviceName = try reader["serviceName"].readIfPresent()
        value.clusterName = try reader["clusterName"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.OnPremisesTagSet {

    static func write(value: CodeDeployClientTypes.OnPremisesTagSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["onPremisesTagSetList"].writeList(value.onPremisesTagSetList, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: CodeDeployClientTypes.TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.OnPremisesTagSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.OnPremisesTagSet()
        value.onPremisesTagSetList = try reader["onPremisesTagSetList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: CodeDeployClientTypes.TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.TagFilter {

    static func write(value: CodeDeployClientTypes.TagFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TagFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TagFilter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.EC2TagSet {

    static func write(value: CodeDeployClientTypes.EC2TagSet?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ec2TagSetList"].writeList(value.ec2TagSetList, memberWritingClosure: SmithyReadWrite.listWritingClosure(memberWritingClosure: CodeDeployClientTypes.EC2TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.EC2TagSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.EC2TagSet()
        value.ec2TagSetList = try reader["ec2TagSetList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: CodeDeployClientTypes.EC2TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.EC2TagFilter {

    static func write(value: CodeDeployClientTypes.EC2TagFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.EC2TagFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.EC2TagFilter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.LastDeploymentInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.LastDeploymentInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.LastDeploymentInfo()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension CodeDeployClientTypes.LoadBalancerInfo {

    static func write(value: CodeDeployClientTypes.LoadBalancerInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["elbInfoList"].writeList(value.elbInfoList, memberWritingClosure: CodeDeployClientTypes.ELBInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["targetGroupInfoList"].writeList(value.targetGroupInfoList, memberWritingClosure: CodeDeployClientTypes.TargetGroupInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["targetGroupPairInfoList"].writeList(value.targetGroupPairInfoList, memberWritingClosure: CodeDeployClientTypes.TargetGroupPairInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.LoadBalancerInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.LoadBalancerInfo()
        value.elbInfoList = try reader["elbInfoList"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.ELBInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetGroupInfoList = try reader["targetGroupInfoList"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.TargetGroupInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetGroupPairInfoList = try reader["targetGroupPairInfoList"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.TargetGroupPairInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.TargetGroupPairInfo {

    static func write(value: CodeDeployClientTypes.TargetGroupPairInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["prodTrafficRoute"].write(value.prodTrafficRoute, with: CodeDeployClientTypes.TrafficRoute.write(value:to:))
        try writer["targetGroups"].writeList(value.targetGroups, memberWritingClosure: CodeDeployClientTypes.TargetGroupInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["testTrafficRoute"].write(value.testTrafficRoute, with: CodeDeployClientTypes.TrafficRoute.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TargetGroupPairInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TargetGroupPairInfo()
        value.targetGroups = try reader["targetGroups"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.TargetGroupInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.prodTrafficRoute = try reader["prodTrafficRoute"].readIfPresent(with: CodeDeployClientTypes.TrafficRoute.read(from:))
        value.testTrafficRoute = try reader["testTrafficRoute"].readIfPresent(with: CodeDeployClientTypes.TrafficRoute.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.TrafficRoute {

    static func write(value: CodeDeployClientTypes.TrafficRoute?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["listenerArns"].writeList(value.listenerArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TrafficRoute {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TrafficRoute()
        value.listenerArns = try reader["listenerArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.TargetGroupInfo {

    static func write(value: CodeDeployClientTypes.TargetGroupInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TargetGroupInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TargetGroupInfo()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.ELBInfo {

    static func write(value: CodeDeployClientTypes.ELBInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ELBInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ELBInfo()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.BlueGreenDeploymentConfiguration {

    static func write(value: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentReadyOption"].write(value.deploymentReadyOption, with: CodeDeployClientTypes.DeploymentReadyOption.write(value:to:))
        try writer["greenFleetProvisioningOption"].write(value.greenFleetProvisioningOption, with: CodeDeployClientTypes.GreenFleetProvisioningOption.write(value:to:))
        try writer["terminateBlueInstancesOnDeploymentSuccess"].write(value.terminateBlueInstancesOnDeploymentSuccess, with: CodeDeployClientTypes.BlueInstanceTerminationOption.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.BlueGreenDeploymentConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.BlueGreenDeploymentConfiguration()
        value.terminateBlueInstancesOnDeploymentSuccess = try reader["terminateBlueInstancesOnDeploymentSuccess"].readIfPresent(with: CodeDeployClientTypes.BlueInstanceTerminationOption.read(from:))
        value.deploymentReadyOption = try reader["deploymentReadyOption"].readIfPresent(with: CodeDeployClientTypes.DeploymentReadyOption.read(from:))
        value.greenFleetProvisioningOption = try reader["greenFleetProvisioningOption"].readIfPresent(with: CodeDeployClientTypes.GreenFleetProvisioningOption.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.GreenFleetProvisioningOption {

    static func write(value: CodeDeployClientTypes.GreenFleetProvisioningOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.GreenFleetProvisioningOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.GreenFleetProvisioningOption()
        value.action = try reader["action"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentReadyOption {

    static func write(value: CodeDeployClientTypes.DeploymentReadyOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["actionOnTimeout"].write(value.actionOnTimeout)
        try writer["waitTimeInMinutes"].write(value.waitTimeInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentReadyOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentReadyOption()
        value.actionOnTimeout = try reader["actionOnTimeout"].readIfPresent()
        value.waitTimeInMinutes = try reader["waitTimeInMinutes"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.BlueInstanceTerminationOption {

    static func write(value: CodeDeployClientTypes.BlueInstanceTerminationOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["action"].write(value.action)
        try writer["terminationWaitTimeInMinutes"].write(value.terminationWaitTimeInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.BlueInstanceTerminationOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.BlueInstanceTerminationOption()
        value.action = try reader["action"].readIfPresent()
        value.terminationWaitTimeInMinutes = try reader["terminationWaitTimeInMinutes"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.DeploymentStyle {

    static func write(value: CodeDeployClientTypes.DeploymentStyle?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deploymentOption"].write(value.deploymentOption)
        try writer["deploymentType"].write(value.deploymentType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentStyle {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentStyle()
        value.deploymentType = try reader["deploymentType"].readIfPresent()
        value.deploymentOption = try reader["deploymentOption"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.AutoRollbackConfiguration {

    static func write(value: CodeDeployClientTypes.AutoRollbackConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enabled"].write(value.enabled)
        try writer["events"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeDeployClientTypes.AutoRollbackEvent>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.AutoRollbackConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.AutoRollbackConfiguration()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CodeDeployClientTypes.AutoRollbackEvent>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.AlarmConfiguration {

    static func write(value: CodeDeployClientTypes.AlarmConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["alarms"].writeList(value.alarms, memberWritingClosure: CodeDeployClientTypes.Alarm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["enabled"].write(value.enabled)
        try writer["ignorePollAlarmFailure"].write(value.ignorePollAlarmFailure)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.AlarmConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.AlarmConfiguration()
        value.enabled = try reader["enabled"].readIfPresent() ?? false
        value.ignorePollAlarmFailure = try reader["ignorePollAlarmFailure"].readIfPresent() ?? false
        value.alarms = try reader["alarms"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.Alarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.Alarm {

    static func write(value: CodeDeployClientTypes.Alarm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.Alarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.Alarm()
        value.name = try reader["name"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.TriggerConfig {

    static func write(value: CodeDeployClientTypes.TriggerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["triggerEvents"].writeList(value.triggerEvents, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CodeDeployClientTypes.TriggerEventType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["triggerName"].write(value.triggerName)
        try writer["triggerTargetArn"].write(value.triggerTargetArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TriggerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TriggerConfig()
        value.triggerName = try reader["triggerName"].readIfPresent()
        value.triggerTargetArn = try reader["triggerTargetArn"].readIfPresent()
        value.triggerEvents = try reader["triggerEvents"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CodeDeployClientTypes.TriggerEventType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.AutoScalingGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.AutoScalingGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.AutoScalingGroup()
        value.name = try reader["name"].readIfPresent()
        value.hook = try reader["hook"].readIfPresent()
        value.terminationHook = try reader["terminationHook"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.InstanceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.InstanceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.InstanceSummary()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.instanceId = try reader["instanceId"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycleEvents = try reader["lifecycleEvents"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.LifecycleEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceType = try reader["instanceType"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.LifecycleEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.LifecycleEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.LifecycleEvent()
        value.lifecycleEventName = try reader["lifecycleEventName"].readIfPresent()
        value.diagnostics = try reader["diagnostics"].readIfPresent(with: CodeDeployClientTypes.Diagnostics.read(from:))
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.Diagnostics {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.Diagnostics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.Diagnostics()
        value.errorCode = try reader["errorCode"].readIfPresent()
        value.scriptName = try reader["scriptName"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.logTail = try reader["logTail"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentInfo()
        value.applicationName = try reader["applicationName"].readIfPresent()
        value.deploymentGroupName = try reader["deploymentGroupName"].readIfPresent()
        value.deploymentConfigName = try reader["deploymentConfigName"].readIfPresent()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.previousRevision = try reader["previousRevision"].readIfPresent(with: CodeDeployClientTypes.RevisionLocation.read(from:))
        value.revision = try reader["revision"].readIfPresent(with: CodeDeployClientTypes.RevisionLocation.read(from:))
        value.status = try reader["status"].readIfPresent()
        value.errorInformation = try reader["errorInformation"].readIfPresent(with: CodeDeployClientTypes.ErrorInformation.read(from:))
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startTime = try reader["startTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.completeTime = try reader["completeTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deploymentOverview = try reader["deploymentOverview"].readIfPresent(with: CodeDeployClientTypes.DeploymentOverview.read(from:))
        value.description = try reader["description"].readIfPresent()
        value.creator = try reader["creator"].readIfPresent()
        value.ignoreApplicationStopFailures = try reader["ignoreApplicationStopFailures"].readIfPresent() ?? false
        value.autoRollbackConfiguration = try reader["autoRollbackConfiguration"].readIfPresent(with: CodeDeployClientTypes.AutoRollbackConfiguration.read(from:))
        value.updateOutdatedInstancesOnly = try reader["updateOutdatedInstancesOnly"].readIfPresent() ?? false
        value.rollbackInfo = try reader["rollbackInfo"].readIfPresent(with: CodeDeployClientTypes.RollbackInfo.read(from:))
        value.deploymentStyle = try reader["deploymentStyle"].readIfPresent(with: CodeDeployClientTypes.DeploymentStyle.read(from:))
        value.targetInstances = try reader["targetInstances"].readIfPresent(with: CodeDeployClientTypes.TargetInstances.read(from:))
        value.instanceTerminationWaitTimeStarted = try reader["instanceTerminationWaitTimeStarted"].readIfPresent() ?? false
        value.blueGreenDeploymentConfiguration = try reader["blueGreenDeploymentConfiguration"].readIfPresent(with: CodeDeployClientTypes.BlueGreenDeploymentConfiguration.read(from:))
        value.loadBalancerInfo = try reader["loadBalancerInfo"].readIfPresent(with: CodeDeployClientTypes.LoadBalancerInfo.read(from:))
        value.additionalDeploymentStatusInfo = try reader["additionalDeploymentStatusInfo"].readIfPresent()
        value.fileExistsBehavior = try reader["fileExistsBehavior"].readIfPresent()
        value.deploymentStatusMessages = try reader["deploymentStatusMessages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.computePlatform = try reader["computePlatform"].readIfPresent()
        value.externalId = try reader["externalId"].readIfPresent()
        value.relatedDeployments = try reader["relatedDeployments"].readIfPresent(with: CodeDeployClientTypes.RelatedDeployments.read(from:))
        value.overrideAlarmConfiguration = try reader["overrideAlarmConfiguration"].readIfPresent(with: CodeDeployClientTypes.AlarmConfiguration.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.RelatedDeployments {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.RelatedDeployments {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.RelatedDeployments()
        value.autoUpdateOutdatedInstancesRootDeploymentId = try reader["autoUpdateOutdatedInstancesRootDeploymentId"].readIfPresent()
        value.autoUpdateOutdatedInstancesDeploymentIds = try reader["autoUpdateOutdatedInstancesDeploymentIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.TargetInstances {

    static func write(value: CodeDeployClientTypes.TargetInstances?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["autoScalingGroups"].writeList(value.autoScalingGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ec2TagSet"].write(value.ec2TagSet, with: CodeDeployClientTypes.EC2TagSet.write(value:to:))
        try writer["tagFilters"].writeList(value.tagFilters, memberWritingClosure: CodeDeployClientTypes.EC2TagFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TargetInstances {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TargetInstances()
        value.tagFilters = try reader["tagFilters"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.EC2TagFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoScalingGroups = try reader["autoScalingGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.ec2TagSet = try reader["ec2TagSet"].readIfPresent(with: CodeDeployClientTypes.EC2TagSet.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.RollbackInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.RollbackInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.RollbackInfo()
        value.rollbackDeploymentId = try reader["rollbackDeploymentId"].readIfPresent()
        value.rollbackTriggeringDeploymentId = try reader["rollbackTriggeringDeploymentId"].readIfPresent()
        value.rollbackMessage = try reader["rollbackMessage"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentOverview {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentOverview {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentOverview()
        value.pending = try reader["Pending"].readIfPresent() ?? 0
        value.inProgress = try reader["InProgress"].readIfPresent() ?? 0
        value.succeeded = try reader["Succeeded"].readIfPresent() ?? 0
        value.failed = try reader["Failed"].readIfPresent() ?? 0
        value.skipped = try reader["Skipped"].readIfPresent() ?? 0
        value.ready = try reader["Ready"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.ErrorInformation {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ErrorInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ErrorInformation()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentTarget {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentTarget()
        value.deploymentTargetType = try reader["deploymentTargetType"].readIfPresent()
        value.instanceTarget = try reader["instanceTarget"].readIfPresent(with: CodeDeployClientTypes.InstanceTarget.read(from:))
        value.lambdaTarget = try reader["lambdaTarget"].readIfPresent(with: CodeDeployClientTypes.LambdaTarget.read(from:))
        value.ecsTarget = try reader["ecsTarget"].readIfPresent(with: CodeDeployClientTypes.ECSTarget.read(from:))
        value.cloudFormationTarget = try reader["cloudFormationTarget"].readIfPresent(with: CodeDeployClientTypes.CloudFormationTarget.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.CloudFormationTarget {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.CloudFormationTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.CloudFormationTarget()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.targetId = try reader["targetId"].readIfPresent()
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycleEvents = try reader["lifecycleEvents"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.LifecycleEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.targetVersionWeight = try reader["targetVersionWeight"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.ECSTarget {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ECSTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ECSTarget()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.targetId = try reader["targetId"].readIfPresent()
        value.targetArn = try reader["targetArn"].readIfPresent()
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycleEvents = try reader["lifecycleEvents"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.LifecycleEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.taskSetsInfo = try reader["taskSetsInfo"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.ECSTaskSet.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.ECSTaskSet {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ECSTaskSet {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ECSTaskSet()
        value.identifer = try reader["identifer"].readIfPresent()
        value.desiredCount = try reader["desiredCount"].readIfPresent() ?? 0
        value.pendingCount = try reader["pendingCount"].readIfPresent() ?? 0
        value.runningCount = try reader["runningCount"].readIfPresent() ?? 0
        value.status = try reader["status"].readIfPresent()
        value.trafficWeight = try reader["trafficWeight"].readIfPresent() ?? 0
        value.targetGroup = try reader["targetGroup"].readIfPresent(with: CodeDeployClientTypes.TargetGroupInfo.read(from:))
        value.taskSetLabel = try reader["taskSetLabel"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.LambdaTarget {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.LambdaTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.LambdaTarget()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.targetId = try reader["targetId"].readIfPresent()
        value.targetArn = try reader["targetArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycleEvents = try reader["lifecycleEvents"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.LifecycleEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lambdaFunctionInfo = try reader["lambdaFunctionInfo"].readIfPresent(with: CodeDeployClientTypes.LambdaFunctionInfo.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.LambdaFunctionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.LambdaFunctionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.LambdaFunctionInfo()
        value.functionName = try reader["functionName"].readIfPresent()
        value.functionAlias = try reader["functionAlias"].readIfPresent()
        value.currentVersion = try reader["currentVersion"].readIfPresent()
        value.targetVersion = try reader["targetVersion"].readIfPresent()
        value.targetVersionWeight = try reader["targetVersionWeight"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.InstanceTarget {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.InstanceTarget {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.InstanceTarget()
        value.deploymentId = try reader["deploymentId"].readIfPresent()
        value.targetId = try reader["targetId"].readIfPresent()
        value.targetArn = try reader["targetArn"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.lastUpdatedAt = try reader["lastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifecycleEvents = try reader["lifecycleEvents"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.LifecycleEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceLabel = try reader["instanceLabel"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.InstanceInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.InstanceInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.InstanceInfo()
        value.instanceName = try reader["instanceName"].readIfPresent()
        value.iamSessionArn = try reader["iamSessionArn"].readIfPresent()
        value.iamUserArn = try reader["iamUserArn"].readIfPresent()
        value.instanceArn = try reader["instanceArn"].readIfPresent()
        value.registerTime = try reader["registerTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deregisterTime = try reader["deregisterTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["tags"].readListIfPresent(memberReadingClosure: CodeDeployClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CodeDeployClientTypes.Tag {

    static func write(value: CodeDeployClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension CodeDeployClientTypes.DeploymentConfigInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.DeploymentConfigInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.DeploymentConfigInfo()
        value.deploymentConfigId = try reader["deploymentConfigId"].readIfPresent()
        value.deploymentConfigName = try reader["deploymentConfigName"].readIfPresent()
        value.minimumHealthyHosts = try reader["minimumHealthyHosts"].readIfPresent(with: CodeDeployClientTypes.MinimumHealthyHosts.read(from:))
        value.createTime = try reader["createTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.computePlatform = try reader["computePlatform"].readIfPresent()
        value.trafficRoutingConfig = try reader["trafficRoutingConfig"].readIfPresent(with: CodeDeployClientTypes.TrafficRoutingConfig.read(from:))
        value.zonalConfig = try reader["zonalConfig"].readIfPresent(with: CodeDeployClientTypes.ZonalConfig.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.ZonalConfig {

    static func write(value: CodeDeployClientTypes.ZonalConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["firstZoneMonitorDurationInSeconds"].write(value.firstZoneMonitorDurationInSeconds)
        try writer["minimumHealthyHostsPerZone"].write(value.minimumHealthyHostsPerZone, with: CodeDeployClientTypes.MinimumHealthyHostsPerZone.write(value:to:))
        try writer["monitorDurationInSeconds"].write(value.monitorDurationInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.ZonalConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.ZonalConfig()
        value.firstZoneMonitorDurationInSeconds = try reader["firstZoneMonitorDurationInSeconds"].readIfPresent()
        value.monitorDurationInSeconds = try reader["monitorDurationInSeconds"].readIfPresent()
        value.minimumHealthyHostsPerZone = try reader["minimumHealthyHostsPerZone"].readIfPresent(with: CodeDeployClientTypes.MinimumHealthyHostsPerZone.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.MinimumHealthyHostsPerZone {

    static func write(value: CodeDeployClientTypes.MinimumHealthyHostsPerZone?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.MinimumHealthyHostsPerZone {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.MinimumHealthyHostsPerZone()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.TrafficRoutingConfig {

    static func write(value: CodeDeployClientTypes.TrafficRoutingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["timeBasedCanary"].write(value.timeBasedCanary, with: CodeDeployClientTypes.TimeBasedCanary.write(value:to:))
        try writer["timeBasedLinear"].write(value.timeBasedLinear, with: CodeDeployClientTypes.TimeBasedLinear.write(value:to:))
        try writer["type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TrafficRoutingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TrafficRoutingConfig()
        value.type = try reader["type"].readIfPresent()
        value.timeBasedCanary = try reader["timeBasedCanary"].readIfPresent(with: CodeDeployClientTypes.TimeBasedCanary.read(from:))
        value.timeBasedLinear = try reader["timeBasedLinear"].readIfPresent(with: CodeDeployClientTypes.TimeBasedLinear.read(from:))
        return value
    }
}

extension CodeDeployClientTypes.TimeBasedLinear {

    static func write(value: CodeDeployClientTypes.TimeBasedLinear?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["linearInterval"].write(value.linearInterval)
        try writer["linearPercentage"].write(value.linearPercentage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TimeBasedLinear {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TimeBasedLinear()
        value.linearPercentage = try reader["linearPercentage"].readIfPresent() ?? 0
        value.linearInterval = try reader["linearInterval"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.TimeBasedCanary {

    static func write(value: CodeDeployClientTypes.TimeBasedCanary?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["canaryInterval"].write(value.canaryInterval)
        try writer["canaryPercentage"].write(value.canaryPercentage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.TimeBasedCanary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.TimeBasedCanary()
        value.canaryPercentage = try reader["canaryPercentage"].readIfPresent() ?? 0
        value.canaryInterval = try reader["canaryInterval"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.MinimumHealthyHosts {

    static func write(value: CodeDeployClientTypes.MinimumHealthyHosts?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["type"].write(value.type)
        try writer["value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CodeDeployClientTypes.MinimumHealthyHosts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CodeDeployClientTypes.MinimumHealthyHosts()
        value.type = try reader["type"].readIfPresent()
        value.value = try reader["value"].readIfPresent() ?? 0
        return value
    }
}

extension CodeDeployClientTypes.TimeRange {

    static func write(value: CodeDeployClientTypes.TimeRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["end"].writeTimestamp(value.end, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["start"].writeTimestamp(value.start, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

public enum CodeDeployClientTypes {}
