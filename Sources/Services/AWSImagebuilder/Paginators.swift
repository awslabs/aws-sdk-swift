// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListComponentBuildVersionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListComponentBuildVersionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListComponentBuildVersionsOutputResponse`
extension ImagebuilderClient {
    public func listComponentBuildVersionsPaginated(input: ListComponentBuildVersionsInput) -> ClientRuntime.PaginatorSequence<ListComponentBuildVersionsInput, ListComponentBuildVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListComponentBuildVersionsInput, ListComponentBuildVersionsOutputResponse>(input: input, inputKey: \ListComponentBuildVersionsInput.nextToken, outputKey: \ListComponentBuildVersionsOutputResponse.nextToken, paginationFunction: self.listComponentBuildVersions(input:))
    }
}

extension ListComponentBuildVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListComponentBuildVersionsInput {
        return ListComponentBuildVersionsInput(
            componentVersionArn: self.componentVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListComponentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListComponentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListComponentsOutputResponse`
extension ImagebuilderClient {
    public func listComponentsPaginated(input: ListComponentsInput) -> ClientRuntime.PaginatorSequence<ListComponentsInput, ListComponentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListComponentsInput, ListComponentsOutputResponse>(input: input, inputKey: \ListComponentsInput.nextToken, outputKey: \ListComponentsOutputResponse.nextToken, paginationFunction: self.listComponents(input:))
    }
}

extension ListComponentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListComponentsInput {
        return ListComponentsInput(
            byName: self.byName,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

/// Paginate over `[ListContainerRecipesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListContainerRecipesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListContainerRecipesOutputResponse`
extension ImagebuilderClient {
    public func listContainerRecipesPaginated(input: ListContainerRecipesInput) -> ClientRuntime.PaginatorSequence<ListContainerRecipesInput, ListContainerRecipesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListContainerRecipesInput, ListContainerRecipesOutputResponse>(input: input, inputKey: \ListContainerRecipesInput.nextToken, outputKey: \ListContainerRecipesOutputResponse.nextToken, paginationFunction: self.listContainerRecipes(input:))
    }
}

extension ListContainerRecipesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContainerRecipesInput {
        return ListContainerRecipesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

/// Paginate over `[ListDistributionConfigurationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListDistributionConfigurationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListDistributionConfigurationsOutputResponse`
extension ImagebuilderClient {
    public func listDistributionConfigurationsPaginated(input: ListDistributionConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListDistributionConfigurationsInput, ListDistributionConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDistributionConfigurationsInput, ListDistributionConfigurationsOutputResponse>(input: input, inputKey: \ListDistributionConfigurationsInput.nextToken, outputKey: \ListDistributionConfigurationsOutputResponse.nextToken, paginationFunction: self.listDistributionConfigurations(input:))
    }
}

extension ListDistributionConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionConfigurationsInput {
        return ListDistributionConfigurationsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListImageBuildVersionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImageBuildVersionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImageBuildVersionsOutputResponse`
extension ImagebuilderClient {
    public func listImageBuildVersionsPaginated(input: ListImageBuildVersionsInput) -> ClientRuntime.PaginatorSequence<ListImageBuildVersionsInput, ListImageBuildVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageBuildVersionsInput, ListImageBuildVersionsOutputResponse>(input: input, inputKey: \ListImageBuildVersionsInput.nextToken, outputKey: \ListImageBuildVersionsOutputResponse.nextToken, paginationFunction: self.listImageBuildVersions(input:))
    }
}

extension ListImageBuildVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageBuildVersionsInput {
        return ListImageBuildVersionsInput(
            filters: self.filters,
            imageVersionArn: self.imageVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListImagePackagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImagePackagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImagePackagesOutputResponse`
extension ImagebuilderClient {
    public func listImagePackagesPaginated(input: ListImagePackagesInput) -> ClientRuntime.PaginatorSequence<ListImagePackagesInput, ListImagePackagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePackagesInput, ListImagePackagesOutputResponse>(input: input, inputKey: \ListImagePackagesInput.nextToken, outputKey: \ListImagePackagesOutputResponse.nextToken, paginationFunction: self.listImagePackages(input:))
    }
}

extension ListImagePackagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePackagesInput {
        return ListImagePackagesInput(
            imageBuildVersionArn: self.imageBuildVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListImagePipelineImagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImagePipelineImagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImagePipelineImagesOutputResponse`
extension ImagebuilderClient {
    public func listImagePipelineImagesPaginated(input: ListImagePipelineImagesInput) -> ClientRuntime.PaginatorSequence<ListImagePipelineImagesInput, ListImagePipelineImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePipelineImagesInput, ListImagePipelineImagesOutputResponse>(input: input, inputKey: \ListImagePipelineImagesInput.nextToken, outputKey: \ListImagePipelineImagesOutputResponse.nextToken, paginationFunction: self.listImagePipelineImages(input:))
    }
}

extension ListImagePipelineImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePipelineImagesInput {
        return ListImagePipelineImagesInput(
            filters: self.filters,
            imagePipelineArn: self.imagePipelineArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListImagePipelinesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImagePipelinesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImagePipelinesOutputResponse`
extension ImagebuilderClient {
    public func listImagePipelinesPaginated(input: ListImagePipelinesInput) -> ClientRuntime.PaginatorSequence<ListImagePipelinesInput, ListImagePipelinesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePipelinesInput, ListImagePipelinesOutputResponse>(input: input, inputKey: \ListImagePipelinesInput.nextToken, outputKey: \ListImagePipelinesOutputResponse.nextToken, paginationFunction: self.listImagePipelines(input:))
    }
}

extension ListImagePipelinesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePipelinesInput {
        return ListImagePipelinesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListImageRecipesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImageRecipesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImageRecipesOutputResponse`
extension ImagebuilderClient {
    public func listImageRecipesPaginated(input: ListImageRecipesInput) -> ClientRuntime.PaginatorSequence<ListImageRecipesInput, ListImageRecipesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageRecipesInput, ListImageRecipesOutputResponse>(input: input, inputKey: \ListImageRecipesInput.nextToken, outputKey: \ListImageRecipesOutputResponse.nextToken, paginationFunction: self.listImageRecipes(input:))
    }
}

extension ListImageRecipesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageRecipesInput {
        return ListImageRecipesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

/// Paginate over `[ListImagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListImagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListImagesOutputResponse`
extension ImagebuilderClient {
    public func listImagesPaginated(input: ListImagesInput) -> ClientRuntime.PaginatorSequence<ListImagesInput, ListImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagesInput, ListImagesOutputResponse>(input: input, inputKey: \ListImagesInput.nextToken, outputKey: \ListImagesOutputResponse.nextToken, paginationFunction: self.listImages(input:))
    }
}

extension ListImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagesInput {
        return ListImagesInput(
            byName: self.byName,
            filters: self.filters,
            includeDeprecated: self.includeDeprecated,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

/// Paginate over `[ListInfrastructureConfigurationsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListInfrastructureConfigurationsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListInfrastructureConfigurationsOutputResponse`
extension ImagebuilderClient {
    public func listInfrastructureConfigurationsPaginated(input: ListInfrastructureConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListInfrastructureConfigurationsInput, ListInfrastructureConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInfrastructureConfigurationsInput, ListInfrastructureConfigurationsOutputResponse>(input: input, inputKey: \ListInfrastructureConfigurationsInput.nextToken, outputKey: \ListInfrastructureConfigurationsOutputResponse.nextToken, paginationFunction: self.listInfrastructureConfigurations(input:))
    }
}

extension ListInfrastructureConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInfrastructureConfigurationsInput {
        return ListInfrastructureConfigurationsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
