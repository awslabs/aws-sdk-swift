// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImagebuilderClient {
    /// Paginate over `[ListComponentBuildVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListComponentBuildVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListComponentBuildVersionsOutputResponse`
    public func listComponentBuildVersionsPaginated(input: ListComponentBuildVersionsInput) -> ClientRuntime.PaginatorSequence<ListComponentBuildVersionsInput, ListComponentBuildVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListComponentBuildVersionsInput, ListComponentBuildVersionsOutputResponse>(input: input, inputKey: \ListComponentBuildVersionsInput.nextToken, outputKey: \ListComponentBuildVersionsOutputResponse.nextToken, paginationFunction: self.listComponentBuildVersions(input:))
    }
}

extension ListComponentBuildVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListComponentBuildVersionsInput {
        return ListComponentBuildVersionsInput(
            componentVersionArn: self.componentVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListComponentBuildVersionsInput, Output == ListComponentBuildVersionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listComponentBuildVersionsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ComponentSummary]`
    /// - Returns: `[ImagebuilderClientTypes.ComponentSummary]`
    public func componentSummaryList() async throws -> [ImagebuilderClientTypes.ComponentSummary] {
        return try await self.asyncCompactMap { item in item.componentSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListComponentsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListComponentsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListComponentsOutputResponse`
    public func listComponentsPaginated(input: ListComponentsInput) -> ClientRuntime.PaginatorSequence<ListComponentsInput, ListComponentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListComponentsInput, ListComponentsOutputResponse>(input: input, inputKey: \ListComponentsInput.nextToken, outputKey: \ListComponentsOutputResponse.nextToken, paginationFunction: self.listComponents(input:))
    }
}

extension ListComponentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListComponentsInput {
        return ListComponentsInput(
            byName: self.byName,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

extension PaginatorSequence where Input == ListComponentsInput, Output == ListComponentsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listComponentsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ComponentVersion]`
    /// - Returns: `[ImagebuilderClientTypes.ComponentVersion]`
    public func componentVersionList() async throws -> [ImagebuilderClientTypes.ComponentVersion] {
        return try await self.asyncCompactMap { item in item.componentVersionList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListContainerRecipesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListContainerRecipesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListContainerRecipesOutputResponse`
    public func listContainerRecipesPaginated(input: ListContainerRecipesInput) -> ClientRuntime.PaginatorSequence<ListContainerRecipesInput, ListContainerRecipesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListContainerRecipesInput, ListContainerRecipesOutputResponse>(input: input, inputKey: \ListContainerRecipesInput.nextToken, outputKey: \ListContainerRecipesOutputResponse.nextToken, paginationFunction: self.listContainerRecipes(input:))
    }
}

extension ListContainerRecipesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListContainerRecipesInput {
        return ListContainerRecipesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

extension PaginatorSequence where Input == ListContainerRecipesInput, Output == ListContainerRecipesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listContainerRecipesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ContainerRecipeSummary]`
    /// - Returns: `[ImagebuilderClientTypes.ContainerRecipeSummary]`
    public func containerRecipeSummaryList() async throws -> [ImagebuilderClientTypes.ContainerRecipeSummary] {
        return try await self.asyncCompactMap { item in item.containerRecipeSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListDistributionConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListDistributionConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListDistributionConfigurationsOutputResponse`
    public func listDistributionConfigurationsPaginated(input: ListDistributionConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListDistributionConfigurationsInput, ListDistributionConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListDistributionConfigurationsInput, ListDistributionConfigurationsOutputResponse>(input: input, inputKey: \ListDistributionConfigurationsInput.nextToken, outputKey: \ListDistributionConfigurationsOutputResponse.nextToken, paginationFunction: self.listDistributionConfigurations(input:))
    }
}

extension ListDistributionConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListDistributionConfigurationsInput {
        return ListDistributionConfigurationsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListDistributionConfigurationsInput, Output == ListDistributionConfigurationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listDistributionConfigurationsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.DistributionConfigurationSummary]`
    /// - Returns: `[ImagebuilderClientTypes.DistributionConfigurationSummary]`
    public func distributionConfigurationSummaryList() async throws -> [ImagebuilderClientTypes.DistributionConfigurationSummary] {
        return try await self.asyncCompactMap { item in item.distributionConfigurationSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImageBuildVersionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImageBuildVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImageBuildVersionsOutputResponse`
    public func listImageBuildVersionsPaginated(input: ListImageBuildVersionsInput) -> ClientRuntime.PaginatorSequence<ListImageBuildVersionsInput, ListImageBuildVersionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageBuildVersionsInput, ListImageBuildVersionsOutputResponse>(input: input, inputKey: \ListImageBuildVersionsInput.nextToken, outputKey: \ListImageBuildVersionsOutputResponse.nextToken, paginationFunction: self.listImageBuildVersions(input:))
    }
}

extension ListImageBuildVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageBuildVersionsInput {
        return ListImageBuildVersionsInput(
            filters: self.filters,
            imageVersionArn: self.imageVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImageBuildVersionsInput, Output == ListImageBuildVersionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImageBuildVersionsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageSummary]`
    /// - Returns: `[ImagebuilderClientTypes.ImageSummary]`
    public func imageSummaryList() async throws -> [ImagebuilderClientTypes.ImageSummary] {
        return try await self.asyncCompactMap { item in item.imageSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImagePackagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImagePackagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImagePackagesOutputResponse`
    public func listImagePackagesPaginated(input: ListImagePackagesInput) -> ClientRuntime.PaginatorSequence<ListImagePackagesInput, ListImagePackagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePackagesInput, ListImagePackagesOutputResponse>(input: input, inputKey: \ListImagePackagesInput.nextToken, outputKey: \ListImagePackagesOutputResponse.nextToken, paginationFunction: self.listImagePackages(input:))
    }
}

extension ListImagePackagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePackagesInput {
        return ListImagePackagesInput(
            imageBuildVersionArn: self.imageBuildVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImagePackagesInput, Output == ListImagePackagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImagePackagesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImagePackage]`
    /// - Returns: `[ImagebuilderClientTypes.ImagePackage]`
    public func imagePackageList() async throws -> [ImagebuilderClientTypes.ImagePackage] {
        return try await self.asyncCompactMap { item in item.imagePackageList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImagePipelineImagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImagePipelineImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImagePipelineImagesOutputResponse`
    public func listImagePipelineImagesPaginated(input: ListImagePipelineImagesInput) -> ClientRuntime.PaginatorSequence<ListImagePipelineImagesInput, ListImagePipelineImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePipelineImagesInput, ListImagePipelineImagesOutputResponse>(input: input, inputKey: \ListImagePipelineImagesInput.nextToken, outputKey: \ListImagePipelineImagesOutputResponse.nextToken, paginationFunction: self.listImagePipelineImages(input:))
    }
}

extension ListImagePipelineImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePipelineImagesInput {
        return ListImagePipelineImagesInput(
            filters: self.filters,
            imagePipelineArn: self.imagePipelineArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImagePipelineImagesInput, Output == ListImagePipelineImagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImagePipelineImagesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageSummary]`
    /// - Returns: `[ImagebuilderClientTypes.ImageSummary]`
    public func imageSummaryList() async throws -> [ImagebuilderClientTypes.ImageSummary] {
        return try await self.asyncCompactMap { item in item.imageSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImagePipelinesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImagePipelinesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImagePipelinesOutputResponse`
    public func listImagePipelinesPaginated(input: ListImagePipelinesInput) -> ClientRuntime.PaginatorSequence<ListImagePipelinesInput, ListImagePipelinesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagePipelinesInput, ListImagePipelinesOutputResponse>(input: input, inputKey: \ListImagePipelinesInput.nextToken, outputKey: \ListImagePipelinesOutputResponse.nextToken, paginationFunction: self.listImagePipelines(input:))
    }
}

extension ListImagePipelinesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagePipelinesInput {
        return ListImagePipelinesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImagePipelinesInput, Output == ListImagePipelinesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImagePipelinesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImagePipeline]`
    /// - Returns: `[ImagebuilderClientTypes.ImagePipeline]`
    public func imagePipelineList() async throws -> [ImagebuilderClientTypes.ImagePipeline] {
        return try await self.asyncCompactMap { item in item.imagePipelineList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImageRecipesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImageRecipesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImageRecipesOutputResponse`
    public func listImageRecipesPaginated(input: ListImageRecipesInput) -> ClientRuntime.PaginatorSequence<ListImageRecipesInput, ListImageRecipesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageRecipesInput, ListImageRecipesOutputResponse>(input: input, inputKey: \ListImageRecipesInput.nextToken, outputKey: \ListImageRecipesOutputResponse.nextToken, paginationFunction: self.listImageRecipes(input:))
    }
}

extension ListImageRecipesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageRecipesInput {
        return ListImageRecipesInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

extension PaginatorSequence where Input == ListImageRecipesInput, Output == ListImageRecipesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImageRecipesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageRecipeSummary]`
    /// - Returns: `[ImagebuilderClientTypes.ImageRecipeSummary]`
    public func imageRecipeSummaryList() async throws -> [ImagebuilderClientTypes.ImageRecipeSummary] {
        return try await self.asyncCompactMap { item in item.imageRecipeSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImagesOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImagesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImagesOutputResponse`
    public func listImagesPaginated(input: ListImagesInput) -> ClientRuntime.PaginatorSequence<ListImagesInput, ListImagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImagesInput, ListImagesOutputResponse>(input: input, inputKey: \ListImagesInput.nextToken, outputKey: \ListImagesOutputResponse.nextToken, paginationFunction: self.listImages(input:))
    }
}

extension ListImagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImagesInput {
        return ListImagesInput(
            byName: self.byName,
            filters: self.filters,
            includeDeprecated: self.includeDeprecated,
            maxResults: self.maxResults,
            nextToken: token,
            owner: self.owner
        )}
}

extension PaginatorSequence where Input == ListImagesInput, Output == ListImagesOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImagesPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageVersion]`
    /// - Returns: `[ImagebuilderClientTypes.ImageVersion]`
    public func imageVersionList() async throws -> [ImagebuilderClientTypes.ImageVersion] {
        return try await self.asyncCompactMap { item in item.imageVersionList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImageScanFindingAggregationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImageScanFindingAggregationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImageScanFindingAggregationsOutputResponse`
    public func listImageScanFindingAggregationsPaginated(input: ListImageScanFindingAggregationsInput) -> ClientRuntime.PaginatorSequence<ListImageScanFindingAggregationsInput, ListImageScanFindingAggregationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageScanFindingAggregationsInput, ListImageScanFindingAggregationsOutputResponse>(input: input, inputKey: \ListImageScanFindingAggregationsInput.nextToken, outputKey: \ListImageScanFindingAggregationsOutputResponse.nextToken, paginationFunction: self.listImageScanFindingAggregations(input:))
    }
}

extension ListImageScanFindingAggregationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageScanFindingAggregationsInput {
        return ListImageScanFindingAggregationsInput(
            filter: self.filter,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImageScanFindingAggregationsInput, Output == ListImageScanFindingAggregationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImageScanFindingAggregationsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageScanFindingAggregation]`
    /// - Returns: `[ImagebuilderClientTypes.ImageScanFindingAggregation]`
    public func responses() async throws -> [ImagebuilderClientTypes.ImageScanFindingAggregation] {
        return try await self.asyncCompactMap { item in item.responses }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListImageScanFindingsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListImageScanFindingsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListImageScanFindingsOutputResponse`
    public func listImageScanFindingsPaginated(input: ListImageScanFindingsInput) -> ClientRuntime.PaginatorSequence<ListImageScanFindingsInput, ListImageScanFindingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListImageScanFindingsInput, ListImageScanFindingsOutputResponse>(input: input, inputKey: \ListImageScanFindingsInput.nextToken, outputKey: \ListImageScanFindingsOutputResponse.nextToken, paginationFunction: self.listImageScanFindings(input:))
    }
}

extension ListImageScanFindingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListImageScanFindingsInput {
        return ListImageScanFindingsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListImageScanFindingsInput, Output == ListImageScanFindingsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listImageScanFindingsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.ImageScanFinding]`
    /// - Returns: `[ImagebuilderClientTypes.ImageScanFinding]`
    public func findings() async throws -> [ImagebuilderClientTypes.ImageScanFinding] {
        return try await self.asyncCompactMap { item in item.findings }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListInfrastructureConfigurationsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListInfrastructureConfigurationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListInfrastructureConfigurationsOutputResponse`
    public func listInfrastructureConfigurationsPaginated(input: ListInfrastructureConfigurationsInput) -> ClientRuntime.PaginatorSequence<ListInfrastructureConfigurationsInput, ListInfrastructureConfigurationsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListInfrastructureConfigurationsInput, ListInfrastructureConfigurationsOutputResponse>(input: input, inputKey: \ListInfrastructureConfigurationsInput.nextToken, outputKey: \ListInfrastructureConfigurationsOutputResponse.nextToken, paginationFunction: self.listInfrastructureConfigurations(input:))
    }
}

extension ListInfrastructureConfigurationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListInfrastructureConfigurationsInput {
        return ListInfrastructureConfigurationsInput(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListInfrastructureConfigurationsInput, Output == ListInfrastructureConfigurationsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listInfrastructureConfigurationsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.InfrastructureConfigurationSummary]`
    /// - Returns: `[ImagebuilderClientTypes.InfrastructureConfigurationSummary]`
    public func infrastructureConfigurationSummaryList() async throws -> [ImagebuilderClientTypes.InfrastructureConfigurationSummary] {
        return try await self.asyncCompactMap { item in item.infrastructureConfigurationSummaryList }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListWorkflowExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWorkflowExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWorkflowExecutionsOutputResponse`
    public func listWorkflowExecutionsPaginated(input: ListWorkflowExecutionsInput) -> ClientRuntime.PaginatorSequence<ListWorkflowExecutionsInput, ListWorkflowExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkflowExecutionsInput, ListWorkflowExecutionsOutputResponse>(input: input, inputKey: \ListWorkflowExecutionsInput.nextToken, outputKey: \ListWorkflowExecutionsOutputResponse.nextToken, paginationFunction: self.listWorkflowExecutions(input:))
    }
}

extension ListWorkflowExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkflowExecutionsInput {
        return ListWorkflowExecutionsInput(
            imageBuildVersionArn: self.imageBuildVersionArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListWorkflowExecutionsInput, Output == ListWorkflowExecutionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listWorkflowExecutionsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.WorkflowExecutionMetadata]`
    /// - Returns: `[ImagebuilderClientTypes.WorkflowExecutionMetadata]`
    public func workflowExecutions() async throws -> [ImagebuilderClientTypes.WorkflowExecutionMetadata] {
        return try await self.asyncCompactMap { item in item.workflowExecutions }
    }
}
extension ImagebuilderClient {
    /// Paginate over `[ListWorkflowStepExecutionsOutputResponse]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListWorkflowStepExecutionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListWorkflowStepExecutionsOutputResponse`
    public func listWorkflowStepExecutionsPaginated(input: ListWorkflowStepExecutionsInput) -> ClientRuntime.PaginatorSequence<ListWorkflowStepExecutionsInput, ListWorkflowStepExecutionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListWorkflowStepExecutionsInput, ListWorkflowStepExecutionsOutputResponse>(input: input, inputKey: \ListWorkflowStepExecutionsInput.nextToken, outputKey: \ListWorkflowStepExecutionsOutputResponse.nextToken, paginationFunction: self.listWorkflowStepExecutions(input:))
    }
}

extension ListWorkflowStepExecutionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListWorkflowStepExecutionsInput {
        return ListWorkflowStepExecutionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            workflowExecutionId: self.workflowExecutionId
        )}
}

extension PaginatorSequence where Input == ListWorkflowStepExecutionsInput, Output == ListWorkflowStepExecutionsOutputResponse {
    /// This paginator transforms the `AsyncSequence` returned by `listWorkflowStepExecutionsPaginated`
    /// to access the nested member `[ImagebuilderClientTypes.WorkflowStepMetadata]`
    /// - Returns: `[ImagebuilderClientTypes.WorkflowStepMetadata]`
    public func steps() async throws -> [ImagebuilderClientTypes.WorkflowStepMetadata] {
        return try await self.asyncCompactMap { item in item.steps }
    }
}
