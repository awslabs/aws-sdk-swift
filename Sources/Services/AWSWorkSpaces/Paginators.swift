// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[DescribeWorkspaceBundlesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeWorkspaceBundlesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeWorkspaceBundlesOutputResponse`
extension WorkSpacesClient {
    public func describeWorkspaceBundlesPaginated(input: DescribeWorkspaceBundlesInput) -> ClientRuntime.PaginatorSequence<DescribeWorkspaceBundlesInput, DescribeWorkspaceBundlesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeWorkspaceBundlesInput, DescribeWorkspaceBundlesOutputResponse>(input: input, inputKey: \DescribeWorkspaceBundlesInput.nextToken, outputKey: \DescribeWorkspaceBundlesOutputResponse.nextToken, paginationFunction: self.describeWorkspaceBundles(input:))
    }
}

extension DescribeWorkspaceBundlesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeWorkspaceBundlesInput {
        return DescribeWorkspaceBundlesInput(
            bundleIds: self.bundleIds,
            nextToken: token,
            owner: self.owner
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeWorkspaceBundlesPaginated`
/// to access the nested member `[WorkSpacesClientTypes.WorkspaceBundle]`
/// - Returns: `[WorkSpacesClientTypes.WorkspaceBundle]`
extension PaginatorSequence where Input == DescribeWorkspaceBundlesInput, Output == DescribeWorkspaceBundlesOutputResponse {
    public func bundles() async throws -> [WorkSpacesClientTypes.WorkspaceBundle] {
        return try await self.asyncCompactMap { item in item.bundles }
    }
}

/// Paginate over `[DescribeWorkspaceDirectoriesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeWorkspaceDirectoriesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeWorkspaceDirectoriesOutputResponse`
extension WorkSpacesClient {
    public func describeWorkspaceDirectoriesPaginated(input: DescribeWorkspaceDirectoriesInput) -> ClientRuntime.PaginatorSequence<DescribeWorkspaceDirectoriesInput, DescribeWorkspaceDirectoriesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeWorkspaceDirectoriesInput, DescribeWorkspaceDirectoriesOutputResponse>(input: input, inputKey: \DescribeWorkspaceDirectoriesInput.nextToken, outputKey: \DescribeWorkspaceDirectoriesOutputResponse.nextToken, paginationFunction: self.describeWorkspaceDirectories(input:))
    }
}

extension DescribeWorkspaceDirectoriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeWorkspaceDirectoriesInput {
        return DescribeWorkspaceDirectoriesInput(
            directoryIds: self.directoryIds,
            limit: self.limit,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeWorkspaceDirectoriesPaginated`
/// to access the nested member `[WorkSpacesClientTypes.WorkspaceDirectory]`
/// - Returns: `[WorkSpacesClientTypes.WorkspaceDirectory]`
extension PaginatorSequence where Input == DescribeWorkspaceDirectoriesInput, Output == DescribeWorkspaceDirectoriesOutputResponse {
    public func directories() async throws -> [WorkSpacesClientTypes.WorkspaceDirectory] {
        return try await self.asyncCompactMap { item in item.directories }
    }
}

/// Paginate over `[DescribeWorkspacesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[DescribeWorkspacesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `DescribeWorkspacesOutputResponse`
extension WorkSpacesClient {
    public func describeWorkspacesPaginated(input: DescribeWorkspacesInput) -> ClientRuntime.PaginatorSequence<DescribeWorkspacesInput, DescribeWorkspacesOutputResponse> {
        return ClientRuntime.PaginatorSequence<DescribeWorkspacesInput, DescribeWorkspacesOutputResponse>(input: input, inputKey: \DescribeWorkspacesInput.nextToken, outputKey: \DescribeWorkspacesOutputResponse.nextToken, paginationFunction: self.describeWorkspaces(input:))
    }
}

extension DescribeWorkspacesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> DescribeWorkspacesInput {
        return DescribeWorkspacesInput(
            bundleId: self.bundleId,
            directoryId: self.directoryId,
            limit: self.limit,
            nextToken: token,
            userName: self.userName,
            workspaceIds: self.workspaceIds
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `describeWorkspacesPaginated`
/// to access the nested member `[WorkSpacesClientTypes.Workspace]`
/// - Returns: `[WorkSpacesClientTypes.Workspace]`
extension PaginatorSequence where Input == DescribeWorkspacesInput, Output == DescribeWorkspacesOutputResponse {
    public func workspaces() async throws -> [WorkSpacesClientTypes.Workspace] {
        return try await self.asyncCompactMap { item in item.workspaces }
    }
}
