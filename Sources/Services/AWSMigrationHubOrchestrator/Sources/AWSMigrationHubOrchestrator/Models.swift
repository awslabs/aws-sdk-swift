//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

/// You do not have sufficient access to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The resource is not available.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The input fails to satisfy the constraints specified by an AWS service.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tags added to a resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

/// An internal error has occurred.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// A map of key value pairs that is generated when you create a migration workflow. The key value pairs will differ based on your selection of the template.
    public enum StepInput: Swift.Sendable {
        /// The value of the integer.
        case integervalue(Swift.Int)
        /// String value.
        case stringvalue(Swift.String)
        /// List of string values.
        case listofstringsvalue([Swift.String])
        /// Map of string values.
        case mapofstringvalue([Swift.String: Swift.String])
        case sdkUnknown(Swift.String)
    }
}

public struct CreateWorkflowInput: Swift.Sendable {
    /// The configuration ID of the application configured in Application Discovery Service.
    public var applicationConfigurationId: Swift.String?
    /// The description of the migration workflow.
    public var description: Swift.String?
    /// The input parameters required to create a migration workflow.
    /// This member is required.
    public var inputParameters: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]?
    /// The name of the migration workflow.
    /// This member is required.
    public var name: Swift.String?
    /// The servers on which a step will be run.
    public var stepTargets: [Swift.String]?
    /// The tags to add on a migration workflow.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the template.
    /// This member is required.
    public var templateId: Swift.String?

    public init(
        applicationConfigurationId: Swift.String? = nil,
        description: Swift.String? = nil,
        inputParameters: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]? = nil,
        name: Swift.String? = nil,
        stepTargets: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.applicationConfigurationId = applicationConfigurationId
        self.description = description
        self.inputParameters = inputParameters
        self.name = name
        self.stepTargets = stepTargets
        self.tags = tags
        self.templateId = templateId
    }
}

extension CreateWorkflowInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWorkflowInput(applicationConfigurationId: \(Swift.String(describing: applicationConfigurationId)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), stepTargets: \(Swift.String(describing: stepTargets)), tags: \(Swift.String(describing: tags)), templateId: \(Swift.String(describing: templateId)), inputParameters: \"CONTENT_REDACTED\")"}
}

extension MigrationHubOrchestratorClientTypes {

    public enum MigrationWorkflowStatusEnum: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case creating
        case creationFailed
        case deleted
        case deleting
        case deletionFailed
        case inProgress
        case notStarted
        case paused
        case pausing
        case pausingFailed
        case starting
        case userAttentionRequired
        case workflowFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [MigrationWorkflowStatusEnum] {
            return [
                .completed,
                .creating,
                .creationFailed,
                .deleted,
                .deleting,
                .deletionFailed,
                .inProgress,
                .notStarted,
                .paused,
                .pausing,
                .pausingFailed,
                .starting,
                .userAttentionRequired,
                .workflowFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .creating: return "CREATING"
            case .creationFailed: return "CREATION_FAILED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .deletionFailed: return "DELETION_FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notStarted: return "NOT_STARTED"
            case .paused: return "PAUSED"
            case .pausing: return "PAUSING"
            case .pausingFailed: return "PAUSING_FAILED"
            case .starting: return "STARTING"
            case .userAttentionRequired: return "USER_ATTENTION_REQUIRED"
            case .workflowFailed: return "WORKFLOW_FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateWorkflowOutput: Swift.Sendable {
    /// The configuration ID of the application configured in Application Discovery Service.
    public var adsApplicationConfigurationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// The time at which the migration workflow was created.
    public var creationTime: Foundation.Date?
    /// The description of the migration workflow.
    public var description: Swift.String?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The name of the migration workflow.
    public var name: Swift.String?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The servers on which a step will be run.
    public var stepTargets: [Swift.String]?
    /// The tags to add on a migration workflow.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the template.
    public var templateId: Swift.String?
    /// The inputs for creating a migration workflow.
    public var workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]?

    public init(
        adsApplicationConfigurationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        stepTargets: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateId: Swift.String? = nil,
        workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]? = nil
    )
    {
        self.adsApplicationConfigurationId = adsApplicationConfigurationId
        self.arn = arn
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.name = name
        self.status = status
        self.stepTargets = stepTargets
        self.tags = tags
        self.templateId = templateId
        self.workflowInputs = workflowInputs
    }
}

extension CreateWorkflowOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateWorkflowOutput(adsApplicationConfigurationId: \(Swift.String(describing: adsApplicationConfigurationId)), arn: \(Swift.String(describing: arn)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), stepTargets: \(Swift.String(describing: stepTargets)), tags: \(Swift.String(describing: tags)), templateId: \(Swift.String(describing: templateId)), workflowInputs: \"CONTENT_REDACTED\")"}
}

public struct DeleteWorkflowInput: Swift.Sendable {
    /// The ID of the migration workflow you want to delete.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteWorkflowOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.status = status
    }
}

public struct GetWorkflowInput: Swift.Sendable {
    /// The ID of the migration workflow.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// List of AWS services utilized in a migration workflow.
    public struct Tool: Swift.Sendable {
        /// The name of an AWS service.
        public var name: Swift.String?
        /// The URL of an AWS service.
        public var url: Swift.String?

        public init(
            name: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.name = name
            self.url = url
        }
    }
}

public struct GetWorkflowOutput: Swift.Sendable {
    /// The configuration ID of the application configured in Application Discovery Service.
    public var adsApplicationConfigurationId: Swift.String?
    /// The name of the application configured in Application Discovery Service.
    public var adsApplicationName: Swift.String?
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// Get a list of completed steps in the migration workflow.
    public var completedSteps: Swift.Int?
    /// The time at which the migration workflow was created.
    public var creationTime: Foundation.Date?
    /// The description of the migration workflow.
    public var description: Swift.String?
    /// The time at which the migration workflow ended.
    public var endTime: Foundation.Date?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The time at which the migration workflow was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The time at which the migration workflow was last started.
    public var lastStartTime: Foundation.Date?
    /// The time at which the migration workflow was last stopped.
    public var lastStopTime: Foundation.Date?
    /// The name of the migration workflow.
    public var name: Swift.String?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The status message of the migration workflow.
    public var statusMessage: Swift.String?
    /// The tags added to the migration workflow.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the template.
    public var templateId: Swift.String?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?
    /// The total number of steps in the migration workflow.
    public var totalSteps: Swift.Int?
    /// The Amazon S3 bucket where the migration logs are stored.
    public var workflowBucket: Swift.String?
    /// The inputs required for creating the migration workflow.
    public var workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]?

    public init(
        adsApplicationConfigurationId: Swift.String? = nil,
        adsApplicationName: Swift.String? = nil,
        arn: Swift.String? = nil,
        completedSteps: Swift.Int? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        id: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lastStartTime: Foundation.Date? = nil,
        lastStopTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        statusMessage: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateId: Swift.String? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil,
        totalSteps: Swift.Int? = nil,
        workflowBucket: Swift.String? = nil,
        workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]? = nil
    )
    {
        self.adsApplicationConfigurationId = adsApplicationConfigurationId
        self.adsApplicationName = adsApplicationName
        self.arn = arn
        self.completedSteps = completedSteps
        self.creationTime = creationTime
        self.description = description
        self.endTime = endTime
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.lastStartTime = lastStartTime
        self.lastStopTime = lastStopTime
        self.name = name
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
        self.templateId = templateId
        self.tools = tools
        self.totalSteps = totalSteps
        self.workflowBucket = workflowBucket
        self.workflowInputs = workflowInputs
    }
}

extension GetWorkflowOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetWorkflowOutput(adsApplicationConfigurationId: \(Swift.String(describing: adsApplicationConfigurationId)), adsApplicationName: \(Swift.String(describing: adsApplicationName)), arn: \(Swift.String(describing: arn)), completedSteps: \(Swift.String(describing: completedSteps)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), endTime: \(Swift.String(describing: endTime)), id: \(Swift.String(describing: id)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), lastStartTime: \(Swift.String(describing: lastStartTime)), lastStopTime: \(Swift.String(describing: lastStopTime)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), statusMessage: \(Swift.String(describing: statusMessage)), tags: \(Swift.String(describing: tags)), templateId: \(Swift.String(describing: templateId)), tools: \(Swift.String(describing: tools)), totalSteps: \(Swift.String(describing: totalSteps)), workflowBucket: \(Swift.String(describing: workflowBucket)), workflowInputs: \"CONTENT_REDACTED\")"}
}

public struct ListWorkflowsInput: Swift.Sendable {
    /// The name of the application configured in Application Discovery Service.
    public var adsApplicationConfigurationName: Swift.String?
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The name of the migration workflow.
    public var name: Swift.String?
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The ID of the template.
    public var templateId: Swift.String?

    public init(
        adsApplicationConfigurationName: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.adsApplicationConfigurationName = adsApplicationConfigurationName
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
        self.status = status
        self.templateId = templateId
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of a migration workflow.
    public struct MigrationWorkflowSummary: Swift.Sendable {
        /// The name of the application configured in Application Discovery Service.
        public var adsApplicationConfigurationName: Swift.String?
        /// The steps completed in the migration workflow.
        public var completedSteps: Swift.Int?
        /// The time at which the migration workflow was created.
        public var creationTime: Foundation.Date?
        /// The time at which the migration workflow ended.
        public var endTime: Foundation.Date?
        /// The ID of the migration workflow.
        public var id: Swift.String?
        /// The name of the migration workflow.
        public var name: Swift.String?
        /// The status of the migration workflow.
        public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
        /// The status message of the migration workflow.
        public var statusMessage: Swift.String?
        /// The ID of the template.
        public var templateId: Swift.String?
        /// All the steps in a migration workflow.
        public var totalSteps: Swift.Int?

        public init(
            adsApplicationConfigurationName: Swift.String? = nil,
            completedSteps: Swift.Int? = nil,
            creationTime: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
            statusMessage: Swift.String? = nil,
            templateId: Swift.String? = nil,
            totalSteps: Swift.Int? = nil
        )
        {
            self.adsApplicationConfigurationName = adsApplicationConfigurationName
            self.completedSteps = completedSteps
            self.creationTime = creationTime
            self.endTime = endTime
            self.id = id
            self.name = name
            self.status = status
            self.statusMessage = statusMessage
            self.templateId = templateId
            self.totalSteps = totalSteps
        }
    }
}

public struct ListWorkflowsOutput: Swift.Sendable {
    /// The summary of the migration workflow.
    /// This member is required.
    public var migrationWorkflowSummary: [MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary]?
    /// The pagination token.
    public var nextToken: Swift.String?

    public init(
        migrationWorkflowSummary: [MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.migrationWorkflowSummary = migrationWorkflowSummary
        self.nextToken = nextToken
    }
}

public struct StartWorkflowInput: Swift.Sendable {
    /// The ID of the migration workflow.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct StartWorkflowOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The time at which the migration workflow was last started.
    public var lastStartTime: Foundation.Date?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The status message of the migration workflow.
    public var statusMessage: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        lastStartTime: Foundation.Date? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.lastStartTime = lastStartTime
        self.status = status
        self.statusMessage = statusMessage
    }
}

public struct StopWorkflowInput: Swift.Sendable {
    /// The ID of the migration workflow.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct StopWorkflowOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The time at which the migration workflow was stopped.
    public var lastStopTime: Foundation.Date?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The status message of the migration workflow.
    public var statusMessage: Swift.String?

    public init(
        arn: Swift.String? = nil,
        id: Swift.String? = nil,
        lastStopTime: Foundation.Date? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.arn = arn
        self.id = id
        self.lastStopTime = lastStopTime
        self.status = status
        self.statusMessage = statusMessage
    }
}

public struct UpdateWorkflowInput: Swift.Sendable {
    /// The description of the migration workflow.
    public var description: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var id: Swift.String?
    /// The input parameters required to update a migration workflow.
    public var inputParameters: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]?
    /// The name of the migration workflow.
    public var name: Swift.String?
    /// The servers on which a step will be run.
    public var stepTargets: [Swift.String]?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        inputParameters: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]? = nil,
        name: Swift.String? = nil,
        stepTargets: [Swift.String]? = nil
    )
    {
        self.description = description
        self.id = id
        self.inputParameters = inputParameters
        self.name = name
        self.stepTargets = stepTargets
    }
}

extension UpdateWorkflowInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWorkflowInput(description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), stepTargets: \(Swift.String(describing: stepTargets)), inputParameters: \"CONTENT_REDACTED\")"}
}

public struct UpdateWorkflowOutput: Swift.Sendable {
    /// The ID of the application configured in Application Discovery Service.
    public var adsApplicationConfigurationId: Swift.String?
    /// The Amazon Resource Name (ARN) of the migration workflow.
    public var arn: Swift.String?
    /// The time at which the migration workflow was created.
    public var creationTime: Foundation.Date?
    /// The description of the migration workflow.
    public var description: Swift.String?
    /// The ID of the migration workflow.
    public var id: Swift.String?
    /// The time at which the migration workflow was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the migration workflow.
    public var name: Swift.String?
    /// The status of the migration workflow.
    public var status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    /// The servers on which a step will be run.
    public var stepTargets: [Swift.String]?
    /// The tags added to the migration workflow.
    public var tags: [Swift.String: Swift.String]?
    /// The ID of the template.
    public var templateId: Swift.String?
    /// The inputs required to update a migration workflow.
    public var workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]?

    public init(
        adsApplicationConfigurationId: Swift.String? = nil,
        arn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum? = nil,
        stepTargets: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateId: Swift.String? = nil,
        workflowInputs: [Swift.String: MigrationHubOrchestratorClientTypes.StepInput]? = nil
    )
    {
        self.adsApplicationConfigurationId = adsApplicationConfigurationId
        self.arn = arn
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.status = status
        self.stepTargets = stepTargets
        self.tags = tags
        self.templateId = templateId
        self.workflowInputs = workflowInputs
    }
}

extension UpdateWorkflowOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateWorkflowOutput(adsApplicationConfigurationId: \(Swift.String(describing: adsApplicationConfigurationId)), arn: \(Swift.String(describing: arn)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)), stepTargets: \(Swift.String(describing: stepTargets)), tags: \(Swift.String(describing: tags)), templateId: \(Swift.String(describing: templateId)), workflowInputs: \"CONTENT_REDACTED\")"}
}

/// This exception is thrown when an attempt to update or delete a resource would cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The migration workflow template used as the source for the new template.
    public enum TemplateSource: Swift.Sendable {
        /// The ID of the workflow from the source migration workflow template.
        case workflowid(Swift.String)
        case sdkUnknown(Swift.String)
    }
}

public struct CreateTemplateInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Idempotency](https://smithy.io/2.0/spec/behavior-traits.html#idempotencytoken-trait) in the Smithy documentation.
    public var clientToken: Swift.String?
    /// The tags to add to the migration workflow template.
    public var tags: [Swift.String: Swift.String]?
    /// A description of the migration workflow template.
    public var templateDescription: Swift.String?
    /// The name of the migration workflow template.
    /// This member is required.
    public var templateName: Swift.String?
    /// The source of the migration workflow template.
    /// This member is required.
    public var templateSource: MigrationHubOrchestratorClientTypes.TemplateSource?

    public init(
        clientToken: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateDescription: Swift.String? = nil,
        templateName: Swift.String? = nil,
        templateSource: MigrationHubOrchestratorClientTypes.TemplateSource? = nil
    )
    {
        self.clientToken = clientToken
        self.tags = tags
        self.templateDescription = templateDescription
        self.templateName = templateName
        self.templateSource = templateSource
    }
}

public struct CreateTemplateOutput: Swift.Sendable {
    /// The tags added to the migration workflow template.
    public var tags: [Swift.String: Swift.String]?
    /// The Amazon Resource Name (ARN) of the migration workflow template. The format for an Migration Hub Orchestrator template ARN is arn:aws:migrationhub-orchestrator:region:account:template/template-abcd1234. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) in the AWS General Reference.
    public var templateArn: Swift.String?
    /// The ID of the migration workflow template.
    public var templateId: Swift.String?

    public init(
        tags: [Swift.String: Swift.String]? = nil,
        templateArn: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.tags = tags
        self.templateArn = templateArn
        self.templateId = templateId
    }
}

public struct DeleteTemplateInput: Swift.Sendable {
    /// The ID of the request to delete a migration workflow template.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteTemplateOutput: Swift.Sendable {

    public init() { }
}

public struct GetTemplateInput: Swift.Sendable {
    /// The ID of the template.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum DataType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case integer
        case string
        case stringlist
        case stringmap
        case sdkUnknown(Swift.String)

        public static var allCases: [DataType] {
            return [
                .integer,
                .string,
                .stringlist,
                .stringmap
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .integer: return "INTEGER"
            case .string: return "STRING"
            case .stringlist: return "STRINGLIST"
            case .stringmap: return "STRINGMAP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The input parameters of a template.
    public struct TemplateInput: Swift.Sendable {
        /// The data type of the template input.
        public var dataType: MigrationHubOrchestratorClientTypes.DataType?
        /// The name of the template.
        public var inputName: Swift.String?
        /// Determine if an input is required from the template.
        public var `required`: Swift.Bool?

        public init(
            dataType: MigrationHubOrchestratorClientTypes.DataType? = nil,
            inputName: Swift.String? = nil,
            `required`: Swift.Bool? = nil
        )
        {
            self.dataType = dataType
            self.inputName = inputName
            self.`required` = `required`
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum TemplateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case creating
        case creationFailed
        case pendingCreation
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStatus] {
            return [
                .created,
                .creating,
                .creationFailed,
                .pendingCreation,
                .ready
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .creating: return "CREATING"
            case .creationFailed: return "CREATION_FAILED"
            case .pendingCreation: return "PENDING_CREATION"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTemplateOutput: Swift.Sendable {
    /// The time at which the template was last created.
    public var creationTime: Foundation.Date?
    /// The time at which the template was last created.
    public var description: Swift.String?
    /// The ID of the template.
    public var id: Swift.String?
    /// The inputs provided for the creation of the migration workflow.
    public var inputs: [MigrationHubOrchestratorClientTypes.TemplateInput]?
    /// The name of the template.
    public var name: Swift.String?
    /// The owner of the migration workflow template.
    public var owner: Swift.String?
    /// The status of the template.
    public var status: MigrationHubOrchestratorClientTypes.TemplateStatus?
    /// The status message of retrieving migration workflow templates.
    public var statusMessage: Swift.String?
    /// The tags added to the migration workflow template.
    public var tags: [Swift.String: Swift.String]?
    /// >The Amazon Resource Name (ARN) of the migration workflow template. The format for an Migration Hub Orchestrator template ARN is arn:aws:migrationhub-orchestrator:region:account:template/template-abcd1234. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) in the AWS General Reference.
    public var templateArn: Swift.String?
    /// The class of the migration workflow template. The available template classes are:
    ///
    /// * A2C
    ///
    /// * MGN
    ///
    /// * SAP_MULTI
    ///
    /// * SQL_EC2
    ///
    /// * SQL_RDS
    ///
    /// * VMIE
    public var templateClass: Swift.String?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        inputs: [MigrationHubOrchestratorClientTypes.TemplateInput]? = nil,
        name: Swift.String? = nil,
        owner: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.TemplateStatus? = nil,
        statusMessage: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        templateArn: Swift.String? = nil,
        templateClass: Swift.String? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.inputs = inputs
        self.name = name
        self.owner = owner
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
        self.templateArn = templateArn
        self.templateClass = templateClass
        self.tools = tools
    }
}

public struct ListTemplatesInput: Swift.Sendable {
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The name of the template.
    public var name: Swift.String?
    /// The pagination token.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        name: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.name = name
        self.nextToken = nextToken
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of the template.
    public struct TemplateSummary: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the template.
        public var arn: Swift.String?
        /// The description of the template.
        public var description: Swift.String?
        /// The ID of the template.
        public var id: Swift.String?
        /// The name of the template.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.id = id
            self.name = name
        }
    }
}

public struct ListTemplatesOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The summary of the template.
    /// This member is required.
    public var templateSummary: [MigrationHubOrchestratorClientTypes.TemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templateSummary: [MigrationHubOrchestratorClientTypes.TemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templateSummary = templateSummary
    }
}

public struct UpdateTemplateInput: Swift.Sendable {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The ID of the request to update a migration workflow template.
    /// This member is required.
    public var id: Swift.String?
    /// The description of the migration workflow template to update.
    public var templateDescription: Swift.String?
    /// The name of the migration workflow template to update.
    public var templateName: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        id: Swift.String? = nil,
        templateDescription: Swift.String? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.id = id
        self.templateDescription = templateDescription
        self.templateName = templateName
    }
}

public struct UpdateTemplateOutput: Swift.Sendable {
    /// The tags added to the migration workflow template.
    public var tags: [Swift.String: Swift.String]?
    /// The ARN of the migration workflow template being updated. The format for an Migration Hub Orchestrator template ARN is arn:aws:migrationhub-orchestrator:region:account:template/template-abcd1234. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) in the AWS General Reference.
    public var templateArn: Swift.String?
    /// The ID of the migration workflow template being updated.
    public var templateId: Swift.String?

    public init(
        tags: [Swift.String: Swift.String]? = nil,
        templateArn: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.tags = tags
        self.templateArn = templateArn
        self.templateId = templateId
    }
}

public struct ListPluginsInput: Swift.Sendable {
    /// The maximum number of plugins that can be returned.
    public var maxResults: Swift.Int
    /// The pagination token.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum PluginHealth: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pluginHealthy
        case pluginUnhealthy
        case sdkUnknown(Swift.String)

        public static var allCases: [PluginHealth] {
            return [
                .pluginHealthy,
                .pluginUnhealthy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pluginHealthy: return "HEALTHY"
            case .pluginUnhealthy: return "UNHEALTHY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of the Migration Hub Orchestrator plugin.
    public struct PluginSummary: Swift.Sendable {
        /// The name of the host.
        public var hostname: Swift.String?
        /// The IP address at which the plugin is located.
        public var ipAddress: Swift.String?
        /// The ID of the plugin.
        public var pluginId: Swift.String?
        /// The time at which the plugin was registered.
        public var registeredTime: Swift.String?
        /// The status of the plugin.
        public var status: MigrationHubOrchestratorClientTypes.PluginHealth?
        /// The version of the plugin.
        public var version: Swift.String?

        public init(
            hostname: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            pluginId: Swift.String? = nil,
            registeredTime: Swift.String? = nil,
            status: MigrationHubOrchestratorClientTypes.PluginHealth? = nil,
            version: Swift.String? = nil
        )
        {
            self.hostname = hostname
            self.ipAddress = ipAddress
            self.pluginId = pluginId
            self.registeredTime = registeredTime
            self.status = status
            self.version = version
        }
    }
}

public struct ListPluginsOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// Migration Hub Orchestrator plugins.
    public var plugins: [MigrationHubOrchestratorClientTypes.PluginSummary]?

    public init(
        nextToken: Swift.String? = nil,
        plugins: [MigrationHubOrchestratorClientTypes.PluginSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.plugins = plugins
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource to which you want to add tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A collection of labels, in the form of key:value pairs, that apply to this resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct GetTemplateStepInput: Swift.Sendable {
    /// The ID of the step.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the template.
    /// This member is required.
    public var templateId: Swift.String?

    public init(
        id: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.id = id
        self.stepGroupId = stepGroupId
        self.templateId = templateId
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The output of the step.
    public struct StepOutput: Swift.Sendable {
        /// The data type of the step output.
        public var dataType: MigrationHubOrchestratorClientTypes.DataType?
        /// The name of the step.
        public var name: Swift.String?
        /// Determine if an output is required from a step.
        public var `required`: Swift.Bool?

        public init(
            dataType: MigrationHubOrchestratorClientTypes.DataType? = nil,
            name: Swift.String? = nil,
            `required`: Swift.Bool? = nil
        )
        {
            self.dataType = dataType
            self.name = name
            self.`required` = `required`
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum StepActionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automated
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [StepActionType] {
            return [
                .automated,
                .manual
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automated: return "AUTOMATED"
            case .manual: return "MANUAL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// Command to be run on a particular operating system.
    public struct PlatformCommand: Swift.Sendable {
        /// Command for Linux.
        public var linux: Swift.String?
        /// Command for Windows.
        public var windows: Swift.String?

        public init(
            linux: Swift.String? = nil,
            windows: Swift.String? = nil
        )
        {
            self.linux = linux
            self.windows = windows
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum RunEnvironment: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aws
        case onpremise
        case sdkUnknown(Swift.String)

        public static var allCases: [RunEnvironment] {
            return [
                .aws,
                .onpremise
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .onpremise: return "ONPREMISE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The script location for a particular operating system.
    public struct PlatformScriptKey: Swift.Sendable {
        /// The script location for Linux.
        public var linux: Swift.String?
        /// The script location for Windows.
        public var windows: Swift.String?

        public init(
            linux: Swift.String? = nil,
            windows: Swift.String? = nil
        )
        {
            self.linux = linux
            self.windows = windows
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum TargetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `none`
        case single
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .all,
                .none,
                .single
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .none: return "NONE"
            case .single: return "SINGLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The custom script to run tests on source or target environments.
    public struct StepAutomationConfiguration: Swift.Sendable {
        /// The command to run the script.
        public var command: MigrationHubOrchestratorClientTypes.PlatformCommand?
        /// The source or target environment.
        public var runEnvironment: MigrationHubOrchestratorClientTypes.RunEnvironment?
        /// The Amazon S3 bucket where the script is located.
        public var scriptLocationS3Bucket: Swift.String?
        /// The Amazon S3 key for the script location.
        public var scriptLocationS3Key: MigrationHubOrchestratorClientTypes.PlatformScriptKey?
        /// The servers on which to run the script.
        public var targetType: MigrationHubOrchestratorClientTypes.TargetType?

        public init(
            command: MigrationHubOrchestratorClientTypes.PlatformCommand? = nil,
            runEnvironment: MigrationHubOrchestratorClientTypes.RunEnvironment? = nil,
            scriptLocationS3Bucket: Swift.String? = nil,
            scriptLocationS3Key: MigrationHubOrchestratorClientTypes.PlatformScriptKey? = nil,
            targetType: MigrationHubOrchestratorClientTypes.TargetType? = nil
        )
        {
            self.command = command
            self.runEnvironment = runEnvironment
            self.scriptLocationS3Bucket = scriptLocationS3Bucket
            self.scriptLocationS3Key = scriptLocationS3Key
            self.targetType = targetType
        }
    }
}

public struct GetTemplateStepOutput: Swift.Sendable {
    /// The time at which the step was created.
    public var creationTime: Swift.String?
    /// The description of the step.
    public var description: Swift.String?
    /// The ID of the step.
    public var id: Swift.String?
    /// The name of the step.
    public var name: Swift.String?
    /// The next step.
    public var next: [Swift.String]?
    /// The outputs of the step.
    public var outputs: [MigrationHubOrchestratorClientTypes.StepOutput]?
    /// The previous step.
    public var previous: [Swift.String]?
    /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
    public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    /// The custom script to run tests on source or target environments.
    public var stepAutomationConfiguration: MigrationHubOrchestratorClientTypes.StepAutomationConfiguration?
    /// The ID of the step group.
    public var stepGroupId: Swift.String?
    /// The ID of the template.
    public var templateId: Swift.String?

    public init(
        creationTime: Swift.String? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        outputs: [MigrationHubOrchestratorClientTypes.StepOutput]? = nil,
        previous: [Swift.String]? = nil,
        stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
        stepAutomationConfiguration: MigrationHubOrchestratorClientTypes.StepAutomationConfiguration? = nil,
        stepGroupId: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.name = name
        self.next = next
        self.outputs = outputs
        self.previous = previous
        self.stepActionType = stepActionType
        self.stepAutomationConfiguration = stepAutomationConfiguration
        self.stepGroupId = stepGroupId
        self.templateId = templateId
    }
}

public struct ListTemplateStepsInput: Swift.Sendable {
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the template.
    /// This member is required.
    public var templateId: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stepGroupId = stepGroupId
        self.templateId = templateId
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum Owner: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsmanaged
        case custom
        case sdkUnknown(Swift.String)

        public static var allCases: [Owner] {
            return [
                .awsmanaged,
                .custom
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsmanaged: return "AWS_MANAGED"
            case .custom: return "CUSTOM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of the step.
    public struct TemplateStepSummary: Swift.Sendable {
        /// The ID of the step.
        public var id: Swift.String?
        /// The name of the step.
        public var name: Swift.String?
        /// The next step.
        public var next: [Swift.String]?
        /// The owner of the step.
        public var owner: MigrationHubOrchestratorClientTypes.Owner?
        /// The previous step.
        public var previous: [Swift.String]?
        /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
        public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
        /// The ID of the step group.
        public var stepGroupId: Swift.String?
        /// The servers on which to run the script.
        public var targetType: MigrationHubOrchestratorClientTypes.TargetType?
        /// The ID of the template.
        public var templateId: Swift.String?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            next: [Swift.String]? = nil,
            owner: MigrationHubOrchestratorClientTypes.Owner? = nil,
            previous: [Swift.String]? = nil,
            stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
            stepGroupId: Swift.String? = nil,
            targetType: MigrationHubOrchestratorClientTypes.TargetType? = nil,
            templateId: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
            self.next = next
            self.owner = owner
            self.previous = previous
            self.stepActionType = stepActionType
            self.stepGroupId = stepGroupId
            self.targetType = targetType
            self.templateId = templateId
        }
    }
}

public struct ListTemplateStepsOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The list of summaries of steps in a template.
    public var templateStepSummaryList: [MigrationHubOrchestratorClientTypes.TemplateStepSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templateStepSummaryList: [MigrationHubOrchestratorClientTypes.TemplateStepSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templateStepSummaryList = templateStepSummaryList
    }
}

public struct GetTemplateStepGroupInput: Swift.Sendable {
    /// The ID of the step group.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the template.
    /// This member is required.
    public var templateId: Swift.String?

    public init(
        id: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.id = id
        self.templateId = templateId
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum StepGroupStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awaitingDependencies
        case completed
        case failed
        case inProgress
        case paused
        case pausing
        case ready
        case userAttentionRequired
        case sdkUnknown(Swift.String)

        public static var allCases: [StepGroupStatus] {
            return [
                .awaitingDependencies,
                .completed,
                .failed,
                .inProgress,
                .paused,
                .pausing,
                .ready,
                .userAttentionRequired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awaitingDependencies: return "AWAITING_DEPENDENCIES"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .paused: return "PAUSED"
            case .pausing: return "PAUSING"
            case .ready: return "READY"
            case .userAttentionRequired: return "USER_ATTENTION_REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTemplateStepGroupOutput: Swift.Sendable {
    /// The time at which the step group was created.
    public var creationTime: Foundation.Date?
    /// The description of the step group.
    public var description: Swift.String?
    /// The ID of the step group.
    public var id: Swift.String?
    /// The time at which the step group was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the step group.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// The status of the step group.
    public var status: MigrationHubOrchestratorClientTypes.StepGroupStatus?
    /// The ID of the template.
    public var templateId: Swift.String?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        previous: [Swift.String]? = nil,
        status: MigrationHubOrchestratorClientTypes.StepGroupStatus? = nil,
        templateId: Swift.String? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.next = next
        self.previous = previous
        self.status = status
        self.templateId = templateId
        self.tools = tools
    }
}

public struct ListTemplateStepGroupsInput: Swift.Sendable {
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The ID of the template.
    /// This member is required.
    public var templateId: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        templateId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateId = templateId
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of the step group in the template.
    public struct TemplateStepGroupSummary: Swift.Sendable {
        /// The ID of the step group.
        public var id: Swift.String?
        /// The name of the step group.
        public var name: Swift.String?
        /// The next step group.
        public var next: [Swift.String]?
        /// The previous step group.
        public var previous: [Swift.String]?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            next: [Swift.String]? = nil,
            previous: [Swift.String]? = nil
        )
        {
            self.id = id
            self.name = name
            self.next = next
            self.previous = previous
        }
    }
}

public struct ListTemplateStepGroupsOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The summary of the step group in the template.
    /// This member is required.
    public var templateStepGroupSummary: [MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templateStepGroupSummary: [MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templateStepGroupSummary = templateStepGroupSummary
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the resource from which you want to remove tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// One or more tag keys. Specify only the tag keys, not the tag values.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension MigrationHubOrchestratorClientTypes {

    /// A structure to hold multiple values of an output.
    public enum WorkflowStepOutputUnion: Swift.Sendable {
        /// The integer value.
        case integervalue(Swift.Int)
        /// The string value.
        case stringvalue(Swift.String)
        /// The list of string value.
        case listofstringvalue([Swift.String])
        case sdkUnknown(Swift.String)
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The output of a step.
    public struct WorkflowStepOutput: Swift.Sendable {
        /// The data type of the output.
        public var dataType: MigrationHubOrchestratorClientTypes.DataType?
        /// The name of the step.
        public var name: Swift.String?
        /// Determine if an output is required from a step.
        public var `required`: Swift.Bool?
        /// The value of the output.
        public var value: MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion?

        public init(
            dataType: MigrationHubOrchestratorClientTypes.DataType? = nil,
            name: Swift.String? = nil,
            `required`: Swift.Bool? = nil,
            value: MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion? = nil
        )
        {
            self.dataType = dataType
            self.name = name
            self.`required` = `required`
            self.value = value
        }
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The custom script to run tests on source or target environments.
    public struct WorkflowStepAutomationConfiguration: Swift.Sendable {
        /// The command required to run the script.
        public var command: MigrationHubOrchestratorClientTypes.PlatformCommand?
        /// The source or target environment.
        public var runEnvironment: MigrationHubOrchestratorClientTypes.RunEnvironment?
        /// The Amazon S3 bucket where the script is located.
        public var scriptLocationS3Bucket: Swift.String?
        /// The Amazon S3 key for the script location.
        public var scriptLocationS3Key: MigrationHubOrchestratorClientTypes.PlatformScriptKey?
        /// The servers on which to run the script.
        public var targetType: MigrationHubOrchestratorClientTypes.TargetType?

        public init(
            command: MigrationHubOrchestratorClientTypes.PlatformCommand? = nil,
            runEnvironment: MigrationHubOrchestratorClientTypes.RunEnvironment? = nil,
            scriptLocationS3Bucket: Swift.String? = nil,
            scriptLocationS3Key: MigrationHubOrchestratorClientTypes.PlatformScriptKey? = nil,
            targetType: MigrationHubOrchestratorClientTypes.TargetType? = nil
        )
        {
            self.command = command
            self.runEnvironment = runEnvironment
            self.scriptLocationS3Bucket = scriptLocationS3Bucket
            self.scriptLocationS3Key = scriptLocationS3Key
            self.targetType = targetType
        }
    }
}

public struct CreateWorkflowStepInput: Swift.Sendable {
    /// The description of the step.
    public var description: Swift.String?
    /// The name of the step.
    /// This member is required.
    public var name: Swift.String?
    /// The next step.
    public var next: [Swift.String]?
    /// The key value pairs added for the expected output.
    public var outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]?
    /// The previous step.
    public var previous: [Swift.String]?
    /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
    /// This member is required.
    public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The servers on which a step will be run.
    public var stepTarget: [Swift.String]?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?
    /// The custom script to run tests on source or target environments.
    public var workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]? = nil,
        previous: [Swift.String]? = nil,
        stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
        stepGroupId: Swift.String? = nil,
        stepTarget: [Swift.String]? = nil,
        workflowId: Swift.String? = nil,
        workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration? = nil
    )
    {
        self.description = description
        self.name = name
        self.next = next
        self.outputs = outputs
        self.previous = previous
        self.stepActionType = stepActionType
        self.stepGroupId = stepGroupId
        self.stepTarget = stepTarget
        self.workflowId = workflowId
        self.workflowStepAutomationConfiguration = workflowStepAutomationConfiguration
    }
}

public struct CreateWorkflowStepOutput: Swift.Sendable {
    /// The ID of the step.
    public var id: Swift.String?
    /// The name of the step.
    public var name: Swift.String?
    /// The ID of the step group.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.name = name
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

public struct DeleteWorkflowStepInput: Swift.Sendable {
    /// The ID of the step you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the step group that contains the step you want to delete.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

public struct DeleteWorkflowStepOutput: Swift.Sendable {

    public init() { }
}

public struct GetWorkflowStepInput: Swift.Sendable {
    /// The ID of the step.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

extension MigrationHubOrchestratorClientTypes {

    public enum StepStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awaitingDependencies
        case completed
        case failed
        case inProgress
        case paused
        case ready
        case skipped
        case userAttentionRequired
        case sdkUnknown(Swift.String)

        public static var allCases: [StepStatus] {
            return [
                .awaitingDependencies,
                .completed,
                .failed,
                .inProgress,
                .paused,
                .ready,
                .skipped,
                .userAttentionRequired
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awaitingDependencies: return "AWAITING_DEPENDENCIES"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .paused: return "PAUSED"
            case .ready: return "READY"
            case .skipped: return "SKIPPED"
            case .userAttentionRequired: return "USER_ATTENTION_REQUIRED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetWorkflowStepOutput: Swift.Sendable {
    /// The time at which the step was created.
    public var creationTime: Foundation.Date?
    /// The description of the step.
    public var description: Swift.String?
    /// The time at which the step ended.
    public var endTime: Foundation.Date?
    /// The time at which the workflow was last started.
    public var lastStartTime: Foundation.Date?
    /// The name of the step.
    public var name: Swift.String?
    /// The next step.
    public var next: [Swift.String]?
    /// The number of servers that have been migrated.
    public var noOfSrvCompleted: Swift.Int?
    /// The number of servers that have failed to migrate.
    public var noOfSrvFailed: Swift.Int?
    /// The outputs of the step.
    public var outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]?
    /// The owner of the step.
    public var owner: MigrationHubOrchestratorClientTypes.Owner?
    /// The previous step.
    public var previous: [Swift.String]?
    /// The output location of the script.
    public var scriptOutputLocation: Swift.String?
    /// The status of the step.
    public var status: MigrationHubOrchestratorClientTypes.StepStatus?
    /// The status message of the migration workflow.
    public var statusMessage: Swift.String?
    /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
    public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    /// The ID of the step group.
    public var stepGroupId: Swift.String?
    /// The ID of the step.
    public var stepId: Swift.String?
    /// The servers on which a step will be run.
    public var stepTarget: [Swift.String]?
    /// The total number of servers that have been migrated.
    public var totalNoOfSrv: Swift.Int?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?
    /// The custom script to run tests on source or target environments.
    public var workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        lastStartTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        noOfSrvCompleted: Swift.Int? = nil,
        noOfSrvFailed: Swift.Int? = nil,
        outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]? = nil,
        owner: MigrationHubOrchestratorClientTypes.Owner? = nil,
        previous: [Swift.String]? = nil,
        scriptOutputLocation: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.StepStatus? = nil,
        statusMessage: Swift.String? = nil,
        stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
        stepGroupId: Swift.String? = nil,
        stepId: Swift.String? = nil,
        stepTarget: [Swift.String]? = nil,
        totalNoOfSrv: Swift.Int? = nil,
        workflowId: Swift.String? = nil,
        workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.endTime = endTime
        self.lastStartTime = lastStartTime
        self.name = name
        self.next = next
        self.noOfSrvCompleted = noOfSrvCompleted
        self.noOfSrvFailed = noOfSrvFailed
        self.outputs = outputs
        self.owner = owner
        self.previous = previous
        self.scriptOutputLocation = scriptOutputLocation
        self.status = status
        self.statusMessage = statusMessage
        self.stepActionType = stepActionType
        self.stepGroupId = stepGroupId
        self.stepId = stepId
        self.stepTarget = stepTarget
        self.totalNoOfSrv = totalNoOfSrv
        self.workflowId = workflowId
        self.workflowStepAutomationConfiguration = workflowStepAutomationConfiguration
    }
}

public struct ListWorkflowStepsInput: Swift.Sendable {
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of the step in a migration workflow.
    public struct WorkflowStepSummary: Swift.Sendable {
        /// The description of the step.
        public var description: Swift.String?
        /// The name of the step.
        public var name: Swift.String?
        /// The next step.
        public var next: [Swift.String]?
        /// The number of servers that have been migrated.
        public var noOfSrvCompleted: Swift.Int?
        /// The number of servers that have failed to migrate.
        public var noOfSrvFailed: Swift.Int?
        /// The owner of the step.
        public var owner: MigrationHubOrchestratorClientTypes.Owner?
        /// The previous step.
        public var previous: [Swift.String]?
        /// The location of the script.
        public var scriptLocation: Swift.String?
        /// The status of the step.
        public var status: MigrationHubOrchestratorClientTypes.StepStatus?
        /// The status message of the migration workflow.
        public var statusMessage: Swift.String?
        /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
        public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
        /// The ID of the step.
        public var stepId: Swift.String?
        /// The total number of servers that have been migrated.
        public var totalNoOfSrv: Swift.Int?

        public init(
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            next: [Swift.String]? = nil,
            noOfSrvCompleted: Swift.Int? = nil,
            noOfSrvFailed: Swift.Int? = nil,
            owner: MigrationHubOrchestratorClientTypes.Owner? = nil,
            previous: [Swift.String]? = nil,
            scriptLocation: Swift.String? = nil,
            status: MigrationHubOrchestratorClientTypes.StepStatus? = nil,
            statusMessage: Swift.String? = nil,
            stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
            stepId: Swift.String? = nil,
            totalNoOfSrv: Swift.Int? = nil
        )
        {
            self.description = description
            self.name = name
            self.next = next
            self.noOfSrvCompleted = noOfSrvCompleted
            self.noOfSrvFailed = noOfSrvFailed
            self.owner = owner
            self.previous = previous
            self.scriptLocation = scriptLocation
            self.status = status
            self.statusMessage = statusMessage
            self.stepActionType = stepActionType
            self.stepId = stepId
            self.totalNoOfSrv = totalNoOfSrv
        }
    }
}

public struct ListWorkflowStepsOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The summary of steps in a migration workflow.
    /// This member is required.
    public var workflowStepsSummary: [MigrationHubOrchestratorClientTypes.WorkflowStepSummary]?

    public init(
        nextToken: Swift.String? = nil,
        workflowStepsSummary: [MigrationHubOrchestratorClientTypes.WorkflowStepSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.workflowStepsSummary = workflowStepsSummary
    }
}

public struct RetryWorkflowStepInput: Swift.Sendable {
    /// The ID of the step.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

public struct RetryWorkflowStepOutput: Swift.Sendable {
    /// The ID of the step.
    public var id: Swift.String?
    /// The status of the step.
    public var status: MigrationHubOrchestratorClientTypes.StepStatus?
    /// The ID of the step group.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        status: MigrationHubOrchestratorClientTypes.StepStatus? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.status = status
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

public struct UpdateWorkflowStepInput: Swift.Sendable {
    /// The description of the step.
    public var description: Swift.String?
    /// The ID of the step.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the step.
    public var name: Swift.String?
    /// The next step.
    public var next: [Swift.String]?
    /// The outputs of a step.
    public var outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]?
    /// The previous step.
    public var previous: [Swift.String]?
    /// The status of the step.
    public var status: MigrationHubOrchestratorClientTypes.StepStatus?
    /// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
    public var stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    /// The ID of the step group.
    /// This member is required.
    public var stepGroupId: Swift.String?
    /// The servers on which a step will be run.
    public var stepTarget: [Swift.String]?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?
    /// The custom script to run tests on the source and target environments.
    public var workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]? = nil,
        previous: [Swift.String]? = nil,
        status: MigrationHubOrchestratorClientTypes.StepStatus? = nil,
        stepActionType: MigrationHubOrchestratorClientTypes.StepActionType? = nil,
        stepGroupId: Swift.String? = nil,
        stepTarget: [Swift.String]? = nil,
        workflowId: Swift.String? = nil,
        workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
        self.next = next
        self.outputs = outputs
        self.previous = previous
        self.status = status
        self.stepActionType = stepActionType
        self.stepGroupId = stepGroupId
        self.stepTarget = stepTarget
        self.workflowId = workflowId
        self.workflowStepAutomationConfiguration = workflowStepAutomationConfiguration
    }
}

public struct UpdateWorkflowStepOutput: Swift.Sendable {
    /// The ID of the step.
    public var id: Swift.String?
    /// The name of the step.
    public var name: Swift.String?
    /// The ID of the step group.
    public var stepGroupId: Swift.String?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        stepGroupId: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.name = name
        self.stepGroupId = stepGroupId
        self.workflowId = workflowId
    }
}

public struct CreateWorkflowStepGroupInput: Swift.Sendable {
    /// The description of the step group.
    public var description: Swift.String?
    /// The name of the step group.
    /// This member is required.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// The ID of the migration workflow that will contain the step group.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        previous: [Swift.String]? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.next = next
        self.previous = previous
        self.workflowId = workflowId
    }
}

public struct CreateWorkflowStepGroupOutput: Swift.Sendable {
    /// The time at which the step group is created.
    public var creationTime: Foundation.Date?
    /// The description of the step group.
    public var description: Swift.String?
    /// The ID of the step group.
    public var id: Swift.String?
    /// The name of the step group.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?
    /// The ID of the migration workflow that contains the step group.
    public var workflowId: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        previous: [Swift.String]? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.id = id
        self.name = name
        self.next = next
        self.previous = previous
        self.tools = tools
        self.workflowId = workflowId
    }
}

public struct DeleteWorkflowStepGroupInput: Swift.Sendable {
    /// The ID of the step group you want to delete.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.workflowId = workflowId
    }
}

public struct DeleteWorkflowStepGroupOutput: Swift.Sendable {

    public init() { }
}

public struct GetWorkflowStepGroupInput: Swift.Sendable {
    /// The ID of the step group.
    /// This member is required.
    public var id: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        id: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.id = id
        self.workflowId = workflowId
    }
}

public struct GetWorkflowStepGroupOutput: Swift.Sendable {
    /// The time at which the step group was created.
    public var creationTime: Foundation.Date?
    /// The description of the step group.
    public var description: Swift.String?
    /// The time at which the step group ended.
    public var endTime: Foundation.Date?
    /// The ID of the step group.
    public var id: Swift.String?
    /// The time at which the step group was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the step group.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The owner of the step group.
    public var owner: MigrationHubOrchestratorClientTypes.Owner?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// The status of the step group.
    public var status: MigrationHubOrchestratorClientTypes.StepGroupStatus?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        id: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        owner: MigrationHubOrchestratorClientTypes.Owner? = nil,
        previous: [Swift.String]? = nil,
        status: MigrationHubOrchestratorClientTypes.StepGroupStatus? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.endTime = endTime
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.next = next
        self.owner = owner
        self.previous = previous
        self.status = status
        self.tools = tools
        self.workflowId = workflowId
    }
}

public struct ListWorkflowStepGroupsInput: Swift.Sendable {
    /// The maximum number of results that can be returned.
    public var maxResults: Swift.Int
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.workflowId = workflowId
    }
}

extension MigrationHubOrchestratorClientTypes {

    /// The summary of a step group in a workflow.
    public struct WorkflowStepGroupSummary: Swift.Sendable {
        /// The ID of the step group.
        public var id: Swift.String?
        /// The name of the step group.
        public var name: Swift.String?
        /// The next step group.
        public var next: [Swift.String]?
        /// The owner of the step group.
        public var owner: MigrationHubOrchestratorClientTypes.Owner?
        /// The previous step group.
        public var previous: [Swift.String]?
        /// The status of the step group.
        public var status: MigrationHubOrchestratorClientTypes.StepGroupStatus?

        public init(
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            next: [Swift.String]? = nil,
            owner: MigrationHubOrchestratorClientTypes.Owner? = nil,
            previous: [Swift.String]? = nil,
            status: MigrationHubOrchestratorClientTypes.StepGroupStatus? = nil
        )
        {
            self.id = id
            self.name = name
            self.next = next
            self.owner = owner
            self.previous = previous
            self.status = status
        }
    }
}

public struct ListWorkflowStepGroupsOutput: Swift.Sendable {
    /// The pagination token.
    public var nextToken: Swift.String?
    /// The summary of step groups in a migration workflow.
    /// This member is required.
    public var workflowStepGroupsSummary: [MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary]?

    public init(
        nextToken: Swift.String? = nil,
        workflowStepGroupsSummary: [MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.workflowStepGroupsSummary = workflowStepGroupsSummary
    }
}

public struct UpdateWorkflowStepGroupInput: Swift.Sendable {
    /// The description of the step group.
    public var description: Swift.String?
    /// The ID of the step group.
    /// This member is required.
    public var id: Swift.String?
    /// The name of the step group.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// The ID of the migration workflow.
    /// This member is required.
    public var workflowId: Swift.String?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        previous: [Swift.String]? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
        self.next = next
        self.previous = previous
        self.workflowId = workflowId
    }
}

public struct UpdateWorkflowStepGroupOutput: Swift.Sendable {
    /// The description of the step group.
    public var description: Swift.String?
    /// The ID of the step group.
    public var id: Swift.String?
    /// The time at which the step group was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The name of the step group.
    public var name: Swift.String?
    /// The next step group.
    public var next: [Swift.String]?
    /// The previous step group.
    public var previous: [Swift.String]?
    /// List of AWS services utilized in a migration workflow.
    public var tools: [MigrationHubOrchestratorClientTypes.Tool]?
    /// The ID of the migration workflow.
    public var workflowId: Swift.String?

    public init(
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        name: Swift.String? = nil,
        next: [Swift.String]? = nil,
        previous: [Swift.String]? = nil,
        tools: [MigrationHubOrchestratorClientTypes.Tool]? = nil,
        workflowId: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.name = name
        self.next = next
        self.previous = previous
        self.tools = tools
        self.workflowId = workflowId
    }
}

extension CreateTemplateInput {

    static func urlPathProvider(_ value: CreateTemplateInput) -> Swift.String? {
        return "/template"
    }
}

extension CreateWorkflowInput {

    static func urlPathProvider(_ value: CreateWorkflowInput) -> Swift.String? {
        return "/migrationworkflow"
    }
}

extension CreateWorkflowStepInput {

    static func urlPathProvider(_ value: CreateWorkflowStepInput) -> Swift.String? {
        return "/workflowstep"
    }
}

extension CreateWorkflowStepGroupInput {

    static func urlPathProvider(_ value: CreateWorkflowStepGroupInput) -> Swift.String? {
        return "/workflowstepgroups"
    }
}

extension DeleteTemplateInput {

    static func urlPathProvider(_ value: DeleteTemplateInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/template/\(id.urlPercentEncoding())"
    }
}

extension DeleteWorkflowInput {

    static func urlPathProvider(_ value: DeleteWorkflowInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflow/\(id.urlPercentEncoding())"
    }
}

extension DeleteWorkflowStepInput {

    static func urlPathProvider(_ value: DeleteWorkflowStepInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstep/\(id.urlPercentEncoding())"
    }
}

extension DeleteWorkflowStepInput {

    static func queryItemProvider(_ value: DeleteWorkflowStepInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let stepGroupId = value.stepGroupId else {
            let message = "Creating a URL Query Item failed. stepGroupId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let stepGroupIdQueryItem = Smithy.URIQueryItem(name: "stepGroupId".urlPercentEncoding(), value: Swift.String(stepGroupId).urlPercentEncoding())
        items.append(stepGroupIdQueryItem)
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension DeleteWorkflowStepGroupInput {

    static func urlPathProvider(_ value: DeleteWorkflowStepGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstepgroup/\(id.urlPercentEncoding())"
    }
}

extension DeleteWorkflowStepGroupInput {

    static func queryItemProvider(_ value: DeleteWorkflowStepGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension GetTemplateInput {

    static func urlPathProvider(_ value: GetTemplateInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflowtemplate/\(id.urlPercentEncoding())"
    }
}

extension GetTemplateStepInput {

    static func urlPathProvider(_ value: GetTemplateStepInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/templatestep/\(id.urlPercentEncoding())"
    }
}

extension GetTemplateStepInput {

    static func queryItemProvider(_ value: GetTemplateStepInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let stepGroupId = value.stepGroupId else {
            let message = "Creating a URL Query Item failed. stepGroupId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let stepGroupIdQueryItem = Smithy.URIQueryItem(name: "stepGroupId".urlPercentEncoding(), value: Swift.String(stepGroupId).urlPercentEncoding())
        items.append(stepGroupIdQueryItem)
        guard let templateId = value.templateId else {
            let message = "Creating a URL Query Item failed. templateId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let templateIdQueryItem = Smithy.URIQueryItem(name: "templateId".urlPercentEncoding(), value: Swift.String(templateId).urlPercentEncoding())
        items.append(templateIdQueryItem)
        return items
    }
}

extension GetTemplateStepGroupInput {

    static func urlPathProvider(_ value: GetTemplateStepGroupInput) -> Swift.String? {
        guard let templateId = value.templateId else {
            return nil
        }
        guard let id = value.id else {
            return nil
        }
        return "/templates/\(templateId.urlPercentEncoding())/stepgroups/\(id.urlPercentEncoding())"
    }
}

extension GetWorkflowInput {

    static func urlPathProvider(_ value: GetWorkflowInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflow/\(id.urlPercentEncoding())"
    }
}

extension GetWorkflowStepInput {

    static func urlPathProvider(_ value: GetWorkflowStepInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstep/\(id.urlPercentEncoding())"
    }
}

extension GetWorkflowStepInput {

    static func queryItemProvider(_ value: GetWorkflowStepInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let stepGroupId = value.stepGroupId else {
            let message = "Creating a URL Query Item failed. stepGroupId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let stepGroupIdQueryItem = Smithy.URIQueryItem(name: "stepGroupId".urlPercentEncoding(), value: Swift.String(stepGroupId).urlPercentEncoding())
        items.append(stepGroupIdQueryItem)
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension GetWorkflowStepGroupInput {

    static func urlPathProvider(_ value: GetWorkflowStepGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstepgroup/\(id.urlPercentEncoding())"
    }
}

extension GetWorkflowStepGroupInput {

    static func queryItemProvider(_ value: GetWorkflowStepGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension ListPluginsInput {

    static func urlPathProvider(_ value: ListPluginsInput) -> Swift.String? {
        return "/plugins"
    }
}

extension ListPluginsInput {

    static func queryItemProvider(_ value: ListPluginsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListTemplatesInput {

    static func urlPathProvider(_ value: ListTemplatesInput) -> Swift.String? {
        return "/migrationworkflowtemplates"
    }
}

extension ListTemplatesInput {

    static func queryItemProvider(_ value: ListTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        return items
    }
}

extension ListTemplateStepGroupsInput {

    static func urlPathProvider(_ value: ListTemplateStepGroupsInput) -> Swift.String? {
        guard let templateId = value.templateId else {
            return nil
        }
        return "/templatestepgroups/\(templateId.urlPercentEncoding())"
    }
}

extension ListTemplateStepGroupsInput {

    static func queryItemProvider(_ value: ListTemplateStepGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        return items
    }
}

extension ListTemplateStepsInput {

    static func urlPathProvider(_ value: ListTemplateStepsInput) -> Swift.String? {
        return "/templatesteps"
    }
}

extension ListTemplateStepsInput {

    static func queryItemProvider(_ value: ListTemplateStepsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let stepGroupId = value.stepGroupId else {
            let message = "Creating a URL Query Item failed. stepGroupId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let stepGroupIdQueryItem = Smithy.URIQueryItem(name: "stepGroupId".urlPercentEncoding(), value: Swift.String(stepGroupId).urlPercentEncoding())
        items.append(stepGroupIdQueryItem)
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        guard let templateId = value.templateId else {
            let message = "Creating a URL Query Item failed. templateId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let templateIdQueryItem = Smithy.URIQueryItem(name: "templateId".urlPercentEncoding(), value: Swift.String(templateId).urlPercentEncoding())
        items.append(templateIdQueryItem)
        return items
    }
}

extension ListWorkflowsInput {

    static func urlPathProvider(_ value: ListWorkflowsInput) -> Swift.String? {
        return "/migrationworkflows"
    }
}

extension ListWorkflowsInput {

    static func queryItemProvider(_ value: ListWorkflowsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let adsApplicationConfigurationName = value.adsApplicationConfigurationName {
            let adsApplicationConfigurationNameQueryItem = Smithy.URIQueryItem(name: "adsApplicationConfigurationName".urlPercentEncoding(), value: Swift.String(adsApplicationConfigurationName).urlPercentEncoding())
            items.append(adsApplicationConfigurationNameQueryItem)
        }
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let name = value.name {
            let nameQueryItem = Smithy.URIQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(name).urlPercentEncoding())
            items.append(nameQueryItem)
        }
        if let templateId = value.templateId {
            let templateIdQueryItem = Smithy.URIQueryItem(name: "templateId".urlPercentEncoding(), value: Swift.String(templateId).urlPercentEncoding())
            items.append(templateIdQueryItem)
        }
        if let status = value.status {
            let statusQueryItem = Smithy.URIQueryItem(name: "status".urlPercentEncoding(), value: Swift.String(status.rawValue).urlPercentEncoding())
            items.append(statusQueryItem)
        }
        return items
    }
}

extension ListWorkflowStepGroupsInput {

    static func urlPathProvider(_ value: ListWorkflowStepGroupsInput) -> Swift.String? {
        return "/workflowstepgroups"
    }
}

extension ListWorkflowStepGroupsInput {

    static func queryItemProvider(_ value: ListWorkflowStepGroupsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension ListWorkflowStepsInput {

    static func urlPathProvider(_ value: ListWorkflowStepsInput) -> Swift.String? {
        guard let workflowId = value.workflowId else {
            return nil
        }
        guard let stepGroupId = value.stepGroupId else {
            return nil
        }
        return "/workflow/\(workflowId.urlPercentEncoding())/workflowstepgroups/\(stepGroupId.urlPercentEncoding())/workflowsteps"
    }
}

extension ListWorkflowStepsInput {

    static func queryItemProvider(_ value: ListWorkflowStepsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "nextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if value.maxResults != 0 {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "maxResults".urlPercentEncoding(), value: Swift.String(value.maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension RetryWorkflowStepInput {

    static func urlPathProvider(_ value: RetryWorkflowStepInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/retryworkflowstep/\(id.urlPercentEncoding())"
    }
}

extension RetryWorkflowStepInput {

    static func queryItemProvider(_ value: RetryWorkflowStepInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let stepGroupId = value.stepGroupId else {
            let message = "Creating a URL Query Item failed. stepGroupId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let stepGroupIdQueryItem = Smithy.URIQueryItem(name: "stepGroupId".urlPercentEncoding(), value: Swift.String(stepGroupId).urlPercentEncoding())
        items.append(stepGroupIdQueryItem)
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension StartWorkflowInput {

    static func urlPathProvider(_ value: StartWorkflowInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflow/\(id.urlPercentEncoding())/start"
    }
}

extension StopWorkflowInput {

    static func urlPathProvider(_ value: StopWorkflowInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflow/\(id.urlPercentEncoding())/stop"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateTemplateInput {

    static func urlPathProvider(_ value: UpdateTemplateInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/template/\(id.urlPercentEncoding())"
    }
}

extension UpdateWorkflowInput {

    static func urlPathProvider(_ value: UpdateWorkflowInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/migrationworkflow/\(id.urlPercentEncoding())"
    }
}

extension UpdateWorkflowStepInput {

    static func urlPathProvider(_ value: UpdateWorkflowStepInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstep/\(id.urlPercentEncoding())"
    }
}

extension UpdateWorkflowStepGroupInput {

    static func urlPathProvider(_ value: UpdateWorkflowStepGroupInput) -> Swift.String? {
        guard let id = value.id else {
            return nil
        }
        return "/workflowstepgroup/\(id.urlPercentEncoding())"
    }
}

extension UpdateWorkflowStepGroupInput {

    static func queryItemProvider(_ value: UpdateWorkflowStepGroupInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let workflowId = value.workflowId else {
            let message = "Creating a URL Query Item failed. workflowId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let workflowIdQueryItem = Smithy.URIQueryItem(name: "workflowId".urlPercentEncoding(), value: Swift.String(workflowId).urlPercentEncoding())
        items.append(workflowIdQueryItem)
        return items
    }
}

extension CreateTemplateInput {

    static func write(value: CreateTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["templateDescription"].write(value.templateDescription)
        try writer["templateName"].write(value.templateName)
        try writer["templateSource"].write(value.templateSource, with: MigrationHubOrchestratorClientTypes.TemplateSource.write(value:to:))
    }
}

extension CreateWorkflowInput {

    static func write(value: CreateWorkflowInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["applicationConfigurationId"].write(value.applicationConfigurationId)
        try writer["description"].write(value.description)
        try writer["inputParameters"].writeMap(value.inputParameters, valueWritingClosure: MigrationHubOrchestratorClientTypes.StepInput.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["stepTargets"].writeList(value.stepTargets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["templateId"].write(value.templateId)
    }
}

extension CreateWorkflowStepInput {

    static func write(value: CreateWorkflowStepInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["next"].writeList(value.next, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["outputs"].writeList(value.outputs, memberWritingClosure: MigrationHubOrchestratorClientTypes.WorkflowStepOutput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["previous"].writeList(value.previous, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["stepActionType"].write(value.stepActionType)
        try writer["stepGroupId"].write(value.stepGroupId)
        try writer["stepTarget"].writeList(value.stepTarget, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["workflowId"].write(value.workflowId)
        try writer["workflowStepAutomationConfiguration"].write(value.workflowStepAutomationConfiguration, with: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration.write(value:to:))
    }
}

extension CreateWorkflowStepGroupInput {

    static func write(value: CreateWorkflowStepGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["next"].writeList(value.next, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["previous"].writeList(value.previous, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["workflowId"].write(value.workflowId)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateTemplateInput {

    static func write(value: UpdateTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["templateDescription"].write(value.templateDescription)
        try writer["templateName"].write(value.templateName)
    }
}

extension UpdateWorkflowInput {

    static func write(value: UpdateWorkflowInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["inputParameters"].writeMap(value.inputParameters, valueWritingClosure: MigrationHubOrchestratorClientTypes.StepInput.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["stepTargets"].writeList(value.stepTargets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateWorkflowStepInput {

    static func write(value: UpdateWorkflowStepInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["next"].writeList(value.next, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["outputs"].writeList(value.outputs, memberWritingClosure: MigrationHubOrchestratorClientTypes.WorkflowStepOutput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["previous"].writeList(value.previous, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["status"].write(value.status)
        try writer["stepActionType"].write(value.stepActionType)
        try writer["stepGroupId"].write(value.stepGroupId)
        try writer["stepTarget"].writeList(value.stepTarget, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["workflowId"].write(value.workflowId)
        try writer["workflowStepAutomationConfiguration"].write(value.workflowStepAutomationConfiguration, with: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration.write(value:to:))
    }
}

extension UpdateWorkflowStepGroupInput {

    static func write(value: UpdateWorkflowStepGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["description"].write(value.description)
        try writer["name"].write(value.name)
        try writer["next"].writeList(value.next, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["previous"].writeList(value.previous, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTemplateOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateArn = try reader["templateArn"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        return value
    }
}

extension CreateWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWorkflowOutput()
        value.adsApplicationConfigurationId = try reader["adsApplicationConfigurationId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.stepTargets = try reader["stepTargets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateId = try reader["templateId"].readIfPresent()
        value.workflowInputs = try reader["workflowInputs"].readMapIfPresent(valueReadingClosure: MigrationHubOrchestratorClientTypes.StepInput.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateWorkflowStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkflowStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWorkflowStepOutput()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

extension CreateWorkflowStepGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkflowStepGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWorkflowStepGroupOutput()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

extension DeleteTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTemplateOutput {
        return DeleteTemplateOutput()
    }
}

extension DeleteWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteWorkflowOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension DeleteWorkflowStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkflowStepOutput {
        return DeleteWorkflowStepOutput()
    }
}

extension DeleteWorkflowStepGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkflowStepGroupOutput {
        return DeleteWorkflowStepGroupOutput()
    }
}

extension GetTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateOutput()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.inputs = try reader["inputs"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.TemplateInput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.name = try reader["name"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateArn = try reader["templateArn"].readIfPresent()
        value.templateClass = try reader["templateClass"].readIfPresent()
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetTemplateStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateStepOutput()
        value.creationTime = try reader["creationTime"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.StepOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.stepActionType = try reader["stepActionType"].readIfPresent()
        value.stepAutomationConfiguration = try reader["stepAutomationConfiguration"].readIfPresent(with: MigrationHubOrchestratorClientTypes.StepAutomationConfiguration.read(from:))
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        return value
    }
}

extension GetTemplateStepGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateStepGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateStepGroupOutput()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWorkflowOutput()
        value.adsApplicationConfigurationId = try reader["adsApplicationConfigurationId"].readIfPresent()
        value.adsApplicationName = try reader["adsApplicationName"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.completedSteps = try reader["completedSteps"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.id = try reader["id"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStartTime = try reader["lastStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStopTime = try reader["lastStopTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateId = try reader["templateId"].readIfPresent()
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalSteps = try reader["totalSteps"].readIfPresent()
        value.workflowBucket = try reader["workflowBucket"].readIfPresent()
        value.workflowInputs = try reader["workflowInputs"].readMapIfPresent(valueReadingClosure: MigrationHubOrchestratorClientTypes.StepInput.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetWorkflowStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWorkflowStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWorkflowStepOutput()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastStartTime = try reader["lastStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.noOfSrvCompleted = try reader["noOfSrvCompleted"].readIfPresent()
        value.noOfSrvFailed = try reader["noOfSrvFailed"].readIfPresent()
        value.outputs = try reader["outputs"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.WorkflowStepOutput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.owner = try reader["owner"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.scriptOutputLocation = try reader["scriptOutputLocation"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.stepActionType = try reader["stepActionType"].readIfPresent()
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.stepId = try reader["stepId"].readIfPresent()
        value.stepTarget = try reader["stepTarget"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalNoOfSrv = try reader["totalNoOfSrv"].readIfPresent()
        value.workflowId = try reader["workflowId"].readIfPresent()
        value.workflowStepAutomationConfiguration = try reader["workflowStepAutomationConfiguration"].readIfPresent(with: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration.read(from:))
        return value
    }
}

extension GetWorkflowStepGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetWorkflowStepGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetWorkflowStepGroupOutput()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.id = try reader["id"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.owner = try reader["owner"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

extension ListPluginsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPluginsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPluginsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.plugins = try reader["plugins"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.PluginSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTemplatesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templateSummary = try reader["templateSummary"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.TemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTemplateStepGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTemplateStepGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTemplateStepGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templateStepGroupSummary = try reader["templateStepGroupSummary"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTemplateStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTemplateStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTemplateStepsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.templateStepSummaryList = try reader["templateStepSummaryList"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.TemplateStepSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWorkflowsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkflowsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkflowsOutput()
        value.migrationWorkflowSummary = try reader["migrationWorkflowSummary"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListWorkflowStepGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkflowStepGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkflowStepGroupsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.workflowStepGroupsSummary = try reader["workflowStepGroupsSummary"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListWorkflowStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkflowStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkflowStepsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.workflowStepsSummary = try reader["workflowStepsSummary"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.WorkflowStepSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension RetryWorkflowStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetryWorkflowStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetryWorkflowStepOutput()
        value.id = try reader["id"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

extension StartWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartWorkflowOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastStartTime = try reader["lastStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        return value
    }
}

extension StopWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopWorkflowOutput()
        value.arn = try reader["arn"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastStopTime = try reader["lastStopTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTemplateOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateArn = try reader["templateArn"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        return value
    }
}

extension UpdateWorkflowOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWorkflowOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWorkflowOutput()
        value.adsApplicationConfigurationId = try reader["adsApplicationConfigurationId"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.stepTargets = try reader["stepTargets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.templateId = try reader["templateId"].readIfPresent()
        value.workflowInputs = try reader["workflowInputs"].readMapIfPresent(valueReadingClosure: MigrationHubOrchestratorClientTypes.StepInput.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension UpdateWorkflowStepOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWorkflowStepOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWorkflowStepOutput()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

extension UpdateWorkflowStepGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWorkflowStepGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWorkflowStepGroupOutput()
        value.description = try reader["description"].readIfPresent()
        value.id = try reader["id"].readIfPresent()
        value.lastModifiedTime = try reader["lastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["name"].readIfPresent()
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.tools = try reader["tools"].readListIfPresent(memberReadingClosure: MigrationHubOrchestratorClientTypes.Tool.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.workflowId = try reader["workflowId"].readIfPresent()
        return value
    }
}

enum CreateTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkflowStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkflowStepGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkflowStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkflowStepGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateStepGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWorkflowStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetWorkflowStepGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPluginsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTemplateStepGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTemplateStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkflowsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkflowStepGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkflowStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetryWorkflowStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWorkflowOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWorkflowStepOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWorkflowStepGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.StepInput {

    static func write(value: MigrationHubOrchestratorClientTypes.StepInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .integervalue(integervalue):
                try writer["integerValue"].write(integervalue)
            case let .listofstringsvalue(listofstringsvalue):
                try writer["listOfStringsValue"].writeList(listofstringsvalue, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .mapofstringvalue(mapofstringvalue):
                try writer["mapOfStringValue"].writeMap(mapofstringvalue, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
            case let .stringvalue(stringvalue):
                try writer["stringValue"].write(stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.StepInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "integerValue":
                return .integervalue(try reader["integerValue"].read())
            case "stringValue":
                return .stringvalue(try reader["stringValue"].read())
            case "listOfStringsValue":
                return .listofstringsvalue(try reader["listOfStringsValue"].readList(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false))
            case "mapOfStringValue":
                return .mapofstringvalue(try reader["mapOfStringValue"].readMap(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension MigrationHubOrchestratorClientTypes.Tool {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.Tool {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.Tool()
        value.name = try reader["name"].readIfPresent()
        value.url = try reader["url"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.TemplateInput {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.TemplateInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.TemplateInput()
        value.inputName = try reader["inputName"].readIfPresent()
        value.dataType = try reader["dataType"].readIfPresent()
        value.`required` = try reader["required"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.StepOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.StepOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.StepOutput()
        value.name = try reader["name"].readIfPresent()
        value.dataType = try reader["dataType"].readIfPresent()
        value.`required` = try reader["required"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.StepAutomationConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.StepAutomationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.StepAutomationConfiguration()
        value.scriptLocationS3Bucket = try reader["scriptLocationS3Bucket"].readIfPresent()
        value.scriptLocationS3Key = try reader["scriptLocationS3Key"].readIfPresent(with: MigrationHubOrchestratorClientTypes.PlatformScriptKey.read(from:))
        value.command = try reader["command"].readIfPresent(with: MigrationHubOrchestratorClientTypes.PlatformCommand.read(from:))
        value.runEnvironment = try reader["runEnvironment"].readIfPresent()
        value.targetType = try reader["targetType"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.PlatformCommand {

    static func write(value: MigrationHubOrchestratorClientTypes.PlatformCommand?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["linux"].write(value.linux)
        try writer["windows"].write(value.windows)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.PlatformCommand {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.PlatformCommand()
        value.linux = try reader["linux"].readIfPresent()
        value.windows = try reader["windows"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.PlatformScriptKey {

    static func write(value: MigrationHubOrchestratorClientTypes.PlatformScriptKey?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["linux"].write(value.linux)
        try writer["windows"].write(value.windows)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.PlatformScriptKey {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.PlatformScriptKey()
        value.linux = try reader["linux"].readIfPresent()
        value.windows = try reader["windows"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration {

    static func write(value: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["command"].write(value.command, with: MigrationHubOrchestratorClientTypes.PlatformCommand.write(value:to:))
        try writer["runEnvironment"].write(value.runEnvironment)
        try writer["scriptLocationS3Bucket"].write(value.scriptLocationS3Bucket)
        try writer["scriptLocationS3Key"].write(value.scriptLocationS3Key, with: MigrationHubOrchestratorClientTypes.PlatformScriptKey.write(value:to:))
        try writer["targetType"].write(value.targetType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration()
        value.scriptLocationS3Bucket = try reader["scriptLocationS3Bucket"].readIfPresent()
        value.scriptLocationS3Key = try reader["scriptLocationS3Key"].readIfPresent(with: MigrationHubOrchestratorClientTypes.PlatformScriptKey.read(from:))
        value.command = try reader["command"].readIfPresent(with: MigrationHubOrchestratorClientTypes.PlatformCommand.read(from:))
        value.runEnvironment = try reader["runEnvironment"].readIfPresent()
        value.targetType = try reader["targetType"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.WorkflowStepOutput {

    static func write(value: MigrationHubOrchestratorClientTypes.WorkflowStepOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["dataType"].write(value.dataType)
        try writer["name"].write(value.name)
        try writer["required"].write(value.`required`)
        try writer["value"].write(value.value, with: MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.WorkflowStepOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.WorkflowStepOutput()
        value.name = try reader["name"].readIfPresent()
        value.dataType = try reader["dataType"].readIfPresent()
        value.`required` = try reader["required"].readIfPresent()
        value.value = try reader["value"].readIfPresent(with: MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion.read(from:))
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion {

    static func write(value: MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .integervalue(integervalue):
                try writer["integerValue"].write(integervalue)
            case let .listofstringvalue(listofstringvalue):
                try writer["listOfStringValue"].writeList(listofstringvalue, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
            case let .stringvalue(stringvalue):
                try writer["stringValue"].write(stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "integerValue":
                return .integervalue(try reader["integerValue"].read())
            case "stringValue":
                return .stringvalue(try reader["stringValue"].read())
            case "listOfStringValue":
                return .listofstringvalue(try reader["listOfStringValue"].readList(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension MigrationHubOrchestratorClientTypes.PluginSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.PluginSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.PluginSummary()
        value.pluginId = try reader["pluginId"].readIfPresent()
        value.hostname = try reader["hostname"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.ipAddress = try reader["ipAddress"].readIfPresent()
        value.version = try reader["version"].readIfPresent()
        value.registeredTime = try reader["registeredTime"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.TemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.TemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.TemplateSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.TemplateStepGroupSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.TemplateStepSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.TemplateStepSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.TemplateStepSummary()
        value.id = try reader["id"].readIfPresent()
        value.stepGroupId = try reader["stepGroupId"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.stepActionType = try reader["stepActionType"].readIfPresent()
        value.targetType = try reader["targetType"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.MigrationWorkflowSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.templateId = try reader["templateId"].readIfPresent()
        value.adsApplicationConfigurationName = try reader["adsApplicationConfigurationName"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.creationTime = try reader["creationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["endTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.completedSteps = try reader["completedSteps"].readIfPresent()
        value.totalSteps = try reader["totalSteps"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.WorkflowStepGroupSummary()
        value.id = try reader["id"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.WorkflowStepSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> MigrationHubOrchestratorClientTypes.WorkflowStepSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MigrationHubOrchestratorClientTypes.WorkflowStepSummary()
        value.stepId = try reader["stepId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.stepActionType = try reader["stepActionType"].readIfPresent()
        value.owner = try reader["owner"].readIfPresent()
        value.previous = try reader["previous"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.next = try reader["next"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["status"].readIfPresent()
        value.statusMessage = try reader["statusMessage"].readIfPresent()
        value.noOfSrvCompleted = try reader["noOfSrvCompleted"].readIfPresent()
        value.noOfSrvFailed = try reader["noOfSrvFailed"].readIfPresent()
        value.totalNoOfSrv = try reader["totalNoOfSrv"].readIfPresent()
        value.description = try reader["description"].readIfPresent()
        value.scriptLocation = try reader["scriptLocation"].readIfPresent()
        return value
    }
}

extension MigrationHubOrchestratorClientTypes.TemplateSource {

    static func write(value: MigrationHubOrchestratorClientTypes.TemplateSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .workflowid(workflowid):
                try writer["workflowId"].write(workflowid)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }
}

public enum MigrationHubOrchestratorClientTypes {}
