//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

/// You aren't authorized to perform the action. Use the Amazon Resource Name (ARN) of an authorized user or IAM role to perform the operation.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension TextractClientTypes {

    /// An adapter selected for use when analyzing documents. Contains an adapter ID and a version number. Contains information on pages selected for analysis when analyzing documents asychronously.
    public struct Adapter: Swift.Sendable {
        /// A unique identifier for the adapter resource.
        /// This member is required.
        public var adapterId: Swift.String?
        /// Pages is a parameter that the user inputs to specify which pages to apply an adapter to. The following is a list of rules for using this parameter.
        ///
        /// * If a page is not specified, it is set to ["1"] by default.
        ///
        /// * The following characters are allowed in the parameter's string: 0 1 2 3 4 5 6 7 8 9 - *. No whitespace is allowed.
        ///
        /// * When using * to indicate all pages, it must be the only element in the list.
        ///
        /// * You can use page intervals, such as ["1-3", "1-1", "4-*"]. Where * indicates last page of document.
        ///
        /// * Specified pages must be greater than 0 and less than or equal to the number of pages in the document.
        public var pages: [Swift.String]?
        /// A string that identifies the version of the adapter.
        /// This member is required.
        public var version: Swift.String?

        public init(
            adapterId: Swift.String? = nil,
            pages: [Swift.String]? = nil,
            version: Swift.String? = nil
        )
        {
            self.adapterId = adapterId
            self.pages = pages
            self.version = version
        }
    }
}

extension TextractClientTypes {

    public enum FeatureType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forms
        case layout
        case queries
        case signatures
        case tables
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureType] {
            return [
                .forms,
                .layout,
                .queries,
                .signatures,
                .tables
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forms: return "FORMS"
            case .layout: return "LAYOUT"
            case .queries: return "QUERIES"
            case .signatures: return "SIGNATURES"
            case .tables: return "TABLES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// Contains information on the adapter, including the adapter ID, Name, Creation time, and feature types.
    public struct AdapterOverview: Swift.Sendable {
        /// A unique identifier for the adapter resource.
        public var adapterId: Swift.String?
        /// A string naming the adapter resource.
        public var adapterName: Swift.String?
        /// The date and time that the adapter was created.
        public var creationTime: Foundation.Date?
        /// The feature types that the adapter is operating on.
        public var featureTypes: [TextractClientTypes.FeatureType]?

        public init(
            adapterId: Swift.String? = nil,
            adapterName: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            featureTypes: [TextractClientTypes.FeatureType]? = nil
        )
        {
            self.adapterId = adapterId
            self.adapterName = adapterName
            self.creationTime = creationTime
            self.featureTypes = featureTypes
        }
    }
}

extension TextractClientTypes {

    /// Contains information about adapters used when analyzing a document, with each adapter specified using an AdapterId and version
    public struct AdaptersConfig: Swift.Sendable {
        /// A list of adapters to be used when analyzing the specified document.
        /// This member is required.
        public var adapters: [TextractClientTypes.Adapter]?

        public init(
            adapters: [TextractClientTypes.Adapter]? = nil
        )
        {
            self.adapters = adapters
        }
    }
}

extension TextractClientTypes {

    /// The S3 bucket name and file name that identifies the document. The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations. For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file.
    public struct S3Object: Swift.Sendable {
        /// The name of the S3 bucket. Note that the # character is not valid in the file name.
        public var bucket: Swift.String?
        /// The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.
        public var name: Swift.String?
        /// If the bucket has versioning enabled, you can specify the object version.
        public var version: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.name = name
            self.version = version
        }
    }
}

extension TextractClientTypes {

    /// The dataset configuration options for a given version of an adapter. Can include an Amazon S3 bucket if specified.
    public struct AdapterVersionDatasetConfig: Swift.Sendable {
        /// The S3 bucket name and file name that identifies the document. The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations. For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file.
        public var manifestS3Object: TextractClientTypes.S3Object?

        public init(
            manifestS3Object: TextractClientTypes.S3Object? = nil
        )
        {
            self.manifestS3Object = manifestS3Object
        }
    }
}

extension TextractClientTypes {

    /// The evaluation metrics (F1 score, Precision, and Recall) for an adapter version.
    public struct EvaluationMetric: Swift.Sendable {
        /// The F1 score for an adapter version.
        public var f1Score: Swift.Float
        /// The Precision score for an adapter version.
        public var precision: Swift.Float
        /// The Recall score for an adapter version.
        public var recall: Swift.Float

        public init(
            f1Score: Swift.Float = 0.0,
            precision: Swift.Float = 0.0,
            recall: Swift.Float = 0.0
        )
        {
            self.f1Score = f1Score
            self.precision = precision
            self.recall = recall
        }
    }
}

extension TextractClientTypes {

    /// Contains information on the metrics used to evalute the peformance of a given adapter version. Includes data for baseline model performance and individual adapter version perfromance.
    public struct AdapterVersionEvaluationMetric: Swift.Sendable {
        /// The F1 score, precision, and recall metrics for the baseline model.
        public var adapterVersion: TextractClientTypes.EvaluationMetric?
        /// The F1 score, precision, and recall metrics for the baseline model.
        public var baseline: TextractClientTypes.EvaluationMetric?
        /// Indicates the feature type being analyzed by a given adapter version.
        public var featureType: TextractClientTypes.FeatureType?

        public init(
            adapterVersion: TextractClientTypes.EvaluationMetric? = nil,
            baseline: TextractClientTypes.EvaluationMetric? = nil,
            featureType: TextractClientTypes.FeatureType? = nil
        )
        {
            self.adapterVersion = adapterVersion
            self.baseline = baseline
            self.featureType = featureType
        }
    }
}

extension TextractClientTypes {

    public enum AdapterVersionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case atRisk
        case creationError
        case creationInProgress
        case deprecated
        case sdkUnknown(Swift.String)

        public static var allCases: [AdapterVersionStatus] {
            return [
                .active,
                .atRisk,
                .creationError,
                .creationInProgress,
                .deprecated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .atRisk: return "AT_RISK"
            case .creationError: return "CREATION_ERROR"
            case .creationInProgress: return "CREATION_IN_PROGRESS"
            case .deprecated: return "DEPRECATED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// Summary info for an adapter version. Contains information on the AdapterId, AdapterVersion, CreationTime, FeatureTypes, and Status.
    public struct AdapterVersionOverview: Swift.Sendable {
        /// A unique identifier for the adapter associated with a given adapter version.
        public var adapterId: Swift.String?
        /// An identified for a given adapter version.
        public var adapterVersion: Swift.String?
        /// The date and time that a given adapter version was created.
        public var creationTime: Foundation.Date?
        /// The feature types that the adapter version is operating on.
        public var featureTypes: [TextractClientTypes.FeatureType]?
        /// Contains information on the status of a given adapter version.
        public var status: TextractClientTypes.AdapterVersionStatus?
        /// A message explaining the status of a given adapter vesion.
        public var statusMessage: Swift.String?

        public init(
            adapterId: Swift.String? = nil,
            adapterVersion: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            featureTypes: [TextractClientTypes.FeatureType]? = nil,
            status: TextractClientTypes.AdapterVersionStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.adapterId = adapterId
            self.adapterVersion = adapterVersion
            self.creationTime = creationTime
            self.featureTypes = featureTypes
            self.status = status
            self.statusMessage = statusMessage
        }
    }
}

/// Amazon Textract isn't able to read the document. For more information on the document limits in Amazon Textract, see [limits].
public struct BadDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadDocumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The document can't be processed because it's too large. The maximum document size for synchronous operations 10 MB. The maximum document size for asynchronous operations is 500 MB for PDF files.
public struct DocumentTooLargeException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DocumentTooLargeException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Indicates you have exceeded the maximum number of active human in the loop workflows available
public struct HumanLoopQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        /// The quota code.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The resource type.
        public internal(set) var resourceType: Swift.String? = nil
        /// The service code.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "HumanLoopQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

/// Amazon Textract experienced a service issue. Try your call again.
public struct InternalServerError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerError" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// An input parameter violated a constraint. For example, in synchronous operations, an InvalidParameterException exception occurs when neither of the S3Object or Bytes values are supplied in the Document request parameter. Validate your parameter before calling the API operation again.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Amazon Textract is unable to access the S3 object that's specified in the request. for more information, [Configure Access to Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html) For troubleshooting information, see [Troubleshooting Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html)
public struct InvalidS3ObjectException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidS3ObjectException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Textract.
public struct ProvisionedThroughputExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ProvisionedThroughputExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Amazon Textract is temporarily unable to process the request. Try your call again.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The format of the input document isn't supported. Documents for operations can be in PNG, JPEG, PDF, or TIFF format.
public struct UnsupportedDocumentException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedDocumentException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension TextractClientTypes {

    /// The input document, either as bytes or as an S3 object. You pass image bytes to an Amazon Textract API operation by using the Bytes property. For example, you would use the Bytes property to pass a document loaded from a local file system. Image bytes passed by using the Bytes property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. You pass images stored in an S3 bucket to an Amazon Textract API operation by using the S3Object property. Documents stored in an S3 bucket don't need to be base64 encoded. The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations. If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property. For Amazon Textract to process an S3 object, the user must have permission to access the S3 object.
    public struct Document: Swift.Sendable {
        /// A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the Bytes field.
        public var bytes: Foundation.Data?
        /// Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.
        public var s3Object: TextractClientTypes.S3Object?

        public init(
            bytes: Foundation.Data? = nil,
            s3Object: TextractClientTypes.S3Object? = nil
        )
        {
            self.bytes = bytes
            self.s3Object = s3Object
        }
    }
}

extension TextractClientTypes {

    public enum ContentClassifier: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information and adult content.
    public struct HumanLoopDataAttributes: Swift.Sendable {
        /// Sets whether the input image is free of personally identifiable information or adult content.
        public var contentClassifiers: [TextractClientTypes.ContentClassifier]?

        public init(
            contentClassifiers: [TextractClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }
}

extension TextractClientTypes {

    /// Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes of the image before review.
    public struct HumanLoopConfig: Swift.Sendable {
        /// Sets attributes of the input data.
        public var dataAttributes: TextractClientTypes.HumanLoopDataAttributes?
        /// The Amazon Resource Name (ARN) of the flow definition.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the human workflow used for this image. This should be kept unique within a region.
        /// This member is required.
        public var humanLoopName: Swift.String?

        public init(
            dataAttributes: TextractClientTypes.HumanLoopDataAttributes? = nil,
            flowDefinitionArn: Swift.String? = nil,
            humanLoopName: Swift.String? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.flowDefinitionArn = flowDefinitionArn
            self.humanLoopName = humanLoopName
        }
    }
}

extension TextractClientTypes {

    /// Each query contains the question you want to ask in the Text and the alias you want to associate.
    public struct Query: Swift.Sendable {
        /// Alias attached to the query, for ease of location.
        public var alias: Swift.String?
        /// Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.
        ///
        /// * If a page is not specified, it is set to ["1"] by default.
        ///
        /// * The following characters are allowed in the parameter's string: 0 1 2 3 4 5 6 7 8 9 - *. No whitespace is allowed.
        ///
        /// * When using * to indicate all pages, it must be the only element in the list.
        ///
        /// * You can use page intervals, such as [“1-3”, “1-1”, “4-*”]. Where * indicates last page of document.
        ///
        /// * Specified pages must be greater than 0 and less than or equal to the number of pages in the document.
        public var pages: [Swift.String]?
        /// Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"
        /// This member is required.
        public var text: Swift.String?

        public init(
            alias: Swift.String? = nil,
            pages: [Swift.String]? = nil,
            text: Swift.String? = nil
        )
        {
            self.alias = alias
            self.pages = pages
            self.text = text
        }
    }
}

extension TextractClientTypes {

    ///
    public struct QueriesConfig: Swift.Sendable {
        ///
        /// This member is required.
        public var queries: [TextractClientTypes.Query]?

        public init(
            queries: [TextractClientTypes.Query]? = nil
        )
        {
            self.queries = queries
        }
    }
}

public struct AnalyzeDocumentInput: Swift.Sendable {
    /// Specifies the adapter to be used when analyzing a document.
    public var adaptersConfig: TextractClientTypes.AdaptersConfig?
    /// The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG, PNG, PDF, or TIFF format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    /// This member is required.
    public var document: TextractClientTypes.Document?
    /// A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. Add SIGNATURES to return the locations of detected signatures. Add LAYOUT to the list to return information about the layout of the document. All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    /// This member is required.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// Sets the configuration for the human in the loop workflow for analyzing documents.
    public var humanLoopConfig: TextractClientTypes.HumanLoopConfig?
    /// Contains Queries and the alias for those Queries, as determined by the input.
    public var queriesConfig: TextractClientTypes.QueriesConfig?

    public init(
        adaptersConfig: TextractClientTypes.AdaptersConfig? = nil,
        document: TextractClientTypes.Document? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        humanLoopConfig: TextractClientTypes.HumanLoopConfig? = nil,
        queriesConfig: TextractClientTypes.QueriesConfig? = nil
    )
    {
        self.adaptersConfig = adaptersConfig
        self.document = document
        self.featureTypes = featureTypes
        self.humanLoopConfig = humanLoopConfig
        self.queriesConfig = queriesConfig
    }
}

extension TextractClientTypes {

    public enum BlockType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cell
        case keyValueSet
        case layoutFigure
        case layoutFooter
        case layoutHeader
        case layoutKeyValue
        case layoutList
        case layoutPageNumber
        case layoutSectionHeader
        case layoutTable
        case layoutText
        case layoutTitle
        case line
        case mergedCell
        case page
        case query
        case queryResult
        case selectionElement
        case signature
        case table
        case tableFooter
        case tableTitle
        case title
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockType] {
            return [
                .cell,
                .keyValueSet,
                .layoutFigure,
                .layoutFooter,
                .layoutHeader,
                .layoutKeyValue,
                .layoutList,
                .layoutPageNumber,
                .layoutSectionHeader,
                .layoutTable,
                .layoutText,
                .layoutTitle,
                .line,
                .mergedCell,
                .page,
                .query,
                .queryResult,
                .selectionElement,
                .signature,
                .table,
                .tableFooter,
                .tableTitle,
                .title,
                .word
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cell: return "CELL"
            case .keyValueSet: return "KEY_VALUE_SET"
            case .layoutFigure: return "LAYOUT_FIGURE"
            case .layoutFooter: return "LAYOUT_FOOTER"
            case .layoutHeader: return "LAYOUT_HEADER"
            case .layoutKeyValue: return "LAYOUT_KEY_VALUE"
            case .layoutList: return "LAYOUT_LIST"
            case .layoutPageNumber: return "LAYOUT_PAGE_NUMBER"
            case .layoutSectionHeader: return "LAYOUT_SECTION_HEADER"
            case .layoutTable: return "LAYOUT_TABLE"
            case .layoutText: return "LAYOUT_TEXT"
            case .layoutTitle: return "LAYOUT_TITLE"
            case .line: return "LINE"
            case .mergedCell: return "MERGED_CELL"
            case .page: return "PAGE"
            case .query: return "QUERY"
            case .queryResult: return "QUERY_RESULT"
            case .selectionElement: return "SELECTION_ELEMENT"
            case .signature: return "SIGNATURE"
            case .table: return "TABLE"
            case .tableFooter: return "TABLE_FOOTER"
            case .tableTitle: return "TABLE_TITLE"
            case .title: return "TITLE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    public enum EntityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case columnHeader
        case key
        case semiStructuredTable
        case structuredTable
        case tableFooter
        case tableSectionTitle
        case tableSummary
        case tableTitle
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .columnHeader,
                .key,
                .semiStructuredTable,
                .structuredTable,
                .tableFooter,
                .tableSectionTitle,
                .tableSummary,
                .tableTitle,
                .value
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .columnHeader: return "COLUMN_HEADER"
            case .key: return "KEY"
            case .semiStructuredTable: return "SEMI_STRUCTURED_TABLE"
            case .structuredTable: return "STRUCTURED_TABLE"
            case .tableFooter: return "TABLE_FOOTER"
            case .tableSectionTitle: return "TABLE_SECTION_TITLE"
            case .tableSummary: return "TABLE_SUMMARY"
            case .tableTitle: return "TABLE_TITLE"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// The bounding box around the detected page, text, key-value pair, table, table cell, or selection element on a document page. The left (x-coordinate) and top (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). The top and left values returned are ratios of the overall document page size. For example, if the input image is 700 x 200 pixels, and the top-left coordinate of the bounding box is 350 x 50 pixels, the API returns a left value of 0.5 (350/700) and a top value of 0.25 (50/200). The width and height values represent the dimensions of the bounding box as a ratio of the overall document page dimension. For example, if the document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1.
    public struct BoundingBox: Swift.Sendable {
        /// The height of the bounding box as a ratio of the overall document page height.
        public var height: Swift.Float
        /// The left coordinate of the bounding box as a ratio of overall document page width.
        public var `left`: Swift.Float
        /// The top coordinate of the bounding box as a ratio of overall document page height.
        public var top: Swift.Float
        /// The width of the bounding box as a ratio of the overall document page width.
        public var width: Swift.Float

        public init(
            height: Swift.Float = 0.0,
            `left`: Swift.Float = 0.0,
            top: Swift.Float = 0.0,
            width: Swift.Float = 0.0
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }
}

extension TextractClientTypes {

    /// The X and Y coordinates of a point on a document page. The X and Y values that are returned are ratios of the overall document page size. For example, if the input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the document page. An array of Point objects, Polygon, is returned by [DetectDocumentText]. Polygon represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Textract Developer Guide.
    public struct Point: Swift.Sendable {
        /// The value of the X coordinate for a point on a Polygon.
        public var x: Swift.Float
        /// The value of the Y coordinate for a point on a Polygon.
        public var y: Swift.Float

        public init(
            x: Swift.Float = 0.0,
            y: Swift.Float = 0.0
        )
        {
            self.x = x
            self.y = y
        }
    }
}

extension TextractClientTypes {

    /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
    public struct Geometry: Swift.Sendable {
        /// An axis-aligned coarse representation of the location of the recognized item on the document page.
        public var boundingBox: TextractClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the recognized item.
        public var polygon: [TextractClientTypes.Point]?

        public init(
            boundingBox: TextractClientTypes.BoundingBox? = nil,
            polygon: [TextractClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }
}

extension TextractClientTypes {

    public enum RelationshipType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case answer
        case child
        case complexFeatures
        case mergedCell
        case table
        case tableFooter
        case tableTitle
        case title
        case value
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipType] {
            return [
                .answer,
                .child,
                .complexFeatures,
                .mergedCell,
                .table,
                .tableFooter,
                .tableTitle,
                .title,
                .value
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .answer: return "ANSWER"
            case .child: return "CHILD"
            case .complexFeatures: return "COMPLEX_FEATURES"
            case .mergedCell: return "MERGED_CELL"
            case .table: return "TABLE"
            case .tableFooter: return "TABLE_FOOTER"
            case .tableTitle: return "TABLE_TITLE"
            case .title: return "TITLE"
            case .value: return "VALUE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// Information about how blocks are related to each other. A Block object contains 0 or more Relation objects in a list, Relationships. For more information, see [Block]. The Type element provides the type of the relationship for all blocks in the IDs array.
    public struct Relationship: Swift.Sendable {
        /// An array of IDs for related blocks. You can get the type of the relationship from the Type element.
        public var ids: [Swift.String]?
        /// The type of relationship between the blocks in the IDs array and the current block. The following list describes the relationship types that can be returned.
        ///
        /// * VALUE - A list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair.
        ///
        /// * CHILD - A list of IDs that identify blocks found within the current block object. For example, WORD blocks have a CHILD relationship to the LINE block type.
        ///
        /// * MERGED_CELL - A list of IDs that identify each of the MERGED_CELL block types in a table.
        ///
        /// * ANSWER - A list that contains the ID of the QUERY_RESULT block that’s associated with the corresponding QUERY block.
        ///
        /// * TABLE - A list of IDs that identify associated TABLE block types.
        ///
        /// * TABLE_TITLE - A list that contains the ID for the TABLE_TITLE block type in a table.
        ///
        /// * TABLE_FOOTER - A list of IDs that identify the TABLE_FOOTER block types in a table.
        public var type: TextractClientTypes.RelationshipType?

        public init(
            ids: [Swift.String]? = nil,
            type: TextractClientTypes.RelationshipType? = nil
        )
        {
            self.ids = ids
            self.type = type
        }
    }
}

extension TextractClientTypes {

    public enum SelectionStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case notSelected
        case selected
        case sdkUnknown(Swift.String)

        public static var allCases: [SelectionStatus] {
            return [
                .notSelected,
                .selected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .notSelected: return "NOT_SELECTED"
            case .selected: return "SELECTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    public enum TextType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case handwriting
        case printed
        case sdkUnknown(Swift.String)

        public static var allCases: [TextType] {
            return [
                .handwriting,
                .printed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .handwriting: return "HANDWRITING"
            case .printed: return "PRINTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// A Block represents items that are recognized in a document within a group of pixels close to each other. The information returned in a Block object depends on the type of operation. In text detection for documents (for example [DetectDocumentText]), you get information about the detected words and lines of text. In text analysis (for example [AnalyzeDocument]), you can also get information about the fields, tables, and selection elements that are detected in the document. An array of Block objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as [DetectDocumentText], the array of Block objects is the entire set of results. In asynchronous operations, such as [GetDocumentAnalysis], the array is returned over one or more responses. For more information, see [How Amazon Textract Works](https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html).
    public struct Block: Swift.Sendable {
        /// The type of text item that's recognized. In operations for text detection, the following types are returned:
        ///
        /// * PAGE - Contains a list of the LINE Block objects that are detected on a document page.
        ///
        /// * WORD - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page.
        ///
        ///
        /// In text analysis operations, the following types are returned:
        ///
        /// * PAGE - Contains a list of child Block objects that are detected on a document page.
        ///
        /// * KEY_VALUE_SET - Stores the KEY and VALUE Block objects for linked text that's detected on a document page. Use the EntityType field to determine if a KEY_VALUE_SET object is a KEY Block object or a VALUE Block object.
        ///
        /// * WORD - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page.
        ///
        /// * TABLE - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each.
        ///
        /// * TABLE_TITLE - The title of a table. A title is typically a line of text above or below a table, or embedded as the first row of a table.
        ///
        /// * TABLE_FOOTER - The footer associated with a table. A footer is typically a line or lines of text below a table or embedded as the last row of a table.
        ///
        /// * CELL - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.
        ///
        /// * MERGED_CELL - A cell in a table whose content spans more than one row or column. The Relationships array for this cell contain data from individual cells.
        ///
        /// * SELECTION_ELEMENT - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of SelectionStatus to determine the status of the selection element.
        ///
        /// * SIGNATURE - The location and confidence score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.
        ///
        /// * QUERY - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.
        ///
        /// * QUERY_RESULT - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.
        ///
        ///
        /// The following BlockTypes are only returned for Amazon Textract Layout.
        ///
        /// * LAYOUT_TITLE - The main title of the document.
        ///
        /// * LAYOUT_HEADER - Text located in the top margin of the document.
        ///
        /// * LAYOUT_FOOTER - Text located in the bottom margin of the document.
        ///
        /// * LAYOUT_SECTION_HEADER - The titles of sections within a document.
        ///
        /// * LAYOUT_PAGE_NUMBER - The page number of the documents.
        ///
        /// * LAYOUT_LIST - Any information grouped together in list form.
        ///
        /// * LAYOUT_FIGURE - Indicates the location of an image in a document.
        ///
        /// * LAYOUT_TABLE - Indicates the location of a table in the document.
        ///
        /// * LAYOUT_KEY_VALUE - Indicates the location of form key-values in a document.
        ///
        /// * LAYOUT_TEXT - Text that is present typically as a part of paragraphs in documents.
        public var blockType: TextractClientTypes.BlockType?
        /// The column in which a table cell appears. The first column position is 1. ColumnIndex isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var columnIndex: Swift.Int?
        /// The number of columns that a table cell spans. ColumnSpan isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var columnSpan: Swift.Int?
        /// The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.
        public var confidence: Swift.Float?
        /// The type of entity. The following entity types can be returned by FORMS analysis:
        ///
        /// * KEY - An identifier for a field on the document.
        ///
        /// * VALUE - The field text.
        ///
        ///
        /// The following entity types can be returned by TABLES analysis:
        ///
        /// * COLUMN_HEADER - Identifies a cell that is a header of a column.
        ///
        /// * TABLE_TITLE - Identifies a cell that is a title within the table.
        ///
        /// * TABLE_SECTION_TITLE - Identifies a cell that is a title of a section within a table. A section title is a cell that typically spans an entire row above a section.
        ///
        /// * TABLE_FOOTER - Identifies a cell that is a footer of a table.
        ///
        /// * TABLE_SUMMARY - Identifies a summary cell of a table. A summary cell can be a row of a table or an additional, smaller table that contains summary information for another table.
        ///
        /// * STRUCTURED_TABLE - Identifies a table with column headers where the content of each row corresponds to the headers.
        ///
        /// * SEMI_STRUCTURED_TABLE - Identifies a non-structured table.
        ///
        ///
        /// EntityTypes isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var entityTypes: [TextractClientTypes.EntityType]?
        /// The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information.
        public var geometry: TextractClientTypes.Geometry?
        /// The identifier for the recognized text. The identifier is only unique for a single operation.
        public var id: Swift.String?
        /// The page on which a block was detected. Page is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of Page is always 1.
        public var page: Swift.Int?
        ///
        public var query: TextractClientTypes.Query?
        /// A list of relationship objects that describe how blocks are related to each other. For example, a LINE block object contains a CHILD relationship type with the WORD blocks that make up the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks.
        public var relationships: [TextractClientTypes.Relationship]?
        /// The row in which a table cell is located. The first row position is 1. RowIndex isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var rowIndex: Swift.Int?
        /// The number of rows that a table cell spans. RowSpan isn't returned by DetectDocumentText and GetDocumentTextDetection.
        public var rowSpan: Swift.Int?
        /// The selection status of a selection element, such as an option button or check box.
        public var selectionStatus: TextractClientTypes.SelectionStatus?
        /// The word or line of text that's recognized by Amazon Textract.
        public var text: Swift.String?
        /// The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.
        public var textType: TextractClientTypes.TextType?

        public init(
            blockType: TextractClientTypes.BlockType? = nil,
            columnIndex: Swift.Int? = nil,
            columnSpan: Swift.Int? = nil,
            confidence: Swift.Float? = nil,
            entityTypes: [TextractClientTypes.EntityType]? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            id: Swift.String? = nil,
            page: Swift.Int? = nil,
            query: TextractClientTypes.Query? = nil,
            relationships: [TextractClientTypes.Relationship]? = nil,
            rowIndex: Swift.Int? = nil,
            rowSpan: Swift.Int? = nil,
            selectionStatus: TextractClientTypes.SelectionStatus? = nil,
            text: Swift.String? = nil,
            textType: TextractClientTypes.TextType? = nil
        )
        {
            self.blockType = blockType
            self.columnIndex = columnIndex
            self.columnSpan = columnSpan
            self.confidence = confidence
            self.entityTypes = entityTypes
            self.geometry = geometry
            self.id = id
            self.page = page
            self.query = query
            self.relationships = relationships
            self.rowIndex = rowIndex
            self.rowSpan = rowSpan
            self.selectionStatus = selectionStatus
            self.text = text
            self.textType = textType
        }
    }
}

extension TextractClientTypes {

    /// Information about the input document.
    public struct DocumentMetadata: Swift.Sendable {
        /// The number of pages that are detected in the document.
        public var pages: Swift.Int?

        public init(
            pages: Swift.Int? = nil
        )
        {
            self.pages = pages
        }
    }
}

extension TextractClientTypes {

    /// Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.
    public struct HumanLoopActivationOutput: Swift.Sendable {
        /// Shows the result of condition evaluations, including those conditions which activated a human review.
        public var humanLoopActivationConditionsEvaluationResults: Swift.String?
        /// Shows if and why human review was needed.
        public var humanLoopActivationReasons: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the HumanLoop created.
        public var humanLoopArn: Swift.String?

        public init(
            humanLoopActivationConditionsEvaluationResults: Swift.String? = nil,
            humanLoopActivationReasons: [Swift.String]? = nil,
            humanLoopArn: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditionsEvaluationResults = humanLoopActivationConditionsEvaluationResults
            self.humanLoopActivationReasons = humanLoopActivationReasons
            self.humanLoopArn = humanLoopArn
        }
    }
}

public struct AnalyzeDocumentOutput: Swift.Sendable {
    /// The version of the model used to analyze the document.
    public var analyzeDocumentModelVersion: Swift.String?
    /// The items that are detected and analyzed by AnalyzeDocument.
    public var blocks: [TextractClientTypes.Block]?
    /// Metadata about the analyzed document. An example is the number of pages.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// Shows the results of the human in the loop evaluation.
    public var humanLoopActivationOutput: TextractClientTypes.HumanLoopActivationOutput?

    public init(
        analyzeDocumentModelVersion: Swift.String? = nil,
        blocks: [TextractClientTypes.Block]? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        humanLoopActivationOutput: TextractClientTypes.HumanLoopActivationOutput? = nil
    )
    {
        self.analyzeDocumentModelVersion = analyzeDocumentModelVersion
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.humanLoopActivationOutput = humanLoopActivationOutput
    }
}

public struct AnalyzeExpenseInput: Swift.Sendable {
    /// The input document, either as bytes or as an S3 object. You pass image bytes to an Amazon Textract API operation by using the Bytes property. For example, you would use the Bytes property to pass a document loaded from a local file system. Image bytes passed by using the Bytes property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. You pass images stored in an S3 bucket to an Amazon Textract API operation by using the S3Object property. Documents stored in an S3 bucket don't need to be base64 encoded. The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations. If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property. For Amazon Textract to process an S3 object, the user must have permission to access the S3 object.
    /// This member is required.
    public var document: TextractClientTypes.Document?

    public init(
        document: TextractClientTypes.Document? = nil
    )
    {
        self.document = document
    }
}

extension TextractClientTypes {

    /// Returns the kind of currency detected.
    public struct ExpenseCurrency: Swift.Sendable {
        /// Currency code for detected currency. the current supported codes are:
        ///
        /// * USD
        ///
        /// * EUR
        ///
        /// * GBP
        ///
        /// * CAD
        ///
        /// * INR
        ///
        /// * JPY
        ///
        /// * CHF
        ///
        /// * AUD
        ///
        /// * CNY
        ///
        /// * BZR
        ///
        /// * SEK
        ///
        /// * HKD
        public var code: Swift.String?
        /// Percentage confideence in the detected currency.
        public var confidence: Swift.Float?

        public init(
            code: Swift.String? = nil,
            confidence: Swift.Float? = nil
        )
        {
            self.code = code
            self.confidence = confidence
        }
    }
}

extension TextractClientTypes {

    /// Shows the group that a certain key belongs to. This helps differentiate between names and addresses for different organizations, that can be hard to determine via JSON response.
    public struct ExpenseGroupProperty: Swift.Sendable {
        /// Provides a group Id number, which will be the same for each in the group.
        public var id: Swift.String?
        /// Informs you on whether the expense group is a name or an address.
        public var types: [Swift.String]?

        public init(
            id: Swift.String? = nil,
            types: [Swift.String]? = nil
        )
        {
            self.id = id
            self.types = types
        }
    }
}

extension TextractClientTypes {

    /// An object used to store information about the Value or Label detected by Amazon Textract.
    public struct ExpenseDetection: Swift.Sendable {
        /// The confidence in detection, as a percentage
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?
        /// The word or line of text recognized by Amazon Textract
        public var text: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.text = text
        }
    }
}

extension TextractClientTypes {

    /// An object used to store information about the Type detected by Amazon Textract.
    public struct ExpenseType: Swift.Sendable {
        /// The confidence of accuracy, as a percentage.
        public var confidence: Swift.Float?
        /// The word or line of text detected by Amazon Textract.
        public var text: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.text = text
        }
    }
}

extension TextractClientTypes {

    /// Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection
    public struct ExpenseField: Swift.Sendable {
        /// Shows the kind of currency, both the code and confidence associated with any monatary value detected.
        public var currency: TextractClientTypes.ExpenseCurrency?
        /// Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.
        public var groupProperties: [TextractClientTypes.ExpenseGroupProperty]?
        /// The explicitly stated label of a detected element.
        public var labelDetection: TextractClientTypes.ExpenseDetection?
        /// The page number the value was detected on.
        public var pageNumber: Swift.Int?
        /// The implied label of a detected element. Present alongside LabelDetection for explicit elements.
        public var type: TextractClientTypes.ExpenseType?
        /// The value of a detected element. Present in explicit and implicit elements.
        public var valueDetection: TextractClientTypes.ExpenseDetection?

        public init(
            currency: TextractClientTypes.ExpenseCurrency? = nil,
            groupProperties: [TextractClientTypes.ExpenseGroupProperty]? = nil,
            labelDetection: TextractClientTypes.ExpenseDetection? = nil,
            pageNumber: Swift.Int? = nil,
            type: TextractClientTypes.ExpenseType? = nil,
            valueDetection: TextractClientTypes.ExpenseDetection? = nil
        )
        {
            self.currency = currency
            self.groupProperties = groupProperties
            self.labelDetection = labelDetection
            self.pageNumber = pageNumber
            self.type = type
            self.valueDetection = valueDetection
        }
    }
}

extension TextractClientTypes {

    /// A structure that holds information about the different lines found in a document's tables.
    public struct LineItemFields: Swift.Sendable {
        /// ExpenseFields used to show information from detected lines on a table.
        public var lineItemExpenseFields: [TextractClientTypes.ExpenseField]?

        public init(
            lineItemExpenseFields: [TextractClientTypes.ExpenseField]? = nil
        )
        {
            self.lineItemExpenseFields = lineItemExpenseFields
        }
    }
}

extension TextractClientTypes {

    /// A grouping of tables which contain LineItems, with each table identified by the table's LineItemGroupIndex.
    public struct LineItemGroup: Swift.Sendable {
        /// The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.
        public var lineItemGroupIndex: Swift.Int?
        /// The breakdown of information on a particular line of a table.
        public var lineItems: [TextractClientTypes.LineItemFields]?

        public init(
            lineItemGroupIndex: Swift.Int? = nil,
            lineItems: [TextractClientTypes.LineItemFields]? = nil
        )
        {
            self.lineItemGroupIndex = lineItemGroupIndex
            self.lineItems = lineItems
        }
    }
}

extension TextractClientTypes {

    /// The structure holding all the information returned by AnalyzeExpense
    public struct ExpenseDocument: Swift.Sendable {
        /// This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.
        public var blocks: [TextractClientTypes.Block]?
        /// Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.
        public var expenseIndex: Swift.Int?
        /// Information detected on each table of a document, seperated into LineItems.
        public var lineItemGroups: [TextractClientTypes.LineItemGroup]?
        /// Any information found outside of a table by Amazon Textract.
        public var summaryFields: [TextractClientTypes.ExpenseField]?

        public init(
            blocks: [TextractClientTypes.Block]? = nil,
            expenseIndex: Swift.Int? = nil,
            lineItemGroups: [TextractClientTypes.LineItemGroup]? = nil,
            summaryFields: [TextractClientTypes.ExpenseField]? = nil
        )
        {
            self.blocks = blocks
            self.expenseIndex = expenseIndex
            self.lineItemGroups = lineItemGroups
            self.summaryFields = summaryFields
        }
    }
}

public struct AnalyzeExpenseOutput: Swift.Sendable {
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The expenses detected by Amazon Textract.
    public var expenseDocuments: [TextractClientTypes.ExpenseDocument]?

    public init(
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        expenseDocuments: [TextractClientTypes.ExpenseDocument]? = nil
    )
    {
        self.documentMetadata = documentMetadata
        self.expenseDocuments = expenseDocuments
    }
}

public struct AnalyzeIDInput: Swift.Sendable {
    /// The document being passed to AnalyzeID.
    /// This member is required.
    public var documentPages: [TextractClientTypes.Document]?

    public init(
        documentPages: [TextractClientTypes.Document]? = nil
    )
    {
        self.documentPages = documentPages
    }
}

extension TextractClientTypes {

    public enum ValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case date
        case sdkUnknown(Swift.String)

        public static var allCases: [ValueType] {
            return [
                .date
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .date: return "DATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// Contains information relating to dates in a document, including the type of value, and the value.
    public struct NormalizedValue: Swift.Sendable {
        /// The value of the date, written as Year-Month-DayTHour:Minute:Second.
        public var value: Swift.String?
        /// The normalized type of the value detected. In this case, DATE.
        public var valueType: TextractClientTypes.ValueType?

        public init(
            value: Swift.String? = nil,
            valueType: TextractClientTypes.ValueType? = nil
        )
        {
            self.value = value
            self.valueType = valueType
        }
    }
}

extension TextractClientTypes {

    /// Used to contain the information detected by an AnalyzeID operation.
    public struct AnalyzeIDDetections: Swift.Sendable {
        /// The confidence score of the detected text.
        public var confidence: Swift.Float?
        /// Only returned for dates, returns the type of value detected and the date written in a more machine readable way.
        public var normalizedValue: TextractClientTypes.NormalizedValue?
        /// Text of either the normalized field or value associated with it.
        /// This member is required.
        public var text: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            normalizedValue: TextractClientTypes.NormalizedValue? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.normalizedValue = normalizedValue
            self.text = text
        }
    }
}

extension TextractClientTypes {

    /// Structure containing both the normalized type of the extracted information and the text associated with it. These are extracted as Type and Value respectively.
    public struct IdentityDocumentField: Swift.Sendable {
        /// Used to contain the information detected by an AnalyzeID operation.
        public var type: TextractClientTypes.AnalyzeIDDetections?
        /// Used to contain the information detected by an AnalyzeID operation.
        public var valueDetection: TextractClientTypes.AnalyzeIDDetections?

        public init(
            type: TextractClientTypes.AnalyzeIDDetections? = nil,
            valueDetection: TextractClientTypes.AnalyzeIDDetections? = nil
        )
        {
            self.type = type
            self.valueDetection = valueDetection
        }
    }
}

extension TextractClientTypes {

    /// The structure that lists each document processed in an AnalyzeID operation.
    public struct IdentityDocument: Swift.Sendable {
        /// Individual word recognition, as returned by document detection.
        public var blocks: [TextractClientTypes.Block]?
        /// Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.
        public var documentIndex: Swift.Int?
        /// The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.
        public var identityDocumentFields: [TextractClientTypes.IdentityDocumentField]?

        public init(
            blocks: [TextractClientTypes.Block]? = nil,
            documentIndex: Swift.Int? = nil,
            identityDocumentFields: [TextractClientTypes.IdentityDocumentField]? = nil
        )
        {
            self.blocks = blocks
            self.documentIndex = documentIndex
            self.identityDocumentFields = identityDocumentFields
        }
    }
}

public struct AnalyzeIDOutput: Swift.Sendable {
    /// The version of the AnalyzeIdentity API being used to process documents.
    public var analyzeIDModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The list of documents processed by AnalyzeID. Includes a number denoting their place in the list and the response structure for the document.
    public var identityDocuments: [TextractClientTypes.IdentityDocument]?

    public init(
        analyzeIDModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        identityDocuments: [TextractClientTypes.IdentityDocument]? = nil
    )
    {
        self.analyzeIDModelVersion = analyzeIDModelVersion
        self.documentMetadata = documentMetadata
        self.identityDocuments = identityDocuments
    }
}

extension TextractClientTypes {

    public enum AutoUpdate: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoUpdate] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Updating or deleting a resource can cause an inconsistent state.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// A ClientRequestToken input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// An Amazon Textract service limit was exceeded. For example, if you start too many asynchronous jobs concurrently, calls to start operations (StartDocumentTextDetection, for example) raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Textract service limit.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Returned when a request cannot be completed as it would exceed a maximum service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Indicates that a request was not valid. Check request for proper formatting.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct CreateAdapterInput: Swift.Sendable {
    /// The name to be assigned to the adapter being created.
    /// This member is required.
    public var adapterName: Swift.String?
    /// Controls whether or not the adapter should automatically update.
    public var autoUpdate: TextractClientTypes.AutoUpdate?
    /// Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.
    public var clientRequestToken: Swift.String?
    /// The description to be assigned to the adapter being created.
    public var description: Swift.String?
    /// The type of feature that the adapter is being trained on. Currrenly, supported feature types are: QUERIES
    /// This member is required.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// A list of tags to be added to the adapter.
    public var tags: [Swift.String: Swift.String]?

    public init(
        adapterName: Swift.String? = nil,
        autoUpdate: TextractClientTypes.AutoUpdate? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.adapterName = adapterName
        self.autoUpdate = autoUpdate
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.featureTypes = featureTypes
        self.tags = tags
    }
}

public struct CreateAdapterOutput: Swift.Sendable {
    /// A string containing the unique ID for the adapter that has been created.
    public var adapterId: Swift.String?

    public init(
        adapterId: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
    }
}

/// Indicates you do not have decrypt permissions with the KMS key entered, or the KMS key was entered incorrectly.
public struct InvalidKMSKeyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidKMSKeyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// Returned when an operation tried to access a nonexistent resource.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension TextractClientTypes {

    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    public struct OutputConfig: Swift.Sendable {
        /// The name of the bucket your output will go to.
        /// This member is required.
        public var s3Bucket: Swift.String?
        /// The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".
        public var s3Prefix: Swift.String?

        public init(
            s3Bucket: Swift.String? = nil,
            s3Prefix: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }
    }
}

public struct CreateAdapterVersionInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter that will receive a new version.
    /// This member is required.
    public var adapterId: Swift.String?
    /// Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapterVersion requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.
    public var clientRequestToken: Swift.String?
    /// Specifies a dataset used to train a new adapter version. Takes a ManifestS3Object as the value.
    /// This member is required.
    public var datasetConfig: TextractClientTypes.AdapterVersionDatasetConfig?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). Used to encrypt your documents.
    public var kmsKeyId: Swift.String?
    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    /// This member is required.
    public var outputConfig: TextractClientTypes.OutputConfig?
    /// A set of tags (key-value pairs) that you want to attach to the adapter version.
    public var tags: [Swift.String: Swift.String]?

    public init(
        adapterId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        datasetConfig: TextractClientTypes.AdapterVersionDatasetConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.adapterId = adapterId
        self.clientRequestToken = clientRequestToken
        self.datasetConfig = datasetConfig
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.tags = tags
    }
}

public struct CreateAdapterVersionOutput: Swift.Sendable {
    /// A string containing the unique ID for the adapter that has received a new version.
    public var adapterId: Swift.String?
    /// A string describing the new version of the adapter.
    public var adapterVersion: Swift.String?

    public init(
        adapterId: Swift.String? = nil,
        adapterVersion: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterVersion = adapterVersion
    }
}

public struct DeleteAdapterInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter to be deleted.
    /// This member is required.
    public var adapterId: Swift.String?

    public init(
        adapterId: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
    }
}

public struct DeleteAdapterOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAdapterVersionInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter version that will be deleted.
    /// This member is required.
    public var adapterId: Swift.String?
    /// Specifies the adapter version to be deleted.
    /// This member is required.
    public var adapterVersion: Swift.String?

    public init(
        adapterId: Swift.String? = nil,
        adapterVersion: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterVersion = adapterVersion
    }
}

public struct DeleteAdapterVersionOutput: Swift.Sendable {

    public init() { }
}

public struct DetectDocumentTextInput: Swift.Sendable {
    /// The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format. If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the Bytes field.
    /// This member is required.
    public var document: TextractClientTypes.Document?

    public init(
        document: TextractClientTypes.Document? = nil
    )
    {
        self.document = document
    }
}

public struct DetectDocumentTextOutput: Swift.Sendable {
    /// An array of Block objects that contain the text that's detected in the document.
    public var blocks: [TextractClientTypes.Block]?
    ///
    public var detectDocumentTextModelVersion: Swift.String?
    /// Metadata about the document. It contains the number of pages that are detected in the document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?

    public init(
        blocks: [TextractClientTypes.Block]? = nil,
        detectDocumentTextModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil
    )
    {
        self.blocks = blocks
        self.detectDocumentTextModelVersion = detectDocumentTextModelVersion
        self.documentMetadata = documentMetadata
    }
}

extension TextractClientTypes {

    /// A structure that holds information regarding a detected signature on a page.
    public struct DetectedSignature: Swift.Sendable {
        /// The page a detected signature was found on.
        public var page: Swift.Int?

        public init(
            page: Swift.Int? = nil
        )
        {
            self.page = page
        }
    }
}

extension TextractClientTypes {

    /// Contains information about the pages of a document, defined by logical boundary.
    public struct SplitDocument: Swift.Sendable {
        /// The index for a given document in a DocumentGroup of a specific Type.
        public var index: Swift.Int?
        /// An array of page numbers for a for a given document, ordered by logical boundary.
        public var pages: [Swift.Int]?

        public init(
            index: Swift.Int? = nil,
            pages: [Swift.Int]? = nil
        )
        {
            self.index = index
            self.pages = pages
        }
    }
}

extension TextractClientTypes {

    /// A structure containing information about an undetected signature on a page where it was expected but not found.
    public struct UndetectedSignature: Swift.Sendable {
        /// The page where a signature was expected but not found.
        public var page: Swift.Int?

        public init(
            page: Swift.Int? = nil
        )
        {
            self.page = page
        }
    }
}

extension TextractClientTypes {

    /// Summary information about documents grouped by the same document type.
    public struct DocumentGroup: Swift.Sendable {
        /// A list of the detected signatures found in a document group.
        public var detectedSignatures: [TextractClientTypes.DetectedSignature]?
        /// An array that contains information about the pages of a document, defined by logical boundary.
        public var splitDocuments: [TextractClientTypes.SplitDocument]?
        /// The type of document that Amazon Textract has detected. See [Analyze Lending Response Objects](https://docs.aws.amazon.com/textract/latest/dg/lending-response-objects.html) for a list of all types returned by Textract.
        public var type: Swift.String?
        /// A list of any expected signatures not found in a document group.
        public var undetectedSignatures: [TextractClientTypes.UndetectedSignature]?

        public init(
            detectedSignatures: [TextractClientTypes.DetectedSignature]? = nil,
            splitDocuments: [TextractClientTypes.SplitDocument]? = nil,
            type: Swift.String? = nil,
            undetectedSignatures: [TextractClientTypes.UndetectedSignature]? = nil
        )
        {
            self.detectedSignatures = detectedSignatures
            self.splitDocuments = splitDocuments
            self.type = type
            self.undetectedSignatures = undetectedSignatures
        }
    }
}

extension TextractClientTypes {

    /// The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations. The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.
    public struct DocumentLocation: Swift.Sendable {
        /// The Amazon S3 bucket that contains the input document.
        public var s3Object: TextractClientTypes.S3Object?

        public init(
            s3Object: TextractClientTypes.S3Object? = nil
        )
        {
            self.s3Object = s3Object
        }
    }
}

extension TextractClientTypes {

    /// The results extracted for a lending document.
    public struct LendingDetection: Swift.Sendable {
        /// The confidence level for the text of a detected value in a lending document.
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?
        /// The selection status of a selection element, such as an option button or check box.
        public var selectionStatus: TextractClientTypes.SelectionStatus?
        /// The text extracted for a detected value in a lending document.
        public var text: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil,
            selectionStatus: TextractClientTypes.SelectionStatus? = nil,
            text: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
            self.selectionStatus = selectionStatus
            self.text = text
        }
    }
}

extension TextractClientTypes {

    /// Holds the normalized key-value pairs returned by AnalyzeDocument, including the document type, detected text, and geometry.
    public struct LendingField: Swift.Sendable {
        /// The results extracted for a lending document.
        public var keyDetection: TextractClientTypes.LendingDetection?
        /// The type of the lending document.
        public var type: Swift.String?
        /// An array of LendingDetection objects.
        public var valueDetections: [TextractClientTypes.LendingDetection]?

        public init(
            keyDetection: TextractClientTypes.LendingDetection? = nil,
            type: Swift.String? = nil,
            valueDetections: [TextractClientTypes.LendingDetection]? = nil
        )
        {
            self.keyDetection = keyDetection
            self.type = type
            self.valueDetections = valueDetections
        }
    }
}

extension TextractClientTypes {

    /// Information regarding a detected signature on a page.
    public struct SignatureDetection: Swift.Sendable {
        /// The confidence, from 0 to 100, in the predicted values for a detected signature.
        public var confidence: Swift.Float?
        /// Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.
        public var geometry: TextractClientTypes.Geometry?

        public init(
            confidence: Swift.Float? = nil,
            geometry: TextractClientTypes.Geometry? = nil
        )
        {
            self.confidence = confidence
            self.geometry = geometry
        }
    }
}

extension TextractClientTypes {

    /// Holds the structured data returned by AnalyzeDocument for lending documents.
    public struct LendingDocument: Swift.Sendable {
        /// An array of LendingField objects.
        public var lendingFields: [TextractClientTypes.LendingField]?
        /// A list of signatures detected in a lending document.
        public var signatureDetections: [TextractClientTypes.SignatureDetection]?

        public init(
            lendingFields: [TextractClientTypes.LendingField]? = nil,
            signatureDetections: [TextractClientTypes.SignatureDetection]? = nil
        )
        {
            self.lendingFields = lendingFields
            self.signatureDetections = signatureDetections
        }
    }
}

extension TextractClientTypes {

    /// Contains information extracted by an analysis operation after using StartLendingAnalysis.
    public struct Extraction: Swift.Sendable {
        /// The structure holding all the information returned by AnalyzeExpense
        public var expenseDocument: TextractClientTypes.ExpenseDocument?
        /// The structure that lists each document processed in an AnalyzeID operation.
        public var identityDocument: TextractClientTypes.IdentityDocument?
        /// Holds the structured data returned by AnalyzeDocument for lending documents.
        public var lendingDocument: TextractClientTypes.LendingDocument?

        public init(
            expenseDocument: TextractClientTypes.ExpenseDocument? = nil,
            identityDocument: TextractClientTypes.IdentityDocument? = nil,
            lendingDocument: TextractClientTypes.LendingDocument? = nil
        )
        {
            self.expenseDocument = expenseDocument
            self.identityDocument = identityDocument
            self.lendingDocument = lendingDocument
        }
    }
}

public struct GetAdapterInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter.
    /// This member is required.
    public var adapterId: Swift.String?

    public init(
        adapterId: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
    }
}

public struct GetAdapterOutput: Swift.Sendable {
    /// A string identifying the adapter that information has been retrieved for.
    public var adapterId: Swift.String?
    /// The name of the requested adapter.
    public var adapterName: Swift.String?
    /// Binary value indicating if the adapter is being automatically updated or not.
    public var autoUpdate: TextractClientTypes.AutoUpdate?
    /// The date and time the requested adapter was created at.
    public var creationTime: Foundation.Date?
    /// The description for the requested adapter.
    public var description: Swift.String?
    /// List of the targeted feature types for the requested adapter.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// A set of tags (key-value pairs) associated with the adapter that has been retrieved.
    public var tags: [Swift.String: Swift.String]?

    public init(
        adapterId: Swift.String? = nil,
        adapterName: Swift.String? = nil,
        autoUpdate: TextractClientTypes.AutoUpdate? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterName = adapterName
        self.autoUpdate = autoUpdate
        self.creationTime = creationTime
        self.description = description
        self.featureTypes = featureTypes
        self.tags = tags
    }
}

public struct GetAdapterVersionInput: Swift.Sendable {
    /// A string specifying a unique ID for the adapter version you want to retrieve information for.
    /// This member is required.
    public var adapterId: Swift.String?
    /// A string specifying the adapter version you want to retrieve information for.
    /// This member is required.
    public var adapterVersion: Swift.String?

    public init(
        adapterId: Swift.String? = nil,
        adapterVersion: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterVersion = adapterVersion
    }
}

public struct GetAdapterVersionOutput: Swift.Sendable {
    /// A string containing a unique ID for the adapter version being retrieved.
    public var adapterId: Swift.String?
    /// A string containing the adapter version that has been retrieved.
    public var adapterVersion: Swift.String?
    /// The time that the adapter version was created.
    public var creationTime: Foundation.Date?
    /// Specifies a dataset used to train a new adapter version. Takes a ManifestS3Objec as the value.
    public var datasetConfig: TextractClientTypes.AdapterVersionDatasetConfig?
    /// The evaluation metrics (F1 score, Precision, and Recall) for the requested version, grouped by baseline metrics and adapter version.
    public var evaluationMetrics: [TextractClientTypes.AdapterVersionEvaluationMetric]?
    /// List of the targeted feature types for the requested adapter version.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). Used to encrypt your documents.
    public var kmsKeyId: Swift.String?
    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    public var outputConfig: TextractClientTypes.OutputConfig?
    /// The status of the adapter version that has been requested.
    public var status: TextractClientTypes.AdapterVersionStatus?
    /// A message that describes the status of the requested adapter version.
    public var statusMessage: Swift.String?
    /// A set of tags (key-value pairs) that are associated with the adapter version.
    public var tags: [Swift.String: Swift.String]?

    public init(
        adapterId: Swift.String? = nil,
        adapterVersion: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        datasetConfig: TextractClientTypes.AdapterVersionDatasetConfig? = nil,
        evaluationMetrics: [TextractClientTypes.AdapterVersionEvaluationMetric]? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        kmsKeyId: Swift.String? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil,
        status: TextractClientTypes.AdapterVersionStatus? = nil,
        statusMessage: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterVersion = adapterVersion
        self.creationTime = creationTime
        self.datasetConfig = datasetConfig
        self.evaluationMetrics = evaluationMetrics
        self.featureTypes = featureTypes
        self.kmsKeyId = kmsKeyId
        self.outputConfig = outputConfig
        self.status = status
        self.statusMessage = statusMessage
        self.tags = tags
    }
}

/// An invalid job identifier was passed to an asynchronous analysis operation.
public struct InvalidJobIdException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidJobIdException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct GetDocumentAnalysisInput: Swift.Sendable {
    /// A unique identifier for the text-detection job. The JobId is returned from StartDocumentAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value that you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TextractClientTypes {

    public enum JobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case partialSuccess
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .failed,
                .inProgress,
                .partialSuccess,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .partialSuccess: return "PARTIAL_SUCCESS"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TextractClientTypes {

    /// A warning about an issue that occurred during asynchronous text analysis ([StartDocumentAnalysis]) or asynchronous document text detection ([StartDocumentTextDetection]).
    public struct Warning: Swift.Sendable {
        /// The error code for the warning.
        public var errorCode: Swift.String?
        /// A list of the pages that the warning applies to.
        public var pages: [Swift.Int]?

        public init(
            errorCode: Swift.String? = nil,
            pages: [Swift.Int]? = nil
        )
        {
            self.errorCode = errorCode
            self.pages = pages
        }
    }
}

public struct GetDocumentAnalysisOutput: Swift.Sendable {
    ///
    public var analyzeDocumentModelVersion: Swift.String?
    /// The results of the text-analysis operation.
    public var blocks: [TextractClientTypes.Block]?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract video operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the document-analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init(
        analyzeDocumentModelVersion: Swift.String? = nil,
        blocks: [TextractClientTypes.Block]? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeDocumentModelVersion = analyzeDocumentModelVersion
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

public struct GetDocumentTextDetectionInput: Swift.Sendable {
    /// A unique identifier for the text detection job. The JobId is returned from StartDocumentTextDetection. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetDocumentTextDetectionOutput: Swift.Sendable {
    /// The results of the text-detection operation.
    public var blocks: [TextractClientTypes.Block]?
    ///
    public var detectDocumentTextModelVersion: Swift.String?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract video operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the text-detection operation for the document.
    public var warnings: [TextractClientTypes.Warning]?

    public init(
        blocks: [TextractClientTypes.Block]? = nil,
        detectDocumentTextModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.blocks = blocks
        self.detectDocumentTextModelVersion = detectDocumentTextModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

public struct GetExpenseAnalysisInput: Swift.Sendable {
    /// A unique identifier for the text detection job. The JobId is returned from StartExpenseAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value you can specify is 20. If you specify a value greater than 20, a maximum of 20 results is returned. The default value is 20.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct GetExpenseAnalysisOutput: Swift.Sendable {
    /// The current model version of AnalyzeExpense.
    public var analyzeExpenseModelVersion: Swift.String?
    /// Information about a document that Amazon Textract processed. DocumentMetadata is returned in every page of paginated responses from an Amazon Textract operation.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The expenses detected by Amazon Textract.
    public var expenseDocuments: [TextractClientTypes.ExpenseDocument]?
    /// The current status of the text detection job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.
    public var nextToken: Swift.String?
    /// Returns if the detection job could not be completed. Contains explanation for what error occured.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the text-detection operation for the document.
    public var warnings: [TextractClientTypes.Warning]?

    public init(
        analyzeExpenseModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        expenseDocuments: [TextractClientTypes.ExpenseDocument]? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeExpenseModelVersion = analyzeExpenseModelVersion
        self.documentMetadata = documentMetadata
        self.expenseDocuments = expenseDocuments
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

public struct GetLendingAnalysisInput: Swift.Sendable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?
    /// The maximum number of results to return per paginated call. The largest value that you can specify is 30. If you specify a value greater than 30, a maximum of 30 results is returned. The default value is 30.
    public var maxResults: Swift.Int?
    /// If the previous response was incomplete, Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of lending results.
    public var nextToken: Swift.String?

    public init(
        jobId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobId = jobId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TextractClientTypes {

    /// Contains information regarding predicted values returned by Amazon Textract operations, including the predicted value and the confidence in the predicted value.
    public struct Prediction: Swift.Sendable {
        /// Amazon Textract's confidence in its predicted value.
        public var confidence: Swift.Float?
        /// The predicted value of a detected object.
        public var value: Swift.String?

        public init(
            confidence: Swift.Float? = nil,
            value: Swift.String? = nil
        )
        {
            self.confidence = confidence
            self.value = value
        }
    }
}

extension TextractClientTypes {

    /// The class assigned to a Page object detected in an input document. Contains information regarding the predicted type/class of a document's page and the page number that the Page object was detected on.
    public struct PageClassification: Swift.Sendable {
        /// The page number the value was detected on, relative to Amazon Textract's starting position.
        /// This member is required.
        public var pageNumber: [TextractClientTypes.Prediction]?
        /// The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.
        /// This member is required.
        public var pageType: [TextractClientTypes.Prediction]?

        public init(
            pageNumber: [TextractClientTypes.Prediction]? = nil,
            pageType: [TextractClientTypes.Prediction]? = nil
        )
        {
            self.pageNumber = pageNumber
            self.pageType = pageType
        }
    }
}

extension TextractClientTypes {

    /// Contains the detections for each page analyzed through the Analyze Lending API.
    public struct LendingResult: Swift.Sendable {
        /// An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .
        public var extractions: [TextractClientTypes.Extraction]?
        /// The page number for a page, with regard to whole submission.
        public var page: Swift.Int?
        /// The classifier result for a given page.
        public var pageClassification: TextractClientTypes.PageClassification?

        public init(
            extractions: [TextractClientTypes.Extraction]? = nil,
            page: Swift.Int? = nil,
            pageClassification: TextractClientTypes.PageClassification? = nil
        )
        {
            self.extractions = extractions
            self.page = page
            self.pageClassification = pageClassification
        }
    }
}

public struct GetLendingAnalysisOutput: Swift.Sendable {
    /// The current model version of the Analyze Lending API.
    public var analyzeLendingModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the lending analysis job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of lending results.
    public var nextToken: Swift.String?
    /// Holds the information returned by one of AmazonTextract's document analysis operations for the pinstripe.
    public var results: [TextractClientTypes.LendingResult]?
    /// Returns if the lending analysis job could not be completed. Contains explanation for what error occurred.
    public var statusMessage: Swift.String?
    /// A list of warnings that occurred during the lending analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init(
        analyzeLendingModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        nextToken: Swift.String? = nil,
        results: [TextractClientTypes.LendingResult]? = nil,
        statusMessage: Swift.String? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeLendingModelVersion = analyzeLendingModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.nextToken = nextToken
        self.results = results
        self.statusMessage = statusMessage
        self.warnings = warnings
    }
}

public struct GetLendingAnalysisSummaryInput: Swift.Sendable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension TextractClientTypes {

    /// Contains information regarding DocumentGroups and UndetectedDocumentTypes.
    public struct LendingSummary: Swift.Sendable {
        /// Contains an array of all DocumentGroup objects.
        public var documentGroups: [TextractClientTypes.DocumentGroup]?
        /// UndetectedDocumentTypes.
        public var undetectedDocumentTypes: [Swift.String]?

        public init(
            documentGroups: [TextractClientTypes.DocumentGroup]? = nil,
            undetectedDocumentTypes: [Swift.String]? = nil
        )
        {
            self.documentGroups = documentGroups
            self.undetectedDocumentTypes = undetectedDocumentTypes
        }
    }
}

public struct GetLendingAnalysisSummaryOutput: Swift.Sendable {
    /// The current model version of the Analyze Lending API.
    public var analyzeLendingModelVersion: Swift.String?
    /// Information about the input document.
    public var documentMetadata: TextractClientTypes.DocumentMetadata?
    /// The current status of the lending analysis job.
    public var jobStatus: TextractClientTypes.JobStatus?
    /// Returns if the lending analysis could not be completed. Contains explanation for what error occurred.
    public var statusMessage: Swift.String?
    /// Contains summary information for documents grouped by type.
    public var summary: TextractClientTypes.LendingSummary?
    /// A list of warnings that occurred during the lending analysis operation.
    public var warnings: [TextractClientTypes.Warning]?

    public init(
        analyzeLendingModelVersion: Swift.String? = nil,
        documentMetadata: TextractClientTypes.DocumentMetadata? = nil,
        jobStatus: TextractClientTypes.JobStatus? = nil,
        statusMessage: Swift.String? = nil,
        summary: TextractClientTypes.LendingSummary? = nil,
        warnings: [TextractClientTypes.Warning]? = nil
    )
    {
        self.analyzeLendingModelVersion = analyzeLendingModelVersion
        self.documentMetadata = documentMetadata
        self.jobStatus = jobStatus
        self.statusMessage = statusMessage
        self.summary = summary
        self.warnings = warnings
    }
}

public struct ListAdaptersInput: Swift.Sendable {
    /// Specifies the lower bound for the ListAdapters operation. Ensures ListAdapters returns only adapters created after the specified creation time.
    public var afterCreationTime: Foundation.Date?
    /// Specifies the upper bound for the ListAdapters operation. Ensures ListAdapters returns only adapters created before the specified creation time.
    public var beforeCreationTime: Foundation.Date?
    /// The maximum number of results to return when listing adapters.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return when listing adapters.
    public var nextToken: Swift.String?

    public init(
        afterCreationTime: Foundation.Date? = nil,
        beforeCreationTime: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.afterCreationTime = afterCreationTime
        self.beforeCreationTime = beforeCreationTime
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAdaptersOutput: Swift.Sendable {
    /// A list of adapters that matches the filtering criteria specified when calling ListAdapters.
    public var adapters: [TextractClientTypes.AdapterOverview]?
    /// Identifies the next page of results to return when listing adapters.
    public var nextToken: Swift.String?

    public init(
        adapters: [TextractClientTypes.AdapterOverview]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adapters = adapters
        self.nextToken = nextToken
    }
}

public struct ListAdapterVersionsInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter to match for when listing adapter versions.
    public var adapterId: Swift.String?
    /// Specifies the lower bound for the ListAdapterVersions operation. Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    public var afterCreationTime: Foundation.Date?
    /// Specifies the upper bound for the ListAdapterVersions operation. Ensures ListAdapterVersions returns only adapter versions created after the specified creation time.
    public var beforeCreationTime: Foundation.Date?
    /// The maximum number of results to return when listing adapter versions.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return when listing adapter versions.
    public var nextToken: Swift.String?

    public init(
        adapterId: Swift.String? = nil,
        afterCreationTime: Foundation.Date? = nil,
        beforeCreationTime: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
        self.afterCreationTime = afterCreationTime
        self.beforeCreationTime = beforeCreationTime
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListAdapterVersionsOutput: Swift.Sendable {
    /// Adapter versions that match the filtering criteria specified when calling ListAdapters.
    public var adapterVersions: [TextractClientTypes.AdapterVersionOverview]?
    /// Identifies the next page of results to return when listing adapter versions.
    public var nextToken: Swift.String?

    public init(
        adapterVersions: [TextractClientTypes.AdapterVersionOverview]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adapterVersions = adapterVersions
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that specifies the resource to list tags for.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A set of tags (key-value pairs) that are part of the requested resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension TextractClientTypes {

    /// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation.
    public struct NotificationChannel: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The Amazon SNS topic that Amazon Textract posts the completion status to.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init(
            roleArn: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.snsTopicArn = snsTopicArn
        }
    }
}

public struct StartDocumentAnalysisInput: Swift.Sendable {
    /// Specifies the adapter to be used when analyzing a document.
    public var adaptersConfig: TextractClientTypes.AdaptersConfig?
    /// The idempotent token that you use to identify the start request. If you use the same token with multiple StartDocumentAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html).
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. To perform both types of analysis, add TABLES and FORMS to FeatureTypes. All lines and words detected in the document are included in the response (including text that isn't related to the value of FeatureTypes).
    /// This member is required.
    public var featureTypes: [TextractClientTypes.FeatureType]?
    /// An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetDocumentAnalysis operation.
    public var outputConfig: TextractClientTypes.OutputConfig?
    ///
    public var queriesConfig: TextractClientTypes.QueriesConfig?

    public init(
        adaptersConfig: TextractClientTypes.AdaptersConfig? = nil,
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil,
        queriesConfig: TextractClientTypes.QueriesConfig? = nil
    )
    {
        self.adaptersConfig = adaptersConfig
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.featureTypes = featureTypes
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
        self.queriesConfig = queriesConfig
    }
}

public struct StartDocumentAnalysisOutput: Swift.Sendable {
    /// The identifier for the document text detection job. Use JobId to identify the job in a subsequent call to GetDocumentAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartDocumentTextDetectionInput: Swift.Sendable {
    /// The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html).
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default Amazon Textract will save the results internally to be accessed with the GetDocumentTextDetection operation.
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

public struct StartDocumentTextDetectionOutput: Swift.Sendable {
    /// The identifier of the text detection job for the document. Use JobId to identify the job in a subsequent call to GetDocumentTextDetection. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartExpenseAnalysisInput: Swift.Sendable {
    /// The idempotent token that's used to identify the start request. If you use the same token with multiple StartDocumentTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-async.html)
    public var clientRequestToken: Swift.String?
    /// The location of the document to be processed.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetExpenseAnalysis operation.
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

public struct StartExpenseAnalysisOutput: Swift.Sendable {
    /// A unique identifier for the text detection job. The JobId is returned from StartExpenseAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StartLendingAnalysisInput: Swift.Sendable {
    /// The idempotent token that you use to identify the start request. If you use the same token with multiple StartLendingAnalysis requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentally started more than once. For more information, see [Calling Amazon Textract Asynchronous Operations](https://docs.aws.amazon.com/textract/latest/dg/api-sync.html).
    public var clientRequestToken: Swift.String?
    /// The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations. The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.
    /// This member is required.
    public var documentLocation: TextractClientTypes.DocumentLocation?
    /// An identifier that you specify to be included in the completion notification published to the Amazon SNS topic. For example, you can use JobTag to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).
    public var jobTag: Swift.String?
    /// The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side, using SSE-S3.
    public var kmsKeyId: Swift.String?
    /// The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation.
    public var notificationChannel: TextractClientTypes.NotificationChannel?
    /// Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file. OutputConfig is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With OutputConfig enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the KMSKeyID parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3. Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see [ Managing AI services opt-out policy. ](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html) For more information on data privacy, see the [Data Privacy FAQ](https://aws.amazon.com/compliance/data-privacy-faq/).
    public var outputConfig: TextractClientTypes.OutputConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        documentLocation: TextractClientTypes.DocumentLocation? = nil,
        jobTag: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        notificationChannel: TextractClientTypes.NotificationChannel? = nil,
        outputConfig: TextractClientTypes.OutputConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.documentLocation = documentLocation
        self.jobTag = jobTag
        self.kmsKeyId = kmsKeyId
        self.notificationChannel = notificationChannel
        self.outputConfig = outputConfig
    }
}

public struct StartLendingAnalysisOutput: Swift.Sendable {
    /// A unique identifier for the lending or text-detection job. The JobId is returned from StartLendingAnalysis. A JobId value is only valid for 7 days.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that specifies the resource to be tagged.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A set of tags (key-value pairs) that you want to assign to the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that specifies the resource to be untagged.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// Specifies the tags to be removed from the resource specified by the ResourceARN.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAdapterInput: Swift.Sendable {
    /// A string containing a unique ID for the adapter that will be updated.
    /// This member is required.
    public var adapterId: Swift.String?
    /// The new name to be applied to the adapter.
    public var adapterName: Swift.String?
    /// The new auto-update status to be applied to the adapter.
    public var autoUpdate: TextractClientTypes.AutoUpdate?
    /// The new description to be applied to the adapter.
    public var description: Swift.String?

    public init(
        adapterId: Swift.String? = nil,
        adapterName: Swift.String? = nil,
        autoUpdate: TextractClientTypes.AutoUpdate? = nil,
        description: Swift.String? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterName = adapterName
        self.autoUpdate = autoUpdate
        self.description = description
    }
}

public struct UpdateAdapterOutput: Swift.Sendable {
    /// A string containing a unique ID for the adapter that has been updated.
    public var adapterId: Swift.String?
    /// A string containing the name of the adapter that has been updated.
    public var adapterName: Swift.String?
    /// The auto-update status of the adapter that has been updated.
    public var autoUpdate: TextractClientTypes.AutoUpdate?
    /// An object specifying the creation time of the the adapter that has been updated.
    public var creationTime: Foundation.Date?
    /// A string containing the description of the adapter that has been updated.
    public var description: Swift.String?
    /// List of the targeted feature types for the updated adapter.
    public var featureTypes: [TextractClientTypes.FeatureType]?

    public init(
        adapterId: Swift.String? = nil,
        adapterName: Swift.String? = nil,
        autoUpdate: TextractClientTypes.AutoUpdate? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        featureTypes: [TextractClientTypes.FeatureType]? = nil
    )
    {
        self.adapterId = adapterId
        self.adapterName = adapterName
        self.autoUpdate = autoUpdate
        self.creationTime = creationTime
        self.description = description
        self.featureTypes = featureTypes
    }
}

extension AnalyzeDocumentInput {

    static func urlPathProvider(_ value: AnalyzeDocumentInput) -> Swift.String? {
        return "/"
    }
}

extension AnalyzeExpenseInput {

    static func urlPathProvider(_ value: AnalyzeExpenseInput) -> Swift.String? {
        return "/"
    }
}

extension AnalyzeIDInput {

    static func urlPathProvider(_ value: AnalyzeIDInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAdapterInput {

    static func urlPathProvider(_ value: CreateAdapterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAdapterVersionInput {

    static func urlPathProvider(_ value: CreateAdapterVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAdapterInput {

    static func urlPathProvider(_ value: DeleteAdapterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAdapterVersionInput {

    static func urlPathProvider(_ value: DeleteAdapterVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DetectDocumentTextInput {

    static func urlPathProvider(_ value: DetectDocumentTextInput) -> Swift.String? {
        return "/"
    }
}

extension GetAdapterInput {

    static func urlPathProvider(_ value: GetAdapterInput) -> Swift.String? {
        return "/"
    }
}

extension GetAdapterVersionInput {

    static func urlPathProvider(_ value: GetAdapterVersionInput) -> Swift.String? {
        return "/"
    }
}

extension GetDocumentAnalysisInput {

    static func urlPathProvider(_ value: GetDocumentAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension GetDocumentTextDetectionInput {

    static func urlPathProvider(_ value: GetDocumentTextDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension GetExpenseAnalysisInput {

    static func urlPathProvider(_ value: GetExpenseAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension GetLendingAnalysisInput {

    static func urlPathProvider(_ value: GetLendingAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension GetLendingAnalysisSummaryInput {

    static func urlPathProvider(_ value: GetLendingAnalysisSummaryInput) -> Swift.String? {
        return "/"
    }
}

extension ListAdaptersInput {

    static func urlPathProvider(_ value: ListAdaptersInput) -> Swift.String? {
        return "/"
    }
}

extension ListAdapterVersionsInput {

    static func urlPathProvider(_ value: ListAdapterVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension StartDocumentAnalysisInput {

    static func urlPathProvider(_ value: StartDocumentAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension StartDocumentTextDetectionInput {

    static func urlPathProvider(_ value: StartDocumentTextDetectionInput) -> Swift.String? {
        return "/"
    }
}

extension StartExpenseAnalysisInput {

    static func urlPathProvider(_ value: StartExpenseAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension StartLendingAnalysisInput {

    static func urlPathProvider(_ value: StartLendingAnalysisInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAdapterInput {

    static func urlPathProvider(_ value: UpdateAdapterInput) -> Swift.String? {
        return "/"
    }
}

extension AnalyzeDocumentInput {

    static func write(value: AnalyzeDocumentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdaptersConfig"].write(value.adaptersConfig, with: TextractClientTypes.AdaptersConfig.write(value:to:))
        try writer["Document"].write(value.document, with: TextractClientTypes.Document.write(value:to:))
        try writer["FeatureTypes"].writeList(value.featureTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<TextractClientTypes.FeatureType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HumanLoopConfig"].write(value.humanLoopConfig, with: TextractClientTypes.HumanLoopConfig.write(value:to:))
        try writer["QueriesConfig"].write(value.queriesConfig, with: TextractClientTypes.QueriesConfig.write(value:to:))
    }
}

extension AnalyzeExpenseInput {

    static func write(value: AnalyzeExpenseInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Document"].write(value.document, with: TextractClientTypes.Document.write(value:to:))
    }
}

extension AnalyzeIDInput {

    static func write(value: AnalyzeIDInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentPages"].writeList(value.documentPages, memberWritingClosure: TextractClientTypes.Document.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAdapterInput {

    static func write(value: CreateAdapterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterName"].write(value.adapterName)
        try writer["AutoUpdate"].write(value.autoUpdate)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Description"].write(value.description)
        try writer["FeatureTypes"].writeList(value.featureTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<TextractClientTypes.FeatureType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateAdapterVersionInput {

    static func write(value: CreateAdapterVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DatasetConfig"].write(value.datasetConfig, with: TextractClientTypes.AdapterVersionDatasetConfig.write(value:to:))
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["OutputConfig"].write(value.outputConfig, with: TextractClientTypes.OutputConfig.write(value:to:))
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension DeleteAdapterInput {

    static func write(value: DeleteAdapterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
    }
}

extension DeleteAdapterVersionInput {

    static func write(value: DeleteAdapterVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["AdapterVersion"].write(value.adapterVersion)
    }
}

extension DetectDocumentTextInput {

    static func write(value: DetectDocumentTextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Document"].write(value.document, with: TextractClientTypes.Document.write(value:to:))
    }
}

extension GetAdapterInput {

    static func write(value: GetAdapterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
    }
}

extension GetAdapterVersionInput {

    static func write(value: GetAdapterVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["AdapterVersion"].write(value.adapterVersion)
    }
}

extension GetDocumentAnalysisInput {

    static func write(value: GetDocumentAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetDocumentTextDetectionInput {

    static func write(value: GetDocumentTextDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetExpenseAnalysisInput {

    static func write(value: GetExpenseAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetLendingAnalysisInput {

    static func write(value: GetLendingAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension GetLendingAnalysisSummaryInput {

    static func write(value: GetLendingAnalysisSummaryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension ListAdaptersInput {

    static func write(value: ListAdaptersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AfterCreationTime"].writeTimestamp(value.afterCreationTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["BeforeCreationTime"].writeTimestamp(value.beforeCreationTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListAdapterVersionsInput {

    static func write(value: ListAdapterVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["AfterCreationTime"].writeTimestamp(value.afterCreationTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["BeforeCreationTime"].writeTimestamp(value.beforeCreationTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension StartDocumentAnalysisInput {

    static func write(value: StartDocumentAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdaptersConfig"].write(value.adaptersConfig, with: TextractClientTypes.AdaptersConfig.write(value:to:))
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DocumentLocation"].write(value.documentLocation, with: TextractClientTypes.DocumentLocation.write(value:to:))
        try writer["FeatureTypes"].writeList(value.featureTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<TextractClientTypes.FeatureType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JobTag"].write(value.jobTag)
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["NotificationChannel"].write(value.notificationChannel, with: TextractClientTypes.NotificationChannel.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: TextractClientTypes.OutputConfig.write(value:to:))
        try writer["QueriesConfig"].write(value.queriesConfig, with: TextractClientTypes.QueriesConfig.write(value:to:))
    }
}

extension StartDocumentTextDetectionInput {

    static func write(value: StartDocumentTextDetectionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DocumentLocation"].write(value.documentLocation, with: TextractClientTypes.DocumentLocation.write(value:to:))
        try writer["JobTag"].write(value.jobTag)
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["NotificationChannel"].write(value.notificationChannel, with: TextractClientTypes.NotificationChannel.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: TextractClientTypes.OutputConfig.write(value:to:))
    }
}

extension StartExpenseAnalysisInput {

    static func write(value: StartExpenseAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DocumentLocation"].write(value.documentLocation, with: TextractClientTypes.DocumentLocation.write(value:to:))
        try writer["JobTag"].write(value.jobTag)
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["NotificationChannel"].write(value.notificationChannel, with: TextractClientTypes.NotificationChannel.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: TextractClientTypes.OutputConfig.write(value:to:))
    }
}

extension StartLendingAnalysisInput {

    static func write(value: StartLendingAnalysisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DocumentLocation"].write(value.documentLocation, with: TextractClientTypes.DocumentLocation.write(value:to:))
        try writer["JobTag"].write(value.jobTag)
        try writer["KMSKeyId"].write(value.kmsKeyId)
        try writer["NotificationChannel"].write(value.notificationChannel, with: TextractClientTypes.NotificationChannel.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: TextractClientTypes.OutputConfig.write(value:to:))
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAdapterInput {

    static func write(value: UpdateAdapterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["AdapterName"].write(value.adapterName)
        try writer["AutoUpdate"].write(value.autoUpdate)
        try writer["Description"].write(value.description)
    }
}

extension AnalyzeDocumentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AnalyzeDocumentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AnalyzeDocumentOutput()
        value.analyzeDocumentModelVersion = try reader["AnalyzeDocumentModelVersion"].readIfPresent()
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.humanLoopActivationOutput = try reader["HumanLoopActivationOutput"].readIfPresent(with: TextractClientTypes.HumanLoopActivationOutput.read(from:))
        return value
    }
}

extension AnalyzeExpenseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AnalyzeExpenseOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AnalyzeExpenseOutput()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.expenseDocuments = try reader["ExpenseDocuments"].readListIfPresent(memberReadingClosure: TextractClientTypes.ExpenseDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AnalyzeIDOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AnalyzeIDOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AnalyzeIDOutput()
        value.analyzeIDModelVersion = try reader["AnalyzeIDModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.identityDocuments = try reader["IdentityDocuments"].readListIfPresent(memberReadingClosure: TextractClientTypes.IdentityDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateAdapterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAdapterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAdapterOutput()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        return value
    }
}

extension CreateAdapterVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAdapterVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAdapterVersionOutput()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterVersion = try reader["AdapterVersion"].readIfPresent()
        return value
    }
}

extension DeleteAdapterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAdapterOutput {
        return DeleteAdapterOutput()
    }
}

extension DeleteAdapterVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAdapterVersionOutput {
        return DeleteAdapterVersionOutput()
    }
}

extension DetectDocumentTextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectDocumentTextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectDocumentTextOutput()
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.detectDocumentTextModelVersion = try reader["DetectDocumentTextModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        return value
    }
}

extension GetAdapterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAdapterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAdapterOutput()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterName = try reader["AdapterName"].readIfPresent()
        value.autoUpdate = try reader["AutoUpdate"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.FeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetAdapterVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAdapterVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAdapterVersionOutput()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterVersion = try reader["AdapterVersion"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.datasetConfig = try reader["DatasetConfig"].readIfPresent(with: TextractClientTypes.AdapterVersionDatasetConfig.read(from:))
        value.evaluationMetrics = try reader["EvaluationMetrics"].readListIfPresent(memberReadingClosure: TextractClientTypes.AdapterVersionEvaluationMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.FeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.kmsKeyId = try reader["KMSKeyId"].readIfPresent()
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: TextractClientTypes.OutputConfig.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetDocumentAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDocumentAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDocumentAnalysisOutput()
        value.analyzeDocumentModelVersion = try reader["AnalyzeDocumentModelVersion"].readIfPresent()
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: TextractClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDocumentTextDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDocumentTextDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDocumentTextDetectionOutput()
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.detectDocumentTextModelVersion = try reader["DetectDocumentTextModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: TextractClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetExpenseAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetExpenseAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetExpenseAnalysisOutput()
        value.analyzeExpenseModelVersion = try reader["AnalyzeExpenseModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.expenseDocuments = try reader["ExpenseDocuments"].readListIfPresent(memberReadingClosure: TextractClientTypes.ExpenseDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: TextractClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetLendingAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLendingAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLendingAnalysisOutput()
        value.analyzeLendingModelVersion = try reader["AnalyzeLendingModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: TextractClientTypes.LendingResult.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: TextractClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetLendingAnalysisSummaryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLendingAnalysisSummaryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLendingAnalysisSummaryOutput()
        value.analyzeLendingModelVersion = try reader["AnalyzeLendingModelVersion"].readIfPresent()
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: TextractClientTypes.DocumentMetadata.read(from:))
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.summary = try reader["Summary"].readIfPresent(with: TextractClientTypes.LendingSummary.read(from:))
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: TextractClientTypes.Warning.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAdaptersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAdaptersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAdaptersOutput()
        value.adapters = try reader["Adapters"].readListIfPresent(memberReadingClosure: TextractClientTypes.AdapterOverview.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAdapterVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAdapterVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAdapterVersionsOutput()
        value.adapterVersions = try reader["AdapterVersions"].readListIfPresent(memberReadingClosure: TextractClientTypes.AdapterVersionOverview.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension StartDocumentAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDocumentAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDocumentAnalysisOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartDocumentTextDetectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDocumentTextDetectionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDocumentTextDetectionOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartExpenseAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartExpenseAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartExpenseAnalysisOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension StartLendingAnalysisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartLendingAnalysisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartLendingAnalysisOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAdapterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAdapterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAdapterOutput()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterName = try reader["AdapterName"].readIfPresent()
        value.autoUpdate = try reader["AutoUpdate"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.FeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

enum AnalyzeDocumentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "HumanLoopQuotaExceededException": return try HumanLoopQuotaExceededException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AnalyzeExpenseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AnalyzeIDOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAdapterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAdapterVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAdapterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAdapterVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectDocumentTextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAdapterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAdapterVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDocumentAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidJobIdException": return try InvalidJobIdException.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDocumentTextDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidJobIdException": return try InvalidJobIdException.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetExpenseAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidJobIdException": return try InvalidJobIdException.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLendingAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidJobIdException": return try InvalidJobIdException.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLendingAnalysisSummaryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidJobIdException": return try InvalidJobIdException.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAdaptersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAdapterVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDocumentAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDocumentTextDetectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartExpenseAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartLendingAnalysisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "BadDocumentException": return try BadDocumentException.makeError(baseError: baseError)
            case "DocumentTooLargeException": return try DocumentTooLargeException.makeError(baseError: baseError)
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidKMSKeyException": return try InvalidKMSKeyException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidS3ObjectException": return try InvalidS3ObjectException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "UnsupportedDocumentException": return try UnsupportedDocumentException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAdapterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerError": return try InternalServerError.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ProvisionedThroughputExceededException": return try ProvisionedThroughputExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension HumanLoopQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> HumanLoopQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = HumanLoopQuotaExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent()
        value.properties.resourceType = try reader["ResourceType"].readIfPresent()
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BadDocumentException {
        let reader = baseError.errorBodyReader
        var value = BadDocumentException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ProvisionedThroughputExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ProvisionedThroughputExceededException {
        let reader = baseError.errorBodyReader
        var value = ProvisionedThroughputExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DocumentTooLargeException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DocumentTooLargeException {
        let reader = baseError.errorBodyReader
        var value = DocumentTooLargeException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidS3ObjectException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidS3ObjectException {
        let reader = baseError.errorBodyReader
        var value = InvalidS3ObjectException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedDocumentException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedDocumentException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedDocumentException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerError {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerError {
        let reader = baseError.errorBodyReader
        var value = InternalServerError()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidKMSKeyException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidKMSKeyException {
        let reader = baseError.errorBodyReader
        var value = InvalidKMSKeyException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidJobIdException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidJobIdException {
        let reader = baseError.errorBodyReader
        var value = InvalidJobIdException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TextractClientTypes.DocumentMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.DocumentMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.DocumentMetadata()
        value.pages = try reader["Pages"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.Block {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Block {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Block()
        value.blockType = try reader["BlockType"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.textType = try reader["TextType"].readIfPresent()
        value.rowIndex = try reader["RowIndex"].readIfPresent()
        value.columnIndex = try reader["ColumnIndex"].readIfPresent()
        value.rowSpan = try reader["RowSpan"].readIfPresent()
        value.columnSpan = try reader["ColumnSpan"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: TextractClientTypes.Geometry.read(from:))
        value.id = try reader["Id"].readIfPresent()
        value.relationships = try reader["Relationships"].readListIfPresent(memberReadingClosure: TextractClientTypes.Relationship.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.entityTypes = try reader["EntityTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.EntityType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.selectionStatus = try reader["SelectionStatus"].readIfPresent()
        value.page = try reader["Page"].readIfPresent()
        value.query = try reader["Query"].readIfPresent(with: TextractClientTypes.Query.read(from:))
        return value
    }
}

extension TextractClientTypes.Query {

    static func write(value: TextractClientTypes.Query?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alias"].write(value.alias)
        try writer["Pages"].writeList(value.pages, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Text"].write(value.text)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Query {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Query()
        value.text = try reader["Text"].readIfPresent() ?? ""
        value.alias = try reader["Alias"].readIfPresent()
        value.pages = try reader["Pages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.Relationship {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Relationship {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Relationship()
        value.type = try reader["Type"].readIfPresent()
        value.ids = try reader["Ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.Geometry {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Geometry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Geometry()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: TextractClientTypes.BoundingBox.read(from:))
        value.polygon = try reader["Polygon"].readListIfPresent(memberReadingClosure: TextractClientTypes.Point.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.Point {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Point {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Point()
        value.x = try reader["X"].readIfPresent() ?? 0
        value.y = try reader["Y"].readIfPresent() ?? 0
        return value
    }
}

extension TextractClientTypes.BoundingBox {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.BoundingBox {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.BoundingBox()
        value.width = try reader["Width"].readIfPresent() ?? 0
        value.height = try reader["Height"].readIfPresent() ?? 0
        value.`left` = try reader["Left"].readIfPresent() ?? 0
        value.top = try reader["Top"].readIfPresent() ?? 0
        return value
    }
}

extension TextractClientTypes.HumanLoopActivationOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.HumanLoopActivationOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.HumanLoopActivationOutput()
        value.humanLoopArn = try reader["HumanLoopArn"].readIfPresent()
        value.humanLoopActivationReasons = try reader["HumanLoopActivationReasons"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.humanLoopActivationConditionsEvaluationResults = try reader["HumanLoopActivationConditionsEvaluationResults"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.ExpenseDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseDocument()
        value.expenseIndex = try reader["ExpenseIndex"].readIfPresent()
        value.summaryFields = try reader["SummaryFields"].readListIfPresent(memberReadingClosure: TextractClientTypes.ExpenseField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lineItemGroups = try reader["LineItemGroups"].readListIfPresent(memberReadingClosure: TextractClientTypes.LineItemGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.LineItemGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LineItemGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LineItemGroup()
        value.lineItemGroupIndex = try reader["LineItemGroupIndex"].readIfPresent()
        value.lineItems = try reader["LineItems"].readListIfPresent(memberReadingClosure: TextractClientTypes.LineItemFields.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.LineItemFields {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LineItemFields {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LineItemFields()
        value.lineItemExpenseFields = try reader["LineItemExpenseFields"].readListIfPresent(memberReadingClosure: TextractClientTypes.ExpenseField.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.ExpenseField {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseField()
        value.type = try reader["Type"].readIfPresent(with: TextractClientTypes.ExpenseType.read(from:))
        value.labelDetection = try reader["LabelDetection"].readIfPresent(with: TextractClientTypes.ExpenseDetection.read(from:))
        value.valueDetection = try reader["ValueDetection"].readIfPresent(with: TextractClientTypes.ExpenseDetection.read(from:))
        value.pageNumber = try reader["PageNumber"].readIfPresent()
        value.currency = try reader["Currency"].readIfPresent(with: TextractClientTypes.ExpenseCurrency.read(from:))
        value.groupProperties = try reader["GroupProperties"].readListIfPresent(memberReadingClosure: TextractClientTypes.ExpenseGroupProperty.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.ExpenseGroupProperty {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseGroupProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseGroupProperty()
        value.types = try reader["Types"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.id = try reader["Id"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.ExpenseCurrency {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseCurrency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseCurrency()
        value.code = try reader["Code"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.ExpenseDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseDetection()
        value.text = try reader["Text"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: TextractClientTypes.Geometry.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.ExpenseType {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.ExpenseType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.ExpenseType()
        value.text = try reader["Text"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.IdentityDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.IdentityDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.IdentityDocument()
        value.documentIndex = try reader["DocumentIndex"].readIfPresent()
        value.identityDocumentFields = try reader["IdentityDocumentFields"].readListIfPresent(memberReadingClosure: TextractClientTypes.IdentityDocumentField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: TextractClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.IdentityDocumentField {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.IdentityDocumentField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.IdentityDocumentField()
        value.type = try reader["Type"].readIfPresent(with: TextractClientTypes.AnalyzeIDDetections.read(from:))
        value.valueDetection = try reader["ValueDetection"].readIfPresent(with: TextractClientTypes.AnalyzeIDDetections.read(from:))
        return value
    }
}

extension TextractClientTypes.AnalyzeIDDetections {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.AnalyzeIDDetections {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.AnalyzeIDDetections()
        value.text = try reader["Text"].readIfPresent() ?? ""
        value.normalizedValue = try reader["NormalizedValue"].readIfPresent(with: TextractClientTypes.NormalizedValue.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.NormalizedValue {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.NormalizedValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.NormalizedValue()
        value.value = try reader["Value"].readIfPresent()
        value.valueType = try reader["ValueType"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.AdapterVersionDatasetConfig {

    static func write(value: TextractClientTypes.AdapterVersionDatasetConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ManifestS3Object"].write(value.manifestS3Object, with: TextractClientTypes.S3Object.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.AdapterVersionDatasetConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.AdapterVersionDatasetConfig()
        value.manifestS3Object = try reader["ManifestS3Object"].readIfPresent(with: TextractClientTypes.S3Object.read(from:))
        return value
    }
}

extension TextractClientTypes.S3Object {

    static func write(value: TextractClientTypes.S3Object?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["Name"].write(value.name)
        try writer["Version"].write(value.version)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.S3Object {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.S3Object()
        value.bucket = try reader["Bucket"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.OutputConfig {

    static func write(value: TextractClientTypes.OutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Bucket"].write(value.s3Bucket)
        try writer["S3Prefix"].write(value.s3Prefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.OutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.OutputConfig()
        value.s3Bucket = try reader["S3Bucket"].readIfPresent() ?? ""
        value.s3Prefix = try reader["S3Prefix"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.AdapterVersionEvaluationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.AdapterVersionEvaluationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.AdapterVersionEvaluationMetric()
        value.baseline = try reader["Baseline"].readIfPresent(with: TextractClientTypes.EvaluationMetric.read(from:))
        value.adapterVersion = try reader["AdapterVersion"].readIfPresent(with: TextractClientTypes.EvaluationMetric.read(from:))
        value.featureType = try reader["FeatureType"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.EvaluationMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.EvaluationMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.EvaluationMetric()
        value.f1Score = try reader["F1Score"].readIfPresent() ?? 0
        value.precision = try reader["Precision"].readIfPresent() ?? 0
        value.recall = try reader["Recall"].readIfPresent() ?? 0
        return value
    }
}

extension TextractClientTypes.Warning {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Warning {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Warning()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.pages = try reader["Pages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.LendingResult {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LendingResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LendingResult()
        value.page = try reader["Page"].readIfPresent()
        value.pageClassification = try reader["PageClassification"].readIfPresent(with: TextractClientTypes.PageClassification.read(from:))
        value.extractions = try reader["Extractions"].readListIfPresent(memberReadingClosure: TextractClientTypes.Extraction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.Extraction {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Extraction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Extraction()
        value.lendingDocument = try reader["LendingDocument"].readIfPresent(with: TextractClientTypes.LendingDocument.read(from:))
        value.expenseDocument = try reader["ExpenseDocument"].readIfPresent(with: TextractClientTypes.ExpenseDocument.read(from:))
        value.identityDocument = try reader["IdentityDocument"].readIfPresent(with: TextractClientTypes.IdentityDocument.read(from:))
        return value
    }
}

extension TextractClientTypes.LendingDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LendingDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LendingDocument()
        value.lendingFields = try reader["LendingFields"].readListIfPresent(memberReadingClosure: TextractClientTypes.LendingField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.signatureDetections = try reader["SignatureDetections"].readListIfPresent(memberReadingClosure: TextractClientTypes.SignatureDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.SignatureDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.SignatureDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.SignatureDetection()
        value.confidence = try reader["Confidence"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: TextractClientTypes.Geometry.read(from:))
        return value
    }
}

extension TextractClientTypes.LendingField {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LendingField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LendingField()
        value.type = try reader["Type"].readIfPresent()
        value.keyDetection = try reader["KeyDetection"].readIfPresent(with: TextractClientTypes.LendingDetection.read(from:))
        value.valueDetections = try reader["ValueDetections"].readListIfPresent(memberReadingClosure: TextractClientTypes.LendingDetection.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.LendingDetection {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LendingDetection {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LendingDetection()
        value.text = try reader["Text"].readIfPresent()
        value.selectionStatus = try reader["SelectionStatus"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: TextractClientTypes.Geometry.read(from:))
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.PageClassification {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.PageClassification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.PageClassification()
        value.pageType = try reader["PageType"].readListIfPresent(memberReadingClosure: TextractClientTypes.Prediction.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.pageNumber = try reader["PageNumber"].readListIfPresent(memberReadingClosure: TextractClientTypes.Prediction.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension TextractClientTypes.Prediction {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.Prediction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.Prediction()
        value.value = try reader["Value"].readIfPresent()
        value.confidence = try reader["Confidence"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.LendingSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.LendingSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.LendingSummary()
        value.documentGroups = try reader["DocumentGroups"].readListIfPresent(memberReadingClosure: TextractClientTypes.DocumentGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.undetectedDocumentTypes = try reader["UndetectedDocumentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.DocumentGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.DocumentGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.DocumentGroup()
        value.type = try reader["Type"].readIfPresent()
        value.splitDocuments = try reader["SplitDocuments"].readListIfPresent(memberReadingClosure: TextractClientTypes.SplitDocument.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.detectedSignatures = try reader["DetectedSignatures"].readListIfPresent(memberReadingClosure: TextractClientTypes.DetectedSignature.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.undetectedSignatures = try reader["UndetectedSignatures"].readListIfPresent(memberReadingClosure: TextractClientTypes.UndetectedSignature.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.UndetectedSignature {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.UndetectedSignature {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.UndetectedSignature()
        value.page = try reader["Page"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.DetectedSignature {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.DetectedSignature {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.DetectedSignature()
        value.page = try reader["Page"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.SplitDocument {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.SplitDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.SplitDocument()
        value.index = try reader["Index"].readIfPresent()
        value.pages = try reader["Pages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.AdapterOverview {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.AdapterOverview {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.AdapterOverview()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterName = try reader["AdapterName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.FeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TextractClientTypes.AdapterVersionOverview {

    static func read(from reader: SmithyJSON.Reader) throws -> TextractClientTypes.AdapterVersionOverview {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TextractClientTypes.AdapterVersionOverview()
        value.adapterId = try reader["AdapterId"].readIfPresent()
        value.adapterVersion = try reader["AdapterVersion"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<TextractClientTypes.FeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension TextractClientTypes.Document {

    static func write(value: TextractClientTypes.Document?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bytes"].write(value.bytes)
        try writer["S3Object"].write(value.s3Object, with: TextractClientTypes.S3Object.write(value:to:))
    }
}

extension TextractClientTypes.HumanLoopConfig {

    static func write(value: TextractClientTypes.HumanLoopConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataAttributes"].write(value.dataAttributes, with: TextractClientTypes.HumanLoopDataAttributes.write(value:to:))
        try writer["FlowDefinitionArn"].write(value.flowDefinitionArn)
        try writer["HumanLoopName"].write(value.humanLoopName)
    }
}

extension TextractClientTypes.HumanLoopDataAttributes {

    static func write(value: TextractClientTypes.HumanLoopDataAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentClassifiers"].writeList(value.contentClassifiers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<TextractClientTypes.ContentClassifier>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TextractClientTypes.QueriesConfig {

    static func write(value: TextractClientTypes.QueriesConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Queries"].writeList(value.queries, memberWritingClosure: TextractClientTypes.Query.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TextractClientTypes.AdaptersConfig {

    static func write(value: TextractClientTypes.AdaptersConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Adapters"].writeList(value.adapters, memberWritingClosure: TextractClientTypes.Adapter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension TextractClientTypes.Adapter {

    static func write(value: TextractClientTypes.Adapter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdapterId"].write(value.adapterId)
        try writer["Pages"].writeList(value.pages, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Version"].write(value.version)
    }
}

extension TextractClientTypes.DocumentLocation {

    static func write(value: TextractClientTypes.DocumentLocation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Object"].write(value.s3Object, with: TextractClientTypes.S3Object.write(value:to:))
    }
}

extension TextractClientTypes.NotificationChannel {

    static func write(value: TextractClientTypes.NotificationChannel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RoleArn"].write(value.roleArn)
        try writer["SNSTopicArn"].write(value.snsTopicArn)
    }
}

public enum TextractClientTypes {}
