// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClient {
    /// Paginate over `[ListAdaptersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAdaptersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAdaptersOutput`
    public func listAdaptersPaginated(input: ListAdaptersInput) -> ClientRuntime.PaginatorSequence<ListAdaptersInput, ListAdaptersOutput> {
        return ClientRuntime.PaginatorSequence<ListAdaptersInput, ListAdaptersOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAdapters(input:))
    }
}

extension ListAdaptersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAdaptersInput {
        return ListAdaptersInput(
            afterCreationTime: self.afterCreationTime,
            beforeCreationTime: self.beforeCreationTime,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListAdaptersInput, OperationStackOutput == ListAdaptersOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listAdaptersPaginated`
    /// to access the nested member `[TextractClientTypes.AdapterOverview]`
    /// - Returns: `[TextractClientTypes.AdapterOverview]`
    public func adapters() async throws -> [TextractClientTypes.AdapterOverview] {
        return try await self.asyncCompactMap { item in item.adapters }
    }
}
extension TextractClient {
    /// Paginate over `[ListAdapterVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAdapterVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAdapterVersionsOutput`
    public func listAdapterVersionsPaginated(input: ListAdapterVersionsInput) -> ClientRuntime.PaginatorSequence<ListAdapterVersionsInput, ListAdapterVersionsOutput> {
        return ClientRuntime.PaginatorSequence<ListAdapterVersionsInput, ListAdapterVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAdapterVersions(input:))
    }
}

extension ListAdapterVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAdapterVersionsInput {
        return ListAdapterVersionsInput(
            adapterId: self.adapterId,
            afterCreationTime: self.afterCreationTime,
            beforeCreationTime: self.beforeCreationTime,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListAdapterVersionsInput, OperationStackOutput == ListAdapterVersionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listAdapterVersionsPaginated`
    /// to access the nested member `[TextractClientTypes.AdapterVersionOverview]`
    /// - Returns: `[TextractClientTypes.AdapterVersionOverview]`
    public func adapterVersions() async throws -> [TextractClientTypes.AdapterVersionOverview] {
        return try await self.asyncCompactMap { item in item.adapterVersions }
    }
}
