// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SSMClientProtocol {

    static func commandExecutedWaiterConfig() throws -> WaiterConfiguration<GetCommandInvocationInput, GetCommandInvocationOutputResponse> {
        let acceptors: [WaiterConfiguration<GetCommandInvocationInput, GetCommandInvocationOutputResponse>.Acceptor] = [
            .init(state: .retry, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Pending"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Pending")
            }),
            .init(state: .retry, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "InProgress"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "InProgress")
            }),
            .init(state: .retry, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Delayed"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Delayed")
            }),
            .init(state: .success, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Success"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Success")
            }),
            .init(state: .failure, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Cancelled"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Cancelled")
            }),
            .init(state: .failure, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "TimedOut"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "TimedOut")
            }),
            .init(state: .failure, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Failed"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Failed")
            }),
            .init(state: .failure, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                // JMESPath expression: "Status"
                // JMESPath comparator: "stringEquals"
                // JMESPath expected value: "Cancelling"
                guard case .success(let output) = result else { return false }
                let status = output.status
                return JMESUtils.compare(status, ==, "Cancelling")
            }),
            .init(state: .retry, matcher: { (input: GetCommandInvocationInput, result: Result<GetCommandInvocationOutputResponse, Error>) -> Bool in
                guard case .failure(let error) = result else { return false }
                return (error as? WaiterTypedError)?.waiterErrorType == "InvocationDoesNotExist"
            }),
        ]
        return try WaiterConfiguration<GetCommandInvocationInput, GetCommandInvocationOutputResponse>(acceptors: acceptors, minDelay: 5.0, maxDelay: 120.0)
    }

    /// Initiates waiting for the CommandExecuted event on the getCommandInvocation operation.
    /// The operation will be tried and (if necessary) retried until the wait succeeds, fails, or times out.
    /// Returns a `WaiterOutcome` asynchronously on waiter success, throws an error asynchronously on
    /// waiter failure or timeout.
    /// - Parameters:
    ///   - options: `WaiterOptions` to be used to configure this wait.
    ///   - input: The `GetCommandInvocationInput` object to be used as a parameter when performing the operation.
    /// - Returns: A `WaiterOutcome` with the result of the final, successful performance of the operation.
    /// - Throws: `WaiterFailureError` if the waiter fails due to matching an `Acceptor` with state `failure`
    /// or there is an error not handled by any `Acceptor.`
    /// `WaiterTimeoutError` if the waiter times out.
    public func waitUntilCommandExecuted(options: WaiterOptions, input: GetCommandInvocationInput) async throws -> WaiterOutcome<GetCommandInvocationOutputResponse> {
        let waiter = Waiter(config: try Self.commandExecutedWaiterConfig(), operation: self.getCommandInvocation(input:))
        return try await waiter.waitUntil(options: options, input: input)
    }
}
