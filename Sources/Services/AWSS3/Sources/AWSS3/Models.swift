//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class AWSClientRuntime.AmzSdkRequestMiddleware
import class ClientRuntime.OrchestratorBuilder
import class ClientRuntime.OrchestratorTelemetry
import class Smithy.Context
import class Smithy.ContextBuilder
import class SmithyEventStreams.DefaultMessageDecoder
import class SmithyHTTPAPI.HTTPRequest
import class SmithyHTTPAPI.HTTPRequestBuilder
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
@_spi(SmithyReadWrite) import class SmithyXML.Writer
import enum AWSClientRuntime.AWSRetryErrorInfoProvider
import enum ClientRuntime.ErrorFault
import enum ClientRuntime.OrchestratorMetricsAttributesKeys
import enum Smithy.ByteStream
import enum Smithy.ClientError
import enum SmithyEventStreamsAPI.MessageType
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import func ClientRuntime.quoteHeaderValue
@_spi(SmithyReadWrite) import protocol AWSClientRuntime.AWSS3ServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
import protocol Smithy.RequestMessageSerializer
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
import struct AWSClientRuntime.AWSS3ErrorWith200StatusXMLMiddleware
import struct AWSClientRuntime.AmzSdkInvocationIdMiddleware
import struct AWSClientRuntime.EndpointResolverMiddleware
import struct AWSClientRuntime.FlexibleChecksumsRequestMiddleware
import struct AWSClientRuntime.FlexibleChecksumsResponseMiddleware
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestXMLError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct AWSClientRuntime.UserAgentMiddleware
import struct ClientRuntime.AuthSchemeMiddleware
import struct ClientRuntime.BlobStreamBodyMiddleware
import struct ClientRuntime.ContentLengthMiddleware
import struct ClientRuntime.ContentTypeMiddleware
@_spi(SmithyReadWrite) import struct ClientRuntime.DeserializeMiddleware
import struct ClientRuntime.HeaderMiddleware
import struct ClientRuntime.LoggerMiddleware
import struct ClientRuntime.QueryItemMiddleware
import struct ClientRuntime.SignerMiddleware
import struct ClientRuntime.URLHostMiddleware
import struct ClientRuntime.URLPathMiddleware
import struct Smithy.AttributeKey
import struct Smithy.Attributes
import struct Smithy.URIQueryItem
import struct SmithyEventStreams.DefaultMessageDecoderStream
import struct SmithyEventStreamsAPI.Message
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
import struct SmithyRetries.DefaultRetryStrategy
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter
import typealias SmithyEventStreamsAPI.UnmarshalClosure


public struct DeleteBucketAnalyticsConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketCorsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketEncryptionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketIntelligentTieringConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketInventoryConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketLifecycleOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketMetricsConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketOwnershipControlsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketReplicationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketTaggingOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteBucketWebsiteOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePublicAccessBlockOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketAccelerateConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketAclOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketAnalyticsConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketCorsOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketEncryptionOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketIntelligentTieringConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketInventoryConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketLoggingOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketMetricsConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketNotificationConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketOwnershipControlsOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketPolicyOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketReplicationOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketRequestPaymentOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketTaggingOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketVersioningOutput: Swift.Sendable {

    public init() { }
}

public struct PutBucketWebsiteOutput: Swift.Sendable {

    public init() { }
}

public struct PutPublicAccessBlockOutput: Swift.Sendable {

    public init() { }
}

public struct WriteGetObjectResponseOutput: Swift.Sendable {

    public init() { }
}

extension S3ClientTypes {

    /// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide.
    public struct AbortIncompleteMultipartUpload: Swift.Sendable {
        /// Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload.
        public var daysAfterInitiation: Swift.Int?

        public init(
            daysAfterInitiation: Swift.Int? = nil
        )
        {
            self.daysAfterInitiation = daysAfterInitiation
        }
    }
}

/// The specified multipart upload does not exist.
public struct NoSuchUpload: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchUpload" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public enum RequestPayer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestPayer] {
            return [
                .requester
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AbortMultipartUploadInput: Swift.Sendable {
    /// The bucket name to which the upload was taking place. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Key of the object for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Upload ID that identifies the multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.uploadId = uploadId
    }
}

extension S3ClientTypes {

    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public enum RequestCharged: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [RequestCharged] {
            return [
                .requester
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .requester: return "requester"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AbortMultipartUploadOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

extension S3ClientTypes {

    public enum BucketAccelerateStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketAccelerateStatus] {
            return [
                .enabled,
                .suspended
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the Amazon S3 User Guide.
    public struct AccelerateConfiguration: Swift.Sendable {
        /// Specifies the transfer acceleration status of the bucket.
        public var status: S3ClientTypes.BucketAccelerateStatus?

        public init(
            status: S3ClientTypes.BucketAccelerateStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension S3ClientTypes {

    public enum ModelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazoncustomerbyemail
        case canonicaluser
        case group
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .amazoncustomerbyemail,
                .canonicaluser,
                .group
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazoncustomerbyemail: return "AmazonCustomerByEmail"
            case .canonicaluser: return "CanonicalUser"
            case .group: return "Group"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for the person being granted permissions.
    public struct Grantee: Swift.Sendable {
        /// Screen name of the grantee.
        public var displayName: Swift.String?
        /// Email address of the grantee. Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
        ///
        /// * US East (N. Virginia)
        ///
        /// * US West (N. California)
        ///
        /// * US West (Oregon)
        ///
        /// * Asia Pacific (Singapore)
        ///
        /// * Asia Pacific (Sydney)
        ///
        /// * Asia Pacific (Tokyo)
        ///
        /// * Europe (Ireland)
        ///
        /// * South America (São Paulo)
        ///
        ///
        /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
        public var emailAddress: Swift.String?
        /// The canonical user ID of the grantee.
        public var id: Swift.String?
        /// Type of grantee
        /// This member is required.
        public var type: S3ClientTypes.ModelType?
        /// URI of the grantee group.
        public var uri: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            emailAddress: Swift.String? = nil,
            id: Swift.String? = nil,
            type: S3ClientTypes.ModelType? = nil,
            uri: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.emailAddress = emailAddress
            self.id = id
            self.type = type
            self.uri = uri
        }
    }
}

extension S3ClientTypes {

    public enum Permission: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullControl
        case read
        case readAcp
        case write
        case writeAcp
        case sdkUnknown(Swift.String)

        public static var allCases: [Permission] {
            return [
                .fullControl,
                .read,
                .readAcp,
                .write,
                .writeAcp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .readAcp: return "READ_ACP"
            case .write: return "WRITE"
            case .writeAcp: return "WRITE_ACP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for grant information.
    public struct Grant: Swift.Sendable {
        /// The person being granted permissions.
        public var grantee: S3ClientTypes.Grantee?
        /// Specifies the permission given to the grantee.
        public var permission: S3ClientTypes.Permission?

        public init(
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.Permission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }
}

extension S3ClientTypes {

    /// Container for the owner's display name and ID.
    public struct Owner: Swift.Sendable {
        /// Container for the display name of the owner. This value is only supported in the following Amazon Web Services Regions:
        ///
        /// * US East (N. Virginia)
        ///
        /// * US West (N. California)
        ///
        /// * US West (Oregon)
        ///
        /// * Asia Pacific (Singapore)
        ///
        /// * Asia Pacific (Sydney)
        ///
        /// * Asia Pacific (Tokyo)
        ///
        /// * Europe (Ireland)
        ///
        /// * South America (São Paulo)
        ///
        ///
        /// This functionality is not supported for directory buckets.
        public var displayName: Swift.String?
        /// Container for the ID of the owner.
        public var id: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.id = id
        }
    }
}

extension S3ClientTypes {

    /// Contains the elements that set the ACL permissions for an object per grantee.
    public struct AccessControlPolicy: Swift.Sendable {
        /// A list of grants.
        public var grants: [S3ClientTypes.Grant]?
        /// Container for the bucket owner's display name and ID.
        public var owner: S3ClientTypes.Owner?

        public init(
            grants: [S3ClientTypes.Grant]? = nil,
            owner: S3ClientTypes.Owner? = nil
        )
        {
            self.grants = grants
            self.owner = owner
        }
    }
}

extension S3ClientTypes {

    public enum OwnerOverride: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case destination
        case sdkUnknown(Swift.String)

        public static var allCases: [OwnerOverride] {
            return [
                .destination
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .destination: return "Destination"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// A container for information about access control for replicas.
    public struct AccessControlTranslation: Swift.Sendable {
        /// Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the Amazon S3 API Reference.
        /// This member is required.
        public var owner: S3ClientTypes.OwnerOverride?

        public init(
            owner: S3ClientTypes.OwnerOverride? = nil
        )
        {
            self.owner = owner
        }
    }
}

extension S3ClientTypes {

    /// Details of the parts that were uploaded.
    public struct CompletedPart: Swift.Sendable {
        /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag returned when the part was uploaded.
        public var eTag: Swift.String?
        /// Part number that identifies the part. This is a positive integer between 1 and 10,000.
        ///
        /// * General purpose buckets - In CompleteMultipartUpload, when a additional checksum (including x-amz-checksum-crc32, x-amz-checksum-crc32c, x-amz-checksum-sha1, or x-amz-checksum-sha256) is applied to each part, the PartNumber must start at 1 and the part numbers must be consecutive. Otherwise, Amazon S3 generates an HTTP 400 Bad Request status code and an InvalidPartOrder error code.
        ///
        /// * Directory buckets - In CompleteMultipartUpload, the PartNumber must start at 1 and the part numbers must be consecutive.
        public var partNumber: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            partNumber: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.partNumber = partNumber
        }
    }
}

extension S3ClientTypes {

    /// The container for the completed multipart upload details.
    public struct CompletedMultipartUpload: Swift.Sendable {
        /// Array of CompletedPart data types. If you do not supply a valid Part with your request, the service sends back an HTTP 400 response.
        public var parts: [S3ClientTypes.CompletedPart]?

        public init(
            parts: [S3ClientTypes.CompletedPart]? = nil
        )
        {
            self.parts = parts
        }
    }
}

public struct CompleteMultipartUploadInput: Swift.Sendable {
    /// Name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Uploads the object only if the object key name does not already exist in the bucket specified. Otherwise, Amazon S3 returns a 412 Precondition Failed error. If a conflicting operation occurs during the upload S3 returns a 409 ConditionalRequestConflict response. On a 409 failure you should re-initiate the multipart upload with CreateMultipartUpload and re-upload each part. Expects the '*' (asterisk) character. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232), or [Conditional requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/conditional-requests.html) in the Amazon S3 User Guide.
    public var ifNoneMatch: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// The container for the multipart upload request information.
    public var multipartUpload: S3ClientTypes.CompletedMultipartUpload?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is required only when the object was created using a checksum algorithm or if your bucket policy requires the use of SSE-C. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html#ssec-require-condition-key) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// ID for the initiated multipart upload.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifNoneMatch: Swift.String? = nil,
        key: Swift.String? = nil,
        multipartUpload: S3ClientTypes.CompletedMultipartUpload? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.expectedBucketOwner = expectedBucketOwner
        self.ifNoneMatch = ifNoneMatch
        self.key = key
        self.multipartUpload = multipartUpload
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension CompleteMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadInput(bucket: \(Swift.String(describing: bucket)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), key: \(Swift.String(describing: key)), multipartUpload: \(Swift.String(describing: multipartUpload)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    public enum ServerSideEncryption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aes256
        case awsKms
        case awsKmsDsse
        case sdkUnknown(Swift.String)

        public static var allCases: [ServerSideEncryption] {
            return [
                .aes256,
                .awsKms,
                .awsKmsDsse
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aes256: return "AES256"
            case .awsKms: return "aws:kms"
            case .awsKmsDsse: return "aws:kms:dsse"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CompleteMultipartUploadOutput: Swift.Sendable {
    /// The name of the bucket that contains the newly created object. Does not return the access point ARN or access point alias if used. Access points are not supported by directory buckets.
    public var bucket: Swift.String?
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag that identifies the newly created object's data. Objects with different object data will have different entity tags. The entity tag is an opaque string. The entity tag may or may not be an MD5 digest of the object data. If the entity tag is not an MD5 digest of the object data, it will contain one or more nonhexadecimal characters and/or will consist of less than 32 or more than 32 hexadecimal digits. For more information about how the entity tag is calculated, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var eTag: Swift.String?
    /// If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The object key of the newly created object.
    public var key: Swift.String?
    /// The URI that identifies the newly created object.
    public var location: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when storing this object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the newly created object, in case the bucket has versioning turned on. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        key: Swift.String? = nil,
        location: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.expiration = expiration
        self.key = key
        self.location = location
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

extension CompleteMultipartUploadOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteMultipartUploadOutput(bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), key: \(Swift.String(describing: key)), location: \(Swift.String(describing: location)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

/// The source object of the COPY action is not in the active tier and is only stored in Amazon S3 Glacier.
public struct ObjectNotInActiveTierError: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ObjectNotInActiveTierError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    public enum ObjectCannedACL: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticatedRead
        case awsExecRead
        case bucketOwnerFullControl
        case bucketOwnerRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectCannedACL] {
            return [
                .authenticatedRead,
                .awsExecRead,
                .bucketOwnerFullControl,
                .bucketOwnerRead,
                .private,
                .publicRead,
                .publicReadWrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .awsExecRead: return "aws-exec-read"
            case .bucketOwnerFullControl: return "bucket-owner-full-control"
            case .bucketOwnerRead: return "bucket-owner-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum ChecksumAlgorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case crc32
        case crc32c
        case sha1
        case sha256
        case sdkUnknown(Swift.String)

        public static var allCases: [ChecksumAlgorithm] {
            return [
                .crc32,
                .crc32c,
                .sha1,
                .sha256
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .crc32: return "CRC32"
            case .crc32c: return "CRC32C"
            case .sha1: return "SHA1"
            case .sha256: return "SHA256"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum MetadataDirective: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [MetadataDirective] {
            return [
                .copy,
                .replace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum ObjectLockLegalHoldStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case off
        case on
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockLegalHoldStatus] {
            return [
                .off,
                .on
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .off: return "OFF"
            case .on: return "ON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum ObjectLockMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockMode] {
            return [
                .compliance,
                .governance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum StorageClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepArchive
        case expressOnezone
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case snow
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClass] {
            return [
                .deepArchive,
                .expressOnezone,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .snow,
                .standard,
                .standardIa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .expressOnezone: return "EXPRESS_ONEZONE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .snow: return "SNOW"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum TaggingDirective: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case copy
        case replace
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggingDirective] {
            return [
                .copy,
                .replace
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .copy: return "COPY"
            case .replace: return "REPLACE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CopyObjectInput: Swift.Sendable {
    /// The canned access control list (ACL) to apply to the object. When you copy an object, the ACL metadata is not preserved and is set to private by default. Only the owner has full access control. To override the default ACL setting, specify a new ACL when you generate a copy request. For more information, see [Using ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html). If the destination bucket that you're copying objects to uses the bucket owner enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect permissions. Buckets that use this setting only accept PUT requests that don't specify an ACL or PUT requests that specify bucket owner full control ACLs, such as the bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed in the XML format. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide.
    ///
    /// * If your destination bucket uses the bucket owner enforced setting for Object Ownership, all objects written to the bucket by any account will be owned by the bucket owner.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The name of the destination bucket. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). If a target object uses SSE-KMS, you can enable an S3 Bucket Key for the object. Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Specifying this header with a COPY action doesn’t affect bucket-level settings for S3 Bucket Key. For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the Amazon S3 User Guide. Directory buckets - S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted objects from general purpose buckets to directory buckets, from directory buckets to general purpose buckets, or between directory buckets, through [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html). In this case, Amazon S3 makes a call to KMS every time a copy request is made for a KMS-encrypted object.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies the caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// Indicates the algorithm that you want Amazon S3 to use to create the checksum for the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. When you copy an object, if the source object has a checksum, that checksum value will be copied to the new object by default. If the CopyObject request does not include this x-amz-checksum-algorithm header, the checksum algorithm will be copied from the source object to the destination object (if it's present on the source object). You can optionally specify a different checksum algorithm to use with the x-amz-checksum-algorithm header. Unrecognized or unsupported values will respond with the HTTP status code 400 Bad Request. For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Specifies presentational information for the object. Indicates whether an object should be displayed in a web browser or downloaded as a file. It allows specifying the desired filename for the downloaded file.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For directory buckets, only the aws-chunked value is supported in this header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// A standard MIME type that describes the format of the object data.
    public var contentType: Swift.String?
    /// Specifies the source object for the copy operation. The source object can be up to 5 GB. If the source object is an object that was uploaded by using a multipart upload, the object copy will be a single part object after the source object is copied to the destination bucket. You specify the value of the copy source in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):
    ///
    /// * For objects not accessed through an access point, specify the name of the source bucket and the key of the source object, separated by a slash (/). For example, to copy the object reports/january.pdf from the general purpose bucket awsexamplebucket, use awsexamplebucket/reports/january.pdf. The value must be URL-encoded. To copy the object reports/january.pdf from the directory bucket awsexamplebucket--use1-az5--x-s3, use awsexamplebucket--use1-az5--x-s3/reports/january.pdf. The value must be URL-encoded.
    ///
    /// * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:::accesspoint//object/. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
    ///
    /// * Amazon S3 supports copy operations using Access points only when the source and destination buckets are in the same Amazon Web Services Region.
    ///
    /// * Access points are not supported by directory buckets.
    ///
    ///
    /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:::outpost//object/. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL-encoded.
    ///
    ///
    /// If your source bucket versioning is enabled, the x-amz-copy-source header by default identifies the current version of an object to copy. If the current version is a delete marker, Amazon S3 behaves as if the object was deleted. To copy a different version, use the versionId query parameter. Specifically, append ?versionId= to the value (for example, awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If you don't specify a version ID, Amazon S3 copies the latest version of the source object. If you enable versioning on the destination bucket, Amazon S3 generates a unique version ID for the copied object. This version ID is different from the version ID of the source object. Amazon S3 returns the version ID of the copied object in the x-amz-version-id response header in the response. If you do not enable versioning or suspend it on the destination bucket, the version ID that Amazon S3 generates in the x-amz-version-id response header is always null. Directory buckets - S3 Versioning isn't enabled and supported for directory buckets.
    /// This member is required.
    public var copySource: Swift.String?
    /// Copies the object if its entity tag (ETag) matches the specified tag. If both the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data:
    ///
    /// * x-amz-copy-source-if-match condition evaluates to true
    ///
    /// * x-amz-copy-source-if-unmodified-since condition evaluates to false
    public var copySourceIfMatch: Swift.String?
    /// Copies the object if it has been modified since the specified time. If both the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request and evaluate as follows, Amazon S3 returns the 412 Precondition Failed response code:
    ///
    /// * x-amz-copy-source-if-none-match condition evaluates to false
    ///
    /// * x-amz-copy-source-if-modified-since condition evaluates to true
    public var copySourceIfModifiedSince: Foundation.Date?
    /// Copies the object if its entity tag (ETag) is different than the specified ETag. If both the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request and evaluate as follows, Amazon S3 returns the 412 Precondition Failed response code:
    ///
    /// * x-amz-copy-source-if-none-match condition evaluates to false
    ///
    /// * x-amz-copy-source-if-modified-since condition evaluates to true
    public var copySourceIfNoneMatch: Swift.String?
    /// Copies the object if it hasn't been modified since the specified time. If both the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request and evaluate as follows, Amazon S3 returns 200 OK and copies the data:
    ///
    /// * x-amz-copy-source-if-match condition evaluates to true
    ///
    /// * x-amz-copy-source-if-unmodified-since condition evaluates to false
    public var copySourceIfUnmodifiedSince: Foundation.Date?
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256). If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be the same one that was used when the source object was created. If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. If the source object for the copy is stored in Amazon S3 using SSE-C, you must provide the necessary encryption information in your request so that Amazon S3 can decrypt the object for copying. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKeyMD5: Swift.String?
    /// The account ID of the expected destination bucket owner. If the account ID that you provide does not match the actual owner of the destination bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The account ID of the expected source bucket owner. If the account ID that you provide does not match the actual owner of the source bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedSourceBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to read the object data and its metadata.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the object ACL.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to write the ACL for the applicable object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// The key of the destination object.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// Specifies whether the metadata is copied from the source object or replaced with metadata that's provided in the request. When copying an object, you can preserve all metadata (the default) or specify new metadata. If this header isn’t specified, COPY is the default behavior. General purpose bucket - For general purpose buckets, when you grant permissions, you can use the s3:x-amz-metadata-directive condition key to enforce certain metadata behavior when objects are uploaded. For more information, see [Amazon S3 condition key examples](https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html) in the Amazon S3 User Guide. x-amz-website-redirect-location is unique to each object and is not copied when using the x-amz-metadata-directive header. To copy the value, you must specify x-amz-website-redirect-location in the request header.
    public var metadataDirective: S3ClientTypes.MetadataDirective?
    /// Specifies whether you want to apply a legal hold to the object copy. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that you want to apply to the object copy. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when you want the Object Lock of the object copy to expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm used when storing this object in Amazon S3. Unrecognized or unsupported values won’t write a destination object and will receive a 400 Bad Request response. Amazon S3 automatically encrypts all new objects that are copied to an S3 bucket. When copying an object, if you don't specify encryption information in your copy request, the encryption setting of the target object is set to the default encryption configuration of the destination bucket. By default, all buckets have a base level of encryption configuration that uses server-side encryption with Amazon S3 managed keys (SSE-S3). If the destination bucket has a different default encryption configuration, Amazon S3 uses the corresponding encryption key to encrypt the target object copy. With server-side encryption, Amazon S3 encrypts your data as it writes your data to disks in its data centers and decrypts the data when you access it. For more information about server-side encryption, see [Using Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html) in the Amazon S3 User Guide. General purpose buckets
    ///
    /// * For general purpose buckets, there are the following supported options for server-side encryption: server-side encryption with Key Management Service (KMS) keys (SSE-KMS), dual-layer server-side encryption with Amazon Web Services KMS keys (DSSE-KMS), and server-side encryption with customer-provided encryption keys (SSE-C). Amazon S3 uses the corresponding KMS key, or a customer-provided key to encrypt the target object copy.
    ///
    /// * When you perform a CopyObject operation, if you want to use a different type of encryption setting for the target object, you can specify appropriate encryption-related headers to encrypt the target object with an Amazon S3 managed key, a KMS key, or a customer-provided key. If the encryption setting in your request is different from the default encryption configuration of the destination bucket, the encryption setting in your request takes precedence.
    ///
    ///
    /// Directory buckets
    ///
    /// * For directory buckets, there are only two supported options for server-side encryption: server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) and server-side encryption with KMS keys (SSE-KMS) (aws:kms). We recommend that the bucket's default encryption uses the desired encryption configuration and you don't override the bucket default encryption in your CreateSession requests or PUT object requests. Then, new objects are automatically encrypted with the desired encryption settings. For more information, see [Protecting data with server-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-serv-side-encryption.html) in the Amazon S3 User Guide. For more information about the encryption overriding behaviors in directory buckets, see [Specifying server-side encryption with KMS for new object uploads](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-specifying-kms-encryption.html).
    ///
    /// * To encrypt new object copies to a directory bucket with SSE-KMS, we recommend you specify SSE-KMS as the directory bucket's default encryption configuration with a KMS key (specifically, a [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk)). The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported. Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. After you specify a customer managed key for SSE-KMS, you can't override the customer managed key for the bucket's SSE-KMS configuration. Then, when you perform a CopyObject operation and want to specify server-side encryption settings for new object copies with SSE-KMS in the encryption-related request headers, you must ensure the encryption key is the same customer managed key that you specified for the directory bucket's default encryption configuration.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). When you perform a CopyObject operation, if you want to use a different type of encryption setting for the target object, you can specify appropriate encryption-related headers to encrypt the target object with an Amazon S3 managed key, a KMS key, or a customer-provided key. If the encryption setting in your request is different from the default encryption configuration of the destination bucket, the encryption setting in your request takes precedence. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded. Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context as an additional encryption context to use for the destination object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs. General purpose buckets - This value must be explicitly added to specify encryption context for CopyObject requests if you want an additional encryption context for your destination object. The additional encryption context of the source object won't be copied to the destination object. For more information, see [Encryption context](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html#encryption-context) in the Amazon S3 User Guide. Directory buckets - You can optionally provide an explicit encryption context value. The value must match the default encryption context - the bucket Amazon Resource Name (ARN). An additional encryption context value is not supported.
    public var ssekmsEncryptionContext: Swift.String?
    /// Specifies the KMS key ID (Key ID, Key ARN, or Key Alias) to use for object encryption. All GET and PUT requests for an object protected by KMS will fail if they're not made via SSL or using SigV4. For information about configuring any of the officially supported Amazon Web Services SDKs and Amazon Web Services CLI, see [Specifying the Signature Version in Request Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingAWSSDK.html#specify-signature-version) in the Amazon S3 User Guide. Directory buckets - If you specify x-amz-server-side-encryption with aws:kms, the  x-amz-server-side-encryption-aws-kms-key-id header is implicitly assigned the ID of the KMS symmetric encryption customer managed key that's configured for your directory bucket's default encryption setting. If you want to specify the  x-amz-server-side-encryption-aws-kms-key-id header explicitly, you can only specify it with the ID (Key ID or Key ARN) of the KMS customer managed key that's configured for your directory bucket's default encryption setting. Otherwise, you get an HTTP 400 Bad Request error. Only use the key ID or key ARN. The key alias format of the KMS key isn't supported. Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported.
    public var ssekmsKeyId: Swift.String?
    /// If the x-amz-storage-class header is not used, the copied object will be stored in the STANDARD Storage Class by default. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class.
    ///
    /// * Directory buckets - For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects. Unsupported storage class values won't write a destination object and will respond with the HTTP status code 400 Bad Request.
    ///
    /// * Amazon S3 on Outposts - S3 on Outposts only uses the OUTPOSTS Storage Class.
    ///
    ///
    /// You can use the CopyObject action to change the storage class of an object that is already stored in Amazon S3 by using the x-amz-storage-class header. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide. Before using an object as a source object for the copy operation, you must restore a copy of it if it meets any of the following conditions:
    ///
    /// * The storage class of the source object is GLACIER or DEEP_ARCHIVE.
    ///
    /// * The storage class of the source object is INTELLIGENT_TIERING and it's [S3 Intelligent-Tiering access tier](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intelligent-tiering-overview.html#intel-tiering-tier-definition) is Archive Access or Deep Archive Access.
    ///
    ///
    /// For more information, see [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html) and [Copying Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html) in the Amazon S3 User Guide.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object copy in the destination bucket. This value must be used in conjunction with the x-amz-tagging-directive if you choose REPLACE for the x-amz-tagging-directive. If you choose COPY for the x-amz-tagging-directive, you don't need to set the x-amz-tagging header, because the tag-set will be copied from the source object directly. The tag-set must be encoded as URL Query parameters. The default value is the empty value. Directory buckets - For directory buckets in a CopyObject operation, only the empty tag-set is supported. Any requests that attempt to write non-empty tags into directory buckets will receive a 501 Not Implemented status code. When the destination bucket is a directory bucket, you will receive a 501 Not Implemented response in any of the following situations:
    ///
    /// * When you attempt to COPY the tag-set from an S3 source object that has non-empty tags.
    ///
    /// * When you attempt to REPLACE the tag-set of a source object and set a non-empty value to x-amz-tagging.
    ///
    /// * When you don't set the x-amz-tagging-directive header and the source object has non-empty tags. This is because the default value of x-amz-tagging-directive is COPY.
    ///
    ///
    /// Because only the empty tag-set is supported for directory buckets in a CopyObject operation, the following situations are allowed:
    ///
    /// * When you attempt to COPY the tag-set from a directory bucket source object that has no tags to a general purpose bucket. It copies an empty tag-set to the destination object.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a general purpose bucket source object that has non-empty tags and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and don't set the x-amz-tagging value of the directory bucket destination object. This is because the default value of x-amz-tagging is the empty value.
    public var tagging: Swift.String?
    /// Specifies whether the object tag-set is copied from the source object or replaced with the tag-set that's provided in the request. The default value is COPY. Directory buckets - For directory buckets in a CopyObject operation, only the empty tag-set is supported. Any requests that attempt to write non-empty tags into directory buckets will receive a 501 Not Implemented status code. When the destination bucket is a directory bucket, you will receive a 501 Not Implemented response in any of the following situations:
    ///
    /// * When you attempt to COPY the tag-set from an S3 source object that has non-empty tags.
    ///
    /// * When you attempt to REPLACE the tag-set of a source object and set a non-empty value to x-amz-tagging.
    ///
    /// * When you don't set the x-amz-tagging-directive header and the source object has non-empty tags. This is because the default value of x-amz-tagging-directive is COPY.
    ///
    ///
    /// Because only the empty tag-set is supported for directory buckets in a CopyObject operation, the following situations are allowed:
    ///
    /// * When you attempt to COPY the tag-set from a directory bucket source object that has no tags to a general purpose bucket. It copies an empty tag-set to the destination object.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a general purpose bucket source object that has non-empty tags and set the x-amz-tagging value of the directory bucket destination object to empty.
    ///
    /// * When you attempt to REPLACE the tag-set of a directory bucket source object and don't set the x-amz-tagging value of the directory bucket destination object. This is because the default value of x-amz-tagging is the empty value.
    public var taggingDirective: S3ClientTypes.TaggingDirective?
    /// If the destination bucket is configured as a website, redirects requests for this object copy to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This value is unique to each object and is not copied when using the x-amz-metadata-directive header. Instead, you may opt to provide this header in combination with the x-amz-metadata-directive header. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: Foundation.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: Foundation.Date? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        expires: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        metadataDirective: S3ClientTypes.MetadataDirective? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        taggingDirective: S3ClientTypes.TaggingDirective? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.metadataDirective = metadataDirective
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.taggingDirective = taggingDirective
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension CopyObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectInput(acl: \(Swift.String(describing: acl)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), metadataDirective: \(Swift.String(describing: metadataDirective)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), taggingDirective: \(Swift.String(describing: taggingDirective)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), copySourceSSECustomerKey: \"CONTENT_REDACTED\", sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Container for all response elements.
    public struct CopyObjectResult: Swift.Sendable {
        /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Returns the ETag of the new object. The ETag reflects only changes to the contents of an object, not its metadata.
        public var eTag: Swift.String?
        /// Creation date of the object.
        public var lastModified: Foundation.Date?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: Foundation.Date? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }
}

public struct CopyObjectOutput: Swift.Sendable {
    /// Indicates whether the copied object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Container for all response elements.
    public var copyObjectResult: S3ClientTypes.CopyObjectResult?
    /// Version ID of the source object that was copied. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceVersionId: Swift.String?
    /// If the object expiration is configured, the response includes this header. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
    public var ssekmsEncryptionContext: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the newly created copy. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        copyObjectResult: S3ClientTypes.CopyObjectResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyObjectResult = copyObjectResult
        self.copySourceVersionId = copySourceVersionId
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

extension CopyObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CopyObjectOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyObjectResult: \(Swift.String(describing: copyObjectResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

/// The requested bucket name is not available. The bucket namespace is shared by all users of the system. Select a different name and try again.
public struct BucketAlreadyExists: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "BucketAlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

/// The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all Amazon Web Services Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs).
public struct BucketAlreadyOwnedByYou: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "BucketAlreadyOwnedByYou" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    public enum BucketCannedACL: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case authenticatedRead
        case `private`
        case publicRead
        case publicReadWrite
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketCannedACL] {
            return [
                .authenticatedRead,
                .private,
                .publicRead,
                .publicReadWrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .authenticatedRead: return "authenticated-read"
            case .private: return "private"
            case .publicRead: return "public-read"
            case .publicReadWrite: return "public-read-write"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum DataRedundancy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case singleavailabilityzone
        case sdkUnknown(Swift.String)

        public static var allCases: [DataRedundancy] {
            return [
                .singleavailabilityzone
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .singleavailabilityzone: return "SingleAvailabilityZone"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum BucketType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directory
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketType] {
            return [
                .directory
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directory: return "Directory"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies the information about the bucket that will be created. For more information about directory buckets, see [Directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) in the Amazon S3 User Guide. This functionality is only supported by directory buckets.
    public struct BucketInfo: Swift.Sendable {
        /// The number of Availability Zone that's used for redundancy for the bucket.
        public var dataRedundancy: S3ClientTypes.DataRedundancy?
        /// The type of bucket.
        public var type: S3ClientTypes.BucketType?

        public init(
            dataRedundancy: S3ClientTypes.DataRedundancy? = nil,
            type: S3ClientTypes.BucketType? = nil
        )
        {
            self.dataRedundancy = dataRedundancy
            self.type = type
        }
    }
}

extension S3ClientTypes {

    public enum LocationType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case availabilityzone
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationType] {
            return [
                .availabilityzone
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .availabilityzone: return "AvailabilityZone"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies the location where the bucket will be created. For directory buckets, the location type is Availability Zone. For more information about directory buckets, see [Directory buckets](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-overview.html) in the Amazon S3 User Guide. This functionality is only supported by directory buckets.
    public struct LocationInfo: Swift.Sendable {
        /// The name of the location where the bucket will be created. For directory buckets, the name of the location is the AZ ID of the Availability Zone where the bucket will be created. An example AZ ID value is usw2-az1.
        public var name: Swift.String?
        /// The type of location where the bucket will be created.
        public var type: S3ClientTypes.LocationType?

        public init(
            name: Swift.String? = nil,
            type: S3ClientTypes.LocationType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }
}

extension S3ClientTypes {

    public enum BucketLocationConstraint: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case eu
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSouth2
        case apSoutheast1
        case apSoutheast2
        case apSoutheast3
        case caCentral1
        case cnNorth1
        case cnNorthwest1
        case euCentral1
        case euNorth1
        case euSouth1
        case euSouth2
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast2
        case usGovEast1
        case usGovWest1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLocationConstraint] {
            return [
                .eu,
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSouth2,
                .apSoutheast1,
                .apSoutheast2,
                .apSoutheast3,
                .caCentral1,
                .cnNorth1,
                .cnNorthwest1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euSouth2,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast2,
                .usGovEast1,
                .usGovWest1,
                .usWest1,
                .usWest2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .eu: return "EU"
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSouth2: return "ap-south-2"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .apSoutheast3: return "ap-southeast-3"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .cnNorthwest1: return "cn-northwest-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euSouth2: return "eu-south-2"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast2: return "us-east-2"
            case .usGovEast1: return "us-gov-east-1"
            case .usGovWest1: return "us-gov-west-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// The configuration information for the bucket.
    public struct CreateBucketConfiguration: Swift.Sendable {
        /// Specifies the information about the bucket that will be created. This functionality is only supported by directory buckets.
        public var bucket: S3ClientTypes.BucketInfo?
        /// Specifies the location where the bucket will be created. For directory buckets, the location type is Availability Zone. This functionality is only supported by directory buckets.
        public var location: S3ClientTypes.LocationInfo?
        /// Specifies the Region where the bucket will be created. You might choose a Region to optimize latency, minimize costs, or address regulatory requirements. For example, if you reside in Europe, you will probably find it advantageous to create buckets in the Europe (Ireland) Region. For more information, see [Accessing a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro) in the Amazon S3 User Guide. If you don't specify a Region, the bucket is created in the US East (N. Virginia) Region (us-east-1) by default. This functionality is not supported for directory buckets.
        public var locationConstraint: S3ClientTypes.BucketLocationConstraint?

        public init(
            bucket: S3ClientTypes.BucketInfo? = nil,
            location: S3ClientTypes.LocationInfo? = nil,
            locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
        )
        {
            self.bucket = bucket
            self.location = location
            self.locationConstraint = locationConstraint
        }
    }
}

extension S3ClientTypes {

    /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
    public enum ObjectOwnership: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bucketownerenforced
        case bucketownerpreferred
        case objectwriter
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectOwnership] {
            return [
                .bucketownerenforced,
                .bucketownerpreferred,
                .objectwriter
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bucketownerenforced: return "BucketOwnerEnforced"
            case .bucketownerpreferred: return "BucketOwnerPreferred"
            case .objectwriter: return "ObjectWriter"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateBucketInput: Swift.Sendable {
    /// The canned ACL to apply to the bucket. This functionality is not supported for directory buckets.
    public var acl: S3ClientTypes.BucketCannedACL?
    /// The name of the bucket to create. General purpose buckets - For information about bucket naming restrictions, see [Bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html) in the Amazon S3 User Guide. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The configuration information for the bucket.
    public var createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket. This functionality is not supported for directory buckets.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket. This functionality is not supported for directory buckets.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL. This functionality is not supported for directory buckets.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects. This functionality is not supported for directory buckets.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket. This functionality is not supported for directory buckets.
    public var grantWriteACP: Swift.String?
    /// Specifies whether you want S3 Object Lock to be enabled for the new bucket. This functionality is not supported for directory buckets.
    public var objectLockEnabledForBucket: Swift.Bool?
    /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
    public var objectOwnership: S3ClientTypes.ObjectOwnership?

    public init(
        acl: S3ClientTypes.BucketCannedACL? = nil,
        bucket: Swift.String? = nil,
        createBucketConfiguration: S3ClientTypes.CreateBucketConfiguration? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        objectLockEnabledForBucket: Swift.Bool? = nil,
        objectOwnership: S3ClientTypes.ObjectOwnership? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.createBucketConfiguration = createBucketConfiguration
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.objectLockEnabledForBucket = objectLockEnabledForBucket
        self.objectOwnership = objectOwnership
    }
}

public struct CreateBucketOutput: Swift.Sendable {
    /// A forward slash followed by the name of the bucket.
    public var location: Swift.String?

    public init(
        location: Swift.String? = nil
    )
    {
        self.location = location
    }
}

public struct CreateMultipartUploadInput: Swift.Sendable {
    /// The canned ACL to apply to the object. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL) in the Amazon S3 User Guide. By default, all objects are private. Only the owner has full access control. When uploading an object, you can grant access permissions to individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These permissions are then added to the access control list (ACL) on the new object. For more information, see [Using ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html). One way to grant the permissions using the request headers is to specify a canned ACL with the x-amz-acl request header.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The name of the bucket where the multipart upload is initiated and where the object is uploaded. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). General purpose buckets - Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Also, specifying this header with a PUT action doesn't affect bucket-level settings for S3 Bucket Key. Directory buckets - S3 Bucket Keys are always enabled for GET and PUT operations in a directory bucket and can’t be disabled. S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted objects from general purpose buckets to directory buckets, from directory buckets to general purpose buckets, or between directory buckets, through [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html), [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html), [the Copy operation in Batch Operations](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-objects-Batch-Ops), or [the import jobs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-import-job). In this case, Amazon S3 makes a call to KMS every time a copy request is made for a KMS-encrypted object.
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// Indicates the algorithm that you want Amazon S3 to use to create the checksum for the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For directory buckets, only the aws-chunked value is supported in this header field.
    public var contentEncoding: Swift.String?
    /// The language that the content is in.
    public var contentLanguage: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Specify access permissions explicitly to give the grantee READ, READ_ACP, and WRITE_ACP permissions on the object. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Specify access permissions explicitly to allow grantee to read the object data and its metadata. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Specify access permissions explicitly to allows grantee to read the object ACL. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Specify access permissions explicitly to allows grantee to allow grantee to write the ACL for the applicable object. By default, all objects are private. Only the owner has full access control. When uploading an object, you can use this header to explicitly grant access permissions to specific Amazon Web Services accounts or groups. This header maps to specific permissions that Amazon S3 supports in an ACL. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) in the Amazon S3 User Guide. You specify each grantee as a type=value pair, where the type is one of the following:
    ///
    /// * id – if the value specified is the canonical user ID of an Amazon Web Services account
    ///
    /// * uri – if you are granting permissions to a predefined group
    ///
    /// * emailAddress – if the value specified is the email address of an Amazon Web Services account Using email addresses to specify a grantee is only supported in the following Amazon Web Services Regions:
    ///
    /// * US East (N. Virginia)
    ///
    /// * US West (N. California)
    ///
    /// * US West (Oregon)
    ///
    /// * Asia Pacific (Singapore)
    ///
    /// * Asia Pacific (Sydney)
    ///
    /// * Asia Pacific (Tokyo)
    ///
    /// * Europe (Ireland)
    ///
    /// * South America (São Paulo)
    ///
    ///
    /// For a list of all the Amazon S3 supported Regions and endpoints, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the Amazon Web Services General Reference.
    ///
    ///
    /// For example, the following x-amz-grant-read header grants the Amazon Web Services accounts identified by account IDs permissions to read object data and its metadata: x-amz-grant-read: id="11112222333", id="444455556666"
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Object key for which the multipart upload is to be initiated.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// Specifies whether you want to apply a legal hold to the uploaded object. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// Specifies the Object Lock mode that you want to apply to the uploaded object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// Specifies the date and time when you want the Object Lock to expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms).
    ///
    /// * Directory buckets - For directory buckets, there are only two supported options for server-side encryption: server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) and server-side encryption with KMS keys (SSE-KMS) (aws:kms). We recommend that the bucket's default encryption uses the desired encryption configuration and you don't override the bucket default encryption in your CreateSession requests or PUT object requests. Then, new objects are automatically encrypted with the desired encryption settings. For more information, see [Protecting data with server-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-serv-side-encryption.html) in the Amazon S3 User Guide. For more information about the encryption overriding behaviors in directory buckets, see [Specifying server-side encryption with KMS for new object uploads](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-specifying-kms-encryption.html). In the Zonal endpoint API calls (except [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html) and [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html)) using the REST API, the encryption request headers must match the encryption settings that are specified in the CreateSession request. You can't override the values of the encryption settings (x-amz-server-side-encryption, x-amz-server-side-encryption-aws-kms-key-id, x-amz-server-side-encryption-context, and x-amz-server-side-encryption-bucket-key-enabled) that are specified in the CreateSession request. You don't need to explicitly specify these encryption settings values in Zonal endpoint API calls, and Amazon S3 will use the encryption settings values from the CreateSession request to protect new objects in the directory bucket. When you use the CLI or the Amazon Web Services SDKs, for CreateSession, the session token refreshes automatically to avoid service interruptions when a session expires. The CLI or the Amazon Web Services SDKs use the bucket's default encryption configuration for the CreateSession request. It's not supported to override the encryption settings values in the CreateSession request. So in the Zonal endpoint API calls (except [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html) and [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html)), the encryption request headers must match the default encryption configuration of the directory bucket.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the customer-provided encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs. Directory buckets - You can optionally provide an explicit encryption context value. The value must match the default encryption context - the bucket Amazon Resource Name (ARN). An additional encryption context value is not supported.
    public var ssekmsEncryptionContext: Swift.String?
    /// Specifies the KMS key ID (Key ID, Key ARN, or Key Alias) to use for object encryption. If the KMS key doesn't exist in the same account that's issuing the command, you must use the full Key ARN not the Key ID. General purpose buckets - If you specify x-amz-server-side-encryption with aws:kms or aws:kms:dsse, this header specifies the ID (Key ID, Key ARN, or Key Alias) of the KMS key to use. If you specify x-amz-server-side-encryption:aws:kms or x-amz-server-side-encryption:aws:kms:dsse, but do not provide x-amz-server-side-encryption-aws-kms-key-id, Amazon S3 uses the Amazon Web Services managed key (aws/s3) to protect the data. Directory buckets - If you specify x-amz-server-side-encryption with aws:kms, the  x-amz-server-side-encryption-aws-kms-key-id header is implicitly assigned the ID of the KMS symmetric encryption customer managed key that's configured for your directory bucket's default encryption setting. If you want to specify the  x-amz-server-side-encryption-aws-kms-key-id header explicitly, you can only specify it with the ID (Key ID or Key ARN) of the KMS customer managed key that's configured for your directory bucket's default encryption setting. Otherwise, you get an HTTP 400 Bad Request error. Only use the key ID or key ARN. The key alias format of the KMS key isn't supported. Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported.
    public var ssekmsKeyId: Swift.String?
    /// By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide.
    ///
    /// * For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects.
    ///
    /// * Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. This functionality is not supported for directory buckets.
    public var tagging: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension CreateMultipartUploadInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadInput(acl: \(Swift.String(describing: acl)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct CreateMultipartUploadOutput: Swift.Sendable {
    /// If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, the response includes this header. The header indicates when the initiated multipart upload becomes eligible for an abort operation. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide. The response also includes the x-amz-abort-rule-id header that provides the ID of the lifecycle configuration rule that defines the abort action. This functionality is not supported for directory buckets.
    public var abortDate: Foundation.Date?
    /// This header is returned along with the x-amz-abort-date header. It identifies the applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads. This functionality is not supported for directory buckets.
    public var abortRuleId: Swift.String?
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used. Access points are not supported by directory buckets.
    public var bucket: Swift.String?
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// The algorithm that was used to create a checksum of the object.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Object key for which the multipart upload was initiated.
    public var key: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs.
    public var ssekmsEncryptionContext: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// ID for the initiated multipart upload.
    public var uploadId: Swift.String?

    public init(
        abortDate: Foundation.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        key: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumAlgorithm = checksumAlgorithm
        self.key = key
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.uploadId = uploadId
    }
}

extension CreateMultipartUploadOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMultipartUploadOutput(abortDate: \(Swift.String(describing: abortDate)), abortRuleId: \(Swift.String(describing: abortRuleId)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), key: \(Swift.String(describing: key)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

/// The specified bucket does not exist.
public struct NoSuchBucket: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchBucket" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    public enum SessionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case readonly
        case readwrite
        case sdkUnknown(Swift.String)

        public static var allCases: [SessionMode] {
            return [
                .readonly,
                .readwrite
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .readonly: return "ReadOnly"
            case .readwrite: return "ReadWrite"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateSessionInput: Swift.Sendable {
    /// The name of the bucket that you create a session for.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using KMS keys (SSE-KMS). S3 Bucket Keys are always enabled for GET and PUT operations in a directory bucket and can’t be disabled. S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted objects from general purpose buckets to directory buckets, from directory buckets to general purpose buckets, or between directory buckets, through [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html), [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html), [the Copy operation in Batch Operations](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-objects-Batch-Ops), or [the import jobs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-import-job). In this case, Amazon S3 makes a call to KMS every time a copy request is made for a KMS-encrypted object.
    public var bucketKeyEnabled: Swift.Bool?
    /// The server-side encryption algorithm to use when you store objects in the directory bucket. For directory buckets, there are only two supported options for server-side encryption: server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) and server-side encryption with KMS keys (SSE-KMS) (aws:kms). By default, Amazon S3 encrypts data with SSE-S3. For more information, see [Protecting data with server-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-serv-side-encryption.html) in the Amazon S3 User Guide.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the mode of the session that will be created, either ReadWrite or ReadOnly. By default, a ReadWrite session is created. A ReadWrite session is capable of executing all the Zonal endpoint API operations on a directory bucket. A ReadOnly session is constrained to execute the following Zonal endpoint API operations: GetObject, HeadObject, ListObjectsV2, GetObjectAttributes, ListParts, and ListMultipartUploads.
    public var sessionMode: S3ClientTypes.SessionMode?
    /// Specifies the Amazon Web Services KMS Encryption Context as an additional encryption context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject operations on this object. General purpose buckets - This value must be explicitly added during CopyObject operations if you want an additional encryption context for your object. For more information, see [Encryption context](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html#encryption-context) in the Amazon S3 User Guide. Directory buckets - You can optionally provide an explicit encryption context value. The value must match the default encryption context - the bucket Amazon Resource Name (ARN). An additional encryption context value is not supported.
    public var ssekmsEncryptionContext: Swift.String?
    /// If you specify x-amz-server-side-encryption with aws:kms, you must specify the  x-amz-server-side-encryption-aws-kms-key-id header with the ID (Key ID or Key ARN) of the KMS symmetric encryption customer managed key to use. Otherwise, you get an HTTP 400 Bad Request error. Only use the key ID or key ARN. The key alias format of the KMS key isn't supported. Also, if the KMS key doesn't exist in the same account that't issuing the command, you must use the full Key ARN not the Key ID. Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sessionMode: S3ClientTypes.SessionMode? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.serverSideEncryption = serverSideEncryption
        self.sessionMode = sessionMode
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
    }
}

extension CreateSessionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSessionInput(bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sessionMode: \(Swift.String(describing: sessionMode)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// The established temporary security credentials of the session. Directory buckets - These session credentials are only supported for the authentication and authorization of Zonal endpoint API operations on directory buckets.
    public struct SessionCredentials: Swift.Sendable {
        /// A unique identifier that's associated with a secret access key. The access key ID and the secret access key are used together to sign programmatic Amazon Web Services requests cryptographically.
        /// This member is required.
        public var accessKeyId: Swift.String?
        /// Temporary security credentials expire after a specified interval. After temporary credentials expire, any calls that you make with those credentials will fail. So you must generate a new set of temporary credentials. Temporary credentials cannot be extended or refreshed beyond the original specified interval.
        /// This member is required.
        public var expiration: Foundation.Date?
        /// A key that's used with the access key ID to cryptographically sign programmatic Amazon Web Services requests. Signing a request identifies the sender and prevents the request from being altered.
        /// This member is required.
        public var secretAccessKey: Swift.String?
        /// A part of the temporary security credentials. The session token is used to validate the temporary security credentials.
        /// This member is required.
        public var sessionToken: Swift.String?

        public init(
            accessKeyId: Swift.String? = nil,
            expiration: Foundation.Date? = nil,
            secretAccessKey: Swift.String? = nil,
            sessionToken: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.expiration = expiration
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }
    }
}

extension S3ClientTypes.SessionCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SessionCredentials(accessKeyId: \(Swift.String(describing: accessKeyId)), expiration: \(Swift.String(describing: expiration)), secretAccessKey: \"CONTENT_REDACTED\", sessionToken: \"CONTENT_REDACTED\")"}
}

public struct CreateSessionOutput: Swift.Sendable {
    /// Indicates whether to use an S3 Bucket Key for server-side encryption with KMS keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// The established temporary security credentials for the created session.
    /// This member is required.
    public var credentials: S3ClientTypes.SessionCredentials?
    /// The server-side encryption algorithm used when you store objects in the directory bucket.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject operations on this object.
    public var ssekmsEncryptionContext: Swift.String?
    /// If you specify x-amz-server-side-encryption with aws:kms, this header indicates the ID of the KMS symmetric encryption customer managed key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        credentials: S3ClientTypes.SessionCredentials? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.credentials = credentials
        self.serverSideEncryption = serverSideEncryption
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
    }
}

extension CreateSessionOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSessionOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), credentials: \(Swift.String(describing: credentials)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct DeleteBucketInput: Swift.Sendable {
    /// Specifies the bucket being deleted. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketAnalyticsConfigurationInput: Swift.Sendable {
    /// The name of the bucket from which an analytics configuration is deleted.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

public struct DeleteBucketCorsInput: Swift.Sendable {
    /// Specifies the bucket whose cors configuration is being deleted.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketEncryptionInput: Swift.Sendable {
    /// The name of the bucket containing the server-side encryption configuration to delete. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketIntelligentTieringConfigurationInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

public struct DeleteBucketInventoryConfigurationInput: Swift.Sendable {
    /// The name of the bucket containing the inventory configuration to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

public struct DeleteBucketLifecycleInput: Swift.Sendable {
    /// The bucket name of the lifecycle to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketMetricsConfigurationInput: Swift.Sendable {
    /// The name of the bucket containing the metrics configuration to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

public struct DeleteBucketOwnershipControlsInput: Swift.Sendable {
    /// The Amazon S3 bucket whose OwnershipControls you want to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketPolicyInput: Swift.Sendable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketReplicationInput: Swift.Sendable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketTaggingInput: Swift.Sendable {
    /// The bucket that has the tag set to be removed.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteBucketWebsiteInput: Swift.Sendable {
    /// The bucket name for which you want to remove the website configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct DeleteObjectInput: Swift.Sendable {
    /// The bucket name of the bucket containing the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates whether S3 Object Lock should bypass Governance-mode restrictions to process this operation. To use this header, you must have the s3:BypassGovernanceRetention permission. This functionality is not supported for directory buckets.
    public var bypassGovernanceRetention: Swift.Bool?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Key name of the object to delete.
    /// This member is required.
    public var key: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled. This functionality is not supported for directory buckets.
    public var mfa: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. For directory buckets in this API operation, only the null value of the version ID is supported.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        mfa: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.mfa = mfa
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

public struct DeleteObjectOutput: Swift.Sendable {
    /// Indicates whether the specified object version that was permanently deleted was (true) or was not (false) a delete marker before deletion. In a simple DELETE, this header indicates whether (true) or not (false) the current version of the object is a delete marker. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Returns the version ID of the delete marker created as a result of the DELETE operation. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        deleteMarker: Swift.Bool? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.deleteMarker = deleteMarker
        self.requestCharged = requestCharged
        self.versionId = versionId
    }
}

extension S3ClientTypes {

    /// Object Identifier is unique value to identify objects.
    public struct ObjectIdentifier: Swift.Sendable {
        /// Key name of the object. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var key: Swift.String?
        /// Version ID for the specific version of the object to delete. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.key = key
            self.versionId = versionId
        }
    }
}

extension S3ClientTypes {

    /// Container for the objects to delete.
    public struct Delete: Swift.Sendable {
        /// The object to delete. Directory buckets - For directory buckets, an object that's composed entirely of whitespace characters is not supported by the DeleteObjects API operation. The request will receive a 400 Bad Request error and none of the objects in the request will be deleted.
        /// This member is required.
        public var objects: [S3ClientTypes.ObjectIdentifier]?
        /// Element to enable quiet mode for the request. When you add this element, you must set its value to true.
        public var quiet: Swift.Bool?

        public init(
            objects: [S3ClientTypes.ObjectIdentifier]? = nil,
            quiet: Swift.Bool? = nil
        )
        {
            self.objects = objects
            self.quiet = quiet
        }
    }
}

public struct DeleteObjectsInput: Swift.Sendable {
    /// The bucket name containing the objects to delete. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether you want to delete this object even if it has a Governance-type Object Lock in place. To use this header, you must have the s3:BypassGovernanceRetention permission. This functionality is not supported for directory buckets.
    public var bypassGovernanceRetention: Swift.Bool?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Container for the request.
    /// This member is required.
    public var delete: S3ClientTypes.Delete?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device. Required to permanently delete a versioned object if versioning is configured with MFA delete enabled. When performing the DeleteObjects operation on an MFA delete enabled bucket, which attempts to delete the specified versioned objects, you must include an MFA token. If you don't provide an MFA token, the entire request will fail, even if there are non-versioned objects that you are trying to delete. If you provide an invalid token, whether there are versioned object keys in the request or not, the entire Multi-Object Delete request will fail. For information about MFA Delete, see [ MFA Delete](https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var mfa: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        delete: S3ClientTypes.Delete? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mfa: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.checksumAlgorithm = checksumAlgorithm
        self.delete = delete
        self.expectedBucketOwner = expectedBucketOwner
        self.mfa = mfa
        self.requestPayer = requestPayer
    }
}

extension S3ClientTypes {

    /// Information about the deleted object.
    public struct DeletedObject: Swift.Sendable {
        /// Indicates whether the specified object version that was permanently deleted was (true) or was not (false) a delete marker before deletion. In a simple DELETE, this header indicates whether (true) or not (false) the current version of the object is a delete marker. This functionality is not supported for directory buckets.
        public var deleteMarker: Swift.Bool?
        /// The version ID of the delete marker created as a result of the DELETE operation. If you delete a specific object version, the value returned by this header is the version ID of the object version deleted. This functionality is not supported for directory buckets.
        public var deleteMarkerVersionId: Swift.String?
        /// The name of the deleted object.
        public var key: Swift.String?
        /// The version ID of the deleted object. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            deleteMarker: Swift.Bool? = nil,
            deleteMarkerVersionId: Swift.String? = nil,
            key: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.deleteMarker = deleteMarker
            self.deleteMarkerVersionId = deleteMarkerVersionId
            self.key = key
            self.versionId = versionId
        }
    }
}

extension S3ClientTypes {

    /// Container for all error elements.
    public struct Error: Swift.Sendable {
        /// The error code is a string that uniquely identifies an error condition. It is meant to be read and understood by programs that detect and handle errors by type. The following is a list of Amazon S3 error codes. For more information, see [Error responses](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html).
        ///
        ///
        /// * Code: AccessDenied
        ///
        /// * Description: Access Denied
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AccountProblem
        ///
        /// * Description: There is a problem with your Amazon Web Services account that prevents the action from completing successfully. Contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AllAccessDisabled
        ///
        /// * Description: All access to this Amazon S3 resource has been disabled. Contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AmbiguousGrantByEmailAddress
        ///
        /// * Description: The email address you provided is associated with more than one account.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: AuthorizationHeaderMalformed
        ///
        /// * Description: The authorization header you provided is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * HTTP Status Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: BadDigest
        ///
        /// * Description: The Content-MD5 you specified did not match what we received.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketAlreadyExists
        ///
        /// * Description: The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketAlreadyOwnedByYou
        ///
        /// * Description: The bucket you tried to create already exists, and you own it. Amazon S3 returns this error in all Amazon Web Services Regions except in the North Virginia Region. For legacy compatibility, if you re-create an existing bucket that you already own in the North Virginia Region, Amazon S3 returns 200 OK and resets the bucket access control lists (ACLs).
        ///
        /// * Code: 409 Conflict (in all Regions except the North Virginia Region)
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: BucketNotEmpty
        ///
        /// * Description: The bucket you tried to delete is not empty.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: CredentialsNotSupported
        ///
        /// * Description: This request does not support credentials.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: CrossLocationLoggingProhibited
        ///
        /// * Description: Cross-location logging not allowed. Buckets in one geographic location cannot log information to a bucket in another location.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: EntityTooSmall
        ///
        /// * Description: Your proposed upload is smaller than the minimum allowed object size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: EntityTooLarge
        ///
        /// * Description: Your proposed upload exceeds the maximum allowed object size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: ExpiredToken
        ///
        /// * Description: The provided token has expired.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IllegalVersioningConfigurationException
        ///
        /// * Description: Indicates that the versioning configuration specified in the request is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IncompleteBody
        ///
        /// * Description: You did not provide the number of bytes specified by the Content-Length HTTP header
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: IncorrectNumberOfFilesInPostRequest
        ///
        /// * Description: POST requires exactly one file upload per request.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InlineDataTooLarge
        ///
        /// * Description: Inline data exceeds the maximum allowed size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InternalError
        ///
        /// * Description: We encountered an internal error. Please try again.
        ///
        /// * HTTP Status Code: 500 Internal Server Error
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidAccessKeyId
        ///
        /// * Description: The Amazon Web Services access key ID you provided does not exist in our records.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidAddressingHeader
        ///
        /// * Description: You must specify the Anonymous role.
        ///
        /// * HTTP Status Code: N/A
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidArgument
        ///
        /// * Description: Invalid Argument
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidBucketName
        ///
        /// * Description: The specified bucket is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidBucketState
        ///
        /// * Description: The request is not valid with the current state of the bucket.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidDigest
        ///
        /// * Description: The Content-MD5 you specified is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidEncryptionAlgorithmError
        ///
        /// * Description: The encryption request you specified is not valid. The valid value is AES256.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidLocationConstraint
        ///
        /// * Description: The specified location constraint is not valid. For more information about Regions, see [How to Select a Region for Your Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html#access-bucket-intro).
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidObjectState
        ///
        /// * Description: The action is not valid for the current state of the object.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPart
        ///
        /// * Description: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPartOrder
        ///
        /// * Description: The list of parts was not in ascending order. Parts list must be specified in order by part number.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPayer
        ///
        /// * Description: All access to this object has been disabled. Please contact Amazon Web Services Support for further assistance.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidPolicyDocument
        ///
        /// * Description: The content of the form does not meet the conditions specified in the policy document.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRange
        ///
        /// * Description: The requested range cannot be satisfied.
        ///
        /// * HTTP Status Code: 416 Requested Range Not Satisfiable
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Please use AWS4-HMAC-SHA256.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: SOAP requests must be made over an HTTPS connection.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported for buckets with non-DNS compliant names.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported for buckets with periods (.) in their names.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate endpoint only supports virtual style requests.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate is not configured on this bucket.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Accelerate is disabled on this bucket.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration is not supported on this bucket. Contact Amazon Web Services Support for more information.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidRequest
        ///
        /// * Description: Amazon S3 Transfer Acceleration cannot be enabled on this bucket. Contact Amazon Web Services Support for more information.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * Code: N/A
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidSecurity
        ///
        /// * Description: The provided security credentials are not valid.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidSOAPRequest
        ///
        /// * Description: The SOAP request body is invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidStorageClass
        ///
        /// * Description: The storage class you specified is not valid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidTargetBucketForLogging
        ///
        /// * Description: The target bucket for logging does not exist, is not owned by you, or does not have the appropriate grants for the log-delivery group.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidToken
        ///
        /// * Description: The provided token is malformed or otherwise invalid.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: InvalidURI
        ///
        /// * Description: Couldn't parse the specified URI.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: KeyTooLongError
        ///
        /// * Description: Your key is too long.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedACLError
        ///
        /// * Description: The XML you provided was not well-formed or did not validate against our published schema.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedPOSTRequest
        ///
        /// * Description: The body of your POST request is not well-formed multipart/form-data.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MalformedXML
        ///
        /// * Description: This happens when the user sends malformed XML (XML that doesn't conform to the published XSD) for the configuration. The error message is, "The XML you provided was not well-formed or did not validate against our published schema."
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MaxMessageLengthExceeded
        ///
        /// * Description: Your request was too big.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MaxPostPreDataLengthExceededError
        ///
        /// * Description: Your POST request fields preceding the upload file were too large.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MetadataTooLarge
        ///
        /// * Description: Your metadata headers exceed the maximum allowed metadata size.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MethodNotAllowed
        ///
        /// * Description: The specified method is not allowed against this resource.
        ///
        /// * HTTP Status Code: 405 Method Not Allowed
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingAttachment
        ///
        /// * Description: A SOAP attachment was expected, but none were found.
        ///
        /// * HTTP Status Code: N/A
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingContentLength
        ///
        /// * Description: You must provide the Content-Length HTTP header.
        ///
        /// * HTTP Status Code: 411 Length Required
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingRequestBodyError
        ///
        /// * Description: This happens when the user sends an empty XML document as a request. The error message is, "Request body is empty."
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingSecurityElement
        ///
        /// * Description: The SOAP 1.1 request is missing a security element.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: MissingSecurityHeader
        ///
        /// * Description: Your request is missing a required header.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoLoggingStatusForKey
        ///
        /// * Description: There is no such thing as a logging status subresource for a key.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchBucket
        ///
        /// * Description: The specified bucket does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchBucketPolicy
        ///
        /// * Description: The specified bucket does not have a bucket policy.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchKey
        ///
        /// * Description: The specified key does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchLifecycleConfiguration
        ///
        /// * Description: The lifecycle configuration does not exist.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchUpload
        ///
        /// * Description: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NoSuchVersion
        ///
        /// * Description: Indicates that the version ID specified in the request does not match an existing version.
        ///
        /// * HTTP Status Code: 404 Not Found
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: NotImplemented
        ///
        /// * Description: A header you provided implies functionality that is not implemented.
        ///
        /// * HTTP Status Code: 501 Not Implemented
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: NotSignedUp
        ///
        /// * Description: Your account is not signed up for the Amazon S3 service. You must sign up before you can use Amazon S3. You can sign up at the following URL: [Amazon S3](http://aws.amazon.com/s3)
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: OperationAborted
        ///
        /// * Description: A conflicting conditional action is currently in progress against this resource. Try again.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: PermanentRedirect
        ///
        /// * Description: The bucket you are attempting to access must be addressed using the specified endpoint. Send all future requests to this endpoint.
        ///
        /// * HTTP Status Code: 301 Moved Permanently
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: PreconditionFailed
        ///
        /// * Description: At least one of the preconditions you specified did not hold.
        ///
        /// * HTTP Status Code: 412 Precondition Failed
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: Redirect
        ///
        /// * Description: Temporary redirect.
        ///
        /// * HTTP Status Code: 307 Moved Temporarily
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RestoreAlreadyInProgress
        ///
        /// * Description: Object restore is already in progress.
        ///
        /// * HTTP Status Code: 409 Conflict
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestIsNotMultiPartContent
        ///
        /// * Description: Bucket POST must be of the enclosure-type multipart/form-data.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTimeout
        ///
        /// * Description: Your socket connection to the server was not read from or written to within the timeout period.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTimeTooSkewed
        ///
        /// * Description: The difference between the request time and the server's time is too large.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: RequestTorrentOfBucketError
        ///
        /// * Description: Requesting the torrent file of a bucket is not permitted.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: SignatureDoesNotMatch
        ///
        /// * Description: The request signature we calculated does not match the signature you provided. Check your Amazon Web Services secret access key and signing method. For more information, see [REST Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html) and [SOAP Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/SOAPAuthentication.html) for details.
        ///
        /// * HTTP Status Code: 403 Forbidden
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: ServiceUnavailable
        ///
        /// * Description: Service is unable to handle request.
        ///
        /// * HTTP Status Code: 503 Service Unavailable
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: SlowDown
        ///
        /// * Description: Reduce your request rate.
        ///
        /// * HTTP Status Code: 503 Slow Down
        ///
        /// * SOAP Fault Code Prefix: Server
        ///
        ///
        ///
        ///
        ///
        /// * Code: TemporaryRedirect
        ///
        /// * Description: You are being redirected to the bucket while DNS updates.
        ///
        /// * HTTP Status Code: 307 Moved Temporarily
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: TokenRefreshRequired
        ///
        /// * Description: The provided token must be refreshed.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: TooManyBuckets
        ///
        /// * Description: You have attempted to create more buckets than allowed.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UnexpectedContent
        ///
        /// * Description: This request does not support content.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UnresolvableGrantByEmailAddress
        ///
        /// * Description: The email address you provided does not match any account on record.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        ///
        ///
        ///
        ///
        ///
        /// * Code: UserKeyMustBeSpecified
        ///
        /// * Description: The bucket POST must contain the specified field name. If it is specified, check the order of the fields.
        ///
        /// * HTTP Status Code: 400 Bad Request
        ///
        /// * SOAP Fault Code Prefix: Client
        public var code: Swift.String?
        /// The error key.
        public var key: Swift.String?
        /// The error message contains a generic description of the error condition in English. It is intended for a human audience. Simple programs display the message directly to the end user if they encounter an error condition they don't know how or don't care to handle. Sophisticated programs with more exhaustive error handling and proper internationalization are more likely to ignore the error message.
        public var message: Swift.String?
        /// The version ID of the error. This functionality is not supported for directory buckets.
        public var versionId: Swift.String?

        public init(
            code: Swift.String? = nil,
            key: Swift.String? = nil,
            message: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.code = code
            self.key = key
            self.message = message
            self.versionId = versionId
        }
    }
}

public struct DeleteObjectsOutput: Swift.Sendable {
    /// Container element for a successful delete. It identifies the object that was successfully deleted.
    public var deleted: [S3ClientTypes.DeletedObject]?
    /// Container for a failed delete action that describes the object that Amazon S3 attempted to delete and the error it encountered.
    public var errors: [S3ClientTypes.Error]?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        deleted: [S3ClientTypes.DeletedObject]? = nil,
        errors: [S3ClientTypes.Error]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.deleted = deleted
        self.errors = errors
        self.requestCharged = requestCharged
    }
}

public struct DeleteObjectTaggingInput: Swift.Sendable {
    /// The bucket name containing the objects from which to remove the tags. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key that identifies the object in the bucket from which to remove all tags.
    /// This member is required.
    public var key: Swift.String?
    /// The versionId of the object that the tag-set will be removed from.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.versionId = versionId
    }
}

public struct DeleteObjectTaggingOutput: Swift.Sendable {
    /// The versionId of the object the tag-set was removed from.
    public var versionId: Swift.String?

    public init(
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

public struct DeletePublicAccessBlockInput: Swift.Sendable {
    /// The Amazon S3 bucket whose PublicAccessBlock configuration you want to delete.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct GetBucketAccelerateConfigurationInput: Swift.Sendable {
    /// The name of the bucket for which the accelerate configuration is retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.requestPayer = requestPayer
    }
}

public struct GetBucketAccelerateConfigurationOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The accelerate configuration of the bucket.
    public var status: S3ClientTypes.BucketAccelerateStatus?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        status: S3ClientTypes.BucketAccelerateStatus? = nil
    )
    {
        self.requestCharged = requestCharged
        self.status = status
    }
}

public struct GetBucketAclInput: Swift.Sendable {
    /// Specifies the S3 bucket whose ACL is being requested. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct GetBucketAclOutput: Swift.Sendable {
    /// A list of grants.
    public var grants: [S3ClientTypes.Grant]?
    /// Container for the bucket owner's display name and ID.
    public var owner: S3ClientTypes.Owner?

    public init(
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil
    )
    {
        self.grants = grants
        self.owner = owner
    }
}

public struct GetBucketAnalyticsConfigurationInput: Swift.Sendable {
    /// The name of the bucket from which an analytics configuration is retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension S3ClientTypes {

    /// A container of a key value name pair.
    public struct Tag: Swift.Sendable {
        /// Name of the object key.
        /// This member is required.
        public var key: Swift.String?
        /// Value of the tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension S3ClientTypes {

    /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply.
    public struct AnalyticsAndOperator: Swift.Sendable {
        /// The prefix to use when evaluating an AND predicate: The prefix that an object must have to be included in the metrics results.
        public var `prefix`: Swift.String?
        /// The list of tags to use when evaluating an AND predicate.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }
}

extension S3ClientTypes {

    /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
    public enum AnalyticsFilter: Swift.Sendable {
        /// The prefix to use when evaluating an analytics filter.
        case `prefix`(Swift.String)
        /// The tag to use when evaluating an analytics filter.
        case tag(S3ClientTypes.Tag)
        /// A conjunction (logical AND) of predicates, which is used in evaluating an analytics filter. The operator must have at least two predicates.
        case and(S3ClientTypes.AnalyticsAndOperator)
        case sdkUnknown(Swift.String)
    }
}

extension S3ClientTypes {

    public enum AnalyticsS3ExportFileFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [AnalyticsS3ExportFileFormat] {
            return [
                .csv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Contains information about where to publish the analytics results.
    public struct AnalyticsS3BucketDestination: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the bucket to which data is exported.
        /// This member is required.
        public var bucket: Swift.String?
        /// The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data. Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        public var bucketAccountId: Swift.String?
        /// Specifies the file format used when exporting data to Amazon S3.
        /// This member is required.
        public var format: S3ClientTypes.AnalyticsS3ExportFileFormat?
        /// The prefix to use when exporting data. The prefix is prepended to all results.
        public var `prefix`: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            bucketAccountId: Swift.String? = nil,
            format: S3ClientTypes.AnalyticsS3ExportFileFormat? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.bucketAccountId = bucketAccountId
            self.format = format
            self.`prefix` = `prefix`
        }
    }
}

extension S3ClientTypes {

    /// Where to publish the analytics results.
    public struct AnalyticsExportDestination: Swift.Sendable {
        /// A destination signifying output to an S3 bucket.
        /// This member is required.
        public var s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination?

        public init(
            s3BucketDestination: S3ClientTypes.AnalyticsS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }
}

extension S3ClientTypes {

    public enum StorageClassAnalysisSchemaVersion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case v1
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageClassAnalysisSchemaVersion] {
            return [
                .v1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .v1: return "V_1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for data related to the storage class analysis for an Amazon S3 bucket for export.
    public struct StorageClassAnalysisDataExport: Swift.Sendable {
        /// The place to store the data for an analysis.
        /// This member is required.
        public var destination: S3ClientTypes.AnalyticsExportDestination?
        /// The version of the output schema to use when exporting data. Must be V_1.
        /// This member is required.
        public var outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion?

        public init(
            destination: S3ClientTypes.AnalyticsExportDestination? = nil,
            outputSchemaVersion: S3ClientTypes.StorageClassAnalysisSchemaVersion? = nil
        )
        {
            self.destination = destination
            self.outputSchemaVersion = outputSchemaVersion
        }
    }
}

extension S3ClientTypes {

    /// Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
    public struct StorageClassAnalysis: Swift.Sendable {
        /// Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
        public var dataExport: S3ClientTypes.StorageClassAnalysisDataExport?

        public init(
            dataExport: S3ClientTypes.StorageClassAnalysisDataExport? = nil
        )
        {
            self.dataExport = dataExport
        }
    }
}

extension S3ClientTypes {

    /// Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
    public struct AnalyticsConfiguration: Swift.Sendable {
        /// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
        public var filter: S3ClientTypes.AnalyticsFilter?
        /// The ID that identifies the analytics configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
        /// This member is required.
        public var storageClassAnalysis: S3ClientTypes.StorageClassAnalysis?

        public init(
            filter: S3ClientTypes.AnalyticsFilter? = nil,
            id: Swift.String? = nil,
            storageClassAnalysis: S3ClientTypes.StorageClassAnalysis? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.storageClassAnalysis = storageClassAnalysis
        }
    }
}

public struct GetBucketAnalyticsConfigurationOutput: Swift.Sendable {
    /// The configuration and any analyses for the analytics filter.
    public var analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?

    public init(
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
    }
}

public struct GetBucketCorsInput: Swift.Sendable {
    /// The bucket name for which to get the cors configuration. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// Specifies a cross-origin access rule for an Amazon S3 bucket.
    public struct CORSRule: Swift.Sendable {
        /// Headers that are specified in the Access-Control-Request-Headers header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
        public var allowedHeaders: [Swift.String]?
        /// An HTTP method that you allow the origin to execute. Valid values are GET, PUT, HEAD, POST, and DELETE.
        /// This member is required.
        public var allowedMethods: [Swift.String]?
        /// One or more origins you want customers to be able to access the bucket from.
        /// This member is required.
        public var allowedOrigins: [Swift.String]?
        /// One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
        public var exposeHeaders: [Swift.String]?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var id: Swift.String?
        /// The time in seconds that your browser is to cache the preflight response for the specified resource.
        public var maxAgeSeconds: Swift.Int?

        public init(
            allowedHeaders: [Swift.String]? = nil,
            allowedMethods: [Swift.String]? = nil,
            allowedOrigins: [Swift.String]? = nil,
            exposeHeaders: [Swift.String]? = nil,
            id: Swift.String? = nil,
            maxAgeSeconds: Swift.Int? = nil
        )
        {
            self.allowedHeaders = allowedHeaders
            self.allowedMethods = allowedMethods
            self.allowedOrigins = allowedOrigins
            self.exposeHeaders = exposeHeaders
            self.id = id
            self.maxAgeSeconds = maxAgeSeconds
        }
    }
}

public struct GetBucketCorsOutput: Swift.Sendable {
    /// A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
    public var corsRules: [S3ClientTypes.CORSRule]?

    public init(
        corsRules: [S3ClientTypes.CORSRule]? = nil
    )
    {
        self.corsRules = corsRules
    }
}

public struct GetBucketEncryptionInput: Swift.Sendable {
    /// The name of the bucket from which the server-side encryption configuration is retrieved. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see [PutBucketEncryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html).
    ///
    /// * General purpose buckets - If you don't specify a customer managed key at configuration, Amazon S3 automatically creates an Amazon Web Services KMS key (aws/s3) in your Amazon Web Services account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS.
    ///
    /// * Directory buckets - Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported.
    ///
    /// * Directory buckets - For directory buckets, there are only two supported options for server-side encryption: SSE-S3 and SSE-KMS.
    public struct ServerSideEncryptionByDefault: Swift.Sendable {
        /// Amazon Web Services Key Management Service (KMS) customer managed key ID to use for the default encryption.
        ///
        /// * General purpose buckets - This parameter is allowed if and only if SSEAlgorithm is set to aws:kms or aws:kms:dsse.
        ///
        /// * Directory buckets - This parameter is allowed if and only if SSEAlgorithm is set to aws:kms.
        ///
        ///
        /// You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key Alias: alias/alias-name
        ///
        ///
        /// If you are using encryption with cross-account or Amazon Web Services service operations, you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
        ///
        /// * General purpose buckets - If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner. Also, if you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log.
        ///
        /// * Directory buckets - When you specify an [KMS customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) for encryption in your directory bucket, only use the key ID or key ARN. The key alias format of the KMS key isn't supported.
        ///
        ///
        /// Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsMasterKeyID: Swift.String?
        /// Server-side encryption algorithm to use for the default encryption. For directory buckets, there are only two supported values for server-side encryption: AES256 and aws:kms.
        /// This member is required.
        public var sseAlgorithm: S3ClientTypes.ServerSideEncryption?

        public init(
            kmsMasterKeyID: Swift.String? = nil,
            sseAlgorithm: S3ClientTypes.ServerSideEncryption? = nil
        )
        {
            self.kmsMasterKeyID = kmsMasterKeyID
            self.sseAlgorithm = sseAlgorithm
        }
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServerSideEncryptionByDefault(sseAlgorithm: \(Swift.String(describing: sseAlgorithm)), kmsMasterKeyID: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Specifies the default server-side encryption configuration.
    ///
    /// * General purpose buckets - If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner.
    ///
    /// * Directory buckets - When you specify an [KMS customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) for encryption in your directory bucket, only use the key ID or key ARN. The key alias format of the KMS key isn't supported.
    public struct ServerSideEncryptionRule: Swift.Sendable {
        /// Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
        public var applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault?
        /// Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the BucketKeyEnabled element to true causes Amazon S3 to use an S3 Bucket Key.
        ///
        /// * General purpose buckets - By default, S3 Bucket Key is not enabled. For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the Amazon S3 User Guide.
        ///
        /// * Directory buckets - S3 Bucket Keys are always enabled for GET and PUT operations in a directory bucket and can’t be disabled. S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted objects from general purpose buckets to directory buckets, from directory buckets to general purpose buckets, or between directory buckets, through [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html), [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html), [the Copy operation in Batch Operations](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-objects-Batch-Ops), or [the import jobs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-import-job). In this case, Amazon S3 makes a call to KMS every time a copy request is made for a KMS-encrypted object.
        public var bucketKeyEnabled: Swift.Bool?

        public init(
            applyServerSideEncryptionByDefault: S3ClientTypes.ServerSideEncryptionByDefault? = nil,
            bucketKeyEnabled: Swift.Bool? = nil
        )
        {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
            self.bucketKeyEnabled = bucketKeyEnabled
        }
    }
}

extension S3ClientTypes {

    /// Specifies the default server-side-encryption configuration.
    public struct ServerSideEncryptionConfiguration: Swift.Sendable {
        /// Container for information about a particular server-side encryption configuration rule.
        /// This member is required.
        public var rules: [S3ClientTypes.ServerSideEncryptionRule]?

        public init(
            rules: [S3ClientTypes.ServerSideEncryptionRule]? = nil
        )
        {
            self.rules = rules
        }
    }
}

public struct GetBucketEncryptionOutput: Swift.Sendable {
    /// Specifies the default server-side-encryption configuration.
    public var serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init(
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

public struct GetBucketIntelligentTieringConfigurationInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.id = id
    }
}

extension S3ClientTypes {

    /// A container for specifying S3 Intelligent-Tiering filters. The filters determine the subset of objects to which the rule applies.
    public struct IntelligentTieringAndOperator: Swift.Sendable {
        /// An object key name prefix that identifies the subset of objects to which the configuration applies.
        public var `prefix`: Swift.String?
        /// All of these tags must exist in the object's tag set in order for the configuration to apply.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }
}

extension S3ClientTypes {

    /// The Filter is used to identify objects that the S3 Intelligent-Tiering configuration applies to.
    public struct IntelligentTieringFilter: Swift.Sendable {
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        public var and: S3ClientTypes.IntelligentTieringAndOperator?
        /// An object key name prefix that identifies the subset of objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var `prefix`: Swift.String?
        /// A container of a key value name pair.
        public var tag: S3ClientTypes.Tag?

        public init(
            and: S3ClientTypes.IntelligentTieringAndOperator? = nil,
            `prefix`: Swift.String? = nil,
            tag: S3ClientTypes.Tag? = nil
        )
        {
            self.and = and
            self.`prefix` = `prefix`
            self.tag = tag
        }
    }
}

extension S3ClientTypes {

    public enum IntelligentTieringStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum IntelligentTieringAccessTier: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [IntelligentTieringAccessTier] {
            return [
                .archiveAccess,
                .deepArchiveAccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
    public struct Tiering: Swift.Sendable {
        /// S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
        /// This member is required.
        public var accessTier: S3ClientTypes.IntelligentTieringAccessTier?
        /// The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
        /// This member is required.
        public var days: Swift.Int?

        public init(
            accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
            days: Swift.Int? = nil
        )
        {
            self.accessTier = accessTier
            self.days = days
        }
    }
}

extension S3ClientTypes {

    /// Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket. For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).
    public struct IntelligentTieringConfiguration: Swift.Sendable {
        /// Specifies a bucket filter. The configuration only includes objects that meet the filter's criteria.
        public var filter: S3ClientTypes.IntelligentTieringFilter?
        /// The ID used to identify the S3 Intelligent-Tiering configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies the status of the configuration.
        /// This member is required.
        public var status: S3ClientTypes.IntelligentTieringStatus?
        /// Specifies the S3 Intelligent-Tiering storage class tier of the configuration.
        /// This member is required.
        public var tierings: [S3ClientTypes.Tiering]?

        public init(
            filter: S3ClientTypes.IntelligentTieringFilter? = nil,
            id: Swift.String? = nil,
            status: S3ClientTypes.IntelligentTieringStatus? = nil,
            tierings: [S3ClientTypes.Tiering]? = nil
        )
        {
            self.filter = filter
            self.id = id
            self.status = status
            self.tierings = tierings
        }
    }
}

public struct GetBucketIntelligentTieringConfigurationOutput: Swift.Sendable {
    /// Container for S3 Intelligent-Tiering configuration.
    public var intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init(
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

public struct GetBucketInventoryConfigurationInput: Swift.Sendable {
    /// The name of the bucket containing the inventory configuration to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension S3ClientTypes {

    /// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
    public struct SSEKMS: Swift.Sendable {
        /// Specifies the ID of the Key Management Service (KMS) symmetric encryption customer managed key to use for encrypting inventory reports.
        /// This member is required.
        public var keyId: Swift.String?

        public init(
            keyId: Swift.String? = nil
        )
        {
            self.keyId = keyId
        }
    }
}

extension S3ClientTypes.SSEKMS: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SSEKMS(keyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
    public struct SSES3: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// Contains the type of server-side encryption used to encrypt the inventory results.
    public struct InventoryEncryption: Swift.Sendable {
        /// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
        public var ssekms: S3ClientTypes.SSEKMS?
        /// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
        public var sses3: S3ClientTypes.SSES3?

        public init(
            ssekms: S3ClientTypes.SSEKMS? = nil,
            sses3: S3ClientTypes.SSES3? = nil
        )
        {
            self.ssekms = ssekms
            self.sses3 = sses3
        }
    }
}

extension S3ClientTypes {

    public enum InventoryFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case orc
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFormat] {
            return [
                .csv,
                .orc,
                .parquet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .orc: return "ORC"
            case .parquet: return "Parquet"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
    public struct InventoryS3BucketDestination: Swift.Sendable {
        /// The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data. Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        public var accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the bucket where inventory results will be published.
        /// This member is required.
        public var bucket: Swift.String?
        /// Contains the type of server-side encryption used to encrypt the inventory results.
        public var encryption: S3ClientTypes.InventoryEncryption?
        /// Specifies the output format of the inventory results.
        /// This member is required.
        public var format: S3ClientTypes.InventoryFormat?
        /// The prefix that is prepended to all inventory results.
        public var `prefix`: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryption: S3ClientTypes.InventoryEncryption? = nil,
            format: S3ClientTypes.InventoryFormat? = nil,
            `prefix`: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.bucket = bucket
            self.encryption = encryption
            self.format = format
            self.`prefix` = `prefix`
        }
    }
}

extension S3ClientTypes {

    /// Specifies the inventory configuration for an Amazon S3 bucket.
    public struct InventoryDestination: Swift.Sendable {
        /// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
        /// This member is required.
        public var s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination?

        public init(
            s3BucketDestination: S3ClientTypes.InventoryS3BucketDestination? = nil
        )
        {
            self.s3BucketDestination = s3BucketDestination
        }
    }
}

extension S3ClientTypes {

    /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
    public struct InventoryFilter: Swift.Sendable {
        /// The prefix that an object must have to be included in the inventory results.
        /// This member is required.
        public var `prefix`: Swift.String?

        public init(
            `prefix`: Swift.String? = nil
        )
        {
            self.`prefix` = `prefix`
        }
    }
}

extension S3ClientTypes {

    public enum InventoryIncludedObjectVersions: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case current
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryIncludedObjectVersions] {
            return [
                .all,
                .current
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .current: return "Current"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum InventoryOptionalField: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bucketkeystatus
        case checksumalgorithm
        case etag
        case encryptionstatus
        case intelligenttieringaccesstier
        case ismultipartuploaded
        case lastmodifieddate
        case objectaccesscontrollist
        case objectlocklegalholdstatus
        case objectlockmode
        case objectlockretainuntildate
        case objectowner
        case replicationstatus
        case size
        case storageclass
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryOptionalField] {
            return [
                .bucketkeystatus,
                .checksumalgorithm,
                .etag,
                .encryptionstatus,
                .intelligenttieringaccesstier,
                .ismultipartuploaded,
                .lastmodifieddate,
                .objectaccesscontrollist,
                .objectlocklegalholdstatus,
                .objectlockmode,
                .objectlockretainuntildate,
                .objectowner,
                .replicationstatus,
                .size,
                .storageclass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bucketkeystatus: return "BucketKeyStatus"
            case .checksumalgorithm: return "ChecksumAlgorithm"
            case .etag: return "ETag"
            case .encryptionstatus: return "EncryptionStatus"
            case .intelligenttieringaccesstier: return "IntelligentTieringAccessTier"
            case .ismultipartuploaded: return "IsMultipartUploaded"
            case .lastmodifieddate: return "LastModifiedDate"
            case .objectaccesscontrollist: return "ObjectAccessControlList"
            case .objectlocklegalholdstatus: return "ObjectLockLegalHoldStatus"
            case .objectlockmode: return "ObjectLockMode"
            case .objectlockretainuntildate: return "ObjectLockRetainUntilDate"
            case .objectowner: return "ObjectOwner"
            case .replicationstatus: return "ReplicationStatus"
            case .size: return "Size"
            case .storageclass: return "StorageClass"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum InventoryFrequency: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case daily
        case weekly
        case sdkUnknown(Swift.String)

        public static var allCases: [InventoryFrequency] {
            return [
                .daily,
                .weekly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .daily: return "Daily"
            case .weekly: return "Weekly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies the schedule for generating inventory results.
    public struct InventorySchedule: Swift.Sendable {
        /// Specifies how frequently inventory results are produced.
        /// This member is required.
        public var frequency: S3ClientTypes.InventoryFrequency?

        public init(
            frequency: S3ClientTypes.InventoryFrequency? = nil
        )
        {
            self.frequency = frequency
        }
    }
}

extension S3ClientTypes {

    /// Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the Amazon S3 API Reference.
    public struct InventoryConfiguration: Swift.Sendable {
        /// Contains information about where to publish the inventory results.
        /// This member is required.
        public var destination: S3ClientTypes.InventoryDestination?
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
        public var filter: S3ClientTypes.InventoryFilter?
        /// The ID used to identify the inventory configuration.
        /// This member is required.
        public var id: Swift.String?
        /// Object versions to include in the inventory list. If set to All, the list includes all the object versions, which adds the version-related fields VersionId, IsLatest, and DeleteMarker to the list. If set to Current, the list does not contain these version-related fields.
        /// This member is required.
        public var includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions?
        /// Specifies whether the inventory is enabled or disabled. If set to True, an inventory list is generated. If set to False, no inventory list is generated.
        /// This member is required.
        public var isEnabled: Swift.Bool?
        /// Contains the optional fields that are included in the inventory results.
        public var optionalFields: [S3ClientTypes.InventoryOptionalField]?
        /// Specifies the schedule for generating inventory results.
        /// This member is required.
        public var schedule: S3ClientTypes.InventorySchedule?

        public init(
            destination: S3ClientTypes.InventoryDestination? = nil,
            filter: S3ClientTypes.InventoryFilter? = nil,
            id: Swift.String? = nil,
            includedObjectVersions: S3ClientTypes.InventoryIncludedObjectVersions? = nil,
            isEnabled: Swift.Bool? = nil,
            optionalFields: [S3ClientTypes.InventoryOptionalField]? = nil,
            schedule: S3ClientTypes.InventorySchedule? = nil
        )
        {
            self.destination = destination
            self.filter = filter
            self.id = id
            self.includedObjectVersions = includedObjectVersions
            self.isEnabled = isEnabled
            self.optionalFields = optionalFields
            self.schedule = schedule
        }
    }
}

public struct GetBucketInventoryConfigurationOutput: Swift.Sendable {
    /// Specifies the inventory configuration.
    public var inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init(
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.inventoryConfiguration = inventoryConfiguration
    }
}

public struct GetBucketLifecycleConfigurationInput: Swift.Sendable {
    /// The name of the bucket for which to get the lifecycle information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// Container for the expiration for the lifecycle of the object. For more information see, [Managing your storage lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct LifecycleExpiration: Swift.Sendable {
        /// Indicates at what date the object is to be moved or deleted. The date value must conform to the ISO 8601 format. The time is always midnight UTC.
        public var date: Foundation.Date?
        /// Indicates the lifetime, in days, of the objects that are subject to the rule. The value must be a non-zero positive integer.
        public var days: Swift.Int?
        /// Indicates whether Amazon S3 will remove a delete marker with no noncurrent versions. If set to true, the delete marker will be expired; if set to false the policy takes no action. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        public var expiredObjectDeleteMarker: Swift.Bool?

        public init(
            date: Foundation.Date? = nil,
            days: Swift.Int? = nil,
            expiredObjectDeleteMarker: Swift.Bool? = nil
        )
        {
            self.date = date
            self.days = days
            self.expiredObjectDeleteMarker = expiredObjectDeleteMarker
        }
    }
}

extension S3ClientTypes {

    /// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
    public struct LifecycleRuleAndOperator: Swift.Sendable {
        /// Minimum object size to which the rule applies.
        public var objectSizeGreaterThan: Swift.Int?
        /// Maximum object size to which the rule applies.
        public var objectSizeLessThan: Swift.Int?
        /// Prefix identifying one or more objects to which the rule applies.
        public var `prefix`: Swift.String?
        /// All of these tags must exist in the object's tag set in order for the rule to apply.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            objectSizeGreaterThan: Swift.Int? = nil,
            objectSizeLessThan: Swift.Int? = nil,
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.objectSizeGreaterThan = objectSizeGreaterThan
            self.objectSizeLessThan = objectSizeLessThan
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }
}

extension S3ClientTypes {

    /// The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter can have exactly one of Prefix, Tag, ObjectSizeGreaterThan, ObjectSizeLessThan, or And specified. If the Filter element is left empty, the Lifecycle Rule applies to all objects in the bucket.
    public struct LifecycleRuleFilter: Swift.Sendable {
        /// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
        public var and: S3ClientTypes.LifecycleRuleAndOperator?
        /// Minimum object size to which the rule applies.
        public var objectSizeGreaterThan: Swift.Int?
        /// Maximum object size to which the rule applies.
        public var objectSizeLessThan: Swift.Int?
        /// Prefix identifying one or more objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var `prefix`: Swift.String?
        /// This tag must exist in the object's tag set in order for the rule to apply.
        public var tag: S3ClientTypes.Tag?

        public init(
            and: S3ClientTypes.LifecycleRuleAndOperator? = nil,
            objectSizeGreaterThan: Swift.Int? = nil,
            objectSizeLessThan: Swift.Int? = nil,
            `prefix`: Swift.String? = nil,
            tag: S3ClientTypes.Tag? = nil
        )
        {
            self.and = and
            self.objectSizeGreaterThan = objectSizeGreaterThan
            self.objectSizeLessThan = objectSizeLessThan
            self.`prefix` = `prefix`
            self.tag = tag
        }
    }
}

extension S3ClientTypes {

    /// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
    public struct NoncurrentVersionExpiration: Swift.Sendable {
        /// Specifies how many noncurrent versions Amazon S3 will retain. You can specify up to 100 noncurrent versions to retain. Amazon S3 will permanently delete any additional noncurrent versions beyond the specified number to retain. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the Amazon S3 User Guide.
        public var newerNoncurrentVersions: Swift.Int?
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. The value must be a non-zero positive integer. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon S3 User Guide.
        public var noncurrentDays: Swift.Int?

        public init(
            newerNoncurrentVersions: Swift.Int? = nil,
            noncurrentDays: Swift.Int? = nil
        )
        {
            self.newerNoncurrentVersions = newerNoncurrentVersions
            self.noncurrentDays = noncurrentDays
        }
    }
}

extension S3ClientTypes {

    public enum TransitionStorageClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepArchive
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [TransitionStorageClass] {
            return [
                .deepArchive,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .standardIa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object's lifetime.
    public struct NoncurrentVersionTransition: Swift.Sendable {
        /// Specifies how many noncurrent versions Amazon S3 will retain in the same storage class before transitioning objects. You can specify up to 100 noncurrent versions to retain. Amazon S3 will transition any additional noncurrent versions beyond the specified number to retain. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the Amazon S3 User Guide.
        public var newerNoncurrentVersions: Swift.Int?
        /// Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the Amazon S3 User Guide.
        public var noncurrentDays: Swift.Int?
        /// The class of storage used to store the object.
        public var storageClass: S3ClientTypes.TransitionStorageClass?

        public init(
            newerNoncurrentVersions: Swift.Int? = nil,
            noncurrentDays: Swift.Int? = nil,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.newerNoncurrentVersions = newerNoncurrentVersions
            self.noncurrentDays = noncurrentDays
            self.storageClass = storageClass
        }
    }
}

extension S3ClientTypes {

    public enum ExpirationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the Amazon S3 User Guide.
    public struct Transition: Swift.Sendable {
        /// Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
        public var date: Foundation.Date?
        /// Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
        public var days: Swift.Int?
        /// The storage class to which you want the object to transition.
        public var storageClass: S3ClientTypes.TransitionStorageClass?

        public init(
            date: Foundation.Date? = nil,
            days: Swift.Int? = nil,
            storageClass: S3ClientTypes.TransitionStorageClass? = nil
        )
        {
            self.date = date
            self.days = days
            self.storageClass = storageClass
        }
    }
}

extension S3ClientTypes {

    /// A lifecycle rule for individual objects in an Amazon S3 bucket. For more information see, [Managing your storage lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct LifecycleRule: Swift.Sendable {
        /// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide.
        public var abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload?
        /// Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
        public var expiration: S3ClientTypes.LifecycleExpiration?
        /// The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified. Filter is required if the LifecycleRule does not contain a Prefix element.
        public var filter: S3ClientTypes.LifecycleRuleFilter?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var id: Swift.String?
        /// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
        public var noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration?
        /// Specifies the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to a specific storage class at a set period in the object's lifetime.
        public var noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]?
        /// Prefix identifying one or more objects to which the rule applies. This is no longer used; use Filter instead. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        @available(*, deprecated)
        public var `prefix`: Swift.String?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        /// This member is required.
        public var status: S3ClientTypes.ExpirationStatus?
        /// Specifies when an Amazon S3 object transitions to a specified storage class.
        public var transitions: [S3ClientTypes.Transition]?

        public init(
            abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload? = nil,
            expiration: S3ClientTypes.LifecycleExpiration? = nil,
            filter: S3ClientTypes.LifecycleRuleFilter? = nil,
            id: Swift.String? = nil,
            noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration? = nil,
            noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]? = nil,
            `prefix`: Swift.String? = nil,
            status: S3ClientTypes.ExpirationStatus? = nil,
            transitions: [S3ClientTypes.Transition]? = nil
        )
        {
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.filter = filter
            self.id = id
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.`prefix` = `prefix`
            self.status = status
            self.transitions = transitions
        }
    }
}

extension S3ClientTypes {

    public enum TransitionDefaultMinimumObjectSize: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allStorageClasses128k
        case variesByStorageClass
        case sdkUnknown(Swift.String)

        public static var allCases: [TransitionDefaultMinimumObjectSize] {
            return [
                .allStorageClasses128k,
                .variesByStorageClass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allStorageClasses128k: return "all_storage_classes_128K"
            case .variesByStorageClass: return "varies_by_storage_class"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetBucketLifecycleConfigurationOutput: Swift.Sendable {
    /// Container for a lifecycle rule.
    public var rules: [S3ClientTypes.LifecycleRule]?
    /// Indicates which default minimum object size behavior is applied to the lifecycle configuration.
    ///
    /// * all_storage_classes_128K - Objects smaller than 128 KB will not transition to any storage class by default.
    ///
    /// * varies_by_storage_class - Objects smaller than 128 KB will transition to Glacier Flexible Retrieval or Glacier Deep Archive storage classes. By default, all other storage classes will prevent transitions smaller than 128 KB.
    ///
    ///
    /// To customize the minimum object size for any transition you can add a filter that specifies a custom ObjectSizeGreaterThan or ObjectSizeLessThan in the body of your transition rule. Custom filters always take precedence over the default transition behavior.
    public var transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize?

    public init(
        rules: [S3ClientTypes.LifecycleRule]? = nil,
        transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize? = nil
    )
    {
        self.rules = rules
        self.transitionDefaultMinimumObjectSize = transitionDefaultMinimumObjectSize
    }
}

public struct GetBucketLocationInput: Swift.Sendable {
    /// The name of the bucket for which to get the location. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct GetBucketLocationOutput: Swift.Sendable {
    /// Specifies the Region where the bucket resides. For a list of all the Amazon S3 supported location constraints by Region, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). Buckets in Region us-east-1 have a LocationConstraint of null.
    public var locationConstraint: S3ClientTypes.BucketLocationConstraint?

    public init(
        locationConstraint: S3ClientTypes.BucketLocationConstraint? = nil
    )
    {
        self.locationConstraint = locationConstraint
    }
}

public struct GetBucketLoggingInput: Swift.Sendable {
    /// The bucket name for which to get the logging information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    public enum BucketLogsPermission: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullControl
        case read
        case write
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketLogsPermission] {
            return [
                .fullControl,
                .read,
                .write
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullControl: return "FULL_CONTROL"
            case .read: return "READ"
            case .write: return "WRITE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for granting information. Buckets that use the bucket owner enforced setting for Object Ownership don't support target grants. For more information, see [Permissions server access log delivery](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general) in the Amazon S3 User Guide.
    public struct TargetGrant: Swift.Sendable {
        /// Container for the person being granted permissions.
        public var grantee: S3ClientTypes.Grantee?
        /// Logging permissions assigned to the grantee for the bucket.
        public var permission: S3ClientTypes.BucketLogsPermission?

        public init(
            grantee: S3ClientTypes.Grantee? = nil,
            permission: S3ClientTypes.BucketLogsPermission? = nil
        )
        {
            self.grantee = grantee
            self.permission = permission
        }
    }
}

extension S3ClientTypes {

    public enum PartitionDateSource: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deliverytime
        case eventtime
        case sdkUnknown(Swift.String)

        public static var allCases: [PartitionDateSource] {
            return [
                .deliverytime,
                .eventtime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deliverytime: return "DeliveryTime"
            case .eventtime: return "EventTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Amazon S3 keys for log objects are partitioned in the following format: [DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString] PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
    public struct PartitionedPrefix: Swift.Sendable {
        /// Specifies the partition date source for the partitioned prefix. PartitionDateSource can be EventTime or DeliveryTime. For DeliveryTime, the time in the log file names corresponds to the delivery time for the log files. For EventTime, The logs delivered are for a specific day only. The year, month, and day correspond to the day on which the event occurred, and the hour, minutes and seconds are set to 00 in the key.
        public var partitionDateSource: S3ClientTypes.PartitionDateSource?

        public init(
            partitionDateSource: S3ClientTypes.PartitionDateSource? = nil
        )
        {
            self.partitionDateSource = partitionDateSource
        }
    }
}

extension S3ClientTypes {

    /// To use simple format for S3 keys for log objects, set SimplePrefix to an empty object. [DestinationPrefix][YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]
    public struct SimplePrefix: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// Amazon S3 key format for log objects. Only one format, PartitionedPrefix or SimplePrefix, is allowed.
    public struct TargetObjectKeyFormat: Swift.Sendable {
        /// Partitioned S3 key for log objects.
        public var partitionedPrefix: S3ClientTypes.PartitionedPrefix?
        /// To use the simple format for S3 keys for log objects. To specify SimplePrefix format, set SimplePrefix to {}.
        public var simplePrefix: S3ClientTypes.SimplePrefix?

        public init(
            partitionedPrefix: S3ClientTypes.PartitionedPrefix? = nil,
            simplePrefix: S3ClientTypes.SimplePrefix? = nil
        )
        {
            self.partitionedPrefix = partitionedPrefix
            self.simplePrefix = simplePrefix
        }
    }
}

extension S3ClientTypes {

    /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
    public struct LoggingEnabled: Swift.Sendable {
        /// Specifies the bucket where you want Amazon S3 to store server access logs. You can have your logs delivered to any bucket that you own, including the same bucket that is being logged. You can also configure multiple buckets to deliver their logs to the same target bucket. In this case, you should choose a different TargetPrefix for each source bucket so that the delivered log files can be distinguished by key.
        /// This member is required.
        public var targetBucket: Swift.String?
        /// Container for granting information. Buckets that use the bucket owner enforced setting for Object Ownership don't support target grants. For more information, see [Permissions for server access log delivery](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html#grant-log-delivery-permissions-general) in the Amazon S3 User Guide.
        public var targetGrants: [S3ClientTypes.TargetGrant]?
        /// Amazon S3 key format for log objects.
        public var targetObjectKeyFormat: S3ClientTypes.TargetObjectKeyFormat?
        /// A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        /// This member is required.
        public var targetPrefix: Swift.String?

        public init(
            targetBucket: Swift.String? = nil,
            targetGrants: [S3ClientTypes.TargetGrant]? = nil,
            targetObjectKeyFormat: S3ClientTypes.TargetObjectKeyFormat? = nil,
            targetPrefix: Swift.String? = nil
        )
        {
            self.targetBucket = targetBucket
            self.targetGrants = targetGrants
            self.targetObjectKeyFormat = targetObjectKeyFormat
            self.targetPrefix = targetPrefix
        }
    }
}

public struct GetBucketLoggingOutput: Swift.Sendable {
    /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
    public var loggingEnabled: S3ClientTypes.LoggingEnabled?

    public init(
        loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
    )
    {
        self.loggingEnabled = loggingEnabled
    }
}

public struct GetBucketMetricsConfigurationInput: Swift.Sendable {
    /// The name of the bucket containing the metrics configuration to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension S3ClientTypes {

    /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
    public struct MetricsAndOperator: Swift.Sendable {
        /// The access point ARN used when evaluating an AND predicate.
        public var accessPointArn: Swift.String?
        /// The prefix used when evaluating an AND predicate.
        public var `prefix`: Swift.String?
        /// The list of tags used when evaluating an AND predicate.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            accessPointArn: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.accessPointArn = accessPointArn
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }
}

extension S3ClientTypes {

    /// Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator). For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html).
    public enum MetricsFilter: Swift.Sendable {
        /// The prefix used when evaluating a metrics filter.
        case `prefix`(Swift.String)
        /// The tag used when evaluating a metrics filter.
        case tag(S3ClientTypes.Tag)
        /// The access point ARN used when evaluating a metrics filter.
        case accesspointarn(Swift.String)
        /// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
        case and(S3ClientTypes.MetricsAndOperator)
        case sdkUnknown(Swift.String)
    }
}

extension S3ClientTypes {

    /// Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
    public struct MetricsConfiguration: Swift.Sendable {
        /// Specifies a metrics configuration filter. The metrics configuration will only include objects that meet the filter's criteria. A filter must be a prefix, an object tag, an access point ARN, or a conjunction (MetricsAndOperator).
        public var filter: S3ClientTypes.MetricsFilter?
        /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
        /// This member is required.
        public var id: Swift.String?

        public init(
            filter: S3ClientTypes.MetricsFilter? = nil,
            id: Swift.String? = nil
        )
        {
            self.filter = filter
            self.id = id
        }
    }
}

public struct GetBucketMetricsConfigurationOutput: Swift.Sendable {
    /// Specifies the metrics configuration.
    public var metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init(
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.metricsConfiguration = metricsConfiguration
    }
}

public struct GetBucketNotificationConfigurationInput: Swift.Sendable {
    /// The name of the bucket for which to get the notification configuration. When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList).
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// A container for specifying the configuration for Amazon EventBridge.
    public struct EventBridgeConfiguration: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// The bucket event for which to send notifications.
    public enum Event: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3Intelligenttiering
        case s3Lifecycleexpiration
        case s3LifecycleexpirationDelete
        case s3LifecycleexpirationDeletemarkercreated
        case s3Lifecycletransition
        case s3ObjectaclPut
        case s3Objectcreated
        case s3ObjectcreatedCompletemultipartupload
        case s3ObjectcreatedCopy
        case s3ObjectcreatedPost
        case s3ObjectcreatedPut
        case s3Objectremoved
        case s3ObjectremovedDelete
        case s3ObjectremovedDeletemarkercreated
        case s3Objectrestore
        case s3ObjectrestoreCompleted
        case s3ObjectrestoreDelete
        case s3ObjectrestorePost
        case s3Objecttagging
        case s3ObjecttaggingDelete
        case s3ObjecttaggingPut
        case s3Reducedredundancylostobject
        case s3Replication
        case s3ReplicationOperationfailedreplication
        case s3ReplicationOperationmissedthreshold
        case s3ReplicationOperationnottracked
        case s3ReplicationOperationreplicatedafterthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [Event] {
            return [
                .s3Intelligenttiering,
                .s3Lifecycleexpiration,
                .s3LifecycleexpirationDelete,
                .s3LifecycleexpirationDeletemarkercreated,
                .s3Lifecycletransition,
                .s3ObjectaclPut,
                .s3Objectcreated,
                .s3ObjectcreatedCompletemultipartupload,
                .s3ObjectcreatedCopy,
                .s3ObjectcreatedPost,
                .s3ObjectcreatedPut,
                .s3Objectremoved,
                .s3ObjectremovedDelete,
                .s3ObjectremovedDeletemarkercreated,
                .s3Objectrestore,
                .s3ObjectrestoreCompleted,
                .s3ObjectrestoreDelete,
                .s3ObjectrestorePost,
                .s3Objecttagging,
                .s3ObjecttaggingDelete,
                .s3ObjecttaggingPut,
                .s3Reducedredundancylostobject,
                .s3Replication,
                .s3ReplicationOperationfailedreplication,
                .s3ReplicationOperationmissedthreshold,
                .s3ReplicationOperationnottracked,
                .s3ReplicationOperationreplicatedafterthreshold
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3Intelligenttiering: return "s3:IntelligentTiering"
            case .s3Lifecycleexpiration: return "s3:LifecycleExpiration:*"
            case .s3LifecycleexpirationDelete: return "s3:LifecycleExpiration:Delete"
            case .s3LifecycleexpirationDeletemarkercreated: return "s3:LifecycleExpiration:DeleteMarkerCreated"
            case .s3Lifecycletransition: return "s3:LifecycleTransition"
            case .s3ObjectaclPut: return "s3:ObjectAcl:Put"
            case .s3Objectcreated: return "s3:ObjectCreated:*"
            case .s3ObjectcreatedCompletemultipartupload: return "s3:ObjectCreated:CompleteMultipartUpload"
            case .s3ObjectcreatedCopy: return "s3:ObjectCreated:Copy"
            case .s3ObjectcreatedPost: return "s3:ObjectCreated:Post"
            case .s3ObjectcreatedPut: return "s3:ObjectCreated:Put"
            case .s3Objectremoved: return "s3:ObjectRemoved:*"
            case .s3ObjectremovedDelete: return "s3:ObjectRemoved:Delete"
            case .s3ObjectremovedDeletemarkercreated: return "s3:ObjectRemoved:DeleteMarkerCreated"
            case .s3Objectrestore: return "s3:ObjectRestore:*"
            case .s3ObjectrestoreCompleted: return "s3:ObjectRestore:Completed"
            case .s3ObjectrestoreDelete: return "s3:ObjectRestore:Delete"
            case .s3ObjectrestorePost: return "s3:ObjectRestore:Post"
            case .s3Objecttagging: return "s3:ObjectTagging:*"
            case .s3ObjecttaggingDelete: return "s3:ObjectTagging:Delete"
            case .s3ObjecttaggingPut: return "s3:ObjectTagging:Put"
            case .s3Reducedredundancylostobject: return "s3:ReducedRedundancyLostObject"
            case .s3Replication: return "s3:Replication:*"
            case .s3ReplicationOperationfailedreplication: return "s3:Replication:OperationFailedReplication"
            case .s3ReplicationOperationmissedthreshold: return "s3:Replication:OperationMissedThreshold"
            case .s3ReplicationOperationnottracked: return "s3:Replication:OperationNotTracked"
            case .s3ReplicationOperationreplicatedafterthreshold: return "s3:Replication:OperationReplicatedAfterThreshold"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum FilterRuleName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `prefix`
        case suffix
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterRuleName] {
            return [
                .prefix,
                .suffix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .prefix: return "prefix"
            case .suffix: return "suffix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as 2023- or engineering/. Then, you can use FilterRule to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.
    public struct FilterRule: Swift.Sendable {
        /// The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        public var name: S3ClientTypes.FilterRuleName?
        /// The value that the filter searches for in object key names.
        public var value: Swift.String?

        public init(
            name: S3ClientTypes.FilterRuleName? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension S3ClientTypes {

    /// A container for object key name prefix and suffix filtering rules.
    public struct S3KeyFilter: Swift.Sendable {
        /// A list of containers for the key-value pair that defines the criteria for the filter rule.
        public var filterRules: [S3ClientTypes.FilterRule]?

        public init(
            filterRules: [S3ClientTypes.FilterRule]? = nil
        )
        {
            self.filterRules = filterRules
        }
    }
}

extension S3ClientTypes {

    /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
    public struct NotificationConfigurationFilter: Swift.Sendable {
        /// A container for object key name prefix and suffix filtering rules.
        public var key: S3ClientTypes.S3KeyFilter?

        public init(
            key: S3ClientTypes.S3KeyFilter? = nil
        )
        {
            self.key = key
        }
    }
}

extension S3ClientTypes {

    /// A container for specifying the configuration for Lambda notifications.
    public struct LambdaFunctionConfiguration: Swift.Sendable {
        /// The Amazon S3 bucket event for which to invoke the Lambda function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Lambda function that Amazon S3 invokes when the specified event type occurs.
        /// This member is required.
        public var lambdaFunctionArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            lambdaFunctionArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.lambdaFunctionArn = lambdaFunctionArn
        }
    }
}

extension S3ClientTypes {

    /// Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
    public struct QueueConfiguration: Swift.Sendable {
        /// A collection of bucket events for which to send notifications
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type.
        /// This member is required.
        public var queueArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            queueArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.queueArn = queueArn
        }
    }
}

extension S3ClientTypes {

    /// A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
    public struct TopicConfiguration: Swift.Sendable {
        /// The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var events: [S3ClientTypes.Event]?
        /// Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the Amazon S3 User Guide.
        public var filter: S3ClientTypes.NotificationConfigurationFilter?
        /// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
        public var id: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            events: [S3ClientTypes.Event]? = nil,
            filter: S3ClientTypes.NotificationConfigurationFilter? = nil,
            id: Swift.String? = nil,
            topicArn: Swift.String? = nil
        )
        {
            self.events = events
            self.filter = filter
            self.id = id
            self.topicArn = topicArn
        }
    }
}

/// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
public struct GetBucketNotificationConfigurationOutput: Swift.Sendable {
    /// Enables delivery of events to Amazon EventBridge.
    public var eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration?
    /// Describes the Lambda functions to invoke and the events for which to invoke them.
    public var lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
    /// The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
    public var queueConfigurations: [S3ClientTypes.QueueConfiguration]?
    /// The topic to which notifications are sent and the events for which notifications are generated.
    public var topicConfigurations: [S3ClientTypes.TopicConfiguration]?

    public init(
        eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration? = nil,
        lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
        queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
        topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
    )
    {
        self.eventBridgeConfiguration = eventBridgeConfiguration
        self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
        self.queueConfigurations = queueConfigurations
        self.topicConfigurations = topicConfigurations
    }
}

public struct GetBucketOwnershipControlsInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose OwnershipControls you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// The container element for an ownership control rule.
    public struct OwnershipControlsRule: Swift.Sendable {
        /// The container element for object ownership for a bucket's ownership controls. BucketOwnerPreferred - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. ObjectWriter - The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL. BucketOwnerEnforced - Access control lists (ACLs) are disabled and no longer affect permissions. The bucket owner automatically owns and has full control over every object in the bucket. The bucket only accepts PUT requests that don't specify an ACL or specify bucket owner full control ACLs (such as the predefined bucket-owner-full-control canned ACL or a custom ACL in XML format that grants the same permissions). By default, ObjectOwnership is set to BucketOwnerEnforced and ACLs are disabled. We recommend keeping ACLs disabled, except in uncommon use cases where you must control access for each object individually. For more information about S3 Object Ownership, see [Controlling ownership of objects and disabling ACLs for your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Directory buckets use the bucket owner enforced setting for S3 Object Ownership.
        /// This member is required.
        public var objectOwnership: S3ClientTypes.ObjectOwnership?

        public init(
            objectOwnership: S3ClientTypes.ObjectOwnership? = nil
        )
        {
            self.objectOwnership = objectOwnership
        }
    }
}

extension S3ClientTypes {

    /// The container element for a bucket's ownership controls.
    public struct OwnershipControls: Swift.Sendable {
        /// The container element for an ownership control rule.
        /// This member is required.
        public var rules: [S3ClientTypes.OwnershipControlsRule]?

        public init(
            rules: [S3ClientTypes.OwnershipControlsRule]? = nil
        )
        {
            self.rules = rules
        }
    }
}

public struct GetBucketOwnershipControlsOutput: Swift.Sendable {
    /// The OwnershipControls (BucketOwnerEnforced, BucketOwnerPreferred, or ObjectWriter) currently in effect for this Amazon S3 bucket.
    public var ownershipControls: S3ClientTypes.OwnershipControls?

    public init(
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.ownershipControls = ownershipControls
    }
}

public struct GetBucketPolicyInput: Swift.Sendable {
    /// The bucket name to get the bucket policy for. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide Access points - When you use this API operation with an access point, provide the alias of the access point in place of the bucket name. Object Lambda access points - When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList). Access points and Object Lambda access points are not supported by directory buckets.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct GetBucketPolicyOutput: Swift.Sendable {
    /// The bucket policy as a JSON document.
    public var policy: Swift.String?

    public init(
        policy: Swift.String? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetBucketPolicyStatusInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose policy status you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// The container element for a bucket's policy status.
    public struct PolicyStatus: Swift.Sendable {
        /// The policy status for this bucket. TRUE indicates that this bucket is public. FALSE indicates that the bucket is not public.
        public var isPublic: Swift.Bool?

        public init(
            isPublic: Swift.Bool? = nil
        )
        {
            self.isPublic = isPublic
        }
    }
}

public struct GetBucketPolicyStatusOutput: Swift.Sendable {
    /// The policy status for the specified bucket.
    public var policyStatus: S3ClientTypes.PolicyStatus?

    public init(
        policyStatus: S3ClientTypes.PolicyStatus? = nil
    )
    {
        self.policyStatus = policyStatus
    }
}

public struct GetBucketReplicationInput: Swift.Sendable {
    /// The bucket name for which to get the replication information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    public enum DeleteMarkerReplicationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DeleteMarkerReplicationStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies whether Amazon S3 replicates delete markers. If you specify a Filter in your replication configuration, you must also include a DeleteMarkerReplication element. If your Filter includes a Tag element, the DeleteMarkerReplicationStatus must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
    public struct DeleteMarkerReplication: Swift.Sendable {
        /// Indicates whether to replicate delete markers. Indicates whether to replicate delete markers.
        public var status: S3ClientTypes.DeleteMarkerReplicationStatus?

        public init(
            status: S3ClientTypes.DeleteMarkerReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension S3ClientTypes {

    /// Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects. If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner.
    public struct EncryptionConfiguration: Swift.Sendable {
        /// Specifies the ID (Key ARN or Alias ARN) of the customer managed Amazon Web Services KMS key stored in Amazon Web Services Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var replicaKmsKeyID: Swift.String?

        public init(
            replicaKmsKeyID: Swift.String? = nil
        )
        {
            self.replicaKmsKeyID = replicaKmsKeyID
        }
    }
}

extension S3ClientTypes {

    /// A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics EventThreshold.
    public struct ReplicationTimeValue: Swift.Sendable {
        /// Contains an integer specifying time in minutes. Valid value: 15
        public var minutes: Swift.Int?

        public init(
            minutes: Swift.Int? = nil
        )
        {
            self.minutes = minutes
        }
    }
}

extension S3ClientTypes {

    public enum MetricsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricsStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// A container specifying replication metrics-related settings enabling replication metrics and events.
    public struct Metrics: Swift.Sendable {
        /// A container specifying the time threshold for emitting the s3:Replication:OperationMissedThreshold event.
        public var eventThreshold: S3ClientTypes.ReplicationTimeValue?
        /// Specifies whether the replication metrics are enabled.
        /// This member is required.
        public var status: S3ClientTypes.MetricsStatus?

        public init(
            eventThreshold: S3ClientTypes.ReplicationTimeValue? = nil,
            status: S3ClientTypes.MetricsStatus? = nil
        )
        {
            self.eventThreshold = eventThreshold
            self.status = status
        }
    }
}

extension S3ClientTypes {

    public enum ReplicationTimeStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationTimeStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
    public struct ReplicationTime: Swift.Sendable {
        /// Specifies whether the replication time is enabled.
        /// This member is required.
        public var status: S3ClientTypes.ReplicationTimeStatus?
        /// A container specifying the time by which replication should be complete for all objects and operations on objects.
        /// This member is required.
        public var time: S3ClientTypes.ReplicationTimeValue?

        public init(
            status: S3ClientTypes.ReplicationTimeStatus? = nil,
            time: S3ClientTypes.ReplicationTimeValue? = nil
        )
        {
            self.status = status
            self.time = time
        }
    }
}

extension S3ClientTypes {

    /// Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
    public struct Destination: Swift.Sendable {
        /// Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the Amazon Web Services account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same Amazon Web Services account that owns the source object.
        public var accessControlTranslation: S3ClientTypes.AccessControlTranslation?
        /// Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the Amazon Web Services account that owns the destination bucket by specifying the AccessControlTranslation property, this is the account ID of the destination bucket owner. For more information, see [Replication Additional Configuration: Changing the Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-change-owner.html) in the Amazon S3 User Guide.
        public var account: Swift.String?
        /// The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
        /// This member is required.
        public var bucket: Swift.String?
        /// A container that provides information about encryption. If SourceSelectionCriteria is specified, you must specify this element.
        public var encryptionConfiguration: S3ClientTypes.EncryptionConfiguration?
        /// A container specifying replication metrics-related settings enabling replication metrics and events.
        public var metrics: S3ClientTypes.Metrics?
        /// A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a Metrics block.
        public var replicationTime: S3ClientTypes.ReplicationTime?
        /// The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. For valid values, see the StorageClass element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the Amazon S3 API Reference.
        public var storageClass: S3ClientTypes.StorageClass?

        public init(
            accessControlTranslation: S3ClientTypes.AccessControlTranslation? = nil,
            account: Swift.String? = nil,
            bucket: Swift.String? = nil,
            encryptionConfiguration: S3ClientTypes.EncryptionConfiguration? = nil,
            metrics: S3ClientTypes.Metrics? = nil,
            replicationTime: S3ClientTypes.ReplicationTime? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil
        )
        {
            self.accessControlTranslation = accessControlTranslation
            self.account = account
            self.bucket = bucket
            self.encryptionConfiguration = encryptionConfiguration
            self.metrics = metrics
            self.replicationTime = replicationTime
            self.storageClass = storageClass
        }
    }
}

extension S3ClientTypes {

    public enum ExistingObjectReplicationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ExistingObjectReplicationStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Optional configuration to replicate existing source bucket objects. This parameter is no longer supported. To replicate existing objects, see [Replicating existing objects with S3 Batch Replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-batch-replication-batch.html) in the Amazon S3 User Guide.
    public struct ExistingObjectReplication: Swift.Sendable {
        /// Specifies whether Amazon S3 replicates existing source bucket objects.
        /// This member is required.
        public var status: S3ClientTypes.ExistingObjectReplicationStatus?

        public init(
            status: S3ClientTypes.ExistingObjectReplicationStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension S3ClientTypes {

    /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:
    ///
    /// * If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.
    ///
    /// * If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.
    public struct ReplicationRuleAndOperator: Swift.Sendable {
        /// An object key name prefix that identifies the subset of objects to which the rule applies.
        public var `prefix`: Swift.String?
        /// An array of tags containing key and value pairs.
        public var tags: [S3ClientTypes.Tag]?

        public init(
            `prefix`: Swift.String? = nil,
            tags: [S3ClientTypes.Tag]? = nil
        )
        {
            self.`prefix` = `prefix`
            self.tags = tags
        }
    }
}

extension S3ClientTypes {

    /// A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
    public struct ReplicationRuleFilter: Swift.Sendable {
        /// A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example:
        ///
        /// * If you specify both a Prefix and a Tag filter, wrap these filters in an And tag.
        ///
        /// * If you specify a filter based on multiple tags, wrap the Tag elements in an And tag.
        public var and: S3ClientTypes.ReplicationRuleAndOperator?
        /// An object key name prefix that identifies the subset of objects to which the rule applies. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var `prefix`: Swift.String?
        /// A container for specifying a tag key and value. The rule applies only to objects that have the tag in their tag set.
        public var tag: S3ClientTypes.Tag?

        public init(
            and: S3ClientTypes.ReplicationRuleAndOperator? = nil,
            `prefix`: Swift.String? = nil,
            tag: S3ClientTypes.Tag? = nil
        )
        {
            self.and = and
            self.`prefix` = `prefix`
            self.tag = tag
        }
    }
}

extension S3ClientTypes {

    public enum ReplicaModificationsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicaModificationsStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// A filter that you can specify for selection for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when Filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas. If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed.
    public struct ReplicaModifications: Swift.Sendable {
        /// Specifies whether Amazon S3 replicates modifications on replicas.
        /// This member is required.
        public var status: S3ClientTypes.ReplicaModificationsStatus?

        public init(
            status: S3ClientTypes.ReplicaModificationsStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension S3ClientTypes {

    public enum SseKmsEncryptedObjectsStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SseKmsEncryptedObjectsStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// A container for filter information for the selection of S3 objects encrypted with Amazon Web Services KMS.
    public struct SseKmsEncryptedObjects: Swift.Sendable {
        /// Specifies whether Amazon S3 replicates objects created with server-side encryption using an Amazon Web Services KMS key stored in Amazon Web Services Key Management Service.
        /// This member is required.
        public var status: S3ClientTypes.SseKmsEncryptedObjectsStatus?

        public init(
            status: S3ClientTypes.SseKmsEncryptedObjectsStatus? = nil
        )
        {
            self.status = status
        }
    }
}

extension S3ClientTypes {

    /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS).
    public struct SourceSelectionCriteria: Swift.Sendable {
        /// A filter that you can specify for selections for modifications on replicas. Amazon S3 doesn't replicate replica modifications by default. In the latest version of replication configuration (when Filter is specified), you can specify this element and set the status to Enabled to replicate modifications on replicas. If you don't specify the Filter element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, this element is not allowed
        public var replicaModifications: S3ClientTypes.ReplicaModifications?
        /// A container for filter information for the selection of Amazon S3 objects encrypted with Amazon Web Services KMS. If you include SourceSelectionCriteria in the replication configuration, this element is required.
        public var sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects?

        public init(
            replicaModifications: S3ClientTypes.ReplicaModifications? = nil,
            sseKmsEncryptedObjects: S3ClientTypes.SseKmsEncryptedObjects? = nil
        )
        {
            self.replicaModifications = replicaModifications
            self.sseKmsEncryptedObjects = sseKmsEncryptedObjects
        }
    }
}

extension S3ClientTypes {

    public enum ReplicationRuleStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationRuleStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies which Amazon S3 objects to replicate and where to store the replicas.
    public struct ReplicationRule: Swift.Sendable {
        /// Specifies whether Amazon S3 replicates delete markers. If you specify a Filter in your replication configuration, you must also include a DeleteMarkerReplication element. If your Filter includes a Tag element, the DeleteMarkerReplicationStatus must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        public var deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication?
        /// A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        /// This member is required.
        public var destination: S3ClientTypes.Destination?
        /// Optional configuration to replicate existing source bucket objects. This parameter is no longer supported. To replicate existing objects, see [Replicating existing objects with S3 Batch Replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-batch-replication-batch.html) in the Amazon S3 User Guide.
        public var existingObjectReplication: S3ClientTypes.ExistingObjectReplication?
        /// A filter that identifies the subset of objects to which the replication rule applies. A Filter must specify exactly one Prefix, Tag, or an And child element.
        public var filter: S3ClientTypes.ReplicationRuleFilter?
        /// A unique identifier for the rule. The maximum value is 255 characters.
        public var id: Swift.String?
        /// An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        @available(*, deprecated)
        public var `prefix`: Swift.String?
        /// The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the Amazon S3 User Guide.
        public var priority: Swift.Int?
        /// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer managed key stored in Amazon Web Services Key Management Service (SSE-KMS).
        public var sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria?
        /// Specifies whether the rule is enabled.
        /// This member is required.
        public var status: S3ClientTypes.ReplicationRuleStatus?

        public init(
            deleteMarkerReplication: S3ClientTypes.DeleteMarkerReplication? = nil,
            destination: S3ClientTypes.Destination? = nil,
            existingObjectReplication: S3ClientTypes.ExistingObjectReplication? = nil,
            filter: S3ClientTypes.ReplicationRuleFilter? = nil,
            id: Swift.String? = nil,
            `prefix`: Swift.String? = nil,
            priority: Swift.Int? = nil,
            sourceSelectionCriteria: S3ClientTypes.SourceSelectionCriteria? = nil,
            status: S3ClientTypes.ReplicationRuleStatus? = nil
        )
        {
            self.deleteMarkerReplication = deleteMarkerReplication
            self.destination = destination
            self.existingObjectReplication = existingObjectReplication
            self.filter = filter
            self.id = id
            self.`prefix` = `prefix`
            self.priority = priority
            self.sourceSelectionCriteria = sourceSelectionCriteria
            self.status = status
        }
    }
}

extension S3ClientTypes {

    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    public struct ReplicationConfiguration: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the Amazon S3 User Guide.
        /// This member is required.
        public var role: Swift.String?
        /// A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
        /// This member is required.
        public var rules: [S3ClientTypes.ReplicationRule]?

        public init(
            role: Swift.String? = nil,
            rules: [S3ClientTypes.ReplicationRule]? = nil
        )
        {
            self.role = role
            self.rules = rules
        }
    }
}

public struct GetBucketReplicationOutput: Swift.Sendable {
    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    public var replicationConfiguration: S3ClientTypes.ReplicationConfiguration?

    public init(
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil
    )
    {
        self.replicationConfiguration = replicationConfiguration
    }
}

public struct GetBucketRequestPaymentInput: Swift.Sendable {
    /// The name of the bucket for which to get the payment request configuration
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    public enum Payer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bucketowner
        case requester
        case sdkUnknown(Swift.String)

        public static var allCases: [Payer] {
            return [
                .bucketowner,
                .requester
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bucketowner: return "BucketOwner"
            case .requester: return "Requester"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetBucketRequestPaymentOutput: Swift.Sendable {
    /// Specifies who pays for the download and request fees.
    public var payer: S3ClientTypes.Payer?

    public init(
        payer: S3ClientTypes.Payer? = nil
    )
    {
        self.payer = payer
    }
}

public struct GetBucketTaggingInput: Swift.Sendable {
    /// The name of the bucket for which to get the tagging information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct GetBucketTaggingOutput: Swift.Sendable {
    /// Contains the tag set.
    /// This member is required.
    public var tagSet: [S3ClientTypes.Tag]?

    public init(
        tagSet: [S3ClientTypes.Tag]? = nil
    )
    {
        self.tagSet = tagSet
    }
}

public struct GetBucketVersioningInput: Swift.Sendable {
    /// The name of the bucket for which to get the versioning information.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    public enum MFADeleteStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADeleteStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum BucketVersioningStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case suspended
        case sdkUnknown(Swift.String)

        public static var allCases: [BucketVersioningStatus] {
            return [
                .enabled,
                .suspended
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case .suspended: return "Suspended"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetBucketVersioningOutput: Swift.Sendable {
    /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
    public var mfaDelete: S3ClientTypes.MFADeleteStatus?
    /// The versioning state of the bucket.
    public var status: S3ClientTypes.BucketVersioningStatus?

    public init(
        mfaDelete: S3ClientTypes.MFADeleteStatus? = nil,
        status: S3ClientTypes.BucketVersioningStatus? = nil
    )
    {
        self.mfaDelete = mfaDelete
        self.status = status
    }
}

public struct GetBucketWebsiteInput: Swift.Sendable {
    /// The bucket name for which to get the website configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// The error information.
    public struct ErrorDocument: Swift.Sendable {
        /// The object key name to use when a 4XX class error occurs. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var key: Swift.String?

        public init(
            key: Swift.String? = nil
        )
        {
            self.key = key
        }
    }
}

extension S3ClientTypes {

    /// Container for the Suffix element.
    public struct IndexDocument: Swift.Sendable {
        /// A suffix that is appended to a request that is for a directory on the website endpoint. (For example, if the suffix is index.html and you make a request to samplebucket/images/, the data that is returned will be for the object with the key name images/index.html.) The suffix must not be empty and must not include a slash character. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        /// This member is required.
        public var suffix: Swift.String?

        public init(
            suffix: Swift.String? = nil
        )
        {
            self.suffix = suffix
        }
    }
}

extension S3ClientTypes {

    public enum ModelProtocol: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelProtocol] {
            return [
                .http,
                .https
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .http: return "http"
            case .https: return "https"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
    public struct RedirectAllRequestsTo: Swift.Sendable {
        /// Name of the host where requests are redirected.
        /// This member is required.
        public var hostName: Swift.String?
        /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: S3ClientTypes.ModelProtocol?

        public init(
            hostName: Swift.String? = nil,
            `protocol`: S3ClientTypes.ModelProtocol? = nil
        )
        {
            self.hostName = hostName
            self.`protocol` = `protocol`
        }
    }
}

extension S3ClientTypes {

    /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
    public struct Condition: Swift.Sendable {
        /// The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied. Required when parent element Condition is specified and sibling KeyPrefixEquals is not specified. If both are specified, then both must be true for the redirect to be applied.
        public var httpErrorCodeReturnedEquals: Swift.String?
        /// The object key name prefix when the redirect is applied. For example, to redirect requests for ExamplePage.html, the key prefix will be ExamplePage.html. To redirect request for all pages with the prefix docs/, the key prefix will be /docs, which identifies all objects in the docs/ folder. Required when the parent element Condition is specified and sibling HttpErrorCodeReturnedEquals is not specified. If both conditions are specified, both must be true for the redirect to be applied. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var keyPrefixEquals: Swift.String?

        public init(
            httpErrorCodeReturnedEquals: Swift.String? = nil,
            keyPrefixEquals: Swift.String? = nil
        )
        {
            self.httpErrorCodeReturnedEquals = httpErrorCodeReturnedEquals
            self.keyPrefixEquals = keyPrefixEquals
        }
    }
}

extension S3ClientTypes {

    /// Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
    public struct Redirect: Swift.Sendable {
        /// The host name to use in the redirect request.
        public var hostName: Swift.String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public var httpRedirectCode: Swift.String?
        /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: S3ClientTypes.ModelProtocol?
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyPrefixWith: Swift.String?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyWith: Swift.String?

        public init(
            hostName: Swift.String? = nil,
            httpRedirectCode: Swift.String? = nil,
            `protocol`: S3ClientTypes.ModelProtocol? = nil,
            replaceKeyPrefixWith: Swift.String? = nil,
            replaceKeyWith: Swift.String? = nil
        )
        {
            self.hostName = hostName
            self.httpRedirectCode = httpRedirectCode
            self.`protocol` = `protocol`
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.replaceKeyWith = replaceKeyWith
        }
    }
}

extension S3ClientTypes {

    /// Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the Amazon S3 User Guide.
    public struct RoutingRule: Swift.Sendable {
        /// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the /docs folder, redirect to the /documents folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        public var condition: S3ClientTypes.Condition?
        /// Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        /// This member is required.
        public var redirect: S3ClientTypes.Redirect?

        public init(
            condition: S3ClientTypes.Condition? = nil,
            redirect: S3ClientTypes.Redirect? = nil
        )
        {
            self.condition = condition
            self.redirect = redirect
        }
    }
}

public struct GetBucketWebsiteOutput: Swift.Sendable {
    /// The object key name of the website error document to use for 4XX class errors.
    public var errorDocument: S3ClientTypes.ErrorDocument?
    /// The name of the index document for the website (for example index.html).
    public var indexDocument: S3ClientTypes.IndexDocument?
    /// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
    public var redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
    /// Rules that define when a redirect is applied and the redirect behavior.
    public var routingRules: [S3ClientTypes.RoutingRule]?

    public init(
        errorDocument: S3ClientTypes.ErrorDocument? = nil,
        indexDocument: S3ClientTypes.IndexDocument? = nil,
        redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
        routingRules: [S3ClientTypes.RoutingRule]? = nil
    )
    {
        self.errorDocument = errorDocument
        self.indexDocument = indexDocument
        self.redirectAllRequestsTo = redirectAllRequestsTo
        self.routingRules = routingRules
    }
}

/// Object is archived and inaccessible until restored. If the object you are retrieving is stored in the S3 Glacier Flexible Retrieval storage class, the S3 Glacier Deep Archive storage class, the S3 Intelligent-Tiering Archive Access tier, or the S3 Intelligent-Tiering Deep Archive Access tier, before you can retrieve the object you must first restore a copy using [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html). Otherwise, this operation returns an InvalidObjectState error. For information about restoring archived objects, see [Restoring Archived Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html) in the Amazon S3 User Guide.
public struct InvalidObjectState: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil
        public internal(set) var storageClass: S3ClientTypes.StorageClass? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidObjectState" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init(
        accessTier: S3ClientTypes.IntelligentTieringAccessTier? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil
    )
    {
        self.properties.accessTier = accessTier
        self.properties.storageClass = storageClass
    }
}

/// The specified key does not exist.
public struct NoSuchKey: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NoSuchKey" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    public enum ChecksumMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ChecksumMode] {
            return [
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetObjectInput: Swift.Sendable {
    /// The bucket name containing the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Object Lambda access points - When you use this action with an Object Lambda access point, you must direct requests to the Object Lambda access point hostname. The Object Lambda access point hostname takes the form AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// To retrieve the checksum, this mode must be enabled. General purpose buckets - In addition, if you enable checksum mode and the object is uploaded with a [checksum](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Checksum.html) and encrypted with an Key Management Service (KMS) key, you must have permission to use the kms:Decrypt action to retrieve the checksum.
    public var checksumMode: S3ClientTypes.ChecksumMode?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Return the object only if its entity tag (ETag) is the same as the one specified in this header; otherwise, return a 412 Precondition Failed error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows: If-Match condition evaluates to true, and; If-Unmodified-Since condition evaluates to false; then, S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifMatch: Swift.String?
    /// Return the object only if it has been modified since the specified time; otherwise, return a 304 Not Modified error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows: If-None-Match condition evaluates to false, and; If-Modified-Since condition evaluates to true; then, S3 returns 304 Not Modified status code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifModifiedSince: Foundation.Date?
    /// Return the object only if its entity tag (ETag) is different from the one specified in this header; otherwise, return a 304 Not Modified error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows: If-None-Match condition evaluates to false, and; If-Modified-Since condition evaluates to true; then, S3 returns 304 Not Modified HTTP status code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifNoneMatch: Swift.String?
    /// Return the object only if it has not been modified since the specified time; otherwise, return a 412 Precondition Failed error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows: If-Match condition evaluates to true, and; If-Unmodified-Since condition evaluates to false; then, S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifUnmodifiedSince: Foundation.Date?
    /// Key of the object to get.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.
    public var partNumber: Swift.Int?
    /// Downloads the specified byte range of an object. For more information about the HTTP Range header, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-range](https://www.rfc-editor.org/rfc/rfc9110.html#name-range). Amazon S3 doesn't support retrieving multiple ranges of data per GET request.
    public var range: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Sets the Cache-Control header of the response.
    public var responseCacheControl: Swift.String?
    /// Sets the Content-Disposition header of the response.
    public var responseContentDisposition: Swift.String?
    /// Sets the Content-Encoding header of the response.
    public var responseContentEncoding: Swift.String?
    /// Sets the Content-Language header of the response.
    public var responseContentLanguage: Swift.String?
    /// Sets the Content-Type header of the response.
    public var responseContentType: Swift.String?
    /// Sets the Expires header of the response.
    public var responseExpires: Foundation.Date?
    /// Specifies the algorithm to use when decrypting the object (for example, AES256). If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key that you originally provided for Amazon S3 to encrypt the data before storing it. This value is used to decrypt the object when recovering it and must match the one used when storing the data. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the customer-provided encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:
    ///
    /// * x-amz-server-side-encryption-customer-algorithm
    ///
    /// * x-amz-server-side-encryption-customer-key
    ///
    /// * x-amz-server-side-encryption-customer-key-MD5
    ///
    ///
    /// For more information about SSE-C, see [Server-Side Encryption (Using Customer-Provided Encryption Keys)](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Version ID used to reference a specific version of the object. By default, the GetObject operation returns the current version of an object. To return a different version, use the versionId subresource.
    ///
    /// * If you include a versionId in your request header, you must have the s3:GetObjectVersion permission to access a specific version of an object. The s3:GetObject permission is not required in this scenario.
    ///
    /// * If you request the current version of an object without a specific versionId in the request header, only the s3:GetObject permission is required. The s3:GetObjectVersion permission is not required in this scenario.
    ///
    /// * Directory buckets - S3 Versioning isn't enabled and supported for directory buckets. For this API operation, only the null value of the version ID is supported by directory buckets. You can only specify null to the versionId query parameter in the request.
    ///
    ///
    /// For more information about versioning, see [PutBucketVersioning](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html).
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumMode: S3ClientTypes.ChecksumMode? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: Foundation.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: Foundation.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        responseCacheControl: Swift.String? = nil,
        responseContentDisposition: Swift.String? = nil,
        responseContentEncoding: Swift.String? = nil,
        responseContentLanguage: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        responseExpires: Foundation.Date? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumMode = checksumMode
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.responseCacheControl = responseCacheControl
        self.responseContentDisposition = responseContentDisposition
        self.responseContentEncoding = responseContentEncoding
        self.responseContentLanguage = responseContentLanguage
        self.responseContentType = responseContentType
        self.responseExpires = responseExpires
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension GetObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectInput(bucket: \(Swift.String(describing: bucket)), checksumMode: \(Swift.String(describing: checksumMode)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), responseCacheControl: \(Swift.String(describing: responseCacheControl)), responseContentDisposition: \(Swift.String(describing: responseContentDisposition)), responseContentEncoding: \(Swift.String(describing: responseContentEncoding)), responseContentLanguage: \(Swift.String(describing: responseContentLanguage)), responseContentType: \(Swift.String(describing: responseContentType)), responseExpires: \(Swift.String(describing: responseExpires)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    public enum ReplicationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case complete
        case completed
        case failed
        case pending
        case replica
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationStatus] {
            return [
                .complete,
                .completed,
                .failed,
                .pending,
                .replica
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .replica: return "REPLICA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetObjectOutput: Swift.Sendable {
    /// Indicates that a range of bytes was specified in the request.
    public var acceptRanges: Swift.String?
    /// Object data.
    public var body: Smithy.ByteStream?
    /// Indicates whether the object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. For more information, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Indicates what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes.
    public var contentLength: Swift.Int?
    /// The portion of the object returned in the response.
    public var contentRange: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Indicates whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response.
    ///
    /// * If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes x-amz-delete-marker: true in the response.
    ///
    /// * If the specified version in the request is a delete marker, the response returns a 405 Method Not Allowed error and the Last-Modified: timestamp response header.
    public var deleteMarker: Swift.Bool?
    /// An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// If the object expiration is configured (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Date and time when the object was last modified. General purpose buckets - When you specify a versionId of the object in your request, if the specified version in the request is a delete marker, the response returns a 405 Method Not Allowed error and the Last-Modified: timestamp response header.
    public var lastModified: Foundation.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// This is set to the number of metadata entries not returned in the headers that are prefixed with x-amz-meta-. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers. This functionality is not supported for directory buckets.
    public var missingMeta: Swift.Int?
    /// Indicates whether this object has an active legal hold. This field is only returned if you have permission to view an object's legal hold status. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that's currently in place for this object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when this object's Object Lock will expire. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// The count of parts this object has. This value is only returned if you specify partNumber in your request and the object was uploaded as a multipart upload.
    public var partsCount: Swift.Int?
    /// Amazon S3 can return this if your request involves a bucket that is either a source or destination in a replication rule. This functionality is not supported for directory buckets.
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Provides information about object restoration action and expiration time of the restored object copy. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when you store this object in Amazon S3.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The number of tags, if any, on the object, when you have the relevant permission to read object tags. You can use [GetObjectTagging](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html) to retrieve the tag set associated with an object. This functionality is not supported for directory buckets.
    public var tagCount: Swift.Int?
    /// Version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        body: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8)),
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: Swift.String? = nil,
        lastModified: Foundation.Date? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int? = nil,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension GetObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectOutput(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct GetObjectAclInput: Swift.Sendable {
    /// The bucket name that contains the object for which to get the ACL information. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key of the object for which to get the ACL information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

public struct GetObjectAclOutput: Swift.Sendable {
    /// A list of grants.
    public var grants: [S3ClientTypes.Grant]?
    /// Container for the bucket owner's display name and ID.
    public var owner: S3ClientTypes.Owner?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        grants: [S3ClientTypes.Grant]? = nil,
        owner: S3ClientTypes.Owner? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.grants = grants
        self.owner = owner
        self.requestCharged = requestCharged
    }
}

extension S3ClientTypes {

    public enum ObjectAttributes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case checksum
        case etag
        case objectParts
        case objectSize
        case storageClass
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectAttributes] {
            return [
                .checksum,
                .etag,
                .objectParts,
                .objectSize,
                .storageClass
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .checksum: return "Checksum"
            case .etag: return "ETag"
            case .objectParts: return "ObjectParts"
            case .objectSize: return "ObjectSize"
            case .storageClass: return "StorageClass"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetObjectAttributesInput: Swift.Sendable {
    /// The name of the bucket that contains the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Sets the maximum number of parts to return.
    public var maxParts: Swift.Int?
    /// Specifies the fields at the root level that you want returned in the response. Fields that you do not specify are not returned.
    /// This member is required.
    public var objectAttributes: [S3ClientTypes.ObjectAttributes]?
    /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
    public var partNumberMarker: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// The version ID used to reference a specific version of the object. S3 Versioning isn't enabled and supported for directory buckets. For this API operation, only the null value of the version ID is supported by directory buckets. You can only specify null to the versionId query parameter in the request.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        objectAttributes: [S3ClientTypes.ObjectAttributes]? = nil,
        partNumberMarker: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.maxParts = maxParts
        self.objectAttributes = objectAttributes
        self.partNumberMarker = partNumberMarker
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension GetObjectAttributesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetObjectAttributesInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), objectAttributes: \(Swift.String(describing: objectAttributes)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Contains all the possible checksum or digest values for an object.
    public struct Checksum: Swift.Sendable {
        /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
        }
    }
}

extension S3ClientTypes {

    /// A container for elements related to an individual part.
    public struct ObjectPart: Swift.Sendable {
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// The part number identifying the part. This value is a positive integer between 1 and 10,000.
        public var partNumber: Swift.Int?
        /// The size of the uploaded part in bytes.
        public var size: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            partNumber: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.partNumber = partNumber
            self.size = size
        }
    }
}

extension S3ClientTypes {

    /// A collection of parts associated with a multipart upload.
    public struct GetObjectAttributesParts: Swift.Sendable {
        /// Indicates whether the returned list of parts is truncated. A value of true indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.
        public var isTruncated: Swift.Bool?
        /// The maximum number of parts allowed in the response.
        public var maxParts: Swift.Int?
        /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the PartNumberMarker request parameter in a subsequent request.
        public var nextPartNumberMarker: Swift.String?
        /// The marker for the current part.
        public var partNumberMarker: Swift.String?
        /// A container for elements related to a particular part. A response can contain zero or more Parts elements.
        ///
        /// * General purpose buckets - For GetObjectAttributes, if a additional checksum (including x-amz-checksum-crc32, x-amz-checksum-crc32c, x-amz-checksum-sha1, or x-amz-checksum-sha256) isn't applied to the object specified in the request, the response doesn't return Part.
        ///
        /// * Directory buckets - For GetObjectAttributes, no matter whether a additional checksum is applied to the object specified in the request, the response returns Part.
        public var parts: [S3ClientTypes.ObjectPart]?
        /// The total number of parts.
        public var totalPartsCount: Swift.Int?

        public init(
            isTruncated: Swift.Bool? = nil,
            maxParts: Swift.Int? = nil,
            nextPartNumberMarker: Swift.String? = nil,
            partNumberMarker: Swift.String? = nil,
            parts: [S3ClientTypes.ObjectPart]? = nil,
            totalPartsCount: Swift.Int? = nil
        )
        {
            self.isTruncated = isTruncated
            self.maxParts = maxParts
            self.nextPartNumberMarker = nextPartNumberMarker
            self.partNumberMarker = partNumberMarker
            self.parts = parts
            self.totalPartsCount = totalPartsCount
        }
    }
}

public struct GetObjectAttributesOutput: Swift.Sendable {
    /// The checksum or digest of the object.
    public var checksum: S3ClientTypes.Checksum?
    /// Specifies whether the object retrieved was (true) or was not (false) a delete marker. If false, this response header does not appear in the response. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// The creation date of the object.
    public var lastModified: Foundation.Date?
    /// A collection of parts associated with a multipart upload.
    public var objectParts: S3ClientTypes.GetObjectAttributesParts?
    /// The size of the object in bytes.
    public var objectSize: Swift.Int?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Provides the storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html). Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        checksum: S3ClientTypes.Checksum? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        lastModified: Foundation.Date? = nil,
        objectParts: S3ClientTypes.GetObjectAttributesParts? = nil,
        objectSize: Swift.Int? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.checksum = checksum
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.lastModified = lastModified
        self.objectParts = objectParts
        self.objectSize = objectSize
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.versionId = versionId
    }
}

public struct GetObjectLegalHoldInput: Swift.Sendable {
    /// The bucket name containing the object whose legal hold status you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object whose legal hold status you want to retrieve.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID of the object whose legal hold status you want to retrieve.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension S3ClientTypes {

    /// A legal hold configuration for an object.
    public struct ObjectLockLegalHold: Swift.Sendable {
        /// Indicates whether the specified object has a legal hold in place.
        public var status: S3ClientTypes.ObjectLockLegalHoldStatus?

        public init(
            status: S3ClientTypes.ObjectLockLegalHoldStatus? = nil
        )
        {
            self.status = status
        }
    }
}

public struct GetObjectLegalHoldOutput: Swift.Sendable {
    /// The current legal hold status for the specified object.
    public var legalHold: S3ClientTypes.ObjectLockLegalHold?

    public init(
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil
    )
    {
        self.legalHold = legalHold
    }
}

public struct GetObjectLockConfigurationInput: Swift.Sendable {
    /// The bucket whose Object Lock configuration you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    public enum ObjectLockEnabled: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockEnabled] {
            return [
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum ObjectLockRetentionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case compliance
        case governance
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectLockRetentionMode] {
            return [
                .compliance,
                .governance
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .compliance: return "COMPLIANCE"
            case .governance: return "GOVERNANCE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// The container element for optionally specifying the default Object Lock retention settings for new objects placed in the specified bucket.
    ///
    /// * The DefaultRetention settings require both a mode and a period.
    ///
    /// * The DefaultRetention period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
    public struct DefaultRetention: Swift.Sendable {
        /// The number of days that you want to specify for the default retention period. Must be used with Mode.
        public var days: Swift.Int?
        /// The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. Must be used with either Days or Years.
        public var mode: S3ClientTypes.ObjectLockRetentionMode?
        /// The number of years that you want to specify for the default retention period. Must be used with Mode.
        public var years: Swift.Int?

        public init(
            days: Swift.Int? = nil,
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            years: Swift.Int? = nil
        )
        {
            self.days = days
            self.mode = mode
            self.years = years
        }
    }
}

extension S3ClientTypes {

    /// The container element for an Object Lock rule.
    public struct ObjectLockRule: Swift.Sendable {
        /// The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. Bucket settings require both a mode and a period. The period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
        public var defaultRetention: S3ClientTypes.DefaultRetention?

        public init(
            defaultRetention: S3ClientTypes.DefaultRetention? = nil
        )
        {
            self.defaultRetention = defaultRetention
        }
    }
}

extension S3ClientTypes {

    /// The container element for Object Lock configuration parameters.
    public struct ObjectLockConfiguration: Swift.Sendable {
        /// Indicates whether this bucket has an Object Lock configuration enabled. Enable ObjectLockEnabled when you apply ObjectLockConfiguration to a bucket.
        public var objectLockEnabled: S3ClientTypes.ObjectLockEnabled?
        /// Specifies the Object Lock rule for the specified object. Enable the this rule when you apply ObjectLockConfiguration to a bucket. Bucket settings require both a mode and a period. The period can be either Days or Years but you must select one. You cannot specify Days and Years at the same time.
        public var rule: S3ClientTypes.ObjectLockRule?

        public init(
            objectLockEnabled: S3ClientTypes.ObjectLockEnabled? = nil,
            rule: S3ClientTypes.ObjectLockRule? = nil
        )
        {
            self.objectLockEnabled = objectLockEnabled
            self.rule = rule
        }
    }
}

public struct GetObjectLockConfigurationOutput: Swift.Sendable {
    /// The specified bucket's Object Lock configuration.
    public var objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?

    public init(
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil
    )
    {
        self.objectLockConfiguration = objectLockConfiguration
    }
}

public struct GetObjectRetentionInput: Swift.Sendable {
    /// The bucket name containing the object whose retention settings you want to retrieve. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object whose retention settings you want to retrieve.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID for the object whose retention settings you want to retrieve.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

extension S3ClientTypes {

    /// A Retention configuration for an object.
    public struct ObjectLockRetention: Swift.Sendable {
        /// Indicates the Retention mode for the specified object.
        public var mode: S3ClientTypes.ObjectLockRetentionMode?
        /// The date on which this Object Lock Retention will expire.
        public var retainUntilDate: Foundation.Date?

        public init(
            mode: S3ClientTypes.ObjectLockRetentionMode? = nil,
            retainUntilDate: Foundation.Date? = nil
        )
        {
            self.mode = mode
            self.retainUntilDate = retainUntilDate
        }
    }
}

public struct GetObjectRetentionOutput: Swift.Sendable {
    /// The container element for an object's retention settings.
    public var retention: S3ClientTypes.ObjectLockRetention?

    public init(
        retention: S3ClientTypes.ObjectLockRetention? = nil
    )
    {
        self.retention = retention
    }
}

public struct GetObjectTaggingInput: Swift.Sendable {
    /// The bucket name containing the object for which to get the tagging information. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which to get the tagging information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The versionId of the object for which to get the tagging information.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

public struct GetObjectTaggingOutput: Swift.Sendable {
    /// Contains the tag set.
    /// This member is required.
    public var tagSet: [S3ClientTypes.Tag]?
    /// The versionId of the object for which you got the tagging information.
    public var versionId: Swift.String?

    public init(
        tagSet: [S3ClientTypes.Tag]? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.tagSet = tagSet
        self.versionId = versionId
    }
}

public struct GetObjectTorrentInput: Swift.Sendable {
    /// The name of the bucket containing the object for which to get the torrent files.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The object key for which to get the information.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
    }
}

public struct GetObjectTorrentOutput: Swift.Sendable {
    /// A Bencoded dictionary as defined by the BitTorrent specification
    public var body: Smithy.ByteStream?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        body: Smithy.ByteStream? = Smithy.ByteStream.data(Foundation.Data("".utf8)),
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.body = body
        self.requestCharged = requestCharged
    }
}

public struct GetPublicAccessBlockInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

extension S3ClientTypes {

    /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the Amazon S3 User Guide.
    public struct PublicAccessBlockConfiguration: Swift.Sendable {
        /// Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to TRUE causes the following behavior:
        ///
        /// * PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
        ///
        /// * PUT Object calls fail if the request includes a public ACL.
        ///
        /// * PUT Bucket calls fail if the request includes a public ACL.
        ///
        ///
        /// Enabling this setting doesn't affect existing policies or ACLs.
        public var blockPublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        public var blockPublicPolicy: Swift.Bool?
        /// Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        public var ignorePublicAcls: Swift.Bool?
        /// Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only Amazon Web Services service principals and authorized users within this account if the bucket has a public policy. Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        public var restrictPublicBuckets: Swift.Bool?

        public init(
            blockPublicAcls: Swift.Bool? = nil,
            blockPublicPolicy: Swift.Bool? = nil,
            ignorePublicAcls: Swift.Bool? = nil,
            restrictPublicBuckets: Swift.Bool? = nil
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }
}

public struct GetPublicAccessBlockOutput: Swift.Sendable {
    /// The PublicAccessBlock configuration currently in effect for this Amazon S3 bucket.
    public var publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init(
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

/// The specified content does not exist.
public struct NotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "NotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

public struct HeadBucketInput: Swift.Sendable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Object Lambda access points - When you use this API operation with an Object Lambda access point, provide the alias of the Object Lambda access point in place of the bucket name. If the Object Lambda access point alias in a request is not valid, the error code InvalidAccessPointAliasError is returned. For more information about InvalidAccessPointAliasError, see [List of Error Codes](https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList). Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct HeadBucketOutput: Swift.Sendable {
    /// Indicates whether the bucket name used in the request is an access point alias. For directory buckets, the value of this field is false.
    public var accessPointAlias: Swift.Bool?
    /// The name of the location where the bucket will be created. For directory buckets, the AZ ID of the Availability Zone where the bucket is created. An example AZ ID value is usw2-az1. This functionality is only supported by directory buckets.
    public var bucketLocationName: Swift.String?
    /// The type of location where the bucket is created. This functionality is only supported by directory buckets.
    public var bucketLocationType: S3ClientTypes.LocationType?
    /// The Region that the bucket is located.
    public var bucketRegion: Swift.String?

    public init(
        accessPointAlias: Swift.Bool? = nil,
        bucketLocationName: Swift.String? = nil,
        bucketLocationType: S3ClientTypes.LocationType? = nil,
        bucketRegion: Swift.String? = nil
    )
    {
        self.accessPointAlias = accessPointAlias
        self.bucketLocationName = bucketLocationName
        self.bucketLocationType = bucketLocationType
        self.bucketRegion = bucketRegion
    }
}

public struct HeadObjectInput: Swift.Sendable {
    /// The name of the bucket that contains the object. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// To retrieve the checksum, this parameter must be enabled. General purpose buckets - If you enable checksum mode and the object is uploaded with a [checksum](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Checksum.html) and encrypted with an Key Management Service (KMS) key, you must have permission to use the kms:Decrypt action to retrieve the checksum. Directory buckets - If you enable ChecksumMode and the object is encrypted with Amazon Web Services Key Management Service (Amazon Web Services KMS), you must also have the kms:GenerateDataKey and kms:Decrypt permissions in IAM identity-based policies and KMS key policies for the KMS key to retrieve the checksum of the object.
    public var checksumMode: S3ClientTypes.ChecksumMode?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Return the object only if its entity tag (ETag) is the same as the one specified; otherwise, return a 412 (precondition failed) error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows:
    ///
    /// * If-Match condition evaluates to true, and;
    ///
    /// * If-Unmodified-Since condition evaluates to false;
    ///
    ///
    /// Then Amazon S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifMatch: Swift.String?
    /// Return the object only if it has been modified since the specified time; otherwise, return a 304 (not modified) error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows:
    ///
    /// * If-None-Match condition evaluates to false, and;
    ///
    /// * If-Modified-Since condition evaluates to true;
    ///
    ///
    /// Then Amazon S3 returns the 304 Not Modified response code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifModifiedSince: Foundation.Date?
    /// Return the object only if its entity tag (ETag) is different from the one specified; otherwise, return a 304 (not modified) error. If both of the If-None-Match and If-Modified-Since headers are present in the request as follows:
    ///
    /// * If-None-Match condition evaluates to false, and;
    ///
    /// * If-Modified-Since condition evaluates to true;
    ///
    ///
    /// Then Amazon S3 returns the 304 Not Modified response code. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifNoneMatch: Swift.String?
    /// Return the object only if it has not been modified since the specified time; otherwise, return a 412 (precondition failed) error. If both of the If-Match and If-Unmodified-Since headers are present in the request as follows:
    ///
    /// * If-Match condition evaluates to true, and;
    ///
    /// * If-Unmodified-Since condition evaluates to false;
    ///
    ///
    /// Then Amazon S3 returns 200 OK and the data requested. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232).
    public var ifUnmodifiedSince: Foundation.Date?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful querying about the size of the part and the number of parts in this object.
    public var partNumber: Swift.Int?
    /// HeadObject returns only the metadata for an object. If the Range is satisfiable, only the ContentLength is affected in the response. If the Range is not satisfiable, S3 returns a 416 - Requested Range Not Satisfiable error.
    public var range: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Sets the Cache-Control header of the response.
    public var responseCacheControl: Swift.String?
    /// Sets the Content-Disposition header of the response.
    public var responseContentDisposition: Swift.String?
    /// Sets the Content-Encoding header of the response.
    public var responseContentEncoding: Swift.String?
    /// Sets the Content-Language header of the response.
    public var responseContentLanguage: Swift.String?
    /// Sets the Content-Type header of the response.
    public var responseContentType: Swift.String?
    /// Sets the Expires header of the response.
    public var responseExpires: Foundation.Date?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Version ID used to reference a specific version of the object. For directory buckets in this API operation, only the null value of the version ID is supported.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumMode: S3ClientTypes.ChecksumMode? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ifMatch: Swift.String? = nil,
        ifModifiedSince: Foundation.Date? = nil,
        ifNoneMatch: Swift.String? = nil,
        ifUnmodifiedSince: Foundation.Date? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        range: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        responseCacheControl: Swift.String? = nil,
        responseContentDisposition: Swift.String? = nil,
        responseContentEncoding: Swift.String? = nil,
        responseContentLanguage: Swift.String? = nil,
        responseContentType: Swift.String? = nil,
        responseExpires: Foundation.Date? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumMode = checksumMode
        self.expectedBucketOwner = expectedBucketOwner
        self.ifMatch = ifMatch
        self.ifModifiedSince = ifModifiedSince
        self.ifNoneMatch = ifNoneMatch
        self.ifUnmodifiedSince = ifUnmodifiedSince
        self.key = key
        self.partNumber = partNumber
        self.range = range
        self.requestPayer = requestPayer
        self.responseCacheControl = responseCacheControl
        self.responseContentDisposition = responseContentDisposition
        self.responseContentEncoding = responseContentEncoding
        self.responseContentLanguage = responseContentLanguage
        self.responseContentType = responseContentType
        self.responseExpires = responseExpires
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.versionId = versionId
    }
}

extension HeadObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectInput(bucket: \(Swift.String(describing: bucket)), checksumMode: \(Swift.String(describing: checksumMode)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), ifMatch: \(Swift.String(describing: ifMatch)), ifModifiedSince: \(Swift.String(describing: ifModifiedSince)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), ifUnmodifiedSince: \(Swift.String(describing: ifUnmodifiedSince)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), range: \(Swift.String(describing: range)), requestPayer: \(Swift.String(describing: requestPayer)), responseCacheControl: \(Swift.String(describing: responseCacheControl)), responseContentDisposition: \(Swift.String(describing: responseContentDisposition)), responseContentEncoding: \(Swift.String(describing: responseContentEncoding)), responseContentLanguage: \(Swift.String(describing: responseContentLanguage)), responseContentType: \(Swift.String(describing: responseContentType)), responseExpires: \(Swift.String(describing: responseExpires)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    public enum ArchiveStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archiveAccess
        case deepArchiveAccess
        case sdkUnknown(Swift.String)

        public static var allCases: [ArchiveStatus] {
            return [
                .archiveAccess,
                .deepArchiveAccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archiveAccess: return "ARCHIVE_ACCESS"
            case .deepArchiveAccess: return "DEEP_ARCHIVE_ACCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct HeadObjectOutput: Swift.Sendable {
    /// Indicates that a range of bytes was specified.
    public var acceptRanges: Swift.String?
    /// The archive state of the head object. This functionality is not supported for directory buckets.
    public var archiveStatus: S3ClientTypes.ArchiveStatus?
    /// Indicates whether the object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Indicates what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes.
    public var contentLength: Swift.Int?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Specifies whether the object retrieved was (true) or was not (false) a Delete Marker. If false, this response header does not appear in the response. This functionality is not supported for directory buckets.
    public var deleteMarker: Swift.Bool?
    /// An entity tag (ETag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// If the object expiration is configured (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)), the response includes this header. It includes the expiry-date and rule-id key-value pairs providing object expiration information. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// Date and time when the object was last modified.
    public var lastModified: Foundation.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// This is set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers. This functionality is not supported for directory buckets.
    public var missingMeta: Swift.Int?
    /// Specifies whether a legal hold is in effect for this object. This header is only returned if the requester has the s3:GetObjectLegalHold permission. This header is not returned if the specified version of this object has never had a legal hold applied. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode, if any, that's in effect for this object. This header is only returned if the requester has the s3:GetObjectRetention permission. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when the Object Lock retention period expires. This header is only returned if the requester has the s3:GetObjectRetention permission. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// The count of parts this object has. This value is only returned if you specify partNumber in your request and the object was uploaded as a multipart upload.
    public var partsCount: Swift.Int?
    /// Amazon S3 can return this header if your request involves a bucket that is either a source or a destination in a replication rule. In replication, you have a source bucket on which you configure replication and destination bucket or buckets where Amazon S3 stores object replicas. When you request an object (GetObject) or object metadata (HeadObject) from these buckets, Amazon S3 will return the x-amz-replication-status header in the response as follows:
    ///
    /// * If requesting an object from the source bucket, Amazon S3 will return the x-amz-replication-status header if the object in your request is eligible for replication. For example, suppose that in your replication configuration, you specify object prefix TaxDocs requesting Amazon S3 to replicate objects with key prefix TaxDocs. Any objects you upload with this key name prefix, for example TaxDocs/document1.pdf, are eligible for replication. For any object request with this key name prefix, Amazon S3 will return the x-amz-replication-status header with value PENDING, COMPLETED or FAILED indicating object replication status.
    ///
    /// * If requesting an object from a destination bucket, Amazon S3 will return the x-amz-replication-status header with value REPLICA if the object in your request is a replica that Amazon S3 created and there is no replica modification replication in progress.
    ///
    /// * When replicating objects to multiple destination buckets, the x-amz-replication-status header acts differently. The header of the source object will only return a value of COMPLETED when replication is successful to all destinations. The header will remain at value PENDING until replication has completed for all destinations. If one or more destinations fails replication the header will return FAILED.
    ///
    ///
    /// For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html). This functionality is not supported for directory buckets.
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// If the object is an archived object (an object whose storage class is GLACIER), the response includes this header if either the archive restoration is in progress (see [RestoreObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html) or an archive copy is already restored. If an archive copy is already restored, the header value indicates when Amazon S3 is scheduled to delete the object copy. For example: x-amz-restore: ongoing-request="false", expiry-date="Fri, 21 Dec 2012 00:00:00 GMT" If the object restoration is in progress, the header returns the value ongoing-request="true". For more information about archiving objects, see [Transitioning Objects: General Considerations](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-transition-general-considerations). This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html). Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// Version ID of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        archiveStatus: S3ClientTypes.ArchiveStatus? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: Swift.String? = nil,
        lastModified: Foundation.Date? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        versionId: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.archiveStatus = archiveStatus
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.versionId = versionId
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension HeadObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HeadObjectOutput(acceptRanges: \(Swift.String(describing: acceptRanges)), archiveStatus: \(Swift.String(describing: archiveStatus)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), restore: \(Swift.String(describing: restore)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), storageClass: \(Swift.String(describing: storageClass)), versionId: \(Swift.String(describing: versionId)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct ListBucketAnalyticsConfigurationsInput: Swift.Sendable {
    /// The name of the bucket from which analytics configurations are retrieved.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct ListBucketAnalyticsConfigurationsOutput: Swift.Sendable {
    /// The list of analytics configurations for a bucket.
    public var analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]?
    /// The marker that is used as a starting point for this analytics configuration list response. This value is present if it was sent in the request.
    public var continuationToken: Swift.String?
    /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// NextContinuationToken is sent when isTruncated is true, which indicates that there are more analytics configurations to list. The next request must include this NextContinuationToken. The token is obfuscated and is not a usable value.
    public var nextContinuationToken: Swift.String?

    public init(
        analyticsConfigurationList: [S3ClientTypes.AnalyticsConfiguration]? = nil,
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.analyticsConfigurationList = analyticsConfigurationList
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

public struct ListBucketIntelligentTieringConfigurationsInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
    }
}

public struct ListBucketIntelligentTieringConfigurationsOutput: Swift.Sendable {
    /// The ContinuationToken that represents a placeholder from where this request should begin.
    public var continuationToken: Swift.String?
    /// The list of S3 Intelligent-Tiering configurations for a bucket.
    public var intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]?
    /// Indicates whether the returned list of analytics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        intelligentTieringConfigurationList: [S3ClientTypes.IntelligentTieringConfiguration]? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.intelligentTieringConfigurationList = intelligentTieringConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

public struct ListBucketInventoryConfigurationsInput: Swift.Sendable {
    /// The name of the bucket containing the inventory configurations to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct ListBucketInventoryConfigurationsOutput: Swift.Sendable {
    /// If sent in the request, the marker that is used as a starting point for this inventory configuration list response.
    public var continuationToken: Swift.String?
    /// The list of inventory configurations for a bucket.
    public var inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]?
    /// Tells whether the returned list of inventory configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken is provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The marker used to continue this inventory configuration listing. Use the NextContinuationToken from this response to continue the listing in a subsequent request. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        inventoryConfigurationList: [S3ClientTypes.InventoryConfiguration]? = nil,
        isTruncated: Swift.Bool? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.inventoryConfigurationList = inventoryConfigurationList
        self.isTruncated = isTruncated
        self.nextContinuationToken = nextContinuationToken
    }
}

public struct ListBucketMetricsConfigurationsInput: Swift.Sendable {
    /// The name of the bucket containing the metrics configurations to retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var continuationToken: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct ListBucketMetricsConfigurationsOutput: Swift.Sendable {
    /// The marker that is used as a starting point for this metrics configuration list response. This value is present if it was sent in the request.
    public var continuationToken: Swift.String?
    /// Indicates whether the returned list of metrics configurations is complete. A value of true indicates that the list is not complete and the NextContinuationToken will be provided for a subsequent request.
    public var isTruncated: Swift.Bool?
    /// The list of metrics configurations for a bucket.
    public var metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
    /// The marker used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.
    public var nextContinuationToken: Swift.String?

    public init(
        continuationToken: Swift.String? = nil,
        isTruncated: Swift.Bool? = nil,
        metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]? = nil,
        nextContinuationToken: Swift.String? = nil
    )
    {
        self.continuationToken = continuationToken
        self.isTruncated = isTruncated
        self.metricsConfigurationList = metricsConfigurationList
        self.nextContinuationToken = nextContinuationToken
    }
}

public struct ListBucketsInput: Swift.Sendable {
    /// Limits the response to buckets that are located in the specified Amazon Web Services Region. The Amazon Web Services Region must be expressed according to the Amazon Web Services Region code, such as us-west-2 for the US West (Oregon) Region. For a list of the valid values for all of the Amazon Web Services Regions, see [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). Requests made to a Regional endpoint that is different from the bucket-region parameter are not supported. For example, if you want to limit the response to your buckets in Region us-west-2, the request must be made to an endpoint in Region us-west-2.
    public var bucketRegion: Swift.String?
    /// ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results. Length Constraints: Minimum length of 0. Maximum length of 1024. Required: No.
    public var continuationToken: Swift.String?
    /// Maximum number of buckets to be returned in response. When the number is more than the count of buckets that are owned by an Amazon Web Services account, return all the buckets in response.
    public var maxBuckets: Swift.Int?
    /// Limits the response to bucket names that begin with the specified bucket name prefix.
    public var `prefix`: Swift.String?

    public init(
        bucketRegion: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        maxBuckets: Swift.Int? = nil,
        `prefix`: Swift.String? = nil
    )
    {
        self.bucketRegion = bucketRegion
        self.continuationToken = continuationToken
        self.maxBuckets = maxBuckets
        self.`prefix` = `prefix`
    }
}

extension S3ClientTypes {

    /// In terms of implementation, a Bucket is a resource.
    public struct Bucket: Swift.Sendable {
        /// BucketRegion indicates the Amazon Web Services region where the bucket is located. If the request contains at least one valid parameter, it is included in the response.
        public var bucketRegion: Swift.String?
        /// Date the bucket was created. This date can change when making changes to your bucket, such as editing its bucket policy.
        public var creationDate: Foundation.Date?
        /// The name of the bucket.
        public var name: Swift.String?

        public init(
            bucketRegion: Swift.String? = nil,
            creationDate: Foundation.Date? = nil,
            name: Swift.String? = nil
        )
        {
            self.bucketRegion = bucketRegion
            self.creationDate = creationDate
            self.name = name
        }
    }
}

public struct ListBucketsOutput: Swift.Sendable {
    /// The list of buckets owned by the requester.
    public var buckets: [S3ClientTypes.Bucket]?
    /// ContinuationToken is included in the response when there are more buckets that can be listed with pagination. The next ListBuckets request to Amazon S3 can be continued with this ContinuationToken. ContinuationToken is obfuscated and is not a real bucket.
    public var continuationToken: Swift.String?
    /// The owner of the buckets listed.
    public var owner: S3ClientTypes.Owner?
    /// If Prefix was sent with the request, it is included in the response. All bucket names in the response begin with the specified bucket name prefix.
    public var `prefix`: Swift.String?

    public init(
        buckets: [S3ClientTypes.Bucket]? = nil,
        continuationToken: Swift.String? = nil,
        owner: S3ClientTypes.Owner? = nil,
        `prefix`: Swift.String? = nil
    )
    {
        self.buckets = buckets
        self.continuationToken = continuationToken
        self.owner = owner
        self.`prefix` = `prefix`
    }
}

public struct ListDirectoryBucketsInput: Swift.Sendable {
    /// ContinuationToken indicates to Amazon S3 that the list is being continued on buckets in this account with a token. ContinuationToken is obfuscated and is not a real bucket name. You can use this ContinuationToken for the pagination of the list results.
    public var continuationToken: Swift.String?
    /// Maximum number of buckets to be returned in response. When the number is more than the count of buckets that are owned by an Amazon Web Services account, return all the buckets in response.
    public var maxDirectoryBuckets: Swift.Int?

    public init(
        continuationToken: Swift.String? = nil,
        maxDirectoryBuckets: Swift.Int? = nil
    )
    {
        self.continuationToken = continuationToken
        self.maxDirectoryBuckets = maxDirectoryBuckets
    }
}

public struct ListDirectoryBucketsOutput: Swift.Sendable {
    /// The list of buckets owned by the requester.
    public var buckets: [S3ClientTypes.Bucket]?
    /// If ContinuationToken was sent with the request, it is included in the response. You can use the returned ContinuationToken for pagination of the list response.
    public var continuationToken: Swift.String?

    public init(
        buckets: [S3ClientTypes.Bucket]? = nil,
        continuationToken: Swift.String? = nil
    )
    {
        self.buckets = buckets
        self.continuationToken = continuationToken
    }
}

extension S3ClientTypes {

    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public enum EncodingType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [EncodingType] {
            return [
                .url
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .url: return "url"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMultipartUploadsInput: Swift.Sendable {
    /// The name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Character you use to group keys. All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, CommonPrefixes. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under CommonPrefixes result element are not returned elsewhere in the response. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the multipart upload after which listing should begin.
    ///
    /// * General purpose buckets - For general purpose buckets, key-marker is an object key. Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin. If upload-id-marker is not specified, only the keys lexicographically greater than the specified key-marker will be included in the list. If upload-id-marker is specified, any multipart uploads for a key equal to the key-marker might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified upload-id-marker.
    ///
    /// * Directory buckets - For directory buckets, key-marker is obfuscated and isn't a real object key. The upload-id-marker parameter isn't supported by directory buckets. To list the additional multipart uploads, you only need to set the value of key-marker to the NextKeyMarker value from the previous response. In the ListMultipartUploads response, the multipart uploads aren't sorted lexicographically based on the object keys.
    public var keyMarker: Swift.String?
    /// Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.
    public var maxUploads: Swift.Int?
    /// Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way that you'd use a folder in a file system.) Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified upload-id-marker. This functionality is not supported for directory buckets.
    public var uploadIdMarker: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        uploadIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.uploadIdMarker = uploadIdMarker
    }
}

extension S3ClientTypes {

    /// Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/.
    public struct CommonPrefix: Swift.Sendable {
        /// Container for the specified common prefix.
        public var `prefix`: Swift.String?

        public init(
            `prefix`: Swift.String? = nil
        )
        {
            self.`prefix` = `prefix`
        }
    }
}

extension S3ClientTypes {

    /// Container element that identifies who initiated the multipart upload.
    public struct Initiator: Swift.Sendable {
        /// Name of the Principal. This functionality is not supported for directory buckets.
        public var displayName: Swift.String?
        /// If the principal is an Amazon Web Services account, it provides the Canonical User ID. If the principal is an IAM User, it provides a user ARN value. Directory buckets - If the principal is an Amazon Web Services account, it provides the Amazon Web Services account ID. If the principal is an IAM User, it provides a user ARN value.
        public var id: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.id = id
        }
    }
}

extension S3ClientTypes {

    /// Container for the MultipartUpload for the Amazon S3 object.
    public struct MultipartUpload: Swift.Sendable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
        /// Date and time at which the multipart upload was initiated.
        public var initiated: Foundation.Date?
        /// Identifies who initiated the multipart upload.
        public var initiator: S3ClientTypes.Initiator?
        /// Key of the object for which the multipart upload was initiated.
        public var key: Swift.String?
        /// Specifies the owner of the object that is part of the multipart upload. Directory buckets - The bucket owner is returned as the object owner for all the objects.
        public var owner: S3ClientTypes.Owner?
        /// The class of storage used to store the object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var storageClass: S3ClientTypes.StorageClass?
        /// Upload ID that identifies the multipart upload.
        public var uploadId: Swift.String?

        public init(
            checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
            initiated: Foundation.Date? = nil,
            initiator: S3ClientTypes.Initiator? = nil,
            key: Swift.String? = nil,
            owner: S3ClientTypes.Owner? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            uploadId: Swift.String? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.initiated = initiated
            self.initiator = initiator
            self.key = key
            self.owner = owner
            self.storageClass = storageClass
            self.uploadId = uploadId
        }
    }
}

public struct ListMultipartUploadsOutput: Swift.Sendable {
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
    public var bucket: Swift.String?
    /// If you specify a delimiter in the request, then the result returns each distinct key prefix containing the delimiter in a CommonPrefixes element. The distinct key prefixes are returned in the Prefix child element. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Contains the delimiter you specified in the request. If you don't specify a delimiter in your request, this element is absent from the response. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object keys in the response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: Delimiter, KeyMarker, Prefix, NextKeyMarker, Key.
    public var encodingType: S3ClientTypes.EncodingType?
    /// Indicates whether the returned list of multipart uploads is truncated. A value of true indicates that the list was truncated. The list can be truncated if the number of multipart uploads exceeds the limit allowed or specified by max uploads.
    public var isTruncated: Swift.Bool?
    /// The key at or after which the listing began.
    public var keyMarker: Swift.String?
    /// Maximum number of multipart uploads that could have been included in the response.
    public var maxUploads: Swift.Int?
    /// When a list is truncated, this element specifies the value that should be used for the key-marker request parameter in a subsequent request.
    public var nextKeyMarker: Swift.String?
    /// When a list is truncated, this element specifies the value that should be used for the upload-id-marker request parameter in a subsequent request. This functionality is not supported for directory buckets.
    public var nextUploadIdMarker: Swift.String?
    /// When a prefix is provided in the request, this field contains the specified prefix. The result contains only keys starting with the specified prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified upload-id-marker. This functionality is not supported for directory buckets.
    public var uploadIdMarker: Swift.String?
    /// Container for elements related to a particular multipart upload. A response can contain zero or more Upload elements.
    public var uploads: [S3ClientTypes.MultipartUpload]?

    public init(
        bucket: Swift.String? = nil,
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyMarker: Swift.String? = nil,
        maxUploads: Swift.Int? = nil,
        nextKeyMarker: Swift.String? = nil,
        nextUploadIdMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        uploadIdMarker: Swift.String? = nil,
        uploads: [S3ClientTypes.MultipartUpload]? = nil
    )
    {
        self.bucket = bucket
        self.commonPrefixes = commonPrefixes
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxUploads = maxUploads
        self.nextKeyMarker = nextKeyMarker
        self.nextUploadIdMarker = nextUploadIdMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.uploadIdMarker = uploadIdMarker
        self.uploads = uploads
    }
}

extension S3ClientTypes {

    public enum OptionalObjectAttributes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case restoreStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [OptionalObjectAttributes] {
            return [
                .restoreStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .restoreStatus: return "RestoreStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListObjectsInput: Swift.Sendable {
    /// The name of the bucket containing the objects. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// A delimiter is a character that you use to group keys.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Marker is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. Marker can be any key in the bucket.
    public var marker: Swift.String?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Limits the response to keys that begin with the specified prefix.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that she or he will be charged for the list objects request. Bucket owners need not specify this parameter in their requests.
    public var requestPayer: S3ClientTypes.RequestPayer?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.marker = marker
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
    }
}

extension S3ClientTypes {

    /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public struct RestoreStatus: Swift.Sendable {
        /// Specifies whether the object is currently being restored. If the object restoration is in progress, the header returns the value TRUE. For example: x-amz-optional-object-attributes: IsRestoreInProgress="true" If the object restoration has completed, the header returns the value FALSE. For example: x-amz-optional-object-attributes: IsRestoreInProgress="false", RestoreExpiryDate="2012-12-21T00:00:00.000Z" If the object hasn't been restored, there is no header response.
        public var isRestoreInProgress: Swift.Bool?
        /// Indicates when the restored copy will expire. This value is populated only if the object has already been restored. For example: x-amz-optional-object-attributes: IsRestoreInProgress="false", RestoreExpiryDate="2012-12-21T00:00:00.000Z"
        public var restoreExpiryDate: Foundation.Date?

        public init(
            isRestoreInProgress: Swift.Bool? = nil,
            restoreExpiryDate: Foundation.Date? = nil
        )
        {
            self.isRestoreInProgress = isRestoreInProgress
            self.restoreExpiryDate = restoreExpiryDate
        }
    }
}

extension S3ClientTypes {

    public enum ObjectStorageClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepArchive
        case expressOnezone
        case glacier
        case glacierIr
        case intelligentTiering
        case onezoneIa
        case outposts
        case reducedRedundancy
        case snow
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectStorageClass] {
            return [
                .deepArchive,
                .expressOnezone,
                .glacier,
                .glacierIr,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .reducedRedundancy,
                .snow,
                .standard,
                .standardIa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .expressOnezone: return "EXPRESS_ONEZONE"
            case .glacier: return "GLACIER"
            case .glacierIr: return "GLACIER_IR"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .reducedRedundancy: return "REDUCED_REDUNDANCY"
            case .snow: return "SNOW"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// An object consists of data and its descriptive metadata.
    public struct Object: Swift.Sendable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]?
        /// The entity tag is a hash of the object. The ETag reflects changes only to the contents of an object, not its metadata. The ETag may or may not be an MD5 digest of the object data. Whether or not it is depends on how the object was created and how it is encrypted as described below:
        ///
        /// * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that are an MD5 digest of their object data.
        ///
        /// * Objects created by the PUT Object, POST Object, or Copy operation, or through the Amazon Web Services Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are not an MD5 digest of their object data.
        ///
        /// * If an object is created by either the Multipart Upload or Part Copy operation, the ETag is not an MD5 digest, regardless of the method of encryption. If an object is larger than 16 MB, the Amazon Web Services Management Console will upload or copy that object as a Multipart Upload, and therefore the ETag will not be an MD5 digest.
        ///
        ///
        /// Directory buckets - MD5 is not supported by directory buckets.
        public var eTag: Swift.String?
        /// The name that you assign to an object. You use the object key to retrieve the object.
        public var key: Swift.String?
        /// Creation date of the object.
        public var lastModified: Foundation.Date?
        /// The owner of the object Directory buckets - The bucket owner is returned as the object owner.
        public var owner: S3ClientTypes.Owner?
        /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets. Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var restoreStatus: S3ClientTypes.RestoreStatus?
        /// Size in bytes of the object
        public var size: Swift.Int?
        /// The class of storage used to store the object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
        public var storageClass: S3ClientTypes.ObjectStorageClass?

        public init(
            checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]? = nil,
            eTag: Swift.String? = nil,
            key: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            restoreStatus: S3ClientTypes.RestoreStatus? = nil,
            size: Swift.Int? = nil,
            storageClass: S3ClientTypes.ObjectStorageClass? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.eTag = eTag
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.restoreStatus = restoreStatus
            self.size = size
            self.storageClass = storageClass
        }
    }
}

public struct ListObjectsOutput: Swift.Sendable {
    /// All of the keys (up to 1,000) rolled up in a common prefix count as a single return when calculating the number of returns. A response can contain CommonPrefixes only if you specify a delimiter. CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by the delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/), as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Metadata about each object returned.
    public var contents: [S3ClientTypes.Object]?
    /// Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the MaxKeys value.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public var encodingType: S3ClientTypes.EncodingType?
    /// A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria.
    public var isTruncated: Swift.Bool?
    /// Indicates where in the bucket listing begins. Marker is included in the response if it was sent with the request.
    public var marker: Swift.String?
    /// The maximum number of keys returned in the response body.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// When the response is truncated (the IsTruncated element value in the response is true), you can use the key name in this field as the marker parameter in the subsequent request to get the next set of objects. Amazon S3 lists objects in alphabetical order. This element is returned only if you have the delimiter request parameter specified. If the response does not include the NextMarker element and it is truncated, you can use the value of the last Key element in the response as the marker parameter in the subsequent request to get the next set of object keys.
    public var nextMarker: Swift.String?
    /// Keys that begin with the indicated prefix.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        marker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxKeys = maxKeys
        self.name = name
        self.nextMarker = nextMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
    }
}

public struct ListObjectsV2Input: Swift.Sendable {
    /// Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// ContinuationToken indicates to Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key. You can use this ContinuationToken for pagination of the list results.
    public var continuationToken: Swift.String?
    /// A delimiter is a character that you use to group keys.
    ///
    /// * Directory buckets - For directory buckets, / is the only supported delimiter.
    ///
    /// * Directory buckets - When you query ListObjectsV2 with a delimiter during in-progress multipart uploads, the CommonPrefixes response parameter contains the prefixes that are associated with the in-progress multipart uploads. For more information about multipart uploads, see [Multipart Upload Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html) in the Amazon S3 User Guide.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The owner field is not present in ListObjectsV2 by default. If you want to return the owner field with each key in the result, then set the FetchOwner field to true. Directory buckets - For directory buckets, the bucket owner is returned as the object owner for all objects.
    public var fetchOwner: Swift.Bool?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned. This functionality is not supported for directory buckets.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Limits the response to keys that begin with the specified prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that she or he will be charged for the list objects request in V2 style. Bucket owners need not specify this parameter in their requests. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket. This functionality is not supported for directory buckets.
    public var startAfter: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        fetchOwner: Swift.Bool? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.fetchOwner = fetchOwner
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.startAfter = startAfter
    }
}

public struct ListObjectsV2Output: Swift.Sendable {
    /// All of the keys (up to 1,000) that share the same prefix are grouped together. When counting the total numbers of returns by this API operation, this group of keys is considered as one item. A response can contain CommonPrefixes only if you specify a delimiter. CommonPrefixes contains all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. All of the keys that roll up into a common prefix count as a single return when calculating the number of returns.
    ///
    /// * Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    ///
    /// * Directory buckets - When you query ListObjectsV2 with a delimiter during in-progress multipart uploads, the CommonPrefixes response parameter contains the prefixes that are associated with the in-progress multipart uploads. For more information about multipart uploads, see [Multipart Upload Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html) in the Amazon S3 User Guide.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Metadata about each object returned.
    public var contents: [S3ClientTypes.Object]?
    /// If ContinuationToken was sent with the request, it is included in the response. You can use the returned ContinuationToken for pagination of the list response. You can use this ContinuationToken for pagination of the list results.
    public var continuationToken: Swift.String?
    /// Causes keys that contain the same string between the prefix and the first occurrence of the delimiter to be rolled up into a single result element in the CommonPrefixes collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up result counts as only one return against the MaxKeys value. Directory buckets - For directory buckets, / is the only supported delimiter.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object key names in the XML response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: Delimiter, Prefix, Key, and StartAfter.
    public var encodingType: S3ClientTypes.EncodingType?
    /// Set to false if all of the results were returned. Set to true if more keys are available to return. If the number of results exceeds that specified by MaxKeys, all of the results might not be returned.
    public var isTruncated: Swift.Bool?
    /// KeyCount is the number of keys returned with this request. KeyCount will always be less than or equal to the MaxKeys field. For example, if you ask for 50 keys, your result will include 50 keys or fewer.
    public var keyCount: Swift.Int?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// NextContinuationToken is sent when isTruncated is true, which means there are more keys in the bucket that can be listed. The next list requests to Amazon S3 can be continued with this NextContinuationToken. NextContinuationToken is obfuscated and is not a real key
    public var nextContinuationToken: Swift.String?
    /// Keys that begin with the indicated prefix. Directory buckets - For directory buckets, only prefixes that end in a delimiter (/) are supported.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// If StartAfter was sent with the request, it is included in the response. This functionality is not supported for directory buckets.
    public var startAfter: Swift.String?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        contents: [S3ClientTypes.Object]? = nil,
        continuationToken: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyCount: Swift.Int? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextContinuationToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        startAfter: Swift.String? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.contents = contents
        self.continuationToken = continuationToken
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyCount = keyCount
        self.maxKeys = maxKeys
        self.name = name
        self.nextContinuationToken = nextContinuationToken
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.startAfter = startAfter
    }
}

public struct ListObjectVersionsInput: Swift.Sendable {
    /// The bucket name that contains the objects.
    /// This member is required.
    public var bucket: Swift.String?
    /// A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode the [object keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html) in the response. Responses are encoded only in UTF-8. An object key can contain any Unicode character. However, the XML 1.0 parser can't parse certain characters, such as characters with an ASCII value from 0 to 10. For characters that aren't supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response. For more information about characters to avoid in object key names, see [Object key naming guidelines](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-guidelines). When using the URL encoding type, non-ASCII characters that are used in an object's key name will be percent-encoded according to UTF-8 code values. For example, the object test_file(3).png will appear as test_file%283%29.png.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the key to start with when listing objects in a bucket.
    public var keyMarker: Swift.String?
    /// Sets the maximum number of keys returned in the response. By default, the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains true. To return the additional keys, see key-marker and version-id-marker.
    public var maxKeys: Swift.Int?
    /// Specifies the optional fields that you want returned in the response. Fields that you do not specify are not returned.
    public var optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]?
    /// Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way that you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes.
    public var `prefix`: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the object version you want to start listing from.
    public var versionIdMarker: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        optionalObjectAttributes: [S3ClientTypes.OptionalObjectAttributes]? = nil,
        `prefix`: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.optionalObjectAttributes = optionalObjectAttributes
        self.`prefix` = `prefix`
        self.requestPayer = requestPayer
        self.versionIdMarker = versionIdMarker
    }
}

extension S3ClientTypes {

    /// Information about the delete marker.
    public struct DeleteMarkerEntry: Swift.Sendable {
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Swift.Bool?
        /// The object key.
        public var key: Swift.String?
        /// Date and time when the object was last modified.
        public var lastModified: Foundation.Date?
        /// The account that created the delete marker.>
        public var owner: S3ClientTypes.Owner?
        /// Version ID of an object.
        public var versionId: Swift.String?

        public init(
            isLatest: Swift.Bool? = nil,
            key: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.versionId = versionId
        }
    }
}

extension S3ClientTypes {

    public enum ObjectVersionStorageClass: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectVersionStorageClass] {
            return [
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// The version of an object.
    public struct ObjectVersion: Swift.Sendable {
        /// The algorithm that was used to create a checksum of the object.
        public var checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]?
        /// The entity tag is an MD5 hash of that version of the object.
        public var eTag: Swift.String?
        /// Specifies whether the object is (true) or is not (false) the latest version of an object.
        public var isLatest: Swift.Bool?
        /// The object key.
        public var key: Swift.String?
        /// Date and time when the object was last modified.
        public var lastModified: Foundation.Date?
        /// Specifies the owner of the object.
        public var owner: S3ClientTypes.Owner?
        /// Specifies the restoration status of an object. Objects in certain storage classes must be restored before they can be retrieved. For more information about these storage classes and how to work with archived objects, see [ Working with archived objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/archived-objects.html) in the Amazon S3 User Guide.
        public var restoreStatus: S3ClientTypes.RestoreStatus?
        /// Size in bytes of the object.
        public var size: Swift.Int?
        /// The class of storage used to store the object.
        public var storageClass: S3ClientTypes.ObjectVersionStorageClass?
        /// Version ID of an object.
        public var versionId: Swift.String?

        public init(
            checksumAlgorithm: [S3ClientTypes.ChecksumAlgorithm]? = nil,
            eTag: Swift.String? = nil,
            isLatest: Swift.Bool? = nil,
            key: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            owner: S3ClientTypes.Owner? = nil,
            restoreStatus: S3ClientTypes.RestoreStatus? = nil,
            size: Swift.Int? = nil,
            storageClass: S3ClientTypes.ObjectVersionStorageClass? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.checksumAlgorithm = checksumAlgorithm
            self.eTag = eTag
            self.isLatest = isLatest
            self.key = key
            self.lastModified = lastModified
            self.owner = owner
            self.restoreStatus = restoreStatus
            self.size = size
            self.storageClass = storageClass
            self.versionId = versionId
        }
    }
}

public struct ListObjectVersionsOutput: Swift.Sendable {
    /// All of the keys rolled up into a common prefix count as a single return when calculating the number of returns.
    public var commonPrefixes: [S3ClientTypes.CommonPrefix]?
    /// Container for an object that is a delete marker.
    public var deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]?
    /// The delimiter grouping the included keys. A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.
    public var delimiter: Swift.String?
    /// Encoding type used by Amazon S3 to encode object key names in the XML response. If you specify the encoding-type request parameter, Amazon S3 includes this element in the response, and returns encoded key name values in the following response elements: KeyMarker, NextKeyMarker, Prefix, Key, and Delimiter.
    public var encodingType: S3ClientTypes.EncodingType?
    /// A flag that indicates whether Amazon S3 returned all of the results that satisfied the search criteria. If your results were truncated, you can make a follow-up paginated request by using the NextKeyMarker and NextVersionIdMarker response parameters as a starting place in another request to return the rest of the results.
    public var isTruncated: Swift.Bool?
    /// Marks the last key returned in a truncated response.
    public var keyMarker: Swift.String?
    /// Specifies the maximum number of objects to return.
    public var maxKeys: Swift.Int?
    /// The bucket name.
    public var name: Swift.String?
    /// When the number of responses exceeds the value of MaxKeys, NextKeyMarker specifies the first key not returned that satisfies the search criteria. Use this value for the key-marker request parameter in a subsequent request.
    public var nextKeyMarker: Swift.String?
    /// When the number of responses exceeds the value of MaxKeys, NextVersionIdMarker specifies the first object version not returned that satisfies the search criteria. Use this value for the version-id-marker request parameter in a subsequent request.
    public var nextVersionIdMarker: Swift.String?
    /// Selects objects that start with the value supplied by this parameter.
    public var `prefix`: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Marks the last version of the key returned in a truncated response.
    public var versionIdMarker: Swift.String?
    /// Container for version information.
    public var versions: [S3ClientTypes.ObjectVersion]?

    public init(
        commonPrefixes: [S3ClientTypes.CommonPrefix]? = nil,
        deleteMarkers: [S3ClientTypes.DeleteMarkerEntry]? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        isTruncated: Swift.Bool? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int? = nil,
        name: Swift.String? = nil,
        nextKeyMarker: Swift.String? = nil,
        nextVersionIdMarker: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        versionIdMarker: Swift.String? = nil,
        versions: [S3ClientTypes.ObjectVersion]? = nil
    )
    {
        self.commonPrefixes = commonPrefixes
        self.deleteMarkers = deleteMarkers
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.isTruncated = isTruncated
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.name = name
        self.nextKeyMarker = nextKeyMarker
        self.nextVersionIdMarker = nextVersionIdMarker
        self.`prefix` = `prefix`
        self.requestCharged = requestCharged
        self.versionIdMarker = versionIdMarker
        self.versions = versions
    }
}

public struct ListPartsInput: Swift.Sendable {
    /// The name of the bucket to which the parts are being uploaded. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Sets the maximum number of parts to return.
    public var maxParts: Swift.Int?
    /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
    public var partNumberMarker: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose parts are being listed.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        partNumberMarker: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.maxParts = maxParts
        self.partNumberMarker = partNumberMarker
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension ListPartsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPartsInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), maxParts: \(Swift.String(describing: maxParts)), partNumberMarker: \(Swift.String(describing: partNumberMarker)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Container for elements related to a part.
    public struct Part: Swift.Sendable {
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag returned when the part was uploaded.
        public var eTag: Swift.String?
        /// Date and time at which the part was uploaded.
        public var lastModified: Foundation.Date?
        /// Part number identifying the part. This is a positive integer between 1 and 10,000.
        public var partNumber: Swift.Int?
        /// Size in bytes of the uploaded part data.
        public var size: Swift.Int?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: Foundation.Date? = nil,
            partNumber: Swift.Int? = nil,
            size: Swift.Int? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
            self.partNumber = partNumber
            self.size = size
        }
    }
}

public struct ListPartsOutput: Swift.Sendable {
    /// If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, then the response includes this header indicating when the initiated multipart upload will become eligible for abort operation. For more information, see [Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config). The response will also include the x-amz-abort-rule-id header that will provide the ID of the lifecycle configuration rule that defines this action. This functionality is not supported for directory buckets.
    public var abortDate: Foundation.Date?
    /// This header is returned along with the x-amz-abort-date header. It identifies applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads. This functionality is not supported for directory buckets.
    public var abortRuleId: Swift.String?
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
    public var bucket: Swift.String?
    /// The algorithm that was used to create a checksum of the object.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Container element that identifies who initiated the multipart upload. If the initiator is an Amazon Web Services account, this element provides the same information as the Owner element. If the initiator is an IAM User, this element provides the user ARN and display name.
    public var initiator: S3ClientTypes.Initiator?
    /// Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.
    public var isTruncated: Swift.Bool?
    /// Object key for which the multipart upload was initiated.
    public var key: Swift.String?
    /// Maximum number of parts that were allowed in the response.
    public var maxParts: Swift.Int?
    /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    public var nextPartNumberMarker: Swift.String?
    /// Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name. Directory buckets - The bucket owner is returned as the object owner for all the parts.
    public var owner: S3ClientTypes.Owner?
    /// Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.
    public var partNumberMarker: Swift.String?
    /// Container for elements related to a particular part. A response can contain zero or more Part elements.
    public var parts: [S3ClientTypes.Part]?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The class of storage used to store the uploaded object. Directory buckets - Only the S3 Express One Zone storage class is supported by directory buckets to store objects.
    public var storageClass: S3ClientTypes.StorageClass?
    /// Upload ID identifying the multipart upload whose parts are being listed.
    public var uploadId: Swift.String?

    public init(
        abortDate: Foundation.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        initiator: S3ClientTypes.Initiator? = nil,
        isTruncated: Swift.Bool? = nil,
        key: Swift.String? = nil,
        maxParts: Swift.Int? = nil,
        nextPartNumberMarker: Swift.String? = nil,
        owner: S3ClientTypes.Owner? = nil,
        partNumberMarker: Swift.String? = nil,
        parts: [S3ClientTypes.Part]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.initiator = initiator
        self.isTruncated = isTruncated
        self.key = key
        self.maxParts = maxParts
        self.nextPartNumberMarker = nextPartNumberMarker
        self.owner = owner
        self.partNumberMarker = partNumberMarker
        self.parts = parts
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.uploadId = uploadId
    }
}

public struct PutBucketAccelerateConfigurationInput: Swift.Sendable {
    /// Container for setting the transfer acceleration state.
    /// This member is required.
    public var accelerateConfiguration: S3ClientTypes.AccelerateConfiguration?
    /// The name of the bucket for which the accelerate configuration is set.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        accelerateConfiguration: S3ClientTypes.AccelerateConfiguration? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.accelerateConfiguration = accelerateConfiguration
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct PutBucketAclInput: Swift.Sendable {
    /// Contains the elements that set the ACL permissions for an object per grantee.
    public var accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// The canned ACL to apply to the bucket.
    public var acl: S3ClientTypes.BucketCannedACL?
    /// The bucket to which to apply the ACL.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket.
    public var grantWriteACP: Swift.String?

    public init(
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        acl: S3ClientTypes.BucketCannedACL? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil
    )
    {
        self.accessControlPolicy = accessControlPolicy
        self.acl = acl
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
    }
}

public struct PutBucketAnalyticsConfigurationInput: Swift.Sendable {
    /// The configuration and any analyses for the analytics filter.
    /// This member is required.
    public var analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration?
    /// The name of the bucket to which an analytics configuration is stored.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID that identifies the analytics configuration.
    /// This member is required.
    public var id: Swift.String?

    public init(
        analyticsConfiguration: S3ClientTypes.AnalyticsConfiguration? = nil,
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.analyticsConfiguration = analyticsConfiguration
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
    }
}

extension S3ClientTypes {

    /// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon S3 User Guide.
    public struct CORSConfiguration: Swift.Sendable {
        /// A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
        /// This member is required.
        public var corsRules: [S3ClientTypes.CORSRule]?

        public init(
            corsRules: [S3ClientTypes.CORSRule]? = nil
        )
        {
            self.corsRules = corsRules
        }
    }
}

public struct PutBucketCorsInput: Swift.Sendable {
    /// Specifies the bucket impacted by the corsconfiguration.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var corsConfiguration: S3ClientTypes.CORSConfiguration?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        corsConfiguration: S3ClientTypes.CORSConfiguration? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.corsConfiguration = corsConfiguration
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct PutBucketEncryptionInput: Swift.Sendable {
    /// Specifies default encryption for a bucket using server-side encryption with different key options. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter. For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the server-side encryption configuration. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?
    /// Specifies the default server-side-encryption configuration.
    /// This member is required.
    public var serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        serverSideEncryptionConfiguration: S3ClientTypes.ServerSideEncryptionConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
    }
}

public struct PutBucketIntelligentTieringConfigurationInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose configuration you want to modify or retrieve.
    /// This member is required.
    public var bucket: Swift.String?
    /// The ID used to identify the S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var id: Swift.String?
    /// Container for S3 Intelligent-Tiering configuration.
    /// This member is required.
    public var intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration?

    public init(
        bucket: Swift.String? = nil,
        id: Swift.String? = nil,
        intelligentTieringConfiguration: S3ClientTypes.IntelligentTieringConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.id = id
        self.intelligentTieringConfiguration = intelligentTieringConfiguration
    }
}

public struct PutBucketInventoryConfigurationInput: Swift.Sendable {
    /// The name of the bucket where the inventory configuration will be stored.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the inventory configuration.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies the inventory configuration.
    /// This member is required.
    public var inventoryConfiguration: S3ClientTypes.InventoryConfiguration?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        inventoryConfiguration: S3ClientTypes.InventoryConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.inventoryConfiguration = inventoryConfiguration
    }
}

extension S3ClientTypes {

    /// Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the Amazon S3 User Guide.
    public struct BucketLifecycleConfiguration: Swift.Sendable {
        /// A lifecycle rule for individual objects in an Amazon S3 bucket.
        /// This member is required.
        public var rules: [S3ClientTypes.LifecycleRule]?

        public init(
            rules: [S3ClientTypes.LifecycleRule]? = nil
        )
        {
            self.rules = rules
        }
    }
}

public struct PutBucketLifecycleConfigurationInput: Swift.Sendable {
    /// The name of the bucket for which to set the configuration.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for lifecycle rules. You can add as many as 1,000 rules.
    public var lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration?
    /// Indicates which default minimum object size behavior is applied to the lifecycle configuration.
    ///
    /// * all_storage_classes_128K - Objects smaller than 128 KB will not transition to any storage class by default.
    ///
    /// * varies_by_storage_class - Objects smaller than 128 KB will transition to Glacier Flexible Retrieval or Glacier Deep Archive storage classes. By default, all other storage classes will prevent transitions smaller than 128 KB.
    ///
    ///
    /// To customize the minimum object size for any transition you can add a filter that specifies a custom ObjectSizeGreaterThan or ObjectSizeLessThan in the body of your transition rule. Custom filters always take precedence over the default transition behavior.
    public var transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil,
        lifecycleConfiguration: S3ClientTypes.BucketLifecycleConfiguration? = nil,
        transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
        self.lifecycleConfiguration = lifecycleConfiguration
        self.transitionDefaultMinimumObjectSize = transitionDefaultMinimumObjectSize
    }
}

public struct PutBucketLifecycleConfigurationOutput: Swift.Sendable {
    /// Indicates which default minimum object size behavior is applied to the lifecycle configuration.
    ///
    /// * all_storage_classes_128K - Objects smaller than 128 KB will not transition to any storage class by default.
    ///
    /// * varies_by_storage_class - Objects smaller than 128 KB will transition to Glacier Flexible Retrieval or Glacier Deep Archive storage classes. By default, all other storage classes will prevent transitions smaller than 128 KB.
    ///
    ///
    /// To customize the minimum object size for any transition you can add a filter that specifies a custom ObjectSizeGreaterThan or ObjectSizeLessThan in the body of your transition rule. Custom filters always take precedence over the default transition behavior.
    public var transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize?

    public init(
        transitionDefaultMinimumObjectSize: S3ClientTypes.TransitionDefaultMinimumObjectSize? = nil
    )
    {
        self.transitionDefaultMinimumObjectSize = transitionDefaultMinimumObjectSize
    }
}

extension S3ClientTypes {

    /// Container for logging status information.
    public struct BucketLoggingStatus: Swift.Sendable {
        /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the Amazon S3 API Reference.
        public var loggingEnabled: S3ClientTypes.LoggingEnabled?

        public init(
            loggingEnabled: S3ClientTypes.LoggingEnabled? = nil
        )
        {
            self.loggingEnabled = loggingEnabled
        }
    }
}

public struct PutBucketLoggingInput: Swift.Sendable {
    /// The name of the bucket for which to set the logging parameters.
    /// This member is required.
    public var bucket: Swift.String?
    /// Container for logging status information.
    /// This member is required.
    public var bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash of the PutBucketLogging request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bucketLoggingStatus: S3ClientTypes.BucketLoggingStatus? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bucketLoggingStatus = bucketLoggingStatus
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
    }
}

public struct PutBucketMetricsConfigurationInput: Swift.Sendable {
    /// The name of the bucket for which the metrics configuration is set.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The ID used to identify the metrics configuration. The ID has a 64 character limit and can only contain letters, numbers, periods, dashes, and underscores.
    /// This member is required.
    public var id: Swift.String?
    /// Specifies the metrics configuration.
    /// This member is required.
    public var metricsConfiguration: S3ClientTypes.MetricsConfiguration?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        id: Swift.String? = nil,
        metricsConfiguration: S3ClientTypes.MetricsConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.id = id
        self.metricsConfiguration = metricsConfiguration
    }
}

extension S3ClientTypes {

    /// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
    public struct NotificationConfiguration: Swift.Sendable {
        /// Enables delivery of events to Amazon EventBridge.
        public var eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration?
        /// Describes the Lambda functions to invoke and the events for which to invoke them.
        public var lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]?
        /// The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        public var queueConfigurations: [S3ClientTypes.QueueConfiguration]?
        /// The topic to which notifications are sent and the events for which notifications are generated.
        public var topicConfigurations: [S3ClientTypes.TopicConfiguration]?

        public init(
            eventBridgeConfiguration: S3ClientTypes.EventBridgeConfiguration? = nil,
            lambdaFunctionConfigurations: [S3ClientTypes.LambdaFunctionConfiguration]? = nil,
            queueConfigurations: [S3ClientTypes.QueueConfiguration]? = nil,
            topicConfigurations: [S3ClientTypes.TopicConfiguration]? = nil
        )
        {
            self.eventBridgeConfiguration = eventBridgeConfiguration
            self.lambdaFunctionConfigurations = lambdaFunctionConfigurations
            self.queueConfigurations = queueConfigurations
            self.topicConfigurations = topicConfigurations
        }
    }
}

public struct PutBucketNotificationConfigurationInput: Swift.Sendable {
    /// The name of the bucket.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
    /// This member is required.
    public var notificationConfiguration: S3ClientTypes.NotificationConfiguration?
    /// Skips validation of Amazon SQS, Amazon SNS, and Lambda destinations. True or false value.
    public var skipDestinationValidation: Swift.Bool?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        notificationConfiguration: S3ClientTypes.NotificationConfiguration? = nil,
        skipDestinationValidation: Swift.Bool? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.notificationConfiguration = notificationConfiguration
        self.skipDestinationValidation = skipDestinationValidation
    }
}

public struct PutBucketOwnershipControlsInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose OwnershipControls you want to set.
    /// This member is required.
    public var bucket: Swift.String?
    /// The MD5 hash of the OwnershipControls request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The OwnershipControls (BucketOwnerEnforced, BucketOwnerPreferred, or ObjectWriter) that you want to apply to this Amazon S3 bucket.
    /// This member is required.
    public var ownershipControls: S3ClientTypes.OwnershipControls?

    public init(
        bucket: Swift.String? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        ownershipControls: S3ClientTypes.OwnershipControls? = nil
    )
    {
        self.bucket = bucket
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.ownershipControls = ownershipControls
    }
}

public struct PutBucketPolicyInput: Swift.Sendable {
    /// The name of the bucket. Directory buckets - When you use this operation with a directory bucket, you must use path-style requests in the format https://s3express-control.region_code.amazonaws.com/bucket-name . Virtual-hosted-style requests aren't supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must also follow the format  bucket_base_name--az_id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Set this parameter to true to confirm that you want to remove your permissions to change this bucket policy in the future. This functionality is not supported for directory buckets.
    public var confirmRemoveSelfBucketAccess: Swift.Bool?
    /// The MD5 hash of the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied). For directory buckets, this header is not supported in this API operation. If you specify this header, the request fails with the HTTP status code 501 Not Implemented.
    public var expectedBucketOwner: Swift.String?
    /// The bucket policy as a JSON document. For directory buckets, the only IAM action supported in the bucket policy is s3express:CreateSession.
    /// This member is required.
    public var policy: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        confirmRemoveSelfBucketAccess: Swift.Bool? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        policy: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.confirmRemoveSelfBucketAccess = confirmRemoveSelfBucketAccess
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.policy = policy
    }
}

public struct PutBucketReplicationInput: Swift.Sendable {
    /// The name of the bucket
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
    /// This member is required.
    public var replicationConfiguration: S3ClientTypes.ReplicationConfiguration?
    /// A token to allow Object Lock to be enabled for an existing bucket.
    public var token: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        replicationConfiguration: S3ClientTypes.ReplicationConfiguration? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.replicationConfiguration = replicationConfiguration
        self.token = token
    }
}

extension S3ClientTypes {

    /// Container for Payer.
    public struct RequestPaymentConfiguration: Swift.Sendable {
        /// Specifies who pays for the download and request fees.
        /// This member is required.
        public var payer: S3ClientTypes.Payer?

        public init(
            payer: S3ClientTypes.Payer? = nil
        )
        {
            self.payer = payer
        }
    }
}

public struct PutBucketRequestPaymentInput: Swift.Sendable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for Payer.
    /// This member is required.
    public var requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        requestPaymentConfiguration: S3ClientTypes.RequestPaymentConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.requestPaymentConfiguration = requestPaymentConfiguration
    }
}

extension S3ClientTypes {

    /// Container for TagSet elements.
    public struct Tagging: Swift.Sendable {
        /// A collection for a set of tags
        /// This member is required.
        public var tagSet: [S3ClientTypes.Tag]?

        public init(
            tagSet: [S3ClientTypes.Tag]? = nil
        )
        {
            self.tagSet = tagSet
        }
    }
}

public struct PutBucketTaggingInput: Swift.Sendable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for the TagSet and Tag elements.
    /// This member is required.
    public var tagging: S3ClientTypes.Tagging?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        tagging: S3ClientTypes.Tagging? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.tagging = tagging
    }
}

extension S3ClientTypes {

    public enum MFADelete: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [MFADelete] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the Amazon S3 API Reference.
    public struct VersioningConfiguration: Swift.Sendable {
        /// Specifies whether MFA delete is enabled in the bucket versioning configuration. This element is only returned if the bucket has been configured with MFA delete. If the bucket has never been so configured, this element is not returned.
        public var mfaDelete: S3ClientTypes.MFADelete?
        /// The versioning state of the bucket.
        public var status: S3ClientTypes.BucketVersioningStatus?

        public init(
            mfaDelete: S3ClientTypes.MFADelete? = nil,
            status: S3ClientTypes.BucketVersioningStatus? = nil
        )
        {
            self.mfaDelete = mfaDelete
            self.status = status
        }
    }
}

public struct PutBucketVersioningInput: Swift.Sendable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// >The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device.
    public var mfa: Swift.String?
    /// Container for setting the versioning state.
    /// This member is required.
    public var versioningConfiguration: S3ClientTypes.VersioningConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        mfa: Swift.String? = nil,
        versioningConfiguration: S3ClientTypes.VersioningConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.mfa = mfa
        self.versioningConfiguration = versioningConfiguration
    }
}

extension S3ClientTypes {

    /// Specifies website configuration parameters for an Amazon S3 bucket.
    public struct WebsiteConfiguration: Swift.Sendable {
        /// The name of the error document for the website.
        public var errorDocument: S3ClientTypes.ErrorDocument?
        /// The name of the index document for the website.
        public var indexDocument: S3ClientTypes.IndexDocument?
        /// The redirect behavior for every request to this bucket's website endpoint. If you specify this property, you can't specify any other property.
        public var redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo?
        /// Rules that define when a redirect is applied and the redirect behavior.
        public var routingRules: [S3ClientTypes.RoutingRule]?

        public init(
            errorDocument: S3ClientTypes.ErrorDocument? = nil,
            indexDocument: S3ClientTypes.IndexDocument? = nil,
            redirectAllRequestsTo: S3ClientTypes.RedirectAllRequestsTo? = nil,
            routingRules: [S3ClientTypes.RoutingRule]? = nil
        )
        {
            self.errorDocument = errorDocument
            self.indexDocument = indexDocument
            self.redirectAllRequestsTo = redirectAllRequestsTo
            self.routingRules = routingRules
        }
    }
}

public struct PutBucketWebsiteInput: Swift.Sendable {
    /// The bucket name.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. You must use this header as a message integrity check to verify that the request body was not corrupted in transit. For more information, see [RFC 1864](http://www.ietf.org/rfc/rfc1864.txt). For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Container for the request.
    /// This member is required.
    public var websiteConfiguration: S3ClientTypes.WebsiteConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        websiteConfiguration: S3ClientTypes.WebsiteConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.websiteConfiguration = websiteConfiguration
    }
}

public struct PutObjectInput: Swift.Sendable {
    /// The canned ACL to apply to the object. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL) in the Amazon S3 User Guide. When adding a new object, you can use headers to grant ACL-based permissions to individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These permissions are then added to the ACL on the object. By default, all objects are private. Only the owner has full access control. For more information, see [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html) and [Managing ACLs Using the REST API](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html) in the Amazon S3 User Guide. If the bucket that you're uploading objects to uses the bucket owner enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect permissions. Buckets that use this setting only accept PUT requests that don't specify an ACL or PUT requests that specify bucket owner full control ACLs, such as the bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed in the XML format. PUT requests that contain other ACLs (for example, custom grants to certain Amazon Web Services accounts) fail and return a 400 error with the error code AccessControlListNotSupported. For more information, see [ Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon S3 User Guide.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// Object data.
    public var body: Smithy.ByteStream?
    /// The bucket name to which the PUT action was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Key Management Service (KMS) keys (SSE-KMS). General purpose buckets - Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Also, specifying this header with a PUT action doesn't affect bucket-level settings for S3 Bucket Key. Directory buckets - S3 Bucket Keys are always enabled for GET and PUT operations in a directory bucket and can’t be disabled. S3 Bucket Keys aren't supported, when you copy SSE-KMS encrypted objects from general purpose buckets to directory buckets, from directory buckets to general purpose buckets, or between directory buckets, through [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html), [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html), [the Copy operation in Batch Operations](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-buckets-objects-Batch-Ops), or [the import jobs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-import-job). In this case, Amazon S3 makes a call to KMS every time a copy request is made for a KMS-encrypted object.
    public var bucketKeyEnabled: Swift.Bool?
    /// Can be used to specify caching behavior along the request/reply chain. For more information, see [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9).
    public var cacheControl: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum-algorithm  or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For the x-amz-checksum-algorithm  header, replace  algorithm  with the supported algorithm from the following list:
    ///
    /// * CRC32
    ///
    /// * CRC32C
    ///
    /// * SHA1
    ///
    /// * SHA256
    ///
    ///
    /// For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If the individual checksum value you provide through x-amz-checksum-algorithm  doesn't match the checksum algorithm you set through x-amz-sdk-checksum-algorithm, Amazon S3 ignores any provided ChecksumAlgorithm parameter and uses the checksum algorithm that matches the provided value in x-amz-checksum-algorithm . The Content-MD5 or x-amz-sdk-checksum-algorithm header is required for any request to upload an object with a retention period configured using Amazon S3 Object Lock. For more information, see [Uploading objects to an Object Lock enabled bucket ](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-managing.html#object-lock-put-object) in the Amazon S3 User Guide. For directory buckets, when you use Amazon Web Services SDKs, CRC32 is the default checksum algorithm that's used for performance.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object. For more information, see [https://www.rfc-editor.org/rfc/rfc6266#section-4](https://www.rfc-editor.org/rfc/rfc6266#section-4).
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding](https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding).
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length](https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length).
    public var contentLength: Swift.Int?
    /// The base64-encoded 128-bit MD5 digest of the message (without the headers) according to RFC 1864. This header can be used as a message integrity check to verify that the data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more information about REST request authentication, see [REST Authentication](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html). The Content-MD5 or x-amz-sdk-checksum-algorithm header is required for any request to upload an object with a retention period configured using Amazon S3 Object Lock. For more information, see [Uploading objects to an Object Lock enabled bucket ](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-managing.html#object-lock-put-object) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// A standard MIME type describing the format of the contents. For more information, see [https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type](https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type).
    public var contentType: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The date and time at which the object is no longer cacheable. For more information, see [https://www.rfc-editor.org/rfc/rfc7234#section-5.3](https://www.rfc-editor.org/rfc/rfc7234#section-5.3).
    public var expires: Swift.String?
    /// Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to read the object data and its metadata.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the object ACL.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to write the ACL for the applicable object.
    ///
    /// * This functionality is not supported for directory buckets.
    ///
    /// * This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Uploads the object only if the object key name does not already exist in the bucket specified. Otherwise, Amazon S3 returns a 412 Precondition Failed error. If a conflicting operation occurs during the upload S3 returns a 409 ConditionalRequestConflict response. On a 409 failure you should retry the upload. Expects the '*' (asterisk) character. For more information about conditional requests, see [RFC 7232](https://tools.ietf.org/html/rfc7232), or [Conditional requests](https://docs.aws.amazon.com/AmazonS3/latest/userguide/conditional-requests.html) in the Amazon S3 User Guide.
    public var ifNoneMatch: Swift.String?
    /// Object key for which the PUT action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// Specifies whether a legal hold will be applied to this object. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// The Object Lock mode that you want to apply to this object. This functionality is not supported for directory buckets.
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when you want this object's Object Lock to expire. Must be formatted as a timestamp parameter. This functionality is not supported for directory buckets.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The server-side encryption algorithm that was used when you store this object in Amazon S3 (for example, AES256, aws:kms, aws:kms:dsse).
    ///
    /// * General purpose buckets - You have four mutually exclusive options to protect data using server-side encryption in Amazon S3, depending on how you choose to manage the encryption keys. Specifically, the encryption key options are Amazon S3 managed keys (SSE-S3), Amazon Web Services KMS keys (SSE-KMS or DSSE-KMS), and customer-provided keys (SSE-C). Amazon S3 encrypts data with server-side encryption by using Amazon S3 managed keys (SSE-S3) by default. You can optionally tell Amazon S3 to encrypt data at rest by using server-side encryption with other key options. For more information, see [Using Server-Side Encryption](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the Amazon S3 User Guide.
    ///
    /// * Directory buckets - For directory buckets, there are only two supported options for server-side encryption: server-side encryption with Amazon S3 managed keys (SSE-S3) (AES256) and server-side encryption with KMS keys (SSE-KMS) (aws:kms). We recommend that the bucket's default encryption uses the desired encryption configuration and you don't override the bucket default encryption in your CreateSession requests or PUT object requests. Then, new objects are automatically encrypted with the desired encryption settings. For more information, see [Protecting data with server-side encryption](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-serv-side-encryption.html) in the Amazon S3 User Guide. For more information about the encryption overriding behaviors in directory buckets, see [Specifying server-side encryption with KMS for new object uploads](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-express-specifying-kms-encryption.html). In the Zonal endpoint API calls (except [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html) and [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html)) using the REST API, the encryption request headers must match the encryption settings that are specified in the CreateSession request. You can't override the values of the encryption settings (x-amz-server-side-encryption, x-amz-server-side-encryption-aws-kms-key-id, x-amz-server-side-encryption-context, and x-amz-server-side-encryption-bucket-key-enabled) that are specified in the CreateSession request. You don't need to explicitly specify these encryption settings values in Zonal endpoint API calls, and Amazon S3 will use the encryption settings values from the CreateSession request to protect new objects in the directory bucket. When you use the CLI or the Amazon Web Services SDKs, for CreateSession, the session token refreshes automatically to avoid service interruptions when a session expires. The CLI or the Amazon Web Services SDKs use the bucket's default encryption configuration for the CreateSession request. It's not supported to override the encryption settings values in the CreateSession request. So in the Zonal endpoint API calls (except [CopyObject](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html) and [UploadPartCopy](https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html)), the encryption request headers must match the default encryption configuration of the directory bucket.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Specifies the Amazon Web Services KMS Encryption Context as an additional encryption context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject operations on this object. General purpose buckets - This value must be explicitly added during CopyObject operations if you want an additional encryption context for your object. For more information, see [Encryption context](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html#encryption-context) in the Amazon S3 User Guide. Directory buckets - You can optionally provide an explicit encryption context value. The value must match the default encryption context - the bucket Amazon Resource Name (ARN). An additional encryption context value is not supported.
    public var ssekmsEncryptionContext: Swift.String?
    /// Specifies the KMS key ID (Key ID, Key ARN, or Key Alias) to use for object encryption. If the KMS key doesn't exist in the same account that's issuing the command, you must use the full Key ARN not the Key ID. General purpose buckets - If you specify x-amz-server-side-encryption with aws:kms or aws:kms:dsse, this header specifies the ID (Key ID, Key ARN, or Key Alias) of the KMS key to use. If you specify x-amz-server-side-encryption:aws:kms or x-amz-server-side-encryption:aws:kms:dsse, but do not provide x-amz-server-side-encryption-aws-kms-key-id, Amazon S3 uses the Amazon Web Services managed key (aws/s3) to protect the data. Directory buckets - If you specify x-amz-server-side-encryption with aws:kms, the  x-amz-server-side-encryption-aws-kms-key-id header is implicitly assigned the ID of the KMS symmetric encryption customer managed key that's configured for your directory bucket's default encryption setting. If you want to specify the  x-amz-server-side-encryption-aws-kms-key-id header explicitly, you can only specify it with the ID (Key ID or Key ARN) of the KMS customer managed key that's configured for your directory bucket's default encryption setting. Otherwise, you get an HTTP 400 Bad Request error. Only use the key ID or key ARN. The key alias format of the KMS key isn't supported. Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [Amazon Web Services managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (aws/s3) isn't supported.
    public var ssekmsKeyId: Swift.String?
    /// By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class provides high durability and high availability. Depending on performance needs, you can specify a different Storage Class. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) in the Amazon S3 User Guide.
    ///
    /// * For directory buckets, only the S3 Express One Zone storage class is supported to store newly created objects.
    ///
    /// * Amazon S3 on Outposts only uses the OUTPOSTS Storage Class.
    public var storageClass: S3ClientTypes.StorageClass?
    /// The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For example, "Key1=Value1") This functionality is not supported for directory buckets.
    public var tagging: Swift.String?
    /// If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata. For information about object metadata, see [Object Key and Metadata](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html) in the Amazon S3 User Guide. In the following example, the request header sets the redirect to an object (anotherPage.html) in the same bucket: x-amz-website-redirect-location: /anotherPage.html In the following example, the request header sets the object redirect to another website: x-amz-website-redirect-location: http://www.example.com/ For more information about website hosting in Amazon S3, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) and [How to Configure Website Page Redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var websiteRedirectLocation: Swift.String?

    public init(
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        body: Smithy.ByteStream? = nil,
        bucket: Swift.String? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentMD5: Swift.String? = nil,
        contentType: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expires: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        ifNoneMatch: Swift.String? = nil,
        key: Swift.String? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagging: Swift.String? = nil,
        websiteRedirectLocation: Swift.String? = nil
    )
    {
        self.acl = acl
        self.body = body
        self.bucket = bucket
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumAlgorithm = checksumAlgorithm
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.contentType = contentType
        self.expectedBucketOwner = expectedBucketOwner
        self.expires = expires
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWriteACP = grantWriteACP
        self.ifNoneMatch = ifNoneMatch
        self.key = key
        self.metadata = metadata
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.requestPayer = requestPayer
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.storageClass = storageClass
        self.tagging = tagging
        self.websiteRedirectLocation = websiteRedirectLocation
    }
}

extension PutObjectInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectInput(acl: \(Swift.String(describing: acl)), body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), contentType: \(Swift.String(describing: contentType)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expires: \(Swift.String(describing: expires)), grantFullControl: \(Swift.String(describing: grantFullControl)), grantRead: \(Swift.String(describing: grantRead)), grantReadACP: \(Swift.String(describing: grantReadACP)), grantWriteACP: \(Swift.String(describing: grantWriteACP)), ifNoneMatch: \(Swift.String(describing: ifNoneMatch)), key: \(Swift.String(describing: key)), metadata: \(Swift.String(describing: metadata)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), requestPayer: \(Swift.String(describing: requestPayer)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), storageClass: \(Swift.String(describing: storageClass)), tagging: \(Swift.String(describing: tagging)), websiteRedirectLocation: \(Swift.String(describing: websiteRedirectLocation)), sseCustomerKey: \"CONTENT_REDACTED\", ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct PutObjectOutput: Swift.Sendable {
    /// Indicates whether the uploaded object uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag for the uploaded object. General purpose buckets - To ensure that data is not corrupted traversing the network, for objects where the ETag is the MD5 digest of the object, you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to the calculated MD5 value. Directory buckets - The ETag for the object in a directory bucket isn't the MD5 digest of the object.
    public var eTag: Swift.String?
    /// If the expiration is configured for the object (see [PutBucketLifecycleConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html)) in the Amazon S3 User Guide, the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide information about object expiration. The value of the rule-id is URL-encoded. This functionality is not supported for directory buckets.
    public var expiration: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3.
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the Amazon Web Services KMS Encryption Context to use for object encryption. The value of this header is a Base64-encoded string of a UTF-8 encoded JSON, which contains the encryption context as key-value pairs. This value is stored as object metadata and automatically gets passed on to Amazon Web Services KMS for future GetObject operations on this object.
    public var ssekmsEncryptionContext: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?
    /// Version ID of the object. If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID for the object being stored. Amazon S3 returns this ID in the response. When you enable versioning for a bucket, if Amazon S3 receives multiple write requests for the same object simultaneously, it stores all of the objects. For more information about versioning, see [Adding Objects to Versioning-Enabled Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html) in the Amazon S3 User Guide. For information about returning the versioning state of a bucket, see [GetBucketVersioning](https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html). This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        expiration: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsEncryptionContext: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.expiration = expiration
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsEncryptionContext = ssekmsEncryptionContext
        self.ssekmsKeyId = ssekmsKeyId
        self.versionId = versionId
    }
}

extension PutObjectOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutObjectOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), expiration: \(Swift.String(describing: expiration)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), versionId: \(Swift.String(describing: versionId)), ssekmsEncryptionContext: \"CONTENT_REDACTED\", ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct PutObjectAclInput: Swift.Sendable {
    /// Contains the elements that set the ACL permissions for an object per grantee.
    public var accessControlPolicy: S3ClientTypes.AccessControlPolicy?
    /// The canned ACL to apply to the object. For more information, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL).
    public var acl: S3ClientTypes.ObjectCannedACL?
    /// The bucket name that contains the object to which you want to attach the ACL. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The base64-encoded 128-bit MD5 digest of the data. This header must be used as a message integrity check to verify that the request body was not corrupted in transit. For more information, go to [RFC 1864.>](http://www.ietf.org/rfc/rfc1864.txt) For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Allows grantee the read, write, read ACP, and write ACP permissions on the bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantFullControl: Swift.String?
    /// Allows grantee to list the objects in the bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantRead: Swift.String?
    /// Allows grantee to read the bucket ACL. This functionality is not supported for Amazon S3 on Outposts.
    public var grantReadACP: Swift.String?
    /// Allows grantee to create new objects in the bucket. For the bucket and object owners of existing objects, also allows deletions and overwrites of those objects.
    public var grantWrite: Swift.String?
    /// Allows grantee to write the ACL for the applicable bucket. This functionality is not supported for Amazon S3 on Outposts.
    public var grantWriteACP: Swift.String?
    /// Key for which the PUT action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Version ID used to reference a specific version of the object. This functionality is not supported for directory buckets.
    public var versionId: Swift.String?

    public init(
        accessControlPolicy: S3ClientTypes.AccessControlPolicy? = nil,
        acl: S3ClientTypes.ObjectCannedACL? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        grantFullControl: Swift.String? = nil,
        grantRead: Swift.String? = nil,
        grantReadACP: Swift.String? = nil,
        grantWrite: Swift.String? = nil,
        grantWriteACP: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.accessControlPolicy = accessControlPolicy
        self.acl = acl
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.grantFullControl = grantFullControl
        self.grantRead = grantRead
        self.grantReadACP = grantReadACP
        self.grantWrite = grantWrite
        self.grantWriteACP = grantWriteACP
        self.key = key
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

public struct PutObjectAclOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

public struct PutObjectLegalHoldInput: Swift.Sendable {
    /// The bucket name containing the object that you want to place a legal hold on. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object that you want to place a legal hold on.
    /// This member is required.
    public var key: Swift.String?
    /// Container element for the legal hold configuration you want to apply to the specified object.
    public var legalHold: S3ClientTypes.ObjectLockLegalHold?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The version ID of the object that you want to place a legal hold on.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        legalHold: S3ClientTypes.ObjectLockLegalHold? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.legalHold = legalHold
        self.requestPayer = requestPayer
        self.versionId = versionId
    }
}

public struct PutObjectLegalHoldOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

public struct PutObjectLockConfigurationInput: Swift.Sendable {
    /// The bucket whose Object Lock configuration you want to create or replace.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The Object Lock configuration that you want to apply to the specified bucket.
    public var objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// A token to allow Object Lock to be enabled for an existing bucket.
    public var token: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        objectLockConfiguration: S3ClientTypes.ObjectLockConfiguration? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        token: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.objectLockConfiguration = objectLockConfiguration
        self.requestPayer = requestPayer
        self.token = token
    }
}

public struct PutObjectLockConfigurationOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

public struct PutObjectRetentionInput: Swift.Sendable {
    /// The bucket name that contains the object you want to apply this Object Retention configuration to. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates whether this action should bypass Governance-mode restrictions.
    public var bypassGovernanceRetention: Swift.Bool?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The key name for the object that you want to apply this Object Retention configuration to.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// The container element for the Object Retention configuration.
    public var retention: S3ClientTypes.ObjectLockRetention?
    /// The version ID for the object that you want to apply this Object Retention configuration to.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        bypassGovernanceRetention: Swift.Bool? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        retention: S3ClientTypes.ObjectLockRetention? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.bypassGovernanceRetention = bypassGovernanceRetention
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.retention = retention
        self.versionId = versionId
    }
}

public struct PutObjectRetentionOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil
    )
    {
        self.requestCharged = requestCharged
    }
}

public struct PutObjectTaggingInput: Swift.Sendable {
    /// The bucket name containing the object. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash for the request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Name of the object key.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Container for the TagSet and Tag elements
    /// This member is required.
    public var tagging: S3ClientTypes.Tagging?
    /// The versionId of the object that the tag-set will be added to.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        tagging: S3ClientTypes.Tagging? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.tagging = tagging
        self.versionId = versionId
    }
}

public struct PutObjectTaggingOutput: Swift.Sendable {
    /// The versionId of the object the tag-set was added to.
    public var versionId: Swift.String?

    public init(
        versionId: Swift.String? = nil
    )
    {
        self.versionId = versionId
    }
}

public struct PutPublicAccessBlockInput: Swift.Sendable {
    /// The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want to set.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The MD5 hash of the PutPublicAccessBlock request body. For requests made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the Amazon S3 User Guide.
    /// This member is required.
    public var publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        publicAccessBlockConfiguration: S3ClientTypes.PublicAccessBlockConfiguration? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
    }
}

/// This action is not allowed against this storage tier.
public struct ObjectAlreadyInActiveTierError: ClientRuntime.ModeledError, AWSClientRuntime.AWSS3ServiceError, ClientRuntime.HTTPError, Swift.Error {
    public static var typeName: Swift.String { "ObjectAlreadyInActiveTierError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?
    public internal(set) var requestID2: Swift.String?

    public init() { }
}

extension S3ClientTypes {

    public enum Tier: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bulk
        case expedited
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [Tier] {
            return [
                .bulk,
                .expedited,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bulk: return "Bulk"
            case .expedited: return "Expedited"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for S3 Glacier job parameters.
    public struct GlacierJobParameters: Swift.Sendable {
        /// Retrieval tier at which the restore will be processed.
        /// This member is required.
        public var tier: S3ClientTypes.Tier?

        public init(
            tier: S3ClientTypes.Tier? = nil
        )
        {
            self.tier = tier
        }
    }
}

extension S3ClientTypes {

    /// Contains the type of server-side encryption used.
    public struct Encryption: Swift.Sendable {
        /// The server-side encryption algorithm used when storing job results in Amazon S3 (for example, AES256, aws:kms).
        /// This member is required.
        public var encryptionType: S3ClientTypes.ServerSideEncryption?
        /// If the encryption type is aws:kms, this optional value can be used to specify the encryption context for the restore results.
        public var kmsContext: Swift.String?
        /// If the encryption type is aws:kms, this optional value specifies the ID of the symmetric encryption customer managed key to use for encryption of job results. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?

        public init(
            encryptionType: S3ClientTypes.ServerSideEncryption? = nil,
            kmsContext: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.encryptionType = encryptionType
            self.kmsContext = kmsContext
            self.kmsKeyId = kmsKeyId
        }
    }
}

extension S3ClientTypes.Encryption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Encryption(encryptionType: \(Swift.String(describing: encryptionType)), kmsContext: \(Swift.String(describing: kmsContext)), kmsKeyId: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// A metadata key-value pair to store with an object.
    public struct MetadataEntry: Swift.Sendable {
        /// Name of the object.
        public var name: Swift.String?
        /// Value of the object.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension S3ClientTypes {

    /// Describes an Amazon S3 location that will receive the results of the restore request.
    public struct S3Location: Swift.Sendable {
        /// A list of grants that control access to the staged results.
        public var accessControlList: [S3ClientTypes.Grant]?
        /// The name of the bucket where the restore results will be placed.
        /// This member is required.
        public var bucketName: Swift.String?
        /// The canned ACL to apply to the restore results.
        public var cannedACL: S3ClientTypes.ObjectCannedACL?
        /// Contains the type of server-side encryption used.
        public var encryption: S3ClientTypes.Encryption?
        /// The prefix that is prepended to the restore results for this request.
        /// This member is required.
        public var `prefix`: Swift.String?
        /// The class of storage used to store the restore results.
        public var storageClass: S3ClientTypes.StorageClass?
        /// The tag-set that is applied to the restore results.
        public var tagging: S3ClientTypes.Tagging?
        /// A list of metadata to store with the restore results in S3.
        public var userMetadata: [S3ClientTypes.MetadataEntry]?

        public init(
            accessControlList: [S3ClientTypes.Grant]? = nil,
            bucketName: Swift.String? = nil,
            cannedACL: S3ClientTypes.ObjectCannedACL? = nil,
            encryption: S3ClientTypes.Encryption? = nil,
            `prefix`: Swift.String? = nil,
            storageClass: S3ClientTypes.StorageClass? = nil,
            tagging: S3ClientTypes.Tagging? = nil,
            userMetadata: [S3ClientTypes.MetadataEntry]? = nil
        )
        {
            self.accessControlList = accessControlList
            self.bucketName = bucketName
            self.cannedACL = cannedACL
            self.encryption = encryption
            self.`prefix` = `prefix`
            self.storageClass = storageClass
            self.tagging = tagging
            self.userMetadata = userMetadata
        }
    }
}

extension S3ClientTypes {

    /// Describes the location where the restore job's output is stored.
    public struct OutputLocation: Swift.Sendable {
        /// Describes an S3 location that will receive the results of the restore request.
        public var s3: S3ClientTypes.S3Location?

        public init(
            s3: S3ClientTypes.S3Location? = nil
        )
        {
            self.s3 = s3
        }
    }
}

extension S3ClientTypes {

    public enum ExpressionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sql
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpressionType] {
            return [
                .sql
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sql: return "SQL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum CompressionType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bzip2
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionType] {
            return [
                .bzip2,
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bzip2: return "BZIP2"
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    public enum FileHeaderInfo: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case `none`
        case use
        case sdkUnknown(Swift.String)

        public static var allCases: [FileHeaderInfo] {
            return [
                .ignore,
                .none,
                .use
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "IGNORE"
            case .none: return "NONE"
            case .use: return "USE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
    public struct CSVInput: Swift.Sendable {
        /// Specifies that CSV field values may contain quoted record delimiters and such records should be allowed. Default value is FALSE. Setting this value to TRUE may lower performance.
        public var allowQuotedRecordDelimiter: Swift.Bool?
        /// A single character used to indicate that a row should be ignored when the character is present at the start of that row. You can specify any character to indicate a comment line. The default character is #. Default: #
        public var comments: Swift.String?
        /// A single character used to separate individual fields in a record. You can specify an arbitrary delimiter.
        public var fieldDelimiter: Swift.String?
        /// Describes the first line of input. Valid values are:
        ///
        /// * NONE: First line is not a header.
        ///
        /// * IGNORE: First line is a header, but you can't use the header values to indicate the column in an expression. You can use column position (such as _1, _2, …) to indicate the column (SELECT s._1 FROM OBJECT s).
        ///
        /// * Use: First line is a header, and you can use the header value to identify a column in an expression (SELECT "name" FROM OBJECT).
        public var fileHeaderInfo: S3ClientTypes.FileHeaderInfo?
        /// A single character used for escaping when the field delimiter is part of the value. For example, if the value is a, b, Amazon S3 wraps this field value in quotation marks, as follows: " a , b ". Type: String Default: " Ancestors: CSV
        public var quoteCharacter: Swift.String?
        /// A single character used for escaping the quotation mark character inside an already escaped value. For example, the value """ a , b """ is parsed as " a , b ".
        public var quoteEscapeCharacter: Swift.String?
        /// A single character used to separate individual records in the input. Instead of the default value, you can specify an arbitrary delimiter.
        public var recordDelimiter: Swift.String?

        public init(
            allowQuotedRecordDelimiter: Swift.Bool? = nil,
            comments: Swift.String? = nil,
            fieldDelimiter: Swift.String? = nil,
            fileHeaderInfo: S3ClientTypes.FileHeaderInfo? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.allowQuotedRecordDelimiter = allowQuotedRecordDelimiter
            self.comments = comments
            self.fieldDelimiter = fieldDelimiter
            self.fileHeaderInfo = fileHeaderInfo
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.recordDelimiter = recordDelimiter
        }
    }
}

extension S3ClientTypes {

    public enum JSONType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case document
        case lines
        case sdkUnknown(Swift.String)

        public static var allCases: [JSONType] {
            return [
                .document,
                .lines
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .document: return "DOCUMENT"
            case .lines: return "LINES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Specifies JSON as object's input serialization format.
    public struct JSONInput: Swift.Sendable {
        /// The type of JSON. Valid values: Document, Lines.
        public var type: S3ClientTypes.JSONType?

        public init(
            type: S3ClientTypes.JSONType? = nil
        )
        {
            self.type = type
        }
    }
}

extension S3ClientTypes {

    /// Container for Parquet.
    public struct ParquetInput: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// Describes the serialization format of the object.
    public struct InputSerialization: Swift.Sendable {
        /// Specifies object's compression format. Valid values: NONE, GZIP, BZIP2. Default Value: NONE.
        public var compressionType: S3ClientTypes.CompressionType?
        /// Describes the serialization of a CSV-encoded object.
        public var csv: S3ClientTypes.CSVInput?
        /// Specifies JSON as object's input serialization format.
        public var json: S3ClientTypes.JSONInput?
        /// Specifies Parquet as object's input serialization format.
        public var parquet: S3ClientTypes.ParquetInput?

        public init(
            compressionType: S3ClientTypes.CompressionType? = nil,
            csv: S3ClientTypes.CSVInput? = nil,
            json: S3ClientTypes.JSONInput? = nil,
            parquet: S3ClientTypes.ParquetInput? = nil
        )
        {
            self.compressionType = compressionType
            self.csv = csv
            self.json = json
            self.parquet = parquet
        }
    }
}

extension S3ClientTypes {

    public enum QuoteFields: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case always
        case asneeded
        case sdkUnknown(Swift.String)

        public static var allCases: [QuoteFields] {
            return [
                .always,
                .asneeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .asneeded: return "ASNEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
    public struct CSVOutput: Swift.Sendable {
        /// The value used to separate individual fields in a record. You can specify an arbitrary delimiter.
        public var fieldDelimiter: Swift.String?
        /// A single character used for escaping when the field delimiter is part of the value. For example, if the value is a, b, Amazon S3 wraps this field value in quotation marks, as follows: " a , b ".
        public var quoteCharacter: Swift.String?
        /// The single character used for escaping the quote character inside an already escaped value.
        public var quoteEscapeCharacter: Swift.String?
        /// Indicates whether to use quotation marks around output fields.
        ///
        /// * ALWAYS: Always use quotation marks for output fields.
        ///
        /// * ASNEEDED: Use quotation marks for output fields when needed.
        public var quoteFields: S3ClientTypes.QuoteFields?
        /// A single character used to separate individual records in the output. Instead of the default value, you can specify an arbitrary delimiter.
        public var recordDelimiter: Swift.String?

        public init(
            fieldDelimiter: Swift.String? = nil,
            quoteCharacter: Swift.String? = nil,
            quoteEscapeCharacter: Swift.String? = nil,
            quoteFields: S3ClientTypes.QuoteFields? = nil,
            recordDelimiter: Swift.String? = nil
        )
        {
            self.fieldDelimiter = fieldDelimiter
            self.quoteCharacter = quoteCharacter
            self.quoteEscapeCharacter = quoteEscapeCharacter
            self.quoteFields = quoteFields
            self.recordDelimiter = recordDelimiter
        }
    }
}

extension S3ClientTypes {

    /// Specifies JSON as request's output serialization format.
    public struct JSONOutput: Swift.Sendable {
        /// The value used to separate individual records in the output. If no value is specified, Amazon S3 uses a newline character ('\n').
        public var recordDelimiter: Swift.String?

        public init(
            recordDelimiter: Swift.String? = nil
        )
        {
            self.recordDelimiter = recordDelimiter
        }
    }
}

extension S3ClientTypes {

    /// Describes how results of the Select job are serialized.
    public struct OutputSerialization: Swift.Sendable {
        /// Describes the serialization of CSV-encoded Select results.
        public var csv: S3ClientTypes.CSVOutput?
        /// Specifies JSON as request's output serialization format.
        public var json: S3ClientTypes.JSONOutput?

        public init(
            csv: S3ClientTypes.CSVOutput? = nil,
            json: S3ClientTypes.JSONOutput? = nil
        )
        {
            self.csv = csv
            self.json = json
        }
    }
}

extension S3ClientTypes {

    /// Describes the parameters for Select job types.
    public struct SelectParameters: Swift.Sendable {
        /// The expression that is used to query the object.
        /// This member is required.
        public var expression: Swift.String?
        /// The type of the provided expression (for example, SQL).
        /// This member is required.
        public var expressionType: S3ClientTypes.ExpressionType?
        /// Describes the serialization format of the object.
        /// This member is required.
        public var inputSerialization: S3ClientTypes.InputSerialization?
        /// Describes how the results of the Select job are serialized.
        /// This member is required.
        public var outputSerialization: S3ClientTypes.OutputSerialization?

        public init(
            expression: Swift.String? = nil,
            expressionType: S3ClientTypes.ExpressionType? = nil,
            inputSerialization: S3ClientTypes.InputSerialization? = nil,
            outputSerialization: S3ClientTypes.OutputSerialization? = nil
        )
        {
            self.expression = expression
            self.expressionType = expressionType
            self.inputSerialization = inputSerialization
            self.outputSerialization = outputSerialization
        }
    }
}

extension S3ClientTypes {

    public enum RestoreRequestType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case select
        case sdkUnknown(Swift.String)

        public static var allCases: [RestoreRequestType] {
            return [
                .select
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .select: return "SELECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension S3ClientTypes {

    /// Container for restore job parameters.
    public struct RestoreRequest: Swift.Sendable {
        /// Lifetime of the active copy in days. Do not use with restores that specify OutputLocation. The Days element is required for regular restores, and must not be provided for select requests.
        public var days: Swift.Int?
        /// The optional description for the job.
        public var description: Swift.String?
        /// S3 Glacier related parameters pertaining to this job. Do not use with restores that specify OutputLocation.
        public var glacierJobParameters: S3ClientTypes.GlacierJobParameters?
        /// Describes the location where the restore job's output is stored.
        public var outputLocation: S3ClientTypes.OutputLocation?
        /// Describes the parameters for Select job types.
        public var selectParameters: S3ClientTypes.SelectParameters?
        /// Retrieval tier at which the restore will be processed.
        public var tier: S3ClientTypes.Tier?
        /// Type of restore request.
        public var type: S3ClientTypes.RestoreRequestType?

        public init(
            days: Swift.Int? = nil,
            description: Swift.String? = nil,
            glacierJobParameters: S3ClientTypes.GlacierJobParameters? = nil,
            outputLocation: S3ClientTypes.OutputLocation? = nil,
            selectParameters: S3ClientTypes.SelectParameters? = nil,
            tier: S3ClientTypes.Tier? = nil,
            type: S3ClientTypes.RestoreRequestType? = nil
        )
        {
            self.days = days
            self.description = description
            self.glacierJobParameters = glacierJobParameters
            self.outputLocation = outputLocation
            self.selectParameters = selectParameters
            self.tier = tier
            self.type = type
        }
    }
}

public struct RestoreObjectInput: Swift.Sendable {
    /// The bucket name containing the object to restore. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the action was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Container for restore job parameters.
    public var restoreRequest: S3ClientTypes.RestoreRequest?
    /// VersionId used to reference a specific version of the object.
    public var versionId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        restoreRequest: S3ClientTypes.RestoreRequest? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.requestPayer = requestPayer
        self.restoreRequest = restoreRequest
        self.versionId = versionId
    }
}

public struct RestoreObjectOutput: Swift.Sendable {
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Indicates the path in the provided S3 output location where Select results will be restored to.
    public var restoreOutputPath: Swift.String?

    public init(
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        restoreOutputPath: Swift.String? = nil
    )
    {
        self.requestCharged = requestCharged
        self.restoreOutputPath = restoreOutputPath
    }
}

extension S3ClientTypes {

    /// Container for specifying if periodic QueryProgress messages should be sent.
    public struct RequestProgress: Swift.Sendable {
        /// Specifies whether periodic QueryProgress frames should be sent. Valid values: TRUE, FALSE. Default value: FALSE.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }
}

extension S3ClientTypes {

    /// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
    public struct ScanRange: Swift.Sendable {
        /// Specifies the end of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is one less than the size of the object being queried. If only the End parameter is supplied, it is interpreted to mean scan the last N bytes of the file. For example, 50 means scan the last 50 bytes.
        public var end: Swift.Int?
        /// Specifies the start of the byte range. This parameter is optional. Valid values: non-negative integers. The default value is 0. If only start is supplied, it means scan from that point to the end of the file. For example, 50 means scan from byte 50 until the end of the file.
        public var start: Swift.Int?

        public init(
            end: Swift.Int? = nil,
            start: Swift.Int? = nil
        )
        {
            self.end = end
            self.start = start
        }
    }
}

/// Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. For more information, see [S3Select API Documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html).
public struct SelectObjectContentInput: Swift.Sendable {
    /// The S3 bucket.
    /// This member is required.
    public var bucket: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The expression that is used to query the object.
    /// This member is required.
    public var expression: Swift.String?
    /// The type of the provided expression (for example, SQL).
    /// This member is required.
    public var expressionType: S3ClientTypes.ExpressionType?
    /// Describes the format of the data in the object that is being queried.
    /// This member is required.
    public var inputSerialization: S3ClientTypes.InputSerialization?
    /// The object key.
    /// This member is required.
    public var key: Swift.String?
    /// Describes the format of the data that you want Amazon S3 to return in response.
    /// This member is required.
    public var outputSerialization: S3ClientTypes.OutputSerialization?
    /// Specifies if periodic request progress information should be enabled.
    public var requestProgress: S3ClientTypes.RequestProgress?
    /// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range. ScanRangemay be used in the following ways:
    ///
    /// * 50100 - process only the records starting between the bytes 50 and 100 (inclusive, counting from zero)
    ///
    /// * 50 - process only the records starting after the byte 50
    ///
    /// * 50 - process only the records within the last 50 bytes of the file.
    public var scanRange: S3ClientTypes.ScanRange?
    /// The server-side encryption (SSE) algorithm used to encrypt the object. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerAlgorithm: Swift.String?
    /// The server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerKey: Swift.String?
    /// The MD5 server-side encryption (SSE) customer managed key. This parameter is needed only when the object was created using a checksum algorithm. For more information, see [Protecting data using SSE-C keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html) in the Amazon S3 User Guide.
    public var sseCustomerKeyMD5: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expression: Swift.String? = nil,
        expressionType: S3ClientTypes.ExpressionType? = nil,
        inputSerialization: S3ClientTypes.InputSerialization? = nil,
        key: Swift.String? = nil,
        outputSerialization: S3ClientTypes.OutputSerialization? = nil,
        requestProgress: S3ClientTypes.RequestProgress? = nil,
        scanRange: S3ClientTypes.ScanRange? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.expectedBucketOwner = expectedBucketOwner
        self.expression = expression
        self.expressionType = expressionType
        self.inputSerialization = inputSerialization
        self.key = key
        self.outputSerialization = outputSerialization
        self.requestProgress = requestProgress
        self.scanRange = scanRange
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
    }
}

extension SelectObjectContentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectObjectContentInput(bucket: \(Swift.String(describing: bucket)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expression: \(Swift.String(describing: expression)), expressionType: \(Swift.String(describing: expressionType)), inputSerialization: \(Swift.String(describing: inputSerialization)), key: \(Swift.String(describing: key)), outputSerialization: \(Swift.String(describing: outputSerialization)), requestProgress: \(Swift.String(describing: requestProgress)), scanRange: \(Swift.String(describing: scanRange)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    ///
    public struct ContinuationEvent: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// A message that indicates the request is complete and no more messages will be sent. You should not assume that the request is complete until the client receives an EndEvent.
    public struct EndEvent: Swift.Sendable {

        public init() { }
    }
}

extension S3ClientTypes {

    /// This data type contains information about progress of an operation.
    public struct Progress: Swift.Sendable {
        /// The current number of uncompressed object bytes processed.
        public var bytesProcessed: Swift.Int?
        /// The current number of bytes of records payload data returned.
        public var bytesReturned: Swift.Int?
        /// The current number of object bytes scanned.
        public var bytesScanned: Swift.Int?

        public init(
            bytesProcessed: Swift.Int? = nil,
            bytesReturned: Swift.Int? = nil,
            bytesScanned: Swift.Int? = nil
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }
}

extension S3ClientTypes {

    /// This data type contains information about the progress event of an operation.
    public struct ProgressEvent: Swift.Sendable {
        /// The Progress event details.
        public var details: S3ClientTypes.Progress?

        public init(
            details: S3ClientTypes.Progress? = nil
        )
        {
            self.details = details
        }
    }
}

extension S3ClientTypes {

    /// The container for the records event.
    public struct RecordsEvent: Swift.Sendable {
        /// The byte array of partial, one or more result records. S3 Select doesn't guarantee that a record will be self-contained in one record frame. To ensure continuous streaming of data, S3 Select might split the same record across multiple record frames instead of aggregating the results in memory. Some S3 clients (for example, the SDK for Java) handle this behavior by creating a ByteStream out of the response by default. Other clients might not handle this behavior by default. In those cases, you must aggregate the results on the client side and parse the response.
        public var payload: Foundation.Data?

        public init(
            payload: Foundation.Data? = nil
        )
        {
            self.payload = payload
        }
    }
}

extension S3ClientTypes {

    /// Container for the stats details.
    public struct Stats: Swift.Sendable {
        /// The total number of uncompressed object bytes processed.
        public var bytesProcessed: Swift.Int?
        /// The total number of bytes of records payload data returned.
        public var bytesReturned: Swift.Int?
        /// The total number of object bytes scanned.
        public var bytesScanned: Swift.Int?

        public init(
            bytesProcessed: Swift.Int? = nil,
            bytesReturned: Swift.Int? = nil,
            bytesScanned: Swift.Int? = nil
        )
        {
            self.bytesProcessed = bytesProcessed
            self.bytesReturned = bytesReturned
            self.bytesScanned = bytesScanned
        }
    }
}

extension S3ClientTypes {

    /// Container for the Stats Event.
    public struct StatsEvent: Swift.Sendable {
        /// The Stats event details.
        public var details: S3ClientTypes.Stats?

        public init(
            details: S3ClientTypes.Stats? = nil
        )
        {
            self.details = details
        }
    }
}

extension S3ClientTypes {

    /// The container for selecting objects from a content event stream.
    public enum SelectObjectContentEventStream: Swift.Sendable {
        /// The Records Event.
        case records(S3ClientTypes.RecordsEvent)
        /// The Stats Event.
        case stats(S3ClientTypes.StatsEvent)
        /// The Progress Event.
        case progress(S3ClientTypes.ProgressEvent)
        /// The Continuation Event.
        case cont(S3ClientTypes.ContinuationEvent)
        /// The End Event.
        case end(S3ClientTypes.EndEvent)
        case sdkUnknown(Swift.String)
    }
}

public struct SelectObjectContentOutput: Swift.Sendable {
    /// The array of results.
    public var payload: AsyncThrowingStream<S3ClientTypes.SelectObjectContentEventStream, Swift.Error>?

    public init(
        payload: AsyncThrowingStream<S3ClientTypes.SelectObjectContentEventStream, Swift.Error>? = nil
    )
    {
        self.payload = payload
    }
}

public struct UploadPartInput: Swift.Sendable {
    /// Object data.
    public var body: Smithy.ByteStream?
    /// The name of the bucket to which the multipart upload was initiated. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Indicates the algorithm used to create the checksum for the object when you use the SDK. This header will not provide any additional functionality if you don't use the SDK. When you send this header, there must be a corresponding x-amz-checksum or x-amz-trailer header sent. Otherwise, Amazon S3 fails the request with the HTTP status code 400 Bad Request. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. If you provide an individual checksum, Amazon S3 ignores any provided ChecksumAlgorithm parameter. This checksum algorithm must be the same for all parts and it match the checksum value supplied in the CreateMultipartUpload request.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32 checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 32-bit CRC-32C checksum of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically.
    public var contentLength: Swift.Int?
    /// The base64-encoded 128-bit MD5 digest of the part data. This parameter is auto-populated when using the command from the CLI. This parameter is required if object lock parameters are specified. This functionality is not supported for directory buckets.
    public var contentMD5: Swift.String?
    /// The account ID of the expected bucket owner. If the account ID that you provide does not match the actual owner of the bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of part being uploaded. This is a positive integer between 1 and 10,000.
    /// This member is required.
    public var partNumber: Swift.Int?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request. This functionality is not supported for directory buckets.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose part is being uploaded.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        body: Smithy.ByteStream? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.body = body
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentLength = contentLength
        self.contentMD5 = contentMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension UploadPartInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartInput(body: \(Swift.String(describing: body)), bucket: \(Swift.String(describing: bucket)), checksumAlgorithm: \(Swift.String(describing: checksumAlgorithm)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentLength: \(Swift.String(describing: contentLength)), contentMD5: \(Swift.String(describing: contentMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), sseCustomerKey: \"CONTENT_REDACTED\")"}
}

public struct UploadPartOutput: Swift.Sendable {
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32: Swift.String?
    /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumCRC32C: Swift.String?
    /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA1: Swift.String?
    /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
    public var checksumSHA256: Swift.String?
    /// Entity tag for the uploaded object.
    public var eTag: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        eTag: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.eTag = eTag
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
    }
}

extension UploadPartOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), eTag: \(Swift.String(describing: eTag)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct UploadPartCopyInput: Swift.Sendable {
    /// The bucket name. Directory buckets - When you use this operation with a directory bucket, you must use virtual-hosted-style requests in the format  Bucket_name.s3express-az_id.region.amazonaws.com. Path-style requests are not supported. Directory bucket names must be unique in the chosen Availability Zone. Bucket names must follow the format  bucket_base_name--az-id--x-s3 (for example,  DOC-EXAMPLE-BUCKET--usw2-az1--x-s3). For information about bucket naming restrictions, see [Directory bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/directory-bucket-naming-rules.html) in the Amazon S3 User Guide. Access points - When you use this action with an access point, you must provide the alias of the access point in place of the bucket name or specify the access point ARN. When using the access point ARN, you must direct requests to the access point hostname. The access point hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see [Using access points](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html) in the Amazon S3 User Guide. Access points and Object Lambda access points are not supported by directory buckets. S3 on Outposts - When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see [What is S3 on Outposts?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html) in the Amazon S3 User Guide.
    /// This member is required.
    public var bucket: Swift.String?
    /// Specifies the source object for the copy operation. You specify the value in one of two formats, depending on whether you want to access the source object through an [access point](https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points.html):
    ///
    /// * For objects not accessed through an access point, specify the name of the source bucket and key of the source object, separated by a slash (/). For example, to copy the object reports/january.pdf from the bucket awsexamplebucket, use awsexamplebucket/reports/january.pdf. The value must be URL-encoded.
    ///
    /// * For objects accessed through access points, specify the Amazon Resource Name (ARN) of the object as accessed through the access point, in the format arn:aws:s3:::accesspoint//object/. For example, to copy the object reports/january.pdf through access point my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf. The value must be URL encoded.
    ///
    /// * Amazon S3 supports copy operations using Access points only when the source and destination buckets are in the same Amazon Web Services Region.
    ///
    /// * Access points are not supported by directory buckets.
    ///
    ///
    /// Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the object as accessed in the format arn:aws:s3-outposts:::outpost//object/. For example, to copy the object reports/january.pdf through outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf. The value must be URL-encoded.
    ///
    ///
    /// If your bucket has versioning enabled, you could have multiple versions of the same object. By default, x-amz-copy-source identifies the current version of the source object to copy. To copy a specific version of the source object to copy, append ?versionId= to the x-amz-copy-source request header (for example, x-amz-copy-source: /awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If the current version is a delete marker and you don't specify a versionId in the x-amz-copy-source request header, Amazon S3 returns a 404 Not Found error, because the object does not exist. If you specify versionId in the x-amz-copy-source and the versionId is a delete marker, Amazon S3 returns an HTTP 400 Bad Request error, because you are not allowed to specify a delete marker as a version for the x-amz-copy-source. Directory buckets - S3 Versioning isn't enabled and supported for directory buckets.
    /// This member is required.
    public var copySource: Swift.String?
    /// Copies the object if its entity tag (ETag) matches the specified tag. If both of the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request as follows: x-amz-copy-source-if-match condition evaluates to true, and; x-amz-copy-source-if-unmodified-since condition evaluates to false; Amazon S3 returns 200 OK and copies the data.
    public var copySourceIfMatch: Swift.String?
    /// Copies the object if it has been modified since the specified time. If both of the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request as follows: x-amz-copy-source-if-none-match condition evaluates to false, and; x-amz-copy-source-if-modified-since condition evaluates to true; Amazon S3 returns 412 Precondition Failed response code.
    public var copySourceIfModifiedSince: Foundation.Date?
    /// Copies the object if its entity tag (ETag) is different than the specified ETag. If both of the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present in the request as follows: x-amz-copy-source-if-none-match condition evaluates to false, and; x-amz-copy-source-if-modified-since condition evaluates to true; Amazon S3 returns 412 Precondition Failed response code.
    public var copySourceIfNoneMatch: Swift.String?
    /// Copies the object if it hasn't been modified since the specified time. If both of the x-amz-copy-source-if-match and x-amz-copy-source-if-unmodified-since headers are present in the request as follows: x-amz-copy-source-if-match condition evaluates to true, and; x-amz-copy-source-if-unmodified-since condition evaluates to false; Amazon S3 returns 200 OK and copies the data.
    public var copySourceIfUnmodifiedSince: Foundation.Date?
    /// The range of bytes to copy from the source object. The range value must use the form bytes=first-last, where the first and last are the zero-based byte offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes of the source. You can copy a range only if the source object is greater than 5 MB.
    public var copySourceRange: Swift.String?
    /// Specifies the algorithm to use when decrypting the source object (for example, AES256). This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use to decrypt the source object. The encryption key provided in this header must be one that was used when the source object was created. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceSSECustomerKeyMD5: Swift.String?
    /// The account ID of the expected destination bucket owner. If the account ID that you provide does not match the actual owner of the destination bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// The account ID of the expected source bucket owner. If the account ID that you provide does not match the actual owner of the source bucket, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedSourceBucketOwner: Swift.String?
    /// Object key for which the multipart upload was initiated.
    /// This member is required.
    public var key: Swift.String?
    /// Part number of part being copied. This is a positive integer between 1 and 10,000.
    /// This member is required.
    public var partNumber: Swift.Int?
    /// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. If either the source or destination S3 bucket has Requester Pays enabled, the requester will pay for corresponding charges to copy the object. For information about downloading objects from Requester Pays buckets, see [Downloading Objects in Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html) in the Amazon S3 User Guide. This functionality is not supported for directory buckets.
    public var requestPayer: S3ClientTypes.RequestPayer?
    /// Specifies the algorithm to use when encrypting the object (for example, AES256). This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerAlgorithm: Swift.String?
    /// Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This value is used to store the object and then it is discarded; Amazon S3 does not store the encryption key. The key must be appropriate for use with the algorithm specified in the x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption key specified in the initiate multipart upload request. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKey: Swift.String?
    /// Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a message integrity check to ensure that the encryption key was transmitted without error. This functionality is not supported when the destination bucket is a directory bucket.
    public var sseCustomerKeyMD5: Swift.String?
    /// Upload ID identifying the multipart upload whose part is being copied.
    /// This member is required.
    public var uploadId: Swift.String?

    public init(
        bucket: Swift.String? = nil,
        copySource: Swift.String? = nil,
        copySourceIfMatch: Swift.String? = nil,
        copySourceIfModifiedSince: Foundation.Date? = nil,
        copySourceIfNoneMatch: Swift.String? = nil,
        copySourceIfUnmodifiedSince: Foundation.Date? = nil,
        copySourceRange: Swift.String? = nil,
        copySourceSSECustomerAlgorithm: Swift.String? = nil,
        copySourceSSECustomerKey: Swift.String? = nil,
        copySourceSSECustomerKeyMD5: Swift.String? = nil,
        expectedBucketOwner: Swift.String? = nil,
        expectedSourceBucketOwner: Swift.String? = nil,
        key: Swift.String? = nil,
        partNumber: Swift.Int? = nil,
        requestPayer: S3ClientTypes.RequestPayer? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKey: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.copySource = copySource
        self.copySourceIfMatch = copySourceIfMatch
        self.copySourceIfModifiedSince = copySourceIfModifiedSince
        self.copySourceIfNoneMatch = copySourceIfNoneMatch
        self.copySourceIfUnmodifiedSince = copySourceIfUnmodifiedSince
        self.copySourceRange = copySourceRange
        self.copySourceSSECustomerAlgorithm = copySourceSSECustomerAlgorithm
        self.copySourceSSECustomerKey = copySourceSSECustomerKey
        self.copySourceSSECustomerKeyMD5 = copySourceSSECustomerKeyMD5
        self.expectedBucketOwner = expectedBucketOwner
        self.expectedSourceBucketOwner = expectedSourceBucketOwner
        self.key = key
        self.partNumber = partNumber
        self.requestPayer = requestPayer
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKey = sseCustomerKey
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.uploadId = uploadId
    }
}

extension UploadPartCopyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyInput(bucket: \(Swift.String(describing: bucket)), copySource: \(Swift.String(describing: copySource)), copySourceIfMatch: \(Swift.String(describing: copySourceIfMatch)), copySourceIfModifiedSince: \(Swift.String(describing: copySourceIfModifiedSince)), copySourceIfNoneMatch: \(Swift.String(describing: copySourceIfNoneMatch)), copySourceIfUnmodifiedSince: \(Swift.String(describing: copySourceIfUnmodifiedSince)), copySourceRange: \(Swift.String(describing: copySourceRange)), copySourceSSECustomerAlgorithm: \(Swift.String(describing: copySourceSSECustomerAlgorithm)), copySourceSSECustomerKeyMD5: \(Swift.String(describing: copySourceSSECustomerKeyMD5)), expectedBucketOwner: \(Swift.String(describing: expectedBucketOwner)), expectedSourceBucketOwner: \(Swift.String(describing: expectedSourceBucketOwner)), key: \(Swift.String(describing: key)), partNumber: \(Swift.String(describing: partNumber)), requestPayer: \(Swift.String(describing: requestPayer)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), uploadId: \(Swift.String(describing: uploadId)), copySourceSSECustomerKey: \"CONTENT_REDACTED\", sseCustomerKey: \"CONTENT_REDACTED\")"}
}

extension S3ClientTypes {

    /// Container for all response elements.
    public struct CopyPartResult: Swift.Sendable {
        /// The base64-encoded, 32-bit CRC-32 checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32: Swift.String?
        /// The base64-encoded, 32-bit CRC-32C checksum of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumCRC32C: Swift.String?
        /// The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded with the object. When you use the API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA1: Swift.String?
        /// The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded with the object. When you use an API operation on an object that was uploaded using multipart uploads, this value may not be a direct checksum value of the full object. Instead, it's a calculation based on the checksum values of each individual part. For more information about how checksums are calculated with multipart uploads, see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums) in the Amazon S3 User Guide.
        public var checksumSHA256: Swift.String?
        /// Entity tag of the object.
        public var eTag: Swift.String?
        /// Date and time at which the object was uploaded.
        public var lastModified: Foundation.Date?

        public init(
            checksumCRC32: Swift.String? = nil,
            checksumCRC32C: Swift.String? = nil,
            checksumSHA1: Swift.String? = nil,
            checksumSHA256: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: Foundation.Date? = nil
        )
        {
            self.checksumCRC32 = checksumCRC32
            self.checksumCRC32C = checksumCRC32C
            self.checksumSHA1 = checksumSHA1
            self.checksumSHA256 = checksumSHA256
            self.eTag = eTag
            self.lastModified = lastModified
        }
    }
}

public struct UploadPartCopyOutput: Swift.Sendable {
    /// Indicates whether the multipart upload uses an S3 Bucket Key for server-side encryption with Key Management Service (KMS) keys (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Container for all response elements.
    public var copyPartResult: S3ClientTypes.CopyPartResult?
    /// The version of the source object that was copied, if you have enabled versioning on the source bucket. This functionality is not supported when the source object is in a directory bucket.
    public var copySourceVersionId: Swift.String?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// The server-side encryption algorithm used when you store this object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to confirm the encryption algorithm that's used. This functionality is not supported for directory buckets.
    public var sseCustomerAlgorithm: Swift.String?
    /// If server-side encryption with a customer-provided encryption key was requested, the response will include this header to provide the round-trip message integrity verification of the customer-provided encryption key. This functionality is not supported for directory buckets.
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, indicates the ID of the KMS key that was used for object encryption.
    public var ssekmsKeyId: Swift.String?

    public init(
        bucketKeyEnabled: Swift.Bool? = nil,
        copyPartResult: S3ClientTypes.CopyPartResult? = nil,
        copySourceVersionId: Swift.String? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil
    )
    {
        self.bucketKeyEnabled = bucketKeyEnabled
        self.copyPartResult = copyPartResult
        self.copySourceVersionId = copySourceVersionId
        self.requestCharged = requestCharged
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
    }
}

extension UploadPartCopyOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UploadPartCopyOutput(bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), copyPartResult: \(Swift.String(describing: copyPartResult)), copySourceVersionId: \(Swift.String(describing: copySourceVersionId)), requestCharged: \(Swift.String(describing: requestCharged)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

public struct WriteGetObjectResponseInput: Swift.Sendable {
    /// Indicates that a range of bytes was specified.
    public var acceptRanges: Swift.String?
    /// The object data.
    public var body: Smithy.ByteStream?
    /// Indicates whether the object stored in Amazon S3 uses an S3 bucket key for server-side encryption with Amazon Web Services KMS (SSE-KMS).
    public var bucketKeyEnabled: Swift.Bool?
    /// Specifies caching behavior along the request/reply chain.
    public var cacheControl: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 32-bit CRC-32 checksum of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumCRC32: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 32-bit CRC-32C checksum of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumCRC32C: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 160-bit SHA-1 digest of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumSHA1: Swift.String?
    /// This header can be used as a data integrity check to verify that the data received is the same data that was originally sent. This specifies the base64-encoded, 256-bit SHA-256 digest of the object returned by the Object Lambda function. This may not match the checksum for the object stored in Amazon S3. Amazon S3 will perform validation of the checksum values only when the original GetObject request required checksum validation. For more information about checksums, see [Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html) in the Amazon S3 User Guide. Only one checksum header can be specified at a time. If you supply multiple checksum headers, this request will fail.
    public var checksumSHA256: Swift.String?
    /// Specifies presentational information for the object.
    public var contentDisposition: Swift.String?
    /// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
    public var contentEncoding: Swift.String?
    /// The language the content is in.
    public var contentLanguage: Swift.String?
    /// The size of the content body in bytes.
    public var contentLength: Swift.Int?
    /// The portion of the object returned in the response.
    public var contentRange: Swift.String?
    /// A standard MIME type describing the format of the object data.
    public var contentType: Swift.String?
    /// Specifies whether an object stored in Amazon S3 is (true) or is not (false) a delete marker.
    public var deleteMarker: Swift.Bool?
    /// An opaque identifier assigned by a web server to a specific version of a resource found at a URL.
    public var eTag: Swift.String?
    /// A string that uniquely identifies an error condition. Returned in the  tag of the error XML response for a corresponding GetObject call. Cannot be used with a successful StatusCode header or when the transformed object is provided in the body. All error codes from S3 are sentence-cased. The regular expression (regex) value is "^[A-Z][a-zA-Z]+$".
    public var errorCode: Swift.String?
    /// Contains a generic description of the error condition. Returned in the tag of the error XML response for a corresponding GetObject call. Cannot be used with a successful StatusCode header or when the transformed object is provided in body.
    public var errorMessage: Swift.String?
    /// If the object expiration is configured (see PUT Bucket lifecycle), the response includes this header. It includes the expiry-date and rule-id key-value pairs that provide the object expiration information. The value of the rule-id is URL-encoded.
    public var expiration: Swift.String?
    /// The date and time at which the object is no longer cacheable.
    public var expires: Swift.String?
    /// The date and time that the object was last modified.
    public var lastModified: Foundation.Date?
    /// A map of metadata to store with the object in S3.
    public var metadata: [Swift.String: Swift.String]?
    /// Set to the number of metadata entries not returned in x-amz-meta headers. This can happen if you create metadata using an API like SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you can create metadata whose values are not legal HTTP headers.
    public var missingMeta: Swift.Int?
    /// Indicates whether an object stored in Amazon S3 has an active legal hold.
    public var objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus?
    /// Indicates whether an object stored in Amazon S3 has Object Lock enabled. For more information about S3 Object Lock, see [Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock.html).
    public var objectLockMode: S3ClientTypes.ObjectLockMode?
    /// The date and time when Object Lock is configured to expire.
    public var objectLockRetainUntilDate: Foundation.Date?
    /// The count of parts this object has.
    public var partsCount: Swift.Int?
    /// Indicates if request involves bucket that is either a source or destination in a Replication rule. For more information about S3 Replication, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html).
    public var replicationStatus: S3ClientTypes.ReplicationStatus?
    /// If present, indicates that the requester was successfully charged for the request. This functionality is not supported for directory buckets.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Route prefix to the HTTP URL generated.
    /// This member is required.
    public var requestRoute: Swift.String?
    /// A single use encrypted token that maps WriteGetObjectResponse to the end user GetObject request.
    /// This member is required.
    public var requestToken: Swift.String?
    /// Provides information about object restoration operation and expiration time of the restored object copy.
    public var restore: Swift.String?
    /// The server-side encryption algorithm used when storing requested object in Amazon S3 (for example, AES256, aws:kms).
    public var serverSideEncryption: S3ClientTypes.ServerSideEncryption?
    /// Encryption algorithm used if server-side encryption with a customer-provided encryption key was specified for object stored in Amazon S3.
    public var sseCustomerAlgorithm: Swift.String?
    /// 128-bit MD5 digest of customer-provided encryption key used in Amazon S3 to encrypt data stored in S3. For more information, see [Protecting data using server-side encryption with customer-provided encryption keys (SSE-C)](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerSideEncryptionCustomerKeys.html).
    public var sseCustomerKeyMD5: Swift.String?
    /// If present, specifies the ID (Key ID, Key ARN, or Key Alias) of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric encryption customer managed key that was used for stored in Amazon S3 object.
    public var ssekmsKeyId: Swift.String?
    /// The integer status code for an HTTP response of a corresponding GetObject request. The following is a list of status codes.
    ///
    /// * 200 - OK
    ///
    /// * 206 - Partial Content
    ///
    /// * 304 - Not Modified
    ///
    /// * 400 - Bad Request
    ///
    /// * 401 - Unauthorized
    ///
    /// * 403 - Forbidden
    ///
    /// * 404 - Not Found
    ///
    /// * 405 - Method Not Allowed
    ///
    /// * 409 - Conflict
    ///
    /// * 411 - Length Required
    ///
    /// * 412 - Precondition Failed
    ///
    /// * 416 - Range Not Satisfiable
    ///
    /// * 500 - Internal Server Error
    ///
    /// * 503 - Service Unavailable
    public var statusCode: Swift.Int?
    /// Provides storage class information of the object. Amazon S3 returns this header for all objects except for S3 Standard storage class objects. For more information, see [Storage Classes](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html).
    public var storageClass: S3ClientTypes.StorageClass?
    /// The number of tags, if any, on the object.
    public var tagCount: Swift.Int?
    /// An ID used to reference a specific version of the object.
    public var versionId: Swift.String?

    public init(
        acceptRanges: Swift.String? = nil,
        body: Smithy.ByteStream? = nil,
        bucketKeyEnabled: Swift.Bool? = nil,
        cacheControl: Swift.String? = nil,
        checksumCRC32: Swift.String? = nil,
        checksumCRC32C: Swift.String? = nil,
        checksumSHA1: Swift.String? = nil,
        checksumSHA256: Swift.String? = nil,
        contentDisposition: Swift.String? = nil,
        contentEncoding: Swift.String? = nil,
        contentLanguage: Swift.String? = nil,
        contentLength: Swift.Int? = nil,
        contentRange: Swift.String? = nil,
        contentType: Swift.String? = nil,
        deleteMarker: Swift.Bool? = nil,
        eTag: Swift.String? = nil,
        errorCode: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        expiration: Swift.String? = nil,
        expires: Swift.String? = nil,
        lastModified: Foundation.Date? = nil,
        metadata: [Swift.String: Swift.String]? = nil,
        missingMeta: Swift.Int? = nil,
        objectLockLegalHoldStatus: S3ClientTypes.ObjectLockLegalHoldStatus? = nil,
        objectLockMode: S3ClientTypes.ObjectLockMode? = nil,
        objectLockRetainUntilDate: Foundation.Date? = nil,
        partsCount: Swift.Int? = nil,
        replicationStatus: S3ClientTypes.ReplicationStatus? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        requestRoute: Swift.String? = nil,
        requestToken: Swift.String? = nil,
        restore: Swift.String? = nil,
        serverSideEncryption: S3ClientTypes.ServerSideEncryption? = nil,
        sseCustomerAlgorithm: Swift.String? = nil,
        sseCustomerKeyMD5: Swift.String? = nil,
        ssekmsKeyId: Swift.String? = nil,
        statusCode: Swift.Int? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        tagCount: Swift.Int? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.acceptRanges = acceptRanges
        self.body = body
        self.bucketKeyEnabled = bucketKeyEnabled
        self.cacheControl = cacheControl
        self.checksumCRC32 = checksumCRC32
        self.checksumCRC32C = checksumCRC32C
        self.checksumSHA1 = checksumSHA1
        self.checksumSHA256 = checksumSHA256
        self.contentDisposition = contentDisposition
        self.contentEncoding = contentEncoding
        self.contentLanguage = contentLanguage
        self.contentLength = contentLength
        self.contentRange = contentRange
        self.contentType = contentType
        self.deleteMarker = deleteMarker
        self.eTag = eTag
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.expiration = expiration
        self.expires = expires
        self.lastModified = lastModified
        self.metadata = metadata
        self.missingMeta = missingMeta
        self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
        self.objectLockMode = objectLockMode
        self.objectLockRetainUntilDate = objectLockRetainUntilDate
        self.partsCount = partsCount
        self.replicationStatus = replicationStatus
        self.requestCharged = requestCharged
        self.requestRoute = requestRoute
        self.requestToken = requestToken
        self.restore = restore
        self.serverSideEncryption = serverSideEncryption
        self.sseCustomerAlgorithm = sseCustomerAlgorithm
        self.sseCustomerKeyMD5 = sseCustomerKeyMD5
        self.ssekmsKeyId = ssekmsKeyId
        self.statusCode = statusCode
        self.storageClass = storageClass
        self.tagCount = tagCount
        self.versionId = versionId
    }
}

extension WriteGetObjectResponseInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WriteGetObjectResponseInput(acceptRanges: \(Swift.String(describing: acceptRanges)), body: \(Swift.String(describing: body)), bucketKeyEnabled: \(Swift.String(describing: bucketKeyEnabled)), cacheControl: \(Swift.String(describing: cacheControl)), checksumCRC32: \(Swift.String(describing: checksumCRC32)), checksumCRC32C: \(Swift.String(describing: checksumCRC32C)), checksumSHA1: \(Swift.String(describing: checksumSHA1)), checksumSHA256: \(Swift.String(describing: checksumSHA256)), contentDisposition: \(Swift.String(describing: contentDisposition)), contentEncoding: \(Swift.String(describing: contentEncoding)), contentLanguage: \(Swift.String(describing: contentLanguage)), contentLength: \(Swift.String(describing: contentLength)), contentRange: \(Swift.String(describing: contentRange)), contentType: \(Swift.String(describing: contentType)), deleteMarker: \(Swift.String(describing: deleteMarker)), eTag: \(Swift.String(describing: eTag)), errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), expiration: \(Swift.String(describing: expiration)), expires: \(Swift.String(describing: expires)), lastModified: \(Swift.String(describing: lastModified)), metadata: \(Swift.String(describing: metadata)), missingMeta: \(Swift.String(describing: missingMeta)), objectLockLegalHoldStatus: \(Swift.String(describing: objectLockLegalHoldStatus)), objectLockMode: \(Swift.String(describing: objectLockMode)), objectLockRetainUntilDate: \(Swift.String(describing: objectLockRetainUntilDate)), partsCount: \(Swift.String(describing: partsCount)), replicationStatus: \(Swift.String(describing: replicationStatus)), requestCharged: \(Swift.String(describing: requestCharged)), requestRoute: \(Swift.String(describing: requestRoute)), requestToken: \(Swift.String(describing: requestToken)), restore: \(Swift.String(describing: restore)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), sseCustomerAlgorithm: \(Swift.String(describing: sseCustomerAlgorithm)), sseCustomerKeyMD5: \(Swift.String(describing: sseCustomerKeyMD5)), statusCode: \(Swift.String(describing: statusCode)), storageClass: \(Swift.String(describing: storageClass)), tagCount: \(Swift.String(describing: tagCount)), versionId: \(Swift.String(describing: versionId)), ssekmsKeyId: \"CONTENT_REDACTED\")"}
}

extension AbortMultipartUploadInput {

    static func urlPathProvider(_ value: AbortMultipartUploadInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension AbortMultipartUploadInput {

    static func headerProvider(_ value: AbortMultipartUploadInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension AbortMultipartUploadInput {

    static func queryItemProvider(_ value: AbortMultipartUploadInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "AbortMultipartUpload"))
        guard let uploadId = value.uploadId else {
            let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let uploadIdQueryItem = Smithy.URIQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
        items.append(uploadIdQueryItem)
        return items
    }
}

extension CompleteMultipartUploadInput {

    static func urlPathProvider(_ value: CompleteMultipartUploadInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension CompleteMultipartUploadInput {

    static func headerProvider(_ value: CompleteMultipartUploadInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumCRC32 = value.checksumCRC32 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = value.checksumCRC32C {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = value.checksumSHA1 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = value.checksumSHA256 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let ifNoneMatch = value.ifNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension CompleteMultipartUploadInput {

    static func queryItemProvider(_ value: CompleteMultipartUploadInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let uploadId = value.uploadId else {
            let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let uploadIdQueryItem = Smithy.URIQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
        items.append(uploadIdQueryItem)
        return items
    }
}

extension CopyObjectInput {

    static func urlPathProvider(_ value: CopyObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension CopyObjectInput {

    static func headerProvider(_ value: CopyObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = value.bucketKeyEnabled {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = value.cacheControl {
            items.add(SmithyHTTPAPI.Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentDisposition = value.contentDisposition {
            items.add(SmithyHTTPAPI.Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = value.contentEncoding {
            items.add(SmithyHTTPAPI.Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = value.contentLanguage {
            items.add(SmithyHTTPAPI.Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let copySource = value.copySource {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source", value: Swift.String(copySource)))
        }
        if let copySourceIfMatch = value.copySourceIfMatch {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch)))
        }
        if let copySourceIfModifiedSince = value.copySourceIfModifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-modified-since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: copySourceIfModifiedSince))))
        }
        if let copySourceIfNoneMatch = value.copySourceIfNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch)))
        }
        if let copySourceIfUnmodifiedSince = value.copySourceIfUnmodifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: copySourceIfUnmodifiedSince))))
        }
        if let copySourceSSECustomerAlgorithm = value.copySourceSSECustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm)))
        }
        if let copySourceSSECustomerKey = value.copySourceSSECustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey)))
        }
        if let copySourceSSECustomerKeyMD5 = value.copySourceSSECustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expectedSourceBucketOwner = value.expectedSourceBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner)))
        }
        if let expires = value.expires {
            items.add(SmithyHTTPAPI.Header(name: "Expires", value: Swift.String(expires)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let metadataDirective = value.metadataDirective {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-metadata-directive", value: Swift.String(metadataDirective.rawValue)))
        }
        if let objectLockLegalHoldStatus = value.objectLockLegalHoldStatus {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = value.objectLockMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = value.objectLockRetainUntilDate {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = value.ssekmsEncryptionContext {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = value.ssekmsKeyId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = value.serverSideEncryption {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = value.storageClass {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = value.tagging {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let taggingDirective = value.taggingDirective {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-tagging-directive", value: Swift.String(taggingDirective.rawValue)))
        }
        if let websiteRedirectLocation = value.websiteRedirectLocation {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = value.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(SmithyHTTPAPI.Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension CopyObjectInput {

    static func queryItemProvider(_ value: CopyObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "CopyObject"))
        return items
    }
}

extension CreateBucketInput {

    static func urlPathProvider(_ value: CreateBucketInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBucketInput {

    static func headerProvider(_ value: CreateBucketInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = value.grantWrite {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockEnabledForBucket = value.objectLockEnabledForBucket {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bucket-object-lock-enabled", value: Swift.String(objectLockEnabledForBucket)))
        }
        if let objectOwnership = value.objectOwnership {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-ownership", value: Swift.String(objectOwnership.rawValue)))
        }
        return items
    }
}

extension CreateMultipartUploadInput {

    static func urlPathProvider(_ value: CreateMultipartUploadInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension CreateMultipartUploadInput {

    static func headerProvider(_ value: CreateMultipartUploadInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = value.bucketKeyEnabled {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = value.cacheControl {
            items.add(SmithyHTTPAPI.Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentDisposition = value.contentDisposition {
            items.add(SmithyHTTPAPI.Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = value.contentEncoding {
            items.add(SmithyHTTPAPI.Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = value.contentLanguage {
            items.add(SmithyHTTPAPI.Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expires = value.expires {
            items.add(SmithyHTTPAPI.Header(name: "Expires", value: Swift.String(expires)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockLegalHoldStatus = value.objectLockLegalHoldStatus {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = value.objectLockMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = value.objectLockRetainUntilDate {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = value.ssekmsEncryptionContext {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = value.ssekmsKeyId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = value.serverSideEncryption {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = value.storageClass {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = value.tagging {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let websiteRedirectLocation = value.websiteRedirectLocation {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = value.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(SmithyHTTPAPI.Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension CreateMultipartUploadInput {

    static func queryItemProvider(_ value: CreateMultipartUploadInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "uploads", value: nil))
        return items
    }
}

extension CreateSessionInput {

    static func urlPathProvider(_ value: CreateSessionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSessionInput {

    static func headerProvider(_ value: CreateSessionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let bucketKeyEnabled = value.bucketKeyEnabled {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let ssekmsEncryptionContext = value.ssekmsEncryptionContext {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = value.ssekmsKeyId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = value.serverSideEncryption {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let sessionMode = value.sessionMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-create-session-mode", value: Swift.String(sessionMode.rawValue)))
        }
        return items
    }
}

extension CreateSessionInput {

    static func queryItemProvider(_ value: CreateSessionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "session", value: nil))
        return items
    }
}

extension DeleteBucketInput {

    static func urlPathProvider(_ value: DeleteBucketInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketInput {

    static func headerProvider(_ value: DeleteBucketInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketAnalyticsConfigurationInput {

    static func urlPathProvider(_ value: DeleteBucketAnalyticsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketAnalyticsConfigurationInput {

    static func headerProvider(_ value: DeleteBucketAnalyticsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketAnalyticsConfigurationInput {

    static func queryItemProvider(_ value: DeleteBucketAnalyticsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "analytics", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension DeleteBucketCorsInput {

    static func urlPathProvider(_ value: DeleteBucketCorsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketCorsInput {

    static func headerProvider(_ value: DeleteBucketCorsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketCorsInput {

    static func queryItemProvider(_ value: DeleteBucketCorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "cors", value: nil))
        return items
    }
}

extension DeleteBucketEncryptionInput {

    static func urlPathProvider(_ value: DeleteBucketEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketEncryptionInput {

    static func headerProvider(_ value: DeleteBucketEncryptionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketEncryptionInput {

    static func queryItemProvider(_ value: DeleteBucketEncryptionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "encryption", value: nil))
        return items
    }
}

extension DeleteBucketIntelligentTieringConfigurationInput {

    static func urlPathProvider(_ value: DeleteBucketIntelligentTieringConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketIntelligentTieringConfigurationInput {

    static func queryItemProvider(_ value: DeleteBucketIntelligentTieringConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "intelligent-tiering", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension DeleteBucketInventoryConfigurationInput {

    static func urlPathProvider(_ value: DeleteBucketInventoryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketInventoryConfigurationInput {

    static func headerProvider(_ value: DeleteBucketInventoryConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketInventoryConfigurationInput {

    static func queryItemProvider(_ value: DeleteBucketInventoryConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "inventory", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension DeleteBucketLifecycleInput {

    static func urlPathProvider(_ value: DeleteBucketLifecycleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketLifecycleInput {

    static func headerProvider(_ value: DeleteBucketLifecycleInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketLifecycleInput {

    static func queryItemProvider(_ value: DeleteBucketLifecycleInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "lifecycle", value: nil))
        return items
    }
}

extension DeleteBucketMetricsConfigurationInput {

    static func urlPathProvider(_ value: DeleteBucketMetricsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketMetricsConfigurationInput {

    static func headerProvider(_ value: DeleteBucketMetricsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketMetricsConfigurationInput {

    static func queryItemProvider(_ value: DeleteBucketMetricsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "metrics", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension DeleteBucketOwnershipControlsInput {

    static func urlPathProvider(_ value: DeleteBucketOwnershipControlsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketOwnershipControlsInput {

    static func headerProvider(_ value: DeleteBucketOwnershipControlsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketOwnershipControlsInput {

    static func queryItemProvider(_ value: DeleteBucketOwnershipControlsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "ownershipControls", value: nil))
        return items
    }
}

extension DeleteBucketPolicyInput {

    static func urlPathProvider(_ value: DeleteBucketPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketPolicyInput {

    static func headerProvider(_ value: DeleteBucketPolicyInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketPolicyInput {

    static func queryItemProvider(_ value: DeleteBucketPolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "policy", value: nil))
        return items
    }
}

extension DeleteBucketReplicationInput {

    static func urlPathProvider(_ value: DeleteBucketReplicationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketReplicationInput {

    static func headerProvider(_ value: DeleteBucketReplicationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketReplicationInput {

    static func queryItemProvider(_ value: DeleteBucketReplicationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "replication", value: nil))
        return items
    }
}

extension DeleteBucketTaggingInput {

    static func urlPathProvider(_ value: DeleteBucketTaggingInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketTaggingInput {

    static func headerProvider(_ value: DeleteBucketTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketTaggingInput {

    static func queryItemProvider(_ value: DeleteBucketTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        return items
    }
}

extension DeleteBucketWebsiteInput {

    static func urlPathProvider(_ value: DeleteBucketWebsiteInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBucketWebsiteInput {

    static func headerProvider(_ value: DeleteBucketWebsiteInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteBucketWebsiteInput {

    static func queryItemProvider(_ value: DeleteBucketWebsiteInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "website", value: nil))
        return items
    }
}

extension DeleteObjectInput {

    static func urlPathProvider(_ value: DeleteObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension DeleteObjectInput {

    static func headerProvider(_ value: DeleteObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let bypassGovernanceRetention = value.bypassGovernanceRetention {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = value.mfa {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension DeleteObjectInput {

    static func queryItemProvider(_ value: DeleteObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "DeleteObject"))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension DeleteObjectsInput {

    static func urlPathProvider(_ value: DeleteObjectsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteObjectsInput {

    static func headerProvider(_ value: DeleteObjectsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let bypassGovernanceRetention = value.bypassGovernanceRetention {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = value.mfa {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension DeleteObjectsInput {

    static func queryItemProvider(_ value: DeleteObjectsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "delete", value: nil))
        return items
    }
}

extension DeleteObjectTaggingInput {

    static func urlPathProvider(_ value: DeleteObjectTaggingInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension DeleteObjectTaggingInput {

    static func headerProvider(_ value: DeleteObjectTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeleteObjectTaggingInput {

    static func queryItemProvider(_ value: DeleteObjectTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension DeletePublicAccessBlockInput {

    static func urlPathProvider(_ value: DeletePublicAccessBlockInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePublicAccessBlockInput {

    static func headerProvider(_ value: DeletePublicAccessBlockInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension DeletePublicAccessBlockInput {

    static func queryItemProvider(_ value: DeletePublicAccessBlockInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "publicAccessBlock", value: nil))
        return items
    }
}

extension GetBucketAccelerateConfigurationInput {

    static func urlPathProvider(_ value: GetBucketAccelerateConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketAccelerateConfigurationInput {

    static func headerProvider(_ value: GetBucketAccelerateConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetBucketAccelerateConfigurationInput {

    static func queryItemProvider(_ value: GetBucketAccelerateConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "accelerate", value: nil))
        return items
    }
}

extension GetBucketAclInput {

    static func urlPathProvider(_ value: GetBucketAclInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketAclInput {

    static func headerProvider(_ value: GetBucketAclInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketAclInput {

    static func queryItemProvider(_ value: GetBucketAclInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "acl", value: nil))
        return items
    }
}

extension GetBucketAnalyticsConfigurationInput {

    static func urlPathProvider(_ value: GetBucketAnalyticsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketAnalyticsConfigurationInput {

    static func headerProvider(_ value: GetBucketAnalyticsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketAnalyticsConfigurationInput {

    static func queryItemProvider(_ value: GetBucketAnalyticsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "analytics", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "GetBucketAnalyticsConfiguration"))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetBucketCorsInput {

    static func urlPathProvider(_ value: GetBucketCorsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketCorsInput {

    static func headerProvider(_ value: GetBucketCorsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketCorsInput {

    static func queryItemProvider(_ value: GetBucketCorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "cors", value: nil))
        return items
    }
}

extension GetBucketEncryptionInput {

    static func urlPathProvider(_ value: GetBucketEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketEncryptionInput {

    static func headerProvider(_ value: GetBucketEncryptionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketEncryptionInput {

    static func queryItemProvider(_ value: GetBucketEncryptionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "encryption", value: nil))
        return items
    }
}

extension GetBucketIntelligentTieringConfigurationInput {

    static func urlPathProvider(_ value: GetBucketIntelligentTieringConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketIntelligentTieringConfigurationInput {

    static func queryItemProvider(_ value: GetBucketIntelligentTieringConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "intelligent-tiering", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "GetBucketIntelligentTieringConfiguration"))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetBucketInventoryConfigurationInput {

    static func urlPathProvider(_ value: GetBucketInventoryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketInventoryConfigurationInput {

    static func headerProvider(_ value: GetBucketInventoryConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketInventoryConfigurationInput {

    static func queryItemProvider(_ value: GetBucketInventoryConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "inventory", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "GetBucketInventoryConfiguration"))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetBucketLifecycleConfigurationInput {

    static func urlPathProvider(_ value: GetBucketLifecycleConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketLifecycleConfigurationInput {

    static func headerProvider(_ value: GetBucketLifecycleConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLifecycleConfigurationInput {

    static func queryItemProvider(_ value: GetBucketLifecycleConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "lifecycle", value: nil))
        return items
    }
}

extension GetBucketLocationInput {

    static func urlPathProvider(_ value: GetBucketLocationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketLocationInput {

    static func headerProvider(_ value: GetBucketLocationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLocationInput {

    static func queryItemProvider(_ value: GetBucketLocationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "location", value: nil))
        return items
    }
}

extension GetBucketLoggingInput {

    static func urlPathProvider(_ value: GetBucketLoggingInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketLoggingInput {

    static func headerProvider(_ value: GetBucketLoggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketLoggingInput {

    static func queryItemProvider(_ value: GetBucketLoggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "logging", value: nil))
        return items
    }
}

extension GetBucketMetricsConfigurationInput {

    static func urlPathProvider(_ value: GetBucketMetricsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketMetricsConfigurationInput {

    static func headerProvider(_ value: GetBucketMetricsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketMetricsConfigurationInput {

    static func queryItemProvider(_ value: GetBucketMetricsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "metrics", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "GetBucketMetricsConfiguration"))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension GetBucketNotificationConfigurationInput {

    static func urlPathProvider(_ value: GetBucketNotificationConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketNotificationConfigurationInput {

    static func headerProvider(_ value: GetBucketNotificationConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketNotificationConfigurationInput {

    static func queryItemProvider(_ value: GetBucketNotificationConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "notification", value: nil))
        return items
    }
}

extension GetBucketOwnershipControlsInput {

    static func urlPathProvider(_ value: GetBucketOwnershipControlsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketOwnershipControlsInput {

    static func headerProvider(_ value: GetBucketOwnershipControlsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketOwnershipControlsInput {

    static func queryItemProvider(_ value: GetBucketOwnershipControlsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "ownershipControls", value: nil))
        return items
    }
}

extension GetBucketPolicyInput {

    static func urlPathProvider(_ value: GetBucketPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketPolicyInput {

    static func headerProvider(_ value: GetBucketPolicyInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketPolicyInput {

    static func queryItemProvider(_ value: GetBucketPolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "policy", value: nil))
        return items
    }
}

extension GetBucketPolicyStatusInput {

    static func urlPathProvider(_ value: GetBucketPolicyStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketPolicyStatusInput {

    static func headerProvider(_ value: GetBucketPolicyStatusInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketPolicyStatusInput {

    static func queryItemProvider(_ value: GetBucketPolicyStatusInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "policyStatus", value: nil))
        return items
    }
}

extension GetBucketReplicationInput {

    static func urlPathProvider(_ value: GetBucketReplicationInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketReplicationInput {

    static func headerProvider(_ value: GetBucketReplicationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketReplicationInput {

    static func queryItemProvider(_ value: GetBucketReplicationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "replication", value: nil))
        return items
    }
}

extension GetBucketRequestPaymentInput {

    static func urlPathProvider(_ value: GetBucketRequestPaymentInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketRequestPaymentInput {

    static func headerProvider(_ value: GetBucketRequestPaymentInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketRequestPaymentInput {

    static func queryItemProvider(_ value: GetBucketRequestPaymentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "requestPayment", value: nil))
        return items
    }
}

extension GetBucketTaggingInput {

    static func urlPathProvider(_ value: GetBucketTaggingInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketTaggingInput {

    static func headerProvider(_ value: GetBucketTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketTaggingInput {

    static func queryItemProvider(_ value: GetBucketTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        return items
    }
}

extension GetBucketVersioningInput {

    static func urlPathProvider(_ value: GetBucketVersioningInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketVersioningInput {

    static func headerProvider(_ value: GetBucketVersioningInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketVersioningInput {

    static func queryItemProvider(_ value: GetBucketVersioningInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "versioning", value: nil))
        return items
    }
}

extension GetBucketWebsiteInput {

    static func urlPathProvider(_ value: GetBucketWebsiteInput) -> Swift.String? {
        return "/"
    }
}

extension GetBucketWebsiteInput {

    static func headerProvider(_ value: GetBucketWebsiteInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetBucketWebsiteInput {

    static func queryItemProvider(_ value: GetBucketWebsiteInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "website", value: nil))
        return items
    }
}

extension GetObjectInput {

    static func urlPathProvider(_ value: GetObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectInput {

    static func headerProvider(_ value: GetObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumMode = value.checksumMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-mode", value: Swift.String(checksumMode.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let ifMatch = value.ifMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        if let ifModifiedSince = value.ifModifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "If-Modified-Since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: ifModifiedSince))))
        }
        if let ifNoneMatch = value.ifNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let ifUnmodifiedSince = value.ifUnmodifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "If-Unmodified-Since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: ifUnmodifiedSince))))
        }
        if let range = value.range {
            items.add(SmithyHTTPAPI.Header(name: "Range", value: Swift.String(range)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension GetObjectInput {

    static func queryItemProvider(_ value: GetObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "GetObject"))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        if let responseContentDisposition = value.responseContentDisposition {
            let responseContentDispositionQueryItem = Smithy.URIQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            items.append(responseContentDispositionQueryItem)
        }
        if let partNumber = value.partNumber {
            let partNumberQueryItem = Smithy.URIQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
            items.append(partNumberQueryItem)
        }
        if let responseContentType = value.responseContentType {
            let responseContentTypeQueryItem = Smithy.URIQueryItem(name: "response-content-type".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            items.append(responseContentTypeQueryItem)
        }
        if let responseExpires = value.responseExpires {
            let responseExpiresQueryItem = Smithy.URIQueryItem(name: "response-expires".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: responseExpires)).urlPercentEncoding())
            items.append(responseExpiresQueryItem)
        }
        if let responseContentEncoding = value.responseContentEncoding {
            let responseContentEncodingQueryItem = Smithy.URIQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            items.append(responseContentEncodingQueryItem)
        }
        if let responseCacheControl = value.responseCacheControl {
            let responseCacheControlQueryItem = Smithy.URIQueryItem(name: "response-cache-control".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            items.append(responseCacheControlQueryItem)
        }
        if let responseContentLanguage = value.responseContentLanguage {
            let responseContentLanguageQueryItem = Smithy.URIQueryItem(name: "response-content-language".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            items.append(responseContentLanguageQueryItem)
        }
        return items
    }
}

extension GetObjectAclInput {

    static func urlPathProvider(_ value: GetObjectAclInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectAclInput {

    static func headerProvider(_ value: GetObjectAclInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectAclInput {

    static func queryItemProvider(_ value: GetObjectAclInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "acl", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension GetObjectAttributesInput {

    static func urlPathProvider(_ value: GetObjectAttributesInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectAttributesInput {

    static func headerProvider(_ value: GetObjectAttributesInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let maxParts = value.maxParts {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-max-parts", value: Swift.String(maxParts)))
        }
        if let objectAttributes = value.objectAttributes {
            if objectAttributes.isEmpty {
                items.add(name: "x-amz-object-attributes", value: "")
            }
            objectAttributes.forEach { headerValue in
                items.add(SmithyHTTPAPI.Header(name: "x-amz-object-attributes", value: ClientRuntime.quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let partNumberMarker = value.partNumberMarker {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-part-number-marker", value: Swift.String(partNumberMarker)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension GetObjectAttributesInput {

    static func queryItemProvider(_ value: GetObjectAttributesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "attributes", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension GetObjectLegalHoldInput {

    static func urlPathProvider(_ value: GetObjectLegalHoldInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectLegalHoldInput {

    static func headerProvider(_ value: GetObjectLegalHoldInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectLegalHoldInput {

    static func queryItemProvider(_ value: GetObjectLegalHoldInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "legal-hold", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension GetObjectLockConfigurationInput {

    static func urlPathProvider(_ value: GetObjectLockConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension GetObjectLockConfigurationInput {

    static func headerProvider(_ value: GetObjectLockConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetObjectLockConfigurationInput {

    static func queryItemProvider(_ value: GetObjectLockConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "object-lock", value: nil))
        return items
    }
}

extension GetObjectRetentionInput {

    static func urlPathProvider(_ value: GetObjectRetentionInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectRetentionInput {

    static func headerProvider(_ value: GetObjectRetentionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectRetentionInput {

    static func queryItemProvider(_ value: GetObjectRetentionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "retention", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension GetObjectTaggingInput {

    static func urlPathProvider(_ value: GetObjectTaggingInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectTaggingInput {

    static func headerProvider(_ value: GetObjectTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectTaggingInput {

    static func queryItemProvider(_ value: GetObjectTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension GetObjectTorrentInput {

    static func urlPathProvider(_ value: GetObjectTorrentInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension GetObjectTorrentInput {

    static func headerProvider(_ value: GetObjectTorrentInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension GetObjectTorrentInput {

    static func queryItemProvider(_ value: GetObjectTorrentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "torrent", value: nil))
        return items
    }
}

extension GetPublicAccessBlockInput {

    static func urlPathProvider(_ value: GetPublicAccessBlockInput) -> Swift.String? {
        return "/"
    }
}

extension GetPublicAccessBlockInput {

    static func headerProvider(_ value: GetPublicAccessBlockInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension GetPublicAccessBlockInput {

    static func queryItemProvider(_ value: GetPublicAccessBlockInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "publicAccessBlock", value: nil))
        return items
    }
}

extension HeadBucketInput {

    static func urlPathProvider(_ value: HeadBucketInput) -> Swift.String? {
        return "/"
    }
}

extension HeadBucketInput {

    static func headerProvider(_ value: HeadBucketInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension HeadObjectInput {

    static func urlPathProvider(_ value: HeadObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension HeadObjectInput {

    static func headerProvider(_ value: HeadObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumMode = value.checksumMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-mode", value: Swift.String(checksumMode.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let ifMatch = value.ifMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-Match", value: Swift.String(ifMatch)))
        }
        if let ifModifiedSince = value.ifModifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "If-Modified-Since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: ifModifiedSince))))
        }
        if let ifNoneMatch = value.ifNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let ifUnmodifiedSince = value.ifUnmodifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "If-Unmodified-Since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: ifUnmodifiedSince))))
        }
        if let range = value.range {
            items.add(SmithyHTTPAPI.Header(name: "Range", value: Swift.String(range)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension HeadObjectInput {

    static func queryItemProvider(_ value: HeadObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        if let responseContentDisposition = value.responseContentDisposition {
            let responseContentDispositionQueryItem = Smithy.URIQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            items.append(responseContentDispositionQueryItem)
        }
        if let partNumber = value.partNumber {
            let partNumberQueryItem = Smithy.URIQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
            items.append(partNumberQueryItem)
        }
        if let responseContentType = value.responseContentType {
            let responseContentTypeQueryItem = Smithy.URIQueryItem(name: "response-content-type".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            items.append(responseContentTypeQueryItem)
        }
        if let responseExpires = value.responseExpires {
            let responseExpiresQueryItem = Smithy.URIQueryItem(name: "response-expires".urlPercentEncoding(), value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: responseExpires)).urlPercentEncoding())
            items.append(responseExpiresQueryItem)
        }
        if let responseContentEncoding = value.responseContentEncoding {
            let responseContentEncodingQueryItem = Smithy.URIQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            items.append(responseContentEncodingQueryItem)
        }
        if let responseCacheControl = value.responseCacheControl {
            let responseCacheControlQueryItem = Smithy.URIQueryItem(name: "response-cache-control".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            items.append(responseCacheControlQueryItem)
        }
        if let responseContentLanguage = value.responseContentLanguage {
            let responseContentLanguageQueryItem = Smithy.URIQueryItem(name: "response-content-language".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            items.append(responseContentLanguageQueryItem)
        }
        return items
    }
}

extension ListBucketAnalyticsConfigurationsInput {

    static func urlPathProvider(_ value: ListBucketAnalyticsConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBucketAnalyticsConfigurationsInput {

    static func headerProvider(_ value: ListBucketAnalyticsConfigurationsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketAnalyticsConfigurationsInput {

    static func queryItemProvider(_ value: ListBucketAnalyticsConfigurationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "analytics", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListBucketAnalyticsConfigurations"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        return items
    }
}

extension ListBucketIntelligentTieringConfigurationsInput {

    static func urlPathProvider(_ value: ListBucketIntelligentTieringConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBucketIntelligentTieringConfigurationsInput {

    static func queryItemProvider(_ value: ListBucketIntelligentTieringConfigurationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "intelligent-tiering", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListBucketIntelligentTieringConfigurations"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        return items
    }
}

extension ListBucketInventoryConfigurationsInput {

    static func urlPathProvider(_ value: ListBucketInventoryConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBucketInventoryConfigurationsInput {

    static func headerProvider(_ value: ListBucketInventoryConfigurationsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketInventoryConfigurationsInput {

    static func queryItemProvider(_ value: ListBucketInventoryConfigurationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "inventory", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListBucketInventoryConfigurations"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        return items
    }
}

extension ListBucketMetricsConfigurationsInput {

    static func urlPathProvider(_ value: ListBucketMetricsConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBucketMetricsConfigurationsInput {

    static func headerProvider(_ value: ListBucketMetricsConfigurationsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension ListBucketMetricsConfigurationsInput {

    static func queryItemProvider(_ value: ListBucketMetricsConfigurationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "metrics", value: nil))
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListBucketMetricsConfigurations"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        return items
    }
}

extension ListBucketsInput {

    static func urlPathProvider(_ value: ListBucketsInput) -> Swift.String? {
        return "/"
    }
}

extension ListBucketsInput {

    static func queryItemProvider(_ value: ListBucketsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListBuckets"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        if let bucketRegion = value.bucketRegion {
            let bucketRegionQueryItem = Smithy.URIQueryItem(name: "bucket-region".urlPercentEncoding(), value: Swift.String(bucketRegion).urlPercentEncoding())
            items.append(bucketRegionQueryItem)
        }
        if let `prefix` = value.`prefix` {
            let prefixQueryItem = Smithy.URIQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
            items.append(prefixQueryItem)
        }
        if let maxBuckets = value.maxBuckets {
            let maxBucketsQueryItem = Smithy.URIQueryItem(name: "max-buckets".urlPercentEncoding(), value: Swift.String(maxBuckets).urlPercentEncoding())
            items.append(maxBucketsQueryItem)
        }
        return items
    }
}

extension ListDirectoryBucketsInput {

    static func urlPathProvider(_ value: ListDirectoryBucketsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDirectoryBucketsInput {

    static func queryItemProvider(_ value: ListDirectoryBucketsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListDirectoryBuckets"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        if let maxDirectoryBuckets = value.maxDirectoryBuckets {
            let maxDirectoryBucketsQueryItem = Smithy.URIQueryItem(name: "max-directory-buckets".urlPercentEncoding(), value: Swift.String(maxDirectoryBuckets).urlPercentEncoding())
            items.append(maxDirectoryBucketsQueryItem)
        }
        return items
    }
}

extension ListMultipartUploadsInput {

    static func urlPathProvider(_ value: ListMultipartUploadsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMultipartUploadsInput {

    static func headerProvider(_ value: ListMultipartUploadsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListMultipartUploadsInput {

    static func queryItemProvider(_ value: ListMultipartUploadsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "uploads", value: nil))
        if let uploadIdMarker = value.uploadIdMarker {
            let uploadIdMarkerQueryItem = Smithy.URIQueryItem(name: "upload-id-marker".urlPercentEncoding(), value: Swift.String(uploadIdMarker).urlPercentEncoding())
            items.append(uploadIdMarkerQueryItem)
        }
        if let delimiter = value.delimiter {
            let delimiterQueryItem = Smithy.URIQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            items.append(delimiterQueryItem)
        }
        if let maxUploads = value.maxUploads {
            let maxUploadsQueryItem = Smithy.URIQueryItem(name: "max-uploads".urlPercentEncoding(), value: Swift.String(maxUploads).urlPercentEncoding())
            items.append(maxUploadsQueryItem)
        }
        if let encodingType = value.encodingType {
            let encodingTypeQueryItem = Smithy.URIQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            items.append(encodingTypeQueryItem)
        }
        if let `prefix` = value.`prefix` {
            let prefixQueryItem = Smithy.URIQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
            items.append(prefixQueryItem)
        }
        if let keyMarker = value.keyMarker {
            let keyMarkerQueryItem = Smithy.URIQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
            items.append(keyMarkerQueryItem)
        }
        return items
    }
}

extension ListObjectsInput {

    static func urlPathProvider(_ value: ListObjectsInput) -> Swift.String? {
        return "/"
    }
}

extension ListObjectsInput {

    static func headerProvider(_ value: ListObjectsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = value.optionalObjectAttributes {
            if optionalObjectAttributes.isEmpty {
                items.add(name: "x-amz-optional-object-attributes", value: "")
            }
            optionalObjectAttributes.forEach { headerValue in
                items.add(SmithyHTTPAPI.Header(name: "x-amz-optional-object-attributes", value: ClientRuntime.quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectsInput {

    static func queryItemProvider(_ value: ListObjectsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let delimiter = value.delimiter {
            let delimiterQueryItem = Smithy.URIQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            items.append(delimiterQueryItem)
        }
        if let encodingType = value.encodingType {
            let encodingTypeQueryItem = Smithy.URIQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            items.append(encodingTypeQueryItem)
        }
        if let marker = value.marker {
            let markerQueryItem = Smithy.URIQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            items.append(markerQueryItem)
        }
        if let `prefix` = value.`prefix` {
            let prefixQueryItem = Smithy.URIQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
            items.append(prefixQueryItem)
        }
        if let maxKeys = value.maxKeys {
            let maxKeysQueryItem = Smithy.URIQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
            items.append(maxKeysQueryItem)
        }
        return items
    }
}

extension ListObjectsV2Input {

    static func urlPathProvider(_ value: ListObjectsV2Input) -> Swift.String? {
        return "/"
    }
}

extension ListObjectsV2Input {

    static func headerProvider(_ value: ListObjectsV2Input) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = value.optionalObjectAttributes {
            if optionalObjectAttributes.isEmpty {
                items.add(name: "x-amz-optional-object-attributes", value: "")
            }
            optionalObjectAttributes.forEach { headerValue in
                items.add(SmithyHTTPAPI.Header(name: "x-amz-optional-object-attributes", value: ClientRuntime.quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectsV2Input {

    static func queryItemProvider(_ value: ListObjectsV2Input) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "list-type", value: "2"))
        if let continuationToken = value.continuationToken {
            let continuationTokenQueryItem = Smithy.URIQueryItem(name: "continuation-token".urlPercentEncoding(), value: Swift.String(continuationToken).urlPercentEncoding())
            items.append(continuationTokenQueryItem)
        }
        if let delimiter = value.delimiter {
            let delimiterQueryItem = Smithy.URIQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            items.append(delimiterQueryItem)
        }
        if let fetchOwner = value.fetchOwner {
            let fetchOwnerQueryItem = Smithy.URIQueryItem(name: "fetch-owner".urlPercentEncoding(), value: Swift.String(fetchOwner).urlPercentEncoding())
            items.append(fetchOwnerQueryItem)
        }
        if let encodingType = value.encodingType {
            let encodingTypeQueryItem = Smithy.URIQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            items.append(encodingTypeQueryItem)
        }
        if let startAfter = value.startAfter {
            let startAfterQueryItem = Smithy.URIQueryItem(name: "start-after".urlPercentEncoding(), value: Swift.String(startAfter).urlPercentEncoding())
            items.append(startAfterQueryItem)
        }
        if let `prefix` = value.`prefix` {
            let prefixQueryItem = Smithy.URIQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
            items.append(prefixQueryItem)
        }
        if let maxKeys = value.maxKeys {
            let maxKeysQueryItem = Smithy.URIQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
            items.append(maxKeysQueryItem)
        }
        return items
    }
}

extension ListObjectVersionsInput {

    static func urlPathProvider(_ value: ListObjectVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListObjectVersionsInput {

    static func headerProvider(_ value: ListObjectVersionsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let optionalObjectAttributes = value.optionalObjectAttributes {
            if optionalObjectAttributes.isEmpty {
                items.add(name: "x-amz-optional-object-attributes", value: "")
            }
            optionalObjectAttributes.forEach { headerValue in
                items.add(SmithyHTTPAPI.Header(name: "x-amz-optional-object-attributes", value: ClientRuntime.quoteHeaderValue(Swift.String(headerValue.rawValue))))
            }
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension ListObjectVersionsInput {

    static func queryItemProvider(_ value: ListObjectVersionsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "versions", value: nil))
        if let versionIdMarker = value.versionIdMarker {
            let versionIdMarkerQueryItem = Smithy.URIQueryItem(name: "version-id-marker".urlPercentEncoding(), value: Swift.String(versionIdMarker).urlPercentEncoding())
            items.append(versionIdMarkerQueryItem)
        }
        if let delimiter = value.delimiter {
            let delimiterQueryItem = Smithy.URIQueryItem(name: "delimiter".urlPercentEncoding(), value: Swift.String(delimiter).urlPercentEncoding())
            items.append(delimiterQueryItem)
        }
        if let encodingType = value.encodingType {
            let encodingTypeQueryItem = Smithy.URIQueryItem(name: "encoding-type".urlPercentEncoding(), value: Swift.String(encodingType.rawValue).urlPercentEncoding())
            items.append(encodingTypeQueryItem)
        }
        if let `prefix` = value.`prefix` {
            let prefixQueryItem = Smithy.URIQueryItem(name: "prefix".urlPercentEncoding(), value: Swift.String(`prefix`).urlPercentEncoding())
            items.append(prefixQueryItem)
        }
        if let maxKeys = value.maxKeys {
            let maxKeysQueryItem = Smithy.URIQueryItem(name: "max-keys".urlPercentEncoding(), value: Swift.String(maxKeys).urlPercentEncoding())
            items.append(maxKeysQueryItem)
        }
        if let keyMarker = value.keyMarker {
            let keyMarkerQueryItem = Smithy.URIQueryItem(name: "key-marker".urlPercentEncoding(), value: Swift.String(keyMarker).urlPercentEncoding())
            items.append(keyMarkerQueryItem)
        }
        return items
    }
}

extension ListPartsInput {

    static func urlPathProvider(_ value: ListPartsInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension ListPartsInput {

    static func headerProvider(_ value: ListPartsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension ListPartsInput {

    static func queryItemProvider(_ value: ListPartsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "ListParts"))
        if let partNumberMarker = value.partNumberMarker {
            let partNumberMarkerQueryItem = Smithy.URIQueryItem(name: "part-number-marker".urlPercentEncoding(), value: Swift.String(partNumberMarker).urlPercentEncoding())
            items.append(partNumberMarkerQueryItem)
        }
        if let maxParts = value.maxParts {
            let maxPartsQueryItem = Smithy.URIQueryItem(name: "max-parts".urlPercentEncoding(), value: Swift.String(maxParts).urlPercentEncoding())
            items.append(maxPartsQueryItem)
        }
        guard let uploadId = value.uploadId else {
            let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let uploadIdQueryItem = Smithy.URIQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
        items.append(uploadIdQueryItem)
        return items
    }
}

extension PutBucketAccelerateConfigurationInput {

    static func urlPathProvider(_ value: PutBucketAccelerateConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketAccelerateConfigurationInput {

    static func headerProvider(_ value: PutBucketAccelerateConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketAccelerateConfigurationInput {

    static func queryItemProvider(_ value: PutBucketAccelerateConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "accelerate", value: nil))
        return items
    }
}

extension PutBucketAclInput {

    static func urlPathProvider(_ value: PutBucketAclInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketAclInput {

    static func headerProvider(_ value: PutBucketAclInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = value.grantWrite {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        return items
    }
}

extension PutBucketAclInput {

    static func queryItemProvider(_ value: PutBucketAclInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "acl", value: nil))
        return items
    }
}

extension PutBucketAnalyticsConfigurationInput {

    static func urlPathProvider(_ value: PutBucketAnalyticsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketAnalyticsConfigurationInput {

    static func headerProvider(_ value: PutBucketAnalyticsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketAnalyticsConfigurationInput {

    static func queryItemProvider(_ value: PutBucketAnalyticsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "analytics", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension PutBucketCorsInput {

    static func urlPathProvider(_ value: PutBucketCorsInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketCorsInput {

    static func headerProvider(_ value: PutBucketCorsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketCorsInput {

    static func queryItemProvider(_ value: PutBucketCorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "cors", value: nil))
        return items
    }
}

extension PutBucketEncryptionInput {

    static func urlPathProvider(_ value: PutBucketEncryptionInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketEncryptionInput {

    static func headerProvider(_ value: PutBucketEncryptionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketEncryptionInput {

    static func queryItemProvider(_ value: PutBucketEncryptionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "encryption", value: nil))
        return items
    }
}

extension PutBucketIntelligentTieringConfigurationInput {

    static func urlPathProvider(_ value: PutBucketIntelligentTieringConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketIntelligentTieringConfigurationInput {

    static func queryItemProvider(_ value: PutBucketIntelligentTieringConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "intelligent-tiering", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension PutBucketInventoryConfigurationInput {

    static func urlPathProvider(_ value: PutBucketInventoryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketInventoryConfigurationInput {

    static func headerProvider(_ value: PutBucketInventoryConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketInventoryConfigurationInput {

    static func queryItemProvider(_ value: PutBucketInventoryConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "inventory", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension PutBucketLifecycleConfigurationInput {

    static func urlPathProvider(_ value: PutBucketLifecycleConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketLifecycleConfigurationInput {

    static func headerProvider(_ value: PutBucketLifecycleConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let transitionDefaultMinimumObjectSize = value.transitionDefaultMinimumObjectSize {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-transition-default-minimum-object-size", value: Swift.String(transitionDefaultMinimumObjectSize.rawValue)))
        }
        return items
    }
}

extension PutBucketLifecycleConfigurationInput {

    static func queryItemProvider(_ value: PutBucketLifecycleConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "lifecycle", value: nil))
        return items
    }
}

extension PutBucketLoggingInput {

    static func urlPathProvider(_ value: PutBucketLoggingInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketLoggingInput {

    static func headerProvider(_ value: PutBucketLoggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketLoggingInput {

    static func queryItemProvider(_ value: PutBucketLoggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "logging", value: nil))
        return items
    }
}

extension PutBucketMetricsConfigurationInput {

    static func urlPathProvider(_ value: PutBucketMetricsConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketMetricsConfigurationInput {

    static func headerProvider(_ value: PutBucketMetricsConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketMetricsConfigurationInput {

    static func queryItemProvider(_ value: PutBucketMetricsConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "metrics", value: nil))
        guard let id = value.id else {
            let message = "Creating a URL Query Item failed. id is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let idQueryItem = Smithy.URIQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(id).urlPercentEncoding())
        items.append(idQueryItem)
        return items
    }
}

extension PutBucketNotificationConfigurationInput {

    static func urlPathProvider(_ value: PutBucketNotificationConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketNotificationConfigurationInput {

    static func headerProvider(_ value: PutBucketNotificationConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let skipDestinationValidation = value.skipDestinationValidation {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-skip-destination-validation", value: Swift.String(skipDestinationValidation)))
        }
        return items
    }
}

extension PutBucketNotificationConfigurationInput {

    static func queryItemProvider(_ value: PutBucketNotificationConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "notification", value: nil))
        return items
    }
}

extension PutBucketOwnershipControlsInput {

    static func urlPathProvider(_ value: PutBucketOwnershipControlsInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketOwnershipControlsInput {

    static func headerProvider(_ value: PutBucketOwnershipControlsInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketOwnershipControlsInput {

    static func queryItemProvider(_ value: PutBucketOwnershipControlsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "ownershipControls", value: nil))
        return items
    }
}

extension PutBucketPolicyInput {

    static func urlPathProvider(_ value: PutBucketPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketPolicyInput {

    static func headerProvider(_ value: PutBucketPolicyInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let confirmRemoveSelfBucketAccess = value.confirmRemoveSelfBucketAccess {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-confirm-remove-self-bucket-access", value: Swift.String(confirmRemoveSelfBucketAccess)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketPolicyInput {

    static func queryItemProvider(_ value: PutBucketPolicyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "policy", value: nil))
        return items
    }
}

extension PutBucketReplicationInput {

    static func urlPathProvider(_ value: PutBucketReplicationInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketReplicationInput {

    static func headerProvider(_ value: PutBucketReplicationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let token = value.token {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bucket-object-lock-token", value: Swift.String(token)))
        }
        return items
    }
}

extension PutBucketReplicationInput {

    static func queryItemProvider(_ value: PutBucketReplicationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "replication", value: nil))
        return items
    }
}

extension PutBucketRequestPaymentInput {

    static func urlPathProvider(_ value: PutBucketRequestPaymentInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketRequestPaymentInput {

    static func headerProvider(_ value: PutBucketRequestPaymentInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketRequestPaymentInput {

    static func queryItemProvider(_ value: PutBucketRequestPaymentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "requestPayment", value: nil))
        return items
    }
}

extension PutBucketTaggingInput {

    static func urlPathProvider(_ value: PutBucketTaggingInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketTaggingInput {

    static func headerProvider(_ value: PutBucketTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketTaggingInput {

    static func queryItemProvider(_ value: PutBucketTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        return items
    }
}

extension PutBucketVersioningInput {

    static func urlPathProvider(_ value: PutBucketVersioningInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketVersioningInput {

    static func headerProvider(_ value: PutBucketVersioningInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let mfa = value.mfa {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-mfa", value: Swift.String(mfa)))
        }
        return items
    }
}

extension PutBucketVersioningInput {

    static func queryItemProvider(_ value: PutBucketVersioningInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "versioning", value: nil))
        return items
    }
}

extension PutBucketWebsiteInput {

    static func urlPathProvider(_ value: PutBucketWebsiteInput) -> Swift.String? {
        return "/"
    }
}

extension PutBucketWebsiteInput {

    static func headerProvider(_ value: PutBucketWebsiteInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutBucketWebsiteInput {

    static func queryItemProvider(_ value: PutBucketWebsiteInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "website", value: nil))
        return items
    }
}

extension PutObjectInput {

    static func urlPathProvider(_ value: PutObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension PutObjectInput {

    static func headerProvider(_ value: PutObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let bucketKeyEnabled = value.bucketKeyEnabled {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = value.cacheControl {
            items.add(SmithyHTTPAPI.Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let checksumCRC32 = value.checksumCRC32 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = value.checksumCRC32C {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = value.checksumSHA1 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = value.checksumSHA256 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentDisposition = value.contentDisposition {
            items.add(SmithyHTTPAPI.Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = value.contentEncoding {
            items.add(SmithyHTTPAPI.Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = value.contentLanguage {
            items.add(SmithyHTTPAPI.Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentLength = value.contentLength {
            items.add(SmithyHTTPAPI.Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expires = value.expires {
            items.add(SmithyHTTPAPI.Header(name: "Expires", value: Swift.String(expires)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let ifNoneMatch = value.ifNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "If-None-Match", value: Swift.String(ifNoneMatch)))
        }
        if let objectLockLegalHoldStatus = value.objectLockLegalHoldStatus {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = value.objectLockMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = value.objectLockRetainUntilDate {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = value.ssekmsEncryptionContext {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = value.ssekmsKeyId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = value.serverSideEncryption {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = value.storageClass {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = value.tagging {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let websiteRedirectLocation = value.websiteRedirectLocation {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = value.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(SmithyHTTPAPI.Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension PutObjectInput {

    static func queryItemProvider(_ value: PutObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "PutObject"))
        return items
    }
}

extension PutObjectAclInput {

    static func urlPathProvider(_ value: PutObjectAclInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension PutObjectAclInput {

    static func headerProvider(_ value: PutObjectAclInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acl = value.acl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let grantFullControl = value.grantFullControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = value.grantRead {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = value.grantReadACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWrite = value.grantWrite {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write", value: Swift.String(grantWrite)))
        }
        if let grantWriteACP = value.grantWriteACP {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectAclInput {

    static func queryItemProvider(_ value: PutObjectAclInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "acl", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension PutObjectLegalHoldInput {

    static func urlPathProvider(_ value: PutObjectLegalHoldInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension PutObjectLegalHoldInput {

    static func headerProvider(_ value: PutObjectLegalHoldInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectLegalHoldInput {

    static func queryItemProvider(_ value: PutObjectLegalHoldInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "legal-hold", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension PutObjectLockConfigurationInput {

    static func urlPathProvider(_ value: PutObjectLockConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutObjectLockConfigurationInput {

    static func headerProvider(_ value: PutObjectLockConfigurationInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let token = value.token {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bucket-object-lock-token", value: Swift.String(token)))
        }
        return items
    }
}

extension PutObjectLockConfigurationInput {

    static func queryItemProvider(_ value: PutObjectLockConfigurationInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "object-lock", value: nil))
        return items
    }
}

extension PutObjectRetentionInput {

    static func urlPathProvider(_ value: PutObjectRetentionInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension PutObjectRetentionInput {

    static func headerProvider(_ value: PutObjectRetentionInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let bypassGovernanceRetention = value.bypassGovernanceRetention {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-bypass-governance-retention", value: Swift.String(bypassGovernanceRetention)))
        }
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectRetentionInput {

    static func queryItemProvider(_ value: PutObjectRetentionInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "retention", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension PutObjectTaggingInput {

    static func urlPathProvider(_ value: PutObjectTaggingInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension PutObjectTaggingInput {

    static func headerProvider(_ value: PutObjectTaggingInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension PutObjectTaggingInput {

    static func queryItemProvider(_ value: PutObjectTaggingInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "tagging", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension PutPublicAccessBlockInput {

    static func urlPathProvider(_ value: PutPublicAccessBlockInput) -> Swift.String? {
        return "/"
    }
}

extension PutPublicAccessBlockInput {

    static func headerProvider(_ value: PutPublicAccessBlockInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        return items
    }
}

extension PutPublicAccessBlockInput {

    static func queryItemProvider(_ value: PutPublicAccessBlockInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "publicAccessBlock", value: nil))
        return items
    }
}

extension RestoreObjectInput {

    static func urlPathProvider(_ value: RestoreObjectInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension RestoreObjectInput {

    static func headerProvider(_ value: RestoreObjectInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        return items
    }
}

extension RestoreObjectInput {

    static func queryItemProvider(_ value: RestoreObjectInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "restore", value: nil))
        if let versionId = value.versionId {
            let versionIdQueryItem = Smithy.URIQueryItem(name: "versionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            items.append(versionIdQueryItem)
        }
        return items
    }
}

extension SelectObjectContentInput {

    static func urlPathProvider(_ value: SelectObjectContentInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension SelectObjectContentInput {

    static func headerProvider(_ value: SelectObjectContentInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension SelectObjectContentInput {

    static func queryItemProvider(_ value: SelectObjectContentInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "select", value: nil))
        items.append(Smithy.URIQueryItem(name: "select-type", value: "2"))
        return items
    }
}

extension UploadPartInput {

    static func urlPathProvider(_ value: UploadPartInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension UploadPartInput {

    static func headerProvider(_ value: UploadPartInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let checksumAlgorithm = value.checksumAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-sdk-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let checksumCRC32 = value.checksumCRC32 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = value.checksumCRC32C {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = value.checksumSHA1 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = value.checksumSHA256 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentLength = value.contentLength {
            items.add(SmithyHTTPAPI.Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentMD5 = value.contentMD5 {
            items.add(SmithyHTTPAPI.Header(name: "Content-MD5", value: Swift.String(contentMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension UploadPartInput {

    static func queryItemProvider(_ value: UploadPartInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "UploadPart"))
        guard let partNumber = value.partNumber else {
            let message = "Creating a URL Query Item failed. partNumber is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let partNumberQueryItem = Smithy.URIQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
        items.append(partNumberQueryItem)
        guard let uploadId = value.uploadId else {
            let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let uploadIdQueryItem = Smithy.URIQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
        items.append(uploadIdQueryItem)
        return items
    }
}

extension UploadPartCopyInput {

    static func urlPathProvider(_ value: UploadPartCopyInput) -> Swift.String? {
        guard let key = value.key else {
            return nil
        }
        return "/\(key.urlPercentEncoding(encodeForwardSlash: false))"
    }
}

extension UploadPartCopyInput {

    static func headerProvider(_ value: UploadPartCopyInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let copySource = value.copySource {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source", value: Swift.String(copySource)))
        }
        if let copySourceIfMatch = value.copySourceIfMatch {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-match", value: Swift.String(copySourceIfMatch)))
        }
        if let copySourceIfModifiedSince = value.copySourceIfModifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-modified-since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: copySourceIfModifiedSince))))
        }
        if let copySourceIfNoneMatch = value.copySourceIfNoneMatch {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-none-match", value: Swift.String(copySourceIfNoneMatch)))
        }
        if let copySourceIfUnmodifiedSince = value.copySourceIfUnmodifiedSince {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-if-unmodified-since", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: copySourceIfUnmodifiedSince))))
        }
        if let copySourceRange = value.copySourceRange {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-range", value: Swift.String(copySourceRange)))
        }
        if let copySourceSSECustomerAlgorithm = value.copySourceSSECustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-algorithm", value: Swift.String(copySourceSSECustomerAlgorithm)))
        }
        if let copySourceSSECustomerKey = value.copySourceSSECustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-key", value: Swift.String(copySourceSSECustomerKey)))
        }
        if let copySourceSSECustomerKeyMD5 = value.copySourceSSECustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-copy-source-server-side-encryption-customer-key-MD5", value: Swift.String(copySourceSSECustomerKeyMD5)))
        }
        if let expectedBucketOwner = value.expectedBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expectedSourceBucketOwner = value.expectedSourceBucketOwner {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-source-expected-bucket-owner", value: Swift.String(expectedSourceBucketOwner)))
        }
        if let requestPayer = value.requestPayer {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = value.sseCustomerKey {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        return items
    }
}

extension UploadPartCopyInput {

    static func queryItemProvider(_ value: UploadPartCopyInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "x-id", value: "UploadPartCopy"))
        guard let partNumber = value.partNumber else {
            let message = "Creating a URL Query Item failed. partNumber is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let partNumberQueryItem = Smithy.URIQueryItem(name: "partNumber".urlPercentEncoding(), value: Swift.String(partNumber).urlPercentEncoding())
        items.append(partNumberQueryItem)
        guard let uploadId = value.uploadId else {
            let message = "Creating a URL Query Item failed. uploadId is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let uploadIdQueryItem = Smithy.URIQueryItem(name: "uploadId".urlPercentEncoding(), value: Swift.String(uploadId).urlPercentEncoding())
        items.append(uploadIdQueryItem)
        return items
    }
}

extension WriteGetObjectResponseInput {

    static func urlPathProvider(_ value: WriteGetObjectResponseInput) -> Swift.String? {
        return "/WriteGetObjectResponse"
    }
}

extension WriteGetObjectResponseInput {

    static func headerProvider(_ value: WriteGetObjectResponseInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let acceptRanges = value.acceptRanges {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-accept-ranges", value: Swift.String(acceptRanges)))
        }
        if let bucketKeyEnabled = value.bucketKeyEnabled {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = value.cacheControl {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumCRC32 = value.checksumCRC32 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-checksum-crc32", value: Swift.String(checksumCRC32)))
        }
        if let checksumCRC32C = value.checksumCRC32C {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-checksum-crc32c", value: Swift.String(checksumCRC32C)))
        }
        if let checksumSHA1 = value.checksumSHA1 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-checksum-sha1", value: Swift.String(checksumSHA1)))
        }
        if let checksumSHA256 = value.checksumSHA256 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-checksum-sha256", value: Swift.String(checksumSHA256)))
        }
        if let contentDisposition = value.contentDisposition {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = value.contentEncoding {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = value.contentLanguage {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentLength = value.contentLength {
            items.add(SmithyHTTPAPI.Header(name: "Content-Length", value: Swift.String(contentLength)))
        }
        if let contentRange = value.contentRange {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Content-Range", value: Swift.String(contentRange)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Content-Type", value: Swift.String(contentType)))
        }
        if let deleteMarker = value.deleteMarker {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-delete-marker", value: Swift.String(deleteMarker)))
        }
        if let eTag = value.eTag {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-ETag", value: Swift.String(eTag)))
        }
        if let errorCode = value.errorCode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-error-code", value: Swift.String(errorCode)))
        }
        if let errorMessage = value.errorMessage {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-error-message", value: Swift.String(errorMessage)))
        }
        if let expiration = value.expiration {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-expiration", value: Swift.String(expiration)))
        }
        if let expires = value.expires {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Expires", value: Swift.String(expires)))
        }
        if let lastModified = value.lastModified {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-Last-Modified", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .httpDate).string(from: lastModified))))
        }
        if let missingMeta = value.missingMeta {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-missing-meta", value: Swift.String(missingMeta)))
        }
        if let objectLockLegalHoldStatus = value.objectLockLegalHoldStatus {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = value.objectLockMode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = value.objectLockRetainUntilDate {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-object-lock-retain-until-date", value: Swift.String(SmithyTimestamps.TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let partsCount = value.partsCount {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-mp-parts-count", value: Swift.String(partsCount)))
        }
        if let replicationStatus = value.replicationStatus {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-replication-status", value: Swift.String(replicationStatus.rawValue)))
        }
        if let requestCharged = value.requestCharged {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-request-charged", value: Swift.String(requestCharged.rawValue)))
        }
        if let requestRoute = value.requestRoute {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-route", value: Swift.String(requestRoute)))
        }
        if let requestToken = value.requestToken {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-request-token", value: Swift.String(requestToken)))
        }
        if let restore = value.restore {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-restore", value: Swift.String(restore)))
        }
        if let sseCustomerAlgorithm = value.sseCustomerAlgorithm {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKeyMD5 = value.sseCustomerKeyMD5 {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsKeyId = value.ssekmsKeyId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = value.serverSideEncryption {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let statusCode = value.statusCode {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-status", value: Swift.String(statusCode)))
        }
        if let storageClass = value.storageClass {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagCount = value.tagCount {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-tagging-count", value: Swift.String(tagCount)))
        }
        if let versionId = value.versionId {
            items.add(SmithyHTTPAPI.Header(name: "x-amz-fwd-header-x-amz-version-id", value: Swift.String(versionId)))
        }
        if let metadata = value.metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(SmithyHTTPAPI.Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}

extension CompleteMultipartUploadInput {

    static func write(value: CompleteMultipartUploadInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CompleteMultipartUpload"].write(value.multipartUpload, with: S3ClientTypes.CompletedMultipartUpload.write(value:to:))
    }
}

extension CreateBucketInput {

    static func write(value: CreateBucketInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CreateBucketConfiguration"].write(value.createBucketConfiguration, with: S3ClientTypes.CreateBucketConfiguration.write(value:to:))
    }
}

extension DeleteObjectsInput {

    static func write(value: DeleteObjectsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Delete"].write(value.delete, with: S3ClientTypes.Delete.write(value:to:))
    }
}

extension PutBucketAccelerateConfigurationInput {

    static func write(value: PutBucketAccelerateConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccelerateConfiguration"].write(value.accelerateConfiguration, with: S3ClientTypes.AccelerateConfiguration.write(value:to:))
    }
}

extension PutBucketAclInput {

    static func write(value: PutBucketAclInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessControlPolicy"].write(value.accessControlPolicy, with: S3ClientTypes.AccessControlPolicy.write(value:to:))
    }
}

extension PutBucketAnalyticsConfigurationInput {

    static func write(value: PutBucketAnalyticsConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AnalyticsConfiguration"].write(value.analyticsConfiguration, with: S3ClientTypes.AnalyticsConfiguration.write(value:to:))
    }
}

extension PutBucketCorsInput {

    static func write(value: PutBucketCorsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CORSConfiguration"].write(value.corsConfiguration, with: S3ClientTypes.CORSConfiguration.write(value:to:))
    }
}

extension PutBucketEncryptionInput {

    static func write(value: PutBucketEncryptionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ServerSideEncryptionConfiguration"].write(value.serverSideEncryptionConfiguration, with: S3ClientTypes.ServerSideEncryptionConfiguration.write(value:to:))
    }
}

extension PutBucketIntelligentTieringConfigurationInput {

    static func write(value: PutBucketIntelligentTieringConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["IntelligentTieringConfiguration"].write(value.intelligentTieringConfiguration, with: S3ClientTypes.IntelligentTieringConfiguration.write(value:to:))
    }
}

extension PutBucketInventoryConfigurationInput {

    static func write(value: PutBucketInventoryConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["InventoryConfiguration"].write(value.inventoryConfiguration, with: S3ClientTypes.InventoryConfiguration.write(value:to:))
    }
}

extension PutBucketLifecycleConfigurationInput {

    static func write(value: PutBucketLifecycleConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["LifecycleConfiguration"].write(value.lifecycleConfiguration, with: S3ClientTypes.BucketLifecycleConfiguration.write(value:to:))
    }
}

extension PutBucketLoggingInput {

    static func write(value: PutBucketLoggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["BucketLoggingStatus"].write(value.bucketLoggingStatus, with: S3ClientTypes.BucketLoggingStatus.write(value:to:))
    }
}

extension PutBucketMetricsConfigurationInput {

    static func write(value: PutBucketMetricsConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["MetricsConfiguration"].write(value.metricsConfiguration, with: S3ClientTypes.MetricsConfiguration.write(value:to:))
    }
}

extension PutBucketNotificationConfigurationInput {

    static func write(value: PutBucketNotificationConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["NotificationConfiguration"].write(value.notificationConfiguration, with: S3ClientTypes.NotificationConfiguration.write(value:to:))
    }
}

extension PutBucketOwnershipControlsInput {

    static func write(value: PutBucketOwnershipControlsInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["OwnershipControls"].write(value.ownershipControls, with: S3ClientTypes.OwnershipControls.write(value:to:))
    }
}

extension PutBucketPolicyInput {

    static func write(value: PutBucketPolicyInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Policy"].write(value.policy)
    }
}

extension PutBucketReplicationInput {

    static func write(value: PutBucketReplicationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ReplicationConfiguration"].write(value.replicationConfiguration, with: S3ClientTypes.ReplicationConfiguration.write(value:to:))
    }
}

extension PutBucketRequestPaymentInput {

    static func write(value: PutBucketRequestPaymentInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["RequestPaymentConfiguration"].write(value.requestPaymentConfiguration, with: S3ClientTypes.RequestPaymentConfiguration.write(value:to:))
    }
}

extension PutBucketTaggingInput {

    static func write(value: PutBucketTaggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Tagging"].write(value.tagging, with: S3ClientTypes.Tagging.write(value:to:))
    }
}

extension PutBucketVersioningInput {

    static func write(value: PutBucketVersioningInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["VersioningConfiguration"].write(value.versioningConfiguration, with: S3ClientTypes.VersioningConfiguration.write(value:to:))
    }
}

extension PutBucketWebsiteInput {

    static func write(value: PutBucketWebsiteInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["WebsiteConfiguration"].write(value.websiteConfiguration, with: S3ClientTypes.WebsiteConfiguration.write(value:to:))
    }
}

extension PutObjectInput {

    static func write(value: PutObjectInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
    }
}

extension PutObjectAclInput {

    static func write(value: PutObjectAclInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessControlPolicy"].write(value.accessControlPolicy, with: S3ClientTypes.AccessControlPolicy.write(value:to:))
    }
}

extension PutObjectLegalHoldInput {

    static func write(value: PutObjectLegalHoldInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["LegalHold"].write(value.legalHold, with: S3ClientTypes.ObjectLockLegalHold.write(value:to:))
    }
}

extension PutObjectLockConfigurationInput {

    static func write(value: PutObjectLockConfigurationInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ObjectLockConfiguration"].write(value.objectLockConfiguration, with: S3ClientTypes.ObjectLockConfiguration.write(value:to:))
    }
}

extension PutObjectRetentionInput {

    static func write(value: PutObjectRetentionInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Retention"].write(value.retention, with: S3ClientTypes.ObjectLockRetention.write(value:to:))
    }
}

extension PutObjectTaggingInput {

    static func write(value: PutObjectTaggingInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Tagging"].write(value.tagging, with: S3ClientTypes.Tagging.write(value:to:))
    }
}

extension PutPublicAccessBlockInput {

    static func write(value: PutPublicAccessBlockInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["PublicAccessBlockConfiguration"].write(value.publicAccessBlockConfiguration, with: S3ClientTypes.PublicAccessBlockConfiguration.write(value:to:))
    }
}

extension RestoreObjectInput {

    static func write(value: RestoreObjectInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["RestoreRequest"].write(value.restoreRequest, with: S3ClientTypes.RestoreRequest.write(value:to:))
    }
}

extension SelectObjectContentInput {

    static func write(value: SelectObjectContentInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Expression"].write(value.expression)
        try writer["ExpressionType"].write(value.expressionType)
        try writer["InputSerialization"].write(value.inputSerialization, with: S3ClientTypes.InputSerialization.write(value:to:))
        try writer["OutputSerialization"].write(value.outputSerialization, with: S3ClientTypes.OutputSerialization.write(value:to:))
        try writer["RequestProgress"].write(value.requestProgress, with: S3ClientTypes.RequestProgress.write(value:to:))
        try writer["ScanRange"].write(value.scanRange, with: S3ClientTypes.ScanRange.write(value:to:))
    }
}

extension UploadPartInput {

    static func write(value: UploadPartInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
    }
}

extension WriteGetObjectResponseInput {

    static func write(value: WriteGetObjectResponseInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
    }
}

extension AbortMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AbortMultipartUploadOutput {
        var value = AbortMultipartUploadOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        return value
    }
}

extension CompleteMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompleteMultipartUploadOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = CompleteMultipartUploadOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            value.expiration = expirationHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        value.bucket = try reader["Bucket"].readIfPresent()
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        value.eTag = try reader["ETag"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.location = try reader["Location"].readIfPresent()
        return value
    }
}

extension CopyObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CopyObjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = CopyObjectOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            value.copySourceVersionId = copySourceVersionIdHeaderValue
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            value.expiration = expirationHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            value.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        value.copyObjectResult = try reader.readIfPresent(with: S3ClientTypes.CopyObjectResult.read(from:))
        return value
    }
}

extension CreateBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBucketOutput {
        var value = CreateBucketOutput()
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            value.location = locationHeaderValue
        }
        return value
    }
}

extension CreateMultipartUploadOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMultipartUploadOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMultipartUploadOutput()
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            value.abortDate = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: abortDateHeaderValue)
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            value.abortRuleId = abortRuleIdHeaderValue
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let checksumAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-algorithm") {
            value.checksumAlgorithm = S3ClientTypes.ChecksumAlgorithm(rawValue: checksumAlgorithmHeaderValue)
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            value.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        value.bucket = try reader["Bucket"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.uploadId = try reader["UploadId"].readIfPresent()
        return value
    }
}

extension CreateSessionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSessionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSessionOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            value.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        value.credentials = try reader["Credentials"].readIfPresent(with: S3ClientTypes.SessionCredentials.read(from:))
        return value
    }
}

extension DeleteBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketOutput {
        return DeleteBucketOutput()
    }
}

extension DeleteBucketAnalyticsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketAnalyticsConfigurationOutput {
        return DeleteBucketAnalyticsConfigurationOutput()
    }
}

extension DeleteBucketCorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketCorsOutput {
        return DeleteBucketCorsOutput()
    }
}

extension DeleteBucketEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketEncryptionOutput {
        return DeleteBucketEncryptionOutput()
    }
}

extension DeleteBucketIntelligentTieringConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketIntelligentTieringConfigurationOutput {
        return DeleteBucketIntelligentTieringConfigurationOutput()
    }
}

extension DeleteBucketInventoryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketInventoryConfigurationOutput {
        return DeleteBucketInventoryConfigurationOutput()
    }
}

extension DeleteBucketLifecycleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketLifecycleOutput {
        return DeleteBucketLifecycleOutput()
    }
}

extension DeleteBucketMetricsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketMetricsConfigurationOutput {
        return DeleteBucketMetricsConfigurationOutput()
    }
}

extension DeleteBucketOwnershipControlsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketOwnershipControlsOutput {
        return DeleteBucketOwnershipControlsOutput()
    }
}

extension DeleteBucketPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketPolicyOutput {
        return DeleteBucketPolicyOutput()
    }
}

extension DeleteBucketReplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketReplicationOutput {
        return DeleteBucketReplicationOutput()
    }
}

extension DeleteBucketTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketTaggingOutput {
        return DeleteBucketTaggingOutput()
    }
}

extension DeleteBucketWebsiteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBucketWebsiteOutput {
        return DeleteBucketWebsiteOutput()
    }
}

extension DeleteObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteObjectOutput {
        var value = DeleteObjectOutput()
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            value.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        return value
    }
}

extension DeleteObjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteObjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteObjectsOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.deleted = try reader["Deleted"].readListIfPresent(memberReadingClosure: S3ClientTypes.DeletedObject.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.errors = try reader["Error"].readListIfPresent(memberReadingClosure: S3ClientTypes.Error.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension DeleteObjectTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteObjectTaggingOutput {
        var value = DeleteObjectTaggingOutput()
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        return value
    }
}

extension DeletePublicAccessBlockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePublicAccessBlockOutput {
        return DeletePublicAccessBlockOutput()
    }
}

extension GetBucketAccelerateConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketAccelerateConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketAccelerateConfigurationOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetBucketAclOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketAclOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketAclOutput()
        value.grants = try reader["AccessControlList"].readListIfPresent(memberReadingClosure: S3ClientTypes.Grant.read(from:), memberNodeInfo: "Grant", isFlattened: false)
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        return value
    }
}

extension GetBucketAnalyticsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketAnalyticsConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketAnalyticsConfigurationOutput()
        value.analyticsConfiguration = try reader.readIfPresent(with: S3ClientTypes.AnalyticsConfiguration.read(from:))
        return value
    }
}

extension GetBucketCorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketCorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketCorsOutput()
        value.corsRules = try reader["CORSRule"].readListIfPresent(memberReadingClosure: S3ClientTypes.CORSRule.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension GetBucketEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketEncryptionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketEncryptionOutput()
        value.serverSideEncryptionConfiguration = try reader.readIfPresent(with: S3ClientTypes.ServerSideEncryptionConfiguration.read(from:))
        return value
    }
}

extension GetBucketIntelligentTieringConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketIntelligentTieringConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketIntelligentTieringConfigurationOutput()
        value.intelligentTieringConfiguration = try reader.readIfPresent(with: S3ClientTypes.IntelligentTieringConfiguration.read(from:))
        return value
    }
}

extension GetBucketInventoryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketInventoryConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketInventoryConfigurationOutput()
        value.inventoryConfiguration = try reader.readIfPresent(with: S3ClientTypes.InventoryConfiguration.read(from:))
        return value
    }
}

extension GetBucketLifecycleConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketLifecycleConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketLifecycleConfigurationOutput()
        if let transitionDefaultMinimumObjectSizeHeaderValue = httpResponse.headers.value(for: "x-amz-transition-default-minimum-object-size") {
            value.transitionDefaultMinimumObjectSize = S3ClientTypes.TransitionDefaultMinimumObjectSize(rawValue: transitionDefaultMinimumObjectSizeHeaderValue)
        }
        value.rules = try reader["Rule"].readListIfPresent(memberReadingClosure: S3ClientTypes.LifecycleRule.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension GetBucketLocationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketLocationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader.unwrap()
        var value = GetBucketLocationOutput()
        value.locationConstraint = try reader["LocationConstraint"].readIfPresent()
        return value
    }
}

extension GetBucketLoggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketLoggingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketLoggingOutput()
        value.loggingEnabled = try reader["LoggingEnabled"].readIfPresent(with: S3ClientTypes.LoggingEnabled.read(from:))
        return value
    }
}

extension GetBucketMetricsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketMetricsConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketMetricsConfigurationOutput()
        value.metricsConfiguration = try reader.readIfPresent(with: S3ClientTypes.MetricsConfiguration.read(from:))
        return value
    }
}

extension GetBucketNotificationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketNotificationConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketNotificationConfigurationOutput()
        value.eventBridgeConfiguration = try reader["EventBridgeConfiguration"].readIfPresent(with: S3ClientTypes.EventBridgeConfiguration.read(from:))
        value.lambdaFunctionConfigurations = try reader["CloudFunctionConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.LambdaFunctionConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.queueConfigurations = try reader["QueueConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.QueueConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.topicConfigurations = try reader["TopicConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.TopicConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension GetBucketOwnershipControlsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketOwnershipControlsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketOwnershipControlsOutput()
        value.ownershipControls = try reader.readIfPresent(with: S3ClientTypes.OwnershipControls.read(from:))
        return value
    }
}

extension GetBucketPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketPolicyOutput {
        var value = GetBucketPolicyOutput()
        if let data = try await httpResponse.body.readData(), let output = Swift.String(data: data, encoding: .utf8) {
            value.policy = output
        }
        return value
    }
}

extension GetBucketPolicyStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketPolicyStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketPolicyStatusOutput()
        value.policyStatus = try reader.readIfPresent(with: S3ClientTypes.PolicyStatus.read(from:))
        return value
    }
}

extension GetBucketReplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketReplicationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketReplicationOutput()
        value.replicationConfiguration = try reader.readIfPresent(with: S3ClientTypes.ReplicationConfiguration.read(from:))
        return value
    }
}

extension GetBucketRequestPaymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketRequestPaymentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketRequestPaymentOutput()
        value.payer = try reader["Payer"].readIfPresent()
        return value
    }
}

extension GetBucketTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketTaggingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketTaggingOutput()
        value.tagSet = try reader["TagSet"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false) ?? []
        return value
    }
}

extension GetBucketVersioningOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketVersioningOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketVersioningOutput()
        value.mfaDelete = try reader["MfaDelete"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetBucketWebsiteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBucketWebsiteOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetBucketWebsiteOutput()
        value.errorDocument = try reader["ErrorDocument"].readIfPresent(with: S3ClientTypes.ErrorDocument.read(from:))
        value.indexDocument = try reader["IndexDocument"].readIfPresent(with: S3ClientTypes.IndexDocument.read(from:))
        value.redirectAllRequestsTo = try reader["RedirectAllRequestsTo"].readIfPresent(with: S3ClientTypes.RedirectAllRequestsTo.read(from:))
        value.routingRules = try reader["RoutingRules"].readListIfPresent(memberReadingClosure: S3ClientTypes.RoutingRule.read(from:), memberNodeInfo: "RoutingRule", isFlattened: false)
        return value
    }
}

extension GetObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectOutput {
        var value = GetObjectOutput()
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            value.acceptRanges = acceptRangesHeaderValue
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            value.cacheControl = cacheControlHeaderValue
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            value.checksumCRC32 = checksumCRC32HeaderValue
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            value.checksumCRC32C = checksumCRC32CHeaderValue
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            value.checksumSHA1 = checksumSHA1HeaderValue
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            value.checksumSHA256 = checksumSHA256HeaderValue
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            value.contentDisposition = contentDispositionHeaderValue
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            value.contentEncoding = contentEncodingHeaderValue
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            value.contentLanguage = contentLanguageHeaderValue
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            value.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        }
        if let contentRangeHeaderValue = httpResponse.headers.value(for: "Content-Range") {
            value.contentRange = contentRangeHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            value.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            value.expiration = expirationHeaderValue
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            value.expires = expiresHeaderValue
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            value.lastModified = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            value.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            value.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            value.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            value.objectLockRetainUntilDate = SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: objectLockRetainUntilDateHeaderValue)
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            value.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            value.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            value.restore = restoreHeaderValue
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            value.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        }
        if let tagCountHeaderValue = httpResponse.headers.value(for: "x-amz-tagging-count") {
            value.tagCount = Swift.Int(tagCountHeaderValue) ?? 0
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            value.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            value.metadata = mapMember
        } else {
            value.metadata = [:]
        }
        switch httpResponse.body {
        case .data(let data):
            value.body = .data(data)
        case .stream(let stream):
            value.body = .stream(stream)
        case .noStream:
            value.body = nil
        }
        return value
    }
}

extension GetObjectAclOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectAclOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectAclOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.grants = try reader["AccessControlList"].readListIfPresent(memberReadingClosure: S3ClientTypes.Grant.read(from:), memberNodeInfo: "Grant", isFlattened: false)
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        return value
    }
}

extension GetObjectAttributesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectAttributesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectAttributesOutput()
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            value.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            value.lastModified = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        value.checksum = try reader["Checksum"].readIfPresent(with: S3ClientTypes.Checksum.read(from:))
        value.eTag = try reader["ETag"].readIfPresent()
        value.objectParts = try reader["ObjectParts"].readIfPresent(with: S3ClientTypes.GetObjectAttributesParts.read(from:))
        value.objectSize = try reader["ObjectSize"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        return value
    }
}

extension GetObjectLegalHoldOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectLegalHoldOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectLegalHoldOutput()
        value.legalHold = try reader.readIfPresent(with: S3ClientTypes.ObjectLockLegalHold.read(from:))
        return value
    }
}

extension GetObjectLockConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectLockConfigurationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectLockConfigurationOutput()
        value.objectLockConfiguration = try reader.readIfPresent(with: S3ClientTypes.ObjectLockConfiguration.read(from:))
        return value
    }
}

extension GetObjectRetentionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectRetentionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectRetentionOutput()
        value.retention = try reader.readIfPresent(with: S3ClientTypes.ObjectLockRetention.read(from:))
        return value
    }
}

extension GetObjectTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectTaggingOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetObjectTaggingOutput()
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        value.tagSet = try reader["TagSet"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: false) ?? []
        return value
    }
}

extension GetObjectTorrentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetObjectTorrentOutput {
        var value = GetObjectTorrentOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        switch httpResponse.body {
        case .data(let data):
            value.body = .data(data)
        case .stream(let stream):
            value.body = .stream(stream)
        case .noStream:
            value.body = nil
        }
        return value
    }
}

extension GetPublicAccessBlockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPublicAccessBlockOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = GetPublicAccessBlockOutput()
        value.publicAccessBlockConfiguration = try reader.readIfPresent(with: S3ClientTypes.PublicAccessBlockConfiguration.read(from:))
        return value
    }
}

extension HeadBucketOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> HeadBucketOutput {
        var value = HeadBucketOutput()
        if let accessPointAliasHeaderValue = httpResponse.headers.value(for: "x-amz-access-point-alias") {
            value.accessPointAlias = Swift.Bool(accessPointAliasHeaderValue) ?? false
        }
        if let bucketLocationNameHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-location-name") {
            value.bucketLocationName = bucketLocationNameHeaderValue
        }
        if let bucketLocationTypeHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-location-type") {
            value.bucketLocationType = S3ClientTypes.LocationType(rawValue: bucketLocationTypeHeaderValue)
        }
        if let bucketRegionHeaderValue = httpResponse.headers.value(for: "x-amz-bucket-region") {
            value.bucketRegion = bucketRegionHeaderValue
        }
        return value
    }
}

extension HeadObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> HeadObjectOutput {
        var value = HeadObjectOutput()
        if let acceptRangesHeaderValue = httpResponse.headers.value(for: "accept-ranges") {
            value.acceptRanges = acceptRangesHeaderValue
        }
        if let archiveStatusHeaderValue = httpResponse.headers.value(for: "x-amz-archive-status") {
            value.archiveStatus = S3ClientTypes.ArchiveStatus(rawValue: archiveStatusHeaderValue)
        }
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let cacheControlHeaderValue = httpResponse.headers.value(for: "Cache-Control") {
            value.cacheControl = cacheControlHeaderValue
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            value.checksumCRC32 = checksumCRC32HeaderValue
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            value.checksumCRC32C = checksumCRC32CHeaderValue
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            value.checksumSHA1 = checksumSHA1HeaderValue
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            value.checksumSHA256 = checksumSHA256HeaderValue
        }
        if let contentDispositionHeaderValue = httpResponse.headers.value(for: "Content-Disposition") {
            value.contentDisposition = contentDispositionHeaderValue
        }
        if let contentEncodingHeaderValue = httpResponse.headers.value(for: "Content-Encoding") {
            value.contentEncoding = contentEncodingHeaderValue
        }
        if let contentLanguageHeaderValue = httpResponse.headers.value(for: "Content-Language") {
            value.contentLanguage = contentLanguageHeaderValue
        }
        if let contentLengthHeaderValue = httpResponse.headers.value(for: "Content-Length") {
            value.contentLength = Swift.Int(contentLengthHeaderValue) ?? 0
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let deleteMarkerHeaderValue = httpResponse.headers.value(for: "x-amz-delete-marker") {
            value.deleteMarker = Swift.Bool(deleteMarkerHeaderValue) ?? false
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            value.expiration = expirationHeaderValue
        }
        if let expiresHeaderValue = httpResponse.headers.value(for: "Expires") {
            value.expires = expiresHeaderValue
        }
        if let lastModifiedHeaderValue = httpResponse.headers.value(for: "Last-Modified") {
            value.lastModified = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: lastModifiedHeaderValue)
        }
        if let missingMetaHeaderValue = httpResponse.headers.value(for: "x-amz-missing-meta") {
            value.missingMeta = Swift.Int(missingMetaHeaderValue) ?? 0
        }
        if let objectLockLegalHoldStatusHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-legal-hold") {
            value.objectLockLegalHoldStatus = S3ClientTypes.ObjectLockLegalHoldStatus(rawValue: objectLockLegalHoldStatusHeaderValue)
        }
        if let objectLockModeHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-mode") {
            value.objectLockMode = S3ClientTypes.ObjectLockMode(rawValue: objectLockModeHeaderValue)
        }
        if let objectLockRetainUntilDateHeaderValue = httpResponse.headers.value(for: "x-amz-object-lock-retain-until-date") {
            value.objectLockRetainUntilDate = SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: objectLockRetainUntilDateHeaderValue)
        }
        if let partsCountHeaderValue = httpResponse.headers.value(for: "x-amz-mp-parts-count") {
            value.partsCount = Swift.Int(partsCountHeaderValue) ?? 0
        }
        if let replicationStatusHeaderValue = httpResponse.headers.value(for: "x-amz-replication-status") {
            value.replicationStatus = S3ClientTypes.ReplicationStatus(rawValue: replicationStatusHeaderValue)
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let restoreHeaderValue = httpResponse.headers.value(for: "x-amz-restore") {
            value.restore = restoreHeaderValue
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        if let storageClassHeaderValue = httpResponse.headers.value(for: "x-amz-storage-class") {
            value.storageClass = S3ClientTypes.StorageClass(rawValue: storageClassHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        if let websiteRedirectLocationHeaderValue = httpResponse.headers.value(for: "x-amz-website-redirect-location") {
            value.websiteRedirectLocation = websiteRedirectLocationHeaderValue
        }
        let keysForMetadata = httpResponse.headers.dictionary.keys.filter({ $0.starts(with: "x-amz-meta-") })
        if (!keysForMetadata.isEmpty) {
            var mapMember = [Swift.String: String]()
            for headerKey in keysForMetadata {
                let mapMemberValue = httpResponse.headers.dictionary[headerKey]?[0]
                let mapMemberKey = headerKey.removePrefix("x-amz-meta-")
                mapMember[mapMemberKey] = mapMemberValue
            }
            value.metadata = mapMember
        } else {
            value.metadata = [:]
        }
        return value
    }
}

extension ListBucketAnalyticsConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBucketAnalyticsConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListBucketAnalyticsConfigurationsOutput()
        value.analyticsConfigurationList = try reader["AnalyticsConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.AnalyticsConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.nextContinuationToken = try reader["NextContinuationToken"].readIfPresent()
        return value
    }
}

extension ListBucketIntelligentTieringConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBucketIntelligentTieringConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListBucketIntelligentTieringConfigurationsOutput()
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.intelligentTieringConfigurationList = try reader["IntelligentTieringConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.IntelligentTieringConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.nextContinuationToken = try reader["NextContinuationToken"].readIfPresent()
        return value
    }
}

extension ListBucketInventoryConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBucketInventoryConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListBucketInventoryConfigurationsOutput()
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.inventoryConfigurationList = try reader["InventoryConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.InventoryConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.nextContinuationToken = try reader["NextContinuationToken"].readIfPresent()
        return value
    }
}

extension ListBucketMetricsConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBucketMetricsConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListBucketMetricsConfigurationsOutput()
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.metricsConfigurationList = try reader["MetricsConfiguration"].readListIfPresent(memberReadingClosure: S3ClientTypes.MetricsConfiguration.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.nextContinuationToken = try reader["NextContinuationToken"].readIfPresent()
        return value
    }
}

extension ListBucketsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListBucketsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListBucketsOutput()
        value.buckets = try reader["Buckets"].readListIfPresent(memberReadingClosure: S3ClientTypes.Bucket.read(from:), memberNodeInfo: "Bucket", isFlattened: false)
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension ListDirectoryBucketsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDirectoryBucketsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListDirectoryBucketsOutput()
        value.buckets = try reader["Buckets"].readListIfPresent(memberReadingClosure: S3ClientTypes.Bucket.read(from:), memberNodeInfo: "Bucket", isFlattened: false)
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        return value
    }
}

extension ListMultipartUploadsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMultipartUploadsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListMultipartUploadsOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.bucket = try reader["Bucket"].readIfPresent()
        value.commonPrefixes = try reader["CommonPrefixes"].readListIfPresent(memberReadingClosure: S3ClientTypes.CommonPrefix.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.delimiter = try reader["Delimiter"].readIfPresent()
        value.encodingType = try reader["EncodingType"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.keyMarker = try reader["KeyMarker"].readIfPresent()
        value.maxUploads = try reader["MaxUploads"].readIfPresent()
        value.nextKeyMarker = try reader["NextKeyMarker"].readIfPresent()
        value.nextUploadIdMarker = try reader["NextUploadIdMarker"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.uploadIdMarker = try reader["UploadIdMarker"].readIfPresent()
        value.uploads = try reader["Upload"].readListIfPresent(memberReadingClosure: S3ClientTypes.MultipartUpload.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension ListObjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListObjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListObjectsOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.commonPrefixes = try reader["CommonPrefixes"].readListIfPresent(memberReadingClosure: S3ClientTypes.CommonPrefix.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.contents = try reader["Contents"].readListIfPresent(memberReadingClosure: S3ClientTypes.Object.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.delimiter = try reader["Delimiter"].readIfPresent()
        value.encodingType = try reader["EncodingType"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.marker = try reader["Marker"].readIfPresent()
        value.maxKeys = try reader["MaxKeys"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.nextMarker = try reader["NextMarker"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension ListObjectsV2Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListObjectsV2Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListObjectsV2Output()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.commonPrefixes = try reader["CommonPrefixes"].readListIfPresent(memberReadingClosure: S3ClientTypes.CommonPrefix.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.contents = try reader["Contents"].readListIfPresent(memberReadingClosure: S3ClientTypes.Object.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.continuationToken = try reader["ContinuationToken"].readIfPresent()
        value.delimiter = try reader["Delimiter"].readIfPresent()
        value.encodingType = try reader["EncodingType"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.keyCount = try reader["KeyCount"].readIfPresent()
        value.maxKeys = try reader["MaxKeys"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.nextContinuationToken = try reader["NextContinuationToken"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.startAfter = try reader["StartAfter"].readIfPresent()
        return value
    }
}

extension ListObjectVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListObjectVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListObjectVersionsOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.commonPrefixes = try reader["CommonPrefixes"].readListIfPresent(memberReadingClosure: S3ClientTypes.CommonPrefix.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.deleteMarkers = try reader["DeleteMarker"].readListIfPresent(memberReadingClosure: S3ClientTypes.DeleteMarkerEntry.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.delimiter = try reader["Delimiter"].readIfPresent()
        value.encodingType = try reader["EncodingType"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.keyMarker = try reader["KeyMarker"].readIfPresent()
        value.maxKeys = try reader["MaxKeys"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.nextKeyMarker = try reader["NextKeyMarker"].readIfPresent()
        value.nextVersionIdMarker = try reader["NextVersionIdMarker"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.versionIdMarker = try reader["VersionIdMarker"].readIfPresent()
        value.versions = try reader["Version"].readListIfPresent(memberReadingClosure: S3ClientTypes.ObjectVersion.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension ListPartsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPartsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = ListPartsOutput()
        if let abortDateHeaderValue = httpResponse.headers.value(for: "x-amz-abort-date") {
            value.abortDate = SmithyTimestamps.TimestampFormatter(format: .httpDate).date(from: abortDateHeaderValue)
        }
        if let abortRuleIdHeaderValue = httpResponse.headers.value(for: "x-amz-abort-rule-id") {
            value.abortRuleId = abortRuleIdHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        value.bucket = try reader["Bucket"].readIfPresent()
        value.checksumAlgorithm = try reader["ChecksumAlgorithm"].readIfPresent()
        value.initiator = try reader["Initiator"].readIfPresent(with: S3ClientTypes.Initiator.read(from:))
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.maxParts = try reader["MaxParts"].readIfPresent()
        value.nextPartNumberMarker = try reader["NextPartNumberMarker"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.partNumberMarker = try reader["PartNumberMarker"].readIfPresent()
        value.parts = try reader["Part"].readListIfPresent(memberReadingClosure: S3ClientTypes.Part.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.uploadId = try reader["UploadId"].readIfPresent()
        return value
    }
}

extension PutBucketAccelerateConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketAccelerateConfigurationOutput {
        return PutBucketAccelerateConfigurationOutput()
    }
}

extension PutBucketAclOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketAclOutput {
        return PutBucketAclOutput()
    }
}

extension PutBucketAnalyticsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketAnalyticsConfigurationOutput {
        return PutBucketAnalyticsConfigurationOutput()
    }
}

extension PutBucketCorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketCorsOutput {
        return PutBucketCorsOutput()
    }
}

extension PutBucketEncryptionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketEncryptionOutput {
        return PutBucketEncryptionOutput()
    }
}

extension PutBucketIntelligentTieringConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketIntelligentTieringConfigurationOutput {
        return PutBucketIntelligentTieringConfigurationOutput()
    }
}

extension PutBucketInventoryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketInventoryConfigurationOutput {
        return PutBucketInventoryConfigurationOutput()
    }
}

extension PutBucketLifecycleConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketLifecycleConfigurationOutput {
        var value = PutBucketLifecycleConfigurationOutput()
        if let transitionDefaultMinimumObjectSizeHeaderValue = httpResponse.headers.value(for: "x-amz-transition-default-minimum-object-size") {
            value.transitionDefaultMinimumObjectSize = S3ClientTypes.TransitionDefaultMinimumObjectSize(rawValue: transitionDefaultMinimumObjectSizeHeaderValue)
        }
        return value
    }
}

extension PutBucketLoggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketLoggingOutput {
        return PutBucketLoggingOutput()
    }
}

extension PutBucketMetricsConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketMetricsConfigurationOutput {
        return PutBucketMetricsConfigurationOutput()
    }
}

extension PutBucketNotificationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketNotificationConfigurationOutput {
        return PutBucketNotificationConfigurationOutput()
    }
}

extension PutBucketOwnershipControlsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketOwnershipControlsOutput {
        return PutBucketOwnershipControlsOutput()
    }
}

extension PutBucketPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketPolicyOutput {
        return PutBucketPolicyOutput()
    }
}

extension PutBucketReplicationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketReplicationOutput {
        return PutBucketReplicationOutput()
    }
}

extension PutBucketRequestPaymentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketRequestPaymentOutput {
        return PutBucketRequestPaymentOutput()
    }
}

extension PutBucketTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketTaggingOutput {
        return PutBucketTaggingOutput()
    }
}

extension PutBucketVersioningOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketVersioningOutput {
        return PutBucketVersioningOutput()
    }
}

extension PutBucketWebsiteOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutBucketWebsiteOutput {
        return PutBucketWebsiteOutput()
    }
}

extension PutObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectOutput {
        var value = PutObjectOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            value.checksumCRC32 = checksumCRC32HeaderValue
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            value.checksumCRC32C = checksumCRC32CHeaderValue
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            value.checksumSHA1 = checksumSHA1HeaderValue
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            value.checksumSHA256 = checksumSHA256HeaderValue
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        }
        if let expirationHeaderValue = httpResponse.headers.value(for: "x-amz-expiration") {
            value.expiration = expirationHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsEncryptionContextHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-context") {
            value.ssekmsEncryptionContext = ssekmsEncryptionContextHeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        return value
    }
}

extension PutObjectAclOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectAclOutput {
        var value = PutObjectAclOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        return value
    }
}

extension PutObjectLegalHoldOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectLegalHoldOutput {
        var value = PutObjectLegalHoldOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        return value
    }
}

extension PutObjectLockConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectLockConfigurationOutput {
        var value = PutObjectLockConfigurationOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        return value
    }
}

extension PutObjectRetentionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectRetentionOutput {
        var value = PutObjectRetentionOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        return value
    }
}

extension PutObjectTaggingOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutObjectTaggingOutput {
        var value = PutObjectTaggingOutput()
        if let versionIdHeaderValue = httpResponse.headers.value(for: "x-amz-version-id") {
            value.versionId = versionIdHeaderValue
        }
        return value
    }
}

extension PutPublicAccessBlockOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutPublicAccessBlockOutput {
        return PutPublicAccessBlockOutput()
    }
}

extension RestoreObjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RestoreObjectOutput {
        var value = RestoreObjectOutput()
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let restoreOutputPathHeaderValue = httpResponse.headers.value(for: "x-amz-restore-output-path") {
            value.restoreOutputPath = restoreOutputPathHeaderValue
        }
        return value
    }
}

extension SelectObjectContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SelectObjectContentOutput {
        var value = SelectObjectContentOutput()
        if case .stream(let stream) = httpResponse.body {
            let messageDecoder = SmithyEventStreams.DefaultMessageDecoder()
            let decoderStream = SmithyEventStreams.DefaultMessageDecoderStream(stream: stream, messageDecoder: messageDecoder, unmarshalClosure: S3ClientTypes.SelectObjectContentEventStream.unmarshal)
            value.payload = decoderStream.toAsyncStream()
        }
        return value
    }
}

extension UploadPartOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UploadPartOutput {
        var value = UploadPartOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let checksumCRC32HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32") {
            value.checksumCRC32 = checksumCRC32HeaderValue
        }
        if let checksumCRC32CHeaderValue = httpResponse.headers.value(for: "x-amz-checksum-crc32c") {
            value.checksumCRC32C = checksumCRC32CHeaderValue
        }
        if let checksumSHA1HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha1") {
            value.checksumSHA1 = checksumSHA1HeaderValue
        }
        if let checksumSHA256HeaderValue = httpResponse.headers.value(for: "x-amz-checksum-sha256") {
            value.checksumSHA256 = checksumSHA256HeaderValue
        }
        if let eTagHeaderValue = httpResponse.headers.value(for: "ETag") {
            value.eTag = eTagHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        return value
    }
}

extension UploadPartCopyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UploadPartCopyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader
        var value = UploadPartCopyOutput()
        if let bucketKeyEnabledHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-bucket-key-enabled") {
            value.bucketKeyEnabled = Swift.Bool(bucketKeyEnabledHeaderValue) ?? false
        }
        if let copySourceVersionIdHeaderValue = httpResponse.headers.value(for: "x-amz-copy-source-version-id") {
            value.copySourceVersionId = copySourceVersionIdHeaderValue
        }
        if let requestChargedHeaderValue = httpResponse.headers.value(for: "x-amz-request-charged") {
            value.requestCharged = S3ClientTypes.RequestCharged(rawValue: requestChargedHeaderValue)
        }
        if let sseCustomerAlgorithmHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-algorithm") {
            value.sseCustomerAlgorithm = sseCustomerAlgorithmHeaderValue
        }
        if let sseCustomerKeyMD5HeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-customer-key-MD5") {
            value.sseCustomerKeyMD5 = sseCustomerKeyMD5HeaderValue
        }
        if let ssekmsKeyIdHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption-aws-kms-key-id") {
            value.ssekmsKeyId = ssekmsKeyIdHeaderValue
        }
        if let serverSideEncryptionHeaderValue = httpResponse.headers.value(for: "x-amz-server-side-encryption") {
            value.serverSideEncryption = S3ClientTypes.ServerSideEncryption(rawValue: serverSideEncryptionHeaderValue)
        }
        value.copyPartResult = try reader.readIfPresent(with: S3ClientTypes.CopyPartResult.read(from:))
        return value
    }
}

extension WriteGetObjectResponseOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> WriteGetObjectResponseOutput {
        return WriteGetObjectResponseOutput()
    }
}

func httpServiceError(baseError: AWSClientRuntime.RestXMLError) throws -> Swift.Error? {
    if baseError.httpResponse.statusCode == .notFound && baseError.httpResponse.body.isEmpty {
        return try NotFound.makeError(baseError: baseError)
    }
    return nil
}

enum AbortMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchUpload": return try NoSuchUpload.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompleteMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CopyObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ObjectNotInActiveTierError": return try ObjectNotInActiveTierError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "BucketAlreadyExists": return try BucketAlreadyExists.makeError(baseError: baseError)
            case "BucketAlreadyOwnedByYou": return try BucketAlreadyOwnedByYou.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMultipartUploadOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSessionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchBucket": return try NoSuchBucket.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketAnalyticsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketCorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketIntelligentTieringConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketInventoryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketLifecycleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketMetricsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketOwnershipControlsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketReplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBucketWebsiteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteObjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteObjectTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePublicAccessBlockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketAccelerateConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketAclOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketAnalyticsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketCorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketIntelligentTieringConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketInventoryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketLifecycleConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketLocationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketLoggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketMetricsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketNotificationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketOwnershipControlsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketPolicyStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketReplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketRequestPaymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketVersioningOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBucketWebsiteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "InvalidObjectState": return try InvalidObjectState.makeError(baseError: baseError)
            case "NoSuchKey": return try NoSuchKey.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectAclOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchKey": return try NoSuchKey.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectAttributesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchKey": return try NoSuchKey.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectLegalHoldOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectLockConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectRetentionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetObjectTorrentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPublicAccessBlockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum HeadBucketOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NotFound": return try NotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum HeadObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NotFound": return try NotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBucketAnalyticsConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBucketIntelligentTieringConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBucketInventoryConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBucketMetricsConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListBucketsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDirectoryBucketsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMultipartUploadsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListObjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchBucket": return try NoSuchBucket.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListObjectsV2OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchBucket": return try NoSuchBucket.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListObjectVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPartsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketAccelerateConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketAclOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketAnalyticsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketCorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketEncryptionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketIntelligentTieringConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketInventoryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketLifecycleConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketLoggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketMetricsConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketNotificationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketOwnershipControlsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketReplicationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketRequestPaymentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketVersioningOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutBucketWebsiteOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectAclOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "NoSuchKey": return try NoSuchKey.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectLegalHoldOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectLockConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectRetentionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutObjectTaggingOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutPublicAccessBlockOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RestoreObjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            case "ObjectAlreadyInActiveTierError": return try ObjectAlreadyInActiveTierError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SelectObjectContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UploadPartOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UploadPartCopyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum WriteGetObjectResponseOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: true)
        if let error = baseError.customError() { return error }
        if let error = try httpServiceError(baseError: baseError) { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension NoSuchUpload {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> NoSuchUpload {
        var value = NoSuchUpload()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension ObjectNotInActiveTierError {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> ObjectNotInActiveTierError {
        var value = ObjectNotInActiveTierError()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension BucketAlreadyOwnedByYou {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> BucketAlreadyOwnedByYou {
        var value = BucketAlreadyOwnedByYou()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension BucketAlreadyExists {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> BucketAlreadyExists {
        var value = BucketAlreadyExists()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension NoSuchBucket {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> NoSuchBucket {
        var value = NoSuchBucket()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension NoSuchKey {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> NoSuchKey {
        var value = NoSuchKey()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension InvalidObjectState {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> InvalidObjectState {
        let reader = baseError.errorBodyReader
        var value = InvalidObjectState()
        value.properties.accessTier = try reader["AccessTier"].readIfPresent()
        value.properties.storageClass = try reader["StorageClass"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension NotFound {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> NotFound {
        var value = NotFound()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension ObjectAlreadyInActiveTierError {

    static func makeError(baseError: AWSClientRuntime.RestXMLError) throws -> ObjectAlreadyInActiveTierError {
        var value = ObjectAlreadyInActiveTierError()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        value.requestID2 = baseError.requestID2
        return value
    }
}

extension S3ClientTypes.SelectObjectContentEventStream {
    static var unmarshal: SmithyEventStreamsAPI.UnmarshalClosure<S3ClientTypes.SelectObjectContentEventStream> {
        { message in
            switch try message.type() {
            case .event(let params):
                switch params.eventType {
                case "Records":
                    var event = S3ClientTypes.RecordsEvent()
                    event.payload = message.payload
                    return .records(event)
                case "Stats":
                    var event = S3ClientTypes.StatsEvent()
                    let value = try SmithyXML.Reader.readFrom(message.payload, with: S3ClientTypes.Stats.read(from:))
                    event.details = value
                    return .stats(event)
                case "Progress":
                    var event = S3ClientTypes.ProgressEvent()
                    let value = try SmithyXML.Reader.readFrom(message.payload, with: S3ClientTypes.Progress.read(from:))
                    event.details = value
                    return .progress(event)
                case "Cont":
                    let value = try SmithyXML.Reader.readFrom(message.payload, with: S3ClientTypes.ContinuationEvent.read(from:))
                    return .cont(value)
                case "End":
                    let value = try SmithyXML.Reader.readFrom(message.payload, with: S3ClientTypes.EndEvent.read(from:))
                    return .end(value)
                default:
                    return .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
                }
            case .exception(let params):
                let makeError: (SmithyEventStreamsAPI.Message, SmithyEventStreamsAPI.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                    switch params.exceptionType {
                    default:
                        let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                        return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                    }
                }
                let error = try makeError(message, params)
                throw error
            case .error(let params):
                let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
            case .unknown(messageType: let messageType):
                throw Smithy.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
            }
        }
    }
}

extension S3ClientTypes.CopyObjectResult {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.CopyObjectResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.CopyObjectResult()
        value.eTag = try reader["ETag"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.SessionCredentials {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SessionCredentials {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.SessionCredentials()
        value.accessKeyId = try reader["AccessKeyId"].readIfPresent() ?? ""
        value.secretAccessKey = try reader["SecretAccessKey"].readIfPresent() ?? ""
        value.sessionToken = try reader["SessionToken"].readIfPresent() ?? ""
        value.expiration = try reader["Expiration"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension S3ClientTypes.DeletedObject {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.DeletedObject {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.DeletedObject()
        value.key = try reader["Key"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.deleteMarker = try reader["DeleteMarker"].readIfPresent()
        value.deleteMarkerVersionId = try reader["DeleteMarkerVersionId"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Error {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Error {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Error()
        value.key = try reader["Key"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.code = try reader["Code"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Owner {

    static func write(value: S3ClientTypes.Owner?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["ID"].write(value.id)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Owner {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Owner()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.id = try reader["ID"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Grant {

    static func write(value: S3ClientTypes.Grant?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer[.init("Grantee", namespaceDef: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].write(value.grantee, with: S3ClientTypes.Grantee.write(value:to:))
        try writer["Permission"].write(value.permission)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Grant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Grant()
        value.grantee = try reader[.init("Grantee", namespaceDef: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].readIfPresent(with: S3ClientTypes.Grantee.read(from:))
        value.permission = try reader["Permission"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Grantee {

    static func write(value: S3ClientTypes.Grantee?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["EmailAddress"].write(value.emailAddress)
        try writer["ID"].write(value.id)
        try writer[.init("xsi:type", location: .attribute)].write(value.type)
        try writer["URI"].write(value.uri)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Grantee {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Grantee()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.emailAddress = try reader["EmailAddress"].readIfPresent()
        value.id = try reader["ID"].readIfPresent()
        value.uri = try reader["URI"].readIfPresent()
        value.type = try reader[.init("xsi:type", location: .attribute)].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.AnalyticsConfiguration {

    static func write(value: S3ClientTypes.AnalyticsConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: S3ClientTypes.AnalyticsFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["StorageClassAnalysis"].write(value.storageClassAnalysis, with: S3ClientTypes.StorageClassAnalysis.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AnalyticsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AnalyticsConfiguration()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.AnalyticsFilter.read(from:))
        value.storageClassAnalysis = try reader["StorageClassAnalysis"].readIfPresent(with: S3ClientTypes.StorageClassAnalysis.read(from:))
        return value
    }
}

extension S3ClientTypes.StorageClassAnalysis {

    static func write(value: S3ClientTypes.StorageClassAnalysis?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DataExport"].write(value.dataExport, with: S3ClientTypes.StorageClassAnalysisDataExport.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.StorageClassAnalysis {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.StorageClassAnalysis()
        value.dataExport = try reader["DataExport"].readIfPresent(with: S3ClientTypes.StorageClassAnalysisDataExport.read(from:))
        return value
    }
}

extension S3ClientTypes.StorageClassAnalysisDataExport {

    static func write(value: S3ClientTypes.StorageClassAnalysisDataExport?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination, with: S3ClientTypes.AnalyticsExportDestination.write(value:to:))
        try writer["OutputSchemaVersion"].write(value.outputSchemaVersion)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.StorageClassAnalysisDataExport {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.StorageClassAnalysisDataExport()
        value.outputSchemaVersion = try reader["OutputSchemaVersion"].readIfPresent() ?? .sdkUnknown("")
        value.destination = try reader["Destination"].readIfPresent(with: S3ClientTypes.AnalyticsExportDestination.read(from:))
        return value
    }
}

extension S3ClientTypes.AnalyticsExportDestination {

    static func write(value: S3ClientTypes.AnalyticsExportDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["S3BucketDestination"].write(value.s3BucketDestination, with: S3ClientTypes.AnalyticsS3BucketDestination.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AnalyticsExportDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AnalyticsExportDestination()
        value.s3BucketDestination = try reader["S3BucketDestination"].readIfPresent(with: S3ClientTypes.AnalyticsS3BucketDestination.read(from:))
        return value
    }
}

extension S3ClientTypes.AnalyticsS3BucketDestination {

    static func write(value: S3ClientTypes.AnalyticsS3BucketDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["BucketAccountId"].write(value.bucketAccountId)
        try writer["Format"].write(value.format)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AnalyticsS3BucketDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AnalyticsS3BucketDestination()
        value.format = try reader["Format"].readIfPresent() ?? .sdkUnknown("")
        value.bucketAccountId = try reader["BucketAccountId"].readIfPresent()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.AnalyticsFilter {

    static func write(value: S3ClientTypes.AnalyticsFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        switch value {
            case let .and(and):
                try writer["And"].write(and, with: S3ClientTypes.AnalyticsAndOperator.write(value:to:))
            case let .`prefix`(`prefix`):
                try writer["Prefix"].write(`prefix`)
            case let .tag(tag):
                try writer["Tag"].write(tag, with: S3ClientTypes.Tag.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AnalyticsFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "Prefix":
                return .`prefix`(try reader["Prefix"].read())
            case "Tag":
                return .tag(try reader["Tag"].read(with: S3ClientTypes.Tag.read(from:)))
            case "And":
                return .and(try reader["And"].read(with: S3ClientTypes.AnalyticsAndOperator.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension S3ClientTypes.AnalyticsAndOperator {

    static func write(value: S3ClientTypes.AnalyticsAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AnalyticsAndOperator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AnalyticsAndOperator()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tags = try reader["Tag"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: true)
        return value
    }
}

extension S3ClientTypes.Tag {

    static func write(value: S3ClientTypes.Tag?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension S3ClientTypes.CORSRule {

    static func write(value: S3ClientTypes.CORSRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AllowedHeader"].writeList(value.allowedHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["AllowedMethod"].writeList(value.allowedMethods, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["AllowedOrigin"].writeList(value.allowedOrigins, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["ExposeHeader"].writeList(value.exposeHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["ID"].write(value.id)
        try writer["MaxAgeSeconds"].write(value.maxAgeSeconds)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.CORSRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.CORSRule()
        value.id = try reader["ID"].readIfPresent()
        value.allowedHeaders = try reader["AllowedHeader"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true)
        value.allowedMethods = try reader["AllowedMethod"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.allowedOrigins = try reader["AllowedOrigin"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.exposeHeaders = try reader["ExposeHeader"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: true)
        value.maxAgeSeconds = try reader["MaxAgeSeconds"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ServerSideEncryptionConfiguration {

    static func write(value: S3ClientTypes.ServerSideEncryptionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Rule"].writeList(value.rules, memberWritingClosure: S3ClientTypes.ServerSideEncryptionRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ServerSideEncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ServerSideEncryptionConfiguration()
        value.rules = try reader["Rule"].readListIfPresent(memberReadingClosure: S3ClientTypes.ServerSideEncryptionRule.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension S3ClientTypes.ServerSideEncryptionRule {

    static func write(value: S3ClientTypes.ServerSideEncryptionRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ApplyServerSideEncryptionByDefault"].write(value.applyServerSideEncryptionByDefault, with: S3ClientTypes.ServerSideEncryptionByDefault.write(value:to:))
        try writer["BucketKeyEnabled"].write(value.bucketKeyEnabled)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ServerSideEncryptionRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ServerSideEncryptionRule()
        value.applyServerSideEncryptionByDefault = try reader["ApplyServerSideEncryptionByDefault"].readIfPresent(with: S3ClientTypes.ServerSideEncryptionByDefault.read(from:))
        value.bucketKeyEnabled = try reader["BucketKeyEnabled"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ServerSideEncryptionByDefault {

    static func write(value: S3ClientTypes.ServerSideEncryptionByDefault?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["KMSMasterKeyID"].write(value.kmsMasterKeyID)
        try writer["SSEAlgorithm"].write(value.sseAlgorithm)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ServerSideEncryptionByDefault {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ServerSideEncryptionByDefault()
        value.sseAlgorithm = try reader["SSEAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.kmsMasterKeyID = try reader["KMSMasterKeyID"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.IntelligentTieringConfiguration {

    static func write(value: S3ClientTypes.IntelligentTieringConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: S3ClientTypes.IntelligentTieringFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["Status"].write(value.status)
        try writer["Tiering"].writeList(value.tierings, memberWritingClosure: S3ClientTypes.Tiering.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.IntelligentTieringConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.IntelligentTieringConfiguration()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.IntelligentTieringFilter.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.tierings = try reader["Tiering"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tiering.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension S3ClientTypes.Tiering {

    static func write(value: S3ClientTypes.Tiering?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessTier"].write(value.accessTier)
        try writer["Days"].write(value.days)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Tiering {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Tiering()
        value.days = try reader["Days"].readIfPresent() ?? 0
        value.accessTier = try reader["AccessTier"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.IntelligentTieringFilter {

    static func write(value: S3ClientTypes.IntelligentTieringFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["And"].write(value.and, with: S3ClientTypes.IntelligentTieringAndOperator.write(value:to:))
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].write(value.tag, with: S3ClientTypes.Tag.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.IntelligentTieringFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.IntelligentTieringFilter()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tag = try reader["Tag"].readIfPresent(with: S3ClientTypes.Tag.read(from:))
        value.and = try reader["And"].readIfPresent(with: S3ClientTypes.IntelligentTieringAndOperator.read(from:))
        return value
    }
}

extension S3ClientTypes.IntelligentTieringAndOperator {

    static func write(value: S3ClientTypes.IntelligentTieringAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.IntelligentTieringAndOperator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.IntelligentTieringAndOperator()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tags = try reader["Tag"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: true)
        return value
    }
}

extension S3ClientTypes.InventoryConfiguration {

    static func write(value: S3ClientTypes.InventoryConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Destination"].write(value.destination, with: S3ClientTypes.InventoryDestination.write(value:to:))
        try writer["Filter"].write(value.filter, with: S3ClientTypes.InventoryFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["IncludedObjectVersions"].write(value.includedObjectVersions)
        try writer["IsEnabled"].write(value.isEnabled)
        try writer["OptionalFields"].writeList(value.optionalFields, memberWritingClosure: SmithyReadWrite.WritingClosureBox<S3ClientTypes.InventoryOptionalField>().write(value:to:), memberNodeInfo: "Field", isFlattened: false)
        try writer["Schedule"].write(value.schedule, with: S3ClientTypes.InventorySchedule.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventoryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventoryConfiguration()
        value.destination = try reader["Destination"].readIfPresent(with: S3ClientTypes.InventoryDestination.read(from:))
        value.isEnabled = try reader["IsEnabled"].readIfPresent() ?? false
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.InventoryFilter.read(from:))
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.includedObjectVersions = try reader["IncludedObjectVersions"].readIfPresent() ?? .sdkUnknown("")
        value.optionalFields = try reader["OptionalFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.InventoryOptionalField>().read(from:), memberNodeInfo: "Field", isFlattened: false)
        value.schedule = try reader["Schedule"].readIfPresent(with: S3ClientTypes.InventorySchedule.read(from:))
        return value
    }
}

extension S3ClientTypes.InventorySchedule {

    static func write(value: S3ClientTypes.InventorySchedule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Frequency"].write(value.frequency)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventorySchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventorySchedule()
        value.frequency = try reader["Frequency"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.InventoryFilter {

    static func write(value: S3ClientTypes.InventoryFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventoryFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventoryFilter()
        value.`prefix` = try reader["Prefix"].readIfPresent() ?? ""
        return value
    }
}

extension S3ClientTypes.InventoryDestination {

    static func write(value: S3ClientTypes.InventoryDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["S3BucketDestination"].write(value.s3BucketDestination, with: S3ClientTypes.InventoryS3BucketDestination.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventoryDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventoryDestination()
        value.s3BucketDestination = try reader["S3BucketDestination"].readIfPresent(with: S3ClientTypes.InventoryS3BucketDestination.read(from:))
        return value
    }
}

extension S3ClientTypes.InventoryS3BucketDestination {

    static func write(value: S3ClientTypes.InventoryS3BucketDestination?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccountId"].write(value.accountId)
        try writer["Bucket"].write(value.bucket)
        try writer["Encryption"].write(value.encryption, with: S3ClientTypes.InventoryEncryption.write(value:to:))
        try writer["Format"].write(value.format)
        try writer["Prefix"].write(value.`prefix`)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventoryS3BucketDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventoryS3BucketDestination()
        value.accountId = try reader["AccountId"].readIfPresent()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.format = try reader["Format"].readIfPresent() ?? .sdkUnknown("")
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.encryption = try reader["Encryption"].readIfPresent(with: S3ClientTypes.InventoryEncryption.read(from:))
        return value
    }
}

extension S3ClientTypes.InventoryEncryption {

    static func write(value: S3ClientTypes.InventoryEncryption?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["SSE-KMS"].write(value.ssekms, with: S3ClientTypes.SSEKMS.write(value:to:))
        try writer["SSE-S3"].write(value.sses3, with: S3ClientTypes.SSES3.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.InventoryEncryption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.InventoryEncryption()
        value.sses3 = try reader["SSE-S3"].readIfPresent(with: S3ClientTypes.SSES3.read(from:))
        value.ssekms = try reader["SSE-KMS"].readIfPresent(with: S3ClientTypes.SSEKMS.read(from:))
        return value
    }
}

extension S3ClientTypes.SSEKMS {

    static func write(value: S3ClientTypes.SSEKMS?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["KeyId"].write(value.keyId)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SSEKMS {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.SSEKMS()
        value.keyId = try reader["KeyId"].readIfPresent() ?? ""
        return value
    }
}

extension S3ClientTypes.SSES3 {

    static func write(value: S3ClientTypes.SSES3?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SSES3 {
        guard reader.hasContent || Mirror(reflecting: self).children.isEmpty else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return S3ClientTypes.SSES3()
    }
}

extension S3ClientTypes.LifecycleRule {

    static func write(value: S3ClientTypes.LifecycleRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AbortIncompleteMultipartUpload"].write(value.abortIncompleteMultipartUpload, with: S3ClientTypes.AbortIncompleteMultipartUpload.write(value:to:))
        try writer["Expiration"].write(value.expiration, with: S3ClientTypes.LifecycleExpiration.write(value:to:))
        try writer["Filter"].write(value.filter, with: S3ClientTypes.LifecycleRuleFilter.write(value:to:))
        try writer["ID"].write(value.id)
        try writer["NoncurrentVersionExpiration"].write(value.noncurrentVersionExpiration, with: S3ClientTypes.NoncurrentVersionExpiration.write(value:to:))
        try writer["NoncurrentVersionTransition"].writeList(value.noncurrentVersionTransitions, memberWritingClosure: S3ClientTypes.NoncurrentVersionTransition.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Prefix"].write(value.`prefix`)
        try writer["Status"].write(value.status)
        try writer["Transition"].writeList(value.transitions, memberWritingClosure: S3ClientTypes.Transition.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LifecycleRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LifecycleRule()
        value.expiration = try reader["Expiration"].readIfPresent(with: S3ClientTypes.LifecycleExpiration.read(from:))
        value.id = try reader["ID"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.LifecycleRuleFilter.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.transitions = try reader["Transition"].readListIfPresent(memberReadingClosure: S3ClientTypes.Transition.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.noncurrentVersionTransitions = try reader["NoncurrentVersionTransition"].readListIfPresent(memberReadingClosure: S3ClientTypes.NoncurrentVersionTransition.read(from:), memberNodeInfo: "member", isFlattened: true)
        value.noncurrentVersionExpiration = try reader["NoncurrentVersionExpiration"].readIfPresent(with: S3ClientTypes.NoncurrentVersionExpiration.read(from:))
        value.abortIncompleteMultipartUpload = try reader["AbortIncompleteMultipartUpload"].readIfPresent(with: S3ClientTypes.AbortIncompleteMultipartUpload.read(from:))
        return value
    }
}

extension S3ClientTypes.AbortIncompleteMultipartUpload {

    static func write(value: S3ClientTypes.AbortIncompleteMultipartUpload?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DaysAfterInitiation"].write(value.daysAfterInitiation)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AbortIncompleteMultipartUpload {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AbortIncompleteMultipartUpload()
        value.daysAfterInitiation = try reader["DaysAfterInitiation"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.NoncurrentVersionExpiration {

    static func write(value: S3ClientTypes.NoncurrentVersionExpiration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["NewerNoncurrentVersions"].write(value.newerNoncurrentVersions)
        try writer["NoncurrentDays"].write(value.noncurrentDays)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.NoncurrentVersionExpiration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.NoncurrentVersionExpiration()
        value.noncurrentDays = try reader["NoncurrentDays"].readIfPresent()
        value.newerNoncurrentVersions = try reader["NewerNoncurrentVersions"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.NoncurrentVersionTransition {

    static func write(value: S3ClientTypes.NoncurrentVersionTransition?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["NewerNoncurrentVersions"].write(value.newerNoncurrentVersions)
        try writer["NoncurrentDays"].write(value.noncurrentDays)
        try writer["StorageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.NoncurrentVersionTransition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.NoncurrentVersionTransition()
        value.noncurrentDays = try reader["NoncurrentDays"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.newerNoncurrentVersions = try reader["NewerNoncurrentVersions"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Transition {

    static func write(value: S3ClientTypes.Transition?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Date"].writeTimestamp(value.date, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Days"].write(value.days)
        try writer["StorageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Transition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Transition()
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.days = try reader["Days"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.LifecycleRuleFilter {

    static func write(value: S3ClientTypes.LifecycleRuleFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["And"].write(value.and, with: S3ClientTypes.LifecycleRuleAndOperator.write(value:to:))
        try writer["ObjectSizeGreaterThan"].write(value.objectSizeGreaterThan)
        try writer["ObjectSizeLessThan"].write(value.objectSizeLessThan)
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].write(value.tag, with: S3ClientTypes.Tag.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LifecycleRuleFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LifecycleRuleFilter()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tag = try reader["Tag"].readIfPresent(with: S3ClientTypes.Tag.read(from:))
        value.objectSizeGreaterThan = try reader["ObjectSizeGreaterThan"].readIfPresent()
        value.objectSizeLessThan = try reader["ObjectSizeLessThan"].readIfPresent()
        value.and = try reader["And"].readIfPresent(with: S3ClientTypes.LifecycleRuleAndOperator.read(from:))
        return value
    }
}

extension S3ClientTypes.LifecycleRuleAndOperator {

    static func write(value: S3ClientTypes.LifecycleRuleAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ObjectSizeGreaterThan"].write(value.objectSizeGreaterThan)
        try writer["ObjectSizeLessThan"].write(value.objectSizeLessThan)
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LifecycleRuleAndOperator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LifecycleRuleAndOperator()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tags = try reader["Tag"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: true)
        value.objectSizeGreaterThan = try reader["ObjectSizeGreaterThan"].readIfPresent()
        value.objectSizeLessThan = try reader["ObjectSizeLessThan"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.LifecycleExpiration {

    static func write(value: S3ClientTypes.LifecycleExpiration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Date"].writeTimestamp(value.date, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Days"].write(value.days)
        try writer["ExpiredObjectDeleteMarker"].write(value.expiredObjectDeleteMarker)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LifecycleExpiration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LifecycleExpiration()
        value.date = try reader["Date"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.days = try reader["Days"].readIfPresent()
        value.expiredObjectDeleteMarker = try reader["ExpiredObjectDeleteMarker"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.LoggingEnabled {

    static func write(value: S3ClientTypes.LoggingEnabled?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["TargetBucket"].write(value.targetBucket)
        try writer["TargetGrants"].writeList(value.targetGrants, memberWritingClosure: S3ClientTypes.TargetGrant.write(value:to:), memberNodeInfo: "Grant", isFlattened: false)
        try writer["TargetObjectKeyFormat"].write(value.targetObjectKeyFormat, with: S3ClientTypes.TargetObjectKeyFormat.write(value:to:))
        try writer["TargetPrefix"].write(value.targetPrefix)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LoggingEnabled {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LoggingEnabled()
        value.targetBucket = try reader["TargetBucket"].readIfPresent() ?? ""
        value.targetGrants = try reader["TargetGrants"].readListIfPresent(memberReadingClosure: S3ClientTypes.TargetGrant.read(from:), memberNodeInfo: "Grant", isFlattened: false)
        value.targetPrefix = try reader["TargetPrefix"].readIfPresent() ?? ""
        value.targetObjectKeyFormat = try reader["TargetObjectKeyFormat"].readIfPresent(with: S3ClientTypes.TargetObjectKeyFormat.read(from:))
        return value
    }
}

extension S3ClientTypes.TargetObjectKeyFormat {

    static func write(value: S3ClientTypes.TargetObjectKeyFormat?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["PartitionedPrefix"].write(value.partitionedPrefix, with: S3ClientTypes.PartitionedPrefix.write(value:to:))
        try writer["SimplePrefix"].write(value.simplePrefix, with: S3ClientTypes.SimplePrefix.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.TargetObjectKeyFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.TargetObjectKeyFormat()
        value.simplePrefix = try reader["SimplePrefix"].readIfPresent(with: S3ClientTypes.SimplePrefix.read(from:))
        value.partitionedPrefix = try reader["PartitionedPrefix"].readIfPresent(with: S3ClientTypes.PartitionedPrefix.read(from:))
        return value
    }
}

extension S3ClientTypes.PartitionedPrefix {

    static func write(value: S3ClientTypes.PartitionedPrefix?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["PartitionDateSource"].write(value.partitionDateSource)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.PartitionedPrefix {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.PartitionedPrefix()
        value.partitionDateSource = try reader["PartitionDateSource"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.SimplePrefix {

    static func write(value: S3ClientTypes.SimplePrefix?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SimplePrefix {
        guard reader.hasContent || Mirror(reflecting: self).children.isEmpty else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return S3ClientTypes.SimplePrefix()
    }
}

extension S3ClientTypes.TargetGrant {

    static func write(value: S3ClientTypes.TargetGrant?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer[.init("Grantee", namespaceDef: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].write(value.grantee, with: S3ClientTypes.Grantee.write(value:to:))
        try writer["Permission"].write(value.permission)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.TargetGrant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.TargetGrant()
        value.grantee = try reader[.init("Grantee", namespaceDef: .init(prefix: "xsi", uri: "http://www.w3.org/2001/XMLSchema-instance"))].readIfPresent(with: S3ClientTypes.Grantee.read(from:))
        value.permission = try reader["Permission"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.MetricsConfiguration {

    static func write(value: S3ClientTypes.MetricsConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: S3ClientTypes.MetricsFilter.write(value:to:))
        try writer["Id"].write(value.id)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.MetricsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.MetricsConfiguration()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.MetricsFilter.read(from:))
        return value
    }
}

extension S3ClientTypes.MetricsFilter {

    static func write(value: S3ClientTypes.MetricsFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        switch value {
            case let .accesspointarn(accesspointarn):
                try writer["AccessPointArn"].write(accesspointarn)
            case let .and(and):
                try writer["And"].write(and, with: S3ClientTypes.MetricsAndOperator.write(value:to:))
            case let .`prefix`(`prefix`):
                try writer["Prefix"].write(`prefix`)
            case let .tag(tag):
                try writer["Tag"].write(tag, with: S3ClientTypes.Tag.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.MetricsFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "Prefix":
                return .`prefix`(try reader["Prefix"].read())
            case "Tag":
                return .tag(try reader["Tag"].read(with: S3ClientTypes.Tag.read(from:)))
            case "AccessPointArn":
                return .accesspointarn(try reader["AccessPointArn"].read())
            case "And":
                return .and(try reader["And"].read(with: S3ClientTypes.MetricsAndOperator.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension S3ClientTypes.MetricsAndOperator {

    static func write(value: S3ClientTypes.MetricsAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessPointArn"].write(value.accessPointArn)
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.MetricsAndOperator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.MetricsAndOperator()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tags = try reader["Tag"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: true)
        value.accessPointArn = try reader["AccessPointArn"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.TopicConfiguration {

    static func write(value: S3ClientTypes.TopicConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Event"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<S3ClientTypes.Event>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Filter"].write(value.filter, with: S3ClientTypes.NotificationConfigurationFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["Topic"].write(value.topicArn)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.TopicConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.TopicConfiguration()
        value.id = try reader["Id"].readIfPresent()
        value.topicArn = try reader["Topic"].readIfPresent() ?? ""
        value.events = try reader["Event"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.Event>().read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.NotificationConfigurationFilter.read(from:))
        return value
    }
}

extension S3ClientTypes.NotificationConfigurationFilter {

    static func write(value: S3ClientTypes.NotificationConfigurationFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["S3Key"].write(value.key, with: S3ClientTypes.S3KeyFilter.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.NotificationConfigurationFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.NotificationConfigurationFilter()
        value.key = try reader["S3Key"].readIfPresent(with: S3ClientTypes.S3KeyFilter.read(from:))
        return value
    }
}

extension S3ClientTypes.S3KeyFilter {

    static func write(value: S3ClientTypes.S3KeyFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["FilterRule"].writeList(value.filterRules, memberWritingClosure: S3ClientTypes.FilterRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.S3KeyFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.S3KeyFilter()
        value.filterRules = try reader["FilterRule"].readListIfPresent(memberReadingClosure: S3ClientTypes.FilterRule.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension S3ClientTypes.FilterRule {

    static func write(value: S3ClientTypes.FilterRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.FilterRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.FilterRule()
        value.name = try reader["Name"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.QueueConfiguration {

    static func write(value: S3ClientTypes.QueueConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Event"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<S3ClientTypes.Event>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Filter"].write(value.filter, with: S3ClientTypes.NotificationConfigurationFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["Queue"].write(value.queueArn)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.QueueConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.QueueConfiguration()
        value.id = try reader["Id"].readIfPresent()
        value.queueArn = try reader["Queue"].readIfPresent() ?? ""
        value.events = try reader["Event"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.Event>().read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.NotificationConfigurationFilter.read(from:))
        return value
    }
}

extension S3ClientTypes.LambdaFunctionConfiguration {

    static func write(value: S3ClientTypes.LambdaFunctionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Event"].writeList(value.events, memberWritingClosure: SmithyReadWrite.WritingClosureBox<S3ClientTypes.Event>().write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Filter"].write(value.filter, with: S3ClientTypes.NotificationConfigurationFilter.write(value:to:))
        try writer["Id"].write(value.id)
        try writer["CloudFunction"].write(value.lambdaFunctionArn)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.LambdaFunctionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.LambdaFunctionConfiguration()
        value.id = try reader["Id"].readIfPresent()
        value.lambdaFunctionArn = try reader["CloudFunction"].readIfPresent() ?? ""
        value.events = try reader["Event"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.Event>().read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.NotificationConfigurationFilter.read(from:))
        return value
    }
}

extension S3ClientTypes.EventBridgeConfiguration {

    static func write(value: S3ClientTypes.EventBridgeConfiguration?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.EventBridgeConfiguration {
        guard reader.hasContent || Mirror(reflecting: self).children.isEmpty else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return S3ClientTypes.EventBridgeConfiguration()
    }
}

extension S3ClientTypes.OwnershipControls {

    static func write(value: S3ClientTypes.OwnershipControls?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Rule"].writeList(value.rules, memberWritingClosure: S3ClientTypes.OwnershipControlsRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.OwnershipControls {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.OwnershipControls()
        value.rules = try reader["Rule"].readListIfPresent(memberReadingClosure: S3ClientTypes.OwnershipControlsRule.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension S3ClientTypes.OwnershipControlsRule {

    static func write(value: S3ClientTypes.OwnershipControlsRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ObjectOwnership"].write(value.objectOwnership)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.OwnershipControlsRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.OwnershipControlsRule()
        value.objectOwnership = try reader["ObjectOwnership"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.PolicyStatus {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.PolicyStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.PolicyStatus()
        value.isPublic = try reader["IsPublic"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ReplicationConfiguration {

    static func write(value: S3ClientTypes.ReplicationConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Role"].write(value.role)
        try writer["Rule"].writeList(value.rules, memberWritingClosure: S3ClientTypes.ReplicationRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationConfiguration()
        value.role = try reader["Role"].readIfPresent() ?? ""
        value.rules = try reader["Rule"].readListIfPresent(memberReadingClosure: S3ClientTypes.ReplicationRule.read(from:), memberNodeInfo: "member", isFlattened: true) ?? []
        return value
    }
}

extension S3ClientTypes.ReplicationRule {

    static func write(value: S3ClientTypes.ReplicationRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DeleteMarkerReplication"].write(value.deleteMarkerReplication, with: S3ClientTypes.DeleteMarkerReplication.write(value:to:))
        try writer["Destination"].write(value.destination, with: S3ClientTypes.Destination.write(value:to:))
        try writer["ExistingObjectReplication"].write(value.existingObjectReplication, with: S3ClientTypes.ExistingObjectReplication.write(value:to:))
        try writer["Filter"].write(value.filter, with: S3ClientTypes.ReplicationRuleFilter.write(value:to:))
        try writer["ID"].write(value.id)
        try writer["Prefix"].write(value.`prefix`)
        try writer["Priority"].write(value.priority)
        try writer["SourceSelectionCriteria"].write(value.sourceSelectionCriteria, with: S3ClientTypes.SourceSelectionCriteria.write(value:to:))
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationRule()
        value.id = try reader["ID"].readIfPresent()
        value.priority = try reader["Priority"].readIfPresent()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.filter = try reader["Filter"].readIfPresent(with: S3ClientTypes.ReplicationRuleFilter.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.sourceSelectionCriteria = try reader["SourceSelectionCriteria"].readIfPresent(with: S3ClientTypes.SourceSelectionCriteria.read(from:))
        value.existingObjectReplication = try reader["ExistingObjectReplication"].readIfPresent(with: S3ClientTypes.ExistingObjectReplication.read(from:))
        value.destination = try reader["Destination"].readIfPresent(with: S3ClientTypes.Destination.read(from:))
        value.deleteMarkerReplication = try reader["DeleteMarkerReplication"].readIfPresent(with: S3ClientTypes.DeleteMarkerReplication.read(from:))
        return value
    }
}

extension S3ClientTypes.DeleteMarkerReplication {

    static func write(value: S3ClientTypes.DeleteMarkerReplication?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.DeleteMarkerReplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.DeleteMarkerReplication()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Destination {

    static func write(value: S3ClientTypes.Destination?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessControlTranslation"].write(value.accessControlTranslation, with: S3ClientTypes.AccessControlTranslation.write(value:to:))
        try writer["Account"].write(value.account)
        try writer["Bucket"].write(value.bucket)
        try writer["EncryptionConfiguration"].write(value.encryptionConfiguration, with: S3ClientTypes.EncryptionConfiguration.write(value:to:))
        try writer["Metrics"].write(value.metrics, with: S3ClientTypes.Metrics.write(value:to:))
        try writer["ReplicationTime"].write(value.replicationTime, with: S3ClientTypes.ReplicationTime.write(value:to:))
        try writer["StorageClass"].write(value.storageClass)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Destination()
        value.bucket = try reader["Bucket"].readIfPresent() ?? ""
        value.account = try reader["Account"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.accessControlTranslation = try reader["AccessControlTranslation"].readIfPresent(with: S3ClientTypes.AccessControlTranslation.read(from:))
        value.encryptionConfiguration = try reader["EncryptionConfiguration"].readIfPresent(with: S3ClientTypes.EncryptionConfiguration.read(from:))
        value.replicationTime = try reader["ReplicationTime"].readIfPresent(with: S3ClientTypes.ReplicationTime.read(from:))
        value.metrics = try reader["Metrics"].readIfPresent(with: S3ClientTypes.Metrics.read(from:))
        return value
    }
}

extension S3ClientTypes.Metrics {

    static func write(value: S3ClientTypes.Metrics?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["EventThreshold"].write(value.eventThreshold, with: S3ClientTypes.ReplicationTimeValue.write(value:to:))
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Metrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Metrics()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.eventThreshold = try reader["EventThreshold"].readIfPresent(with: S3ClientTypes.ReplicationTimeValue.read(from:))
        return value
    }
}

extension S3ClientTypes.ReplicationTimeValue {

    static func write(value: S3ClientTypes.ReplicationTimeValue?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Minutes"].write(value.minutes)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationTimeValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationTimeValue()
        value.minutes = try reader["Minutes"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ReplicationTime {

    static func write(value: S3ClientTypes.ReplicationTime?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
        try writer["Time"].write(value.time, with: S3ClientTypes.ReplicationTimeValue.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationTime {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationTime()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.time = try reader["Time"].readIfPresent(with: S3ClientTypes.ReplicationTimeValue.read(from:))
        return value
    }
}

extension S3ClientTypes.EncryptionConfiguration {

    static func write(value: S3ClientTypes.EncryptionConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ReplicaKmsKeyID"].write(value.replicaKmsKeyID)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.EncryptionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.EncryptionConfiguration()
        value.replicaKmsKeyID = try reader["ReplicaKmsKeyID"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.AccessControlTranslation {

    static func write(value: S3ClientTypes.AccessControlTranslation?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Owner"].write(value.owner)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.AccessControlTranslation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.AccessControlTranslation()
        value.owner = try reader["Owner"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.ExistingObjectReplication {

    static func write(value: S3ClientTypes.ExistingObjectReplication?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ExistingObjectReplication {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ExistingObjectReplication()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.SourceSelectionCriteria {

    static func write(value: S3ClientTypes.SourceSelectionCriteria?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ReplicaModifications"].write(value.replicaModifications, with: S3ClientTypes.ReplicaModifications.write(value:to:))
        try writer["SseKmsEncryptedObjects"].write(value.sseKmsEncryptedObjects, with: S3ClientTypes.SseKmsEncryptedObjects.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SourceSelectionCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.SourceSelectionCriteria()
        value.sseKmsEncryptedObjects = try reader["SseKmsEncryptedObjects"].readIfPresent(with: S3ClientTypes.SseKmsEncryptedObjects.read(from:))
        value.replicaModifications = try reader["ReplicaModifications"].readIfPresent(with: S3ClientTypes.ReplicaModifications.read(from:))
        return value
    }
}

extension S3ClientTypes.ReplicaModifications {

    static func write(value: S3ClientTypes.ReplicaModifications?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicaModifications {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicaModifications()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.SseKmsEncryptedObjects {

    static func write(value: S3ClientTypes.SseKmsEncryptedObjects?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.SseKmsEncryptedObjects {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.SseKmsEncryptedObjects()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension S3ClientTypes.ReplicationRuleFilter {

    static func write(value: S3ClientTypes.ReplicationRuleFilter?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["And"].write(value.and, with: S3ClientTypes.ReplicationRuleAndOperator.write(value:to:))
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].write(value.tag, with: S3ClientTypes.Tag.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationRuleFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationRuleFilter()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tag = try reader["Tag"].readIfPresent(with: S3ClientTypes.Tag.read(from:))
        value.and = try reader["And"].readIfPresent(with: S3ClientTypes.ReplicationRuleAndOperator.read(from:))
        return value
    }
}

extension S3ClientTypes.ReplicationRuleAndOperator {

    static func write(value: S3ClientTypes.ReplicationRuleAndOperator?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Prefix"].write(value.`prefix`)
        try writer["Tag"].writeList(value.tags, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: true)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ReplicationRuleAndOperator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ReplicationRuleAndOperator()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        value.tags = try reader["Tag"].readListIfPresent(memberReadingClosure: S3ClientTypes.Tag.read(from:), memberNodeInfo: "Tag", isFlattened: true)
        return value
    }
}

extension S3ClientTypes.RedirectAllRequestsTo {

    static func write(value: S3ClientTypes.RedirectAllRequestsTo?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["HostName"].write(value.hostName)
        try writer["Protocol"].write(value.`protocol`)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.RedirectAllRequestsTo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.RedirectAllRequestsTo()
        value.hostName = try reader["HostName"].readIfPresent() ?? ""
        value.`protocol` = try reader["Protocol"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.IndexDocument {

    static func write(value: S3ClientTypes.IndexDocument?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Suffix"].write(value.suffix)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.IndexDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.IndexDocument()
        value.suffix = try reader["Suffix"].readIfPresent() ?? ""
        return value
    }
}

extension S3ClientTypes.ErrorDocument {

    static func write(value: S3ClientTypes.ErrorDocument?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ErrorDocument {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ErrorDocument()
        value.key = try reader["Key"].readIfPresent() ?? ""
        return value
    }
}

extension S3ClientTypes.RoutingRule {

    static func write(value: S3ClientTypes.RoutingRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Condition"].write(value.condition, with: S3ClientTypes.Condition.write(value:to:))
        try writer["Redirect"].write(value.redirect, with: S3ClientTypes.Redirect.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.RoutingRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.RoutingRule()
        value.condition = try reader["Condition"].readIfPresent(with: S3ClientTypes.Condition.read(from:))
        value.redirect = try reader["Redirect"].readIfPresent(with: S3ClientTypes.Redirect.read(from:))
        return value
    }
}

extension S3ClientTypes.Redirect {

    static func write(value: S3ClientTypes.Redirect?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["HostName"].write(value.hostName)
        try writer["HttpRedirectCode"].write(value.httpRedirectCode)
        try writer["Protocol"].write(value.`protocol`)
        try writer["ReplaceKeyPrefixWith"].write(value.replaceKeyPrefixWith)
        try writer["ReplaceKeyWith"].write(value.replaceKeyWith)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Redirect {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Redirect()
        value.hostName = try reader["HostName"].readIfPresent()
        value.httpRedirectCode = try reader["HttpRedirectCode"].readIfPresent()
        value.`protocol` = try reader["Protocol"].readIfPresent()
        value.replaceKeyPrefixWith = try reader["ReplaceKeyPrefixWith"].readIfPresent()
        value.replaceKeyWith = try reader["ReplaceKeyWith"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Condition {

    static func write(value: S3ClientTypes.Condition?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["HttpErrorCodeReturnedEquals"].write(value.httpErrorCodeReturnedEquals)
        try writer["KeyPrefixEquals"].write(value.keyPrefixEquals)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Condition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Condition()
        value.httpErrorCodeReturnedEquals = try reader["HttpErrorCodeReturnedEquals"].readIfPresent()
        value.keyPrefixEquals = try reader["KeyPrefixEquals"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Checksum {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Checksum {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Checksum()
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.GetObjectAttributesParts {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.GetObjectAttributesParts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.GetObjectAttributesParts()
        value.totalPartsCount = try reader["PartsCount"].readIfPresent()
        value.partNumberMarker = try reader["PartNumberMarker"].readIfPresent()
        value.nextPartNumberMarker = try reader["NextPartNumberMarker"].readIfPresent()
        value.maxParts = try reader["MaxParts"].readIfPresent()
        value.isTruncated = try reader["IsTruncated"].readIfPresent()
        value.parts = try reader["Part"].readListIfPresent(memberReadingClosure: S3ClientTypes.ObjectPart.read(from:), memberNodeInfo: "member", isFlattened: true)
        return value
    }
}

extension S3ClientTypes.ObjectPart {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectPart {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectPart()
        value.partNumber = try reader["PartNumber"].readIfPresent()
        value.size = try reader["Size"].readIfPresent()
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ObjectLockLegalHold {

    static func write(value: S3ClientTypes.ObjectLockLegalHold?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectLockLegalHold {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectLockLegalHold()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ObjectLockConfiguration {

    static func write(value: S3ClientTypes.ObjectLockConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ObjectLockEnabled"].write(value.objectLockEnabled)
        try writer["Rule"].write(value.rule, with: S3ClientTypes.ObjectLockRule.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectLockConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectLockConfiguration()
        value.objectLockEnabled = try reader["ObjectLockEnabled"].readIfPresent()
        value.rule = try reader["Rule"].readIfPresent(with: S3ClientTypes.ObjectLockRule.read(from:))
        return value
    }
}

extension S3ClientTypes.ObjectLockRule {

    static func write(value: S3ClientTypes.ObjectLockRule?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DefaultRetention"].write(value.defaultRetention, with: S3ClientTypes.DefaultRetention.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectLockRule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectLockRule()
        value.defaultRetention = try reader["DefaultRetention"].readIfPresent(with: S3ClientTypes.DefaultRetention.read(from:))
        return value
    }
}

extension S3ClientTypes.DefaultRetention {

    static func write(value: S3ClientTypes.DefaultRetention?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Days"].write(value.days)
        try writer["Mode"].write(value.mode)
        try writer["Years"].write(value.years)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.DefaultRetention {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.DefaultRetention()
        value.mode = try reader["Mode"].readIfPresent()
        value.days = try reader["Days"].readIfPresent()
        value.years = try reader["Years"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.ObjectLockRetention {

    static func write(value: S3ClientTypes.ObjectLockRetention?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Mode"].write(value.mode)
        try writer["RetainUntilDate"].writeTimestamp(value.retainUntilDate, format: SmithyTimestamps.TimestampFormat.dateTime)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectLockRetention {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectLockRetention()
        value.mode = try reader["Mode"].readIfPresent()
        value.retainUntilDate = try reader["RetainUntilDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension S3ClientTypes.PublicAccessBlockConfiguration {

    static func write(value: S3ClientTypes.PublicAccessBlockConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["BlockPublicAcls"].write(value.blockPublicAcls)
        try writer["BlockPublicPolicy"].write(value.blockPublicPolicy)
        try writer["IgnorePublicAcls"].write(value.ignorePublicAcls)
        try writer["RestrictPublicBuckets"].write(value.restrictPublicBuckets)
    }

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.PublicAccessBlockConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.PublicAccessBlockConfiguration()
        value.blockPublicAcls = try reader["BlockPublicAcls"].readIfPresent()
        value.ignorePublicAcls = try reader["IgnorePublicAcls"].readIfPresent()
        value.blockPublicPolicy = try reader["BlockPublicPolicy"].readIfPresent()
        value.restrictPublicBuckets = try reader["RestrictPublicBuckets"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Bucket {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Bucket {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Bucket()
        value.name = try reader["Name"].readIfPresent()
        value.creationDate = try reader["CreationDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.bucketRegion = try reader["BucketRegion"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.MultipartUpload {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.MultipartUpload {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.MultipartUpload()
        value.uploadId = try reader["UploadId"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.initiated = try reader["Initiated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.initiator = try reader["Initiator"].readIfPresent(with: S3ClientTypes.Initiator.read(from:))
        value.checksumAlgorithm = try reader["ChecksumAlgorithm"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Initiator {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Initiator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Initiator()
        value.id = try reader["ID"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.CommonPrefix {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.CommonPrefix {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.CommonPrefix()
        value.`prefix` = try reader["Prefix"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.Object {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Object {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Object()
        value.key = try reader["Key"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.eTag = try reader["ETag"].readIfPresent()
        value.checksumAlgorithm = try reader["ChecksumAlgorithm"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.ChecksumAlgorithm>().read(from:), memberNodeInfo: "member", isFlattened: true)
        value.size = try reader["Size"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.restoreStatus = try reader["RestoreStatus"].readIfPresent(with: S3ClientTypes.RestoreStatus.read(from:))
        return value
    }
}

extension S3ClientTypes.RestoreStatus {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.RestoreStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.RestoreStatus()
        value.isRestoreInProgress = try reader["IsRestoreInProgress"].readIfPresent()
        value.restoreExpiryDate = try reader["RestoreExpiryDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension S3ClientTypes.ObjectVersion {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ObjectVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ObjectVersion()
        value.eTag = try reader["ETag"].readIfPresent()
        value.checksumAlgorithm = try reader["ChecksumAlgorithm"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<S3ClientTypes.ChecksumAlgorithm>().read(from:), memberNodeInfo: "member", isFlattened: true)
        value.size = try reader["Size"].readIfPresent()
        value.storageClass = try reader["StorageClass"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.isLatest = try reader["IsLatest"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.restoreStatus = try reader["RestoreStatus"].readIfPresent(with: S3ClientTypes.RestoreStatus.read(from:))
        return value
    }
}

extension S3ClientTypes.DeleteMarkerEntry {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.DeleteMarkerEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.DeleteMarkerEntry()
        value.owner = try reader["Owner"].readIfPresent(with: S3ClientTypes.Owner.read(from:))
        value.key = try reader["Key"].readIfPresent()
        value.versionId = try reader["VersionId"].readIfPresent()
        value.isLatest = try reader["IsLatest"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        return value
    }
}

extension S3ClientTypes.Part {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Part {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Part()
        value.partNumber = try reader["PartNumber"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.eTag = try reader["ETag"].readIfPresent()
        value.size = try reader["Size"].readIfPresent()
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.EndEvent {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.EndEvent {
        guard reader.hasContent || Mirror(reflecting: self).children.isEmpty else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return S3ClientTypes.EndEvent()
    }
}

extension S3ClientTypes.ContinuationEvent {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ContinuationEvent {
        guard reader.hasContent || Mirror(reflecting: self).children.isEmpty else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return S3ClientTypes.ContinuationEvent()
    }
}

extension S3ClientTypes.ProgressEvent {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.ProgressEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.ProgressEvent()
        value.details = try reader["Details"].readIfPresent(with: S3ClientTypes.Progress.read(from:))
        return value
    }
}

extension S3ClientTypes.Progress {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Progress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Progress()
        value.bytesScanned = try reader["BytesScanned"].readIfPresent()
        value.bytesProcessed = try reader["BytesProcessed"].readIfPresent()
        value.bytesReturned = try reader["BytesReturned"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.StatsEvent {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.StatsEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.StatsEvent()
        value.details = try reader["Details"].readIfPresent(with: S3ClientTypes.Stats.read(from:))
        return value
    }
}

extension S3ClientTypes.Stats {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.Stats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.Stats()
        value.bytesScanned = try reader["BytesScanned"].readIfPresent()
        value.bytesProcessed = try reader["BytesProcessed"].readIfPresent()
        value.bytesReturned = try reader["BytesReturned"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.RecordsEvent {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.RecordsEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.RecordsEvent()
        value.payload = try reader["Payload"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.CopyPartResult {

    static func read(from reader: SmithyXML.Reader) throws -> S3ClientTypes.CopyPartResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = S3ClientTypes.CopyPartResult()
        value.eTag = try reader["ETag"].readIfPresent()
        value.lastModified = try reader["LastModified"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.checksumCRC32 = try reader["ChecksumCRC32"].readIfPresent()
        value.checksumCRC32C = try reader["ChecksumCRC32C"].readIfPresent()
        value.checksumSHA1 = try reader["ChecksumSHA1"].readIfPresent()
        value.checksumSHA256 = try reader["ChecksumSHA256"].readIfPresent()
        return value
    }
}

extension S3ClientTypes.CompletedMultipartUpload {

    static func write(value: S3ClientTypes.CompletedMultipartUpload?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Part"].writeList(value.parts, memberWritingClosure: S3ClientTypes.CompletedPart.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }
}

extension S3ClientTypes.CompletedPart {

    static func write(value: S3ClientTypes.CompletedPart?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ChecksumCRC32"].write(value.checksumCRC32)
        try writer["ChecksumCRC32C"].write(value.checksumCRC32C)
        try writer["ChecksumSHA1"].write(value.checksumSHA1)
        try writer["ChecksumSHA256"].write(value.checksumSHA256)
        try writer["ETag"].write(value.eTag)
        try writer["PartNumber"].write(value.partNumber)
    }
}

extension S3ClientTypes.CreateBucketConfiguration {

    static func write(value: S3ClientTypes.CreateBucketConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket, with: S3ClientTypes.BucketInfo.write(value:to:))
        try writer["Location"].write(value.location, with: S3ClientTypes.LocationInfo.write(value:to:))
        try writer["LocationConstraint"].write(value.locationConstraint)
    }
}

extension S3ClientTypes.BucketInfo {

    static func write(value: S3ClientTypes.BucketInfo?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["DataRedundancy"].write(value.dataRedundancy)
        try writer["Type"].write(value.type)
    }
}

extension S3ClientTypes.LocationInfo {

    static func write(value: S3ClientTypes.LocationInfo?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Type"].write(value.type)
    }
}

extension S3ClientTypes.Delete {

    static func write(value: S3ClientTypes.Delete?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Object"].writeList(value.objects, memberWritingClosure: S3ClientTypes.ObjectIdentifier.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["Quiet"].write(value.quiet)
    }
}

extension S3ClientTypes.ObjectIdentifier {

    static func write(value: S3ClientTypes.ObjectIdentifier?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["VersionId"].write(value.versionId)
    }
}

extension S3ClientTypes.AccelerateConfiguration {

    static func write(value: S3ClientTypes.AccelerateConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }
}

extension S3ClientTypes.AccessControlPolicy {

    static func write(value: S3ClientTypes.AccessControlPolicy?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessControlList"].writeList(value.grants, memberWritingClosure: S3ClientTypes.Grant.write(value:to:), memberNodeInfo: "Grant", isFlattened: false)
        try writer["Owner"].write(value.owner, with: S3ClientTypes.Owner.write(value:to:))
    }
}

extension S3ClientTypes.CORSConfiguration {

    static func write(value: S3ClientTypes.CORSConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CORSRule"].writeList(value.corsRules, memberWritingClosure: S3ClientTypes.CORSRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }
}

extension S3ClientTypes.BucketLifecycleConfiguration {

    static func write(value: S3ClientTypes.BucketLifecycleConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Rule"].writeList(value.rules, memberWritingClosure: S3ClientTypes.LifecycleRule.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }
}

extension S3ClientTypes.BucketLoggingStatus {

    static func write(value: S3ClientTypes.BucketLoggingStatus?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["LoggingEnabled"].write(value.loggingEnabled, with: S3ClientTypes.LoggingEnabled.write(value:to:))
    }
}

extension S3ClientTypes.NotificationConfiguration {

    static func write(value: S3ClientTypes.NotificationConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["EventBridgeConfiguration"].write(value.eventBridgeConfiguration, with: S3ClientTypes.EventBridgeConfiguration.write(value:to:))
        try writer["CloudFunctionConfiguration"].writeList(value.lambdaFunctionConfigurations, memberWritingClosure: S3ClientTypes.LambdaFunctionConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["QueueConfiguration"].writeList(value.queueConfigurations, memberWritingClosure: S3ClientTypes.QueueConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: true)
        try writer["TopicConfiguration"].writeList(value.topicConfigurations, memberWritingClosure: S3ClientTypes.TopicConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: true)
    }
}

extension S3ClientTypes.RequestPaymentConfiguration {

    static func write(value: S3ClientTypes.RequestPaymentConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Payer"].write(value.payer)
    }
}

extension S3ClientTypes.Tagging {

    static func write(value: S3ClientTypes.Tagging?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["TagSet"].writeList(value.tagSet, memberWritingClosure: S3ClientTypes.Tag.write(value:to:), memberNodeInfo: "Tag", isFlattened: false)
    }
}

extension S3ClientTypes.VersioningConfiguration {

    static func write(value: S3ClientTypes.VersioningConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["MfaDelete"].write(value.mfaDelete)
        try writer["Status"].write(value.status)
    }
}

extension S3ClientTypes.WebsiteConfiguration {

    static func write(value: S3ClientTypes.WebsiteConfiguration?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["ErrorDocument"].write(value.errorDocument, with: S3ClientTypes.ErrorDocument.write(value:to:))
        try writer["IndexDocument"].write(value.indexDocument, with: S3ClientTypes.IndexDocument.write(value:to:))
        try writer["RedirectAllRequestsTo"].write(value.redirectAllRequestsTo, with: S3ClientTypes.RedirectAllRequestsTo.write(value:to:))
        try writer["RoutingRules"].writeList(value.routingRules, memberWritingClosure: S3ClientTypes.RoutingRule.write(value:to:), memberNodeInfo: "RoutingRule", isFlattened: false)
    }
}

extension S3ClientTypes.RestoreRequest {

    static func write(value: S3ClientTypes.RestoreRequest?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Days"].write(value.days)
        try writer["Description"].write(value.description)
        try writer["GlacierJobParameters"].write(value.glacierJobParameters, with: S3ClientTypes.GlacierJobParameters.write(value:to:))
        try writer["OutputLocation"].write(value.outputLocation, with: S3ClientTypes.OutputLocation.write(value:to:))
        try writer["SelectParameters"].write(value.selectParameters, with: S3ClientTypes.SelectParameters.write(value:to:))
        try writer["Tier"].write(value.tier)
        try writer["Type"].write(value.type)
    }
}

extension S3ClientTypes.OutputLocation {

    static func write(value: S3ClientTypes.OutputLocation?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["S3"].write(value.s3, with: S3ClientTypes.S3Location.write(value:to:))
    }
}

extension S3ClientTypes.S3Location {

    static func write(value: S3ClientTypes.S3Location?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AccessControlList"].writeList(value.accessControlList, memberWritingClosure: S3ClientTypes.Grant.write(value:to:), memberNodeInfo: "Grant", isFlattened: false)
        try writer["BucketName"].write(value.bucketName)
        try writer["CannedACL"].write(value.cannedACL)
        try writer["Encryption"].write(value.encryption, with: S3ClientTypes.Encryption.write(value:to:))
        try writer["Prefix"].write(value.`prefix`)
        try writer["StorageClass"].write(value.storageClass)
        try writer["Tagging"].write(value.tagging, with: S3ClientTypes.Tagging.write(value:to:))
        try writer["UserMetadata"].writeList(value.userMetadata, memberWritingClosure: S3ClientTypes.MetadataEntry.write(value:to:), memberNodeInfo: "MetadataEntry", isFlattened: false)
    }
}

extension S3ClientTypes.MetadataEntry {

    static func write(value: S3ClientTypes.MetadataEntry?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension S3ClientTypes.Encryption {

    static func write(value: S3ClientTypes.Encryption?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["EncryptionType"].write(value.encryptionType)
        try writer["KMSContext"].write(value.kmsContext)
        try writer["KMSKeyId"].write(value.kmsKeyId)
    }
}

extension S3ClientTypes.SelectParameters {

    static func write(value: S3ClientTypes.SelectParameters?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Expression"].write(value.expression)
        try writer["ExpressionType"].write(value.expressionType)
        try writer["InputSerialization"].write(value.inputSerialization, with: S3ClientTypes.InputSerialization.write(value:to:))
        try writer["OutputSerialization"].write(value.outputSerialization, with: S3ClientTypes.OutputSerialization.write(value:to:))
    }
}

extension S3ClientTypes.OutputSerialization {

    static func write(value: S3ClientTypes.OutputSerialization?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CSV"].write(value.csv, with: S3ClientTypes.CSVOutput.write(value:to:))
        try writer["JSON"].write(value.json, with: S3ClientTypes.JSONOutput.write(value:to:))
    }
}

extension S3ClientTypes.JSONOutput {

    static func write(value: S3ClientTypes.JSONOutput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["RecordDelimiter"].write(value.recordDelimiter)
    }
}

extension S3ClientTypes.CSVOutput {

    static func write(value: S3ClientTypes.CSVOutput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["FieldDelimiter"].write(value.fieldDelimiter)
        try writer["QuoteCharacter"].write(value.quoteCharacter)
        try writer["QuoteEscapeCharacter"].write(value.quoteEscapeCharacter)
        try writer["QuoteFields"].write(value.quoteFields)
        try writer["RecordDelimiter"].write(value.recordDelimiter)
    }
}

extension S3ClientTypes.InputSerialization {

    static func write(value: S3ClientTypes.InputSerialization?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["CSV"].write(value.csv, with: S3ClientTypes.CSVInput.write(value:to:))
        try writer["CompressionType"].write(value.compressionType)
        try writer["JSON"].write(value.json, with: S3ClientTypes.JSONInput.write(value:to:))
        try writer["Parquet"].write(value.parquet, with: S3ClientTypes.ParquetInput.write(value:to:))
    }
}

extension S3ClientTypes.ParquetInput {

    static func write(value: S3ClientTypes.ParquetInput?, to writer: SmithyXML.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension S3ClientTypes.JSONInput {

    static func write(value: S3ClientTypes.JSONInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
    }
}

extension S3ClientTypes.CSVInput {

    static func write(value: S3ClientTypes.CSVInput?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["AllowQuotedRecordDelimiter"].write(value.allowQuotedRecordDelimiter)
        try writer["Comments"].write(value.comments)
        try writer["FieldDelimiter"].write(value.fieldDelimiter)
        try writer["FileHeaderInfo"].write(value.fileHeaderInfo)
        try writer["QuoteCharacter"].write(value.quoteCharacter)
        try writer["QuoteEscapeCharacter"].write(value.quoteEscapeCharacter)
        try writer["RecordDelimiter"].write(value.recordDelimiter)
    }
}

extension S3ClientTypes.GlacierJobParameters {

    static func write(value: S3ClientTypes.GlacierJobParameters?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Tier"].write(value.tier)
    }
}

extension S3ClientTypes.RequestProgress {

    static func write(value: S3ClientTypes.RequestProgress?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }
}

extension S3ClientTypes.ScanRange {

    static func write(value: S3ClientTypes.ScanRange?, to writer: SmithyXML.Writer) throws {
        guard let value else { return }
        try writer["End"].write(value.end)
        try writer["Start"].write(value.start)
    }
}

extension GetObjectInput {
    public func presignURL(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> Foundation.URL? {
        let serviceName = "S3"
        let input = self
        let client: (SmithyHTTPAPI.HTTPRequest, Smithy.Context) async throws -> SmithyHTTPAPI.HTTPResponse = { (_, _) in
            throw Smithy.ClientError.unknownError("No HTTP client configured for presigned request")
        }
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .get)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withAuthSchemes(value: config.authSchemes ?? [])
                      .withAuthSchemeResolver(value: config.authSchemeResolver)
                      .withUnsignedPayloadTrait(value: false)
                      .withSocketTimeout(value: config.httpClientConfiguration.socketTimeout)
                      .withIdentityResolver(value: config.bearerTokenIdentityResolver, schemeID: "smithy.api#httpBearerAuth")
                      .withFlowType(value: .PRESIGN_URL)
                      .withExpiration(value: expiration)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4")
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetObjectInput, GetObjectOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetObjectInput, GetObjectOutput>(GetObjectInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetObjectInput, GetObjectOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetObjectOutput>(GetObjectOutput.httpOutput(from:), GetObjectOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetObjectInput, GetObjectOutput>(clientLogMode: config.clientLogMode))
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(AWSClientRuntime.AWSRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.useGlobalEndpoint ?? false)
        context.attributes.set(key: Smithy.AttributeKey<EndpointParams>(name: "EndpointParams"), value: endpointParams)
        builder.applyEndpoint(AWSClientRuntime.EndpointResolverMiddleware<GetObjectOutput, EndpointParams>(endpointResolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }, endpointParams: endpointParams))
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.FlexibleChecksumsResponseMiddleware<GetObjectInput, GetObjectOutput>(validationMode: true))
        builder.serialize(GetObjectInputGETQueryItemMiddleware())
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "S3")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetObject")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.presignRequest(input: input).endpoint.url
    }
}

public struct GetObjectInputGETQueryItemMiddleware {
    public let id: Swift.String = "GetObjectInputGETQueryItemMiddleware"

    public init() {}
}
extension GetObjectInputGETQueryItemMiddleware: Smithy.RequestMessageSerializer {
    public typealias InputType = GetObjectInput
    public typealias RequestType = SmithyHTTPAPI.HTTPRequest

    public func apply(input: InputType, builder: SmithyHTTPAPI.HTTPRequestBuilder, attributes: Smithy.Context) throws {
        if let bucket = input.bucket {
            let queryItem = Smithy.URIQueryItem(name: "Bucket".urlPercentEncoding(), value: Swift.String(bucket).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let ifMatch = input.ifMatch {
            let queryItem = Smithy.URIQueryItem(name: "IfMatch".urlPercentEncoding(), value: Swift.String(ifMatch).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let ifNoneMatch = input.ifNoneMatch {
            let queryItem = Smithy.URIQueryItem(name: "IfNoneMatch".urlPercentEncoding(), value: Swift.String(ifNoneMatch).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let key = input.key {
            let queryItem = Smithy.URIQueryItem(name: "Key".urlPercentEncoding(), value: Swift.String(key).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let range = input.range {
            let queryItem = Smithy.URIQueryItem(name: "Range".urlPercentEncoding(), value: Swift.String(range).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let responseCacheControl = input.responseCacheControl {
            let queryItem = Smithy.URIQueryItem(name: "ResponseCacheControl".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let responseContentDisposition = input.responseContentDisposition {
            let queryItem = Smithy.URIQueryItem(name: "ResponseContentDisposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let responseContentEncoding = input.responseContentEncoding {
            let queryItem = Smithy.URIQueryItem(name: "ResponseContentEncoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let responseContentLanguage = input.responseContentLanguage {
            let queryItem = Smithy.URIQueryItem(name: "ResponseContentLanguage".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let responseContentType = input.responseContentType {
            let queryItem = Smithy.URIQueryItem(name: "ResponseContentType".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let versionId = input.versionId {
            let queryItem = Smithy.URIQueryItem(name: "VersionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let sseCustomerAlgorithm = input.sseCustomerAlgorithm {
            let queryItem = Smithy.URIQueryItem(name: "SSECustomerAlgorithm".urlPercentEncoding(), value: Swift.String(sseCustomerAlgorithm).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let sseCustomerKey = input.sseCustomerKey {
            let queryItem = Smithy.URIQueryItem(name: "SSECustomerKey".urlPercentEncoding(), value: Swift.String(sseCustomerKey).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let sseCustomerKeyMD5 = input.sseCustomerKeyMD5 {
            let queryItem = Smithy.URIQueryItem(name: "SSECustomerKeyMD5".urlPercentEncoding(), value: Swift.String(sseCustomerKeyMD5).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let requestPayer = input.requestPayer {
            let queryItem = Smithy.URIQueryItem(name: "RequestPayer".urlPercentEncoding(), value: Swift.String(requestPayer.rawValue).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let expectedBucketOwner = input.expectedBucketOwner {
            let queryItem = Smithy.URIQueryItem(name: "ExpectedBucketOwner".urlPercentEncoding(), value: Swift.String(expectedBucketOwner).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
        if let checksumMode = input.checksumMode {
            let queryItem = Smithy.URIQueryItem(name: "ChecksumMode".urlPercentEncoding(), value: Swift.String(checksumMode.rawValue).urlPercentEncoding())
            builder.withQueryItem(queryItem)
        }
    }
}

extension PutObjectInput {
    public func presignURL(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> Foundation.URL? {
        let serviceName = "S3"
        let input = self
        let client: (SmithyHTTPAPI.HTTPRequest, Smithy.Context) async throws -> SmithyHTTPAPI.HTTPResponse = { (_, _) in
            throw Smithy.ClientError.unknownError("No HTTP client configured for presigned request")
        }
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withAuthSchemes(value: config.authSchemes ?? [])
                      .withAuthSchemeResolver(value: config.authSchemeResolver)
                      .withUnsignedPayloadTrait(value: false)
                      .withSocketTimeout(value: config.httpClientConfiguration.socketTimeout)
                      .withIdentityResolver(value: config.bearerTokenIdentityResolver, schemeID: "smithy.api#httpBearerAuth")
                      .withFlowType(value: .PRESIGN_URL)
                      .withExpiration(value: expiration)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4")
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<PutObjectInput, PutObjectOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutput>(PutObjectInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<PutObjectOutput>(PutObjectOutput.httpOutput(from:), PutObjectOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<PutObjectInput, PutObjectOutput>(clientLogMode: config.clientLogMode))
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(AWSClientRuntime.AWSRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<PutObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.useGlobalEndpoint ?? false)
        context.attributes.set(key: Smithy.AttributeKey<EndpointParams>(name: "EndpointParams"), value: endpointParams)
        builder.applyEndpoint(AWSClientRuntime.EndpointResolverMiddleware<PutObjectOutput, EndpointParams>(endpointResolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }, endpointParams: endpointParams))
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<PutObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.AWSS3ErrorWith200StatusXMLMiddleware<PutObjectInput, PutObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.FlexibleChecksumsRequestMiddleware<PutObjectInput, PutObjectOutput>(checksumAlgorithm: input.checksumAlgorithm?.rawValue))
        builder.serialize(PutObjectPresignedURLMiddleware())
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "S3")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "PutObject")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.presignRequest(input: input).endpoint.url
    }
}

public struct PutObjectPresignedURLMiddleware {
    public let id: Swift.String = "PutObjectPresignedURLMiddleware"

    public init() {}
}
extension PutObjectPresignedURLMiddleware: Smithy.RequestMessageSerializer {
    public typealias InputType = PutObjectInput
    public typealias RequestType = SmithyHTTPAPI.HTTPRequest

    public func apply(input: InputType, builder: SmithyHTTPAPI.HTTPRequestBuilder, attributes: Smithy.Context) throws {
        let metadata = input.metadata ?? [:]
        for (metadataKey, metadataValue) in metadata {
            let queryItem = Smithy.URIQueryItem(
                name: "x-amz-meta-\(metadataKey.urlPercentEncoding())",
                value: metadataValue.urlPercentEncoding()
            )
            builder.withQueryItem(queryItem)
        }
    }
}

extension GetObjectInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> SmithyHTTPAPI.HTTPRequest? {
        let serviceName = "S3"
        let input = self
        let client: (SmithyHTTPAPI.HTTPRequest, Smithy.Context) async throws -> SmithyHTTPAPI.HTTPResponse = { (_, _) in
            throw Smithy.ClientError.unknownError("No HTTP client configured for presigned request")
        }
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .get)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withAuthSchemes(value: config.authSchemes ?? [])
                      .withAuthSchemeResolver(value: config.authSchemeResolver)
                      .withUnsignedPayloadTrait(value: false)
                      .withSocketTimeout(value: config.httpClientConfiguration.socketTimeout)
                      .withIdentityResolver(value: config.bearerTokenIdentityResolver, schemeID: "smithy.api#httpBearerAuth")
                      .withFlowType(value: .PRESIGN_REQUEST)
                      .withExpiration(value: expiration)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4")
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<GetObjectInput, GetObjectOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<GetObjectInput, GetObjectOutput>(GetObjectInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<GetObjectInput, GetObjectOutput>())
        builder.serialize(ClientRuntime.HeaderMiddleware<GetObjectInput, GetObjectOutput>(GetObjectInput.headerProvider(_:)))
        builder.serialize(ClientRuntime.QueryItemMiddleware<GetObjectInput, GetObjectOutput>(GetObjectInput.queryItemProvider(_:)))
        builder.deserialize(ClientRuntime.DeserializeMiddleware<GetObjectOutput>(GetObjectOutput.httpOutput(from:), GetObjectOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<GetObjectInput, GetObjectOutput>(clientLogMode: config.clientLogMode))
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(AWSClientRuntime.AWSRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<GetObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.useGlobalEndpoint ?? false)
        context.attributes.set(key: Smithy.AttributeKey<EndpointParams>(name: "EndpointParams"), value: endpointParams)
        builder.applyEndpoint(AWSClientRuntime.EndpointResolverMiddleware<GetObjectOutput, EndpointParams>(endpointResolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }, endpointParams: endpointParams))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<GetObjectInput, GetObjectOutput>(serviceID: serviceName, version: S3Client.version, config: config))
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<GetObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.FlexibleChecksumsResponseMiddleware<GetObjectInput, GetObjectOutput>(validationMode: true))
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<GetObjectInput, GetObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<GetObjectInput, GetObjectOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "S3")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "GetObject")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.presignRequest(input: input)
    }
}

extension PutObjectInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> SmithyHTTPAPI.HTTPRequest? {
        let serviceName = "S3"
        let input = self
        let client: (SmithyHTTPAPI.HTTPRequest, Smithy.Context) async throws -> SmithyHTTPAPI.HTTPResponse = { (_, _) in
            throw Smithy.ClientError.unknownError("No HTTP client configured for presigned request")
        }
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "putObject")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withAuthSchemes(value: config.authSchemes ?? [])
                      .withAuthSchemeResolver(value: config.authSchemeResolver)
                      .withUnsignedPayloadTrait(value: false)
                      .withSocketTimeout(value: config.httpClientConfiguration.socketTimeout)
                      .withIdentityResolver(value: config.bearerTokenIdentityResolver, schemeID: "smithy.api#httpBearerAuth")
                      .withFlowType(value: .PRESIGN_REQUEST)
                      .withExpiration(value: expiration)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4")
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<PutObjectInput, PutObjectOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<PutObjectInput, PutObjectOutput>(PutObjectInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<PutObjectInput, PutObjectOutput>())
        builder.serialize(ClientRuntime.HeaderMiddleware<PutObjectInput, PutObjectOutput>(PutObjectInput.headerProvider(_:)))
        builder.serialize(ClientRuntime.QueryItemMiddleware<PutObjectInput, PutObjectOutput>(PutObjectInput.queryItemProvider(_:)))
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<PutObjectInput, PutObjectOutput>(contentType: "application/octet-stream"))
        builder.serialize(ClientRuntime.BlobStreamBodyMiddleware<PutObjectInput, PutObjectOutput>(keyPath: \.body))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<PutObjectInput, PutObjectOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<PutObjectOutput>(PutObjectOutput.httpOutput(from:), PutObjectOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<PutObjectInput, PutObjectOutput>(clientLogMode: config.clientLogMode))
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(AWSClientRuntime.AWSRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<PutObjectOutput>())
        let endpointParams = EndpointParams(accelerate: config.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.useGlobalEndpoint ?? false)
        context.attributes.set(key: Smithy.AttributeKey<EndpointParams>(name: "EndpointParams"), value: endpointParams)
        builder.applyEndpoint(AWSClientRuntime.EndpointResolverMiddleware<PutObjectOutput, EndpointParams>(endpointResolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }, endpointParams: endpointParams))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<PutObjectInput, PutObjectOutput>(serviceID: serviceName, version: S3Client.version, config: config))
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<PutObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.AWSS3ErrorWith200StatusXMLMiddleware<PutObjectInput, PutObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.FlexibleChecksumsRequestMiddleware<PutObjectInput, PutObjectOutput>(checksumAlgorithm: input.checksumAlgorithm?.rawValue))
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<PutObjectInput, PutObjectOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<PutObjectInput, PutObjectOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "S3")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "PutObject")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.presignRequest(input: input)
    }
}

extension UploadPartInput {
    public func presign(config: S3Client.S3ClientConfiguration, expiration: Foundation.TimeInterval) async throws -> SmithyHTTPAPI.HTTPRequest? {
        let serviceName = "S3"
        let input = self
        let client: (SmithyHTTPAPI.HTTPRequest, Smithy.Context) async throws -> SmithyHTTPAPI.HTTPResponse = { (_, _) in
            throw Smithy.ClientError.unknownError("No HTTP client configured for presigned request")
        }
        let context = Smithy.ContextBuilder()
                      .withMethod(value: .put)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "uploadPart")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withPartitionID(value: config.partitionID)
                      .withAuthSchemes(value: config.authSchemes ?? [])
                      .withAuthSchemeResolver(value: config.authSchemeResolver)
                      .withUnsignedPayloadTrait(value: false)
                      .withSocketTimeout(value: config.httpClientConfiguration.socketTimeout)
                      .withIdentityResolver(value: config.bearerTokenIdentityResolver, schemeID: "smithy.api#httpBearerAuth")
                      .withFlowType(value: .PRESIGN_REQUEST)
                      .withExpiration(value: expiration)
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4")
                      .withIdentityResolver(value: config.awsCredentialIdentityResolver, schemeID: "aws.auth#sigv4a")
                      .withRegion(value: config.region)
                      .withSigningName(value: "s3")
                      .withSigningRegion(value: config.signingRegion)
                      .build()
        let builder = ClientRuntime.OrchestratorBuilder<UploadPartInput, UploadPartOutput, SmithyHTTPAPI.HTTPRequest, SmithyHTTPAPI.HTTPResponse>()
        config.interceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        config.httpInterceptorProviders.forEach { provider in
            builder.interceptors.add(provider.create())
        }
        builder.interceptors.add(ClientRuntime.URLPathMiddleware<UploadPartInput, UploadPartOutput>(UploadPartInput.urlPathProvider(_:)))
        builder.interceptors.add(ClientRuntime.URLHostMiddleware<UploadPartInput, UploadPartOutput>())
        builder.serialize(ClientRuntime.HeaderMiddleware<UploadPartInput, UploadPartOutput>(UploadPartInput.headerProvider(_:)))
        builder.serialize(ClientRuntime.QueryItemMiddleware<UploadPartInput, UploadPartOutput>(UploadPartInput.queryItemProvider(_:)))
        builder.interceptors.add(ClientRuntime.ContentTypeMiddleware<UploadPartInput, UploadPartOutput>(contentType: "application/octet-stream"))
        builder.serialize(ClientRuntime.BlobStreamBodyMiddleware<UploadPartInput, UploadPartOutput>(keyPath: \.body))
        builder.interceptors.add(ClientRuntime.ContentLengthMiddleware<UploadPartInput, UploadPartOutput>())
        builder.deserialize(ClientRuntime.DeserializeMiddleware<UploadPartOutput>(UploadPartOutput.httpOutput(from:), UploadPartOutputError.httpError(from:)))
        builder.interceptors.add(ClientRuntime.LoggerMiddleware<UploadPartInput, UploadPartOutput>(clientLogMode: config.clientLogMode))
        builder.retryStrategy(SmithyRetries.DefaultRetryStrategy(options: config.retryStrategyOptions))
        builder.retryErrorInfoProvider(AWSClientRuntime.AWSRetryErrorInfoProvider.errorInfo(for:))
        builder.applySigner(ClientRuntime.SignerMiddleware<UploadPartOutput>())
        let endpointParams = EndpointParams(accelerate: config.accelerate ?? false, bucket: input.bucket, disableMultiRegionAccessPoints: config.disableMultiRegionAccessPoints ?? false, disableS3ExpressSessionAuth: config.disableS3ExpressSessionAuth, endpoint: config.endpoint, forcePathStyle: config.forcePathStyle ?? false, key: input.key, region: config.region, useArnRegion: config.useArnRegion, useDualStack: config.useDualStack ?? false, useFIPS: config.useFIPS ?? false, useGlobalEndpoint: config.useGlobalEndpoint ?? false)
        context.attributes.set(key: Smithy.AttributeKey<EndpointParams>(name: "EndpointParams"), value: endpointParams)
        builder.applyEndpoint(AWSClientRuntime.EndpointResolverMiddleware<UploadPartOutput, EndpointParams>(endpointResolverBlock: { [config] in try config.endpointResolver.resolve(params: $0) }, endpointParams: endpointParams))
        builder.interceptors.add(AWSClientRuntime.UserAgentMiddleware<UploadPartInput, UploadPartOutput>(serviceID: serviceName, version: S3Client.version, config: config))
        builder.selectAuthScheme(ClientRuntime.AuthSchemeMiddleware<UploadPartOutput>())
        builder.interceptors.add(AWSClientRuntime.AWSS3ErrorWith200StatusXMLMiddleware<UploadPartInput, UploadPartOutput>())
        builder.interceptors.add(AWSClientRuntime.FlexibleChecksumsRequestMiddleware<UploadPartInput, UploadPartOutput>(checksumAlgorithm: input.checksumAlgorithm?.rawValue))
        builder.interceptors.add(AWSClientRuntime.AmzSdkInvocationIdMiddleware<UploadPartInput, UploadPartOutput>())
        builder.interceptors.add(AWSClientRuntime.AmzSdkRequestMiddleware<UploadPartInput, UploadPartOutput>(maxRetries: config.retryStrategyOptions.maxRetriesBase))
        var metricsAttributes = Smithy.Attributes()
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.service, value: "S3")
        metricsAttributes.set(key: ClientRuntime.OrchestratorMetricsAttributesKeys.method, value: "UploadPart")
        let op = builder.attributes(context)
            .telemetry(ClientRuntime.OrchestratorTelemetry(
                telemetryProvider: config.telemetryProvider,
                metricsAttributes: metricsAttributes,
                meterScope: serviceName,
                tracerScope: serviceName
            ))
            .executeRequest(client)
            .build()
        return try await op.presignRequest(input: input)
    }
}

public enum S3ClientTypes {}
